
AirMouse_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab54  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000610  0800ac68  0800ac68  0000bc68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b278  0800b278  0000d1e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b278  0800b278  0000c278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b280  0800b280  0000d1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b280  0800b280  0000c280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b284  0800b284  0000c284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  0800b288  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008d4  200001e4  0800b46c  0000d1e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ab8  0800b46c  0000dab8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d1e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000130cf  00000000  00000000  0000d20d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000354a  00000000  00000000  000202dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012e0  00000000  00000000  00023828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ea8  00000000  00000000  00024b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005624  00000000  00000000  000259b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001847a  00000000  00000000  0002afd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092063  00000000  00000000  0004344e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d54b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006344  00000000  00000000  000d54f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  000db838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ac4c 	.word	0x0800ac4c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	0800ac4c 	.word	0x0800ac4c

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <__aeabi_drsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000168:	e002      	b.n	8000170 <__adddf3>
 800016a:	bf00      	nop

0800016c <__aeabi_dsub>:
 800016c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000170 <__adddf3>:
 8000170:	b530      	push	{r4, r5, lr}
 8000172:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000176:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800017a:	ea94 0f05 	teq	r4, r5
 800017e:	bf08      	it	eq
 8000180:	ea90 0f02 	teqeq	r0, r2
 8000184:	bf1f      	itttt	ne
 8000186:	ea54 0c00 	orrsne.w	ip, r4, r0
 800018a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000192:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000196:	f000 80e2 	beq.w	800035e <__adddf3+0x1ee>
 800019a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001a2:	bfb8      	it	lt
 80001a4:	426d      	neglt	r5, r5
 80001a6:	dd0c      	ble.n	80001c2 <__adddf3+0x52>
 80001a8:	442c      	add	r4, r5
 80001aa:	ea80 0202 	eor.w	r2, r0, r2
 80001ae:	ea81 0303 	eor.w	r3, r1, r3
 80001b2:	ea82 0000 	eor.w	r0, r2, r0
 80001b6:	ea83 0101 	eor.w	r1, r3, r1
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	2d36      	cmp	r5, #54	@ 0x36
 80001c4:	bf88      	it	hi
 80001c6:	bd30      	pophi	{r4, r5, pc}
 80001c8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001d0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x70>
 80001da:	4240      	negs	r0, r0
 80001dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001e0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001ec:	d002      	beq.n	80001f4 <__adddf3+0x84>
 80001ee:	4252      	negs	r2, r2
 80001f0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f4:	ea94 0f05 	teq	r4, r5
 80001f8:	f000 80a7 	beq.w	800034a <__adddf3+0x1da>
 80001fc:	f1a4 0401 	sub.w	r4, r4, #1
 8000200:	f1d5 0e20 	rsbs	lr, r5, #32
 8000204:	db0d      	blt.n	8000222 <__adddf3+0xb2>
 8000206:	fa02 fc0e 	lsl.w	ip, r2, lr
 800020a:	fa22 f205 	lsr.w	r2, r2, r5
 800020e:	1880      	adds	r0, r0, r2
 8000210:	f141 0100 	adc.w	r1, r1, #0
 8000214:	fa03 f20e 	lsl.w	r2, r3, lr
 8000218:	1880      	adds	r0, r0, r2
 800021a:	fa43 f305 	asr.w	r3, r3, r5
 800021e:	4159      	adcs	r1, r3
 8000220:	e00e      	b.n	8000240 <__adddf3+0xd0>
 8000222:	f1a5 0520 	sub.w	r5, r5, #32
 8000226:	f10e 0e20 	add.w	lr, lr, #32
 800022a:	2a01      	cmp	r2, #1
 800022c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000230:	bf28      	it	cs
 8000232:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	18c0      	adds	r0, r0, r3
 800023c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000240:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000244:	d507      	bpl.n	8000256 <__adddf3+0xe6>
 8000246:	f04f 0e00 	mov.w	lr, #0
 800024a:	f1dc 0c00 	rsbs	ip, ip, #0
 800024e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000252:	eb6e 0101 	sbc.w	r1, lr, r1
 8000256:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800025a:	d31b      	bcc.n	8000294 <__adddf3+0x124>
 800025c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000260:	d30c      	bcc.n	800027c <__adddf3+0x10c>
 8000262:	0849      	lsrs	r1, r1, #1
 8000264:	ea5f 0030 	movs.w	r0, r0, rrx
 8000268:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800026c:	f104 0401 	add.w	r4, r4, #1
 8000270:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000274:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000278:	f080 809a 	bcs.w	80003b0 <__adddf3+0x240>
 800027c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000280:	bf08      	it	eq
 8000282:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000286:	f150 0000 	adcs.w	r0, r0, #0
 800028a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028e:	ea41 0105 	orr.w	r1, r1, r5
 8000292:	bd30      	pop	{r4, r5, pc}
 8000294:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000298:	4140      	adcs	r0, r0
 800029a:	eb41 0101 	adc.w	r1, r1, r1
 800029e:	3c01      	subs	r4, #1
 80002a0:	bf28      	it	cs
 80002a2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a6:	d2e9      	bcs.n	800027c <__adddf3+0x10c>
 80002a8:	f091 0f00 	teq	r1, #0
 80002ac:	bf04      	itt	eq
 80002ae:	4601      	moveq	r1, r0
 80002b0:	2000      	moveq	r0, #0
 80002b2:	fab1 f381 	clz	r3, r1
 80002b6:	bf08      	it	eq
 80002b8:	3320      	addeq	r3, #32
 80002ba:	f1a3 030b 	sub.w	r3, r3, #11
 80002be:	f1b3 0220 	subs.w	r2, r3, #32
 80002c2:	da0c      	bge.n	80002de <__adddf3+0x16e>
 80002c4:	320c      	adds	r2, #12
 80002c6:	dd08      	ble.n	80002da <__adddf3+0x16a>
 80002c8:	f102 0c14 	add.w	ip, r2, #20
 80002cc:	f1c2 020c 	rsb	r2, r2, #12
 80002d0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d4:	fa21 f102 	lsr.w	r1, r1, r2
 80002d8:	e00c      	b.n	80002f4 <__adddf3+0x184>
 80002da:	f102 0214 	add.w	r2, r2, #20
 80002de:	bfd8      	it	le
 80002e0:	f1c2 0c20 	rsble	ip, r2, #32
 80002e4:	fa01 f102 	lsl.w	r1, r1, r2
 80002e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002ec:	bfdc      	itt	le
 80002ee:	ea41 010c 	orrle.w	r1, r1, ip
 80002f2:	4090      	lslle	r0, r2
 80002f4:	1ae4      	subs	r4, r4, r3
 80002f6:	bfa2      	ittt	ge
 80002f8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002fc:	4329      	orrge	r1, r5
 80002fe:	bd30      	popge	{r4, r5, pc}
 8000300:	ea6f 0404 	mvn.w	r4, r4
 8000304:	3c1f      	subs	r4, #31
 8000306:	da1c      	bge.n	8000342 <__adddf3+0x1d2>
 8000308:	340c      	adds	r4, #12
 800030a:	dc0e      	bgt.n	800032a <__adddf3+0x1ba>
 800030c:	f104 0414 	add.w	r4, r4, #20
 8000310:	f1c4 0220 	rsb	r2, r4, #32
 8000314:	fa20 f004 	lsr.w	r0, r0, r4
 8000318:	fa01 f302 	lsl.w	r3, r1, r2
 800031c:	ea40 0003 	orr.w	r0, r0, r3
 8000320:	fa21 f304 	lsr.w	r3, r1, r4
 8000324:	ea45 0103 	orr.w	r1, r5, r3
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	f1c4 040c 	rsb	r4, r4, #12
 800032e:	f1c4 0220 	rsb	r2, r4, #32
 8000332:	fa20 f002 	lsr.w	r0, r0, r2
 8000336:	fa01 f304 	lsl.w	r3, r1, r4
 800033a:	ea40 0003 	orr.w	r0, r0, r3
 800033e:	4629      	mov	r1, r5
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	fa21 f004 	lsr.w	r0, r1, r4
 8000346:	4629      	mov	r1, r5
 8000348:	bd30      	pop	{r4, r5, pc}
 800034a:	f094 0f00 	teq	r4, #0
 800034e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000352:	bf06      	itte	eq
 8000354:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000358:	3401      	addeq	r4, #1
 800035a:	3d01      	subne	r5, #1
 800035c:	e74e      	b.n	80001fc <__adddf3+0x8c>
 800035e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000362:	bf18      	it	ne
 8000364:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000368:	d029      	beq.n	80003be <__adddf3+0x24e>
 800036a:	ea94 0f05 	teq	r4, r5
 800036e:	bf08      	it	eq
 8000370:	ea90 0f02 	teqeq	r0, r2
 8000374:	d005      	beq.n	8000382 <__adddf3+0x212>
 8000376:	ea54 0c00 	orrs.w	ip, r4, r0
 800037a:	bf04      	itt	eq
 800037c:	4619      	moveq	r1, r3
 800037e:	4610      	moveq	r0, r2
 8000380:	bd30      	pop	{r4, r5, pc}
 8000382:	ea91 0f03 	teq	r1, r3
 8000386:	bf1e      	ittt	ne
 8000388:	2100      	movne	r1, #0
 800038a:	2000      	movne	r0, #0
 800038c:	bd30      	popne	{r4, r5, pc}
 800038e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000392:	d105      	bne.n	80003a0 <__adddf3+0x230>
 8000394:	0040      	lsls	r0, r0, #1
 8000396:	4149      	adcs	r1, r1
 8000398:	bf28      	it	cs
 800039a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a4:	bf3c      	itt	cc
 80003a6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003aa:	bd30      	popcc	{r4, r5, pc}
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b8:	f04f 0000 	mov.w	r0, #0
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c2:	bf1a      	itte	ne
 80003c4:	4619      	movne	r1, r3
 80003c6:	4610      	movne	r0, r2
 80003c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003cc:	bf1c      	itt	ne
 80003ce:	460b      	movne	r3, r1
 80003d0:	4602      	movne	r2, r0
 80003d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d6:	bf06      	itte	eq
 80003d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003dc:	ea91 0f03 	teqeq	r1, r3
 80003e0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	bf00      	nop

080003e8 <__aeabi_ui2d>:
 80003e8:	f090 0f00 	teq	r0, #0
 80003ec:	bf04      	itt	eq
 80003ee:	2100      	moveq	r1, #0
 80003f0:	4770      	bxeq	lr
 80003f2:	b530      	push	{r4, r5, lr}
 80003f4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003fc:	f04f 0500 	mov.w	r5, #0
 8000400:	f04f 0100 	mov.w	r1, #0
 8000404:	e750      	b.n	80002a8 <__adddf3+0x138>
 8000406:	bf00      	nop

08000408 <__aeabi_i2d>:
 8000408:	f090 0f00 	teq	r0, #0
 800040c:	bf04      	itt	eq
 800040e:	2100      	moveq	r1, #0
 8000410:	4770      	bxeq	lr
 8000412:	b530      	push	{r4, r5, lr}
 8000414:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000418:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800041c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000420:	bf48      	it	mi
 8000422:	4240      	negmi	r0, r0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e73e      	b.n	80002a8 <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_f2d>:
 800042c:	0042      	lsls	r2, r0, #1
 800042e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000432:	ea4f 0131 	mov.w	r1, r1, rrx
 8000436:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800043a:	bf1f      	itttt	ne
 800043c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000440:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000444:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000448:	4770      	bxne	lr
 800044a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044e:	bf08      	it	eq
 8000450:	4770      	bxeq	lr
 8000452:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000456:	bf04      	itt	eq
 8000458:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000464:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000468:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800046c:	e71c      	b.n	80002a8 <__adddf3+0x138>
 800046e:	bf00      	nop

08000470 <__aeabi_ul2d>:
 8000470:	ea50 0201 	orrs.w	r2, r0, r1
 8000474:	bf08      	it	eq
 8000476:	4770      	bxeq	lr
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	f04f 0500 	mov.w	r5, #0
 800047e:	e00a      	b.n	8000496 <__aeabi_l2d+0x16>

08000480 <__aeabi_l2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048e:	d502      	bpl.n	8000496 <__aeabi_l2d+0x16>
 8000490:	4240      	negs	r0, r0
 8000492:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000496:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004a2:	f43f aed8 	beq.w	8000256 <__adddf3+0xe6>
 80004a6:	f04f 0203 	mov.w	r2, #3
 80004aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ae:	bf18      	it	ne
 80004b0:	3203      	addne	r2, #3
 80004b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b6:	bf18      	it	ne
 80004b8:	3203      	addne	r2, #3
 80004ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004be:	f1c2 0320 	rsb	r3, r2, #32
 80004c2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c6:	fa20 f002 	lsr.w	r0, r0, r2
 80004ca:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ce:	ea40 000e 	orr.w	r0, r0, lr
 80004d2:	fa21 f102 	lsr.w	r1, r1, r2
 80004d6:	4414      	add	r4, r2
 80004d8:	e6bd      	b.n	8000256 <__adddf3+0xe6>
 80004da:	bf00      	nop

080004dc <__aeabi_dmul>:
 80004dc:	b570      	push	{r4, r5, r6, lr}
 80004de:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004e2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004ea:	bf1d      	ittte	ne
 80004ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004f0:	ea94 0f0c 	teqne	r4, ip
 80004f4:	ea95 0f0c 	teqne	r5, ip
 80004f8:	f000 f8de 	bleq	80006b8 <__aeabi_dmul+0x1dc>
 80004fc:	442c      	add	r4, r5
 80004fe:	ea81 0603 	eor.w	r6, r1, r3
 8000502:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000506:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800050a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050e:	bf18      	it	ne
 8000510:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000514:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000518:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800051c:	d038      	beq.n	8000590 <__aeabi_dmul+0xb4>
 800051e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000522:	f04f 0500 	mov.w	r5, #0
 8000526:	fbe1 e502 	umlal	lr, r5, r1, r2
 800052a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000532:	f04f 0600 	mov.w	r6, #0
 8000536:	fbe1 5603 	umlal	r5, r6, r1, r3
 800053a:	f09c 0f00 	teq	ip, #0
 800053e:	bf18      	it	ne
 8000540:	f04e 0e01 	orrne.w	lr, lr, #1
 8000544:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000548:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800054c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000550:	d204      	bcs.n	800055c <__aeabi_dmul+0x80>
 8000552:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000556:	416d      	adcs	r5, r5
 8000558:	eb46 0606 	adc.w	r6, r6, r6
 800055c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000560:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000564:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000568:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800056c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000570:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000574:	bf88      	it	hi
 8000576:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800057a:	d81e      	bhi.n	80005ba <__aeabi_dmul+0xde>
 800057c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000580:	bf08      	it	eq
 8000582:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000586:	f150 0000 	adcs.w	r0, r0, #0
 800058a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058e:	bd70      	pop	{r4, r5, r6, pc}
 8000590:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000594:	ea46 0101 	orr.w	r1, r6, r1
 8000598:	ea40 0002 	orr.w	r0, r0, r2
 800059c:	ea81 0103 	eor.w	r1, r1, r3
 80005a0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a4:	bfc2      	ittt	gt
 80005a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ae:	bd70      	popgt	{r4, r5, r6, pc}
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b4:	f04f 0e00 	mov.w	lr, #0
 80005b8:	3c01      	subs	r4, #1
 80005ba:	f300 80ab 	bgt.w	8000714 <__aeabi_dmul+0x238>
 80005be:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005c2:	bfde      	ittt	le
 80005c4:	2000      	movle	r0, #0
 80005c6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd70      	pople	{r4, r5, r6, pc}
 80005cc:	f1c4 0400 	rsb	r4, r4, #0
 80005d0:	3c20      	subs	r4, #32
 80005d2:	da35      	bge.n	8000640 <__aeabi_dmul+0x164>
 80005d4:	340c      	adds	r4, #12
 80005d6:	dc1b      	bgt.n	8000610 <__aeabi_dmul+0x134>
 80005d8:	f104 0414 	add.w	r4, r4, #20
 80005dc:	f1c4 0520 	rsb	r5, r4, #32
 80005e0:	fa00 f305 	lsl.w	r3, r0, r5
 80005e4:	fa20 f004 	lsr.w	r0, r0, r4
 80005e8:	fa01 f205 	lsl.w	r2, r1, r5
 80005ec:	ea40 0002 	orr.w	r0, r0, r2
 80005f0:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005fc:	fa21 f604 	lsr.w	r6, r1, r4
 8000600:	eb42 0106 	adc.w	r1, r2, r6
 8000604:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000608:	bf08      	it	eq
 800060a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060e:	bd70      	pop	{r4, r5, r6, pc}
 8000610:	f1c4 040c 	rsb	r4, r4, #12
 8000614:	f1c4 0520 	rsb	r5, r4, #32
 8000618:	fa00 f304 	lsl.w	r3, r0, r4
 800061c:	fa20 f005 	lsr.w	r0, r0, r5
 8000620:	fa01 f204 	lsl.w	r2, r1, r4
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800062c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000630:	f141 0100 	adc.w	r1, r1, #0
 8000634:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000638:	bf08      	it	eq
 800063a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063e:	bd70      	pop	{r4, r5, r6, pc}
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f205 	lsl.w	r2, r0, r5
 8000648:	ea4e 0e02 	orr.w	lr, lr, r2
 800064c:	fa20 f304 	lsr.w	r3, r0, r4
 8000650:	fa01 f205 	lsl.w	r2, r1, r5
 8000654:	ea43 0302 	orr.w	r3, r3, r2
 8000658:	fa21 f004 	lsr.w	r0, r1, r4
 800065c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000660:	fa21 f204 	lsr.w	r2, r1, r4
 8000664:	ea20 0002 	bic.w	r0, r0, r2
 8000668:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800066c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000670:	bf08      	it	eq
 8000672:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000676:	bd70      	pop	{r4, r5, r6, pc}
 8000678:	f094 0f00 	teq	r4, #0
 800067c:	d10f      	bne.n	800069e <__aeabi_dmul+0x1c2>
 800067e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000682:	0040      	lsls	r0, r0, #1
 8000684:	eb41 0101 	adc.w	r1, r1, r1
 8000688:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800068c:	bf08      	it	eq
 800068e:	3c01      	subeq	r4, #1
 8000690:	d0f7      	beq.n	8000682 <__aeabi_dmul+0x1a6>
 8000692:	ea41 0106 	orr.w	r1, r1, r6
 8000696:	f095 0f00 	teq	r5, #0
 800069a:	bf18      	it	ne
 800069c:	4770      	bxne	lr
 800069e:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006a2:	0052      	lsls	r2, r2, #1
 80006a4:	eb43 0303 	adc.w	r3, r3, r3
 80006a8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006ac:	bf08      	it	eq
 80006ae:	3d01      	subeq	r5, #1
 80006b0:	d0f7      	beq.n	80006a2 <__aeabi_dmul+0x1c6>
 80006b2:	ea43 0306 	orr.w	r3, r3, r6
 80006b6:	4770      	bx	lr
 80006b8:	ea94 0f0c 	teq	r4, ip
 80006bc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006c0:	bf18      	it	ne
 80006c2:	ea95 0f0c 	teqne	r5, ip
 80006c6:	d00c      	beq.n	80006e2 <__aeabi_dmul+0x206>
 80006c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006cc:	bf18      	it	ne
 80006ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d2:	d1d1      	bne.n	8000678 <__aeabi_dmul+0x19c>
 80006d4:	ea81 0103 	eor.w	r1, r1, r3
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006dc:	f04f 0000 	mov.w	r0, #0
 80006e0:	bd70      	pop	{r4, r5, r6, pc}
 80006e2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e6:	bf06      	itte	eq
 80006e8:	4610      	moveq	r0, r2
 80006ea:	4619      	moveq	r1, r3
 80006ec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f0:	d019      	beq.n	8000726 <__aeabi_dmul+0x24a>
 80006f2:	ea94 0f0c 	teq	r4, ip
 80006f6:	d102      	bne.n	80006fe <__aeabi_dmul+0x222>
 80006f8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006fc:	d113      	bne.n	8000726 <__aeabi_dmul+0x24a>
 80006fe:	ea95 0f0c 	teq	r5, ip
 8000702:	d105      	bne.n	8000710 <__aeabi_dmul+0x234>
 8000704:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000708:	bf1c      	itt	ne
 800070a:	4610      	movne	r0, r2
 800070c:	4619      	movne	r1, r3
 800070e:	d10a      	bne.n	8000726 <__aeabi_dmul+0x24a>
 8000710:	ea81 0103 	eor.w	r1, r1, r3
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000718:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800071c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000720:	f04f 0000 	mov.w	r0, #0
 8000724:	bd70      	pop	{r4, r5, r6, pc}
 8000726:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800072a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072e:	bd70      	pop	{r4, r5, r6, pc}

08000730 <__aeabi_ddiv>:
 8000730:	b570      	push	{r4, r5, r6, lr}
 8000732:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000736:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800073a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073e:	bf1d      	ittte	ne
 8000740:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000744:	ea94 0f0c 	teqne	r4, ip
 8000748:	ea95 0f0c 	teqne	r5, ip
 800074c:	f000 f8a7 	bleq	800089e <__aeabi_ddiv+0x16e>
 8000750:	eba4 0405 	sub.w	r4, r4, r5
 8000754:	ea81 0e03 	eor.w	lr, r1, r3
 8000758:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800075c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000760:	f000 8088 	beq.w	8000874 <__aeabi_ddiv+0x144>
 8000764:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000768:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800076c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000770:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000774:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000778:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800077c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000780:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000784:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000788:	429d      	cmp	r5, r3
 800078a:	bf08      	it	eq
 800078c:	4296      	cmpeq	r6, r2
 800078e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000792:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000796:	d202      	bcs.n	800079e <__aeabi_ddiv+0x6e>
 8000798:	085b      	lsrs	r3, r3, #1
 800079a:	ea4f 0232 	mov.w	r2, r2, rrx
 800079e:	1ab6      	subs	r6, r6, r2
 80007a0:	eb65 0503 	sbc.w	r5, r5, r3
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007ae:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000802:	bf22      	ittt	cs
 8000804:	1ab6      	subcs	r6, r6, r2
 8000806:	4675      	movcs	r5, lr
 8000808:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800080c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000810:	d018      	beq.n	8000844 <__aeabi_ddiv+0x114>
 8000812:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000816:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800081a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000822:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000826:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800082a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082e:	d1c0      	bne.n	80007b2 <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	d10b      	bne.n	800084e <__aeabi_ddiv+0x11e>
 8000836:	ea41 0100 	orr.w	r1, r1, r0
 800083a:	f04f 0000 	mov.w	r0, #0
 800083e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000842:	e7b6      	b.n	80007b2 <__aeabi_ddiv+0x82>
 8000844:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000848:	bf04      	itt	eq
 800084a:	4301      	orreq	r1, r0
 800084c:	2000      	moveq	r0, #0
 800084e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000852:	bf88      	it	hi
 8000854:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000858:	f63f aeaf 	bhi.w	80005ba <__aeabi_dmul+0xde>
 800085c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000860:	bf04      	itt	eq
 8000862:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000866:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800086a:	f150 0000 	adcs.w	r0, r0, #0
 800086e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000872:	bd70      	pop	{r4, r5, r6, pc}
 8000874:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000878:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800087c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000880:	bfc2      	ittt	gt
 8000882:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000886:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800088a:	bd70      	popgt	{r4, r5, r6, pc}
 800088c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000890:	f04f 0e00 	mov.w	lr, #0
 8000894:	3c01      	subs	r4, #1
 8000896:	e690      	b.n	80005ba <__aeabi_dmul+0xde>
 8000898:	ea45 0e06 	orr.w	lr, r5, r6
 800089c:	e68d      	b.n	80005ba <__aeabi_dmul+0xde>
 800089e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008a2:	ea94 0f0c 	teq	r4, ip
 80008a6:	bf08      	it	eq
 80008a8:	ea95 0f0c 	teqeq	r5, ip
 80008ac:	f43f af3b 	beq.w	8000726 <__aeabi_dmul+0x24a>
 80008b0:	ea94 0f0c 	teq	r4, ip
 80008b4:	d10a      	bne.n	80008cc <__aeabi_ddiv+0x19c>
 80008b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ba:	f47f af34 	bne.w	8000726 <__aeabi_dmul+0x24a>
 80008be:	ea95 0f0c 	teq	r5, ip
 80008c2:	f47f af25 	bne.w	8000710 <__aeabi_dmul+0x234>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e72c      	b.n	8000726 <__aeabi_dmul+0x24a>
 80008cc:	ea95 0f0c 	teq	r5, ip
 80008d0:	d106      	bne.n	80008e0 <__aeabi_ddiv+0x1b0>
 80008d2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d6:	f43f aefd 	beq.w	80006d4 <__aeabi_dmul+0x1f8>
 80008da:	4610      	mov	r0, r2
 80008dc:	4619      	mov	r1, r3
 80008de:	e722      	b.n	8000726 <__aeabi_dmul+0x24a>
 80008e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e4:	bf18      	it	ne
 80008e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ea:	f47f aec5 	bne.w	8000678 <__aeabi_dmul+0x19c>
 80008ee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008f2:	f47f af0d 	bne.w	8000710 <__aeabi_dmul+0x234>
 80008f6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008fa:	f47f aeeb 	bne.w	80006d4 <__aeabi_dmul+0x1f8>
 80008fe:	e712      	b.n	8000726 <__aeabi_dmul+0x24a>

08000900 <__gedf2>:
 8000900:	f04f 3cff 	mov.w	ip, #4294967295
 8000904:	e006      	b.n	8000914 <__cmpdf2+0x4>
 8000906:	bf00      	nop

08000908 <__ledf2>:
 8000908:	f04f 0c01 	mov.w	ip, #1
 800090c:	e002      	b.n	8000914 <__cmpdf2+0x4>
 800090e:	bf00      	nop

08000910 <__cmpdf2>:
 8000910:	f04f 0c01 	mov.w	ip, #1
 8000914:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000918:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800091c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000920:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000924:	bf18      	it	ne
 8000926:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800092a:	d01b      	beq.n	8000964 <__cmpdf2+0x54>
 800092c:	b001      	add	sp, #4
 800092e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000932:	bf0c      	ite	eq
 8000934:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000938:	ea91 0f03 	teqne	r1, r3
 800093c:	bf02      	ittt	eq
 800093e:	ea90 0f02 	teqeq	r0, r2
 8000942:	2000      	moveq	r0, #0
 8000944:	4770      	bxeq	lr
 8000946:	f110 0f00 	cmn.w	r0, #0
 800094a:	ea91 0f03 	teq	r1, r3
 800094e:	bf58      	it	pl
 8000950:	4299      	cmppl	r1, r3
 8000952:	bf08      	it	eq
 8000954:	4290      	cmpeq	r0, r2
 8000956:	bf2c      	ite	cs
 8000958:	17d8      	asrcs	r0, r3, #31
 800095a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095e:	f040 0001 	orr.w	r0, r0, #1
 8000962:	4770      	bx	lr
 8000964:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000968:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800096c:	d102      	bne.n	8000974 <__cmpdf2+0x64>
 800096e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000972:	d107      	bne.n	8000984 <__cmpdf2+0x74>
 8000974:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d1d6      	bne.n	800092c <__cmpdf2+0x1c>
 800097e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000982:	d0d3      	beq.n	800092c <__cmpdf2+0x1c>
 8000984:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_cdrcmple>:
 800098c:	4684      	mov	ip, r0
 800098e:	4610      	mov	r0, r2
 8000990:	4662      	mov	r2, ip
 8000992:	468c      	mov	ip, r1
 8000994:	4619      	mov	r1, r3
 8000996:	4663      	mov	r3, ip
 8000998:	e000      	b.n	800099c <__aeabi_cdcmpeq>
 800099a:	bf00      	nop

0800099c <__aeabi_cdcmpeq>:
 800099c:	b501      	push	{r0, lr}
 800099e:	f7ff ffb7 	bl	8000910 <__cmpdf2>
 80009a2:	2800      	cmp	r0, #0
 80009a4:	bf48      	it	mi
 80009a6:	f110 0f00 	cmnmi.w	r0, #0
 80009aa:	bd01      	pop	{r0, pc}

080009ac <__aeabi_dcmpeq>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff fff4 	bl	800099c <__aeabi_cdcmpeq>
 80009b4:	bf0c      	ite	eq
 80009b6:	2001      	moveq	r0, #1
 80009b8:	2000      	movne	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmplt>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffea 	bl	800099c <__aeabi_cdcmpeq>
 80009c8:	bf34      	ite	cc
 80009ca:	2001      	movcc	r0, #1
 80009cc:	2000      	movcs	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmple>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffe0 	bl	800099c <__aeabi_cdcmpeq>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpge>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffce 	bl	800098c <__aeabi_cdrcmple>
 80009f0:	bf94      	ite	ls
 80009f2:	2001      	movls	r0, #1
 80009f4:	2000      	movhi	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpgt>:
 80009fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a00:	f7ff ffc4 	bl	800098c <__aeabi_cdrcmple>
 8000a04:	bf34      	ite	cc
 8000a06:	2001      	movcc	r0, #1
 8000a08:	2000      	movcs	r0, #0
 8000a0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0e:	bf00      	nop

08000a10 <__aeabi_dcmpun>:
 8000a10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d102      	bne.n	8000a20 <__aeabi_dcmpun+0x10>
 8000a1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1e:	d10a      	bne.n	8000a36 <__aeabi_dcmpun+0x26>
 8000a20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x20>
 8000a2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2e:	d102      	bne.n	8000a36 <__aeabi_dcmpun+0x26>
 8000a30:	f04f 0000 	mov.w	r0, #0
 8000a34:	4770      	bx	lr
 8000a36:	f04f 0001 	mov.w	r0, #1
 8000a3a:	4770      	bx	lr

08000a3c <__aeabi_d2uiz>:
 8000a3c:	004a      	lsls	r2, r1, #1
 8000a3e:	d211      	bcs.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a40:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a44:	d211      	bcs.n	8000a6a <__aeabi_d2uiz+0x2e>
 8000a46:	d50d      	bpl.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a48:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a50:	d40e      	bmi.n	8000a70 <__aeabi_d2uiz+0x34>
 8000a52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a56:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d102      	bne.n	8000a76 <__aeabi_d2uiz+0x3a>
 8000a70:	f04f 30ff 	mov.w	r0, #4294967295
 8000a74:	4770      	bx	lr
 8000a76:	f04f 0000 	mov.w	r0, #0
 8000a7a:	4770      	bx	lr

08000a7c <__aeabi_d2f>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a84:	bf24      	itt	cs
 8000a86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a8e:	d90d      	bls.n	8000aac <__aeabi_d2f+0x30>
 8000a90:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a9c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aa0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa4:	bf08      	it	eq
 8000aa6:	f020 0001 	biceq.w	r0, r0, #1
 8000aaa:	4770      	bx	lr
 8000aac:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ab0:	d121      	bne.n	8000af6 <__aeabi_d2f+0x7a>
 8000ab2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ab6:	bfbc      	itt	lt
 8000ab8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000abc:	4770      	bxlt	lr
 8000abe:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ac2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac6:	f1c2 0218 	rsb	r2, r2, #24
 8000aca:	f1c2 0c20 	rsb	ip, r2, #32
 8000ace:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ad2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad6:	bf18      	it	ne
 8000ad8:	f040 0001 	orrne.w	r0, r0, #1
 8000adc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae8:	ea40 000c 	orr.w	r0, r0, ip
 8000aec:	fa23 f302 	lsr.w	r3, r3, r2
 8000af0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af4:	e7cc      	b.n	8000a90 <__aeabi_d2f+0x14>
 8000af6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000afa:	d107      	bne.n	8000b0c <__aeabi_d2f+0x90>
 8000afc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b00:	bf1e      	ittt	ne
 8000b02:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b06:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b0a:	4770      	bxne	lr
 8000b0c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b10:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b14:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop

08000b1c <__aeabi_frsub>:
 8000b1c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b20:	e002      	b.n	8000b28 <__addsf3>
 8000b22:	bf00      	nop

08000b24 <__aeabi_fsub>:
 8000b24:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b28 <__addsf3>:
 8000b28:	0042      	lsls	r2, r0, #1
 8000b2a:	bf1f      	itttt	ne
 8000b2c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b30:	ea92 0f03 	teqne	r2, r3
 8000b34:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b38:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b3c:	d06a      	beq.n	8000c14 <__addsf3+0xec>
 8000b3e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b42:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b46:	bfc1      	itttt	gt
 8000b48:	18d2      	addgt	r2, r2, r3
 8000b4a:	4041      	eorgt	r1, r0
 8000b4c:	4048      	eorgt	r0, r1
 8000b4e:	4041      	eorgt	r1, r0
 8000b50:	bfb8      	it	lt
 8000b52:	425b      	neglt	r3, r3
 8000b54:	2b19      	cmp	r3, #25
 8000b56:	bf88      	it	hi
 8000b58:	4770      	bxhi	lr
 8000b5a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b5e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b62:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b6e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b72:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b76:	bf18      	it	ne
 8000b78:	4249      	negne	r1, r1
 8000b7a:	ea92 0f03 	teq	r2, r3
 8000b7e:	d03f      	beq.n	8000c00 <__addsf3+0xd8>
 8000b80:	f1a2 0201 	sub.w	r2, r2, #1
 8000b84:	fa41 fc03 	asr.w	ip, r1, r3
 8000b88:	eb10 000c 	adds.w	r0, r0, ip
 8000b8c:	f1c3 0320 	rsb	r3, r3, #32
 8000b90:	fa01 f103 	lsl.w	r1, r1, r3
 8000b94:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b98:	d502      	bpl.n	8000ba0 <__addsf3+0x78>
 8000b9a:	4249      	negs	r1, r1
 8000b9c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ba0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000ba4:	d313      	bcc.n	8000bce <__addsf3+0xa6>
 8000ba6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000baa:	d306      	bcc.n	8000bba <__addsf3+0x92>
 8000bac:	0840      	lsrs	r0, r0, #1
 8000bae:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bb2:	f102 0201 	add.w	r2, r2, #1
 8000bb6:	2afe      	cmp	r2, #254	@ 0xfe
 8000bb8:	d251      	bcs.n	8000c5e <__addsf3+0x136>
 8000bba:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bbe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bc2:	bf08      	it	eq
 8000bc4:	f020 0001 	biceq.w	r0, r0, #1
 8000bc8:	ea40 0003 	orr.w	r0, r0, r3
 8000bcc:	4770      	bx	lr
 8000bce:	0049      	lsls	r1, r1, #1
 8000bd0:	eb40 0000 	adc.w	r0, r0, r0
 8000bd4:	3a01      	subs	r2, #1
 8000bd6:	bf28      	it	cs
 8000bd8:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bdc:	d2ed      	bcs.n	8000bba <__addsf3+0x92>
 8000bde:	fab0 fc80 	clz	ip, r0
 8000be2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000be6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bea:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bee:	bfaa      	itet	ge
 8000bf0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf4:	4252      	neglt	r2, r2
 8000bf6:	4318      	orrge	r0, r3
 8000bf8:	bfbc      	itt	lt
 8000bfa:	40d0      	lsrlt	r0, r2
 8000bfc:	4318      	orrlt	r0, r3
 8000bfe:	4770      	bx	lr
 8000c00:	f092 0f00 	teq	r2, #0
 8000c04:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c08:	bf06      	itte	eq
 8000c0a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c0e:	3201      	addeq	r2, #1
 8000c10:	3b01      	subne	r3, #1
 8000c12:	e7b5      	b.n	8000b80 <__addsf3+0x58>
 8000c14:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c18:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c1c:	bf18      	it	ne
 8000c1e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c22:	d021      	beq.n	8000c68 <__addsf3+0x140>
 8000c24:	ea92 0f03 	teq	r2, r3
 8000c28:	d004      	beq.n	8000c34 <__addsf3+0x10c>
 8000c2a:	f092 0f00 	teq	r2, #0
 8000c2e:	bf08      	it	eq
 8000c30:	4608      	moveq	r0, r1
 8000c32:	4770      	bx	lr
 8000c34:	ea90 0f01 	teq	r0, r1
 8000c38:	bf1c      	itt	ne
 8000c3a:	2000      	movne	r0, #0
 8000c3c:	4770      	bxne	lr
 8000c3e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c42:	d104      	bne.n	8000c4e <__addsf3+0x126>
 8000c44:	0040      	lsls	r0, r0, #1
 8000c46:	bf28      	it	cs
 8000c48:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c4c:	4770      	bx	lr
 8000c4e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c52:	bf3c      	itt	cc
 8000c54:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c58:	4770      	bxcc	lr
 8000c5a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c5e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c62:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c66:	4770      	bx	lr
 8000c68:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c6c:	bf16      	itet	ne
 8000c6e:	4608      	movne	r0, r1
 8000c70:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c74:	4601      	movne	r1, r0
 8000c76:	0242      	lsls	r2, r0, #9
 8000c78:	bf06      	itte	eq
 8000c7a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c7e:	ea90 0f01 	teqeq	r0, r1
 8000c82:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c86:	4770      	bx	lr

08000c88 <__aeabi_ui2f>:
 8000c88:	f04f 0300 	mov.w	r3, #0
 8000c8c:	e004      	b.n	8000c98 <__aeabi_i2f+0x8>
 8000c8e:	bf00      	nop

08000c90 <__aeabi_i2f>:
 8000c90:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c94:	bf48      	it	mi
 8000c96:	4240      	negmi	r0, r0
 8000c98:	ea5f 0c00 	movs.w	ip, r0
 8000c9c:	bf08      	it	eq
 8000c9e:	4770      	bxeq	lr
 8000ca0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ca4:	4601      	mov	r1, r0
 8000ca6:	f04f 0000 	mov.w	r0, #0
 8000caa:	e01c      	b.n	8000ce6 <__aeabi_l2f+0x2a>

08000cac <__aeabi_ul2f>:
 8000cac:	ea50 0201 	orrs.w	r2, r0, r1
 8000cb0:	bf08      	it	eq
 8000cb2:	4770      	bxeq	lr
 8000cb4:	f04f 0300 	mov.w	r3, #0
 8000cb8:	e00a      	b.n	8000cd0 <__aeabi_l2f+0x14>
 8000cba:	bf00      	nop

08000cbc <__aeabi_l2f>:
 8000cbc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc0:	bf08      	it	eq
 8000cc2:	4770      	bxeq	lr
 8000cc4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cc8:	d502      	bpl.n	8000cd0 <__aeabi_l2f+0x14>
 8000cca:	4240      	negs	r0, r0
 8000ccc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd0:	ea5f 0c01 	movs.w	ip, r1
 8000cd4:	bf02      	ittt	eq
 8000cd6:	4684      	moveq	ip, r0
 8000cd8:	4601      	moveq	r1, r0
 8000cda:	2000      	moveq	r0, #0
 8000cdc:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000ce0:	bf08      	it	eq
 8000ce2:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000ce6:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cea:	fabc f28c 	clz	r2, ip
 8000cee:	3a08      	subs	r2, #8
 8000cf0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf4:	db10      	blt.n	8000d18 <__aeabi_l2f+0x5c>
 8000cf6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d00:	f1c2 0220 	rsb	r2, r2, #32
 8000d04:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d08:	fa20 f202 	lsr.w	r2, r0, r2
 8000d0c:	eb43 0002 	adc.w	r0, r3, r2
 8000d10:	bf08      	it	eq
 8000d12:	f020 0001 	biceq.w	r0, r0, #1
 8000d16:	4770      	bx	lr
 8000d18:	f102 0220 	add.w	r2, r2, #32
 8000d1c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d20:	f1c2 0220 	rsb	r2, r2, #32
 8000d24:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d28:	fa21 f202 	lsr.w	r2, r1, r2
 8000d2c:	eb43 0002 	adc.w	r0, r3, r2
 8000d30:	bf08      	it	eq
 8000d32:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d36:	4770      	bx	lr

08000d38 <__aeabi_fmul>:
 8000d38:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d3c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d40:	bf1e      	ittt	ne
 8000d42:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d46:	ea92 0f0c 	teqne	r2, ip
 8000d4a:	ea93 0f0c 	teqne	r3, ip
 8000d4e:	d06f      	beq.n	8000e30 <__aeabi_fmul+0xf8>
 8000d50:	441a      	add	r2, r3
 8000d52:	ea80 0c01 	eor.w	ip, r0, r1
 8000d56:	0240      	lsls	r0, r0, #9
 8000d58:	bf18      	it	ne
 8000d5a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d5e:	d01e      	beq.n	8000d9e <__aeabi_fmul+0x66>
 8000d60:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d64:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d68:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d6c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d70:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d74:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d78:	bf3e      	ittt	cc
 8000d7a:	0049      	lslcc	r1, r1, #1
 8000d7c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d80:	005b      	lslcc	r3, r3, #1
 8000d82:	ea40 0001 	orr.w	r0, r0, r1
 8000d86:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d8a:	2afd      	cmp	r2, #253	@ 0xfd
 8000d8c:	d81d      	bhi.n	8000dca <__aeabi_fmul+0x92>
 8000d8e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d92:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d96:	bf08      	it	eq
 8000d98:	f020 0001 	biceq.w	r0, r0, #1
 8000d9c:	4770      	bx	lr
 8000d9e:	f090 0f00 	teq	r0, #0
 8000da2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000da6:	bf08      	it	eq
 8000da8:	0249      	lsleq	r1, r1, #9
 8000daa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dae:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000db2:	3a7f      	subs	r2, #127	@ 0x7f
 8000db4:	bfc2      	ittt	gt
 8000db6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dba:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dbe:	4770      	bxgt	lr
 8000dc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dc4:	f04f 0300 	mov.w	r3, #0
 8000dc8:	3a01      	subs	r2, #1
 8000dca:	dc5d      	bgt.n	8000e88 <__aeabi_fmul+0x150>
 8000dcc:	f112 0f19 	cmn.w	r2, #25
 8000dd0:	bfdc      	itt	le
 8000dd2:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000dd6:	4770      	bxle	lr
 8000dd8:	f1c2 0200 	rsb	r2, r2, #0
 8000ddc:	0041      	lsls	r1, r0, #1
 8000dde:	fa21 f102 	lsr.w	r1, r1, r2
 8000de2:	f1c2 0220 	rsb	r2, r2, #32
 8000de6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dea:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dee:	f140 0000 	adc.w	r0, r0, #0
 8000df2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000df6:	bf08      	it	eq
 8000df8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dfc:	4770      	bx	lr
 8000dfe:	f092 0f00 	teq	r2, #0
 8000e02:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e06:	bf02      	ittt	eq
 8000e08:	0040      	lsleq	r0, r0, #1
 8000e0a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e0e:	3a01      	subeq	r2, #1
 8000e10:	d0f9      	beq.n	8000e06 <__aeabi_fmul+0xce>
 8000e12:	ea40 000c 	orr.w	r0, r0, ip
 8000e16:	f093 0f00 	teq	r3, #0
 8000e1a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e1e:	bf02      	ittt	eq
 8000e20:	0049      	lsleq	r1, r1, #1
 8000e22:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e26:	3b01      	subeq	r3, #1
 8000e28:	d0f9      	beq.n	8000e1e <__aeabi_fmul+0xe6>
 8000e2a:	ea41 010c 	orr.w	r1, r1, ip
 8000e2e:	e78f      	b.n	8000d50 <__aeabi_fmul+0x18>
 8000e30:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e34:	ea92 0f0c 	teq	r2, ip
 8000e38:	bf18      	it	ne
 8000e3a:	ea93 0f0c 	teqne	r3, ip
 8000e3e:	d00a      	beq.n	8000e56 <__aeabi_fmul+0x11e>
 8000e40:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e44:	bf18      	it	ne
 8000e46:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e4a:	d1d8      	bne.n	8000dfe <__aeabi_fmul+0xc6>
 8000e4c:	ea80 0001 	eor.w	r0, r0, r1
 8000e50:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e54:	4770      	bx	lr
 8000e56:	f090 0f00 	teq	r0, #0
 8000e5a:	bf17      	itett	ne
 8000e5c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e60:	4608      	moveq	r0, r1
 8000e62:	f091 0f00 	teqne	r1, #0
 8000e66:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e6a:	d014      	beq.n	8000e96 <__aeabi_fmul+0x15e>
 8000e6c:	ea92 0f0c 	teq	r2, ip
 8000e70:	d101      	bne.n	8000e76 <__aeabi_fmul+0x13e>
 8000e72:	0242      	lsls	r2, r0, #9
 8000e74:	d10f      	bne.n	8000e96 <__aeabi_fmul+0x15e>
 8000e76:	ea93 0f0c 	teq	r3, ip
 8000e7a:	d103      	bne.n	8000e84 <__aeabi_fmul+0x14c>
 8000e7c:	024b      	lsls	r3, r1, #9
 8000e7e:	bf18      	it	ne
 8000e80:	4608      	movne	r0, r1
 8000e82:	d108      	bne.n	8000e96 <__aeabi_fmul+0x15e>
 8000e84:	ea80 0001 	eor.w	r0, r0, r1
 8000e88:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e94:	4770      	bx	lr
 8000e96:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e9a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e9e:	4770      	bx	lr

08000ea0 <__aeabi_fdiv>:
 8000ea0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ea4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ea8:	bf1e      	ittt	ne
 8000eaa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eae:	ea92 0f0c 	teqne	r2, ip
 8000eb2:	ea93 0f0c 	teqne	r3, ip
 8000eb6:	d069      	beq.n	8000f8c <__aeabi_fdiv+0xec>
 8000eb8:	eba2 0203 	sub.w	r2, r2, r3
 8000ebc:	ea80 0c01 	eor.w	ip, r0, r1
 8000ec0:	0249      	lsls	r1, r1, #9
 8000ec2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ec6:	d037      	beq.n	8000f38 <__aeabi_fdiv+0x98>
 8000ec8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ecc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ed0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ed4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ed8:	428b      	cmp	r3, r1
 8000eda:	bf38      	it	cc
 8000edc:	005b      	lslcc	r3, r3, #1
 8000ede:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000ee2:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	bf24      	itt	cs
 8000eea:	1a5b      	subcs	r3, r3, r1
 8000eec:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ef0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ef4:	bf24      	itt	cs
 8000ef6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000efa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000efe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f02:	bf24      	itt	cs
 8000f04:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f08:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f0c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f10:	bf24      	itt	cs
 8000f12:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f16:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f1a:	011b      	lsls	r3, r3, #4
 8000f1c:	bf18      	it	ne
 8000f1e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f22:	d1e0      	bne.n	8000ee6 <__aeabi_fdiv+0x46>
 8000f24:	2afd      	cmp	r2, #253	@ 0xfd
 8000f26:	f63f af50 	bhi.w	8000dca <__aeabi_fmul+0x92>
 8000f2a:	428b      	cmp	r3, r1
 8000f2c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f30:	bf08      	it	eq
 8000f32:	f020 0001 	biceq.w	r0, r0, #1
 8000f36:	4770      	bx	lr
 8000f38:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f3c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f40:	327f      	adds	r2, #127	@ 0x7f
 8000f42:	bfc2      	ittt	gt
 8000f44:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f48:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f4c:	4770      	bxgt	lr
 8000f4e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f52:	f04f 0300 	mov.w	r3, #0
 8000f56:	3a01      	subs	r2, #1
 8000f58:	e737      	b.n	8000dca <__aeabi_fmul+0x92>
 8000f5a:	f092 0f00 	teq	r2, #0
 8000f5e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f62:	bf02      	ittt	eq
 8000f64:	0040      	lsleq	r0, r0, #1
 8000f66:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f6a:	3a01      	subeq	r2, #1
 8000f6c:	d0f9      	beq.n	8000f62 <__aeabi_fdiv+0xc2>
 8000f6e:	ea40 000c 	orr.w	r0, r0, ip
 8000f72:	f093 0f00 	teq	r3, #0
 8000f76:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f7a:	bf02      	ittt	eq
 8000f7c:	0049      	lsleq	r1, r1, #1
 8000f7e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f82:	3b01      	subeq	r3, #1
 8000f84:	d0f9      	beq.n	8000f7a <__aeabi_fdiv+0xda>
 8000f86:	ea41 010c 	orr.w	r1, r1, ip
 8000f8a:	e795      	b.n	8000eb8 <__aeabi_fdiv+0x18>
 8000f8c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f90:	ea92 0f0c 	teq	r2, ip
 8000f94:	d108      	bne.n	8000fa8 <__aeabi_fdiv+0x108>
 8000f96:	0242      	lsls	r2, r0, #9
 8000f98:	f47f af7d 	bne.w	8000e96 <__aeabi_fmul+0x15e>
 8000f9c:	ea93 0f0c 	teq	r3, ip
 8000fa0:	f47f af70 	bne.w	8000e84 <__aeabi_fmul+0x14c>
 8000fa4:	4608      	mov	r0, r1
 8000fa6:	e776      	b.n	8000e96 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	d104      	bne.n	8000fb8 <__aeabi_fdiv+0x118>
 8000fae:	024b      	lsls	r3, r1, #9
 8000fb0:	f43f af4c 	beq.w	8000e4c <__aeabi_fmul+0x114>
 8000fb4:	4608      	mov	r0, r1
 8000fb6:	e76e      	b.n	8000e96 <__aeabi_fmul+0x15e>
 8000fb8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fbc:	bf18      	it	ne
 8000fbe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fc2:	d1ca      	bne.n	8000f5a <__aeabi_fdiv+0xba>
 8000fc4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fc8:	f47f af5c 	bne.w	8000e84 <__aeabi_fmul+0x14c>
 8000fcc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fd0:	f47f af3c 	bne.w	8000e4c <__aeabi_fmul+0x114>
 8000fd4:	e75f      	b.n	8000e96 <__aeabi_fmul+0x15e>
 8000fd6:	bf00      	nop

08000fd8 <__gesf2>:
 8000fd8:	f04f 3cff 	mov.w	ip, #4294967295
 8000fdc:	e006      	b.n	8000fec <__cmpsf2+0x4>
 8000fde:	bf00      	nop

08000fe0 <__lesf2>:
 8000fe0:	f04f 0c01 	mov.w	ip, #1
 8000fe4:	e002      	b.n	8000fec <__cmpsf2+0x4>
 8000fe6:	bf00      	nop

08000fe8 <__cmpsf2>:
 8000fe8:	f04f 0c01 	mov.w	ip, #1
 8000fec:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ff0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ff4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ff8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ffc:	bf18      	it	ne
 8000ffe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001002:	d011      	beq.n	8001028 <__cmpsf2+0x40>
 8001004:	b001      	add	sp, #4
 8001006:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800100a:	bf18      	it	ne
 800100c:	ea90 0f01 	teqne	r0, r1
 8001010:	bf58      	it	pl
 8001012:	ebb2 0003 	subspl.w	r0, r2, r3
 8001016:	bf88      	it	hi
 8001018:	17c8      	asrhi	r0, r1, #31
 800101a:	bf38      	it	cc
 800101c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001020:	bf18      	it	ne
 8001022:	f040 0001 	orrne.w	r0, r0, #1
 8001026:	4770      	bx	lr
 8001028:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800102c:	d102      	bne.n	8001034 <__cmpsf2+0x4c>
 800102e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001032:	d105      	bne.n	8001040 <__cmpsf2+0x58>
 8001034:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001038:	d1e4      	bne.n	8001004 <__cmpsf2+0x1c>
 800103a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800103e:	d0e1      	beq.n	8001004 <__cmpsf2+0x1c>
 8001040:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop

08001048 <__aeabi_cfrcmple>:
 8001048:	4684      	mov	ip, r0
 800104a:	4608      	mov	r0, r1
 800104c:	4661      	mov	r1, ip
 800104e:	e7ff      	b.n	8001050 <__aeabi_cfcmpeq>

08001050 <__aeabi_cfcmpeq>:
 8001050:	b50f      	push	{r0, r1, r2, r3, lr}
 8001052:	f7ff ffc9 	bl	8000fe8 <__cmpsf2>
 8001056:	2800      	cmp	r0, #0
 8001058:	bf48      	it	mi
 800105a:	f110 0f00 	cmnmi.w	r0, #0
 800105e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001060 <__aeabi_fcmpeq>:
 8001060:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001064:	f7ff fff4 	bl	8001050 <__aeabi_cfcmpeq>
 8001068:	bf0c      	ite	eq
 800106a:	2001      	moveq	r0, #1
 800106c:	2000      	movne	r0, #0
 800106e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001072:	bf00      	nop

08001074 <__aeabi_fcmplt>:
 8001074:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001078:	f7ff ffea 	bl	8001050 <__aeabi_cfcmpeq>
 800107c:	bf34      	ite	cc
 800107e:	2001      	movcc	r0, #1
 8001080:	2000      	movcs	r0, #0
 8001082:	f85d fb08 	ldr.w	pc, [sp], #8
 8001086:	bf00      	nop

08001088 <__aeabi_fcmple>:
 8001088:	f84d ed08 	str.w	lr, [sp, #-8]!
 800108c:	f7ff ffe0 	bl	8001050 <__aeabi_cfcmpeq>
 8001090:	bf94      	ite	ls
 8001092:	2001      	movls	r0, #1
 8001094:	2000      	movhi	r0, #0
 8001096:	f85d fb08 	ldr.w	pc, [sp], #8
 800109a:	bf00      	nop

0800109c <__aeabi_fcmpge>:
 800109c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a0:	f7ff ffd2 	bl	8001048 <__aeabi_cfrcmple>
 80010a4:	bf94      	ite	ls
 80010a6:	2001      	movls	r0, #1
 80010a8:	2000      	movhi	r0, #0
 80010aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ae:	bf00      	nop

080010b0 <__aeabi_fcmpgt>:
 80010b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b4:	f7ff ffc8 	bl	8001048 <__aeabi_cfrcmple>
 80010b8:	bf34      	ite	cc
 80010ba:	2001      	movcc	r0, #1
 80010bc:	2000      	movcs	r0, #0
 80010be:	f85d fb08 	ldr.w	pc, [sp], #8
 80010c2:	bf00      	nop

080010c4 <__aeabi_fcmpun>:
 80010c4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010c8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010cc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010d0:	d102      	bne.n	80010d8 <__aeabi_fcmpun+0x14>
 80010d2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010d6:	d108      	bne.n	80010ea <__aeabi_fcmpun+0x26>
 80010d8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010dc:	d102      	bne.n	80010e4 <__aeabi_fcmpun+0x20>
 80010de:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010e2:	d102      	bne.n	80010ea <__aeabi_fcmpun+0x26>
 80010e4:	f04f 0000 	mov.w	r0, #0
 80010e8:	4770      	bx	lr
 80010ea:	f04f 0001 	mov.w	r0, #1
 80010ee:	4770      	bx	lr

080010f0 <__aeabi_f2iz>:
 80010f0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010f4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010f8:	d30f      	bcc.n	800111a <__aeabi_f2iz+0x2a>
 80010fa:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010fe:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001102:	d90d      	bls.n	8001120 <__aeabi_f2iz+0x30>
 8001104:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001108:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800110c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001110:	fa23 f002 	lsr.w	r0, r3, r2
 8001114:	bf18      	it	ne
 8001116:	4240      	negne	r0, r0
 8001118:	4770      	bx	lr
 800111a:	f04f 0000 	mov.w	r0, #0
 800111e:	4770      	bx	lr
 8001120:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001124:	d101      	bne.n	800112a <__aeabi_f2iz+0x3a>
 8001126:	0242      	lsls	r2, r0, #9
 8001128:	d105      	bne.n	8001136 <__aeabi_f2iz+0x46>
 800112a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800112e:	bf08      	it	eq
 8001130:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001134:	4770      	bx	lr
 8001136:	f04f 0000 	mov.w	r0, #0
 800113a:	4770      	bx	lr

0800113c <__aeabi_d2lz>:
 800113c:	b538      	push	{r3, r4, r5, lr}
 800113e:	2200      	movs	r2, #0
 8001140:	2300      	movs	r3, #0
 8001142:	4604      	mov	r4, r0
 8001144:	460d      	mov	r5, r1
 8001146:	f7ff fc3b 	bl	80009c0 <__aeabi_dcmplt>
 800114a:	b928      	cbnz	r0, 8001158 <__aeabi_d2lz+0x1c>
 800114c:	4620      	mov	r0, r4
 800114e:	4629      	mov	r1, r5
 8001150:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001154:	f000 b80a 	b.w	800116c <__aeabi_d2ulz>
 8001158:	4620      	mov	r0, r4
 800115a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 800115e:	f000 f805 	bl	800116c <__aeabi_d2ulz>
 8001162:	4240      	negs	r0, r0
 8001164:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001168:	bd38      	pop	{r3, r4, r5, pc}
 800116a:	bf00      	nop

0800116c <__aeabi_d2ulz>:
 800116c:	b5d0      	push	{r4, r6, r7, lr}
 800116e:	2200      	movs	r2, #0
 8001170:	4b0b      	ldr	r3, [pc, #44]	@ (80011a0 <__aeabi_d2ulz+0x34>)
 8001172:	4606      	mov	r6, r0
 8001174:	460f      	mov	r7, r1
 8001176:	f7ff f9b1 	bl	80004dc <__aeabi_dmul>
 800117a:	f7ff fc5f 	bl	8000a3c <__aeabi_d2uiz>
 800117e:	4604      	mov	r4, r0
 8001180:	f7ff f932 	bl	80003e8 <__aeabi_ui2d>
 8001184:	2200      	movs	r2, #0
 8001186:	4b07      	ldr	r3, [pc, #28]	@ (80011a4 <__aeabi_d2ulz+0x38>)
 8001188:	f7ff f9a8 	bl	80004dc <__aeabi_dmul>
 800118c:	4602      	mov	r2, r0
 800118e:	460b      	mov	r3, r1
 8001190:	4630      	mov	r0, r6
 8001192:	4639      	mov	r1, r7
 8001194:	f7fe ffea 	bl	800016c <__aeabi_dsub>
 8001198:	f7ff fc50 	bl	8000a3c <__aeabi_d2uiz>
 800119c:	4621      	mov	r1, r4
 800119e:	bdd0      	pop	{r4, r6, r7, pc}
 80011a0:	3df00000 	.word	0x3df00000
 80011a4:	41f00000 	.word	0x41f00000

080011a8 <buttonInit>:
static uint32_t lastDebounceTime_LEFT = 0;
static uint32_t lastDebounceTime_RIGHT = 0;


void buttonInit()
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  // Registering 'button' command in CLI.
  cliAdd("button", cliButton);
 80011ac:	4902      	ldr	r1, [pc, #8]	@ (80011b8 <buttonInit+0x10>)
 80011ae:	4803      	ldr	r0, [pc, #12]	@ (80011bc <buttonInit+0x14>)
 80011b0:	f000 ff0a 	bl	8001fc8 <cliAdd>
}
 80011b4:	bf00      	nop
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	080012ad 	.word	0x080012ad
 80011bc:	0800ac68 	.word	0x0800ac68

080011c0 <isButtonPressed>:

uint8_t isButtonPressed(GPIO_TypeDef *port, uint32_t pin)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
  if (port == LEFT_BTN_GPIO_Port && pin == LEFT_BTN_Pin)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a12      	ldr	r2, [pc, #72]	@ (8001218 <isButtonPressed+0x58>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d10b      	bne.n	80011ea <isButtonPressed+0x2a>
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	2b10      	cmp	r3, #16
 80011d6:	d108      	bne.n	80011ea <isButtonPressed+0x2a>
  {
    if (isLeftButtonPressed)
 80011d8:	4b10      	ldr	r3, [pc, #64]	@ (800121c <isButtonPressed+0x5c>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d014      	beq.n	800120a <isButtonPressed+0x4a>
    {
      isLeftButtonPressed = 0;
 80011e0:	4b0e      	ldr	r3, [pc, #56]	@ (800121c <isButtonPressed+0x5c>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	701a      	strb	r2, [r3, #0]
      return 1;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e010      	b.n	800120c <isButtonPressed+0x4c>
    }
  }
  else if (port == RIGHT_BTN_GPIO_Port && pin == RIGHT_BTN_Pin)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a0a      	ldr	r2, [pc, #40]	@ (8001218 <isButtonPressed+0x58>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d10b      	bne.n	800120a <isButtonPressed+0x4a>
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	2b08      	cmp	r3, #8
 80011f6:	d108      	bne.n	800120a <isButtonPressed+0x4a>
  {
    if (isRightButtonPressed)
 80011f8:	4b09      	ldr	r3, [pc, #36]	@ (8001220 <isButtonPressed+0x60>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d004      	beq.n	800120a <isButtonPressed+0x4a>
    {
      isRightButtonPressed = 0;
 8001200:	4b07      	ldr	r3, [pc, #28]	@ (8001220 <isButtonPressed+0x60>)
 8001202:	2200      	movs	r2, #0
 8001204:	701a      	strb	r2, [r3, #0]
      return 1;
 8001206:	2301      	movs	r3, #1
 8001208:	e000      	b.n	800120c <isButtonPressed+0x4c>
    }
  }

  return 0;
 800120a:	2300      	movs	r3, #0
}
 800120c:	4618      	mov	r0, r3
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	bc80      	pop	{r7}
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	40010c00 	.word	0x40010c00
 800121c:	20000200 	.word	0x20000200
 8001220:	20000201 	.word	0x20000201

08001224 <buttonRead>:

void buttonRead(GPIO_TypeDef *port, uint32_t pin)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6039      	str	r1, [r7, #0]
  uint32_t currentTime = HAL_GetTick();
 800122e:	f002 fcc9 	bl	8003bc4 <HAL_GetTick>
 8001232:	60f8      	str	r0, [r7, #12]

  if (pin == LEFT_BTN_Pin)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	2b10      	cmp	r3, #16
 8001238:	d129      	bne.n	800128e <buttonRead+0x6a>
  {
    // left button debouncing.
    if ((currentTime - lastDebounceTime_LEFT) > DEBOUNCE_DELAY)
 800123a:	4b17      	ldr	r3, [pc, #92]	@ (8001298 <buttonRead+0x74>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	68fa      	ldr	r2, [r7, #12]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	2b0f      	cmp	r3, #15
 8001244:	d90d      	bls.n	8001262 <buttonRead+0x3e>
    {
      lastDebounceTime_LEFT = currentTime;
 8001246:	4a14      	ldr	r2, [pc, #80]	@ (8001298 <buttonRead+0x74>)
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	6013      	str	r3, [r2, #0]

      if (HAL_GPIO_ReadPin(LEFT_BTN_GPIO_Port, LEFT_BTN_Pin) == GPIO_PIN_SET)
 800124c:	2110      	movs	r1, #16
 800124e:	4813      	ldr	r0, [pc, #76]	@ (800129c <buttonRead+0x78>)
 8001250:	f003 fa1a 	bl	8004688 <HAL_GPIO_ReadPin>
 8001254:	4603      	mov	r3, r0
 8001256:	2b01      	cmp	r3, #1
 8001258:	d119      	bne.n	800128e <buttonRead+0x6a>
      {
        isLeftButtonPressed = 1;
 800125a:	4b11      	ldr	r3, [pc, #68]	@ (80012a0 <buttonRead+0x7c>)
 800125c:	2201      	movs	r2, #1
 800125e:	701a      	strb	r2, [r3, #0]
          isRightButtonPressed = 1;
        }
      }
    }
  }
}
 8001260:	e015      	b.n	800128e <buttonRead+0x6a>
    else if (pin == RIGHT_BTN_Pin)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	2b08      	cmp	r3, #8
 8001266:	d112      	bne.n	800128e <buttonRead+0x6a>
      if ((currentTime - lastDebounceTime_RIGHT) > DEBOUNCE_DELAY)
 8001268:	4b0e      	ldr	r3, [pc, #56]	@ (80012a4 <buttonRead+0x80>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	68fa      	ldr	r2, [r7, #12]
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	2b0f      	cmp	r3, #15
 8001272:	d90c      	bls.n	800128e <buttonRead+0x6a>
        lastDebounceTime_RIGHT = currentTime;
 8001274:	4a0b      	ldr	r2, [pc, #44]	@ (80012a4 <buttonRead+0x80>)
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	6013      	str	r3, [r2, #0]
        if (HAL_GPIO_ReadPin(RIGHT_BTN_GPIO_Port, RIGHT_BTN_Pin) == GPIO_PIN_SET)
 800127a:	2108      	movs	r1, #8
 800127c:	4807      	ldr	r0, [pc, #28]	@ (800129c <buttonRead+0x78>)
 800127e:	f003 fa03 	bl	8004688 <HAL_GPIO_ReadPin>
 8001282:	4603      	mov	r3, r0
 8001284:	2b01      	cmp	r3, #1
 8001286:	d102      	bne.n	800128e <buttonRead+0x6a>
          isRightButtonPressed = 1;
 8001288:	4b07      	ldr	r3, [pc, #28]	@ (80012a8 <buttonRead+0x84>)
 800128a:	2201      	movs	r2, #1
 800128c:	701a      	strb	r2, [r3, #0]
}
 800128e:	bf00      	nop
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000204 	.word	0x20000204
 800129c:	40010c00 	.word	0x40010c00
 80012a0:	20000200 	.word	0x20000200
 80012a4:	20000208 	.word	0x20000208
 80012a8:	20000201 	.word	0x20000201

080012ac <cliButton>:

void cliButton(cli_args_t *args)
{
 80012ac:	b590      	push	{r4, r7, lr}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  bool ret = false;
 80012b4:	2300      	movs	r3, #0
 80012b6:	73fb      	strb	r3, [r7, #15]

  if(args->argc == 1 && args->isStr(0, "show"))
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	881b      	ldrh	r3, [r3, #0]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d12e      	bne.n	800131e <cliButton+0x72>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	695b      	ldr	r3, [r3, #20]
 80012c4:	491c      	ldr	r1, [pc, #112]	@ (8001338 <cliButton+0x8c>)
 80012c6:	2000      	movs	r0, #0
 80012c8:	4798      	blx	r3
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d026      	beq.n	800131e <cliButton+0x72>
  {
    uint8_t str = 0;
 80012d0:	2300      	movs	r3, #0
 80012d2:	73bb      	strb	r3, [r7, #14]

    while(cliKeepLoop())
 80012d4:	e01a      	b.n	800130c <cliButton+0x60>
    {
      str = uartRead(CH_USART1);
 80012d6:	2001      	movs	r0, #1
 80012d8:	f001 f824 	bl	8002324 <uartRead>
 80012dc:	4603      	mov	r3, r0
 80012de:	73bb      	strb	r3, [r7, #14]

      if(str == 0x0D) break;
 80012e0:	7bbb      	ldrb	r3, [r7, #14]
 80012e2:	2b0d      	cmp	r3, #13
 80012e4:	d018      	beq.n	8001318 <cliButton+0x6c>

      cliPrintf("%d %d\n", HAL_GPIO_ReadPin(LEFT_BTN_GPIO_Port, LEFT_BTN_Pin), HAL_GPIO_ReadPin(RIGHT_BTN_GPIO_Port, RIGHT_BTN_Pin));
 80012e6:	2110      	movs	r1, #16
 80012e8:	4814      	ldr	r0, [pc, #80]	@ (800133c <cliButton+0x90>)
 80012ea:	f003 f9cd 	bl	8004688 <HAL_GPIO_ReadPin>
 80012ee:	4603      	mov	r3, r0
 80012f0:	461c      	mov	r4, r3
 80012f2:	2108      	movs	r1, #8
 80012f4:	4811      	ldr	r0, [pc, #68]	@ (800133c <cliButton+0x90>)
 80012f6:	f003 f9c7 	bl	8004688 <HAL_GPIO_ReadPin>
 80012fa:	4603      	mov	r3, r0
 80012fc:	461a      	mov	r2, r3
 80012fe:	4621      	mov	r1, r4
 8001300:	480f      	ldr	r0, [pc, #60]	@ (8001340 <cliButton+0x94>)
 8001302:	f000 fd5f 	bl	8001dc4 <cliPrintf>

      HAL_Delay(50);
 8001306:	2032      	movs	r0, #50	@ 0x32
 8001308:	f002 fc66 	bl	8003bd8 <HAL_Delay>
    while(cliKeepLoop())
 800130c:	f000 fe4e 	bl	8001fac <cliKeepLoop>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d1df      	bne.n	80012d6 <cliButton+0x2a>
 8001316:	e000      	b.n	800131a <cliButton+0x6e>
      if(str == 0x0D) break;
 8001318:	bf00      	nop
    }

    ret = true;
 800131a:	2301      	movs	r3, #1
 800131c:	73fb      	strb	r3, [r7, #15]
  }

  if(ret != true)
 800131e:	7bfb      	ldrb	r3, [r7, #15]
 8001320:	f083 0301 	eor.w	r3, r3, #1
 8001324:	b2db      	uxtb	r3, r3
 8001326:	2b00      	cmp	r3, #0
 8001328:	d002      	beq.n	8001330 <cliButton+0x84>
  {
    cliPrintf("button show\n");
 800132a:	4806      	ldr	r0, [pc, #24]	@ (8001344 <cliButton+0x98>)
 800132c:	f000 fd4a 	bl	8001dc4 <cliPrintf>
  }
}
 8001330:	bf00      	nop
 8001332:	3714      	adds	r7, #20
 8001334:	46bd      	mov	sp, r7
 8001336:	bd90      	pop	{r4, r7, pc}
 8001338:	0800ac70 	.word	0x0800ac70
 800133c:	40010c00 	.word	0x40010c00
 8001340:	0800ac78 	.word	0x0800ac78
 8001344:	0800ac80 	.word	0x0800ac80

08001348 <cliInit>:
void cliShowList(cli_args_t *args);
void cliMemoryDump(cli_args_t *args);


bool cliInit(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  cli_node.is_open = false;
 800134c:	4b1b      	ldr	r3, [pc, #108]	@ (80013bc <cliInit+0x74>)
 800134e:	2200      	movs	r2, #0
 8001350:	721a      	strb	r2, [r3, #8]
  cli_node.is_log  = false;
 8001352:	4b1a      	ldr	r3, [pc, #104]	@ (80013bc <cliInit+0x74>)
 8001354:	2200      	movs	r2, #0
 8001356:	725a      	strb	r2, [r3, #9]
  cli_node.state   = CLI_RX_IDLE;
 8001358:	4b18      	ldr	r3, [pc, #96]	@ (80013bc <cliInit+0x74>)
 800135a:	2200      	movs	r2, #0
 800135c:	741a      	strb	r2, [r3, #16]

  cli_node.hist_line_i     = 0;
 800135e:	4b17      	ldr	r3, [pc, #92]	@ (80013bc <cliInit+0x74>)
 8001360:	2200      	movs	r2, #0
 8001362:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
  cli_node.hist_line_last  = 0;
 8001366:	4b15      	ldr	r3, [pc, #84]	@ (80013bc <cliInit+0x74>)
 8001368:	2200      	movs	r2, #0
 800136a:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
  cli_node.hist_line_count = 0;
 800136e:	4b13      	ldr	r3, [pc, #76]	@ (80013bc <cliInit+0x74>)
 8001370:	2200      	movs	r2, #0
 8001372:	f883 2197 	strb.w	r2, [r3, #407]	@ 0x197
  cli_node.hist_line_new   = false;
 8001376:	4b11      	ldr	r3, [pc, #68]	@ (80013bc <cliInit+0x74>)
 8001378:	2200      	movs	r2, #0
 800137a:	f883 2194 	strb.w	r2, [r3, #404]	@ 0x194

  cli_node.cmd_args.getData  = cliArgsGetData;
 800137e:	4b0f      	ldr	r3, [pc, #60]	@ (80013bc <cliInit+0x74>)
 8001380:	4a0f      	ldr	r2, [pc, #60]	@ (80013c0 <cliInit+0x78>)
 8001382:	f8c3 2434 	str.w	r2, [r3, #1076]	@ 0x434
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 8001386:	4b0d      	ldr	r3, [pc, #52]	@ (80013bc <cliInit+0x74>)
 8001388:	4a0e      	ldr	r2, [pc, #56]	@ (80013c4 <cliInit+0x7c>)
 800138a:	f8c3 2438 	str.w	r2, [r3, #1080]	@ 0x438
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 800138e:	4b0b      	ldr	r3, [pc, #44]	@ (80013bc <cliInit+0x74>)
 8001390:	4a0d      	ldr	r2, [pc, #52]	@ (80013c8 <cliInit+0x80>)
 8001392:	f8c3 243c 	str.w	r2, [r3, #1084]	@ 0x43c
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 8001396:	4b09      	ldr	r3, [pc, #36]	@ (80013bc <cliInit+0x74>)
 8001398:	4a0c      	ldr	r2, [pc, #48]	@ (80013cc <cliInit+0x84>)
 800139a:	f8c3 2440 	str.w	r2, [r3, #1088]	@ 0x440

  cliLineClean(&cli_node);
 800139e:	4807      	ldr	r0, [pc, #28]	@ (80013bc <cliInit+0x74>)
 80013a0:	f000 fb86 	bl	8001ab0 <cliLineClean>

  cliAdd("help", cliShowList);
 80013a4:	490a      	ldr	r1, [pc, #40]	@ (80013d0 <cliInit+0x88>)
 80013a6:	480b      	ldr	r0, [pc, #44]	@ (80013d4 <cliInit+0x8c>)
 80013a8:	f000 fe0e 	bl	8001fc8 <cliAdd>
  cliAdd("md"  , cliMemoryDump);
 80013ac:	490a      	ldr	r1, [pc, #40]	@ (80013d8 <cliInit+0x90>)
 80013ae:	480b      	ldr	r0, [pc, #44]	@ (80013dc <cliInit+0x94>)
 80013b0:	f000 fe0a 	bl	8001fc8 <cliAdd>

  return true;
 80013b4:	2301      	movs	r3, #1
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	2000020c 	.word	0x2000020c
 80013c0:	08001e75 	.word	0x08001e75
 80013c4:	08001ec5 	.word	0x08001ec5
 80013c8:	08001f15 	.word	0x08001f15
 80013cc:	08001f59 	.word	0x08001f59
 80013d0:	0800205d 	.word	0x0800205d
 80013d4:	0800ac90 	.word	0x0800ac90
 80013d8:	080020cd 	.word	0x080020cd
 80013dc:	0800ac98 	.word	0x0800ac98

080013e0 <cliOpen>:

bool cliOpen(uint8_t ch, uint32_t baud)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	6039      	str	r1, [r7, #0]
 80013ea:	71fb      	strb	r3, [r7, #7]
  cli_node.ch = ch;
 80013ec:	4a1c      	ldr	r2, [pc, #112]	@ (8001460 <cliOpen+0x80>)
 80013ee:	79fb      	ldrb	r3, [r7, #7]
 80013f0:	7013      	strb	r3, [r2, #0]
  cli_node.baud = baud;
 80013f2:	4a1b      	ldr	r2, [pc, #108]	@ (8001460 <cliOpen+0x80>)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	6053      	str	r3, [r2, #4]

  qbuffer.in = 0;
 80013f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001464 <cliOpen+0x84>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
  qbuffer.out = 0;
 80013fe:	4b19      	ldr	r3, [pc, #100]	@ (8001464 <cliOpen+0x84>)
 8001400:	2200      	movs	r2, #0
 8001402:	605a      	str	r2, [r3, #4]
  qbuffer.len = 256;
 8001404:	4b17      	ldr	r3, [pc, #92]	@ (8001464 <cliOpen+0x84>)
 8001406:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800140a:	609a      	str	r2, [r3, #8]
  qbuffer.p_buf = &uart_buf[0];
 800140c:	4b15      	ldr	r3, [pc, #84]	@ (8001464 <cliOpen+0x84>)
 800140e:	4a16      	ldr	r2, [pc, #88]	@ (8001468 <cliOpen+0x88>)
 8001410:	60da      	str	r2, [r3, #12]

  cli_node.is_open = true;
 8001412:	4b13      	ldr	r3, [pc, #76]	@ (8001460 <cliOpen+0x80>)
 8001414:	2201      	movs	r2, #1
 8001416:	721a      	strb	r2, [r3, #8]

  if(ch == CH_CDC)
 8001418:	79fb      	ldrb	r3, [r7, #7]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d01a      	beq.n	8001454 <cliOpen+0x74>
  {
  }
  else if(ch == CH_USART1)
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	2b01      	cmp	r3, #1
 8001422:	d117      	bne.n	8001454 <cliOpen+0x74>
  {
    if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&uart_buf, 256) != HAL_OK)
 8001424:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001428:	490f      	ldr	r1, [pc, #60]	@ (8001468 <cliOpen+0x88>)
 800142a:	4810      	ldr	r0, [pc, #64]	@ (800146c <cliOpen+0x8c>)
 800142c:	f005 f9fd 	bl	800682a <HAL_UART_Receive_DMA>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d002      	beq.n	800143c <cliOpen+0x5c>
    {
      cli_node.is_open = false;
 8001436:	4b0a      	ldr	r3, [pc, #40]	@ (8001460 <cliOpen+0x80>)
 8001438:	2200      	movs	r2, #0
 800143a:	721a      	strb	r2, [r3, #8]
    }

    qbuffer.in = qbuffer.len - hdma_usart1_rx.Instance->CNDTR;
 800143c:	4b09      	ldr	r3, [pc, #36]	@ (8001464 <cliOpen+0x84>)
 800143e:	689a      	ldr	r2, [r3, #8]
 8001440:	4b0b      	ldr	r3, [pc, #44]	@ (8001470 <cliOpen+0x90>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	4a06      	ldr	r2, [pc, #24]	@ (8001464 <cliOpen+0x84>)
 800144a:	6013      	str	r3, [r2, #0]
    qbuffer.out = qbuffer.in;
 800144c:	4b05      	ldr	r3, [pc, #20]	@ (8001464 <cliOpen+0x84>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a04      	ldr	r2, [pc, #16]	@ (8001464 <cliOpen+0x84>)
 8001452:	6053      	str	r3, [r2, #4]
  }

  return cli_node.is_open;
 8001454:	4b02      	ldr	r3, [pc, #8]	@ (8001460 <cliOpen+0x80>)
 8001456:	7a1b      	ldrb	r3, [r3, #8]
}
 8001458:	4618      	mov	r0, r3
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	2000020c 	.word	0x2000020c
 8001464:	20000650 	.word	0x20000650
 8001468:	20000660 	.word	0x20000660
 800146c:	20000850 	.word	0x20000850
 8001470:	200008e0 	.word	0x200008e0

08001474 <cliShowLog>:
  cli_node.is_log = false;
  return true;
}

void cliShowLog(cli_t *p_cli)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  if (cli_node.is_log == true)
 800147c:	4b34      	ldr	r3, [pc, #208]	@ (8001550 <cliShowLog+0xdc>)
 800147e:	7a5b      	ldrb	r3, [r3, #9]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d061      	beq.n	8001548 <cliShowLog+0xd4>
  {
    uartPrintf(p_cli->log_ch, "Cursor  : %d\n", p_cli->line.cursor);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	7a98      	ldrb	r0, [r3, #10]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
 800148e:	461a      	mov	r2, r3
 8001490:	4930      	ldr	r1, [pc, #192]	@ (8001554 <cliShowLog+0xe0>)
 8001492:	f000 feeb 	bl	800226c <uartPrintf>
    uartPrintf(p_cli->log_ch, "Count   : %d\n", p_cli->line.count);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	7a98      	ldrb	r0, [r3, #10]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
 80014a0:	461a      	mov	r2, r3
 80014a2:	492d      	ldr	r1, [pc, #180]	@ (8001558 <cliShowLog+0xe4>)
 80014a4:	f000 fee2 	bl	800226c <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf_len : %d\n", p_cli->line.buf_len);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	7a98      	ldrb	r0, [r3, #10]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f893 32e4 	ldrb.w	r3, [r3, #740]	@ 0x2e4
 80014b2:	461a      	mov	r2, r3
 80014b4:	4929      	ldr	r1, [pc, #164]	@ (800155c <cliShowLog+0xe8>)
 80014b6:	f000 fed9 	bl	800226c <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf     : %s\n", p_cli->line.buf);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	7a98      	ldrb	r0, [r3, #10]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 80014c4:	461a      	mov	r2, r3
 80014c6:	4926      	ldr	r1, [pc, #152]	@ (8001560 <cliShowLog+0xec>)
 80014c8:	f000 fed0 	bl	800226c <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_i  : %d\n", p_cli->hist_line_i);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	7a98      	ldrb	r0, [r3, #10]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f993 3195 	ldrsb.w	r3, [r3, #405]	@ 0x195
 80014d6:	461a      	mov	r2, r3
 80014d8:	4922      	ldr	r1, [pc, #136]	@ (8001564 <cliShowLog+0xf0>)
 80014da:	f000 fec7 	bl	800226c <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_lt : %d\n", p_cli->hist_line_last);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	7a98      	ldrb	r0, [r3, #10]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 80014e8:	461a      	mov	r2, r3
 80014ea:	491f      	ldr	r1, [pc, #124]	@ (8001568 <cliShowLog+0xf4>)
 80014ec:	f000 febe 	bl	800226c <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_c  : %d\n", p_cli->hist_line_count);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	7a98      	ldrb	r0, [r3, #10]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 80014fa:	461a      	mov	r2, r3
 80014fc:	491b      	ldr	r1, [pc, #108]	@ (800156c <cliShowLog+0xf8>)
 80014fe:	f000 feb5 	bl	800226c <uartPrintf>

    for (int i=0; i<p_cli->hist_line_count; i++)
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	e012      	b.n	800152e <cliShowLog+0xba>
    {
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	7a98      	ldrb	r0, [r3, #10]
 800150c:	68fa      	ldr	r2, [r7, #12]
 800150e:	4613      	mov	r3, r2
 8001510:	015b      	lsls	r3, r3, #5
 8001512:	4413      	add	r3, r2
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	4413      	add	r3, r2
 8001518:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	4413      	add	r3, r2
 8001520:	68fa      	ldr	r2, [r7, #12]
 8001522:	4913      	ldr	r1, [pc, #76]	@ (8001570 <cliShowLog+0xfc>)
 8001524:	f000 fea2 	bl	800226c <uartPrintf>
    for (int i=0; i<p_cli->hist_line_count; i++)
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	3301      	adds	r3, #1
 800152c:	60fb      	str	r3, [r7, #12]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 8001534:	461a      	mov	r2, r3
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	4293      	cmp	r3, r2
 800153a:	dbe5      	blt.n	8001508 <cliShowLog+0x94>
    }
    uartPrintf(p_cli->log_ch, "\n");
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	7a9b      	ldrb	r3, [r3, #10]
 8001540:	490c      	ldr	r1, [pc, #48]	@ (8001574 <cliShowLog+0x100>)
 8001542:	4618      	mov	r0, r3
 8001544:	f000 fe92 	bl	800226c <uartPrintf>
  }
}
 8001548:	bf00      	nop
 800154a:	3710      	adds	r7, #16
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	2000020c 	.word	0x2000020c
 8001554:	0800ac9c 	.word	0x0800ac9c
 8001558:	0800acac 	.word	0x0800acac
 800155c:	0800acbc 	.word	0x0800acbc
 8001560:	0800accc 	.word	0x0800accc
 8001564:	0800acdc 	.word	0x0800acdc
 8001568:	0800acec 	.word	0x0800acec
 800156c:	0800acfc 	.word	0x0800acfc
 8001570:	0800ad0c 	.word	0x0800ad0c
 8001574:	0800ad1c 	.word	0x0800ad1c

08001578 <cliShowPrompt>:

void cliShowPrompt(cli_t *p_cli)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  uartPrintf(p_cli->ch, "\n\r");
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	4906      	ldr	r1, [pc, #24]	@ (80015a0 <cliShowPrompt+0x28>)
 8001586:	4618      	mov	r0, r3
 8001588:	f000 fe70 	bl	800226c <uartPrintf>
  uartPrintf(p_cli->ch, CLI_PROMPT_STR);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	4904      	ldr	r1, [pc, #16]	@ (80015a4 <cliShowPrompt+0x2c>)
 8001592:	4618      	mov	r0, r3
 8001594:	f000 fe6a 	bl	800226c <uartPrintf>
}
 8001598:	bf00      	nop
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	0800ad20 	.word	0x0800ad20
 80015a4:	0800ad24 	.word	0x0800ad24

080015a8 <cliMain>:

bool cliMain(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  if (cli_node.is_open != true)
 80015ac:	4b0e      	ldr	r3, [pc, #56]	@ (80015e8 <cliMain+0x40>)
 80015ae:	7a1b      	ldrb	r3, [r3, #8]
 80015b0:	f083 0301 	eor.w	r3, r3, #1
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <cliMain+0x16>
  {
    return false;
 80015ba:	2300      	movs	r3, #0
 80015bc:	e012      	b.n	80015e4 <cliMain+0x3c>
  }

  if(uartAvailable(cli_node.ch) > 0)
 80015be:	4b0a      	ldr	r3, [pc, #40]	@ (80015e8 <cliMain+0x40>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f000 fe24 	bl	8002210 <uartAvailable>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d009      	beq.n	80015e2 <cliMain+0x3a>
  {
    cliUpdate(&cli_node, uartRead(cli_node.ch));
 80015ce:	4b06      	ldr	r3, [pc, #24]	@ (80015e8 <cliMain+0x40>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f000 fea6 	bl	8002324 <uartRead>
 80015d8:	4603      	mov	r3, r0
 80015da:	4619      	mov	r1, r3
 80015dc:	4802      	ldr	r0, [pc, #8]	@ (80015e8 <cliMain+0x40>)
 80015de:	f000 f805 	bl	80015ec <cliUpdate>
  }

  return true;
 80015e2:	2301      	movs	r3, #1
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	2000020c 	.word	0x2000020c

080015ec <cliUpdate>:
{
  return uartWrite(cli_node.ch, p_data, length);
}

bool cliUpdate(cli_t *p_cli, uint8_t rx_data)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b08c      	sub	sp, #48	@ 0x30
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	460b      	mov	r3, r1
 80015f6:	70fb      	strb	r3, [r7, #3]
  bool ret = false;
 80015f8:	2300      	movs	r3, #0
 80015fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t tx_buf[8];
  cli_line_t *line;

  line = &p_cli->line;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 8001604:	61fb      	str	r3, [r7, #28]


  if (p_cli->state == CLI_RX_IDLE)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	7c1b      	ldrb	r3, [r3, #16]
 800160a:	2b00      	cmp	r3, #0
 800160c:	f040 816d 	bne.w	80018ea <cliUpdate+0x2fe>
  {
    switch(rx_data)
 8001610:	78fb      	ldrb	r3, [r7, #3]
 8001612:	2b7f      	cmp	r3, #127	@ 0x7f
 8001614:	d02a      	beq.n	800166c <cliUpdate+0x80>
 8001616:	2b7f      	cmp	r3, #127	@ 0x7f
 8001618:	f300 80da 	bgt.w	80017d0 <cliUpdate+0x1e4>
 800161c:	2b1b      	cmp	r3, #27
 800161e:	d021      	beq.n	8001664 <cliUpdate+0x78>
 8001620:	2b1b      	cmp	r3, #27
 8001622:	f300 80d5 	bgt.w	80017d0 <cliUpdate+0x1e4>
 8001626:	2b08      	cmp	r3, #8
 8001628:	d062      	beq.n	80016f0 <cliUpdate+0x104>
 800162a:	2b0d      	cmp	r3, #13
 800162c:	f040 80d0 	bne.w	80017d0 <cliUpdate+0x1e4>
    {
      // 엔터
      //
      case CLI_KEY_ENTER:
        if (line->count > 0)
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001636:	2b00      	cmp	r3, #0
 8001638:	d005      	beq.n	8001646 <cliUpdate+0x5a>
        {
          cliLineAdd(p_cli);
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f000 fa51 	bl	8001ae2 <cliLineAdd>
          cliRunCmd(p_cli);
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f000 fb1d 	bl	8001c80 <cliRunCmd>
        }

        line->count = 0;
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	2200      	movs	r2, #0
 800164a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        line->cursor = 0;
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	2200      	movs	r2, #0
 8001652:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        line->buf[0] = 0;
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	2200      	movs	r2, #0
 800165a:	701a      	strb	r2, [r3, #0]
        cliShowPrompt(p_cli);
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f7ff ff8b 	bl	8001578 <cliShowPrompt>
        break;
 8001662:	e142      	b.n	80018ea <cliUpdate+0x2fe>


      case CLI_KEY_ESC:
        p_cli->state = CLI_RX_SP1;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2201      	movs	r2, #1
 8001668:	741a      	strb	r2, [r3, #16]
        break;
 800166a:	e13e      	b.n	80018ea <cliUpdate+0x2fe>


      // DEL
      //
      case CLI_KEY_DEL:
        if (line->cursor < line->count)
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001678:	429a      	cmp	r2, r3
 800167a:	f080 8131 	bcs.w	80018e0 <cliUpdate+0x2f4>
        {
          uint8_t mov_len;

          mov_len = line->count - line->cursor;
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	76fb      	strb	r3, [r7, #27]
          for (int i=1; i<mov_len; i++)
 800168e:	2301      	movs	r3, #1
 8001690:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001692:	e013      	b.n	80016bc <cliUpdate+0xd0>
          {
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800169a:	461a      	mov	r2, r3
 800169c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800169e:	441a      	add	r2, r3
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80016a6:	4619      	mov	r1, r3
 80016a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016aa:	440b      	add	r3, r1
 80016ac:	3b01      	subs	r3, #1
 80016ae:	69f9      	ldr	r1, [r7, #28]
 80016b0:	5c89      	ldrb	r1, [r1, r2]
 80016b2:	69fa      	ldr	r2, [r7, #28]
 80016b4:	54d1      	strb	r1, [r2, r3]
          for (int i=1; i<mov_len; i++)
 80016b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016b8:	3301      	adds	r3, #1
 80016ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016bc:	7efb      	ldrb	r3, [r7, #27]
 80016be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016c0:	429a      	cmp	r2, r3
 80016c2:	dbe7      	blt.n	8001694 <cliUpdate+0xa8>
          }

          line->count--;
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80016ca:	3b01      	subs	r3, #1
 80016cc:	b2da      	uxtb	r2, r3
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          line->buf[line->count] = 0;
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80016da:	461a      	mov	r2, r3
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	2100      	movs	r1, #0
 80016e0:	5499      	strb	r1, [r3, r2]

          uartPrintf(p_cli->ch, "\x1B[1P");
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	498d      	ldr	r1, [pc, #564]	@ (800191c <cliUpdate+0x330>)
 80016e8:	4618      	mov	r0, r3
 80016ea:	f000 fdbf 	bl	800226c <uartPrintf>
        }
        break;
 80016ee:	e0f7      	b.n	80018e0 <cliUpdate+0x2f4>


      // 백스페이스
      //
      case CLI_KEY_BACK:
        if (line->count > 0 && line->cursor > 0)
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d055      	beq.n	80017a6 <cliUpdate+0x1ba>
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001700:	2b00      	cmp	r3, #0
 8001702:	d050      	beq.n	80017a6 <cliUpdate+0x1ba>
        {
          if (line->cursor == line->count)
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001710:	429a      	cmp	r2, r3
 8001712:	d10e      	bne.n	8001732 <cliUpdate+0x146>
          {
            line->count--;
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800171a:	3b01      	subs	r3, #1
 800171c:	b2da      	uxtb	r2, r3
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
            line->buf[line->count] = 0;
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800172a:	461a      	mov	r2, r3
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	2100      	movs	r1, #0
 8001730:	5499      	strb	r1, [r3, r2]
          }

          if (line->cursor < line->count)
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800173e:	429a      	cmp	r2, r3
 8001740:	d231      	bcs.n	80017a6 <cliUpdate+0x1ba>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	76bb      	strb	r3, [r7, #26]

            for (int i=0; i<mov_len; i++)
 8001752:	2300      	movs	r3, #0
 8001754:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001756:	e013      	b.n	8001780 <cliUpdate+0x194>
            {
              line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800175e:	461a      	mov	r2, r3
 8001760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001762:	441a      	add	r2, r3
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800176a:	4619      	mov	r1, r3
 800176c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800176e:	440b      	add	r3, r1
 8001770:	3b01      	subs	r3, #1
 8001772:	69f9      	ldr	r1, [r7, #28]
 8001774:	5c89      	ldrb	r1, [r1, r2]
 8001776:	69fa      	ldr	r2, [r7, #28]
 8001778:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 800177a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800177c:	3301      	adds	r3, #1
 800177e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001780:	7ebb      	ldrb	r3, [r7, #26]
 8001782:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001784:	429a      	cmp	r2, r3
 8001786:	dbe7      	blt.n	8001758 <cliUpdate+0x16c>
            }

            line->count--;
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800178e:	3b01      	subs	r3, #1
 8001790:	b2da      	uxtb	r2, r3
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
            line->buf[line->count] = 0;
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800179e:	461a      	mov	r2, r3
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	2100      	movs	r1, #0
 80017a4:	5499      	strb	r1, [r3, r2]
          }
        }

        if (line->cursor > 0)
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	f000 8099 	beq.w	80018e4 <cliUpdate+0x2f8>
        {
          line->cursor--;
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80017b8:	3b01      	subs	r3, #1
 80017ba:	b2da      	uxtb	r2, r3
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	4956      	ldr	r1, [pc, #344]	@ (8001920 <cliUpdate+0x334>)
 80017c8:	4618      	mov	r0, r3
 80017ca:	f000 fd4f 	bl	800226c <uartPrintf>
        }
        break;
 80017ce:	e089      	b.n	80018e4 <cliUpdate+0x2f8>


      default:
        if ((line->count + 1) < line->buf_len)
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80017d6:	3301      	adds	r3, #1
 80017d8:	69fa      	ldr	r2, [r7, #28]
 80017da:	f892 2040 	ldrb.w	r2, [r2, #64]	@ 0x40
 80017de:	4293      	cmp	r3, r2
 80017e0:	f280 8082 	bge.w	80018e8 <cliUpdate+0x2fc>
        {
          if (line->cursor == line->count)
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d124      	bne.n	800183e <cliUpdate+0x252>
          {
            uartWrite(p_cli->ch, &rx_data, 1);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	1cf9      	adds	r1, r7, #3
 80017fa:	2201      	movs	r2, #1
 80017fc:	4618      	mov	r0, r3
 80017fe:	f000 fd6d 	bl	80022dc <uartWrite>

            line->buf[line->cursor] = rx_data;
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001808:	461a      	mov	r2, r3
 800180a:	78f9      	ldrb	r1, [r7, #3]
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	5499      	strb	r1, [r3, r2]
            line->count++;
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001816:	3301      	adds	r3, #1
 8001818:	b2da      	uxtb	r2, r3
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
            line->cursor++;
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001826:	3301      	adds	r3, #1
 8001828:	b2da      	uxtb	r2, r3
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
            line->buf[line->count] = 0;
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001836:	461a      	mov	r2, r3
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	2100      	movs	r1, #0
 800183c:	5499      	strb	r1, [r3, r2]
          }
          if (line->cursor < line->count)
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800184a:	429a      	cmp	r2, r3
 800184c:	d24c      	bcs.n	80018e8 <cliUpdate+0x2fc>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	767b      	strb	r3, [r7, #25]
            for (int i=0; i<mov_len; i++)
 800185e:	2300      	movs	r3, #0
 8001860:	627b      	str	r3, [r7, #36]	@ 0x24
 8001862:	e013      	b.n	800188c <cliUpdate+0x2a0>
            {
              line->buf[line->count - i] = line->buf[line->count - i - 1];
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800186a:	461a      	mov	r2, r3
 800186c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	1e5a      	subs	r2, r3, #1
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001878:	4619      	mov	r1, r3
 800187a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800187c:	1acb      	subs	r3, r1, r3
 800187e:	69f9      	ldr	r1, [r7, #28]
 8001880:	5c89      	ldrb	r1, [r1, r2]
 8001882:	69fa      	ldr	r2, [r7, #28]
 8001884:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 8001886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001888:	3301      	adds	r3, #1
 800188a:	627b      	str	r3, [r7, #36]	@ 0x24
 800188c:	7e7b      	ldrb	r3, [r7, #25]
 800188e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001890:	429a      	cmp	r2, r3
 8001892:	dbe7      	blt.n	8001864 <cliUpdate+0x278>
            }
            line->buf[line->cursor] = rx_data;
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800189a:	461a      	mov	r2, r3
 800189c:	78f9      	ldrb	r1, [r7, #3]
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	5499      	strb	r1, [r3, r2]
            line->count++;
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80018a8:	3301      	adds	r3, #1
 80018aa:	b2da      	uxtb	r2, r3
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
            line->cursor++;
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80018b8:	3301      	adds	r3, #1
 80018ba:	b2da      	uxtb	r2, r3
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
            line->buf[line->count] = 0;
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80018c8:	461a      	mov	r2, r3
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	2100      	movs	r1, #0
 80018ce:	5499      	strb	r1, [r3, r2]

            uartPrintf(p_cli->ch, "\x1B[4h%c\x1B[4l", rx_data);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	78fa      	ldrb	r2, [r7, #3]
 80018d6:	4913      	ldr	r1, [pc, #76]	@ (8001924 <cliUpdate+0x338>)
 80018d8:	4618      	mov	r0, r3
 80018da:	f000 fcc7 	bl	800226c <uartPrintf>
          }
        }
        break;
 80018de:	e003      	b.n	80018e8 <cliUpdate+0x2fc>
        break;
 80018e0:	bf00      	nop
 80018e2:	e002      	b.n	80018ea <cliUpdate+0x2fe>
        break;
 80018e4:	bf00      	nop
 80018e6:	e000      	b.n	80018ea <cliUpdate+0x2fe>
        break;
 80018e8:	bf00      	nop
    }
  }

  switch(p_cli->state)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	7c1b      	ldrb	r3, [r3, #16]
 80018ee:	3b01      	subs	r3, #1
 80018f0:	2b03      	cmp	r3, #3
 80018f2:	f200 80d0 	bhi.w	8001a96 <cliUpdate+0x4aa>
 80018f6:	a201      	add	r2, pc, #4	@ (adr r2, 80018fc <cliUpdate+0x310>)
 80018f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018fc:	0800190d 	.word	0x0800190d
 8001900:	08001915 	.word	0x08001915
 8001904:	08001929 	.word	0x08001929
 8001908:	08001a8d 	.word	0x08001a8d
  {
    case CLI_RX_SP1:
      p_cli->state = CLI_RX_SP2;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2202      	movs	r2, #2
 8001910:	741a      	strb	r2, [r3, #16]
      break;
 8001912:	e0c0      	b.n	8001a96 <cliUpdate+0x4aa>

    case CLI_RX_SP2:
      p_cli->state = CLI_RX_SP3;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2203      	movs	r2, #3
 8001918:	741a      	strb	r2, [r3, #16]
      break;
 800191a:	e0bc      	b.n	8001a96 <cliUpdate+0x4aa>
 800191c:	0800ad2c 	.word	0x0800ad2c
 8001920:	0800ad34 	.word	0x0800ad34
 8001924:	0800ad3c 	.word	0x0800ad3c

    case CLI_RX_SP3:
      p_cli->state = CLI_RX_IDLE;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	741a      	strb	r2, [r3, #16]

      if (rx_data == CLI_KEY_LEFT)
 800192e:	78fb      	ldrb	r3, [r7, #3]
 8001930:	2b44      	cmp	r3, #68	@ 0x44
 8001932:	d11a      	bne.n	800196a <cliUpdate+0x37e>
      {
        if (line->cursor > 0)
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800193a:	2b00      	cmp	r3, #0
 800193c:	d015      	beq.n	800196a <cliUpdate+0x37e>
        {
          line->cursor--;
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001944:	3b01      	subs	r3, #1
 8001946:	b2da      	uxtb	r2, r3
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          tx_buf[0] = 0x1B;
 800194e:	231b      	movs	r3, #27
 8001950:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 8001952:	235b      	movs	r3, #91	@ 0x5b
 8001954:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 8001956:	78fb      	ldrb	r3, [r7, #3]
 8001958:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	f107 010c 	add.w	r1, r7, #12
 8001962:	2203      	movs	r2, #3
 8001964:	4618      	mov	r0, r3
 8001966:	f000 fcb9 	bl	80022dc <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_RIGHT)
 800196a:	78fb      	ldrb	r3, [r7, #3]
 800196c:	2b43      	cmp	r3, #67	@ 0x43
 800196e:	d11d      	bne.n	80019ac <cliUpdate+0x3c0>
      {
        if (line->cursor < line->count)
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800197c:	429a      	cmp	r2, r3
 800197e:	d215      	bcs.n	80019ac <cliUpdate+0x3c0>
        {
          line->cursor++;
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001986:	3301      	adds	r3, #1
 8001988:	b2da      	uxtb	r2, r3
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

          tx_buf[0] = 0x1B;
 8001990:	231b      	movs	r3, #27
 8001992:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 8001994:	235b      	movs	r3, #91	@ 0x5b
 8001996:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 8001998:	78fb      	ldrb	r3, [r7, #3]
 800199a:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	f107 010c 	add.w	r1, r7, #12
 80019a4:	2203      	movs	r2, #3
 80019a6:	4618      	mov	r0, r3
 80019a8:	f000 fc98 	bl	80022dc <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_UP)
 80019ac:	78fb      	ldrb	r3, [r7, #3]
 80019ae:	2b41      	cmp	r3, #65	@ 0x41
 80019b0:	d10c      	bne.n	80019cc <cliUpdate+0x3e0>
      {
        cliLineChange(p_cli, true);
 80019b2:	2101      	movs	r1, #1
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f000 f8d9 	bl	8001b6c <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	781a      	ldrb	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 80019c4:	4619      	mov	r1, r3
 80019c6:	4610      	mov	r0, r2
 80019c8:	f000 fc50 	bl	800226c <uartPrintf>
      }

      if (rx_data == CLI_KEY_DOWN)
 80019cc:	78fb      	ldrb	r3, [r7, #3]
 80019ce:	2b42      	cmp	r3, #66	@ 0x42
 80019d0:	d10c      	bne.n	80019ec <cliUpdate+0x400>
      {
        cliLineChange(p_cli, false);
 80019d2:	2100      	movs	r1, #0
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f000 f8c9 	bl	8001b6c <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	781a      	ldrb	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 80019e4:	4619      	mov	r1, r3
 80019e6:	4610      	mov	r0, r2
 80019e8:	f000 fc40 	bl	800226c <uartPrintf>
      }

      if (rx_data == CLI_KEY_HOME)
 80019ec:	78fb      	ldrb	r3, [r7, #3]
 80019ee:	2b31      	cmp	r3, #49	@ 0x31
 80019f0:	d10f      	bne.n	8001a12 <cliUpdate+0x426>
      {
        uartPrintf(p_cli->ch, "\x1B[%dD", line->cursor);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	7818      	ldrb	r0, [r3, #0]
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019fc:	461a      	mov	r2, r3
 80019fe:	492a      	ldr	r1, [pc, #168]	@ (8001aa8 <cliUpdate+0x4bc>)
 8001a00:	f000 fc34 	bl	800226c <uartPrintf>
        line->cursor = 0;
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	2200      	movs	r2, #0
 8001a08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        p_cli->state = CLI_RX_SP4;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2204      	movs	r2, #4
 8001a10:	741a      	strb	r2, [r3, #16]
      }

      if (rx_data == CLI_KEY_END)
 8001a12:	78fb      	ldrb	r3, [r7, #3]
 8001a14:	2b34      	cmp	r3, #52	@ 0x34
 8001a16:	d13d      	bne.n	8001a94 <cliUpdate+0x4a8>
      {
        uint16_t mov_len;

        if (line->cursor < line->count)
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d20f      	bcs.n	8001a48 <cliUpdate+0x45c>
        {
          mov_len = line->count - line->cursor;
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001a2e:	461a      	mov	r2, r3
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dC", mov_len);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	8afa      	ldrh	r2, [r7, #22]
 8001a40:	491a      	ldr	r1, [pc, #104]	@ (8001aac <cliUpdate+0x4c0>)
 8001a42:	4618      	mov	r0, r3
 8001a44:	f000 fc12 	bl	800226c <uartPrintf>
        }
        if (line->cursor > line->count)
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d90f      	bls.n	8001a78 <cliUpdate+0x48c>
        {
          mov_len = line->cursor - line->count;
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a5e:	461a      	mov	r2, r3
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dD", mov_len);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	8afa      	ldrh	r2, [r7, #22]
 8001a70:	490d      	ldr	r1, [pc, #52]	@ (8001aa8 <cliUpdate+0x4bc>)
 8001a72:	4618      	mov	r0, r3
 8001a74:	f000 fbfa 	bl	800226c <uartPrintf>
        }
        line->cursor = line->count;
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        p_cli->state = CLI_RX_SP4;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2204      	movs	r2, #4
 8001a88:	741a      	strb	r2, [r3, #16]
      }
      break;
 8001a8a:	e003      	b.n	8001a94 <cliUpdate+0x4a8>

    case CLI_RX_SP4:
      p_cli->state = CLI_RX_IDLE;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	741a      	strb	r2, [r3, #16]
      break;
 8001a92:	e000      	b.n	8001a96 <cliUpdate+0x4aa>
      break;
 8001a94:	bf00      	nop
  }



  cliShowLog(p_cli);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f7ff fcec 	bl	8001474 <cliShowLog>

  return ret;
 8001a9c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3730      	adds	r7, #48	@ 0x30
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	0800ad48 	.word	0x0800ad48
 8001aac:	0800ad50 	.word	0x0800ad50

08001ab0 <cliLineClean>:

void cliLineClean(cli_t *p_cli)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  p_cli->line.count   = 0;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 22e6 	strb.w	r2, [r3, #742]	@ 0x2e6
  p_cli->line.cursor  = 0;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f883 22e5 	strb.w	r2, [r3, #741]	@ 0x2e5
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	223f      	movs	r2, #63	@ 0x3f
 8001acc:	f883 22e4 	strb.w	r2, [r3, #740]	@ 0x2e4
  p_cli->line.buf[0]  = 0;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f883 22a4 	strb.w	r2, [r3, #676]	@ 0x2a4
}
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bc80      	pop	{r7}
 8001ae0:	4770      	bx	lr

08001ae2 <cliLineAdd>:

void cliLineAdd(cli_t *p_cli)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b082      	sub	sp, #8
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]

  p_cli->line_buf[p_cli->hist_line_last] = p_cli->line;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8001af0:	461a      	mov	r2, r3
 8001af2:	6879      	ldr	r1, [r7, #4]
 8001af4:	4613      	mov	r3, r2
 8001af6:	015b      	lsls	r3, r3, #5
 8001af8:	4413      	add	r3, r2
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	4413      	add	r3, r2
 8001afe:	440b      	add	r3, r1
 8001b00:	f503 72cc 	add.w	r2, r3, #408	@ 0x198
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	4610      	mov	r0, r2
 8001b08:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 8001b0c:	2243      	movs	r2, #67	@ 0x43
 8001b0e:	4619      	mov	r1, r3
 8001b10:	f006 fe7d 	bl	800880e <memcpy>

  if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 8001b1a:	2b03      	cmp	r3, #3
 8001b1c:	d807      	bhi.n	8001b2e <cliLineAdd+0x4c>
  {
    p_cli->hist_line_count++;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 8001b24:	3301      	adds	r3, #1
 8001b26:	b2da      	uxtb	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f883 2197 	strb.w	r2, [r3, #407]	@ 0x197
  }

  p_cli->hist_line_i    = p_cli->hist_line_last;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8001b34:	b25a      	sxtb	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
  p_cli->hist_line_last = (p_cli->hist_line_last + 1) % CLI_LINE_HIS_MAX;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8001b42:	3301      	adds	r3, #1
 8001b44:	425a      	negs	r2, r3
 8001b46:	f003 0303 	and.w	r3, r3, #3
 8001b4a:	f002 0203 	and.w	r2, r2, #3
 8001b4e:	bf58      	it	pl
 8001b50:	4253      	negpl	r3, r2
 8001b52:	b2da      	uxtb	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
  p_cli->hist_line_new  = true;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	f883 2194 	strb.w	r2, [r3, #404]	@ 0x194
}
 8001b62:	bf00      	nop
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
	...

08001b6c <cliLineChange>:

void cliLineChange(cli_t *p_cli, int8_t key_up)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	460b      	mov	r3, r1
 8001b76:	70fb      	strb	r3, [r7, #3]
  uint8_t change_i;


  if (p_cli->hist_line_count == 0)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d076      	beq.n	8001c70 <cliLineChange+0x104>
  {
    return;
  }


  if (p_cli->line.cursor > 0)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d008      	beq.n	8001b9e <cliLineChange+0x32>
  {
    uartPrintf(p_cli->ch, "\x1B[%dD", p_cli->line.cursor);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	7818      	ldrb	r0, [r3, #0]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
 8001b96:	461a      	mov	r2, r3
 8001b98:	4937      	ldr	r1, [pc, #220]	@ (8001c78 <cliLineChange+0x10c>)
 8001b9a:	f000 fb67 	bl	800226c <uartPrintf>
  }
  if (p_cli->line.count > 0)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d008      	beq.n	8001bba <cliLineChange+0x4e>
  {
    uartPrintf(p_cli->ch, "\x1B[%dP", p_cli->line.count);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	7818      	ldrb	r0, [r3, #0]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	4931      	ldr	r1, [pc, #196]	@ (8001c7c <cliLineChange+0x110>)
 8001bb6:	f000 fb59 	bl	800226c <uartPrintf>
  }


  if (key_up == true)
 8001bba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d125      	bne.n	8001c0e <cliLineChange+0xa2>
  {
    if (p_cli->hist_line_new == true)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f893 3194 	ldrb.w	r3, [r3, #404]	@ 0x194
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d006      	beq.n	8001bda <cliLineChange+0x6e>
    {
      p_cli->hist_line_i = p_cli->hist_line_last;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8001bd2:	b25a      	sxtb	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
    }
    p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) % p_cli->hist_line_count;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f993 3195 	ldrsb.w	r3, [r3, #405]	@ 0x195
 8001be0:	461a      	mov	r2, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 8001be8:	4413      	add	r3, r2
 8001bea:	3b01      	subs	r3, #1
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	f892 2197 	ldrb.w	r2, [r2, #407]	@ 0x197
 8001bf2:	fb93 f1f2 	sdiv	r1, r3, r2
 8001bf6:	fb01 f202 	mul.w	r2, r1, r2
 8001bfa:	1a9b      	subs	r3, r3, r2
 8001bfc:	b25a      	sxtb	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
    change_i = p_cli->hist_line_i;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f993 3195 	ldrsb.w	r3, [r3, #405]	@ 0x195
 8001c0a:	73fb      	strb	r3, [r7, #15]
 8001c0c:	e013      	b.n	8001c36 <cliLineChange+0xca>
  }
  else
  {
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f993 3195 	ldrsb.w	r3, [r3, #405]	@ 0x195
 8001c14:	3301      	adds	r3, #1
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	f892 2197 	ldrb.w	r2, [r2, #407]	@ 0x197
 8001c1c:	fb93 f1f2 	sdiv	r1, r3, r2
 8001c20:	fb01 f202 	mul.w	r2, r1, r2
 8001c24:	1a9b      	subs	r3, r3, r2
 8001c26:	b25a      	sxtb	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
    change_i = p_cli->hist_line_i;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f993 3195 	ldrsb.w	r3, [r3, #405]	@ 0x195
 8001c34:	73fb      	strb	r3, [r7, #15]
  }

  p_cli->line = p_cli->line_buf[change_i];
 8001c36:	7bfa      	ldrb	r2, [r7, #15]
 8001c38:	6879      	ldr	r1, [r7, #4]
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	015b      	lsls	r3, r3, #5
 8001c40:	4413      	add	r3, r2
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	4413      	add	r3, r2
 8001c46:	4403      	add	r3, r0
 8001c48:	f503 72cc 	add.w	r2, r3, #408	@ 0x198
 8001c4c:	f501 7329 	add.w	r3, r1, #676	@ 0x2a4
 8001c50:	4611      	mov	r1, r2
 8001c52:	2243      	movs	r2, #67	@ 0x43
 8001c54:	4618      	mov	r0, r3
 8001c56:	f006 fdda 	bl	800880e <memcpy>
  p_cli->line.cursor = p_cli->line.count;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f893 22e6 	ldrb.w	r2, [r3, #742]	@ 0x2e6
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f883 22e5 	strb.w	r2, [r3, #741]	@ 0x2e5

  p_cli->hist_line_new = false;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f883 2194 	strb.w	r2, [r3, #404]	@ 0x194
 8001c6e:	e000      	b.n	8001c72 <cliLineChange+0x106>
    return;
 8001c70:	bf00      	nop
}
 8001c72:	3710      	adds	r7, #16
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	0800ad48 	.word	0x0800ad48
 8001c7c:	0800ad58 	.word	0x0800ad58

08001c80 <cliRunCmd>:

bool cliRunCmd(cli_t *p_cli)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	72fb      	strb	r3, [r7, #11]


  if (cliParseArgs(p_cli) == true)
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f000 f851 	bl	8001d34 <cliParseArgs>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d046      	beq.n	8001d26 <cliRunCmd+0xa6>
  {
    cliPrintf("\r\n");
 8001c98:	4825      	ldr	r0, [pc, #148]	@ (8001d30 <cliRunCmd+0xb0>)
 8001c9a:	f000 f893 	bl	8001dc4 <cliPrintf>

    cliToUpper(p_cli->argv[0]);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f000 f8b1 	bl	8001e0c <cliToUpper>

    for (int i=0; i<p_cli->cmd_count; i++)
 8001caa:	2300      	movs	r3, #0
 8001cac:	60fb      	str	r3, [r7, #12]
 8001cae:	e033      	b.n	8001d18 <cliRunCmd+0x98>
    {
      if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f8d3 0114 	ldr.w	r0, [r3, #276]	@ 0x114
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	4413      	add	r3, r2
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	3304      	adds	r3, #4
 8001cca:	4619      	mov	r1, r3
 8001ccc:	f7fe fa40 	bl	8000150 <strcmp>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d11d      	bne.n	8001d12 <cliRunCmd+0x92>
      {
        p_cli->cmd_args.argc =  p_cli->argc - 1;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f8b3 3112 	ldrh.w	r3, [r3, #274]	@ 0x112
 8001cdc:	3b01      	subs	r3, #1
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f8a3 242c 	strh.w	r2, [r3, #1068]	@ 0x42c
        p_cli->cmd_args.argv = &p_cli->argv[1];
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f503 728c 	add.w	r2, r3, #280	@ 0x118
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
        p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);
 8001cf2:	6879      	ldr	r1, [r7, #4]
 8001cf4:	68fa      	ldr	r2, [r7, #12]
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	4413      	add	r3, r2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	440b      	add	r3, r1
 8001d00:	f503 733f 	add.w	r3, r3, #764	@ 0x2fc
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	f202 422c 	addw	r2, r2, #1068	@ 0x42c
 8001d0c:	4610      	mov	r0, r2
 8001d0e:	4798      	blx	r3
        break;
 8001d10:	e009      	b.n	8001d26 <cliRunCmd+0xa6>
    for (int i=0; i<p_cli->cmd_count; i++)
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	3301      	adds	r3, #1
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	@ 0x2e8
 8001d1e:	461a      	mov	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	4293      	cmp	r3, r2
 8001d24:	dbc4      	blt.n	8001cb0 <cliRunCmd+0x30>
      }
    }
  }

  return ret;
 8001d26:	7afb      	ldrb	r3, [r7, #11]
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3710      	adds	r7, #16
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	0800ad60 	.word	0x0800ad60

08001d34 <cliParseArgs>:

bool cliParseArgs(cli_t *p_cli)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b088      	sub	sp, #32
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	77fb      	strb	r3, [r7, #31]
  char *tok;
  char *next_ptr;
  uint16_t argc = 0;
 8001d40:	2300      	movs	r3, #0
 8001d42:	82fb      	strh	r3, [r7, #22]
  static const char *delim = " \f\n\r\t\v";
  char *cmdline;
  char **argv;

  p_cli->argc = 0;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	f8a3 2112 	strh.w	r2, [r3, #274]	@ 0x112

  cmdline = (char *)p_cli->line.buf;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 8001d52:	613b      	str	r3, [r7, #16]
  argv    = p_cli->argv;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 8001d5a:	60fb      	str	r3, [r7, #12]

  argv[argc] = NULL;
 8001d5c:	8afb      	ldrh	r3, [r7, #22]
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	68fa      	ldr	r2, [r7, #12]
 8001d62:	4413      	add	r3, r2
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]

  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8001d68:	4b15      	ldr	r3, [pc, #84]	@ (8001dc0 <cliParseArgs+0x8c>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f107 0208 	add.w	r2, r7, #8
 8001d70:	4619      	mov	r1, r3
 8001d72:	6938      	ldr	r0, [r7, #16]
 8001d74:	f006 fccc 	bl	8008710 <strtok_r>
 8001d78:	61b8      	str	r0, [r7, #24]
 8001d7a:	e010      	b.n	8001d9e <cliParseArgs+0x6a>
  {
    argv[argc++] = tok;
 8001d7c:	8afb      	ldrh	r3, [r7, #22]
 8001d7e:	1c5a      	adds	r2, r3, #1
 8001d80:	82fa      	strh	r2, [r7, #22]
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	68fa      	ldr	r2, [r7, #12]
 8001d86:	4413      	add	r3, r2
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	601a      	str	r2, [r3, #0]
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8001d8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001dc0 <cliParseArgs+0x8c>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f107 0208 	add.w	r2, r7, #8
 8001d94:	4619      	mov	r1, r3
 8001d96:	2000      	movs	r0, #0
 8001d98:	f006 fcba 	bl	8008710 <strtok_r>
 8001d9c:	61b8      	str	r0, [r7, #24]
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d1eb      	bne.n	8001d7c <cliParseArgs+0x48>
  }

  p_cli->argc = argc;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	8afa      	ldrh	r2, [r7, #22]
 8001da8:	f8a3 2112 	strh.w	r2, [r3, #274]	@ 0x112

  if (argc > 0)
 8001dac:	8afb      	ldrh	r3, [r7, #22]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <cliParseArgs+0x82>
  {
    ret = true;
 8001db2:	2301      	movs	r3, #1
 8001db4:	77fb      	strb	r3, [r7, #31]
  }

  return ret;
 8001db6:	7ffb      	ldrb	r3, [r7, #31]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3720      	adds	r7, #32
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	20000000 	.word	0x20000000

08001dc4 <cliPrintf>:

void cliPrintf(const char *fmt, ...)
{
 8001dc4:	b40f      	push	{r0, r1, r2, r3}
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b084      	sub	sp, #16
 8001dca:	af00      	add	r7, sp, #0
  va_list arg;
  va_start (arg, fmt);
 8001dcc:	f107 031c 	add.w	r3, r7, #28
 8001dd0:	607b      	str	r3, [r7, #4]
  int32_t len;
  cli_t *p_cli = &cli_node;
 8001dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8001e08 <cliPrintf+0x44>)
 8001dd4:	60fb      	str	r3, [r7, #12]


  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f103 0011 	add.w	r0, r3, #17
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001de4:	f006 fc44 	bl	8008670 <vsniprintf>
 8001de8:	60b8      	str	r0, [r7, #8]
  va_end(arg);

  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	7818      	ldrb	r0, [r3, #0]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	3311      	adds	r3, #17
 8001df2:	68ba      	ldr	r2, [r7, #8]
 8001df4:	4619      	mov	r1, r3
 8001df6:	f000 fa71 	bl	80022dc <uartWrite>
}
 8001dfa:	bf00      	nop
 8001dfc:	3710      	adds	r7, #16
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001e04:	b004      	add	sp, #16
 8001e06:	4770      	bx	lr
 8001e08:	2000020c 	.word	0x2000020c

08001e0c <cliToUpper>:

void cliToUpper(char *str)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint16_t i;
  uint8_t  str_ch;

  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8001e14:	2300      	movs	r3, #0
 8001e16:	81fb      	strh	r3, [r7, #14]
 8001e18:	e018      	b.n	8001e4c <cliToUpper+0x40>
  {
    str_ch = str[i];
 8001e1a:	89fb      	ldrh	r3, [r7, #14]
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	4413      	add	r3, r2
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	737b      	strb	r3, [r7, #13]

    if (str_ch == 0)
 8001e24:	7b7b      	ldrb	r3, [r7, #13]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d014      	beq.n	8001e54 <cliToUpper+0x48>
    {
      break;
    }

    if ((str_ch >= 'a') && (str_ch <= 'z'))
 8001e2a:	7b7b      	ldrb	r3, [r7, #13]
 8001e2c:	2b60      	cmp	r3, #96	@ 0x60
 8001e2e:	d905      	bls.n	8001e3c <cliToUpper+0x30>
 8001e30:	7b7b      	ldrb	r3, [r7, #13]
 8001e32:	2b7a      	cmp	r3, #122	@ 0x7a
 8001e34:	d802      	bhi.n	8001e3c <cliToUpper+0x30>
    {
      str_ch = str_ch - 'a' + 'A';
 8001e36:	7b7b      	ldrb	r3, [r7, #13]
 8001e38:	3b20      	subs	r3, #32
 8001e3a:	737b      	strb	r3, [r7, #13]
    }
    str[i] = str_ch;
 8001e3c:	89fb      	ldrh	r3, [r7, #14]
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	4413      	add	r3, r2
 8001e42:	7b7a      	ldrb	r2, [r7, #13]
 8001e44:	701a      	strb	r2, [r3, #0]
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8001e46:	89fb      	ldrh	r3, [r7, #14]
 8001e48:	3301      	adds	r3, #1
 8001e4a:	81fb      	strh	r3, [r7, #14]
 8001e4c:	89fb      	ldrh	r3, [r7, #14]
 8001e4e:	2b0f      	cmp	r3, #15
 8001e50:	d9e3      	bls.n	8001e1a <cliToUpper+0xe>
 8001e52:	e000      	b.n	8001e56 <cliToUpper+0x4a>
      break;
 8001e54:	bf00      	nop
  }

  if (i == CLI_CMD_NAME_MAX)
 8001e56:	89fb      	ldrh	r3, [r7, #14]
 8001e58:	2b10      	cmp	r3, #16
 8001e5a:	d105      	bne.n	8001e68 <cliToUpper+0x5c>
  {
    str[i-1] = 0;
 8001e5c:	89fb      	ldrh	r3, [r7, #14]
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	4413      	add	r3, r2
 8001e64:	2200      	movs	r2, #0
 8001e66:	701a      	strb	r2, [r3, #0]
  }
}
 8001e68:	bf00      	nop
 8001e6a:	3714      	adds	r7, #20
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bc80      	pop	{r7}
 8001e70:	4770      	bx	lr
	...

08001e74 <cliArgsGetData>:

int32_t cliArgsGetData(uint8_t index)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = 0;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8001e82:	4b0f      	ldr	r3, [pc, #60]	@ (8001ec0 <cliArgsGetData+0x4c>)
 8001e84:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8001e86:	79fb      	ldrb	r3, [r7, #7]
 8001e88:	b29a      	uxth	r2, r3
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	@ 0x42c
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d301      	bcc.n	8001e98 <cliArgsGetData+0x24>
  {
    return 0;
 8001e94:	2300      	movs	r3, #0
 8001e96:	e00e      	b.n	8001eb6 <cliArgsGetData+0x42>
  }

  ret = (int32_t)strtoul((const char * ) p_cli->cmd_args.argv[index], (char **)NULL, (int) 0);
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8001e9e:	79fb      	ldrb	r3, [r7, #7]
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	4413      	add	r3, r2
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f006 faa6 	bl	80083fc <strtoul>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	60fb      	str	r3, [r7, #12]

  return ret;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	2000020c 	.word	0x2000020c

08001ec4 <cliArgsGetFloat>:

float cliArgsGetFloat(uint8_t index)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	4603      	mov	r3, r0
 8001ecc:	71fb      	strb	r3, [r7, #7]
  float ret = 0.0;
 8001ece:	f04f 0300 	mov.w	r3, #0
 8001ed2:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8001ed4:	4b0e      	ldr	r3, [pc, #56]	@ (8001f10 <cliArgsGetFloat+0x4c>)
 8001ed6:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8001ed8:	79fb      	ldrb	r3, [r7, #7]
 8001eda:	b29a      	uxth	r2, r3
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	@ 0x42c
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d302      	bcc.n	8001eec <cliArgsGetFloat+0x28>
  {
    return 0;
 8001ee6:	f04f 0300 	mov.w	r3, #0
 8001eea:	e00c      	b.n	8001f06 <cliArgsGetFloat+0x42>
  }

  ret = (float)strtof((const char * ) p_cli->cmd_args.argv[index], (char **)NULL);
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8001ef2:	79fb      	ldrb	r3, [r7, #7]
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	4413      	add	r3, r2
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2100      	movs	r1, #0
 8001efc:	4618      	mov	r0, r3
 8001efe:	f006 f9b7 	bl	8008270 <strtof>
 8001f02:	60f8      	str	r0, [r7, #12]

  return ret;
 8001f04:	68fb      	ldr	r3, [r7, #12]
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	2000020c 	.word	0x2000020c

08001f14 <cliArgsGetStr>:

char *cliArgsGetStr(uint8_t index)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	71fb      	strb	r3, [r7, #7]
  char *ret = NULL;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8001f22:	4b0c      	ldr	r3, [pc, #48]	@ (8001f54 <cliArgsGetStr+0x40>)
 8001f24:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8001f26:	79fb      	ldrb	r3, [r7, #7]
 8001f28:	b29a      	uxth	r2, r3
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	@ 0x42c
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d301      	bcc.n	8001f38 <cliArgsGetStr+0x24>
  {
    return 0;
 8001f34:	2300      	movs	r3, #0
 8001f36:	e008      	b.n	8001f4a <cliArgsGetStr+0x36>
  }

  ret = p_cli->cmd_args.argv[index];
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8001f3e:	79fb      	ldrb	r3, [r7, #7]
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	4413      	add	r3, r2
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	60fb      	str	r3, [r7, #12]

  return ret;
 8001f48:	68fb      	ldr	r3, [r7, #12]
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3714      	adds	r7, #20
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bc80      	pop	{r7}
 8001f52:	4770      	bx	lr
 8001f54:	2000020c 	.word	0x2000020c

08001f58 <cliArgsIsStr>:

bool cliArgsIsStr(uint8_t index, char *p_str)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	4603      	mov	r3, r0
 8001f60:	6039      	str	r1, [r7, #0]
 8001f62:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8001f64:	2300      	movs	r3, #0
 8001f66:	73fb      	strb	r3, [r7, #15]
  cli_t *p_cli = &cli_node;
 8001f68:	4b0f      	ldr	r3, [pc, #60]	@ (8001fa8 <cliArgsIsStr+0x50>)
 8001f6a:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8001f6c:	79fb      	ldrb	r3, [r7, #7]
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	@ 0x42c
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d301      	bcc.n	8001f7e <cliArgsIsStr+0x26>
  {
    return 0;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	e010      	b.n	8001fa0 <cliArgsIsStr+0x48>
  }

  if(strcmp(p_str, p_cli->cmd_args.argv[index]) == 0)
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8001f84:	79fb      	ldrb	r3, [r7, #7]
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	4413      	add	r3, r2
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	6838      	ldr	r0, [r7, #0]
 8001f90:	f7fe f8de 	bl	8000150 <strcmp>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d101      	bne.n	8001f9e <cliArgsIsStr+0x46>
  {
    ret = true;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3710      	adds	r7, #16
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	2000020c 	.word	0x2000020c

08001fac <cliKeepLoop>:

bool cliKeepLoop(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
  cli_t *p_cli = &cli_node;
 8001fb2:	4b04      	ldr	r3, [pc, #16]	@ (8001fc4 <cliKeepLoop+0x18>)
 8001fb4:	607b      	str	r3, [r7, #4]

  if(p_cli->ch != -1)
  {
    return true;
 8001fb6:	2301      	movs	r3, #1
  }
  else
  {
    return false;
  }
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bc80      	pop	{r7}
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	2000020c 	.word	0x2000020c

08001fc8 <cliAdd>:

bool cliAdd(const char *cmd_str, void (*p_func)(cli_args_t *))
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
  bool ret = true;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	75fb      	strb	r3, [r7, #23]
  cli_t *p_cli = &cli_node;
 8001fd6:	4b20      	ldr	r3, [pc, #128]	@ (8002058 <cliAdd+0x90>)
 8001fd8:	613b      	str	r3, [r7, #16]
  uint16_t index;

  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	@ 0x2e8
 8001fe0:	2b0f      	cmp	r3, #15
 8001fe2:	d901      	bls.n	8001fe8 <cliAdd+0x20>
  {
    return false;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	e032      	b.n	800204e <cliAdd+0x86>
  }

  index = p_cli->cmd_count;
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	@ 0x2e8
 8001fee:	81fb      	strh	r3, [r7, #14]

  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 8001ff0:	89fa      	ldrh	r2, [r7, #14]
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	4413      	add	r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	4413      	add	r3, r2
 8002002:	3304      	adds	r3, #4
 8002004:	6879      	ldr	r1, [r7, #4]
 8002006:	4618      	mov	r0, r3
 8002008:	f006 fbf9 	bl	80087fe <strcpy>
  p_cli->cmd_list[index].cmd_func = p_func;
 800200c:	89fa      	ldrh	r2, [r7, #14]
 800200e:	6939      	ldr	r1, [r7, #16]
 8002010:	4613      	mov	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4413      	add	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	440b      	add	r3, r1
 800201a:	f503 733f 	add.w	r3, r3, #764	@ 0x2fc
 800201e:	683a      	ldr	r2, [r7, #0]
 8002020:	601a      	str	r2, [r3, #0]

  cliToUpper(p_cli->cmd_list[index].cmd_str);
 8002022:	89fa      	ldrh	r2, [r7, #14]
 8002024:	4613      	mov	r3, r2
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	4413      	add	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	4413      	add	r3, r2
 8002034:	3304      	adds	r3, #4
 8002036:	4618      	mov	r0, r3
 8002038:	f7ff fee8 	bl	8001e0c <cliToUpper>

  p_cli->cmd_count++;
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	@ 0x2e8
 8002042:	3301      	adds	r3, #1
 8002044:	b29a      	uxth	r2, r3
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	f8a3 22e8 	strh.w	r2, [r3, #744]	@ 0x2e8

  return ret;
 800204c:	7dfb      	ldrb	r3, [r7, #23]
}
 800204e:	4618      	mov	r0, r3
 8002050:	3718      	adds	r7, #24
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	2000020c 	.word	0x2000020c

0800205c <cliShowList>:

void cliShowList(cli_args_t *args)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  cli_t *p_cli = &cli_node;
 8002064:	4b15      	ldr	r3, [pc, #84]	@ (80020bc <cliShowList+0x60>)
 8002066:	60bb      	str	r3, [r7, #8]


  cliPrintf("\r\n");
 8002068:	4815      	ldr	r0, [pc, #84]	@ (80020c0 <cliShowList+0x64>)
 800206a:	f7ff feab 	bl	8001dc4 <cliPrintf>
  cliPrintf("---------- cmd list ---------\r\n");
 800206e:	4815      	ldr	r0, [pc, #84]	@ (80020c4 <cliShowList+0x68>)
 8002070:	f7ff fea8 	bl	8001dc4 <cliPrintf>

  for (int i=0; i<p_cli->cmd_count; i++)
 8002074:	2300      	movs	r3, #0
 8002076:	60fb      	str	r3, [r7, #12]
 8002078:	e012      	b.n	80020a0 <cliShowList+0x44>
  {
    cliPrintf(p_cli->cmd_list[i].cmd_str);
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	4613      	mov	r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	4413      	add	r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 8002088:	68ba      	ldr	r2, [r7, #8]
 800208a:	4413      	add	r3, r2
 800208c:	3304      	adds	r3, #4
 800208e:	4618      	mov	r0, r3
 8002090:	f7ff fe98 	bl	8001dc4 <cliPrintf>
    cliPrintf("\r\n");
 8002094:	480a      	ldr	r0, [pc, #40]	@ (80020c0 <cliShowList+0x64>)
 8002096:	f7ff fe95 	bl	8001dc4 <cliPrintf>
  for (int i=0; i<p_cli->cmd_count; i++)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	3301      	adds	r3, #1
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	@ 0x2e8
 80020a6:	461a      	mov	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	4293      	cmp	r3, r2
 80020ac:	dbe5      	blt.n	800207a <cliShowList+0x1e>
  }

  cliPrintf("-----------------------------\r\n");
 80020ae:	4806      	ldr	r0, [pc, #24]	@ (80020c8 <cliShowList+0x6c>)
 80020b0:	f7ff fe88 	bl	8001dc4 <cliPrintf>
}
 80020b4:	bf00      	nop
 80020b6:	3710      	adds	r7, #16
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	2000020c 	.word	0x2000020c
 80020c0:	0800ad60 	.word	0x0800ad60
 80020c4:	0800ad64 	.word	0x0800ad64
 80020c8:	0800ad84 	.word	0x0800ad84

080020cc <cliMemoryDump>:

void cliMemoryDump(cli_args_t *args)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b08c      	sub	sp, #48	@ 0x30
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  int idx, size = 16;
 80020d4:	2310      	movs	r3, #16
 80020d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  unsigned int *addr;
  int idx1, i;
  unsigned int *ascptr;
  unsigned char asc[4];

  int    argc = args->argc;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	881b      	ldrh	r3, [r3, #0]
 80020dc:	617b      	str	r3, [r7, #20]
  char **argv = args->argv;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	613b      	str	r3, [r7, #16]


  if(args->argc < 1)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	881b      	ldrh	r3, [r3, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d103      	bne.n	80020f4 <cliMemoryDump+0x28>
  {
    cliPrintf(">> md addr [size] \n");
 80020ec:	4840      	ldr	r0, [pc, #256]	@ (80021f0 <cliMemoryDump+0x124>)
 80020ee:	f7ff fe69 	bl	8001dc4 <cliPrintf>
 80020f2:	e07a      	b.n	80021ea <cliMemoryDump+0x11e>
    return;
  }

  if(argc > 1)
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	dd09      	ble.n	800210e <cliMemoryDump+0x42>
  {
    size = (int)strtoul((const char * ) argv[1], (char **)NULL, (int) 0);
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	3304      	adds	r3, #4
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2200      	movs	r2, #0
 8002102:	2100      	movs	r1, #0
 8002104:	4618      	mov	r0, r3
 8002106:	f006 f979 	bl	80083fc <strtoul>
 800210a:	4603      	mov	r3, r0
 800210c:	62bb      	str	r3, [r7, #40]	@ 0x28
  }
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2200      	movs	r2, #0
 8002114:	2100      	movs	r1, #0
 8002116:	4618      	mov	r0, r3
 8002118:	f006 f970 	bl	80083fc <strtoul>
 800211c:	4603      	mov	r3, r0
 800211e:	627b      	str	r3, [r7, #36]	@ 0x24
  ascptr = (unsigned int *)addr;
 8002120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002122:	61bb      	str	r3, [r7, #24]

  cliPrintf("\n   ");
 8002124:	4833      	ldr	r0, [pc, #204]	@ (80021f4 <cliMemoryDump+0x128>)
 8002126:	f7ff fe4d 	bl	8001dc4 <cliPrintf>
  for (idx = 0; idx<size; idx++)
 800212a:	2300      	movs	r3, #0
 800212c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800212e:	e058      	b.n	80021e2 <cliMemoryDump+0x116>
  {
    if((idx%4) == 0)
 8002130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002132:	f003 0303 	and.w	r3, r3, #3
 8002136:	2b00      	cmp	r3, #0
 8002138:	d104      	bne.n	8002144 <cliMemoryDump+0x78>
    {
      cliPrintf(" 0x%08X: ", (unsigned int)addr);
 800213a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800213c:	4619      	mov	r1, r3
 800213e:	482e      	ldr	r0, [pc, #184]	@ (80021f8 <cliMemoryDump+0x12c>)
 8002140:	f7ff fe40 	bl	8001dc4 <cliPrintf>
    }
    cliPrintf(" 0x%08X", *(addr));
 8002144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4619      	mov	r1, r3
 800214a:	482c      	ldr	r0, [pc, #176]	@ (80021fc <cliMemoryDump+0x130>)
 800214c:	f7ff fe3a 	bl	8001dc4 <cliPrintf>

    if ((idx%4) == 3)
 8002150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002152:	425a      	negs	r2, r3
 8002154:	f003 0303 	and.w	r3, r3, #3
 8002158:	f002 0203 	and.w	r2, r2, #3
 800215c:	bf58      	it	pl
 800215e:	4253      	negpl	r3, r2
 8002160:	2b03      	cmp	r3, #3
 8002162:	d138      	bne.n	80021d6 <cliMemoryDump+0x10a>
    {
      cliPrintf ("  |");
 8002164:	4826      	ldr	r0, [pc, #152]	@ (8002200 <cliMemoryDump+0x134>)
 8002166:	f7ff fe2d 	bl	8001dc4 <cliPrintf>
      for (idx1= 0; idx1< 4; idx1++)
 800216a:	2300      	movs	r3, #0
 800216c:	623b      	str	r3, [r7, #32]
 800216e:	e02c      	b.n	80021ca <cliMemoryDump+0xfe>
      {
        memcpy((char *)asc, (char *)ascptr, 4);
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	60fb      	str	r3, [r7, #12]
        for (i=0;i<4;i++)
 8002176:	2300      	movs	r3, #0
 8002178:	61fb      	str	r3, [r7, #28]
 800217a:	e01d      	b.n	80021b8 <cliMemoryDump+0xec>
        {
          if (asc[i] > 0x1f && asc[i] < 0x7f)
 800217c:	f107 020c 	add.w	r2, r7, #12
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	4413      	add	r3, r2
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	2b1f      	cmp	r3, #31
 8002188:	d910      	bls.n	80021ac <cliMemoryDump+0xe0>
 800218a:	f107 020c 	add.w	r2, r7, #12
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	4413      	add	r3, r2
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	2b7e      	cmp	r3, #126	@ 0x7e
 8002196:	d809      	bhi.n	80021ac <cliMemoryDump+0xe0>
          {
            cliPrintf("%c", asc[i]);
 8002198:	f107 020c 	add.w	r2, r7, #12
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	4413      	add	r3, r2
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	4619      	mov	r1, r3
 80021a4:	4817      	ldr	r0, [pc, #92]	@ (8002204 <cliMemoryDump+0x138>)
 80021a6:	f7ff fe0d 	bl	8001dc4 <cliPrintf>
 80021aa:	e002      	b.n	80021b2 <cliMemoryDump+0xe6>
          }
          else
          {
            cliPrintf(".");
 80021ac:	4816      	ldr	r0, [pc, #88]	@ (8002208 <cliMemoryDump+0x13c>)
 80021ae:	f7ff fe09 	bl	8001dc4 <cliPrintf>
        for (i=0;i<4;i++)
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	3301      	adds	r3, #1
 80021b6:	61fb      	str	r3, [r7, #28]
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	2b03      	cmp	r3, #3
 80021bc:	ddde      	ble.n	800217c <cliMemoryDump+0xb0>
          }
        }
        ascptr+=1;
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	3304      	adds	r3, #4
 80021c2:	61bb      	str	r3, [r7, #24]
      for (idx1= 0; idx1< 4; idx1++)
 80021c4:	6a3b      	ldr	r3, [r7, #32]
 80021c6:	3301      	adds	r3, #1
 80021c8:	623b      	str	r3, [r7, #32]
 80021ca:	6a3b      	ldr	r3, [r7, #32]
 80021cc:	2b03      	cmp	r3, #3
 80021ce:	ddcf      	ble.n	8002170 <cliMemoryDump+0xa4>
      }
      cliPrintf("|\n   ");
 80021d0:	480e      	ldr	r0, [pc, #56]	@ (800220c <cliMemoryDump+0x140>)
 80021d2:	f7ff fdf7 	bl	8001dc4 <cliPrintf>
    }
    addr++;
 80021d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d8:	3304      	adds	r3, #4
 80021da:	627b      	str	r3, [r7, #36]	@ 0x24
  for (idx = 0; idx<size; idx++)
 80021dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021de:	3301      	adds	r3, #1
 80021e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80021e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021e6:	429a      	cmp	r2, r3
 80021e8:	dba2      	blt.n	8002130 <cliMemoryDump+0x64>
  }
}
 80021ea:	3730      	adds	r7, #48	@ 0x30
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	0800ada4 	.word	0x0800ada4
 80021f4:	0800adb8 	.word	0x0800adb8
 80021f8:	0800adc0 	.word	0x0800adc0
 80021fc:	0800adcc 	.word	0x0800adcc
 8002200:	0800add4 	.word	0x0800add4
 8002204:	0800add8 	.word	0x0800add8
 8002208:	0800addc 	.word	0x0800addc
 800220c:	0800ade0 	.word	0x0800ade0

08002210 <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	4603      	mov	r3, r0
 8002218:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 800221a:	2300      	movs	r3, #0
 800221c:	60fb      	str	r3, [r7, #12]

  switch(ch)
 800221e:	79fb      	ldrb	r3, [r7, #7]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d017      	beq.n	8002254 <uartAvailable+0x44>
 8002224:	2b01      	cmp	r3, #1
 8002226:	d116      	bne.n	8002256 <uartAvailable+0x46>
    case CH_CDC:
      //ret = cdcAvailable();
      break;

    case CH_USART1:
      qbuffer.in = (qbuffer.len - hdma_usart1_rx.Instance->CNDTR);
 8002228:	4b0e      	ldr	r3, [pc, #56]	@ (8002264 <uartAvailable+0x54>)
 800222a:	689a      	ldr	r2, [r3, #8]
 800222c:	4b0e      	ldr	r3, [pc, #56]	@ (8002268 <uartAvailable+0x58>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	4a0b      	ldr	r2, [pc, #44]	@ (8002264 <uartAvailable+0x54>)
 8002236:	6013      	str	r3, [r2, #0]
      ret = (qbuffer.in - qbuffer.out) % qbuffer.len;
 8002238:	4b0a      	ldr	r3, [pc, #40]	@ (8002264 <uartAvailable+0x54>)
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	4b09      	ldr	r3, [pc, #36]	@ (8002264 <uartAvailable+0x54>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	4a08      	ldr	r2, [pc, #32]	@ (8002264 <uartAvailable+0x54>)
 8002244:	6892      	ldr	r2, [r2, #8]
 8002246:	fbb3 f1f2 	udiv	r1, r3, r2
 800224a:	fb01 f202 	mul.w	r2, r1, r2
 800224e:	1a9b      	subs	r3, r3, r2
 8002250:	60fb      	str	r3, [r7, #12]
      break;
 8002252:	e000      	b.n	8002256 <uartAvailable+0x46>
      break;
 8002254:	bf00      	nop
  }

  return ret;
 8002256:	68fb      	ldr	r3, [r7, #12]
}
 8002258:	4618      	mov	r0, r3
 800225a:	3714      	adds	r7, #20
 800225c:	46bd      	mov	sp, r7
 800225e:	bc80      	pop	{r7}
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	20000650 	.word	0x20000650
 8002268:	200008e0 	.word	0x200008e0

0800226c <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
 800226c:	b40e      	push	{r1, r2, r3}
 800226e:	b580      	push	{r7, lr}
 8002270:	b0c7      	sub	sp, #284	@ 0x11c
 8002272:	af00      	add	r7, sp, #0
 8002274:	4602      	mov	r2, r0
 8002276:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800227a:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 800227e:	701a      	strb	r2, [r3, #0]
  char buf[256];
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
 8002280:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8002284:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002288:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800228c:	601a      	str	r2, [r3, #0]
  len = vsnprintf(buf, 256, fmt, args);
 800228e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002292:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002296:	f107 0010 	add.w	r0, r7, #16
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80022a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80022a4:	f006 f9e4 	bl	8008670 <vsniprintf>
 80022a8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

  ret = uartWrite(ch, (uint8_t *)buf, len);
 80022ac:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80022b0:	f107 0110 	add.w	r1, r7, #16
 80022b4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80022b8:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	4618      	mov	r0, r3
 80022c0:	f000 f80c 	bl	80022dc <uartWrite>
 80022c4:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

  va_end(args);


  return ret;
 80022c8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 80022d2:	46bd      	mov	sp, r7
 80022d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80022d8:	b003      	add	sp, #12
 80022da:	4770      	bx	lr

080022dc <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
 80022e8:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 80022ea:	2300      	movs	r3, #0
 80022ec:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  if(ch == CH_CDC)
 80022ee:	7bfb      	ldrb	r3, [r7, #15]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d010      	beq.n	8002316 <uartWrite+0x3a>
  {
    //ret = cdcWrite(p_data, length);
  }
  else if(ch == CH_USART1)
 80022f4:	7bfb      	ldrb	r3, [r7, #15]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d10d      	bne.n	8002316 <uartWrite+0x3a>
  {
    status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	2364      	movs	r3, #100	@ 0x64
 8002300:	68b9      	ldr	r1, [r7, #8]
 8002302:	4807      	ldr	r0, [pc, #28]	@ (8002320 <uartWrite+0x44>)
 8002304:	f004 fa06 	bl	8006714 <HAL_UART_Transmit>
 8002308:	4603      	mov	r3, r0
 800230a:	74fb      	strb	r3, [r7, #19]
    if (status == HAL_OK)
 800230c:	7cfb      	ldrb	r3, [r7, #19]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <uartWrite+0x3a>
    {
      ret = length;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8002316:	697b      	ldr	r3, [r7, #20]
}
 8002318:	4618      	mov	r0, r3
 800231a:	3718      	adds	r7, #24
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	20000850 	.word	0x20000850

08002324 <uartRead>:

uint8_t uartRead(uint8_t ch)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	4603      	mov	r3, r0
 800232c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = 0;
 800232e:	2300      	movs	r3, #0
 8002330:	73fb      	strb	r3, [r7, #15]

  if(ch == CH_CDC)
 8002332:	79fb      	ldrb	r3, [r7, #7]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d009      	beq.n	800234c <uartRead+0x28>
  {
    //data = cdcRead();
  }
  else if(ch == CH_USART1)
 8002338:	79fb      	ldrb	r3, [r7, #7]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d106      	bne.n	800234c <uartRead+0x28>
  {
     qbufferRead(&qbuffer, &data,1);
 800233e:	f107 030f 	add.w	r3, r7, #15
 8002342:	2201      	movs	r2, #1
 8002344:	4619      	mov	r1, r3
 8002346:	4804      	ldr	r0, [pc, #16]	@ (8002358 <uartRead+0x34>)
 8002348:	f000 f808 	bl	800235c <qbufferRead>
  }

  return data;
 800234c:	7bfb      	ldrb	r3, [r7, #15]
}
 800234e:	4618      	mov	r0, r3
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	20000650 	.word	0x20000650

0800235c <qbufferRead>:

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 800235c:	b480      	push	{r7}
 800235e:	b087      	sub	sp, #28
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8002368:	2301      	movs	r3, #1
 800236a:	75fb      	strb	r3, [r7, #23]

  for(int i=0; i<length; i++)
 800236c:	2300      	movs	r3, #0
 800236e:	613b      	str	r3, [r7, #16]
 8002370:	e026      	b.n	80023c0 <qbufferRead+0x64>
  {
    if(p_node->p_buf != NULL)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d009      	beq.n	800238e <qbufferRead+0x32>
    {
      p_data[i] = p_node->p_buf[p_node->out];
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	68da      	ldr	r2, [r3, #12]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	441a      	add	r2, r3
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	68b9      	ldr	r1, [r7, #8]
 8002388:	440b      	add	r3, r1
 800238a:	7812      	ldrb	r2, [r2, #0]
 800238c:	701a      	strb	r2, [r3, #0]
    }

    if(p_node->out != p_node->in)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	685a      	ldr	r2, [r3, #4]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	429a      	cmp	r2, r3
 8002398:	d00c      	beq.n	80023b4 <qbufferRead+0x58>
    {
      p_node->out = (p_node->out + 1) % p_node->len;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	3301      	adds	r3, #1
 80023a0:	68fa      	ldr	r2, [r7, #12]
 80023a2:	6892      	ldr	r2, [r2, #8]
 80023a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80023a8:	fb01 f202 	mul.w	r2, r1, r2
 80023ac:	1a9a      	subs	r2, r3, r2
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	605a      	str	r2, [r3, #4]
 80023b2:	e002      	b.n	80023ba <qbufferRead+0x5e>
    }
    else
    {
      ret = false;
 80023b4:	2300      	movs	r3, #0
 80023b6:	75fb      	strb	r3, [r7, #23]
      break;
 80023b8:	e006      	b.n	80023c8 <qbufferRead+0x6c>
  for(int i=0; i<length; i++)
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	3301      	adds	r3, #1
 80023be:	613b      	str	r3, [r7, #16]
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d8d4      	bhi.n	8002372 <qbufferRead+0x16>
    }
  }

  return ret;
 80023c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	371c      	adds	r7, #28
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bc80      	pop	{r7}
 80023d2:	4770      	bx	lr

080023d4 <ComplementaryFilter_Init>:

#include "complementary_filter.h"


void ComplementaryFilter_Init(ComplementaryFilter *cf, float alpha, float initial_angle)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	607a      	str	r2, [r7, #4]
  cf->alpha = alpha;  // 상보 필터 계수 설정
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	68ba      	ldr	r2, [r7, #8]
 80023e4:	605a      	str	r2, [r3, #4]
  cf->angle = initial_angle;  // 초기 각도 값 설정
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	601a      	str	r2, [r3, #0]
}
 80023ec:	bf00      	nop
 80023ee:	3714      	adds	r7, #20
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bc80      	pop	{r7}
 80023f4:	4770      	bx	lr

080023f6 <ComplementaryFilter_Update>:

float ComplementaryFilter_Update(ComplementaryFilter *cf,
                                  float accel_angle,
                                  float gyro_rate,
                                  float dt)
{
 80023f6:	b5b0      	push	{r4, r5, r7, lr}
 80023f8:	b084      	sub	sp, #16
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	60f8      	str	r0, [r7, #12]
 80023fe:	60b9      	str	r1, [r7, #8]
 8002400:	607a      	str	r2, [r7, #4]
 8002402:	603b      	str	r3, [r7, #0]
  // 상보 필터 방정식: 필터링된 각도 = (자이로 각속도 기반 각도) + (가속도계 기반 각도)
  cf->angle = cf->alpha * (cf->angle + gyro_rate * dt) + (1.0f - cf->alpha) * accel_angle;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	685c      	ldr	r4, [r3, #4]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681d      	ldr	r5, [r3, #0]
 800240c:	6839      	ldr	r1, [r7, #0]
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f7fe fc92 	bl	8000d38 <__aeabi_fmul>
 8002414:	4603      	mov	r3, r0
 8002416:	4619      	mov	r1, r3
 8002418:	4628      	mov	r0, r5
 800241a:	f7fe fb85 	bl	8000b28 <__addsf3>
 800241e:	4603      	mov	r3, r0
 8002420:	4619      	mov	r1, r3
 8002422:	4620      	mov	r0, r4
 8002424:	f7fe fc88 	bl	8000d38 <__aeabi_fmul>
 8002428:	4603      	mov	r3, r0
 800242a:	461c      	mov	r4, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	4619      	mov	r1, r3
 8002432:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8002436:	f7fe fb75 	bl	8000b24 <__aeabi_fsub>
 800243a:	4603      	mov	r3, r0
 800243c:	68b9      	ldr	r1, [r7, #8]
 800243e:	4618      	mov	r0, r3
 8002440:	f7fe fc7a 	bl	8000d38 <__aeabi_fmul>
 8002444:	4603      	mov	r3, r0
 8002446:	4619      	mov	r1, r3
 8002448:	4620      	mov	r0, r4
 800244a:	f7fe fb6d 	bl	8000b28 <__addsf3>
 800244e:	4603      	mov	r3, r0
 8002450:	461a      	mov	r2, r3
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	601a      	str	r2, [r3, #0]
  return cf->angle;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
}
 800245a:	4618      	mov	r0, r3
 800245c:	3710      	adds	r7, #16
 800245e:	46bd      	mov	sp, r7
 8002460:	bdb0      	pop	{r4, r5, r7, pc}

08002462 <dataProcessingInit>:
int32_t prev_wheel = 0;

uint8_t sensitivity = 10; // sensitivity coefficient

void dataProcessingInit()
{
 8002462:	b580      	push	{r7, lr}
 8002464:	af00      	add	r7, sp, #0
  // Initialize filters.
  filterInit();
 8002466:	f000 f803 	bl	8002470 <filterInit>
}
 800246a:	bf00      	nop
 800246c:	bd80      	pop	{r7, pc}
	...

08002470 <filterInit>:

// Initialize kalman filter and complementary filter.
void filterInit()
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  KalmanFilter_Init(&kf_z, 0.01f, 0.1f, 0.0f);
 8002474:	f04f 0300 	mov.w	r3, #0
 8002478:	4a0c      	ldr	r2, [pc, #48]	@ (80024ac <filterInit+0x3c>)
 800247a:	490d      	ldr	r1, [pc, #52]	@ (80024b0 <filterInit+0x40>)
 800247c:	480d      	ldr	r0, [pc, #52]	@ (80024b4 <filterInit+0x44>)
 800247e:	f000 fbaf 	bl	8002be0 <KalmanFilter_Init>
  KalmanFilter_Init(&kf_y, 0.01f, 0.1f, 0.0f);
 8002482:	f04f 0300 	mov.w	r3, #0
 8002486:	4a09      	ldr	r2, [pc, #36]	@ (80024ac <filterInit+0x3c>)
 8002488:	4909      	ldr	r1, [pc, #36]	@ (80024b0 <filterInit+0x40>)
 800248a:	480b      	ldr	r0, [pc, #44]	@ (80024b8 <filterInit+0x48>)
 800248c:	f000 fba8 	bl	8002be0 <KalmanFilter_Init>
  ComplementaryFilter_Init(&cf_z, 0.98f, 0.0f);
 8002490:	f04f 0200 	mov.w	r2, #0
 8002494:	4909      	ldr	r1, [pc, #36]	@ (80024bc <filterInit+0x4c>)
 8002496:	480a      	ldr	r0, [pc, #40]	@ (80024c0 <filterInit+0x50>)
 8002498:	f7ff ff9c 	bl	80023d4 <ComplementaryFilter_Init>
  ComplementaryFilter_Init(&cf_y, 0.98f, 0.0f);
 800249c:	f04f 0200 	mov.w	r2, #0
 80024a0:	4906      	ldr	r1, [pc, #24]	@ (80024bc <filterInit+0x4c>)
 80024a2:	4808      	ldr	r0, [pc, #32]	@ (80024c4 <filterInit+0x54>)
 80024a4:	f7ff ff96 	bl	80023d4 <ComplementaryFilter_Init>
}
 80024a8:	bf00      	nop
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	3dcccccd 	.word	0x3dcccccd
 80024b0:	3c23d70a 	.word	0x3c23d70a
 80024b4:	20000770 	.word	0x20000770
 80024b8:	20000784 	.word	0x20000784
 80024bc:	3f7ae148 	.word	0x3f7ae148
 80024c0:	20000798 	.word	0x20000798
 80024c4:	200007a0 	.word	0x200007a0

080024c8 <calculateMouseX>:

// X-axis movement can be obtained wity yaw.
int8_t calculateMouseX()
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b086      	sub	sp, #24
 80024cc:	af00      	add	r7, sp, #0
  // Read MPU6050 Datasheet.
  float gz = (float)raw_gz / 32.8;
 80024ce:	4b22      	ldr	r3, [pc, #136]	@ (8002558 <calculateMouseX+0x90>)
 80024d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7fe fbdb 	bl	8000c90 <__aeabi_i2f>
 80024da:	4603      	mov	r3, r0
 80024dc:	4618      	mov	r0, r3
 80024de:	f7fd ffa5 	bl	800042c <__aeabi_f2d>
 80024e2:	a31b      	add	r3, pc, #108	@ (adr r3, 8002550 <calculateMouseX+0x88>)
 80024e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e8:	f7fe f922 	bl	8000730 <__aeabi_ddiv>
 80024ec:	4602      	mov	r2, r0
 80024ee:	460b      	mov	r3, r1
 80024f0:	4610      	mov	r0, r2
 80024f2:	4619      	mov	r1, r3
 80024f4:	f7fe fac2 	bl	8000a7c <__aeabi_d2f>
 80024f8:	4603      	mov	r3, r0
 80024fa:	617b      	str	r3, [r7, #20]

  // Calculate yaw (rad)
  float yaw = gz * TIME_INTERVAL;
 80024fc:	4917      	ldr	r1, [pc, #92]	@ (800255c <calculateMouseX+0x94>)
 80024fe:	6978      	ldr	r0, [r7, #20]
 8002500:	f7fe fc1a 	bl	8000d38 <__aeabi_fmul>
 8002504:	4603      	mov	r3, r0
 8002506:	613b      	str	r3, [r7, #16]

  // Apply complementary filter
  float c_filtered_yaw = ComplementaryFilter_Update(&cf_z, yaw, gz, TIME_INTERVAL);
 8002508:	4b14      	ldr	r3, [pc, #80]	@ (800255c <calculateMouseX+0x94>)
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	6939      	ldr	r1, [r7, #16]
 800250e:	4814      	ldr	r0, [pc, #80]	@ (8002560 <calculateMouseX+0x98>)
 8002510:	f7ff ff71 	bl	80023f6 <ComplementaryFilter_Update>
 8002514:	60f8      	str	r0, [r7, #12]

  // Apply kalman filter
  float k_filtered_yaw = KalmanFilter_Update(&kf_z, c_filtered_yaw);
 8002516:	68f9      	ldr	r1, [r7, #12]
 8002518:	4812      	ldr	r0, [pc, #72]	@ (8002564 <calculateMouseX+0x9c>)
 800251a:	f000 fb7e 	bl	8002c1a <KalmanFilter_Update>
 800251e:	60b8      	str	r0, [r7, #8]

  // Apply SENSITIVITY
  int mouse_x = (int)(k_filtered_yaw * (float)sensitivity * (-1));
 8002520:	4b11      	ldr	r3, [pc, #68]	@ (8002568 <calculateMouseX+0xa0>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	4618      	mov	r0, r3
 8002526:	f7fe fbaf 	bl	8000c88 <__aeabi_ui2f>
 800252a:	4603      	mov	r3, r0
 800252c:	68b9      	ldr	r1, [r7, #8]
 800252e:	4618      	mov	r0, r3
 8002530:	f7fe fc02 	bl	8000d38 <__aeabi_fmul>
 8002534:	4603      	mov	r3, r0
 8002536:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800253a:	4618      	mov	r0, r3
 800253c:	f7fe fdd8 	bl	80010f0 <__aeabi_f2iz>
 8002540:	4603      	mov	r3, r0
 8002542:	607b      	str	r3, [r7, #4]

  return mouse_x;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	b25b      	sxtb	r3, r3
}
 8002548:	4618      	mov	r0, r3
 800254a:	3718      	adds	r7, #24
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	66666666 	.word	0x66666666
 8002554:	40406666 	.word	0x40406666
 8002558:	2000076a 	.word	0x2000076a
 800255c:	3e0f5c29 	.word	0x3e0f5c29
 8002560:	20000798 	.word	0x20000798
 8002564:	20000770 	.word	0x20000770
 8002568:	20000004 	.word	0x20000004
 800256c:	00000000 	.word	0x00000000

08002570 <calculateMouseY>:

// Y-axis movement can be obtained with roll.
int8_t calculateMouseY()
{
 8002570:	b590      	push	{r4, r7, lr}
 8002572:	b089      	sub	sp, #36	@ 0x24
 8002574:	af00      	add	r7, sp, #0
  // Read MPU6050 Datasheet.
  float ax = (float)raw_ax / 4096;
 8002576:	4b40      	ldr	r3, [pc, #256]	@ (8002678 <calculateMouseY+0x108>)
 8002578:	f9b3 3000 	ldrsh.w	r3, [r3]
 800257c:	4618      	mov	r0, r3
 800257e:	f7fe fb87 	bl	8000c90 <__aeabi_i2f>
 8002582:	4603      	mov	r3, r0
 8002584:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 8002588:	4618      	mov	r0, r3
 800258a:	f7fe fc89 	bl	8000ea0 <__aeabi_fdiv>
 800258e:	4603      	mov	r3, r0
 8002590:	61fb      	str	r3, [r7, #28]
  float ay = (float)raw_ay / 4096;
 8002592:	4b3a      	ldr	r3, [pc, #232]	@ (800267c <calculateMouseY+0x10c>)
 8002594:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002598:	4618      	mov	r0, r3
 800259a:	f7fe fb79 	bl	8000c90 <__aeabi_i2f>
 800259e:	4603      	mov	r3, r0
 80025a0:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7fe fc7b 	bl	8000ea0 <__aeabi_fdiv>
 80025aa:	4603      	mov	r3, r0
 80025ac:	61bb      	str	r3, [r7, #24]
  float az = (float)raw_az / 4096;
 80025ae:	4b34      	ldr	r3, [pc, #208]	@ (8002680 <calculateMouseY+0x110>)
 80025b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7fe fb6b 	bl	8000c90 <__aeabi_i2f>
 80025ba:	4603      	mov	r3, r0
 80025bc:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7fe fc6d 	bl	8000ea0 <__aeabi_fdiv>
 80025c6:	4603      	mov	r3, r0
 80025c8:	617b      	str	r3, [r7, #20]
  float gy = (float)raw_gy / 32.8;
 80025ca:	4b2e      	ldr	r3, [pc, #184]	@ (8002684 <calculateMouseY+0x114>)
 80025cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7fe fb5d 	bl	8000c90 <__aeabi_i2f>
 80025d6:	4603      	mov	r3, r0
 80025d8:	4618      	mov	r0, r3
 80025da:	f7fd ff27 	bl	800042c <__aeabi_f2d>
 80025de:	a324      	add	r3, pc, #144	@ (adr r3, 8002670 <calculateMouseY+0x100>)
 80025e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e4:	f7fe f8a4 	bl	8000730 <__aeabi_ddiv>
 80025e8:	4602      	mov	r2, r0
 80025ea:	460b      	mov	r3, r1
 80025ec:	4610      	mov	r0, r2
 80025ee:	4619      	mov	r1, r3
 80025f0:	f7fe fa44 	bl	8000a7c <__aeabi_d2f>
 80025f4:	4603      	mov	r3, r0
 80025f6:	613b      	str	r3, [r7, #16]

  // Calculate roll (rad)
  float roll = atan2f(ax, sqrtf(ay * ay + az * az));
 80025f8:	69b9      	ldr	r1, [r7, #24]
 80025fa:	69b8      	ldr	r0, [r7, #24]
 80025fc:	f7fe fb9c 	bl	8000d38 <__aeabi_fmul>
 8002600:	4603      	mov	r3, r0
 8002602:	461c      	mov	r4, r3
 8002604:	6979      	ldr	r1, [r7, #20]
 8002606:	6978      	ldr	r0, [r7, #20]
 8002608:	f7fe fb96 	bl	8000d38 <__aeabi_fmul>
 800260c:	4603      	mov	r3, r0
 800260e:	4619      	mov	r1, r3
 8002610:	4620      	mov	r0, r4
 8002612:	f7fe fa89 	bl	8000b28 <__addsf3>
 8002616:	4603      	mov	r3, r0
 8002618:	4618      	mov	r0, r3
 800261a:	f008 f8f5 	bl	800a808 <sqrtf>
 800261e:	4603      	mov	r3, r0
 8002620:	4619      	mov	r1, r3
 8002622:	69f8      	ldr	r0, [r7, #28]
 8002624:	f008 f8ee 	bl	800a804 <atan2f>
 8002628:	60f8      	str	r0, [r7, #12]

  // Apply complementary filter
  float c_filtered_roll = ComplementaryFilter_Update(&cf_y, roll, gy, (float)TIME_INTERVAL);
 800262a:	4b17      	ldr	r3, [pc, #92]	@ (8002688 <calculateMouseY+0x118>)
 800262c:	693a      	ldr	r2, [r7, #16]
 800262e:	68f9      	ldr	r1, [r7, #12]
 8002630:	4816      	ldr	r0, [pc, #88]	@ (800268c <calculateMouseY+0x11c>)
 8002632:	f7ff fee0 	bl	80023f6 <ComplementaryFilter_Update>
 8002636:	60b8      	str	r0, [r7, #8]

  // Apply kalman filter
  float k_filtered_roll = KalmanFilter_Update(&kf_y, c_filtered_roll);
 8002638:	68b9      	ldr	r1, [r7, #8]
 800263a:	4815      	ldr	r0, [pc, #84]	@ (8002690 <calculateMouseY+0x120>)
 800263c:	f000 faed 	bl	8002c1a <KalmanFilter_Update>
 8002640:	6078      	str	r0, [r7, #4]

  // Apply SENSITIVITY
  int mouse_y = (int)(k_filtered_roll * (float)sensitivity);
 8002642:	4b14      	ldr	r3, [pc, #80]	@ (8002694 <calculateMouseY+0x124>)
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	4618      	mov	r0, r3
 8002648:	f7fe fb1e 	bl	8000c88 <__aeabi_ui2f>
 800264c:	4603      	mov	r3, r0
 800264e:	6879      	ldr	r1, [r7, #4]
 8002650:	4618      	mov	r0, r3
 8002652:	f7fe fb71 	bl	8000d38 <__aeabi_fmul>
 8002656:	4603      	mov	r3, r0
 8002658:	4618      	mov	r0, r3
 800265a:	f7fe fd49 	bl	80010f0 <__aeabi_f2iz>
 800265e:	4603      	mov	r3, r0
 8002660:	603b      	str	r3, [r7, #0]

  return mouse_y;
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	b25b      	sxtb	r3, r3
}
 8002666:	4618      	mov	r0, r3
 8002668:	3724      	adds	r7, #36	@ 0x24
 800266a:	46bd      	mov	sp, r7
 800266c:	bd90      	pop	{r4, r7, pc}
 800266e:	bf00      	nop
 8002670:	66666666 	.word	0x66666666
 8002674:	40406666 	.word	0x40406666
 8002678:	20000760 	.word	0x20000760
 800267c:	20000762 	.word	0x20000762
 8002680:	20000764 	.word	0x20000764
 8002684:	20000768 	.word	0x20000768
 8002688:	3e0f5c29 	.word	0x3e0f5c29
 800268c:	200007a0 	.word	0x200007a0
 8002690:	20000784 	.word	0x20000784
 8002694:	20000004 	.word	0x20000004

08002698 <calculateMouseWheel>:

int8_t calculateMouseWheel()
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
  int16_t curr_wheel = __HAL_TIM_GET_COUNTER(&htim3);
 800269e:	4b20      	ldr	r3, [pc, #128]	@ (8002720 <calculateMouseWheel+0x88>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a4:	80fb      	strh	r3, [r7, #6]

  // wrap-around 처리 (128 -> 0 or 0 -> 128)
  if (curr_wheel == 0 && prev_wheel == 128)
 80026a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d109      	bne.n	80026c2 <calculateMouseWheel+0x2a>
 80026ae:	4b1d      	ldr	r3, [pc, #116]	@ (8002724 <calculateMouseWheel+0x8c>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2b80      	cmp	r3, #128	@ 0x80
 80026b4:	d105      	bne.n	80026c2 <calculateMouseWheel+0x2a>
  {
    prev_wheel = curr_wheel;
 80026b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026ba:	4a1a      	ldr	r2, [pc, #104]	@ (8002724 <calculateMouseWheel+0x8c>)
 80026bc:	6013      	str	r3, [r2, #0]
    return 1; // 시계 방향 회전, 휠 위로 스크롤
 80026be:	2301      	movs	r3, #1
 80026c0:	e028      	b.n	8002714 <calculateMouseWheel+0x7c>
  }
  else if (curr_wheel == 128 && prev_wheel == 0)
 80026c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026c6:	2b80      	cmp	r3, #128	@ 0x80
 80026c8:	d10a      	bne.n	80026e0 <calculateMouseWheel+0x48>
 80026ca:	4b16      	ldr	r3, [pc, #88]	@ (8002724 <calculateMouseWheel+0x8c>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d106      	bne.n	80026e0 <calculateMouseWheel+0x48>
  {
    prev_wheel = curr_wheel;
 80026d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026d6:	4a13      	ldr	r2, [pc, #76]	@ (8002724 <calculateMouseWheel+0x8c>)
 80026d8:	6013      	str	r3, [r2, #0]
    return -1; // 반시계 방향 회전, 휠 아래로 스크롤
 80026da:	f04f 33ff 	mov.w	r3, #4294967295
 80026de:	e019      	b.n	8002714 <calculateMouseWheel+0x7c>
  }

  // 일반적인 값 증가/감소 처리
  if (curr_wheel > prev_wheel)
 80026e0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80026e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002724 <calculateMouseWheel+0x8c>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	dd05      	ble.n	80026f8 <calculateMouseWheel+0x60>
  {
    prev_wheel = curr_wheel;
 80026ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026f0:	4a0c      	ldr	r2, [pc, #48]	@ (8002724 <calculateMouseWheel+0x8c>)
 80026f2:	6013      	str	r3, [r2, #0]
    return 1; // 휠 위로 스크롤
 80026f4:	2301      	movs	r3, #1
 80026f6:	e00d      	b.n	8002714 <calculateMouseWheel+0x7c>
  }
  else if (curr_wheel < prev_wheel)
 80026f8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80026fc:	4b09      	ldr	r3, [pc, #36]	@ (8002724 <calculateMouseWheel+0x8c>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	429a      	cmp	r2, r3
 8002702:	da06      	bge.n	8002712 <calculateMouseWheel+0x7a>
  {
    prev_wheel = curr_wheel;
 8002704:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002708:	4a06      	ldr	r2, [pc, #24]	@ (8002724 <calculateMouseWheel+0x8c>)
 800270a:	6013      	str	r3, [r2, #0]
    return -1; // 휠 아래로 스크롤
 800270c:	f04f 33ff 	mov.w	r3, #4294967295
 8002710:	e000      	b.n	8002714 <calculateMouseWheel+0x7c>
  }

  // 변화가 없을 때
  return 0;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	bc80      	pop	{r7}
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	20000808 	.word	0x20000808
 8002724:	200007a8 	.word	0x200007a8

08002728 <changeDPI>:

void changeDPI()
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
  int16_t curr_wheel = __HAL_TIM_GET_COUNTER(&htim3);
 800272e:	4b1f      	ldr	r3, [pc, #124]	@ (80027ac <changeDPI+0x84>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002734:	80fb      	strh	r3, [r7, #6]

  // wrap-around 처리 (128 -> 0 or 0 -> 128)
  if (curr_wheel == 0 && prev_wheel == 128)
 8002736:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d10a      	bne.n	8002754 <changeDPI+0x2c>
 800273e:	4b1c      	ldr	r3, [pc, #112]	@ (80027b0 <changeDPI+0x88>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2b80      	cmp	r3, #128	@ 0x80
 8002744:	d106      	bne.n	8002754 <changeDPI+0x2c>
  {
    prev_wheel = curr_wheel;
 8002746:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800274a:	4a19      	ldr	r2, [pc, #100]	@ (80027b0 <changeDPI+0x88>)
 800274c:	6013      	str	r3, [r2, #0]
    increaseSensitivity();
 800274e:	f000 f831 	bl	80027b4 <increaseSensitivity>
 8002752:	e00d      	b.n	8002770 <changeDPI+0x48>
  }
  else if (curr_wheel == 128 && prev_wheel == 0)
 8002754:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002758:	2b80      	cmp	r3, #128	@ 0x80
 800275a:	d109      	bne.n	8002770 <changeDPI+0x48>
 800275c:	4b14      	ldr	r3, [pc, #80]	@ (80027b0 <changeDPI+0x88>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d105      	bne.n	8002770 <changeDPI+0x48>
  {
    prev_wheel = curr_wheel;
 8002764:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002768:	4a11      	ldr	r2, [pc, #68]	@ (80027b0 <changeDPI+0x88>)
 800276a:	6013      	str	r3, [r2, #0]
    decreaseSensitivity();
 800276c:	f000 f834 	bl	80027d8 <decreaseSensitivity>
  }

  // 일반적인 값 증가/감소 처리
  if (curr_wheel > prev_wheel)
 8002770:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002774:	4b0e      	ldr	r3, [pc, #56]	@ (80027b0 <changeDPI+0x88>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	429a      	cmp	r2, r3
 800277a:	dd06      	ble.n	800278a <changeDPI+0x62>
  {
    prev_wheel = curr_wheel;
 800277c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002780:	4a0b      	ldr	r2, [pc, #44]	@ (80027b0 <changeDPI+0x88>)
 8002782:	6013      	str	r3, [r2, #0]
    increaseSensitivity();
 8002784:	f000 f816 	bl	80027b4 <increaseSensitivity>
  else if (curr_wheel < prev_wheel)
  {
    prev_wheel = curr_wheel;
    decreaseSensitivity();
  }
}
 8002788:	e00b      	b.n	80027a2 <changeDPI+0x7a>
  else if (curr_wheel < prev_wheel)
 800278a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800278e:	4b08      	ldr	r3, [pc, #32]	@ (80027b0 <changeDPI+0x88>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	429a      	cmp	r2, r3
 8002794:	da05      	bge.n	80027a2 <changeDPI+0x7a>
    prev_wheel = curr_wheel;
 8002796:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800279a:	4a05      	ldr	r2, [pc, #20]	@ (80027b0 <changeDPI+0x88>)
 800279c:	6013      	str	r3, [r2, #0]
    decreaseSensitivity();
 800279e:	f000 f81b 	bl	80027d8 <decreaseSensitivity>
}
 80027a2:	bf00      	nop
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	20000808 	.word	0x20000808
 80027b0:	200007a8 	.word	0x200007a8

080027b4 <increaseSensitivity>:

void increaseSensitivity()
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  if(sensitivity < 255)
 80027b8:	4b06      	ldr	r3, [pc, #24]	@ (80027d4 <increaseSensitivity+0x20>)
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	2bff      	cmp	r3, #255	@ 0xff
 80027be:	d005      	beq.n	80027cc <increaseSensitivity+0x18>
    sensitivity++;
 80027c0:	4b04      	ldr	r3, [pc, #16]	@ (80027d4 <increaseSensitivity+0x20>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	3301      	adds	r3, #1
 80027c6:	b2da      	uxtb	r2, r3
 80027c8:	4b02      	ldr	r3, [pc, #8]	@ (80027d4 <increaseSensitivity+0x20>)
 80027ca:	701a      	strb	r2, [r3, #0]
}
 80027cc:	bf00      	nop
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bc80      	pop	{r7}
 80027d2:	4770      	bx	lr
 80027d4:	20000004 	.word	0x20000004

080027d8 <decreaseSensitivity>:

void decreaseSensitivity()
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  if (sensitivity > 1)
 80027dc:	4b06      	ldr	r3, [pc, #24]	@ (80027f8 <decreaseSensitivity+0x20>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d905      	bls.n	80027f0 <decreaseSensitivity+0x18>
    sensitivity--;
 80027e4:	4b04      	ldr	r3, [pc, #16]	@ (80027f8 <decreaseSensitivity+0x20>)
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	3b01      	subs	r3, #1
 80027ea:	b2da      	uxtb	r2, r3
 80027ec:	4b02      	ldr	r3, [pc, #8]	@ (80027f8 <decreaseSensitivity+0x20>)
 80027ee:	701a      	strb	r2, [r3, #0]
}
 80027f0:	bf00      	nop
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bc80      	pop	{r7}
 80027f6:	4770      	bx	lr
 80027f8:	20000004 	.word	0x20000004

080027fc <readData>:

void readData()
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af04      	add	r7, sp, #16
  // Read MPU6050 data.
  MPU6050_GetData(&raw_ax, &raw_ay, &raw_az, &raw_gx, &raw_gy, &raw_gz, &raw_temp);
 8002802:	4b0d      	ldr	r3, [pc, #52]	@ (8002838 <readData+0x3c>)
 8002804:	9302      	str	r3, [sp, #8]
 8002806:	4b0d      	ldr	r3, [pc, #52]	@ (800283c <readData+0x40>)
 8002808:	9301      	str	r3, [sp, #4]
 800280a:	4b0d      	ldr	r3, [pc, #52]	@ (8002840 <readData+0x44>)
 800280c:	9300      	str	r3, [sp, #0]
 800280e:	4b0d      	ldr	r3, [pc, #52]	@ (8002844 <readData+0x48>)
 8002810:	4a0d      	ldr	r2, [pc, #52]	@ (8002848 <readData+0x4c>)
 8002812:	490e      	ldr	r1, [pc, #56]	@ (800284c <readData+0x50>)
 8002814:	480e      	ldr	r0, [pc, #56]	@ (8002850 <readData+0x54>)
 8002816:	f000 fc0d 	bl	8003034 <MPU6050_GetData>

  // Read button data
  buttonRead(LEFT_BTN_GPIO_Port, LEFT_BTN_Pin);
 800281a:	2110      	movs	r1, #16
 800281c:	480d      	ldr	r0, [pc, #52]	@ (8002854 <readData+0x58>)
 800281e:	f7fe fd01 	bl	8001224 <buttonRead>
  buttonRead(RIGHT_BTN_GPIO_Port, RIGHT_BTN_Pin);
 8002822:	2108      	movs	r1, #8
 8002824:	480b      	ldr	r0, [pc, #44]	@ (8002854 <readData+0x58>)
 8002826:	f7fe fcfd 	bl	8001224 <buttonRead>

  // Read Encoder Switch
  readEncoderSwitch(ENCODER_OTS_GPIO_Port, ENCODER_OTS_Pin);
 800282a:	2120      	movs	r1, #32
 800282c:	480a      	ldr	r0, [pc, #40]	@ (8002858 <readData+0x5c>)
 800282e:	f000 f89f 	bl	8002970 <readEncoderSwitch>
}
 8002832:	bf00      	nop
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	2000076c 	.word	0x2000076c
 800283c:	2000076a 	.word	0x2000076a
 8002840:	20000768 	.word	0x20000768
 8002844:	20000766 	.word	0x20000766
 8002848:	20000764 	.word	0x20000764
 800284c:	20000762 	.word	0x20000762
 8002850:	20000760 	.word	0x20000760
 8002854:	40010c00 	.word	0x40010c00
 8002858:	40010800 	.word	0x40010800

0800285c <dataProcessing>:

bool dataProcessing()
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
  // USB HID Data
  int8_t HID_report[4];

  // Initialize USB HID Data.
  HID_report[0] = 0x00; // Mouse Button State (0x01: Left Button Clicked, 0x02: Right Button Clicked)
 8002862:	2300      	movs	r3, #0
 8002864:	713b      	strb	r3, [r7, #4]
  HID_report[1] = 0x00; // Mouse X-axis Movement.
 8002866:	2300      	movs	r3, #0
 8002868:	717b      	strb	r3, [r7, #5]
  HID_report[2] = 0x00; // Mouse Y-axis Movement.
 800286a:	2300      	movs	r3, #0
 800286c:	71bb      	strb	r3, [r7, #6]
  HID_report[3] = 0x00; // Mouse Wheel Movement.
 800286e:	2300      	movs	r3, #0
 8002870:	71fb      	strb	r3, [r7, #7]

  // Mouse Left Button Clicked.
  if (isButtonPressed(LEFT_BTN_GPIO_Port, LEFT_BTN_Pin))
 8002872:	2110      	movs	r1, #16
 8002874:	4822      	ldr	r0, [pc, #136]	@ (8002900 <dataProcessing+0xa4>)
 8002876:	f7fe fca3 	bl	80011c0 <isButtonPressed>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d002      	beq.n	8002886 <dataProcessing+0x2a>
  {
    HID_report[0] = 0x01;
 8002880:	2301      	movs	r3, #1
 8002882:	713b      	strb	r3, [r7, #4]
 8002884:	e008      	b.n	8002898 <dataProcessing+0x3c>
  }
  // Mouse Right Button Clicked.
  else if (isButtonPressed(RIGHT_BTN_GPIO_Port, RIGHT_BTN_Pin))
 8002886:	2108      	movs	r1, #8
 8002888:	481d      	ldr	r0, [pc, #116]	@ (8002900 <dataProcessing+0xa4>)
 800288a:	f7fe fc99 	bl	80011c0 <isButtonPressed>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d001      	beq.n	8002898 <dataProcessing+0x3c>
  {
    HID_report[0] = 0x02;
 8002894:	2302      	movs	r3, #2
 8002896:	713b      	strb	r3, [r7, #4]
  }

  // Mouse Wheel
  if (getIsSwitch() == 1)
 8002898:	f000 f8ae 	bl	80029f8 <getIsSwitch>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d010      	beq.n	80028c4 <dataProcessing+0x68>
  {
    HID_report[3] = 0;
 80028a2:	2300      	movs	r3, #0
 80028a4:	71fb      	strb	r3, [r7, #7]
    changeDPI();
 80028a6:	f7ff ff3f 	bl	8002728 <changeDPI>
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80028aa:	2200      	movs	r2, #0
 80028ac:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80028b0:	4813      	ldr	r0, [pc, #76]	@ (8002900 <dataProcessing+0xa4>)
 80028b2:	f001 ff00 	bl	80046b6 <HAL_GPIO_WritePin>
    cliPrintf("%d\n", sensitivity);
 80028b6:	4b13      	ldr	r3, [pc, #76]	@ (8002904 <dataProcessing+0xa8>)
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	4619      	mov	r1, r3
 80028bc:	4812      	ldr	r0, [pc, #72]	@ (8002908 <dataProcessing+0xac>)
 80028be:	f7ff fa81 	bl	8001dc4 <cliPrintf>
 80028c2:	e009      	b.n	80028d8 <dataProcessing+0x7c>
  }
  else
  {
    HID_report[3] = calculateMouseWheel();
 80028c4:	f7ff fee8 	bl	8002698 <calculateMouseWheel>
 80028c8:	4603      	mov	r3, r0
 80028ca:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80028cc:	2201      	movs	r2, #1
 80028ce:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80028d2:	480b      	ldr	r0, [pc, #44]	@ (8002900 <dataProcessing+0xa4>)
 80028d4:	f001 feef 	bl	80046b6 <HAL_GPIO_WritePin>
  }

  // Calculate Mouse X, Y Movement.
  HID_report[1] = calculateMouseX();
 80028d8:	f7ff fdf6 	bl	80024c8 <calculateMouseX>
 80028dc:	4603      	mov	r3, r0
 80028de:	717b      	strb	r3, [r7, #5]
  HID_report[2] = calculateMouseY();
 80028e0:	f7ff fe46 	bl	8002570 <calculateMouseY>
 80028e4:	4603      	mov	r3, r0
 80028e6:	71bb      	strb	r3, [r7, #6]

  // Data Transmit.
  HAL_UART_Transmit(&huart2, (uint8_t *)HID_report, sizeof(HID_report), 10);
 80028e8:	1d39      	adds	r1, r7, #4
 80028ea:	230a      	movs	r3, #10
 80028ec:	2204      	movs	r2, #4
 80028ee:	4807      	ldr	r0, [pc, #28]	@ (800290c <dataProcessing+0xb0>)
 80028f0:	f003 ff10 	bl	8006714 <HAL_UART_Transmit>

  // Print HID_report data on cli terminal.
  // cliPrintf("%d %d %d %d (encoder : %d)\n", HID_report[0], HID_report[1], HID_report[2], HID_report[3], prev_wheel);

  return 1;
 80028f4:	2301      	movs	r3, #1
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	40010c00 	.word	0x40010c00
 8002904:	20000004 	.word	0x20000004
 8002908:	0800adf0 	.word	0x0800adf0
 800290c:	20000898 	.word	0x20000898

08002910 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002916:	4b10      	ldr	r3, [pc, #64]	@ (8002958 <MX_DMA_Init+0x48>)
 8002918:	695b      	ldr	r3, [r3, #20]
 800291a:	4a0f      	ldr	r2, [pc, #60]	@ (8002958 <MX_DMA_Init+0x48>)
 800291c:	f043 0301 	orr.w	r3, r3, #1
 8002920:	6153      	str	r3, [r2, #20]
 8002922:	4b0d      	ldr	r3, [pc, #52]	@ (8002958 <MX_DMA_Init+0x48>)
 8002924:	695b      	ldr	r3, [r3, #20]
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	607b      	str	r3, [r7, #4]
 800292c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800292e:	2200      	movs	r2, #0
 8002930:	2100      	movs	r1, #0
 8002932:	200f      	movs	r0, #15
 8002934:	f001 fa4b 	bl	8003dce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002938:	200f      	movs	r0, #15
 800293a:	f001 fa64 	bl	8003e06 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800293e:	2200      	movs	r2, #0
 8002940:	2100      	movs	r1, #0
 8002942:	2010      	movs	r0, #16
 8002944:	f001 fa43 	bl	8003dce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8002948:	2010      	movs	r0, #16
 800294a:	f001 fa5c 	bl	8003e06 <HAL_NVIC_EnableIRQ>

}
 800294e:	bf00      	nop
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	40021000 	.word	0x40021000

0800295c <encoderInit>:
bool curr_state = true;
bool last_state = true;


void encoderInit()
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
     HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8002960:	213c      	movs	r1, #60	@ 0x3c
 8002962:	4802      	ldr	r0, [pc, #8]	@ (800296c <encoderInit+0x10>)
 8002964:	f003 fbd8 	bl	8006118 <HAL_TIM_Encoder_Start>
}
 8002968:	bf00      	nop
 800296a:	bd80      	pop	{r7, pc}
 800296c:	20000808 	.word	0x20000808

08002970 <readEncoderSwitch>:

void readEncoderSwitch(GPIO_TypeDef *port, uint32_t pin)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
     curr_state = !HAL_GPIO_ReadPin(ENCODER_OTS_GPIO_Port, ENCODER_OTS_Pin);
 800297a:	2120      	movs	r1, #32
 800297c:	481a      	ldr	r0, [pc, #104]	@ (80029e8 <readEncoderSwitch+0x78>)
 800297e:	f001 fe83 	bl	8004688 <HAL_GPIO_ReadPin>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	bf0c      	ite	eq
 8002988:	2301      	moveq	r3, #1
 800298a:	2300      	movne	r3, #0
 800298c:	b2da      	uxtb	r2, r3
 800298e:	4b17      	ldr	r3, [pc, #92]	@ (80029ec <readEncoderSwitch+0x7c>)
 8002990:	701a      	strb	r2, [r3, #0]

     if(curr_state == 0 && last_state == 1)
 8002992:	4b16      	ldr	r3, [pc, #88]	@ (80029ec <readEncoderSwitch+0x7c>)
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	f083 0301 	eor.w	r3, r3, #1
 800299a:	b2db      	uxtb	r3, r3
 800299c:	2b00      	cmp	r3, #0
 800299e:	d01b      	beq.n	80029d8 <readEncoderSwitch+0x68>
 80029a0:	4b13      	ldr	r3, [pc, #76]	@ (80029f0 <readEncoderSwitch+0x80>)
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d017      	beq.n	80029d8 <readEncoderSwitch+0x68>
     {
       is_switched = !is_switched;
 80029a8:	4b12      	ldr	r3, [pc, #72]	@ (80029f4 <readEncoderSwitch+0x84>)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	bf14      	ite	ne
 80029b0:	2301      	movne	r3, #1
 80029b2:	2300      	moveq	r3, #0
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	f083 0301 	eor.w	r3, r3, #1
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	f003 0301 	and.w	r3, r3, #1
 80029c0:	b2da      	uxtb	r2, r3
 80029c2:	4b0c      	ldr	r3, [pc, #48]	@ (80029f4 <readEncoderSwitch+0x84>)
 80029c4:	701a      	strb	r2, [r3, #0]

       if(is_switched)
 80029c6:	4b0b      	ldr	r3, [pc, #44]	@ (80029f4 <readEncoderSwitch+0x84>)
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d002      	beq.n	80029d4 <readEncoderSwitch+0x64>
         setIsSwitchTrue();
 80029ce:	f000 f81d 	bl	8002a0c <setIsSwitchTrue>
 80029d2:	e001      	b.n	80029d8 <readEncoderSwitch+0x68>
       else
         setIsSwitchFalse();
 80029d4:	f000 f826 	bl	8002a24 <setIsSwitchFalse>
     }

     last_state = curr_state;
 80029d8:	4b04      	ldr	r3, [pc, #16]	@ (80029ec <readEncoderSwitch+0x7c>)
 80029da:	781a      	ldrb	r2, [r3, #0]
 80029dc:	4b04      	ldr	r3, [pc, #16]	@ (80029f0 <readEncoderSwitch+0x80>)
 80029de:	701a      	strb	r2, [r3, #0]
}
 80029e0:	bf00      	nop
 80029e2:	3708      	adds	r7, #8
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	40010800 	.word	0x40010800
 80029ec:	20000005 	.word	0x20000005
 80029f0:	20000006 	.word	0x20000006
 80029f4:	200007ac 	.word	0x200007ac

080029f8 <getIsSwitch>:

bool getIsSwitch()
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
     return is_switched;
 80029fc:	4b02      	ldr	r3, [pc, #8]	@ (8002a08 <getIsSwitch+0x10>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bc80      	pop	{r7}
 8002a06:	4770      	bx	lr
 8002a08:	200007ac 	.word	0x200007ac

08002a0c <setIsSwitchTrue>:

void setIsSwitchTrue()
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
     is_switched = true;
 8002a10:	4b03      	ldr	r3, [pc, #12]	@ (8002a20 <setIsSwitchTrue+0x14>)
 8002a12:	2201      	movs	r2, #1
 8002a14:	701a      	strb	r2, [r3, #0]
}
 8002a16:	bf00      	nop
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bc80      	pop	{r7}
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	200007ac 	.word	0x200007ac

08002a24 <setIsSwitchFalse>:

void setIsSwitchFalse()
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
     is_switched = false;
 8002a28:	4b03      	ldr	r3, [pc, #12]	@ (8002a38 <setIsSwitchFalse+0x14>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	701a      	strb	r2, [r3, #0]
}
 8002a2e:	bf00      	nop
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bc80      	pop	{r7}
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	200007ac 	.word	0x200007ac

08002a3c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b088      	sub	sp, #32
 8002a40:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a42:	f107 0310 	add.w	r3, r7, #16
 8002a46:	2200      	movs	r2, #0
 8002a48:	601a      	str	r2, [r3, #0]
 8002a4a:	605a      	str	r2, [r3, #4]
 8002a4c:	609a      	str	r2, [r3, #8]
 8002a4e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a50:	4b2a      	ldr	r3, [pc, #168]	@ (8002afc <MX_GPIO_Init+0xc0>)
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	4a29      	ldr	r2, [pc, #164]	@ (8002afc <MX_GPIO_Init+0xc0>)
 8002a56:	f043 0320 	orr.w	r3, r3, #32
 8002a5a:	6193      	str	r3, [r2, #24]
 8002a5c:	4b27      	ldr	r3, [pc, #156]	@ (8002afc <MX_GPIO_Init+0xc0>)
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	f003 0320 	and.w	r3, r3, #32
 8002a64:	60fb      	str	r3, [r7, #12]
 8002a66:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a68:	4b24      	ldr	r3, [pc, #144]	@ (8002afc <MX_GPIO_Init+0xc0>)
 8002a6a:	699b      	ldr	r3, [r3, #24]
 8002a6c:	4a23      	ldr	r2, [pc, #140]	@ (8002afc <MX_GPIO_Init+0xc0>)
 8002a6e:	f043 0304 	orr.w	r3, r3, #4
 8002a72:	6193      	str	r3, [r2, #24]
 8002a74:	4b21      	ldr	r3, [pc, #132]	@ (8002afc <MX_GPIO_Init+0xc0>)
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	f003 0304 	and.w	r3, r3, #4
 8002a7c:	60bb      	str	r3, [r7, #8]
 8002a7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a80:	4b1e      	ldr	r3, [pc, #120]	@ (8002afc <MX_GPIO_Init+0xc0>)
 8002a82:	699b      	ldr	r3, [r3, #24]
 8002a84:	4a1d      	ldr	r2, [pc, #116]	@ (8002afc <MX_GPIO_Init+0xc0>)
 8002a86:	f043 0308 	orr.w	r3, r3, #8
 8002a8a:	6193      	str	r3, [r2, #24]
 8002a8c:	4b1b      	ldr	r3, [pc, #108]	@ (8002afc <MX_GPIO_Init+0xc0>)
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	f003 0308 	and.w	r3, r3, #8
 8002a94:	607b      	str	r3, [r7, #4]
 8002a96:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002a9e:	4818      	ldr	r0, [pc, #96]	@ (8002b00 <MX_GPIO_Init+0xc4>)
 8002aa0:	f001 fe09 	bl	80046b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCODER_OTS_Pin;
 8002aa4:	2320      	movs	r3, #32
 8002aa6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aac:	2300      	movs	r3, #0
 8002aae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENCODER_OTS_GPIO_Port, &GPIO_InitStruct);
 8002ab0:	f107 0310 	add.w	r3, r7, #16
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	4813      	ldr	r0, [pc, #76]	@ (8002b04 <MX_GPIO_Init+0xc8>)
 8002ab8:	f001 fc62 	bl	8004380 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002abc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ac0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aca:	2302      	movs	r3, #2
 8002acc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002ace:	f107 0310 	add.w	r3, r7, #16
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	480a      	ldr	r0, [pc, #40]	@ (8002b00 <MX_GPIO_Init+0xc4>)
 8002ad6:	f001 fc53 	bl	8004380 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = RIGHT_BTN_Pin|LEFT_BTN_Pin;
 8002ada:	2318      	movs	r3, #24
 8002adc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ae6:	f107 0310 	add.w	r3, r7, #16
 8002aea:	4619      	mov	r1, r3
 8002aec:	4804      	ldr	r0, [pc, #16]	@ (8002b00 <MX_GPIO_Init+0xc4>)
 8002aee:	f001 fc47 	bl	8004380 <HAL_GPIO_Init>

}
 8002af2:	bf00      	nop
 8002af4:	3720      	adds	r7, #32
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	40021000 	.word	0x40021000
 8002b00:	40010c00 	.word	0x40010c00
 8002b04:	40010800 	.word	0x40010800

08002b08 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002b0c:	4b12      	ldr	r3, [pc, #72]	@ (8002b58 <MX_I2C1_Init+0x50>)
 8002b0e:	4a13      	ldr	r2, [pc, #76]	@ (8002b5c <MX_I2C1_Init+0x54>)
 8002b10:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002b12:	4b11      	ldr	r3, [pc, #68]	@ (8002b58 <MX_I2C1_Init+0x50>)
 8002b14:	4a12      	ldr	r2, [pc, #72]	@ (8002b60 <MX_I2C1_Init+0x58>)
 8002b16:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002b18:	4b0f      	ldr	r3, [pc, #60]	@ (8002b58 <MX_I2C1_Init+0x50>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002b1e:	4b0e      	ldr	r3, [pc, #56]	@ (8002b58 <MX_I2C1_Init+0x50>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b24:	4b0c      	ldr	r3, [pc, #48]	@ (8002b58 <MX_I2C1_Init+0x50>)
 8002b26:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002b2a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b2c:	4b0a      	ldr	r3, [pc, #40]	@ (8002b58 <MX_I2C1_Init+0x50>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002b32:	4b09      	ldr	r3, [pc, #36]	@ (8002b58 <MX_I2C1_Init+0x50>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b38:	4b07      	ldr	r3, [pc, #28]	@ (8002b58 <MX_I2C1_Init+0x50>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b3e:	4b06      	ldr	r3, [pc, #24]	@ (8002b58 <MX_I2C1_Init+0x50>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002b44:	4804      	ldr	r0, [pc, #16]	@ (8002b58 <MX_I2C1_Init+0x50>)
 8002b46:	f001 fdcf 	bl	80046e8 <HAL_I2C_Init>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002b50:	f000 f926 	bl	8002da0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002b54:	bf00      	nop
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	200007b0 	.word	0x200007b0
 8002b5c:	40005400 	.word	0x40005400
 8002b60:	000186a0 	.word	0x000186a0

08002b64 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b088      	sub	sp, #32
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b6c:	f107 0310 	add.w	r3, r7, #16
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]
 8002b74:	605a      	str	r2, [r3, #4]
 8002b76:	609a      	str	r2, [r3, #8]
 8002b78:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a15      	ldr	r2, [pc, #84]	@ (8002bd4 <HAL_I2C_MspInit+0x70>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d123      	bne.n	8002bcc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b84:	4b14      	ldr	r3, [pc, #80]	@ (8002bd8 <HAL_I2C_MspInit+0x74>)
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	4a13      	ldr	r2, [pc, #76]	@ (8002bd8 <HAL_I2C_MspInit+0x74>)
 8002b8a:	f043 0308 	orr.w	r3, r3, #8
 8002b8e:	6193      	str	r3, [r2, #24]
 8002b90:	4b11      	ldr	r3, [pc, #68]	@ (8002bd8 <HAL_I2C_MspInit+0x74>)
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	f003 0308 	and.w	r3, r3, #8
 8002b98:	60fb      	str	r3, [r7, #12]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b9c:	23c0      	movs	r3, #192	@ 0xc0
 8002b9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ba0:	2312      	movs	r3, #18
 8002ba2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ba8:	f107 0310 	add.w	r3, r7, #16
 8002bac:	4619      	mov	r1, r3
 8002bae:	480b      	ldr	r0, [pc, #44]	@ (8002bdc <HAL_I2C_MspInit+0x78>)
 8002bb0:	f001 fbe6 	bl	8004380 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002bb4:	4b08      	ldr	r3, [pc, #32]	@ (8002bd8 <HAL_I2C_MspInit+0x74>)
 8002bb6:	69db      	ldr	r3, [r3, #28]
 8002bb8:	4a07      	ldr	r2, [pc, #28]	@ (8002bd8 <HAL_I2C_MspInit+0x74>)
 8002bba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002bbe:	61d3      	str	r3, [r2, #28]
 8002bc0:	4b05      	ldr	r3, [pc, #20]	@ (8002bd8 <HAL_I2C_MspInit+0x74>)
 8002bc2:	69db      	ldr	r3, [r3, #28]
 8002bc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bc8:	60bb      	str	r3, [r7, #8]
 8002bca:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002bcc:	bf00      	nop
 8002bce:	3720      	adds	r7, #32
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	40005400 	.word	0x40005400
 8002bd8:	40021000 	.word	0x40021000
 8002bdc:	40010c00 	.word	0x40010c00

08002be0 <KalmanFilter_Init>:

void KalmanFilter_Init(KalmanFilter *kf,
                       float process_noise,
                       float measurement_noise,
                       float initial_value)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b085      	sub	sp, #20
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
 8002bec:	603b      	str	r3, [r7, #0]
    kf->q = process_noise;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	68ba      	ldr	r2, [r7, #8]
 8002bf2:	601a      	str	r2, [r3, #0]
    kf->r = measurement_noise;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	605a      	str	r2, [r3, #4]
    kf->x = initial_value;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	683a      	ldr	r2, [r7, #0]
 8002bfe:	609a      	str	r2, [r3, #8]
    kf->p = 1.0f;  // 초기 공분산 값을 1로 설정
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002c06:	60da      	str	r2, [r3, #12]
    kf->k = 0.0f;  // 초기 칼만 이득 값
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f04f 0200 	mov.w	r2, #0
 8002c0e:	611a      	str	r2, [r3, #16]
}
 8002c10:	bf00      	nop
 8002c12:	3714      	adds	r7, #20
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bc80      	pop	{r7}
 8002c18:	4770      	bx	lr

08002c1a <KalmanFilter_Update>:

float KalmanFilter_Update(KalmanFilter *kf, float measurement)
{
 8002c1a:	b5b0      	push	{r4, r5, r7, lr}
 8002c1c:	b082      	sub	sp, #8
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
 8002c22:	6039      	str	r1, [r7, #0]
    // 1. 예측 단계
    kf->p += kf->q;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	68da      	ldr	r2, [r3, #12]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	4610      	mov	r0, r2
 8002c30:	f7fd ff7a 	bl	8000b28 <__addsf3>
 8002c34:	4603      	mov	r3, r0
 8002c36:	461a      	mov	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	60da      	str	r2, [r3, #12]

    // 2. 칼만 이득 계산
    kf->k = kf->p / (kf->p + kf->r);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	68dc      	ldr	r4, [r3, #12]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	68da      	ldr	r2, [r3, #12]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	4619      	mov	r1, r3
 8002c4a:	4610      	mov	r0, r2
 8002c4c:	f7fd ff6c 	bl	8000b28 <__addsf3>
 8002c50:	4603      	mov	r3, r0
 8002c52:	4619      	mov	r1, r3
 8002c54:	4620      	mov	r0, r4
 8002c56:	f7fe f923 	bl	8000ea0 <__aeabi_fdiv>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	611a      	str	r2, [r3, #16]

    // 3. 값 업데이트
    kf->x += kf->k * (measurement - kf->x);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	689c      	ldr	r4, [r3, #8]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	691d      	ldr	r5, [r3, #16]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	4619      	mov	r1, r3
 8002c70:	6838      	ldr	r0, [r7, #0]
 8002c72:	f7fd ff57 	bl	8000b24 <__aeabi_fsub>
 8002c76:	4603      	mov	r3, r0
 8002c78:	4619      	mov	r1, r3
 8002c7a:	4628      	mov	r0, r5
 8002c7c:	f7fe f85c 	bl	8000d38 <__aeabi_fmul>
 8002c80:	4603      	mov	r3, r0
 8002c82:	4619      	mov	r1, r3
 8002c84:	4620      	mov	r0, r4
 8002c86:	f7fd ff4f 	bl	8000b28 <__addsf3>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	609a      	str	r2, [r3, #8]

    // 4. 공분산 갱신
    kf->p *= (1.0f - kf->k);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	68dc      	ldr	r4, [r3, #12]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8002ca0:	f7fd ff40 	bl	8000b24 <__aeabi_fsub>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	4620      	mov	r0, r4
 8002caa:	f7fe f845 	bl	8000d38 <__aeabi_fmul>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	60da      	str	r2, [r3, #12]

    return kf->x;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	689b      	ldr	r3, [r3, #8]
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bdb0      	pop	{r4, r5, r7, pc}

08002cc2 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002cc6:	f000 ff25 	bl	8003b14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002cca:	f000 f824 	bl	8002d16 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002cce:	f7ff feb5 	bl	8002a3c <MX_GPIO_Init>
  MX_DMA_Init();
 8002cd2:	f7ff fe1d 	bl	8002910 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002cd6:	f000 fdbb 	bl	8003850 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8002cda:	f7ff ff15 	bl	8002b08 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8002cde:	f000 fde1 	bl	80038a4 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8002ce2:	f000 fd1b 	bl	800371c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  cliInit();
 8002ce6:	f7fe fb2f 	bl	8001348 <cliInit>
  MPU6050_Init(0x06);
 8002cea:	2006      	movs	r0, #6
 8002cec:	f000 fa64 	bl	80031b8 <MPU6050_Init>
  dataProcessingInit();
 8002cf0:	f7ff fbb7 	bl	8002462 <dataProcessingInit>
  buttonInit();
 8002cf4:	f7fe fa58 	bl	80011a8 <buttonInit>
  // bluetoothInit();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  cliOpen(CH_USART1, 11520);
 8002cf8:	f44f 5134 	mov.w	r1, #11520	@ 0x2d00
 8002cfc:	2001      	movs	r0, #1
 8002cfe:	f7fe fb6f 	bl	80013e0 <cliOpen>
  encoderInit();
 8002d02:	f7ff fe2b 	bl	800295c <encoderInit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    readData();
 8002d06:	f7ff fd79 	bl	80027fc <readData>

    dataProcessing();
 8002d0a:	f7ff fda7 	bl	800285c <dataProcessing>

    cliMain();
 8002d0e:	f7fe fc4b 	bl	80015a8 <cliMain>
    readData();
 8002d12:	bf00      	nop
 8002d14:	e7f7      	b.n	8002d06 <main+0x44>

08002d16 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b090      	sub	sp, #64	@ 0x40
 8002d1a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d1c:	f107 0318 	add.w	r3, r7, #24
 8002d20:	2228      	movs	r2, #40	@ 0x28
 8002d22:	2100      	movs	r1, #0
 8002d24:	4618      	mov	r0, r3
 8002d26:	f005 fcb1 	bl	800868c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d2a:	1d3b      	adds	r3, r7, #4
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	601a      	str	r2, [r3, #0]
 8002d30:	605a      	str	r2, [r3, #4]
 8002d32:	609a      	str	r2, [r3, #8]
 8002d34:	60da      	str	r2, [r3, #12]
 8002d36:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002d3c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002d40:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002d42:	2300      	movs	r3, #0
 8002d44:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d46:	2301      	movs	r3, #1
 8002d48:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d4e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002d52:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002d54:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8002d58:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d5a:	f107 0318 	add.w	r3, r7, #24
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f002 fd28 	bl	80057b4 <HAL_RCC_OscConfig>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002d6a:	f000 f819 	bl	8002da0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d6e:	230f      	movs	r3, #15
 8002d70:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d72:	2302      	movs	r3, #2
 8002d74:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d76:	2300      	movs	r3, #0
 8002d78:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002d7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002d7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d80:	2300      	movs	r3, #0
 8002d82:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002d84:	1d3b      	adds	r3, r7, #4
 8002d86:	2102      	movs	r1, #2
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f002 ff95 	bl	8005cb8 <HAL_RCC_ClockConfig>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002d94:	f000 f804 	bl	8002da0 <Error_Handler>
  }
}
 8002d98:	bf00      	nop
 8002d9a:	3740      	adds	r7, #64	@ 0x40
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002da4:	b672      	cpsid	i
}
 8002da6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002da8:	bf00      	nop
 8002daa:	e7fd      	b.n	8002da8 <Error_Handler+0x8>

08002dac <MPU6050_ReadOneByte>:
//������ ���� 1����Ʈ �б� 
// �Ķ����1 : ���� ��巹��, �Ķ���� 2 : ������ �������� ��巹��
// ���ϰ� : �������䰪

uint8_t MPU6050_ReadOneByte(uint8_t RegAddr)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b088      	sub	sp, #32
 8002db0:	af04      	add	r7, sp, #16
 8002db2:	4603      	mov	r3, r0
 8002db4:	71fb      	strb	r3, [r7, #7]
	uint8_t Data = 0;
 8002db6:	2300      	movs	r3, #0
 8002db8:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(&MPU6050_I2C_PORT,MPU6050_DEVICE_ADDR,RegAddr,1,&Data,1,1000);
 8002dba:	79fb      	ldrb	r3, [r7, #7]
 8002dbc:	b29a      	uxth	r2, r3
 8002dbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002dc2:	9302      	str	r3, [sp, #8]
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	9301      	str	r3, [sp, #4]
 8002dc8:	f107 030f 	add.w	r3, r7, #15
 8002dcc:	9300      	str	r3, [sp, #0]
 8002dce:	2301      	movs	r3, #1
 8002dd0:	21d0      	movs	r1, #208	@ 0xd0
 8002dd2:	4804      	ldr	r0, [pc, #16]	@ (8002de4 <MPU6050_ReadOneByte+0x38>)
 8002dd4:	f001 fec6 	bl	8004b64 <HAL_I2C_Mem_Read>
	return Data;
 8002dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	200007b0 	.word	0x200007b0

08002de8 <MPU6050_WriteOneByte>:

//������  1����Ʈ ���� 
// �Ķ����1 : ���� ��巹��, �Ķ���� 2 : ������ �������� ��巹��
// ���ϰ� : �������䰪
void MPU6050_WriteOneByte(uint8_t RegAddr, uint8_t Data)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b086      	sub	sp, #24
 8002dec:	af04      	add	r7, sp, #16
 8002dee:	4603      	mov	r3, r0
 8002df0:	460a      	mov	r2, r1
 8002df2:	71fb      	strb	r3, [r7, #7]
 8002df4:	4613      	mov	r3, r2
 8002df6:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&MPU6050_I2C_PORT,MPU6050_DEVICE_ADDR,RegAddr,I2C_MEMADD_SIZE_8BIT,&Data,1,1000);
 8002df8:	79fb      	ldrb	r3, [r7, #7]
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e00:	9302      	str	r3, [sp, #8]
 8002e02:	2301      	movs	r3, #1
 8002e04:	9301      	str	r3, [sp, #4]
 8002e06:	1dbb      	adds	r3, r7, #6
 8002e08:	9300      	str	r3, [sp, #0]
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	21d0      	movs	r1, #208	@ 0xd0
 8002e0e:	4803      	ldr	r0, [pc, #12]	@ (8002e1c <MPU6050_WriteOneByte+0x34>)
 8002e10:	f001 fdae 	bl	8004970 <HAL_I2C_Mem_Write>
}
 8002e14:	bf00      	nop
 8002e16:	3708      	adds	r7, #8
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	200007b0 	.word	0x200007b0

08002e20 <MPU6050_WriteBits>:

bool MPU6050_WriteBits(uint8_t RegAddr, uint8_t BitStart, uint8_t Length, uint8_t Data)
{
 8002e20:	b590      	push	{r4, r7, lr}
 8002e22:	b085      	sub	sp, #20
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	4604      	mov	r4, r0
 8002e28:	4608      	mov	r0, r1
 8002e2a:	4611      	mov	r1, r2
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	4623      	mov	r3, r4
 8002e30:	71fb      	strb	r3, [r7, #7]
 8002e32:	4603      	mov	r3, r0
 8002e34:	71bb      	strb	r3, [r7, #6]
 8002e36:	460b      	mov	r3, r1
 8002e38:	717b      	strb	r3, [r7, #5]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	713b      	strb	r3, [r7, #4]

   uint8_t Dat, Mask;
    
		Dat = MPU6050_ReadOneByte(RegAddr);
 8002e3e:	79fb      	ldrb	r3, [r7, #7]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7ff ffb3 	bl	8002dac <MPU6050_ReadOneByte>
 8002e46:	4603      	mov	r3, r0
 8002e48:	73fb      	strb	r3, [r7, #15]
    Mask = (0xFF << (BitStart + 1)) | 0xFF >> ((8 - BitStart) + Length - 1);
 8002e4a:	79bb      	ldrb	r3, [r7, #6]
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	22ff      	movs	r2, #255	@ 0xff
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	b25a      	sxtb	r2, r3
 8002e56:	79bb      	ldrb	r3, [r7, #6]
 8002e58:	f1c3 0108 	rsb	r1, r3, #8
 8002e5c:	797b      	ldrb	r3, [r7, #5]
 8002e5e:	440b      	add	r3, r1
 8002e60:	3b01      	subs	r3, #1
 8002e62:	21ff      	movs	r1, #255	@ 0xff
 8002e64:	fa41 f303 	asr.w	r3, r1, r3
 8002e68:	b25b      	sxtb	r3, r3
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	b25b      	sxtb	r3, r3
 8002e6e:	73bb      	strb	r3, [r7, #14]
    Data <<= (8 - Length);
 8002e70:	793a      	ldrb	r2, [r7, #4]
 8002e72:	797b      	ldrb	r3, [r7, #5]
 8002e74:	f1c3 0308 	rsb	r3, r3, #8
 8002e78:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7c:	713b      	strb	r3, [r7, #4]
    Data >>= (7 - BitStart);
 8002e7e:	793a      	ldrb	r2, [r7, #4]
 8002e80:	79bb      	ldrb	r3, [r7, #6]
 8002e82:	f1c3 0307 	rsb	r3, r3, #7
 8002e86:	fa42 f303 	asr.w	r3, r2, r3
 8002e8a:	713b      	strb	r3, [r7, #4]
    Dat &= Mask;
 8002e8c:	7bfa      	ldrb	r2, [r7, #15]
 8002e8e:	7bbb      	ldrb	r3, [r7, #14]
 8002e90:	4013      	ands	r3, r2
 8002e92:	73fb      	strb	r3, [r7, #15]
    Dat |= Data;
 8002e94:	7bfa      	ldrb	r2, [r7, #15]
 8002e96:	793b      	ldrb	r3, [r7, #4]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteOneByte(RegAddr, Dat);
 8002e9c:	7bfa      	ldrb	r2, [r7, #15]
 8002e9e:	79fb      	ldrb	r3, [r7, #7]
 8002ea0:	4611      	mov	r1, r2
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7ff ffa0 	bl	8002de8 <MPU6050_WriteOneByte>
    
    return true;
 8002ea8:	2301      	movs	r3, #1
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3714      	adds	r7, #20
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd90      	pop	{r4, r7, pc}

08002eb2 <MPU6050_WriteOneBit>:

bool MPU6050_WriteOneBit(uint8_t RegAddr, uint8_t BitNum, uint8_t Data)
{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b084      	sub	sp, #16
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	4603      	mov	r3, r0
 8002eba:	71fb      	strb	r3, [r7, #7]
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	71bb      	strb	r3, [r7, #6]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	717b      	strb	r3, [r7, #5]
    uint8_t Dat;
    
    Dat = MPU6050_ReadOneByte(RegAddr);
 8002ec4:	79fb      	ldrb	r3, [r7, #7]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7ff ff70 	bl	8002dac <MPU6050_ReadOneByte>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	73fb      	strb	r3, [r7, #15]
    Dat = (Data != 0) ? (Dat | (1 << BitNum)) : (Dat & ~(1 << BitNum));
 8002ed0:	797b      	ldrb	r3, [r7, #5]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00a      	beq.n	8002eec <MPU6050_WriteOneBit+0x3a>
 8002ed6:	79bb      	ldrb	r3, [r7, #6]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	fa02 f303 	lsl.w	r3, r2, r3
 8002ede:	b25a      	sxtb	r2, r3
 8002ee0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	b25b      	sxtb	r3, r3
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	e00b      	b.n	8002f04 <MPU6050_WriteOneBit+0x52>
 8002eec:	79bb      	ldrb	r3, [r7, #6]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef4:	b25b      	sxtb	r3, r3
 8002ef6:	43db      	mvns	r3, r3
 8002ef8:	b25a      	sxtb	r2, r3
 8002efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002efe:	4013      	ands	r3, r2
 8002f00:	b25b      	sxtb	r3, r3
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteOneByte(RegAddr, Dat);
 8002f06:	7bfa      	ldrb	r2, [r7, #15]
 8002f08:	79fb      	ldrb	r3, [r7, #7]
 8002f0a:	4611      	mov	r1, r2
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7ff ff6b 	bl	8002de8 <MPU6050_WriteOneByte>
    
    return true;
 8002f12:	2301      	movs	r3, #1
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3710      	adds	r7, #16
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <MPU6050_ReadBuff>:

//�����б� (����̽� ��巹��, �������� ��巹��, ������ ũ��, ���� ������)
bool MPU6050_ReadBuff(uint8_t RegAddr, uint8_t Num, uint8_t *pBuff)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af04      	add	r7, sp, #16
 8002f22:	4603      	mov	r3, r0
 8002f24:	603a      	str	r2, [r7, #0]
 8002f26:	71fb      	strb	r3, [r7, #7]
 8002f28:	460b      	mov	r3, r1
 8002f2a:	71bb      	strb	r3, [r7, #6]
	// �޸� �б�(����̽� ��巹��, 8��Ʈ ��巹�� �޸� ũ��, ���� ������, ���ۼ���, �õ�Ƚ��)
	return HAL_I2C_Mem_Read(&MPU6050_I2C_PORT,MPU6050_DEVICE_ADDR,RegAddr,I2C_MEMADD_SIZE_8BIT,pBuff,Num,1000);
 8002f2c:	79fb      	ldrb	r3, [r7, #7]
 8002f2e:	b29a      	uxth	r2, r3
 8002f30:	79bb      	ldrb	r3, [r7, #6]
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002f38:	9102      	str	r1, [sp, #8]
 8002f3a:	9301      	str	r3, [sp, #4]
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	9300      	str	r3, [sp, #0]
 8002f40:	2301      	movs	r3, #1
 8002f42:	21d0      	movs	r1, #208	@ 0xd0
 8002f44:	4806      	ldr	r0, [pc, #24]	@ (8002f60 <MPU6050_ReadBuff+0x44>)
 8002f46:	f001 fe0d 	bl	8004b64 <HAL_I2C_Mem_Read>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	bf14      	ite	ne
 8002f50:	2301      	movne	r3, #1
 8002f52:	2300      	moveq	r3, #0
 8002f54:	b2db      	uxtb	r3, r3
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	200007b0 	.word	0x200007b0

08002f64 <MPU6050_SetClockSource>:
  	}
  	*pOutVal >>= 3;
}

void MPU6050_SetClockSource(uint8_t source)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	71fb      	strb	r3, [r7, #7]
    MPU6050_WriteBits(MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, source);
 8002f6e:	79fb      	ldrb	r3, [r7, #7]
 8002f70:	2203      	movs	r2, #3
 8002f72:	2102      	movs	r1, #2
 8002f74:	206b      	movs	r0, #107	@ 0x6b
 8002f76:	f7ff ff53 	bl	8002e20 <MPU6050_WriteBits>
}
 8002f7a:	bf00      	nop
 8002f7c:	3708      	adds	r7, #8
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <MPU6050_SetFullScaleGyroRange>:

void MPU6050_SetFullScaleGyroRange(uint8_t range)
{
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b082      	sub	sp, #8
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	4603      	mov	r3, r0
 8002f8a:	71fb      	strb	r3, [r7, #7]
    MPU6050_WriteBits(MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, range);
 8002f8c:	79fb      	ldrb	r3, [r7, #7]
 8002f8e:	2202      	movs	r2, #2
 8002f90:	2104      	movs	r1, #4
 8002f92:	201b      	movs	r0, #27
 8002f94:	f7ff ff44 	bl	8002e20 <MPU6050_WriteBits>
}
 8002f98:	bf00      	nop
 8002f9a:	3708      	adds	r7, #8
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <MPU6050_SetLPF>:

void MPU6050_SetLPF(uint8_t	LowPassFilter)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	71fb      	strb	r3, [r7, #7]
   MPU6050_WriteOneByte(MPU6050_RA_CONFIG, LowPassFilter);
 8002faa:	79fb      	ldrb	r3, [r7, #7]
 8002fac:	4619      	mov	r1, r3
 8002fae:	201a      	movs	r0, #26
 8002fb0:	f7ff ff1a 	bl	8002de8 <MPU6050_WriteOneByte>
}
 8002fb4:	bf00      	nop
 8002fb6:	3708      	adds	r7, #8
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <MPU6050_SetFullScaleAccelRange>:

void MPU6050_SetFullScaleAccelRange(uint8_t range)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	71fb      	strb	r3, [r7, #7]
    MPU6050_WriteBits(MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, range);
 8002fc6:	79fb      	ldrb	r3, [r7, #7]
 8002fc8:	2202      	movs	r2, #2
 8002fca:	2104      	movs	r1, #4
 8002fcc:	201c      	movs	r0, #28
 8002fce:	f7ff ff27 	bl	8002e20 <MPU6050_WriteBits>
}
 8002fd2:	bf00      	nop
 8002fd4:	3708      	adds	r7, #8
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <MPU6050_SetSleepEnabled>:

void MPU6050_SetSleepEnabled(uint8_t enabled) 
{
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b082      	sub	sp, #8
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	71fb      	strb	r3, [r7, #7]
    MPU6050_WriteOneBit(MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, enabled);
 8002fe4:	79fb      	ldrb	r3, [r7, #7]
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	2106      	movs	r1, #6
 8002fea:	206b      	movs	r0, #107	@ 0x6b
 8002fec:	f7ff ff61 	bl	8002eb2 <MPU6050_WriteOneBit>
}
 8002ff0:	bf00      	nop
 8002ff2:	3708      	adds	r7, #8
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <MPU6050_SetI2CMasterModeEnabled>:

void MPU6050_SetI2CMasterModeEnabled(uint8_t enabled) 
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	4603      	mov	r3, r0
 8003000:	71fb      	strb	r3, [r7, #7]
    MPU6050_WriteOneBit(MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_EN_BIT, enabled);
 8003002:	79fb      	ldrb	r3, [r7, #7]
 8003004:	461a      	mov	r2, r3
 8003006:	2105      	movs	r1, #5
 8003008:	206a      	movs	r0, #106	@ 0x6a
 800300a:	f7ff ff52 	bl	8002eb2 <MPU6050_WriteOneBit>
}
 800300e:	bf00      	nop
 8003010:	3708      	adds	r7, #8
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <MPU6050_SetI2CBypassEnabled>:

void MPU6050_SetI2CBypassEnabled(uint8_t enabled) 
{
 8003016:	b580      	push	{r7, lr}
 8003018:	b082      	sub	sp, #8
 800301a:	af00      	add	r7, sp, #0
 800301c:	4603      	mov	r3, r0
 800301e:	71fb      	strb	r3, [r7, #7]
    MPU6050_WriteOneBit(MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_I2C_BYPASS_EN_BIT, enabled);
 8003020:	79fb      	ldrb	r3, [r7, #7]
 8003022:	461a      	mov	r2, r3
 8003024:	2101      	movs	r1, #1
 8003026:	2037      	movs	r0, #55	@ 0x37
 8003028:	f7ff ff43 	bl	8002eb2 <MPU6050_WriteOneBit>
}
 800302c:	bf00      	nop
 800302e:	3708      	adds	r7, #8
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <MPU6050_GetData>:

void MPU6050_GetData(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz, int16_t* tmpr) 
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b08c      	sub	sp, #48	@ 0x30
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	607a      	str	r2, [r7, #4]
 8003040:	603b      	str	r3, [r7, #0]
	uint8_t Buffer[14] = {0};
 8003042:	2300      	movs	r3, #0
 8003044:	623b      	str	r3, [r7, #32]
 8003046:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800304a:	2200      	movs	r2, #0
 800304c:	601a      	str	r2, [r3, #0]
 800304e:	605a      	str	r2, [r3, #4]
 8003050:	811a      	strh	r2, [r3, #8]
	int16_t InBuffer[7] = {0};
 8003052:	f107 0310 	add.w	r3, r7, #16
 8003056:	2200      	movs	r2, #0
 8003058:	601a      	str	r2, [r3, #0]
 800305a:	605a      	str	r2, [r3, #4]
 800305c:	609a      	str	r2, [r3, #8]
 800305e:	819a      	strh	r2, [r3, #12]
	int16_t temp;
	
	MPU6050_ReadBuff(MPU6050_RA_ACCEL_XOUT_H, 14, Buffer);
 8003060:	f107 0320 	add.w	r3, r7, #32
 8003064:	461a      	mov	r2, r3
 8003066:	210e      	movs	r1, #14
 8003068:	203b      	movs	r0, #59	@ 0x3b
 800306a:	f7ff ff57 	bl	8002f1c <MPU6050_ReadBuff>
		
  InBuffer[0] = (((int16_t)Buffer[0]) << 8) | Buffer[1];
 800306e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003072:	021b      	lsls	r3, r3, #8
 8003074:	b21a      	sxth	r2, r3
 8003076:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800307a:	b21b      	sxth	r3, r3
 800307c:	4313      	orrs	r3, r2
 800307e:	b21b      	sxth	r3, r3
 8003080:	823b      	strh	r3, [r7, #16]
  InBuffer[1] = (((int16_t)Buffer[2]) << 8) | Buffer[3];
 8003082:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8003086:	021b      	lsls	r3, r3, #8
 8003088:	b21a      	sxth	r2, r3
 800308a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800308e:	b21b      	sxth	r3, r3
 8003090:	4313      	orrs	r3, r2
 8003092:	b21b      	sxth	r3, r3
 8003094:	827b      	strh	r3, [r7, #18]
  InBuffer[2] = (((int16_t)Buffer[4]) << 8) | Buffer[5];
 8003096:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800309a:	021b      	lsls	r3, r3, #8
 800309c:	b21a      	sxth	r2, r3
 800309e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80030a2:	b21b      	sxth	r3, r3
 80030a4:	4313      	orrs	r3, r2
 80030a6:	b21b      	sxth	r3, r3
 80030a8:	82bb      	strh	r3, [r7, #20]

  InBuffer[3] = (((int16_t)Buffer[8]) << 8) | Buffer[9];
 80030aa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80030ae:	021b      	lsls	r3, r3, #8
 80030b0:	b21a      	sxth	r2, r3
 80030b2:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80030b6:	b21b      	sxth	r3, r3
 80030b8:	4313      	orrs	r3, r2
 80030ba:	b21b      	sxth	r3, r3
 80030bc:	82fb      	strh	r3, [r7, #22]
  InBuffer[4] = (((int16_t)Buffer[10]) << 8) | Buffer[11];
 80030be:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80030c2:	021b      	lsls	r3, r3, #8
 80030c4:	b21a      	sxth	r2, r3
 80030c6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80030ca:	b21b      	sxth	r3, r3
 80030cc:	4313      	orrs	r3, r2
 80030ce:	b21b      	sxth	r3, r3
 80030d0:	833b      	strh	r3, [r7, #24]
  InBuffer[5] = (((int16_t)Buffer[12]) << 8) | Buffer[13];
 80030d2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80030d6:	021b      	lsls	r3, r3, #8
 80030d8:	b21a      	sxth	r2, r3
 80030da:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80030de:	b21b      	sxth	r3, r3
 80030e0:	4313      	orrs	r3, r2
 80030e2:	b21b      	sxth	r3, r3
 80030e4:	837b      	strh	r3, [r7, #26]
	
	temp = (((int16_t)Buffer[6]) << 8) | Buffer[7];
 80030e6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80030ea:	021b      	lsls	r3, r3, #8
 80030ec:	b21a      	sxth	r2, r3
 80030ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80030f2:	b21b      	sxth	r3, r3
 80030f4:	4313      	orrs	r3, r2
 80030f6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	InBuffer[6] = (int16_t)(temp* 10L / 34) + 3653;
 80030f8:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	@ 0x2e
 80030fc:	4613      	mov	r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	4413      	add	r3, r2
 8003102:	005b      	lsls	r3, r3, #1
 8003104:	4a2a      	ldr	r2, [pc, #168]	@ (80031b0 <MPU6050_GetData+0x17c>)
 8003106:	fb82 1203 	smull	r1, r2, r2, r3
 800310a:	1112      	asrs	r2, r2, #4
 800310c:	17db      	asrs	r3, r3, #31
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	b29b      	uxth	r3, r3
 8003112:	f603 6345 	addw	r3, r3, #3653	@ 0xe45
 8003116:	b29b      	uxth	r3, r3
 8003118:	b21b      	sxth	r3, r3
 800311a:	83bb      	strh	r3, [r7, #28]
	
	*ax = *(InBuffer + 0);
 800311c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	801a      	strh	r2, [r3, #0]
	*ay = *(InBuffer + 1);
 8003124:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	801a      	strh	r2, [r3, #0]
	*az = *(InBuffer + 2);
 800312c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	801a      	strh	r2, [r3, #0]
	*gx = *(InBuffer + 3) / 32.8f;
 8003134:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003138:	4618      	mov	r0, r3
 800313a:	f7fd fda9 	bl	8000c90 <__aeabi_i2f>
 800313e:	4603      	mov	r3, r0
 8003140:	491c      	ldr	r1, [pc, #112]	@ (80031b4 <MPU6050_GetData+0x180>)
 8003142:	4618      	mov	r0, r3
 8003144:	f7fd feac 	bl	8000ea0 <__aeabi_fdiv>
 8003148:	4603      	mov	r3, r0
 800314a:	4618      	mov	r0, r3
 800314c:	f7fd ffd0 	bl	80010f0 <__aeabi_f2iz>
 8003150:	4603      	mov	r3, r0
 8003152:	b21a      	sxth	r2, r3
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	801a      	strh	r2, [r3, #0]
	*gy = *(InBuffer + 4) / 32.8f;
 8003158:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800315c:	4618      	mov	r0, r3
 800315e:	f7fd fd97 	bl	8000c90 <__aeabi_i2f>
 8003162:	4603      	mov	r3, r0
 8003164:	4913      	ldr	r1, [pc, #76]	@ (80031b4 <MPU6050_GetData+0x180>)
 8003166:	4618      	mov	r0, r3
 8003168:	f7fd fe9a 	bl	8000ea0 <__aeabi_fdiv>
 800316c:	4603      	mov	r3, r0
 800316e:	4618      	mov	r0, r3
 8003170:	f7fd ffbe 	bl	80010f0 <__aeabi_f2iz>
 8003174:	4603      	mov	r3, r0
 8003176:	b21a      	sxth	r2, r3
 8003178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800317a:	801a      	strh	r2, [r3, #0]
	*gz = *(InBuffer + 5) / 32.8f;
 800317c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003180:	4618      	mov	r0, r3
 8003182:	f7fd fd85 	bl	8000c90 <__aeabi_i2f>
 8003186:	4603      	mov	r3, r0
 8003188:	490a      	ldr	r1, [pc, #40]	@ (80031b4 <MPU6050_GetData+0x180>)
 800318a:	4618      	mov	r0, r3
 800318c:	f7fd fe88 	bl	8000ea0 <__aeabi_fdiv>
 8003190:	4603      	mov	r3, r0
 8003192:	4618      	mov	r0, r3
 8003194:	f7fd ffac 	bl	80010f0 <__aeabi_f2iz>
 8003198:	4603      	mov	r3, r0
 800319a:	b21a      	sxth	r2, r3
 800319c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800319e:	801a      	strh	r2, [r3, #0]
	*tmpr = *(InBuffer + 6);
 80031a0:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80031a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031a6:	801a      	strh	r2, [r3, #0]
}
 80031a8:	bf00      	nop
 80031aa:	3730      	adds	r7, #48	@ 0x30
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	78787879 	.word	0x78787879
 80031b4:	42033333 	.word	0x42033333

080031b8 <MPU6050_Init>:
	MPU6050_GyroOffset.Z = TempGz >> 5;

}

void MPU6050_Init(uint8_t	lpf)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	4603      	mov	r3, r0
 80031c0:	71fb      	strb	r3, [r7, #7]
  MPU6050_SetClockSource(MPU6050_CLOCK_PLL_XGYRO); 
 80031c2:	2001      	movs	r0, #1
 80031c4:	f7ff fece 	bl	8002f64 <MPU6050_SetClockSource>
  MPU6050_SetFullScaleGyroRange(MPU6050_GYRO_FS_1000);
 80031c8:	2002      	movs	r0, #2
 80031ca:	f7ff feda 	bl	8002f82 <MPU6050_SetFullScaleGyroRange>
  MPU6050_SetFullScaleAccelRange(MPU6050_ACCEL_FS_2);	
 80031ce:	2000      	movs	r0, #0
 80031d0:	f7ff fef4 	bl	8002fbc <MPU6050_SetFullScaleAccelRange>
		MPU6050_DLPF_BW_42          0x03
		MPU6050_DLPF_BW_20          0x04
		MPU6050_DLPF_BW_10          0x05
		MPU6050_DLPF_BW_5           0x06
	*/
	MPU6050_SetLPF(lpf);
 80031d4:	79fb      	ldrb	r3, [r7, #7]
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7ff fee2 	bl	8002fa0 <MPU6050_SetLPF>
	
  MPU6050_SetSleepEnabled(0); 
 80031dc:	2000      	movs	r0, #0
 80031de:	f7ff fefc 	bl	8002fda <MPU6050_SetSleepEnabled>
	MPU6050_SetI2CMasterModeEnabled(0);	 
 80031e2:	2000      	movs	r0, #0
 80031e4:	f7ff ff08 	bl	8002ff8 <MPU6050_SetI2CMasterModeEnabled>
	MPU6050_SetI2CBypassEnabled(1);	 
 80031e8:	2001      	movs	r0, #1
 80031ea:	f7ff ff14 	bl	8003016 <MPU6050_SetI2CBypassEnabled>
	
	MPU6050_WriteOneBit(MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_INT_LEVEL_BIT, 0);
 80031ee:	2200      	movs	r2, #0
 80031f0:	2107      	movs	r1, #7
 80031f2:	2037      	movs	r0, #55	@ 0x37
 80031f4:	f7ff fe5d 	bl	8002eb2 <MPU6050_WriteOneBit>
	MPU6050_WriteOneBit( MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_INT_OPEN_BIT, 0);
 80031f8:	2200      	movs	r2, #0
 80031fa:	2106      	movs	r1, #6
 80031fc:	2037      	movs	r0, #55	@ 0x37
 80031fe:	f7ff fe58 	bl	8002eb2 <MPU6050_WriteOneBit>
	MPU6050_WriteOneBit(MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_LATCH_INT_EN_BIT, 1);
 8003202:	2201      	movs	r2, #1
 8003204:	2105      	movs	r1, #5
 8003206:	2037      	movs	r0, #55	@ 0x37
 8003208:	f7ff fe53 	bl	8002eb2 <MPU6050_WriteOneBit>
	MPU6050_WriteOneBit(MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_INT_RD_CLEAR_BIT, 1);
 800320c:	2201      	movs	r2, #1
 800320e:	2104      	movs	r1, #4
 8003210:	2037      	movs	r0, #55	@ 0x37
 8003212:	f7ff fe4e 	bl	8002eb2 <MPU6050_WriteOneBit>
  MPU6050_WriteOneBit(MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_DATA_RDY_BIT, 1);
 8003216:	2201      	movs	r2, #1
 8003218:	2100      	movs	r1, #0
 800321a:	2038      	movs	r0, #56	@ 0x38
 800321c:	f7ff fe49 	bl	8002eb2 <MPU6050_WriteOneBit>
	HAL_Delay(100);  // ���̷� ����ȭ ���
 8003220:	2064      	movs	r0, #100	@ 0x64
 8003222:	f000 fcd9 	bl	8003bd8 <HAL_Delay>

	cliAdd("mpu6050", cliMPU6050);
 8003226:	4904      	ldr	r1, [pc, #16]	@ (8003238 <MPU6050_Init+0x80>)
 8003228:	4804      	ldr	r0, [pc, #16]	@ (800323c <MPU6050_Init+0x84>)
 800322a:	f7fe fecd 	bl	8001fc8 <cliAdd>
}
 800322e:	bf00      	nop
 8003230:	3708      	adds	r7, #8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	08003241 	.word	0x08003241
 800323c:	0800adf4 	.word	0x0800adf4

08003240 <cliMPU6050>:

void cliMPU6050(cli_args_t *args)
{
 8003240:	b590      	push	{r4, r7, lr}
 8003242:	b0a3      	sub	sp, #140	@ 0x8c
 8003244:	af0c      	add	r7, sp, #48	@ 0x30
 8003246:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8003248:	2300      	movs	r3, #0
 800324a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

  if(args->argc == 1 && args->isStr(0, "show"))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	881b      	ldrh	r3, [r3, #0]
 8003252:	2b01      	cmp	r3, #1
 8003254:	f040 80ee 	bne.w	8003434 <cliMPU6050+0x1f4>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	695b      	ldr	r3, [r3, #20]
 800325c:	497e      	ldr	r1, [pc, #504]	@ (8003458 <cliMPU6050+0x218>)
 800325e:	2000      	movs	r0, #0
 8003260:	4798      	blx	r3
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	f000 80e5 	beq.w	8003434 <cliMPU6050+0x1f4>
  {
    int16_t raw_ax = 0, raw_ay = 0, raw_az = 0;
 800326a:	2300      	movs	r3, #0
 800326c:	82bb      	strh	r3, [r7, #20]
 800326e:	2300      	movs	r3, #0
 8003270:	827b      	strh	r3, [r7, #18]
 8003272:	2300      	movs	r3, #0
 8003274:	823b      	strh	r3, [r7, #16]
    int16_t raw_gx = 0, raw_gy = 0, raw_gz = 0;
 8003276:	2300      	movs	r3, #0
 8003278:	81fb      	strh	r3, [r7, #14]
 800327a:	2300      	movs	r3, #0
 800327c:	81bb      	strh	r3, [r7, #12]
 800327e:	2300      	movs	r3, #0
 8003280:	817b      	strh	r3, [r7, #10]
    int16_t raw_temp = 0;
 8003282:	2300      	movs	r3, #0
 8003284:	813b      	strh	r3, [r7, #8]

    double ax = 0.0, ay = 0.0, az = 0.0;
 8003286:	f04f 0200 	mov.w	r2, #0
 800328a:	f04f 0300 	mov.w	r3, #0
 800328e:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 8003292:	f04f 0200 	mov.w	r2, #0
 8003296:	f04f 0300 	mov.w	r3, #0
 800329a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 800329e:	f04f 0200 	mov.w	r2, #0
 80032a2:	f04f 0300 	mov.w	r3, #0
 80032a6:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double gx = 0.0, gy = 0.0, gz = 0.0;
 80032aa:	f04f 0200 	mov.w	r2, #0
 80032ae:	f04f 0300 	mov.w	r3, #0
 80032b2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 80032b6:	f04f 0200 	mov.w	r2, #0
 80032ba:	f04f 0300 	mov.w	r3, #0
 80032be:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 80032c2:	f04f 0200 	mov.w	r2, #0
 80032c6:	f04f 0300 	mov.w	r3, #0
 80032ca:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double temp = 0.0;
 80032ce:	f04f 0200 	mov.w	r2, #0
 80032d2:	f04f 0300 	mov.w	r3, #0
 80032d6:	e9c7 2306 	strd	r2, r3, [r7, #24]

    uint8_t str = 0;
 80032da:	2300      	movs	r3, #0
 80032dc:	75fb      	strb	r3, [r7, #23]

    while(cliKeepLoop())
 80032de:	e09e      	b.n	800341e <cliMPU6050+0x1de>
    {
      str = uartRead(CH_USART1);
 80032e0:	2001      	movs	r0, #1
 80032e2:	f7ff f81f 	bl	8002324 <uartRead>
 80032e6:	4603      	mov	r3, r0
 80032e8:	75fb      	strb	r3, [r7, #23]

      if(str == 0x0D)
 80032ea:	7dfb      	ldrb	r3, [r7, #23]
 80032ec:	2b0d      	cmp	r3, #13
 80032ee:	f000 809d 	beq.w	800342c <cliMPU6050+0x1ec>
        break;

      MPU6050_GetData(&raw_ax, &raw_ay, &raw_az, &raw_gx, &raw_gy, &raw_gz, &raw_temp);
 80032f2:	f107 040e 	add.w	r4, r7, #14
 80032f6:	f107 0210 	add.w	r2, r7, #16
 80032fa:	f107 0112 	add.w	r1, r7, #18
 80032fe:	f107 0014 	add.w	r0, r7, #20
 8003302:	f107 0308 	add.w	r3, r7, #8
 8003306:	9302      	str	r3, [sp, #8]
 8003308:	f107 030a 	add.w	r3, r7, #10
 800330c:	9301      	str	r3, [sp, #4]
 800330e:	f107 030c 	add.w	r3, r7, #12
 8003312:	9300      	str	r3, [sp, #0]
 8003314:	4623      	mov	r3, r4
 8003316:	f7ff fe8d 	bl	8003034 <MPU6050_GetData>

      ax = (double)raw_ax / 4096;
 800331a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800331e:	4618      	mov	r0, r3
 8003320:	f7fd f872 	bl	8000408 <__aeabi_i2d>
 8003324:	f04f 0200 	mov.w	r2, #0
 8003328:	4b4c      	ldr	r3, [pc, #304]	@ (800345c <cliMPU6050+0x21c>)
 800332a:	f7fd fa01 	bl	8000730 <__aeabi_ddiv>
 800332e:	4602      	mov	r2, r0
 8003330:	460b      	mov	r3, r1
 8003332:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
      ay = (double)raw_ay / 4096;
 8003336:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800333a:	4618      	mov	r0, r3
 800333c:	f7fd f864 	bl	8000408 <__aeabi_i2d>
 8003340:	f04f 0200 	mov.w	r2, #0
 8003344:	4b45      	ldr	r3, [pc, #276]	@ (800345c <cliMPU6050+0x21c>)
 8003346:	f7fd f9f3 	bl	8000730 <__aeabi_ddiv>
 800334a:	4602      	mov	r2, r0
 800334c:	460b      	mov	r3, r1
 800334e:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
      az = (double)raw_az / 4096;
 8003352:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003356:	4618      	mov	r0, r3
 8003358:	f7fd f856 	bl	8000408 <__aeabi_i2d>
 800335c:	f04f 0200 	mov.w	r2, #0
 8003360:	4b3e      	ldr	r3, [pc, #248]	@ (800345c <cliMPU6050+0x21c>)
 8003362:	f7fd f9e5 	bl	8000730 <__aeabi_ddiv>
 8003366:	4602      	mov	r2, r0
 8003368:	460b      	mov	r3, r1
 800336a:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
      gx = (double)raw_gx / 32.8;
 800336e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003372:	4618      	mov	r0, r3
 8003374:	f7fd f848 	bl	8000408 <__aeabi_i2d>
 8003378:	a335      	add	r3, pc, #212	@ (adr r3, 8003450 <cliMPU6050+0x210>)
 800337a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800337e:	f7fd f9d7 	bl	8000730 <__aeabi_ddiv>
 8003382:	4602      	mov	r2, r0
 8003384:	460b      	mov	r3, r1
 8003386:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
      gy = (double)raw_gy / 32.8;
 800338a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800338e:	4618      	mov	r0, r3
 8003390:	f7fd f83a 	bl	8000408 <__aeabi_i2d>
 8003394:	a32e      	add	r3, pc, #184	@ (adr r3, 8003450 <cliMPU6050+0x210>)
 8003396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800339a:	f7fd f9c9 	bl	8000730 <__aeabi_ddiv>
 800339e:	4602      	mov	r2, r0
 80033a0:	460b      	mov	r3, r1
 80033a2:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
      gz = (double)raw_gz / 32.8;
 80033a6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7fd f82c 	bl	8000408 <__aeabi_i2d>
 80033b0:	a327      	add	r3, pc, #156	@ (adr r3, 8003450 <cliMPU6050+0x210>)
 80033b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b6:	f7fd f9bb 	bl	8000730 <__aeabi_ddiv>
 80033ba:	4602      	mov	r2, r0
 80033bc:	460b      	mov	r3, r1
 80033be:	e9c7 2308 	strd	r2, r3, [r7, #32]
      temp = (double)raw_temp / 100;
 80033c2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7fd f81e 	bl	8000408 <__aeabi_i2d>
 80033cc:	f04f 0200 	mov.w	r2, #0
 80033d0:	4b23      	ldr	r3, [pc, #140]	@ (8003460 <cliMPU6050+0x220>)
 80033d2:	f7fd f9ad 	bl	8000730 <__aeabi_ddiv>
 80033d6:	4602      	mov	r2, r0
 80033d8:	460b      	mov	r3, r1
 80033da:	e9c7 2306 	strd	r2, r3, [r7, #24]

      cliPrintf("ax: %.2f, ay: %.2f, az: %.2f, gx: %.2f, gy: %.2f, gz: %.2f, temp: %.2f\n", ax, ay, az, gx, gy, gz, temp);
 80033de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033e2:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 80033e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80033ea:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80033ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80033f2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80033f6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80033fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80033fe:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003402:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003406:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800340a:	e9cd 2300 	strd	r2, r3, [sp]
 800340e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003412:	4814      	ldr	r0, [pc, #80]	@ (8003464 <cliMPU6050+0x224>)
 8003414:	f7fe fcd6 	bl	8001dc4 <cliPrintf>

      HAL_Delay(200);
 8003418:	20c8      	movs	r0, #200	@ 0xc8
 800341a:	f000 fbdd 	bl	8003bd8 <HAL_Delay>
    while(cliKeepLoop())
 800341e:	f7fe fdc5 	bl	8001fac <cliKeepLoop>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	f47f af5b 	bne.w	80032e0 <cliMPU6050+0xa0>
 800342a:	e000      	b.n	800342e <cliMPU6050+0x1ee>
        break;
 800342c:	bf00      	nop
    }

    ret = true;
 800342e:	2301      	movs	r3, #1
 8003430:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
  }

  if(ret != true)
 8003434:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8003438:	f083 0301 	eor.w	r3, r3, #1
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d002      	beq.n	8003448 <cliMPU6050+0x208>
  {
    cliPrintf("mpu6050 show\n");
 8003442:	4809      	ldr	r0, [pc, #36]	@ (8003468 <cliMPU6050+0x228>)
 8003444:	f7fe fcbe 	bl	8001dc4 <cliPrintf>
  }
}
 8003448:	bf00      	nop
 800344a:	375c      	adds	r7, #92	@ 0x5c
 800344c:	46bd      	mov	sp, r7
 800344e:	bd90      	pop	{r4, r7, pc}
 8003450:	66666666 	.word	0x66666666
 8003454:	40406666 	.word	0x40406666
 8003458:	0800adfc 	.word	0x0800adfc
 800345c:	40b00000 	.word	0x40b00000
 8003460:	40590000 	.word	0x40590000
 8003464:	0800ae04 	.word	0x0800ae04
 8003468:	0800ae4c 	.word	0x0800ae4c

0800346c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800346c:	b480      	push	{r7}
 800346e:	b085      	sub	sp, #20
 8003470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003472:	4b15      	ldr	r3, [pc, #84]	@ (80034c8 <HAL_MspInit+0x5c>)
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	4a14      	ldr	r2, [pc, #80]	@ (80034c8 <HAL_MspInit+0x5c>)
 8003478:	f043 0301 	orr.w	r3, r3, #1
 800347c:	6193      	str	r3, [r2, #24]
 800347e:	4b12      	ldr	r3, [pc, #72]	@ (80034c8 <HAL_MspInit+0x5c>)
 8003480:	699b      	ldr	r3, [r3, #24]
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	60bb      	str	r3, [r7, #8]
 8003488:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800348a:	4b0f      	ldr	r3, [pc, #60]	@ (80034c8 <HAL_MspInit+0x5c>)
 800348c:	69db      	ldr	r3, [r3, #28]
 800348e:	4a0e      	ldr	r2, [pc, #56]	@ (80034c8 <HAL_MspInit+0x5c>)
 8003490:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003494:	61d3      	str	r3, [r2, #28]
 8003496:	4b0c      	ldr	r3, [pc, #48]	@ (80034c8 <HAL_MspInit+0x5c>)
 8003498:	69db      	ldr	r3, [r3, #28]
 800349a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800349e:	607b      	str	r3, [r7, #4]
 80034a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80034a2:	4b0a      	ldr	r3, [pc, #40]	@ (80034cc <HAL_MspInit+0x60>)
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	60fb      	str	r3, [r7, #12]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80034ae:	60fb      	str	r3, [r7, #12]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80034b6:	60fb      	str	r3, [r7, #12]
 80034b8:	4a04      	ldr	r2, [pc, #16]	@ (80034cc <HAL_MspInit+0x60>)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034be:	bf00      	nop
 80034c0:	3714      	adds	r7, #20
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bc80      	pop	{r7}
 80034c6:	4770      	bx	lr
 80034c8:	40021000 	.word	0x40021000
 80034cc:	40010000 	.word	0x40010000

080034d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80034d4:	bf00      	nop
 80034d6:	e7fd      	b.n	80034d4 <NMI_Handler+0x4>

080034d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034d8:	b480      	push	{r7}
 80034da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034dc:	bf00      	nop
 80034de:	e7fd      	b.n	80034dc <HardFault_Handler+0x4>

080034e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034e4:	bf00      	nop
 80034e6:	e7fd      	b.n	80034e4 <MemManage_Handler+0x4>

080034e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034e8:	b480      	push	{r7}
 80034ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034ec:	bf00      	nop
 80034ee:	e7fd      	b.n	80034ec <BusFault_Handler+0x4>

080034f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034f0:	b480      	push	{r7}
 80034f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034f4:	bf00      	nop
 80034f6:	e7fd      	b.n	80034f4 <UsageFault_Handler+0x4>

080034f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034f8:	b480      	push	{r7}
 80034fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80034fc:	bf00      	nop
 80034fe:	46bd      	mov	sp, r7
 8003500:	bc80      	pop	{r7}
 8003502:	4770      	bx	lr

08003504 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003508:	bf00      	nop
 800350a:	46bd      	mov	sp, r7
 800350c:	bc80      	pop	{r7}
 800350e:	4770      	bx	lr

08003510 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003510:	b480      	push	{r7}
 8003512:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003514:	bf00      	nop
 8003516:	46bd      	mov	sp, r7
 8003518:	bc80      	pop	{r7}
 800351a:	4770      	bx	lr

0800351c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003520:	f000 fb3e 	bl	8003ba0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003524:	bf00      	nop
 8003526:	bd80      	pop	{r7, pc}

08003528 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800352c:	4802      	ldr	r0, [pc, #8]	@ (8003538 <DMA1_Channel5_IRQHandler+0x10>)
 800352e:	f000 fdf3 	bl	8004118 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8003532:	bf00      	nop
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	200008e0 	.word	0x200008e0

0800353c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003540:	4802      	ldr	r0, [pc, #8]	@ (800354c <DMA1_Channel6_IRQHandler+0x10>)
 8003542:	f000 fde9 	bl	8004118 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8003546:	bf00      	nop
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	20000924 	.word	0x20000924

08003550 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003554:	4802      	ldr	r0, [pc, #8]	@ (8003560 <TIM3_IRQHandler+0x10>)
 8003556:	f002 fe6d 	bl	8006234 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800355a:	bf00      	nop
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	20000808 	.word	0x20000808

08003564 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003568:	4802      	ldr	r0, [pc, #8]	@ (8003574 <USART1_IRQHandler+0x10>)
 800356a:	f003 f983 	bl	8006874 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800356e:	bf00      	nop
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	20000850 	.word	0x20000850

08003578 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800357c:	4802      	ldr	r0, [pc, #8]	@ (8003588 <USART2_IRQHandler+0x10>)
 800357e:	f003 f979 	bl	8006874 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003582:	bf00      	nop
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	20000898 	.word	0x20000898

0800358c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800358c:	b480      	push	{r7}
 800358e:	af00      	add	r7, sp, #0
  return 1;
 8003590:	2301      	movs	r3, #1
}
 8003592:	4618      	mov	r0, r3
 8003594:	46bd      	mov	sp, r7
 8003596:	bc80      	pop	{r7}
 8003598:	4770      	bx	lr

0800359a <_kill>:

int _kill(int pid, int sig)
{
 800359a:	b580      	push	{r7, lr}
 800359c:	b082      	sub	sp, #8
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
 80035a2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80035a4:	f005 f8fe 	bl	80087a4 <__errno>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2216      	movs	r2, #22
 80035ac:	601a      	str	r2, [r3, #0]
  return -1;
 80035ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3708      	adds	r7, #8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <_exit>:

void _exit (int status)
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b082      	sub	sp, #8
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80035c2:	f04f 31ff 	mov.w	r1, #4294967295
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f7ff ffe7 	bl	800359a <_kill>
  while (1) {}    /* Make sure we hang here */
 80035cc:	bf00      	nop
 80035ce:	e7fd      	b.n	80035cc <_exit+0x12>

080035d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b086      	sub	sp, #24
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035dc:	2300      	movs	r3, #0
 80035de:	617b      	str	r3, [r7, #20]
 80035e0:	e00a      	b.n	80035f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80035e2:	f3af 8000 	nop.w
 80035e6:	4601      	mov	r1, r0
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	1c5a      	adds	r2, r3, #1
 80035ec:	60ba      	str	r2, [r7, #8]
 80035ee:	b2ca      	uxtb	r2, r1
 80035f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	3301      	adds	r3, #1
 80035f6:	617b      	str	r3, [r7, #20]
 80035f8:	697a      	ldr	r2, [r7, #20]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	dbf0      	blt.n	80035e2 <_read+0x12>
  }

  return len;
 8003600:	687b      	ldr	r3, [r7, #4]
}
 8003602:	4618      	mov	r0, r3
 8003604:	3718      	adds	r7, #24
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800360a:	b580      	push	{r7, lr}
 800360c:	b086      	sub	sp, #24
 800360e:	af00      	add	r7, sp, #0
 8003610:	60f8      	str	r0, [r7, #12]
 8003612:	60b9      	str	r1, [r7, #8]
 8003614:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003616:	2300      	movs	r3, #0
 8003618:	617b      	str	r3, [r7, #20]
 800361a:	e009      	b.n	8003630 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	1c5a      	adds	r2, r3, #1
 8003620:	60ba      	str	r2, [r7, #8]
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	4618      	mov	r0, r3
 8003626:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	3301      	adds	r3, #1
 800362e:	617b      	str	r3, [r7, #20]
 8003630:	697a      	ldr	r2, [r7, #20]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	429a      	cmp	r2, r3
 8003636:	dbf1      	blt.n	800361c <_write+0x12>
  }
  return len;
 8003638:	687b      	ldr	r3, [r7, #4]
}
 800363a:	4618      	mov	r0, r3
 800363c:	3718      	adds	r7, #24
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}

08003642 <_close>:

int _close(int file)
{
 8003642:	b480      	push	{r7}
 8003644:	b083      	sub	sp, #12
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800364a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800364e:	4618      	mov	r0, r3
 8003650:	370c      	adds	r7, #12
 8003652:	46bd      	mov	sp, r7
 8003654:	bc80      	pop	{r7}
 8003656:	4770      	bx	lr

08003658 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003668:	605a      	str	r2, [r3, #4]
  return 0;
 800366a:	2300      	movs	r3, #0
}
 800366c:	4618      	mov	r0, r3
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	bc80      	pop	{r7}
 8003674:	4770      	bx	lr

08003676 <_isatty>:

int _isatty(int file)
{
 8003676:	b480      	push	{r7}
 8003678:	b083      	sub	sp, #12
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800367e:	2301      	movs	r3, #1
}
 8003680:	4618      	mov	r0, r3
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	bc80      	pop	{r7}
 8003688:	4770      	bx	lr

0800368a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800368a:	b480      	push	{r7}
 800368c:	b085      	sub	sp, #20
 800368e:	af00      	add	r7, sp, #0
 8003690:	60f8      	str	r0, [r7, #12]
 8003692:	60b9      	str	r1, [r7, #8]
 8003694:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003696:	2300      	movs	r3, #0
}
 8003698:	4618      	mov	r0, r3
 800369a:	3714      	adds	r7, #20
 800369c:	46bd      	mov	sp, r7
 800369e:	bc80      	pop	{r7}
 80036a0:	4770      	bx	lr
	...

080036a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b086      	sub	sp, #24
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036ac:	4a14      	ldr	r2, [pc, #80]	@ (8003700 <_sbrk+0x5c>)
 80036ae:	4b15      	ldr	r3, [pc, #84]	@ (8003704 <_sbrk+0x60>)
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80036b8:	4b13      	ldr	r3, [pc, #76]	@ (8003708 <_sbrk+0x64>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d102      	bne.n	80036c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80036c0:	4b11      	ldr	r3, [pc, #68]	@ (8003708 <_sbrk+0x64>)
 80036c2:	4a12      	ldr	r2, [pc, #72]	@ (800370c <_sbrk+0x68>)
 80036c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80036c6:	4b10      	ldr	r3, [pc, #64]	@ (8003708 <_sbrk+0x64>)
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4413      	add	r3, r2
 80036ce:	693a      	ldr	r2, [r7, #16]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d207      	bcs.n	80036e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80036d4:	f005 f866 	bl	80087a4 <__errno>
 80036d8:	4603      	mov	r3, r0
 80036da:	220c      	movs	r2, #12
 80036dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80036de:	f04f 33ff 	mov.w	r3, #4294967295
 80036e2:	e009      	b.n	80036f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80036e4:	4b08      	ldr	r3, [pc, #32]	@ (8003708 <_sbrk+0x64>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80036ea:	4b07      	ldr	r3, [pc, #28]	@ (8003708 <_sbrk+0x64>)
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4413      	add	r3, r2
 80036f2:	4a05      	ldr	r2, [pc, #20]	@ (8003708 <_sbrk+0x64>)
 80036f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80036f6:	68fb      	ldr	r3, [r7, #12]
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3718      	adds	r7, #24
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	20005000 	.word	0x20005000
 8003704:	00000400 	.word	0x00000400
 8003708:	20000804 	.word	0x20000804
 800370c:	20000ab8 	.word	0x20000ab8

08003710 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003710:	b480      	push	{r7}
 8003712:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003714:	bf00      	nop
 8003716:	46bd      	mov	sp, r7
 8003718:	bc80      	pop	{r7}
 800371a:	4770      	bx	lr

0800371c <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b08c      	sub	sp, #48	@ 0x30
 8003720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003722:	f107 030c 	add.w	r3, r7, #12
 8003726:	2224      	movs	r2, #36	@ 0x24
 8003728:	2100      	movs	r1, #0
 800372a:	4618      	mov	r0, r3
 800372c:	f004 ffae 	bl	800868c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003730:	1d3b      	adds	r3, r7, #4
 8003732:	2200      	movs	r2, #0
 8003734:	601a      	str	r2, [r3, #0]
 8003736:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003738:	4b20      	ldr	r3, [pc, #128]	@ (80037bc <MX_TIM3_Init+0xa0>)
 800373a:	4a21      	ldr	r2, [pc, #132]	@ (80037c0 <MX_TIM3_Init+0xa4>)
 800373c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800373e:	4b1f      	ldr	r3, [pc, #124]	@ (80037bc <MX_TIM3_Init+0xa0>)
 8003740:	2200      	movs	r2, #0
 8003742:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003744:	4b1d      	ldr	r3, [pc, #116]	@ (80037bc <MX_TIM3_Init+0xa0>)
 8003746:	2200      	movs	r2, #0
 8003748:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 128;
 800374a:	4b1c      	ldr	r3, [pc, #112]	@ (80037bc <MX_TIM3_Init+0xa0>)
 800374c:	2280      	movs	r2, #128	@ 0x80
 800374e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003750:	4b1a      	ldr	r3, [pc, #104]	@ (80037bc <MX_TIM3_Init+0xa0>)
 8003752:	2200      	movs	r2, #0
 8003754:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003756:	4b19      	ldr	r3, [pc, #100]	@ (80037bc <MX_TIM3_Init+0xa0>)
 8003758:	2200      	movs	r2, #0
 800375a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800375c:	2301      	movs	r3, #1
 800375e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003760:	2300      	movs	r3, #0
 8003762:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003764:	2301      	movs	r3, #1
 8003766:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003768:	2300      	movs	r3, #0
 800376a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800376c:	2300      	movs	r3, #0
 800376e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003770:	2300      	movs	r3, #0
 8003772:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003774:	2301      	movs	r3, #1
 8003776:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003778:	2300      	movs	r3, #0
 800377a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800377c:	2300      	movs	r3, #0
 800377e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003780:	f107 030c 	add.w	r3, r7, #12
 8003784:	4619      	mov	r1, r3
 8003786:	480d      	ldr	r0, [pc, #52]	@ (80037bc <MX_TIM3_Init+0xa0>)
 8003788:	f002 fc24 	bl	8005fd4 <HAL_TIM_Encoder_Init>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8003792:	f7ff fb05 	bl	8002da0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003796:	2300      	movs	r3, #0
 8003798:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800379a:	2300      	movs	r3, #0
 800379c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800379e:	1d3b      	adds	r3, r7, #4
 80037a0:	4619      	mov	r1, r3
 80037a2:	4806      	ldr	r0, [pc, #24]	@ (80037bc <MX_TIM3_Init+0xa0>)
 80037a4:	f002 fef6 	bl	8006594 <HAL_TIMEx_MasterConfigSynchronization>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d001      	beq.n	80037b2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80037ae:	f7ff faf7 	bl	8002da0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80037b2:	bf00      	nop
 80037b4:	3730      	adds	r7, #48	@ 0x30
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	20000808 	.word	0x20000808
 80037c0:	40000400 	.word	0x40000400

080037c4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b088      	sub	sp, #32
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037cc:	f107 0310 	add.w	r3, r7, #16
 80037d0:	2200      	movs	r2, #0
 80037d2:	601a      	str	r2, [r3, #0]
 80037d4:	605a      	str	r2, [r3, #4]
 80037d6:	609a      	str	r2, [r3, #8]
 80037d8:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM3)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a19      	ldr	r2, [pc, #100]	@ (8003844 <HAL_TIM_Encoder_MspInit+0x80>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d12b      	bne.n	800383c <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80037e4:	4b18      	ldr	r3, [pc, #96]	@ (8003848 <HAL_TIM_Encoder_MspInit+0x84>)
 80037e6:	69db      	ldr	r3, [r3, #28]
 80037e8:	4a17      	ldr	r2, [pc, #92]	@ (8003848 <HAL_TIM_Encoder_MspInit+0x84>)
 80037ea:	f043 0302 	orr.w	r3, r3, #2
 80037ee:	61d3      	str	r3, [r2, #28]
 80037f0:	4b15      	ldr	r3, [pc, #84]	@ (8003848 <HAL_TIM_Encoder_MspInit+0x84>)
 80037f2:	69db      	ldr	r3, [r3, #28]
 80037f4:	f003 0302 	and.w	r3, r3, #2
 80037f8:	60fb      	str	r3, [r7, #12]
 80037fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037fc:	4b12      	ldr	r3, [pc, #72]	@ (8003848 <HAL_TIM_Encoder_MspInit+0x84>)
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	4a11      	ldr	r2, [pc, #68]	@ (8003848 <HAL_TIM_Encoder_MspInit+0x84>)
 8003802:	f043 0304 	orr.w	r3, r3, #4
 8003806:	6193      	str	r3, [r2, #24]
 8003808:	4b0f      	ldr	r3, [pc, #60]	@ (8003848 <HAL_TIM_Encoder_MspInit+0x84>)
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	f003 0304 	and.w	r3, r3, #4
 8003810:	60bb      	str	r3, [r7, #8]
 8003812:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_OTB_Pin|ENCODER_OTA_Pin;
 8003814:	23c0      	movs	r3, #192	@ 0xc0
 8003816:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003818:	2300      	movs	r3, #0
 800381a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800381c:	2300      	movs	r3, #0
 800381e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003820:	f107 0310 	add.w	r3, r7, #16
 8003824:	4619      	mov	r1, r3
 8003826:	4809      	ldr	r0, [pc, #36]	@ (800384c <HAL_TIM_Encoder_MspInit+0x88>)
 8003828:	f000 fdaa 	bl	8004380 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800382c:	2200      	movs	r2, #0
 800382e:	2100      	movs	r1, #0
 8003830:	201d      	movs	r0, #29
 8003832:	f000 facc 	bl	8003dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003836:	201d      	movs	r0, #29
 8003838:	f000 fae5 	bl	8003e06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800383c:	bf00      	nop
 800383e:	3720      	adds	r7, #32
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	40000400 	.word	0x40000400
 8003848:	40021000 	.word	0x40021000
 800384c:	40010800 	.word	0x40010800

08003850 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003854:	4b11      	ldr	r3, [pc, #68]	@ (800389c <MX_USART1_UART_Init+0x4c>)
 8003856:	4a12      	ldr	r2, [pc, #72]	@ (80038a0 <MX_USART1_UART_Init+0x50>)
 8003858:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800385a:	4b10      	ldr	r3, [pc, #64]	@ (800389c <MX_USART1_UART_Init+0x4c>)
 800385c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003860:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003862:	4b0e      	ldr	r3, [pc, #56]	@ (800389c <MX_USART1_UART_Init+0x4c>)
 8003864:	2200      	movs	r2, #0
 8003866:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003868:	4b0c      	ldr	r3, [pc, #48]	@ (800389c <MX_USART1_UART_Init+0x4c>)
 800386a:	2200      	movs	r2, #0
 800386c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800386e:	4b0b      	ldr	r3, [pc, #44]	@ (800389c <MX_USART1_UART_Init+0x4c>)
 8003870:	2200      	movs	r2, #0
 8003872:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003874:	4b09      	ldr	r3, [pc, #36]	@ (800389c <MX_USART1_UART_Init+0x4c>)
 8003876:	220c      	movs	r2, #12
 8003878:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800387a:	4b08      	ldr	r3, [pc, #32]	@ (800389c <MX_USART1_UART_Init+0x4c>)
 800387c:	2200      	movs	r2, #0
 800387e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003880:	4b06      	ldr	r3, [pc, #24]	@ (800389c <MX_USART1_UART_Init+0x4c>)
 8003882:	2200      	movs	r2, #0
 8003884:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003886:	4805      	ldr	r0, [pc, #20]	@ (800389c <MX_USART1_UART_Init+0x4c>)
 8003888:	f002 fef4 	bl	8006674 <HAL_UART_Init>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003892:	f7ff fa85 	bl	8002da0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003896:	bf00      	nop
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	20000850 	.word	0x20000850
 80038a0:	40013800 	.word	0x40013800

080038a4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80038a8:	4b11      	ldr	r3, [pc, #68]	@ (80038f0 <MX_USART2_UART_Init+0x4c>)
 80038aa:	4a12      	ldr	r2, [pc, #72]	@ (80038f4 <MX_USART2_UART_Init+0x50>)
 80038ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80038ae:	4b10      	ldr	r3, [pc, #64]	@ (80038f0 <MX_USART2_UART_Init+0x4c>)
 80038b0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80038b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80038b6:	4b0e      	ldr	r3, [pc, #56]	@ (80038f0 <MX_USART2_UART_Init+0x4c>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80038bc:	4b0c      	ldr	r3, [pc, #48]	@ (80038f0 <MX_USART2_UART_Init+0x4c>)
 80038be:	2200      	movs	r2, #0
 80038c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80038c2:	4b0b      	ldr	r3, [pc, #44]	@ (80038f0 <MX_USART2_UART_Init+0x4c>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80038c8:	4b09      	ldr	r3, [pc, #36]	@ (80038f0 <MX_USART2_UART_Init+0x4c>)
 80038ca:	220c      	movs	r2, #12
 80038cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80038ce:	4b08      	ldr	r3, [pc, #32]	@ (80038f0 <MX_USART2_UART_Init+0x4c>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80038d4:	4b06      	ldr	r3, [pc, #24]	@ (80038f0 <MX_USART2_UART_Init+0x4c>)
 80038d6:	2200      	movs	r2, #0
 80038d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80038da:	4805      	ldr	r0, [pc, #20]	@ (80038f0 <MX_USART2_UART_Init+0x4c>)
 80038dc:	f002 feca 	bl	8006674 <HAL_UART_Init>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d001      	beq.n	80038ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80038e6:	f7ff fa5b 	bl	8002da0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80038ea:	bf00      	nop
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	20000898 	.word	0x20000898
 80038f4:	40004400 	.word	0x40004400

080038f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b08a      	sub	sp, #40	@ 0x28
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003900:	f107 0318 	add.w	r3, r7, #24
 8003904:	2200      	movs	r2, #0
 8003906:	601a      	str	r2, [r3, #0]
 8003908:	605a      	str	r2, [r3, #4]
 800390a:	609a      	str	r2, [r3, #8]
 800390c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a65      	ldr	r2, [pc, #404]	@ (8003aa8 <HAL_UART_MspInit+0x1b0>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d160      	bne.n	80039da <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003918:	4b64      	ldr	r3, [pc, #400]	@ (8003aac <HAL_UART_MspInit+0x1b4>)
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	4a63      	ldr	r2, [pc, #396]	@ (8003aac <HAL_UART_MspInit+0x1b4>)
 800391e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003922:	6193      	str	r3, [r2, #24]
 8003924:	4b61      	ldr	r3, [pc, #388]	@ (8003aac <HAL_UART_MspInit+0x1b4>)
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800392c:	617b      	str	r3, [r7, #20]
 800392e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003930:	4b5e      	ldr	r3, [pc, #376]	@ (8003aac <HAL_UART_MspInit+0x1b4>)
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	4a5d      	ldr	r2, [pc, #372]	@ (8003aac <HAL_UART_MspInit+0x1b4>)
 8003936:	f043 0304 	orr.w	r3, r3, #4
 800393a:	6193      	str	r3, [r2, #24]
 800393c:	4b5b      	ldr	r3, [pc, #364]	@ (8003aac <HAL_UART_MspInit+0x1b4>)
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	f003 0304 	and.w	r3, r3, #4
 8003944:	613b      	str	r3, [r7, #16]
 8003946:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = UART_CLI_TX_Pin;
 8003948:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800394c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800394e:	2302      	movs	r3, #2
 8003950:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003952:	2303      	movs	r3, #3
 8003954:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(UART_CLI_TX_GPIO_Port, &GPIO_InitStruct);
 8003956:	f107 0318 	add.w	r3, r7, #24
 800395a:	4619      	mov	r1, r3
 800395c:	4854      	ldr	r0, [pc, #336]	@ (8003ab0 <HAL_UART_MspInit+0x1b8>)
 800395e:	f000 fd0f 	bl	8004380 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = UART_CLI_RX_Pin;
 8003962:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003966:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003968:	2300      	movs	r3, #0
 800396a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800396c:	2300      	movs	r3, #0
 800396e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(UART_CLI_RX_GPIO_Port, &GPIO_InitStruct);
 8003970:	f107 0318 	add.w	r3, r7, #24
 8003974:	4619      	mov	r1, r3
 8003976:	484e      	ldr	r0, [pc, #312]	@ (8003ab0 <HAL_UART_MspInit+0x1b8>)
 8003978:	f000 fd02 	bl	8004380 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800397c:	4b4d      	ldr	r3, [pc, #308]	@ (8003ab4 <HAL_UART_MspInit+0x1bc>)
 800397e:	4a4e      	ldr	r2, [pc, #312]	@ (8003ab8 <HAL_UART_MspInit+0x1c0>)
 8003980:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003982:	4b4c      	ldr	r3, [pc, #304]	@ (8003ab4 <HAL_UART_MspInit+0x1bc>)
 8003984:	2200      	movs	r2, #0
 8003986:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003988:	4b4a      	ldr	r3, [pc, #296]	@ (8003ab4 <HAL_UART_MspInit+0x1bc>)
 800398a:	2200      	movs	r2, #0
 800398c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800398e:	4b49      	ldr	r3, [pc, #292]	@ (8003ab4 <HAL_UART_MspInit+0x1bc>)
 8003990:	2280      	movs	r2, #128	@ 0x80
 8003992:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003994:	4b47      	ldr	r3, [pc, #284]	@ (8003ab4 <HAL_UART_MspInit+0x1bc>)
 8003996:	2200      	movs	r2, #0
 8003998:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800399a:	4b46      	ldr	r3, [pc, #280]	@ (8003ab4 <HAL_UART_MspInit+0x1bc>)
 800399c:	2200      	movs	r2, #0
 800399e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80039a0:	4b44      	ldr	r3, [pc, #272]	@ (8003ab4 <HAL_UART_MspInit+0x1bc>)
 80039a2:	2220      	movs	r2, #32
 80039a4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80039a6:	4b43      	ldr	r3, [pc, #268]	@ (8003ab4 <HAL_UART_MspInit+0x1bc>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80039ac:	4841      	ldr	r0, [pc, #260]	@ (8003ab4 <HAL_UART_MspInit+0x1bc>)
 80039ae:	f000 fa45 	bl	8003e3c <HAL_DMA_Init>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d001      	beq.n	80039bc <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80039b8:	f7ff f9f2 	bl	8002da0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a3d      	ldr	r2, [pc, #244]	@ (8003ab4 <HAL_UART_MspInit+0x1bc>)
 80039c0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80039c2:	4a3c      	ldr	r2, [pc, #240]	@ (8003ab4 <HAL_UART_MspInit+0x1bc>)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80039c8:	2200      	movs	r2, #0
 80039ca:	2100      	movs	r1, #0
 80039cc:	2025      	movs	r0, #37	@ 0x25
 80039ce:	f000 f9fe 	bl	8003dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80039d2:	2025      	movs	r0, #37	@ 0x25
 80039d4:	f000 fa17 	bl	8003e06 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80039d8:	e062      	b.n	8003aa0 <HAL_UART_MspInit+0x1a8>
  else if(uartHandle->Instance==USART2)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a37      	ldr	r2, [pc, #220]	@ (8003abc <HAL_UART_MspInit+0x1c4>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d15d      	bne.n	8003aa0 <HAL_UART_MspInit+0x1a8>
    __HAL_RCC_USART2_CLK_ENABLE();
 80039e4:	4b31      	ldr	r3, [pc, #196]	@ (8003aac <HAL_UART_MspInit+0x1b4>)
 80039e6:	69db      	ldr	r3, [r3, #28]
 80039e8:	4a30      	ldr	r2, [pc, #192]	@ (8003aac <HAL_UART_MspInit+0x1b4>)
 80039ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039ee:	61d3      	str	r3, [r2, #28]
 80039f0:	4b2e      	ldr	r3, [pc, #184]	@ (8003aac <HAL_UART_MspInit+0x1b4>)
 80039f2:	69db      	ldr	r3, [r3, #28]
 80039f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039f8:	60fb      	str	r3, [r7, #12]
 80039fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039fc:	4b2b      	ldr	r3, [pc, #172]	@ (8003aac <HAL_UART_MspInit+0x1b4>)
 80039fe:	699b      	ldr	r3, [r3, #24]
 8003a00:	4a2a      	ldr	r2, [pc, #168]	@ (8003aac <HAL_UART_MspInit+0x1b4>)
 8003a02:	f043 0304 	orr.w	r3, r3, #4
 8003a06:	6193      	str	r3, [r2, #24]
 8003a08:	4b28      	ldr	r3, [pc, #160]	@ (8003aac <HAL_UART_MspInit+0x1b4>)
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	f003 0304 	and.w	r3, r3, #4
 8003a10:	60bb      	str	r3, [r7, #8]
 8003a12:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = UART_BT_TX_Pin;
 8003a14:	2304      	movs	r3, #4
 8003a16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a18:	2302      	movs	r3, #2
 8003a1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(UART_BT_TX_GPIO_Port, &GPIO_InitStruct);
 8003a20:	f107 0318 	add.w	r3, r7, #24
 8003a24:	4619      	mov	r1, r3
 8003a26:	4822      	ldr	r0, [pc, #136]	@ (8003ab0 <HAL_UART_MspInit+0x1b8>)
 8003a28:	f000 fcaa 	bl	8004380 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART_BT_RX_Pin;
 8003a2c:	2308      	movs	r3, #8
 8003a2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a30:	2300      	movs	r3, #0
 8003a32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a34:	2300      	movs	r3, #0
 8003a36:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(UART_BT_RX_GPIO_Port, &GPIO_InitStruct);
 8003a38:	f107 0318 	add.w	r3, r7, #24
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	481c      	ldr	r0, [pc, #112]	@ (8003ab0 <HAL_UART_MspInit+0x1b8>)
 8003a40:	f000 fc9e 	bl	8004380 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8003a44:	4b1e      	ldr	r3, [pc, #120]	@ (8003ac0 <HAL_UART_MspInit+0x1c8>)
 8003a46:	4a1f      	ldr	r2, [pc, #124]	@ (8003ac4 <HAL_UART_MspInit+0x1cc>)
 8003a48:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a4a:	4b1d      	ldr	r3, [pc, #116]	@ (8003ac0 <HAL_UART_MspInit+0x1c8>)
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a50:	4b1b      	ldr	r3, [pc, #108]	@ (8003ac0 <HAL_UART_MspInit+0x1c8>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003a56:	4b1a      	ldr	r3, [pc, #104]	@ (8003ac0 <HAL_UART_MspInit+0x1c8>)
 8003a58:	2280      	movs	r2, #128	@ 0x80
 8003a5a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a5c:	4b18      	ldr	r3, [pc, #96]	@ (8003ac0 <HAL_UART_MspInit+0x1c8>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a62:	4b17      	ldr	r3, [pc, #92]	@ (8003ac0 <HAL_UART_MspInit+0x1c8>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003a68:	4b15      	ldr	r3, [pc, #84]	@ (8003ac0 <HAL_UART_MspInit+0x1c8>)
 8003a6a:	2220      	movs	r2, #32
 8003a6c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003a6e:	4b14      	ldr	r3, [pc, #80]	@ (8003ac0 <HAL_UART_MspInit+0x1c8>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003a74:	4812      	ldr	r0, [pc, #72]	@ (8003ac0 <HAL_UART_MspInit+0x1c8>)
 8003a76:	f000 f9e1 	bl	8003e3c <HAL_DMA_Init>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d001      	beq.n	8003a84 <HAL_UART_MspInit+0x18c>
      Error_Handler();
 8003a80:	f7ff f98e 	bl	8002da0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a0e      	ldr	r2, [pc, #56]	@ (8003ac0 <HAL_UART_MspInit+0x1c8>)
 8003a88:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003a8a:	4a0d      	ldr	r2, [pc, #52]	@ (8003ac0 <HAL_UART_MspInit+0x1c8>)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003a90:	2200      	movs	r2, #0
 8003a92:	2100      	movs	r1, #0
 8003a94:	2026      	movs	r0, #38	@ 0x26
 8003a96:	f000 f99a 	bl	8003dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003a9a:	2026      	movs	r0, #38	@ 0x26
 8003a9c:	f000 f9b3 	bl	8003e06 <HAL_NVIC_EnableIRQ>
}
 8003aa0:	bf00      	nop
 8003aa2:	3728      	adds	r7, #40	@ 0x28
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	40013800 	.word	0x40013800
 8003aac:	40021000 	.word	0x40021000
 8003ab0:	40010800 	.word	0x40010800
 8003ab4:	200008e0 	.word	0x200008e0
 8003ab8:	40020058 	.word	0x40020058
 8003abc:	40004400 	.word	0x40004400
 8003ac0:	20000924 	.word	0x20000924
 8003ac4:	4002006c 	.word	0x4002006c

08003ac8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003ac8:	f7ff fe22 	bl	8003710 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003acc:	480b      	ldr	r0, [pc, #44]	@ (8003afc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003ace:	490c      	ldr	r1, [pc, #48]	@ (8003b00 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003ad0:	4a0c      	ldr	r2, [pc, #48]	@ (8003b04 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003ad2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ad4:	e002      	b.n	8003adc <LoopCopyDataInit>

08003ad6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ad6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ad8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ada:	3304      	adds	r3, #4

08003adc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003adc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ade:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ae0:	d3f9      	bcc.n	8003ad6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ae2:	4a09      	ldr	r2, [pc, #36]	@ (8003b08 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003ae4:	4c09      	ldr	r4, [pc, #36]	@ (8003b0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003ae6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ae8:	e001      	b.n	8003aee <LoopFillZerobss>

08003aea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003aea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003aec:	3204      	adds	r2, #4

08003aee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003aee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003af0:	d3fb      	bcc.n	8003aea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003af2:	f004 fe5d 	bl	80087b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003af6:	f7ff f8e4 	bl	8002cc2 <main>
  bx lr
 8003afa:	4770      	bx	lr
  ldr r0, =_sdata
 8003afc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b00:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8003b04:	0800b288 	.word	0x0800b288
  ldr r2, =_sbss
 8003b08:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8003b0c:	20000ab8 	.word	0x20000ab8

08003b10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003b10:	e7fe      	b.n	8003b10 <ADC1_2_IRQHandler>
	...

08003b14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b18:	4b08      	ldr	r3, [pc, #32]	@ (8003b3c <HAL_Init+0x28>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a07      	ldr	r2, [pc, #28]	@ (8003b3c <HAL_Init+0x28>)
 8003b1e:	f043 0310 	orr.w	r3, r3, #16
 8003b22:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b24:	2003      	movs	r0, #3
 8003b26:	f000 f947 	bl	8003db8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b2a:	200f      	movs	r0, #15
 8003b2c:	f000 f808 	bl	8003b40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b30:	f7ff fc9c 	bl	800346c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	40022000 	.word	0x40022000

08003b40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b48:	4b12      	ldr	r3, [pc, #72]	@ (8003b94 <HAL_InitTick+0x54>)
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	4b12      	ldr	r3, [pc, #72]	@ (8003b98 <HAL_InitTick+0x58>)
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	4619      	mov	r1, r3
 8003b52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b56:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f000 f95f 	bl	8003e22 <HAL_SYSTICK_Config>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d001      	beq.n	8003b6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e00e      	b.n	8003b8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2b0f      	cmp	r3, #15
 8003b72:	d80a      	bhi.n	8003b8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b74:	2200      	movs	r2, #0
 8003b76:	6879      	ldr	r1, [r7, #4]
 8003b78:	f04f 30ff 	mov.w	r0, #4294967295
 8003b7c:	f000 f927 	bl	8003dce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b80:	4a06      	ldr	r2, [pc, #24]	@ (8003b9c <HAL_InitTick+0x5c>)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b86:	2300      	movs	r3, #0
 8003b88:	e000      	b.n	8003b8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3708      	adds	r7, #8
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	20000008 	.word	0x20000008
 8003b98:	20000010 	.word	0x20000010
 8003b9c:	2000000c 	.word	0x2000000c

08003ba0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ba4:	4b05      	ldr	r3, [pc, #20]	@ (8003bbc <HAL_IncTick+0x1c>)
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	461a      	mov	r2, r3
 8003baa:	4b05      	ldr	r3, [pc, #20]	@ (8003bc0 <HAL_IncTick+0x20>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4413      	add	r3, r2
 8003bb0:	4a03      	ldr	r2, [pc, #12]	@ (8003bc0 <HAL_IncTick+0x20>)
 8003bb2:	6013      	str	r3, [r2, #0]
}
 8003bb4:	bf00      	nop
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bc80      	pop	{r7}
 8003bba:	4770      	bx	lr
 8003bbc:	20000010 	.word	0x20000010
 8003bc0:	20000968 	.word	0x20000968

08003bc4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	af00      	add	r7, sp, #0
  return uwTick;
 8003bc8:	4b02      	ldr	r3, [pc, #8]	@ (8003bd4 <HAL_GetTick+0x10>)
 8003bca:	681b      	ldr	r3, [r3, #0]
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bc80      	pop	{r7}
 8003bd2:	4770      	bx	lr
 8003bd4:	20000968 	.word	0x20000968

08003bd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003be0:	f7ff fff0 	bl	8003bc4 <HAL_GetTick>
 8003be4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bf0:	d005      	beq.n	8003bfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8003c1c <HAL_Delay+0x44>)
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003bfe:	bf00      	nop
 8003c00:	f7ff ffe0 	bl	8003bc4 <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d8f7      	bhi.n	8003c00 <HAL_Delay+0x28>
  {
  }
}
 8003c10:	bf00      	nop
 8003c12:	bf00      	nop
 8003c14:	3710      	adds	r7, #16
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	20000010 	.word	0x20000010

08003c20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b085      	sub	sp, #20
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f003 0307 	and.w	r3, r3, #7
 8003c2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c30:	4b0c      	ldr	r3, [pc, #48]	@ (8003c64 <__NVIC_SetPriorityGrouping+0x44>)
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c36:	68ba      	ldr	r2, [r7, #8]
 8003c38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003c4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c52:	4a04      	ldr	r2, [pc, #16]	@ (8003c64 <__NVIC_SetPriorityGrouping+0x44>)
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	60d3      	str	r3, [r2, #12]
}
 8003c58:	bf00      	nop
 8003c5a:	3714      	adds	r7, #20
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bc80      	pop	{r7}
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	e000ed00 	.word	0xe000ed00

08003c68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c6c:	4b04      	ldr	r3, [pc, #16]	@ (8003c80 <__NVIC_GetPriorityGrouping+0x18>)
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	0a1b      	lsrs	r3, r3, #8
 8003c72:	f003 0307 	and.w	r3, r3, #7
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bc80      	pop	{r7}
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	e000ed00 	.word	0xe000ed00

08003c84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	db0b      	blt.n	8003cae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c96:	79fb      	ldrb	r3, [r7, #7]
 8003c98:	f003 021f 	and.w	r2, r3, #31
 8003c9c:	4906      	ldr	r1, [pc, #24]	@ (8003cb8 <__NVIC_EnableIRQ+0x34>)
 8003c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ca2:	095b      	lsrs	r3, r3, #5
 8003ca4:	2001      	movs	r0, #1
 8003ca6:	fa00 f202 	lsl.w	r2, r0, r2
 8003caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003cae:	bf00      	nop
 8003cb0:	370c      	adds	r7, #12
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bc80      	pop	{r7}
 8003cb6:	4770      	bx	lr
 8003cb8:	e000e100 	.word	0xe000e100

08003cbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	6039      	str	r1, [r7, #0]
 8003cc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	db0a      	blt.n	8003ce6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	b2da      	uxtb	r2, r3
 8003cd4:	490c      	ldr	r1, [pc, #48]	@ (8003d08 <__NVIC_SetPriority+0x4c>)
 8003cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cda:	0112      	lsls	r2, r2, #4
 8003cdc:	b2d2      	uxtb	r2, r2
 8003cde:	440b      	add	r3, r1
 8003ce0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ce4:	e00a      	b.n	8003cfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	b2da      	uxtb	r2, r3
 8003cea:	4908      	ldr	r1, [pc, #32]	@ (8003d0c <__NVIC_SetPriority+0x50>)
 8003cec:	79fb      	ldrb	r3, [r7, #7]
 8003cee:	f003 030f 	and.w	r3, r3, #15
 8003cf2:	3b04      	subs	r3, #4
 8003cf4:	0112      	lsls	r2, r2, #4
 8003cf6:	b2d2      	uxtb	r2, r2
 8003cf8:	440b      	add	r3, r1
 8003cfa:	761a      	strb	r2, [r3, #24]
}
 8003cfc:	bf00      	nop
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bc80      	pop	{r7}
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	e000e100 	.word	0xe000e100
 8003d0c:	e000ed00 	.word	0xe000ed00

08003d10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b089      	sub	sp, #36	@ 0x24
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f003 0307 	and.w	r3, r3, #7
 8003d22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	f1c3 0307 	rsb	r3, r3, #7
 8003d2a:	2b04      	cmp	r3, #4
 8003d2c:	bf28      	it	cs
 8003d2e:	2304      	movcs	r3, #4
 8003d30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	3304      	adds	r3, #4
 8003d36:	2b06      	cmp	r3, #6
 8003d38:	d902      	bls.n	8003d40 <NVIC_EncodePriority+0x30>
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	3b03      	subs	r3, #3
 8003d3e:	e000      	b.n	8003d42 <NVIC_EncodePriority+0x32>
 8003d40:	2300      	movs	r3, #0
 8003d42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d44:	f04f 32ff 	mov.w	r2, #4294967295
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4e:	43da      	mvns	r2, r3
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	401a      	ands	r2, r3
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d58:	f04f 31ff 	mov.w	r1, #4294967295
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d62:	43d9      	mvns	r1, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d68:	4313      	orrs	r3, r2
         );
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3724      	adds	r7, #36	@ 0x24
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bc80      	pop	{r7}
 8003d72:	4770      	bx	lr

08003d74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d84:	d301      	bcc.n	8003d8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d86:	2301      	movs	r3, #1
 8003d88:	e00f      	b.n	8003daa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d8a:	4a0a      	ldr	r2, [pc, #40]	@ (8003db4 <SysTick_Config+0x40>)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d92:	210f      	movs	r1, #15
 8003d94:	f04f 30ff 	mov.w	r0, #4294967295
 8003d98:	f7ff ff90 	bl	8003cbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d9c:	4b05      	ldr	r3, [pc, #20]	@ (8003db4 <SysTick_Config+0x40>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003da2:	4b04      	ldr	r3, [pc, #16]	@ (8003db4 <SysTick_Config+0x40>)
 8003da4:	2207      	movs	r2, #7
 8003da6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3708      	adds	r7, #8
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	e000e010 	.word	0xe000e010

08003db8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f7ff ff2d 	bl	8003c20 <__NVIC_SetPriorityGrouping>
}
 8003dc6:	bf00      	nop
 8003dc8:	3708      	adds	r7, #8
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}

08003dce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003dce:	b580      	push	{r7, lr}
 8003dd0:	b086      	sub	sp, #24
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	60b9      	str	r1, [r7, #8]
 8003dd8:	607a      	str	r2, [r7, #4]
 8003dda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003de0:	f7ff ff42 	bl	8003c68 <__NVIC_GetPriorityGrouping>
 8003de4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	68b9      	ldr	r1, [r7, #8]
 8003dea:	6978      	ldr	r0, [r7, #20]
 8003dec:	f7ff ff90 	bl	8003d10 <NVIC_EncodePriority>
 8003df0:	4602      	mov	r2, r0
 8003df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003df6:	4611      	mov	r1, r2
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7ff ff5f 	bl	8003cbc <__NVIC_SetPriority>
}
 8003dfe:	bf00      	nop
 8003e00:	3718      	adds	r7, #24
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b082      	sub	sp, #8
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7ff ff35 	bl	8003c84 <__NVIC_EnableIRQ>
}
 8003e1a:	bf00      	nop
 8003e1c:	3708      	adds	r7, #8
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e22:	b580      	push	{r7, lr}
 8003e24:	b082      	sub	sp, #8
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f7ff ffa2 	bl	8003d74 <SysTick_Config>
 8003e30:	4603      	mov	r3, r0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3708      	adds	r7, #8
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
	...

08003e3c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003e44:	2300      	movs	r3, #0
 8003e46:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d101      	bne.n	8003e52 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e043      	b.n	8003eda <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	461a      	mov	r2, r3
 8003e58:	4b22      	ldr	r3, [pc, #136]	@ (8003ee4 <HAL_DMA_Init+0xa8>)
 8003e5a:	4413      	add	r3, r2
 8003e5c:	4a22      	ldr	r2, [pc, #136]	@ (8003ee8 <HAL_DMA_Init+0xac>)
 8003e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e62:	091b      	lsrs	r3, r3, #4
 8003e64:	009a      	lsls	r2, r3, #2
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a1f      	ldr	r2, [pc, #124]	@ (8003eec <HAL_DMA_Init+0xb0>)
 8003e6e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2202      	movs	r2, #2
 8003e74:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003e86:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003e8a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003e94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ea0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003eac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	69db      	ldr	r3, [r3, #28]
 8003eb2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003eb4:	68fa      	ldr	r2, [r7, #12]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3714      	adds	r7, #20
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bc80      	pop	{r7}
 8003ee2:	4770      	bx	lr
 8003ee4:	bffdfff8 	.word	0xbffdfff8
 8003ee8:	cccccccd 	.word	0xcccccccd
 8003eec:	40020000 	.word	0x40020000

08003ef0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b086      	sub	sp, #24
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	60b9      	str	r1, [r7, #8]
 8003efa:	607a      	str	r2, [r7, #4]
 8003efc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003efe:	2300      	movs	r3, #0
 8003f00:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d101      	bne.n	8003f10 <HAL_DMA_Start_IT+0x20>
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	e04b      	b.n	8003fa8 <HAL_DMA_Start_IT+0xb8>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d13a      	bne.n	8003f9a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2202      	movs	r2, #2
 8003f28:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f022 0201 	bic.w	r2, r2, #1
 8003f40:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	68b9      	ldr	r1, [r7, #8]
 8003f48:	68f8      	ldr	r0, [r7, #12]
 8003f4a:	f000 f9eb 	bl	8004324 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d008      	beq.n	8003f68 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f042 020e 	orr.w	r2, r2, #14
 8003f64:	601a      	str	r2, [r3, #0]
 8003f66:	e00f      	b.n	8003f88 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f022 0204 	bic.w	r2, r2, #4
 8003f76:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f042 020a 	orr.w	r2, r2, #10
 8003f86:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f042 0201 	orr.w	r2, r2, #1
 8003f96:	601a      	str	r2, [r3, #0]
 8003f98:	e005      	b.n	8003fa6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003fa2:	2302      	movs	r3, #2
 8003fa4:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003fa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3718      	adds	r7, #24
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b085      	sub	sp, #20
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d008      	beq.n	8003fda <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2204      	movs	r2, #4
 8003fcc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e020      	b.n	800401c <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f022 020e 	bic.w	r2, r2, #14
 8003fe8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f022 0201 	bic.w	r2, r2, #1
 8003ff8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004002:	2101      	movs	r1, #1
 8004004:	fa01 f202 	lsl.w	r2, r1, r2
 8004008:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2201      	movs	r2, #1
 800400e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800401a:	7bfb      	ldrb	r3, [r7, #15]
}
 800401c:	4618      	mov	r0, r3
 800401e:	3714      	adds	r7, #20
 8004020:	46bd      	mov	sp, r7
 8004022:	bc80      	pop	{r7}
 8004024:	4770      	bx	lr
	...

08004028 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004030:	2300      	movs	r3, #0
 8004032:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800403a:	b2db      	uxtb	r3, r3
 800403c:	2b02      	cmp	r3, #2
 800403e:	d005      	beq.n	800404c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2204      	movs	r2, #4
 8004044:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	73fb      	strb	r3, [r7, #15]
 800404a:	e051      	b.n	80040f0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f022 020e 	bic.w	r2, r2, #14
 800405a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f022 0201 	bic.w	r2, r2, #1
 800406a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a22      	ldr	r2, [pc, #136]	@ (80040fc <HAL_DMA_Abort_IT+0xd4>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d029      	beq.n	80040ca <HAL_DMA_Abort_IT+0xa2>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a21      	ldr	r2, [pc, #132]	@ (8004100 <HAL_DMA_Abort_IT+0xd8>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d022      	beq.n	80040c6 <HAL_DMA_Abort_IT+0x9e>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a1f      	ldr	r2, [pc, #124]	@ (8004104 <HAL_DMA_Abort_IT+0xdc>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d01a      	beq.n	80040c0 <HAL_DMA_Abort_IT+0x98>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a1e      	ldr	r2, [pc, #120]	@ (8004108 <HAL_DMA_Abort_IT+0xe0>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d012      	beq.n	80040ba <HAL_DMA_Abort_IT+0x92>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a1c      	ldr	r2, [pc, #112]	@ (800410c <HAL_DMA_Abort_IT+0xe4>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d00a      	beq.n	80040b4 <HAL_DMA_Abort_IT+0x8c>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a1b      	ldr	r2, [pc, #108]	@ (8004110 <HAL_DMA_Abort_IT+0xe8>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d102      	bne.n	80040ae <HAL_DMA_Abort_IT+0x86>
 80040a8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80040ac:	e00e      	b.n	80040cc <HAL_DMA_Abort_IT+0xa4>
 80040ae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80040b2:	e00b      	b.n	80040cc <HAL_DMA_Abort_IT+0xa4>
 80040b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80040b8:	e008      	b.n	80040cc <HAL_DMA_Abort_IT+0xa4>
 80040ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80040be:	e005      	b.n	80040cc <HAL_DMA_Abort_IT+0xa4>
 80040c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80040c4:	e002      	b.n	80040cc <HAL_DMA_Abort_IT+0xa4>
 80040c6:	2310      	movs	r3, #16
 80040c8:	e000      	b.n	80040cc <HAL_DMA_Abort_IT+0xa4>
 80040ca:	2301      	movs	r3, #1
 80040cc:	4a11      	ldr	r2, [pc, #68]	@ (8004114 <HAL_DMA_Abort_IT+0xec>)
 80040ce:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d003      	beq.n	80040f0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	4798      	blx	r3
    } 
  }
  return status;
 80040f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3710      	adds	r7, #16
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	40020008 	.word	0x40020008
 8004100:	4002001c 	.word	0x4002001c
 8004104:	40020030 	.word	0x40020030
 8004108:	40020044 	.word	0x40020044
 800410c:	40020058 	.word	0x40020058
 8004110:	4002006c 	.word	0x4002006c
 8004114:	40020000 	.word	0x40020000

08004118 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004134:	2204      	movs	r2, #4
 8004136:	409a      	lsls	r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	4013      	ands	r3, r2
 800413c:	2b00      	cmp	r3, #0
 800413e:	d04f      	beq.n	80041e0 <HAL_DMA_IRQHandler+0xc8>
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	f003 0304 	and.w	r3, r3, #4
 8004146:	2b00      	cmp	r3, #0
 8004148:	d04a      	beq.n	80041e0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0320 	and.w	r3, r3, #32
 8004154:	2b00      	cmp	r3, #0
 8004156:	d107      	bne.n	8004168 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f022 0204 	bic.w	r2, r2, #4
 8004166:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a66      	ldr	r2, [pc, #408]	@ (8004308 <HAL_DMA_IRQHandler+0x1f0>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d029      	beq.n	80041c6 <HAL_DMA_IRQHandler+0xae>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a65      	ldr	r2, [pc, #404]	@ (800430c <HAL_DMA_IRQHandler+0x1f4>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d022      	beq.n	80041c2 <HAL_DMA_IRQHandler+0xaa>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a63      	ldr	r2, [pc, #396]	@ (8004310 <HAL_DMA_IRQHandler+0x1f8>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d01a      	beq.n	80041bc <HAL_DMA_IRQHandler+0xa4>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a62      	ldr	r2, [pc, #392]	@ (8004314 <HAL_DMA_IRQHandler+0x1fc>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d012      	beq.n	80041b6 <HAL_DMA_IRQHandler+0x9e>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a60      	ldr	r2, [pc, #384]	@ (8004318 <HAL_DMA_IRQHandler+0x200>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d00a      	beq.n	80041b0 <HAL_DMA_IRQHandler+0x98>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a5f      	ldr	r2, [pc, #380]	@ (800431c <HAL_DMA_IRQHandler+0x204>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d102      	bne.n	80041aa <HAL_DMA_IRQHandler+0x92>
 80041a4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80041a8:	e00e      	b.n	80041c8 <HAL_DMA_IRQHandler+0xb0>
 80041aa:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80041ae:	e00b      	b.n	80041c8 <HAL_DMA_IRQHandler+0xb0>
 80041b0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80041b4:	e008      	b.n	80041c8 <HAL_DMA_IRQHandler+0xb0>
 80041b6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80041ba:	e005      	b.n	80041c8 <HAL_DMA_IRQHandler+0xb0>
 80041bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80041c0:	e002      	b.n	80041c8 <HAL_DMA_IRQHandler+0xb0>
 80041c2:	2340      	movs	r3, #64	@ 0x40
 80041c4:	e000      	b.n	80041c8 <HAL_DMA_IRQHandler+0xb0>
 80041c6:	2304      	movs	r3, #4
 80041c8:	4a55      	ldr	r2, [pc, #340]	@ (8004320 <HAL_DMA_IRQHandler+0x208>)
 80041ca:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	f000 8094 	beq.w	80042fe <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80041de:	e08e      	b.n	80042fe <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e4:	2202      	movs	r2, #2
 80041e6:	409a      	lsls	r2, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	4013      	ands	r3, r2
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d056      	beq.n	800429e <HAL_DMA_IRQHandler+0x186>
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	f003 0302 	and.w	r3, r3, #2
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d051      	beq.n	800429e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0320 	and.w	r3, r3, #32
 8004204:	2b00      	cmp	r3, #0
 8004206:	d10b      	bne.n	8004220 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 020a 	bic.w	r2, r2, #10
 8004216:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a38      	ldr	r2, [pc, #224]	@ (8004308 <HAL_DMA_IRQHandler+0x1f0>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d029      	beq.n	800427e <HAL_DMA_IRQHandler+0x166>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a37      	ldr	r2, [pc, #220]	@ (800430c <HAL_DMA_IRQHandler+0x1f4>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d022      	beq.n	800427a <HAL_DMA_IRQHandler+0x162>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a35      	ldr	r2, [pc, #212]	@ (8004310 <HAL_DMA_IRQHandler+0x1f8>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d01a      	beq.n	8004274 <HAL_DMA_IRQHandler+0x15c>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a34      	ldr	r2, [pc, #208]	@ (8004314 <HAL_DMA_IRQHandler+0x1fc>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d012      	beq.n	800426e <HAL_DMA_IRQHandler+0x156>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a32      	ldr	r2, [pc, #200]	@ (8004318 <HAL_DMA_IRQHandler+0x200>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d00a      	beq.n	8004268 <HAL_DMA_IRQHandler+0x150>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a31      	ldr	r2, [pc, #196]	@ (800431c <HAL_DMA_IRQHandler+0x204>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d102      	bne.n	8004262 <HAL_DMA_IRQHandler+0x14a>
 800425c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004260:	e00e      	b.n	8004280 <HAL_DMA_IRQHandler+0x168>
 8004262:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004266:	e00b      	b.n	8004280 <HAL_DMA_IRQHandler+0x168>
 8004268:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800426c:	e008      	b.n	8004280 <HAL_DMA_IRQHandler+0x168>
 800426e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004272:	e005      	b.n	8004280 <HAL_DMA_IRQHandler+0x168>
 8004274:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004278:	e002      	b.n	8004280 <HAL_DMA_IRQHandler+0x168>
 800427a:	2320      	movs	r3, #32
 800427c:	e000      	b.n	8004280 <HAL_DMA_IRQHandler+0x168>
 800427e:	2302      	movs	r3, #2
 8004280:	4a27      	ldr	r2, [pc, #156]	@ (8004320 <HAL_DMA_IRQHandler+0x208>)
 8004282:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004290:	2b00      	cmp	r3, #0
 8004292:	d034      	beq.n	80042fe <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800429c:	e02f      	b.n	80042fe <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a2:	2208      	movs	r2, #8
 80042a4:	409a      	lsls	r2, r3
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	4013      	ands	r3, r2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d028      	beq.n	8004300 <HAL_DMA_IRQHandler+0x1e8>
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	f003 0308 	and.w	r3, r3, #8
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d023      	beq.n	8004300 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f022 020e 	bic.w	r2, r2, #14
 80042c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042d0:	2101      	movs	r1, #1
 80042d2:	fa01 f202 	lsl.w	r2, r1, r2
 80042d6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d004      	beq.n	8004300 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	4798      	blx	r3
    }
  }
  return;
 80042fe:	bf00      	nop
 8004300:	bf00      	nop
}
 8004302:	3710      	adds	r7, #16
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	40020008 	.word	0x40020008
 800430c:	4002001c 	.word	0x4002001c
 8004310:	40020030 	.word	0x40020030
 8004314:	40020044 	.word	0x40020044
 8004318:	40020058 	.word	0x40020058
 800431c:	4002006c 	.word	0x4002006c
 8004320:	40020000 	.word	0x40020000

08004324 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004324:	b480      	push	{r7}
 8004326:	b085      	sub	sp, #20
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	607a      	str	r2, [r7, #4]
 8004330:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800433a:	2101      	movs	r1, #1
 800433c:	fa01 f202 	lsl.w	r2, r1, r2
 8004340:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	683a      	ldr	r2, [r7, #0]
 8004348:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	2b10      	cmp	r3, #16
 8004350:	d108      	bne.n	8004364 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68ba      	ldr	r2, [r7, #8]
 8004360:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004362:	e007      	b.n	8004374 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	68ba      	ldr	r2, [r7, #8]
 800436a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	60da      	str	r2, [r3, #12]
}
 8004374:	bf00      	nop
 8004376:	3714      	adds	r7, #20
 8004378:	46bd      	mov	sp, r7
 800437a:	bc80      	pop	{r7}
 800437c:	4770      	bx	lr
	...

08004380 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004380:	b480      	push	{r7}
 8004382:	b08b      	sub	sp, #44	@ 0x2c
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800438a:	2300      	movs	r3, #0
 800438c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800438e:	2300      	movs	r3, #0
 8004390:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004392:	e169      	b.n	8004668 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004394:	2201      	movs	r2, #1
 8004396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004398:	fa02 f303 	lsl.w	r3, r2, r3
 800439c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	69fa      	ldr	r2, [r7, #28]
 80043a4:	4013      	ands	r3, r2
 80043a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80043a8:	69ba      	ldr	r2, [r7, #24]
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	f040 8158 	bne.w	8004662 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	4a9a      	ldr	r2, [pc, #616]	@ (8004620 <HAL_GPIO_Init+0x2a0>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d05e      	beq.n	800447a <HAL_GPIO_Init+0xfa>
 80043bc:	4a98      	ldr	r2, [pc, #608]	@ (8004620 <HAL_GPIO_Init+0x2a0>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d875      	bhi.n	80044ae <HAL_GPIO_Init+0x12e>
 80043c2:	4a98      	ldr	r2, [pc, #608]	@ (8004624 <HAL_GPIO_Init+0x2a4>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d058      	beq.n	800447a <HAL_GPIO_Init+0xfa>
 80043c8:	4a96      	ldr	r2, [pc, #600]	@ (8004624 <HAL_GPIO_Init+0x2a4>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d86f      	bhi.n	80044ae <HAL_GPIO_Init+0x12e>
 80043ce:	4a96      	ldr	r2, [pc, #600]	@ (8004628 <HAL_GPIO_Init+0x2a8>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d052      	beq.n	800447a <HAL_GPIO_Init+0xfa>
 80043d4:	4a94      	ldr	r2, [pc, #592]	@ (8004628 <HAL_GPIO_Init+0x2a8>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d869      	bhi.n	80044ae <HAL_GPIO_Init+0x12e>
 80043da:	4a94      	ldr	r2, [pc, #592]	@ (800462c <HAL_GPIO_Init+0x2ac>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d04c      	beq.n	800447a <HAL_GPIO_Init+0xfa>
 80043e0:	4a92      	ldr	r2, [pc, #584]	@ (800462c <HAL_GPIO_Init+0x2ac>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d863      	bhi.n	80044ae <HAL_GPIO_Init+0x12e>
 80043e6:	4a92      	ldr	r2, [pc, #584]	@ (8004630 <HAL_GPIO_Init+0x2b0>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d046      	beq.n	800447a <HAL_GPIO_Init+0xfa>
 80043ec:	4a90      	ldr	r2, [pc, #576]	@ (8004630 <HAL_GPIO_Init+0x2b0>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d85d      	bhi.n	80044ae <HAL_GPIO_Init+0x12e>
 80043f2:	2b12      	cmp	r3, #18
 80043f4:	d82a      	bhi.n	800444c <HAL_GPIO_Init+0xcc>
 80043f6:	2b12      	cmp	r3, #18
 80043f8:	d859      	bhi.n	80044ae <HAL_GPIO_Init+0x12e>
 80043fa:	a201      	add	r2, pc, #4	@ (adr r2, 8004400 <HAL_GPIO_Init+0x80>)
 80043fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004400:	0800447b 	.word	0x0800447b
 8004404:	08004455 	.word	0x08004455
 8004408:	08004467 	.word	0x08004467
 800440c:	080044a9 	.word	0x080044a9
 8004410:	080044af 	.word	0x080044af
 8004414:	080044af 	.word	0x080044af
 8004418:	080044af 	.word	0x080044af
 800441c:	080044af 	.word	0x080044af
 8004420:	080044af 	.word	0x080044af
 8004424:	080044af 	.word	0x080044af
 8004428:	080044af 	.word	0x080044af
 800442c:	080044af 	.word	0x080044af
 8004430:	080044af 	.word	0x080044af
 8004434:	080044af 	.word	0x080044af
 8004438:	080044af 	.word	0x080044af
 800443c:	080044af 	.word	0x080044af
 8004440:	080044af 	.word	0x080044af
 8004444:	0800445d 	.word	0x0800445d
 8004448:	08004471 	.word	0x08004471
 800444c:	4a79      	ldr	r2, [pc, #484]	@ (8004634 <HAL_GPIO_Init+0x2b4>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d013      	beq.n	800447a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004452:	e02c      	b.n	80044ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	623b      	str	r3, [r7, #32]
          break;
 800445a:	e029      	b.n	80044b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	3304      	adds	r3, #4
 8004462:	623b      	str	r3, [r7, #32]
          break;
 8004464:	e024      	b.n	80044b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	3308      	adds	r3, #8
 800446c:	623b      	str	r3, [r7, #32]
          break;
 800446e:	e01f      	b.n	80044b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	330c      	adds	r3, #12
 8004476:	623b      	str	r3, [r7, #32]
          break;
 8004478:	e01a      	b.n	80044b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d102      	bne.n	8004488 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004482:	2304      	movs	r3, #4
 8004484:	623b      	str	r3, [r7, #32]
          break;
 8004486:	e013      	b.n	80044b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	2b01      	cmp	r3, #1
 800448e:	d105      	bne.n	800449c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004490:	2308      	movs	r3, #8
 8004492:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	69fa      	ldr	r2, [r7, #28]
 8004498:	611a      	str	r2, [r3, #16]
          break;
 800449a:	e009      	b.n	80044b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800449c:	2308      	movs	r3, #8
 800449e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	69fa      	ldr	r2, [r7, #28]
 80044a4:	615a      	str	r2, [r3, #20]
          break;
 80044a6:	e003      	b.n	80044b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80044a8:	2300      	movs	r3, #0
 80044aa:	623b      	str	r3, [r7, #32]
          break;
 80044ac:	e000      	b.n	80044b0 <HAL_GPIO_Init+0x130>
          break;
 80044ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	2bff      	cmp	r3, #255	@ 0xff
 80044b4:	d801      	bhi.n	80044ba <HAL_GPIO_Init+0x13a>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	e001      	b.n	80044be <HAL_GPIO_Init+0x13e>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	3304      	adds	r3, #4
 80044be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	2bff      	cmp	r3, #255	@ 0xff
 80044c4:	d802      	bhi.n	80044cc <HAL_GPIO_Init+0x14c>
 80044c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	e002      	b.n	80044d2 <HAL_GPIO_Init+0x152>
 80044cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ce:	3b08      	subs	r3, #8
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	210f      	movs	r1, #15
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	fa01 f303 	lsl.w	r3, r1, r3
 80044e0:	43db      	mvns	r3, r3
 80044e2:	401a      	ands	r2, r3
 80044e4:	6a39      	ldr	r1, [r7, #32]
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	fa01 f303 	lsl.w	r3, r1, r3
 80044ec:	431a      	orrs	r2, r3
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	f000 80b1 	beq.w	8004662 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004500:	4b4d      	ldr	r3, [pc, #308]	@ (8004638 <HAL_GPIO_Init+0x2b8>)
 8004502:	699b      	ldr	r3, [r3, #24]
 8004504:	4a4c      	ldr	r2, [pc, #304]	@ (8004638 <HAL_GPIO_Init+0x2b8>)
 8004506:	f043 0301 	orr.w	r3, r3, #1
 800450a:	6193      	str	r3, [r2, #24]
 800450c:	4b4a      	ldr	r3, [pc, #296]	@ (8004638 <HAL_GPIO_Init+0x2b8>)
 800450e:	699b      	ldr	r3, [r3, #24]
 8004510:	f003 0301 	and.w	r3, r3, #1
 8004514:	60bb      	str	r3, [r7, #8]
 8004516:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004518:	4a48      	ldr	r2, [pc, #288]	@ (800463c <HAL_GPIO_Init+0x2bc>)
 800451a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800451c:	089b      	lsrs	r3, r3, #2
 800451e:	3302      	adds	r3, #2
 8004520:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004524:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004528:	f003 0303 	and.w	r3, r3, #3
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	220f      	movs	r2, #15
 8004530:	fa02 f303 	lsl.w	r3, r2, r3
 8004534:	43db      	mvns	r3, r3
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	4013      	ands	r3, r2
 800453a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a40      	ldr	r2, [pc, #256]	@ (8004640 <HAL_GPIO_Init+0x2c0>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d013      	beq.n	800456c <HAL_GPIO_Init+0x1ec>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4a3f      	ldr	r2, [pc, #252]	@ (8004644 <HAL_GPIO_Init+0x2c4>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d00d      	beq.n	8004568 <HAL_GPIO_Init+0x1e8>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a3e      	ldr	r2, [pc, #248]	@ (8004648 <HAL_GPIO_Init+0x2c8>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d007      	beq.n	8004564 <HAL_GPIO_Init+0x1e4>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a3d      	ldr	r2, [pc, #244]	@ (800464c <HAL_GPIO_Init+0x2cc>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d101      	bne.n	8004560 <HAL_GPIO_Init+0x1e0>
 800455c:	2303      	movs	r3, #3
 800455e:	e006      	b.n	800456e <HAL_GPIO_Init+0x1ee>
 8004560:	2304      	movs	r3, #4
 8004562:	e004      	b.n	800456e <HAL_GPIO_Init+0x1ee>
 8004564:	2302      	movs	r3, #2
 8004566:	e002      	b.n	800456e <HAL_GPIO_Init+0x1ee>
 8004568:	2301      	movs	r3, #1
 800456a:	e000      	b.n	800456e <HAL_GPIO_Init+0x1ee>
 800456c:	2300      	movs	r3, #0
 800456e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004570:	f002 0203 	and.w	r2, r2, #3
 8004574:	0092      	lsls	r2, r2, #2
 8004576:	4093      	lsls	r3, r2
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	4313      	orrs	r3, r2
 800457c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800457e:	492f      	ldr	r1, [pc, #188]	@ (800463c <HAL_GPIO_Init+0x2bc>)
 8004580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004582:	089b      	lsrs	r3, r3, #2
 8004584:	3302      	adds	r3, #2
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004594:	2b00      	cmp	r3, #0
 8004596:	d006      	beq.n	80045a6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004598:	4b2d      	ldr	r3, [pc, #180]	@ (8004650 <HAL_GPIO_Init+0x2d0>)
 800459a:	689a      	ldr	r2, [r3, #8]
 800459c:	492c      	ldr	r1, [pc, #176]	@ (8004650 <HAL_GPIO_Init+0x2d0>)
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	608b      	str	r3, [r1, #8]
 80045a4:	e006      	b.n	80045b4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80045a6:	4b2a      	ldr	r3, [pc, #168]	@ (8004650 <HAL_GPIO_Init+0x2d0>)
 80045a8:	689a      	ldr	r2, [r3, #8]
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	43db      	mvns	r3, r3
 80045ae:	4928      	ldr	r1, [pc, #160]	@ (8004650 <HAL_GPIO_Init+0x2d0>)
 80045b0:	4013      	ands	r3, r2
 80045b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d006      	beq.n	80045ce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80045c0:	4b23      	ldr	r3, [pc, #140]	@ (8004650 <HAL_GPIO_Init+0x2d0>)
 80045c2:	68da      	ldr	r2, [r3, #12]
 80045c4:	4922      	ldr	r1, [pc, #136]	@ (8004650 <HAL_GPIO_Init+0x2d0>)
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	60cb      	str	r3, [r1, #12]
 80045cc:	e006      	b.n	80045dc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80045ce:	4b20      	ldr	r3, [pc, #128]	@ (8004650 <HAL_GPIO_Init+0x2d0>)
 80045d0:	68da      	ldr	r2, [r3, #12]
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	43db      	mvns	r3, r3
 80045d6:	491e      	ldr	r1, [pc, #120]	@ (8004650 <HAL_GPIO_Init+0x2d0>)
 80045d8:	4013      	ands	r3, r2
 80045da:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d006      	beq.n	80045f6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80045e8:	4b19      	ldr	r3, [pc, #100]	@ (8004650 <HAL_GPIO_Init+0x2d0>)
 80045ea:	685a      	ldr	r2, [r3, #4]
 80045ec:	4918      	ldr	r1, [pc, #96]	@ (8004650 <HAL_GPIO_Init+0x2d0>)
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	604b      	str	r3, [r1, #4]
 80045f4:	e006      	b.n	8004604 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80045f6:	4b16      	ldr	r3, [pc, #88]	@ (8004650 <HAL_GPIO_Init+0x2d0>)
 80045f8:	685a      	ldr	r2, [r3, #4]
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	43db      	mvns	r3, r3
 80045fe:	4914      	ldr	r1, [pc, #80]	@ (8004650 <HAL_GPIO_Init+0x2d0>)
 8004600:	4013      	ands	r3, r2
 8004602:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800460c:	2b00      	cmp	r3, #0
 800460e:	d021      	beq.n	8004654 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004610:	4b0f      	ldr	r3, [pc, #60]	@ (8004650 <HAL_GPIO_Init+0x2d0>)
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	490e      	ldr	r1, [pc, #56]	@ (8004650 <HAL_GPIO_Init+0x2d0>)
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	4313      	orrs	r3, r2
 800461a:	600b      	str	r3, [r1, #0]
 800461c:	e021      	b.n	8004662 <HAL_GPIO_Init+0x2e2>
 800461e:	bf00      	nop
 8004620:	10320000 	.word	0x10320000
 8004624:	10310000 	.word	0x10310000
 8004628:	10220000 	.word	0x10220000
 800462c:	10210000 	.word	0x10210000
 8004630:	10120000 	.word	0x10120000
 8004634:	10110000 	.word	0x10110000
 8004638:	40021000 	.word	0x40021000
 800463c:	40010000 	.word	0x40010000
 8004640:	40010800 	.word	0x40010800
 8004644:	40010c00 	.word	0x40010c00
 8004648:	40011000 	.word	0x40011000
 800464c:	40011400 	.word	0x40011400
 8004650:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004654:	4b0b      	ldr	r3, [pc, #44]	@ (8004684 <HAL_GPIO_Init+0x304>)
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	43db      	mvns	r3, r3
 800465c:	4909      	ldr	r1, [pc, #36]	@ (8004684 <HAL_GPIO_Init+0x304>)
 800465e:	4013      	ands	r3, r2
 8004660:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004664:	3301      	adds	r3, #1
 8004666:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800466e:	fa22 f303 	lsr.w	r3, r2, r3
 8004672:	2b00      	cmp	r3, #0
 8004674:	f47f ae8e 	bne.w	8004394 <HAL_GPIO_Init+0x14>
  }
}
 8004678:	bf00      	nop
 800467a:	bf00      	nop
 800467c:	372c      	adds	r7, #44	@ 0x2c
 800467e:	46bd      	mov	sp, r7
 8004680:	bc80      	pop	{r7}
 8004682:	4770      	bx	lr
 8004684:	40010400 	.word	0x40010400

08004688 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004688:	b480      	push	{r7}
 800468a:	b085      	sub	sp, #20
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	460b      	mov	r3, r1
 8004692:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	689a      	ldr	r2, [r3, #8]
 8004698:	887b      	ldrh	r3, [r7, #2]
 800469a:	4013      	ands	r3, r2
 800469c:	2b00      	cmp	r3, #0
 800469e:	d002      	beq.n	80046a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80046a0:	2301      	movs	r3, #1
 80046a2:	73fb      	strb	r3, [r7, #15]
 80046a4:	e001      	b.n	80046aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80046a6:	2300      	movs	r3, #0
 80046a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80046aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3714      	adds	r7, #20
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bc80      	pop	{r7}
 80046b4:	4770      	bx	lr

080046b6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046b6:	b480      	push	{r7}
 80046b8:	b083      	sub	sp, #12
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
 80046be:	460b      	mov	r3, r1
 80046c0:	807b      	strh	r3, [r7, #2]
 80046c2:	4613      	mov	r3, r2
 80046c4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80046c6:	787b      	ldrb	r3, [r7, #1]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d003      	beq.n	80046d4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80046cc:	887a      	ldrh	r2, [r7, #2]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80046d2:	e003      	b.n	80046dc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80046d4:	887b      	ldrh	r3, [r7, #2]
 80046d6:	041a      	lsls	r2, r3, #16
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	611a      	str	r2, [r3, #16]
}
 80046dc:	bf00      	nop
 80046de:	370c      	adds	r7, #12
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bc80      	pop	{r7}
 80046e4:	4770      	bx	lr
	...

080046e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d101      	bne.n	80046fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e12b      	b.n	8004952 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004700:	b2db      	uxtb	r3, r3
 8004702:	2b00      	cmp	r3, #0
 8004704:	d106      	bne.n	8004714 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f7fe fa28 	bl	8002b64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2224      	movs	r2, #36	@ 0x24
 8004718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f022 0201 	bic.w	r2, r2, #1
 800472a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800473a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800474a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800474c:	f001 fbfc 	bl	8005f48 <HAL_RCC_GetPCLK1Freq>
 8004750:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	4a81      	ldr	r2, [pc, #516]	@ (800495c <HAL_I2C_Init+0x274>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d807      	bhi.n	800476c <HAL_I2C_Init+0x84>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	4a80      	ldr	r2, [pc, #512]	@ (8004960 <HAL_I2C_Init+0x278>)
 8004760:	4293      	cmp	r3, r2
 8004762:	bf94      	ite	ls
 8004764:	2301      	movls	r3, #1
 8004766:	2300      	movhi	r3, #0
 8004768:	b2db      	uxtb	r3, r3
 800476a:	e006      	b.n	800477a <HAL_I2C_Init+0x92>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	4a7d      	ldr	r2, [pc, #500]	@ (8004964 <HAL_I2C_Init+0x27c>)
 8004770:	4293      	cmp	r3, r2
 8004772:	bf94      	ite	ls
 8004774:	2301      	movls	r3, #1
 8004776:	2300      	movhi	r3, #0
 8004778:	b2db      	uxtb	r3, r3
 800477a:	2b00      	cmp	r3, #0
 800477c:	d001      	beq.n	8004782 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e0e7      	b.n	8004952 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	4a78      	ldr	r2, [pc, #480]	@ (8004968 <HAL_I2C_Init+0x280>)
 8004786:	fba2 2303 	umull	r2, r3, r2, r3
 800478a:	0c9b      	lsrs	r3, r3, #18
 800478c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68ba      	ldr	r2, [r7, #8]
 800479e:	430a      	orrs	r2, r1
 80047a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	6a1b      	ldr	r3, [r3, #32]
 80047a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	4a6a      	ldr	r2, [pc, #424]	@ (800495c <HAL_I2C_Init+0x274>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d802      	bhi.n	80047bc <HAL_I2C_Init+0xd4>
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	3301      	adds	r3, #1
 80047ba:	e009      	b.n	80047d0 <HAL_I2C_Init+0xe8>
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80047c2:	fb02 f303 	mul.w	r3, r2, r3
 80047c6:	4a69      	ldr	r2, [pc, #420]	@ (800496c <HAL_I2C_Init+0x284>)
 80047c8:	fba2 2303 	umull	r2, r3, r2, r3
 80047cc:	099b      	lsrs	r3, r3, #6
 80047ce:	3301      	adds	r3, #1
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	6812      	ldr	r2, [r2, #0]
 80047d4:	430b      	orrs	r3, r1
 80047d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	69db      	ldr	r3, [r3, #28]
 80047de:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80047e2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	495c      	ldr	r1, [pc, #368]	@ (800495c <HAL_I2C_Init+0x274>)
 80047ec:	428b      	cmp	r3, r1
 80047ee:	d819      	bhi.n	8004824 <HAL_I2C_Init+0x13c>
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	1e59      	subs	r1, r3, #1
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	005b      	lsls	r3, r3, #1
 80047fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80047fe:	1c59      	adds	r1, r3, #1
 8004800:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004804:	400b      	ands	r3, r1
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00a      	beq.n	8004820 <HAL_I2C_Init+0x138>
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	1e59      	subs	r1, r3, #1
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	005b      	lsls	r3, r3, #1
 8004814:	fbb1 f3f3 	udiv	r3, r1, r3
 8004818:	3301      	adds	r3, #1
 800481a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800481e:	e051      	b.n	80048c4 <HAL_I2C_Init+0x1dc>
 8004820:	2304      	movs	r3, #4
 8004822:	e04f      	b.n	80048c4 <HAL_I2C_Init+0x1dc>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d111      	bne.n	8004850 <HAL_I2C_Init+0x168>
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	1e58      	subs	r0, r3, #1
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6859      	ldr	r1, [r3, #4]
 8004834:	460b      	mov	r3, r1
 8004836:	005b      	lsls	r3, r3, #1
 8004838:	440b      	add	r3, r1
 800483a:	fbb0 f3f3 	udiv	r3, r0, r3
 800483e:	3301      	adds	r3, #1
 8004840:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004844:	2b00      	cmp	r3, #0
 8004846:	bf0c      	ite	eq
 8004848:	2301      	moveq	r3, #1
 800484a:	2300      	movne	r3, #0
 800484c:	b2db      	uxtb	r3, r3
 800484e:	e012      	b.n	8004876 <HAL_I2C_Init+0x18e>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	1e58      	subs	r0, r3, #1
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6859      	ldr	r1, [r3, #4]
 8004858:	460b      	mov	r3, r1
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	440b      	add	r3, r1
 800485e:	0099      	lsls	r1, r3, #2
 8004860:	440b      	add	r3, r1
 8004862:	fbb0 f3f3 	udiv	r3, r0, r3
 8004866:	3301      	adds	r3, #1
 8004868:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800486c:	2b00      	cmp	r3, #0
 800486e:	bf0c      	ite	eq
 8004870:	2301      	moveq	r3, #1
 8004872:	2300      	movne	r3, #0
 8004874:	b2db      	uxtb	r3, r3
 8004876:	2b00      	cmp	r3, #0
 8004878:	d001      	beq.n	800487e <HAL_I2C_Init+0x196>
 800487a:	2301      	movs	r3, #1
 800487c:	e022      	b.n	80048c4 <HAL_I2C_Init+0x1dc>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d10e      	bne.n	80048a4 <HAL_I2C_Init+0x1bc>
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	1e58      	subs	r0, r3, #1
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6859      	ldr	r1, [r3, #4]
 800488e:	460b      	mov	r3, r1
 8004890:	005b      	lsls	r3, r3, #1
 8004892:	440b      	add	r3, r1
 8004894:	fbb0 f3f3 	udiv	r3, r0, r3
 8004898:	3301      	adds	r3, #1
 800489a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800489e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048a2:	e00f      	b.n	80048c4 <HAL_I2C_Init+0x1dc>
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	1e58      	subs	r0, r3, #1
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6859      	ldr	r1, [r3, #4]
 80048ac:	460b      	mov	r3, r1
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	440b      	add	r3, r1
 80048b2:	0099      	lsls	r1, r3, #2
 80048b4:	440b      	add	r3, r1
 80048b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80048ba:	3301      	adds	r3, #1
 80048bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80048c4:	6879      	ldr	r1, [r7, #4]
 80048c6:	6809      	ldr	r1, [r1, #0]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	69da      	ldr	r2, [r3, #28]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a1b      	ldr	r3, [r3, #32]
 80048de:	431a      	orrs	r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	430a      	orrs	r2, r1
 80048e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80048f2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	6911      	ldr	r1, [r2, #16]
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	68d2      	ldr	r2, [r2, #12]
 80048fe:	4311      	orrs	r1, r2
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	6812      	ldr	r2, [r2, #0]
 8004904:	430b      	orrs	r3, r1
 8004906:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	695a      	ldr	r2, [r3, #20]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	431a      	orrs	r2, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	430a      	orrs	r2, r1
 8004922:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f042 0201 	orr.w	r2, r2, #1
 8004932:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2220      	movs	r2, #32
 800493e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004950:	2300      	movs	r3, #0
}
 8004952:	4618      	mov	r0, r3
 8004954:	3710      	adds	r7, #16
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	000186a0 	.word	0x000186a0
 8004960:	001e847f 	.word	0x001e847f
 8004964:	003d08ff 	.word	0x003d08ff
 8004968:	431bde83 	.word	0x431bde83
 800496c:	10624dd3 	.word	0x10624dd3

08004970 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b088      	sub	sp, #32
 8004974:	af02      	add	r7, sp, #8
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	4608      	mov	r0, r1
 800497a:	4611      	mov	r1, r2
 800497c:	461a      	mov	r2, r3
 800497e:	4603      	mov	r3, r0
 8004980:	817b      	strh	r3, [r7, #10]
 8004982:	460b      	mov	r3, r1
 8004984:	813b      	strh	r3, [r7, #8]
 8004986:	4613      	mov	r3, r2
 8004988:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800498a:	f7ff f91b 	bl	8003bc4 <HAL_GetTick>
 800498e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004996:	b2db      	uxtb	r3, r3
 8004998:	2b20      	cmp	r3, #32
 800499a:	f040 80d9 	bne.w	8004b50 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	9300      	str	r3, [sp, #0]
 80049a2:	2319      	movs	r3, #25
 80049a4:	2201      	movs	r2, #1
 80049a6:	496d      	ldr	r1, [pc, #436]	@ (8004b5c <HAL_I2C_Mem_Write+0x1ec>)
 80049a8:	68f8      	ldr	r0, [r7, #12]
 80049aa:	f000 fccd 	bl	8005348 <I2C_WaitOnFlagUntilTimeout>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d001      	beq.n	80049b8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80049b4:	2302      	movs	r3, #2
 80049b6:	e0cc      	b.n	8004b52 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d101      	bne.n	80049c6 <HAL_I2C_Mem_Write+0x56>
 80049c2:	2302      	movs	r3, #2
 80049c4:	e0c5      	b.n	8004b52 <HAL_I2C_Mem_Write+0x1e2>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2201      	movs	r2, #1
 80049ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0301 	and.w	r3, r3, #1
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d007      	beq.n	80049ec <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f042 0201 	orr.w	r2, r2, #1
 80049ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80049fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2221      	movs	r2, #33	@ 0x21
 8004a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2240      	movs	r2, #64	@ 0x40
 8004a08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6a3a      	ldr	r2, [r7, #32]
 8004a16:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004a1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a22:	b29a      	uxth	r2, r3
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	4a4d      	ldr	r2, [pc, #308]	@ (8004b60 <HAL_I2C_Mem_Write+0x1f0>)
 8004a2c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a2e:	88f8      	ldrh	r0, [r7, #6]
 8004a30:	893a      	ldrh	r2, [r7, #8]
 8004a32:	8979      	ldrh	r1, [r7, #10]
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	9301      	str	r3, [sp, #4]
 8004a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a3a:	9300      	str	r3, [sp, #0]
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	68f8      	ldr	r0, [r7, #12]
 8004a40:	f000 fb04 	bl	800504c <I2C_RequestMemoryWrite>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d052      	beq.n	8004af0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e081      	b.n	8004b52 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a4e:	697a      	ldr	r2, [r7, #20]
 8004a50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a52:	68f8      	ldr	r0, [r7, #12]
 8004a54:	f000 fd92 	bl	800557c <I2C_WaitOnTXEFlagUntilTimeout>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00d      	beq.n	8004a7a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a62:	2b04      	cmp	r3, #4
 8004a64:	d107      	bne.n	8004a76 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a74:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e06b      	b.n	8004b52 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a7e:	781a      	ldrb	r2, [r3, #0]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a8a:	1c5a      	adds	r2, r3, #1
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a94:	3b01      	subs	r3, #1
 8004a96:	b29a      	uxth	r2, r3
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	3b01      	subs	r3, #1
 8004aa4:	b29a      	uxth	r2, r3
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	695b      	ldr	r3, [r3, #20]
 8004ab0:	f003 0304 	and.w	r3, r3, #4
 8004ab4:	2b04      	cmp	r3, #4
 8004ab6:	d11b      	bne.n	8004af0 <HAL_I2C_Mem_Write+0x180>
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d017      	beq.n	8004af0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac4:	781a      	ldrb	r2, [r3, #0]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ad0:	1c5a      	adds	r2, r3, #1
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ada:	3b01      	subs	r3, #1
 8004adc:	b29a      	uxth	r2, r3
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	b29a      	uxth	r2, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1aa      	bne.n	8004a4e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004af8:	697a      	ldr	r2, [r7, #20]
 8004afa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004afc:	68f8      	ldr	r0, [r7, #12]
 8004afe:	f000 fd85 	bl	800560c <I2C_WaitOnBTFFlagUntilTimeout>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d00d      	beq.n	8004b24 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b0c:	2b04      	cmp	r3, #4
 8004b0e:	d107      	bne.n	8004b20 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b1e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e016      	b.n	8004b52 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2220      	movs	r2, #32
 8004b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	e000      	b.n	8004b52 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004b50:	2302      	movs	r3, #2
  }
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3718      	adds	r7, #24
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	00100002 	.word	0x00100002
 8004b60:	ffff0000 	.word	0xffff0000

08004b64 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b08c      	sub	sp, #48	@ 0x30
 8004b68:	af02      	add	r7, sp, #8
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	4608      	mov	r0, r1
 8004b6e:	4611      	mov	r1, r2
 8004b70:	461a      	mov	r2, r3
 8004b72:	4603      	mov	r3, r0
 8004b74:	817b      	strh	r3, [r7, #10]
 8004b76:	460b      	mov	r3, r1
 8004b78:	813b      	strh	r3, [r7, #8]
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b82:	f7ff f81f 	bl	8003bc4 <HAL_GetTick>
 8004b86:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	2b20      	cmp	r3, #32
 8004b92:	f040 8250 	bne.w	8005036 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b98:	9300      	str	r3, [sp, #0]
 8004b9a:	2319      	movs	r3, #25
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	4982      	ldr	r1, [pc, #520]	@ (8004da8 <HAL_I2C_Mem_Read+0x244>)
 8004ba0:	68f8      	ldr	r0, [r7, #12]
 8004ba2:	f000 fbd1 	bl	8005348 <I2C_WaitOnFlagUntilTimeout>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d001      	beq.n	8004bb0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004bac:	2302      	movs	r3, #2
 8004bae:	e243      	b.n	8005038 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d101      	bne.n	8004bbe <HAL_I2C_Mem_Read+0x5a>
 8004bba:	2302      	movs	r3, #2
 8004bbc:	e23c      	b.n	8005038 <HAL_I2C_Mem_Read+0x4d4>
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0301 	and.w	r3, r3, #1
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d007      	beq.n	8004be4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f042 0201 	orr.w	r2, r2, #1
 8004be2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004bf2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2222      	movs	r2, #34	@ 0x22
 8004bf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2240      	movs	r2, #64	@ 0x40
 8004c00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2200      	movs	r2, #0
 8004c08:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c0e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004c14:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c1a:	b29a      	uxth	r2, r3
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	4a62      	ldr	r2, [pc, #392]	@ (8004dac <HAL_I2C_Mem_Read+0x248>)
 8004c24:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c26:	88f8      	ldrh	r0, [r7, #6]
 8004c28:	893a      	ldrh	r2, [r7, #8]
 8004c2a:	8979      	ldrh	r1, [r7, #10]
 8004c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c2e:	9301      	str	r3, [sp, #4]
 8004c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c32:	9300      	str	r3, [sp, #0]
 8004c34:	4603      	mov	r3, r0
 8004c36:	68f8      	ldr	r0, [r7, #12]
 8004c38:	f000 fa9e 	bl	8005178 <I2C_RequestMemoryRead>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d001      	beq.n	8004c46 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e1f8      	b.n	8005038 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d113      	bne.n	8004c76 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c4e:	2300      	movs	r3, #0
 8004c50:	61fb      	str	r3, [r7, #28]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	695b      	ldr	r3, [r3, #20]
 8004c58:	61fb      	str	r3, [r7, #28]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	699b      	ldr	r3, [r3, #24]
 8004c60:	61fb      	str	r3, [r7, #28]
 8004c62:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c72:	601a      	str	r2, [r3, #0]
 8004c74:	e1cc      	b.n	8005010 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d11e      	bne.n	8004cbc <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c8c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004c8e:	b672      	cpsid	i
}
 8004c90:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c92:	2300      	movs	r3, #0
 8004c94:	61bb      	str	r3, [r7, #24]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	695b      	ldr	r3, [r3, #20]
 8004c9c:	61bb      	str	r3, [r7, #24]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	699b      	ldr	r3, [r3, #24]
 8004ca4:	61bb      	str	r3, [r7, #24]
 8004ca6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cb6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004cb8:	b662      	cpsie	i
}
 8004cba:	e035      	b.n	8004d28 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cc0:	2b02      	cmp	r3, #2
 8004cc2:	d11e      	bne.n	8004d02 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004cd2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004cd4:	b672      	cpsid	i
}
 8004cd6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cd8:	2300      	movs	r3, #0
 8004cda:	617b      	str	r3, [r7, #20]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	695b      	ldr	r3, [r3, #20]
 8004ce2:	617b      	str	r3, [r7, #20]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	699b      	ldr	r3, [r3, #24]
 8004cea:	617b      	str	r3, [r7, #20]
 8004cec:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004cfc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004cfe:	b662      	cpsie	i
}
 8004d00:	e012      	b.n	8004d28 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004d10:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d12:	2300      	movs	r3, #0
 8004d14:	613b      	str	r3, [r7, #16]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	695b      	ldr	r3, [r3, #20]
 8004d1c:	613b      	str	r3, [r7, #16]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	699b      	ldr	r3, [r3, #24]
 8004d24:	613b      	str	r3, [r7, #16]
 8004d26:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004d28:	e172      	b.n	8005010 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d2e:	2b03      	cmp	r3, #3
 8004d30:	f200 811f 	bhi.w	8004f72 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d123      	bne.n	8004d84 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d3e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004d40:	68f8      	ldr	r0, [r7, #12]
 8004d42:	f000 fcab 	bl	800569c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004d46:	4603      	mov	r3, r0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d001      	beq.n	8004d50 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e173      	b.n	8005038 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	691a      	ldr	r2, [r3, #16]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d5a:	b2d2      	uxtb	r2, r2
 8004d5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d62:	1c5a      	adds	r2, r3, #1
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d6c:	3b01      	subs	r3, #1
 8004d6e:	b29a      	uxth	r2, r3
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	b29a      	uxth	r2, r3
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004d82:	e145      	b.n	8005010 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	d152      	bne.n	8004e32 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d8e:	9300      	str	r3, [sp, #0]
 8004d90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d92:	2200      	movs	r2, #0
 8004d94:	4906      	ldr	r1, [pc, #24]	@ (8004db0 <HAL_I2C_Mem_Read+0x24c>)
 8004d96:	68f8      	ldr	r0, [r7, #12]
 8004d98:	f000 fad6 	bl	8005348 <I2C_WaitOnFlagUntilTimeout>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d008      	beq.n	8004db4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e148      	b.n	8005038 <HAL_I2C_Mem_Read+0x4d4>
 8004da6:	bf00      	nop
 8004da8:	00100002 	.word	0x00100002
 8004dac:	ffff0000 	.word	0xffff0000
 8004db0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004db4:	b672      	cpsid	i
}
 8004db6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004dc6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	691a      	ldr	r2, [r3, #16]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dd2:	b2d2      	uxtb	r2, r2
 8004dd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dda:	1c5a      	adds	r2, r3, #1
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004de4:	3b01      	subs	r3, #1
 8004de6:	b29a      	uxth	r2, r3
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	3b01      	subs	r3, #1
 8004df4:	b29a      	uxth	r2, r3
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004dfa:	b662      	cpsie	i
}
 8004dfc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	691a      	ldr	r2, [r3, #16]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e08:	b2d2      	uxtb	r2, r2
 8004e0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e10:	1c5a      	adds	r2, r3, #1
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	b29a      	uxth	r2, r3
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	3b01      	subs	r3, #1
 8004e2a:	b29a      	uxth	r2, r3
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004e30:	e0ee      	b.n	8005010 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e34:	9300      	str	r3, [sp, #0]
 8004e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e38:	2200      	movs	r2, #0
 8004e3a:	4981      	ldr	r1, [pc, #516]	@ (8005040 <HAL_I2C_Mem_Read+0x4dc>)
 8004e3c:	68f8      	ldr	r0, [r7, #12]
 8004e3e:	f000 fa83 	bl	8005348 <I2C_WaitOnFlagUntilTimeout>
 8004e42:	4603      	mov	r3, r0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d001      	beq.n	8004e4c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e0f5      	b.n	8005038 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e5a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004e5c:	b672      	cpsid	i
}
 8004e5e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	691a      	ldr	r2, [r3, #16]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e6a:	b2d2      	uxtb	r2, r2
 8004e6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e72:	1c5a      	adds	r2, r3, #1
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e7c:	3b01      	subs	r3, #1
 8004e7e:	b29a      	uxth	r2, r3
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	b29a      	uxth	r2, r3
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004e92:	4b6c      	ldr	r3, [pc, #432]	@ (8005044 <HAL_I2C_Mem_Read+0x4e0>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	08db      	lsrs	r3, r3, #3
 8004e98:	4a6b      	ldr	r2, [pc, #428]	@ (8005048 <HAL_I2C_Mem_Read+0x4e4>)
 8004e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e9e:	0a1a      	lsrs	r2, r3, #8
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	4413      	add	r3, r2
 8004ea6:	00da      	lsls	r2, r3, #3
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004eac:	6a3b      	ldr	r3, [r7, #32]
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004eb2:	6a3b      	ldr	r3, [r7, #32]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d118      	bne.n	8004eea <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2220      	movs	r2, #32
 8004ec2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ed2:	f043 0220 	orr.w	r2, r3, #32
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004eda:	b662      	cpsie	i
}
 8004edc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e0a6      	b.n	8005038 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	695b      	ldr	r3, [r3, #20]
 8004ef0:	f003 0304 	and.w	r3, r3, #4
 8004ef4:	2b04      	cmp	r3, #4
 8004ef6:	d1d9      	bne.n	8004eac <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	691a      	ldr	r2, [r3, #16]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f12:	b2d2      	uxtb	r2, r2
 8004f14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f1a:	1c5a      	adds	r2, r3, #1
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f24:	3b01      	subs	r3, #1
 8004f26:	b29a      	uxth	r2, r3
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	3b01      	subs	r3, #1
 8004f34:	b29a      	uxth	r2, r3
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004f3a:	b662      	cpsie	i
}
 8004f3c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	691a      	ldr	r2, [r3, #16]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f48:	b2d2      	uxtb	r2, r2
 8004f4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f50:	1c5a      	adds	r2, r3, #1
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f5a:	3b01      	subs	r3, #1
 8004f5c:	b29a      	uxth	r2, r3
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	3b01      	subs	r3, #1
 8004f6a:	b29a      	uxth	r2, r3
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004f70:	e04e      	b.n	8005010 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f74:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004f76:	68f8      	ldr	r0, [r7, #12]
 8004f78:	f000 fb90 	bl	800569c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d001      	beq.n	8004f86 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e058      	b.n	8005038 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	691a      	ldr	r2, [r3, #16]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f90:	b2d2      	uxtb	r2, r2
 8004f92:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f98:	1c5a      	adds	r2, r3, #1
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fa2:	3b01      	subs	r3, #1
 8004fa4:	b29a      	uxth	r2, r3
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	3b01      	subs	r3, #1
 8004fb2:	b29a      	uxth	r2, r3
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	695b      	ldr	r3, [r3, #20]
 8004fbe:	f003 0304 	and.w	r3, r3, #4
 8004fc2:	2b04      	cmp	r3, #4
 8004fc4:	d124      	bne.n	8005010 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fca:	2b03      	cmp	r3, #3
 8004fcc:	d107      	bne.n	8004fde <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004fdc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	691a      	ldr	r2, [r3, #16]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe8:	b2d2      	uxtb	r2, r2
 8004fea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff0:	1c5a      	adds	r2, r3, #1
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	b29a      	uxth	r2, r3
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005006:	b29b      	uxth	r3, r3
 8005008:	3b01      	subs	r3, #1
 800500a:	b29a      	uxth	r2, r3
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005014:	2b00      	cmp	r3, #0
 8005016:	f47f ae88 	bne.w	8004d2a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2220      	movs	r2, #32
 800501e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2200      	movs	r2, #0
 800502e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005032:	2300      	movs	r3, #0
 8005034:	e000      	b.n	8005038 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8005036:	2302      	movs	r3, #2
  }
}
 8005038:	4618      	mov	r0, r3
 800503a:	3728      	adds	r7, #40	@ 0x28
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}
 8005040:	00010004 	.word	0x00010004
 8005044:	20000008 	.word	0x20000008
 8005048:	14f8b589 	.word	0x14f8b589

0800504c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b088      	sub	sp, #32
 8005050:	af02      	add	r7, sp, #8
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	4608      	mov	r0, r1
 8005056:	4611      	mov	r1, r2
 8005058:	461a      	mov	r2, r3
 800505a:	4603      	mov	r3, r0
 800505c:	817b      	strh	r3, [r7, #10]
 800505e:	460b      	mov	r3, r1
 8005060:	813b      	strh	r3, [r7, #8]
 8005062:	4613      	mov	r3, r2
 8005064:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005074:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005078:	9300      	str	r3, [sp, #0]
 800507a:	6a3b      	ldr	r3, [r7, #32]
 800507c:	2200      	movs	r2, #0
 800507e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005082:	68f8      	ldr	r0, [r7, #12]
 8005084:	f000 f960 	bl	8005348 <I2C_WaitOnFlagUntilTimeout>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d00d      	beq.n	80050aa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005098:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800509c:	d103      	bne.n	80050a6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80050a4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e05f      	b.n	800516a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80050aa:	897b      	ldrh	r3, [r7, #10]
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	461a      	mov	r2, r3
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80050b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050bc:	6a3a      	ldr	r2, [r7, #32]
 80050be:	492d      	ldr	r1, [pc, #180]	@ (8005174 <I2C_RequestMemoryWrite+0x128>)
 80050c0:	68f8      	ldr	r0, [r7, #12]
 80050c2:	f000 f9bb 	bl	800543c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d001      	beq.n	80050d0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e04c      	b.n	800516a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050d0:	2300      	movs	r3, #0
 80050d2:	617b      	str	r3, [r7, #20]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	695b      	ldr	r3, [r3, #20]
 80050da:	617b      	str	r3, [r7, #20]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	699b      	ldr	r3, [r3, #24]
 80050e2:	617b      	str	r3, [r7, #20]
 80050e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050e8:	6a39      	ldr	r1, [r7, #32]
 80050ea:	68f8      	ldr	r0, [r7, #12]
 80050ec:	f000 fa46 	bl	800557c <I2C_WaitOnTXEFlagUntilTimeout>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d00d      	beq.n	8005112 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050fa:	2b04      	cmp	r3, #4
 80050fc:	d107      	bne.n	800510e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800510c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e02b      	b.n	800516a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005112:	88fb      	ldrh	r3, [r7, #6]
 8005114:	2b01      	cmp	r3, #1
 8005116:	d105      	bne.n	8005124 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005118:	893b      	ldrh	r3, [r7, #8]
 800511a:	b2da      	uxtb	r2, r3
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	611a      	str	r2, [r3, #16]
 8005122:	e021      	b.n	8005168 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005124:	893b      	ldrh	r3, [r7, #8]
 8005126:	0a1b      	lsrs	r3, r3, #8
 8005128:	b29b      	uxth	r3, r3
 800512a:	b2da      	uxtb	r2, r3
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005132:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005134:	6a39      	ldr	r1, [r7, #32]
 8005136:	68f8      	ldr	r0, [r7, #12]
 8005138:	f000 fa20 	bl	800557c <I2C_WaitOnTXEFlagUntilTimeout>
 800513c:	4603      	mov	r3, r0
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00d      	beq.n	800515e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005146:	2b04      	cmp	r3, #4
 8005148:	d107      	bne.n	800515a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005158:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e005      	b.n	800516a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800515e:	893b      	ldrh	r3, [r7, #8]
 8005160:	b2da      	uxtb	r2, r3
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	3718      	adds	r7, #24
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
 8005172:	bf00      	nop
 8005174:	00010002 	.word	0x00010002

08005178 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b088      	sub	sp, #32
 800517c:	af02      	add	r7, sp, #8
 800517e:	60f8      	str	r0, [r7, #12]
 8005180:	4608      	mov	r0, r1
 8005182:	4611      	mov	r1, r2
 8005184:	461a      	mov	r2, r3
 8005186:	4603      	mov	r3, r0
 8005188:	817b      	strh	r3, [r7, #10]
 800518a:	460b      	mov	r3, r1
 800518c:	813b      	strh	r3, [r7, #8]
 800518e:	4613      	mov	r3, r2
 8005190:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80051a0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80051b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b4:	9300      	str	r3, [sp, #0]
 80051b6:	6a3b      	ldr	r3, [r7, #32]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80051be:	68f8      	ldr	r0, [r7, #12]
 80051c0:	f000 f8c2 	bl	8005348 <I2C_WaitOnFlagUntilTimeout>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d00d      	beq.n	80051e6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051d8:	d103      	bne.n	80051e2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80051e0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	e0aa      	b.n	800533c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80051e6:	897b      	ldrh	r3, [r7, #10]
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	461a      	mov	r2, r3
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80051f4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f8:	6a3a      	ldr	r2, [r7, #32]
 80051fa:	4952      	ldr	r1, [pc, #328]	@ (8005344 <I2C_RequestMemoryRead+0x1cc>)
 80051fc:	68f8      	ldr	r0, [r7, #12]
 80051fe:	f000 f91d 	bl	800543c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005202:	4603      	mov	r3, r0
 8005204:	2b00      	cmp	r3, #0
 8005206:	d001      	beq.n	800520c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e097      	b.n	800533c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800520c:	2300      	movs	r3, #0
 800520e:	617b      	str	r3, [r7, #20]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	695b      	ldr	r3, [r3, #20]
 8005216:	617b      	str	r3, [r7, #20]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	699b      	ldr	r3, [r3, #24]
 800521e:	617b      	str	r3, [r7, #20]
 8005220:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005222:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005224:	6a39      	ldr	r1, [r7, #32]
 8005226:	68f8      	ldr	r0, [r7, #12]
 8005228:	f000 f9a8 	bl	800557c <I2C_WaitOnTXEFlagUntilTimeout>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00d      	beq.n	800524e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005236:	2b04      	cmp	r3, #4
 8005238:	d107      	bne.n	800524a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005248:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e076      	b.n	800533c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800524e:	88fb      	ldrh	r3, [r7, #6]
 8005250:	2b01      	cmp	r3, #1
 8005252:	d105      	bne.n	8005260 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005254:	893b      	ldrh	r3, [r7, #8]
 8005256:	b2da      	uxtb	r2, r3
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	611a      	str	r2, [r3, #16]
 800525e:	e021      	b.n	80052a4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005260:	893b      	ldrh	r3, [r7, #8]
 8005262:	0a1b      	lsrs	r3, r3, #8
 8005264:	b29b      	uxth	r3, r3
 8005266:	b2da      	uxtb	r2, r3
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800526e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005270:	6a39      	ldr	r1, [r7, #32]
 8005272:	68f8      	ldr	r0, [r7, #12]
 8005274:	f000 f982 	bl	800557c <I2C_WaitOnTXEFlagUntilTimeout>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00d      	beq.n	800529a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005282:	2b04      	cmp	r3, #4
 8005284:	d107      	bne.n	8005296 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005294:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e050      	b.n	800533c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800529a:	893b      	ldrh	r3, [r7, #8]
 800529c:	b2da      	uxtb	r2, r3
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052a6:	6a39      	ldr	r1, [r7, #32]
 80052a8:	68f8      	ldr	r0, [r7, #12]
 80052aa:	f000 f967 	bl	800557c <I2C_WaitOnTXEFlagUntilTimeout>
 80052ae:	4603      	mov	r3, r0
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d00d      	beq.n	80052d0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052b8:	2b04      	cmp	r3, #4
 80052ba:	d107      	bne.n	80052cc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052ca:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e035      	b.n	800533c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80052de:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e2:	9300      	str	r3, [sp, #0]
 80052e4:	6a3b      	ldr	r3, [r7, #32]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80052ec:	68f8      	ldr	r0, [r7, #12]
 80052ee:	f000 f82b 	bl	8005348 <I2C_WaitOnFlagUntilTimeout>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d00d      	beq.n	8005314 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005302:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005306:	d103      	bne.n	8005310 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800530e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005310:	2303      	movs	r3, #3
 8005312:	e013      	b.n	800533c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005314:	897b      	ldrh	r3, [r7, #10]
 8005316:	b2db      	uxtb	r3, r3
 8005318:	f043 0301 	orr.w	r3, r3, #1
 800531c:	b2da      	uxtb	r2, r3
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005326:	6a3a      	ldr	r2, [r7, #32]
 8005328:	4906      	ldr	r1, [pc, #24]	@ (8005344 <I2C_RequestMemoryRead+0x1cc>)
 800532a:	68f8      	ldr	r0, [r7, #12]
 800532c:	f000 f886 	bl	800543c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005330:	4603      	mov	r3, r0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d001      	beq.n	800533a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	e000      	b.n	800533c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800533a:	2300      	movs	r3, #0
}
 800533c:	4618      	mov	r0, r3
 800533e:	3718      	adds	r7, #24
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}
 8005344:	00010002 	.word	0x00010002

08005348 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	603b      	str	r3, [r7, #0]
 8005354:	4613      	mov	r3, r2
 8005356:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005358:	e048      	b.n	80053ec <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005360:	d044      	beq.n	80053ec <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005362:	f7fe fc2f 	bl	8003bc4 <HAL_GetTick>
 8005366:	4602      	mov	r2, r0
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	683a      	ldr	r2, [r7, #0]
 800536e:	429a      	cmp	r2, r3
 8005370:	d302      	bcc.n	8005378 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d139      	bne.n	80053ec <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	0c1b      	lsrs	r3, r3, #16
 800537c:	b2db      	uxtb	r3, r3
 800537e:	2b01      	cmp	r3, #1
 8005380:	d10d      	bne.n	800539e <I2C_WaitOnFlagUntilTimeout+0x56>
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	695b      	ldr	r3, [r3, #20]
 8005388:	43da      	mvns	r2, r3
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	4013      	ands	r3, r2
 800538e:	b29b      	uxth	r3, r3
 8005390:	2b00      	cmp	r3, #0
 8005392:	bf0c      	ite	eq
 8005394:	2301      	moveq	r3, #1
 8005396:	2300      	movne	r3, #0
 8005398:	b2db      	uxtb	r3, r3
 800539a:	461a      	mov	r2, r3
 800539c:	e00c      	b.n	80053b8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	699b      	ldr	r3, [r3, #24]
 80053a4:	43da      	mvns	r2, r3
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	4013      	ands	r3, r2
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	bf0c      	ite	eq
 80053b0:	2301      	moveq	r3, #1
 80053b2:	2300      	movne	r3, #0
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	461a      	mov	r2, r3
 80053b8:	79fb      	ldrb	r3, [r7, #7]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d116      	bne.n	80053ec <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2200      	movs	r2, #0
 80053c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2220      	movs	r2, #32
 80053c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053d8:	f043 0220 	orr.w	r2, r3, #32
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e023      	b.n	8005434 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	0c1b      	lsrs	r3, r3, #16
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d10d      	bne.n	8005412 <I2C_WaitOnFlagUntilTimeout+0xca>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	695b      	ldr	r3, [r3, #20]
 80053fc:	43da      	mvns	r2, r3
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	4013      	ands	r3, r2
 8005402:	b29b      	uxth	r3, r3
 8005404:	2b00      	cmp	r3, #0
 8005406:	bf0c      	ite	eq
 8005408:	2301      	moveq	r3, #1
 800540a:	2300      	movne	r3, #0
 800540c:	b2db      	uxtb	r3, r3
 800540e:	461a      	mov	r2, r3
 8005410:	e00c      	b.n	800542c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	699b      	ldr	r3, [r3, #24]
 8005418:	43da      	mvns	r2, r3
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	4013      	ands	r3, r2
 800541e:	b29b      	uxth	r3, r3
 8005420:	2b00      	cmp	r3, #0
 8005422:	bf0c      	ite	eq
 8005424:	2301      	moveq	r3, #1
 8005426:	2300      	movne	r3, #0
 8005428:	b2db      	uxtb	r3, r3
 800542a:	461a      	mov	r2, r3
 800542c:	79fb      	ldrb	r3, [r7, #7]
 800542e:	429a      	cmp	r2, r3
 8005430:	d093      	beq.n	800535a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005432:	2300      	movs	r3, #0
}
 8005434:	4618      	mov	r0, r3
 8005436:	3710      	adds	r7, #16
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	607a      	str	r2, [r7, #4]
 8005448:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800544a:	e071      	b.n	8005530 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	695b      	ldr	r3, [r3, #20]
 8005452:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005456:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800545a:	d123      	bne.n	80054a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800546a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005474:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2220      	movs	r2, #32
 8005480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2200      	movs	r2, #0
 8005488:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005490:	f043 0204 	orr.w	r2, r3, #4
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2200      	movs	r2, #0
 800549c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e067      	b.n	8005574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054aa:	d041      	beq.n	8005530 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054ac:	f7fe fb8a 	bl	8003bc4 <HAL_GetTick>
 80054b0:	4602      	mov	r2, r0
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d302      	bcc.n	80054c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d136      	bne.n	8005530 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	0c1b      	lsrs	r3, r3, #16
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d10c      	bne.n	80054e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	695b      	ldr	r3, [r3, #20]
 80054d2:	43da      	mvns	r2, r3
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	4013      	ands	r3, r2
 80054d8:	b29b      	uxth	r3, r3
 80054da:	2b00      	cmp	r3, #0
 80054dc:	bf14      	ite	ne
 80054de:	2301      	movne	r3, #1
 80054e0:	2300      	moveq	r3, #0
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	e00b      	b.n	80054fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	699b      	ldr	r3, [r3, #24]
 80054ec:	43da      	mvns	r2, r3
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	4013      	ands	r3, r2
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	bf14      	ite	ne
 80054f8:	2301      	movne	r3, #1
 80054fa:	2300      	moveq	r3, #0
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d016      	beq.n	8005530 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2200      	movs	r2, #0
 8005506:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2220      	movs	r2, #32
 800550c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2200      	movs	r2, #0
 8005514:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800551c:	f043 0220 	orr.w	r2, r3, #32
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2200      	movs	r2, #0
 8005528:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	e021      	b.n	8005574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	0c1b      	lsrs	r3, r3, #16
 8005534:	b2db      	uxtb	r3, r3
 8005536:	2b01      	cmp	r3, #1
 8005538:	d10c      	bne.n	8005554 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	695b      	ldr	r3, [r3, #20]
 8005540:	43da      	mvns	r2, r3
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	4013      	ands	r3, r2
 8005546:	b29b      	uxth	r3, r3
 8005548:	2b00      	cmp	r3, #0
 800554a:	bf14      	ite	ne
 800554c:	2301      	movne	r3, #1
 800554e:	2300      	moveq	r3, #0
 8005550:	b2db      	uxtb	r3, r3
 8005552:	e00b      	b.n	800556c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	699b      	ldr	r3, [r3, #24]
 800555a:	43da      	mvns	r2, r3
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	4013      	ands	r3, r2
 8005560:	b29b      	uxth	r3, r3
 8005562:	2b00      	cmp	r3, #0
 8005564:	bf14      	ite	ne
 8005566:	2301      	movne	r3, #1
 8005568:	2300      	moveq	r3, #0
 800556a:	b2db      	uxtb	r3, r3
 800556c:	2b00      	cmp	r3, #0
 800556e:	f47f af6d 	bne.w	800544c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	3710      	adds	r7, #16
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005588:	e034      	b.n	80055f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800558a:	68f8      	ldr	r0, [r7, #12]
 800558c:	f000 f8e3 	bl	8005756 <I2C_IsAcknowledgeFailed>
 8005590:	4603      	mov	r3, r0
 8005592:	2b00      	cmp	r3, #0
 8005594:	d001      	beq.n	800559a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e034      	b.n	8005604 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055a0:	d028      	beq.n	80055f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055a2:	f7fe fb0f 	bl	8003bc4 <HAL_GetTick>
 80055a6:	4602      	mov	r2, r0
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	1ad3      	subs	r3, r2, r3
 80055ac:	68ba      	ldr	r2, [r7, #8]
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d302      	bcc.n	80055b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d11d      	bne.n	80055f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	695b      	ldr	r3, [r3, #20]
 80055be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055c2:	2b80      	cmp	r3, #128	@ 0x80
 80055c4:	d016      	beq.n	80055f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2200      	movs	r2, #0
 80055ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2220      	movs	r2, #32
 80055d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055e0:	f043 0220 	orr.w	r2, r3, #32
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e007      	b.n	8005604 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	695b      	ldr	r3, [r3, #20]
 80055fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055fe:	2b80      	cmp	r3, #128	@ 0x80
 8005600:	d1c3      	bne.n	800558a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005602:	2300      	movs	r3, #0
}
 8005604:	4618      	mov	r0, r3
 8005606:	3710      	adds	r7, #16
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005618:	e034      	b.n	8005684 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800561a:	68f8      	ldr	r0, [r7, #12]
 800561c:	f000 f89b 	bl	8005756 <I2C_IsAcknowledgeFailed>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d001      	beq.n	800562a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e034      	b.n	8005694 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005630:	d028      	beq.n	8005684 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005632:	f7fe fac7 	bl	8003bc4 <HAL_GetTick>
 8005636:	4602      	mov	r2, r0
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	1ad3      	subs	r3, r2, r3
 800563c:	68ba      	ldr	r2, [r7, #8]
 800563e:	429a      	cmp	r2, r3
 8005640:	d302      	bcc.n	8005648 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d11d      	bne.n	8005684 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	695b      	ldr	r3, [r3, #20]
 800564e:	f003 0304 	and.w	r3, r3, #4
 8005652:	2b04      	cmp	r3, #4
 8005654:	d016      	beq.n	8005684 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2200      	movs	r2, #0
 800565a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2220      	movs	r2, #32
 8005660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2200      	movs	r2, #0
 8005668:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005670:	f043 0220 	orr.w	r2, r3, #32
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2200      	movs	r2, #0
 800567c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	e007      	b.n	8005694 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	695b      	ldr	r3, [r3, #20]
 800568a:	f003 0304 	and.w	r3, r3, #4
 800568e:	2b04      	cmp	r3, #4
 8005690:	d1c3      	bne.n	800561a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005692:	2300      	movs	r3, #0
}
 8005694:	4618      	mov	r0, r3
 8005696:	3710      	adds	r7, #16
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b084      	sub	sp, #16
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80056a8:	e049      	b.n	800573e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	695b      	ldr	r3, [r3, #20]
 80056b0:	f003 0310 	and.w	r3, r3, #16
 80056b4:	2b10      	cmp	r3, #16
 80056b6:	d119      	bne.n	80056ec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f06f 0210 	mvn.w	r2, #16
 80056c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2200      	movs	r2, #0
 80056c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2220      	movs	r2, #32
 80056cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	e030      	b.n	800574e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056ec:	f7fe fa6a 	bl	8003bc4 <HAL_GetTick>
 80056f0:	4602      	mov	r2, r0
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	1ad3      	subs	r3, r2, r3
 80056f6:	68ba      	ldr	r2, [r7, #8]
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d302      	bcc.n	8005702 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d11d      	bne.n	800573e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	695b      	ldr	r3, [r3, #20]
 8005708:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800570c:	2b40      	cmp	r3, #64	@ 0x40
 800570e:	d016      	beq.n	800573e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2200      	movs	r2, #0
 8005714:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2220      	movs	r2, #32
 800571a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800572a:	f043 0220 	orr.w	r2, r3, #32
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e007      	b.n	800574e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	695b      	ldr	r3, [r3, #20]
 8005744:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005748:	2b40      	cmp	r3, #64	@ 0x40
 800574a:	d1ae      	bne.n	80056aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3710      	adds	r7, #16
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}

08005756 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005756:	b480      	push	{r7}
 8005758:	b083      	sub	sp, #12
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	695b      	ldr	r3, [r3, #20]
 8005764:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005768:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800576c:	d11b      	bne.n	80057a6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005776:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2220      	movs	r2, #32
 8005782:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005792:	f043 0204 	orr.w	r2, r3, #4
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e000      	b.n	80057a8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80057a6:	2300      	movs	r3, #0
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	370c      	adds	r7, #12
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bc80      	pop	{r7}
 80057b0:	4770      	bx	lr
	...

080057b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b086      	sub	sp, #24
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d101      	bne.n	80057c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e272      	b.n	8005cac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 0301 	and.w	r3, r3, #1
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	f000 8087 	beq.w	80058e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80057d4:	4b92      	ldr	r3, [pc, #584]	@ (8005a20 <HAL_RCC_OscConfig+0x26c>)
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	f003 030c 	and.w	r3, r3, #12
 80057dc:	2b04      	cmp	r3, #4
 80057de:	d00c      	beq.n	80057fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80057e0:	4b8f      	ldr	r3, [pc, #572]	@ (8005a20 <HAL_RCC_OscConfig+0x26c>)
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	f003 030c 	and.w	r3, r3, #12
 80057e8:	2b08      	cmp	r3, #8
 80057ea:	d112      	bne.n	8005812 <HAL_RCC_OscConfig+0x5e>
 80057ec:	4b8c      	ldr	r3, [pc, #560]	@ (8005a20 <HAL_RCC_OscConfig+0x26c>)
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80057f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057f8:	d10b      	bne.n	8005812 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057fa:	4b89      	ldr	r3, [pc, #548]	@ (8005a20 <HAL_RCC_OscConfig+0x26c>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005802:	2b00      	cmp	r3, #0
 8005804:	d06c      	beq.n	80058e0 <HAL_RCC_OscConfig+0x12c>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d168      	bne.n	80058e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e24c      	b.n	8005cac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800581a:	d106      	bne.n	800582a <HAL_RCC_OscConfig+0x76>
 800581c:	4b80      	ldr	r3, [pc, #512]	@ (8005a20 <HAL_RCC_OscConfig+0x26c>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a7f      	ldr	r2, [pc, #508]	@ (8005a20 <HAL_RCC_OscConfig+0x26c>)
 8005822:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005826:	6013      	str	r3, [r2, #0]
 8005828:	e02e      	b.n	8005888 <HAL_RCC_OscConfig+0xd4>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d10c      	bne.n	800584c <HAL_RCC_OscConfig+0x98>
 8005832:	4b7b      	ldr	r3, [pc, #492]	@ (8005a20 <HAL_RCC_OscConfig+0x26c>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a7a      	ldr	r2, [pc, #488]	@ (8005a20 <HAL_RCC_OscConfig+0x26c>)
 8005838:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800583c:	6013      	str	r3, [r2, #0]
 800583e:	4b78      	ldr	r3, [pc, #480]	@ (8005a20 <HAL_RCC_OscConfig+0x26c>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a77      	ldr	r2, [pc, #476]	@ (8005a20 <HAL_RCC_OscConfig+0x26c>)
 8005844:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005848:	6013      	str	r3, [r2, #0]
 800584a:	e01d      	b.n	8005888 <HAL_RCC_OscConfig+0xd4>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005854:	d10c      	bne.n	8005870 <HAL_RCC_OscConfig+0xbc>
 8005856:	4b72      	ldr	r3, [pc, #456]	@ (8005a20 <HAL_RCC_OscConfig+0x26c>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a71      	ldr	r2, [pc, #452]	@ (8005a20 <HAL_RCC_OscConfig+0x26c>)
 800585c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005860:	6013      	str	r3, [r2, #0]
 8005862:	4b6f      	ldr	r3, [pc, #444]	@ (8005a20 <HAL_RCC_OscConfig+0x26c>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a6e      	ldr	r2, [pc, #440]	@ (8005a20 <HAL_RCC_OscConfig+0x26c>)
 8005868:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800586c:	6013      	str	r3, [r2, #0]
 800586e:	e00b      	b.n	8005888 <HAL_RCC_OscConfig+0xd4>
 8005870:	4b6b      	ldr	r3, [pc, #428]	@ (8005a20 <HAL_RCC_OscConfig+0x26c>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a6a      	ldr	r2, [pc, #424]	@ (8005a20 <HAL_RCC_OscConfig+0x26c>)
 8005876:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800587a:	6013      	str	r3, [r2, #0]
 800587c:	4b68      	ldr	r3, [pc, #416]	@ (8005a20 <HAL_RCC_OscConfig+0x26c>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a67      	ldr	r2, [pc, #412]	@ (8005a20 <HAL_RCC_OscConfig+0x26c>)
 8005882:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005886:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d013      	beq.n	80058b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005890:	f7fe f998 	bl	8003bc4 <HAL_GetTick>
 8005894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005896:	e008      	b.n	80058aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005898:	f7fe f994 	bl	8003bc4 <HAL_GetTick>
 800589c:	4602      	mov	r2, r0
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	2b64      	cmp	r3, #100	@ 0x64
 80058a4:	d901      	bls.n	80058aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80058a6:	2303      	movs	r3, #3
 80058a8:	e200      	b.n	8005cac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058aa:	4b5d      	ldr	r3, [pc, #372]	@ (8005a20 <HAL_RCC_OscConfig+0x26c>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d0f0      	beq.n	8005898 <HAL_RCC_OscConfig+0xe4>
 80058b6:	e014      	b.n	80058e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058b8:	f7fe f984 	bl	8003bc4 <HAL_GetTick>
 80058bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058be:	e008      	b.n	80058d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058c0:	f7fe f980 	bl	8003bc4 <HAL_GetTick>
 80058c4:	4602      	mov	r2, r0
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	2b64      	cmp	r3, #100	@ 0x64
 80058cc:	d901      	bls.n	80058d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80058ce:	2303      	movs	r3, #3
 80058d0:	e1ec      	b.n	8005cac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058d2:	4b53      	ldr	r3, [pc, #332]	@ (8005a20 <HAL_RCC_OscConfig+0x26c>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d1f0      	bne.n	80058c0 <HAL_RCC_OscConfig+0x10c>
 80058de:	e000      	b.n	80058e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 0302 	and.w	r3, r3, #2
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d063      	beq.n	80059b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80058ee:	4b4c      	ldr	r3, [pc, #304]	@ (8005a20 <HAL_RCC_OscConfig+0x26c>)
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	f003 030c 	and.w	r3, r3, #12
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d00b      	beq.n	8005912 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80058fa:	4b49      	ldr	r3, [pc, #292]	@ (8005a20 <HAL_RCC_OscConfig+0x26c>)
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	f003 030c 	and.w	r3, r3, #12
 8005902:	2b08      	cmp	r3, #8
 8005904:	d11c      	bne.n	8005940 <HAL_RCC_OscConfig+0x18c>
 8005906:	4b46      	ldr	r3, [pc, #280]	@ (8005a20 <HAL_RCC_OscConfig+0x26c>)
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800590e:	2b00      	cmp	r3, #0
 8005910:	d116      	bne.n	8005940 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005912:	4b43      	ldr	r3, [pc, #268]	@ (8005a20 <HAL_RCC_OscConfig+0x26c>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 0302 	and.w	r3, r3, #2
 800591a:	2b00      	cmp	r3, #0
 800591c:	d005      	beq.n	800592a <HAL_RCC_OscConfig+0x176>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	2b01      	cmp	r3, #1
 8005924:	d001      	beq.n	800592a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e1c0      	b.n	8005cac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800592a:	4b3d      	ldr	r3, [pc, #244]	@ (8005a20 <HAL_RCC_OscConfig+0x26c>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	695b      	ldr	r3, [r3, #20]
 8005936:	00db      	lsls	r3, r3, #3
 8005938:	4939      	ldr	r1, [pc, #228]	@ (8005a20 <HAL_RCC_OscConfig+0x26c>)
 800593a:	4313      	orrs	r3, r2
 800593c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800593e:	e03a      	b.n	80059b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	691b      	ldr	r3, [r3, #16]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d020      	beq.n	800598a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005948:	4b36      	ldr	r3, [pc, #216]	@ (8005a24 <HAL_RCC_OscConfig+0x270>)
 800594a:	2201      	movs	r2, #1
 800594c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800594e:	f7fe f939 	bl	8003bc4 <HAL_GetTick>
 8005952:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005954:	e008      	b.n	8005968 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005956:	f7fe f935 	bl	8003bc4 <HAL_GetTick>
 800595a:	4602      	mov	r2, r0
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	1ad3      	subs	r3, r2, r3
 8005960:	2b02      	cmp	r3, #2
 8005962:	d901      	bls.n	8005968 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005964:	2303      	movs	r3, #3
 8005966:	e1a1      	b.n	8005cac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005968:	4b2d      	ldr	r3, [pc, #180]	@ (8005a20 <HAL_RCC_OscConfig+0x26c>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 0302 	and.w	r3, r3, #2
 8005970:	2b00      	cmp	r3, #0
 8005972:	d0f0      	beq.n	8005956 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005974:	4b2a      	ldr	r3, [pc, #168]	@ (8005a20 <HAL_RCC_OscConfig+0x26c>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	695b      	ldr	r3, [r3, #20]
 8005980:	00db      	lsls	r3, r3, #3
 8005982:	4927      	ldr	r1, [pc, #156]	@ (8005a20 <HAL_RCC_OscConfig+0x26c>)
 8005984:	4313      	orrs	r3, r2
 8005986:	600b      	str	r3, [r1, #0]
 8005988:	e015      	b.n	80059b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800598a:	4b26      	ldr	r3, [pc, #152]	@ (8005a24 <HAL_RCC_OscConfig+0x270>)
 800598c:	2200      	movs	r2, #0
 800598e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005990:	f7fe f918 	bl	8003bc4 <HAL_GetTick>
 8005994:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005996:	e008      	b.n	80059aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005998:	f7fe f914 	bl	8003bc4 <HAL_GetTick>
 800599c:	4602      	mov	r2, r0
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	d901      	bls.n	80059aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80059a6:	2303      	movs	r3, #3
 80059a8:	e180      	b.n	8005cac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059aa:	4b1d      	ldr	r3, [pc, #116]	@ (8005a20 <HAL_RCC_OscConfig+0x26c>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 0302 	and.w	r3, r3, #2
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d1f0      	bne.n	8005998 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 0308 	and.w	r3, r3, #8
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d03a      	beq.n	8005a38 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	699b      	ldr	r3, [r3, #24]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d019      	beq.n	80059fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059ca:	4b17      	ldr	r3, [pc, #92]	@ (8005a28 <HAL_RCC_OscConfig+0x274>)
 80059cc:	2201      	movs	r2, #1
 80059ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059d0:	f7fe f8f8 	bl	8003bc4 <HAL_GetTick>
 80059d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059d6:	e008      	b.n	80059ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059d8:	f7fe f8f4 	bl	8003bc4 <HAL_GetTick>
 80059dc:	4602      	mov	r2, r0
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	d901      	bls.n	80059ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	e160      	b.n	8005cac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059ea:	4b0d      	ldr	r3, [pc, #52]	@ (8005a20 <HAL_RCC_OscConfig+0x26c>)
 80059ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ee:	f003 0302 	and.w	r3, r3, #2
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d0f0      	beq.n	80059d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80059f6:	2001      	movs	r0, #1
 80059f8:	f000 face 	bl	8005f98 <RCC_Delay>
 80059fc:	e01c      	b.n	8005a38 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059fe:	4b0a      	ldr	r3, [pc, #40]	@ (8005a28 <HAL_RCC_OscConfig+0x274>)
 8005a00:	2200      	movs	r2, #0
 8005a02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a04:	f7fe f8de 	bl	8003bc4 <HAL_GetTick>
 8005a08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a0a:	e00f      	b.n	8005a2c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a0c:	f7fe f8da 	bl	8003bc4 <HAL_GetTick>
 8005a10:	4602      	mov	r2, r0
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	1ad3      	subs	r3, r2, r3
 8005a16:	2b02      	cmp	r3, #2
 8005a18:	d908      	bls.n	8005a2c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005a1a:	2303      	movs	r3, #3
 8005a1c:	e146      	b.n	8005cac <HAL_RCC_OscConfig+0x4f8>
 8005a1e:	bf00      	nop
 8005a20:	40021000 	.word	0x40021000
 8005a24:	42420000 	.word	0x42420000
 8005a28:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a2c:	4b92      	ldr	r3, [pc, #584]	@ (8005c78 <HAL_RCC_OscConfig+0x4c4>)
 8005a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a30:	f003 0302 	and.w	r3, r3, #2
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d1e9      	bne.n	8005a0c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 0304 	and.w	r3, r3, #4
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	f000 80a6 	beq.w	8005b92 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a46:	2300      	movs	r3, #0
 8005a48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a4a:	4b8b      	ldr	r3, [pc, #556]	@ (8005c78 <HAL_RCC_OscConfig+0x4c4>)
 8005a4c:	69db      	ldr	r3, [r3, #28]
 8005a4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d10d      	bne.n	8005a72 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a56:	4b88      	ldr	r3, [pc, #544]	@ (8005c78 <HAL_RCC_OscConfig+0x4c4>)
 8005a58:	69db      	ldr	r3, [r3, #28]
 8005a5a:	4a87      	ldr	r2, [pc, #540]	@ (8005c78 <HAL_RCC_OscConfig+0x4c4>)
 8005a5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a60:	61d3      	str	r3, [r2, #28]
 8005a62:	4b85      	ldr	r3, [pc, #532]	@ (8005c78 <HAL_RCC_OscConfig+0x4c4>)
 8005a64:	69db      	ldr	r3, [r3, #28]
 8005a66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a6a:	60bb      	str	r3, [r7, #8]
 8005a6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a72:	4b82      	ldr	r3, [pc, #520]	@ (8005c7c <HAL_RCC_OscConfig+0x4c8>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d118      	bne.n	8005ab0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a7e:	4b7f      	ldr	r3, [pc, #508]	@ (8005c7c <HAL_RCC_OscConfig+0x4c8>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a7e      	ldr	r2, [pc, #504]	@ (8005c7c <HAL_RCC_OscConfig+0x4c8>)
 8005a84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a8a:	f7fe f89b 	bl	8003bc4 <HAL_GetTick>
 8005a8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a90:	e008      	b.n	8005aa4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a92:	f7fe f897 	bl	8003bc4 <HAL_GetTick>
 8005a96:	4602      	mov	r2, r0
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	1ad3      	subs	r3, r2, r3
 8005a9c:	2b64      	cmp	r3, #100	@ 0x64
 8005a9e:	d901      	bls.n	8005aa4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005aa0:	2303      	movs	r3, #3
 8005aa2:	e103      	b.n	8005cac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005aa4:	4b75      	ldr	r3, [pc, #468]	@ (8005c7c <HAL_RCC_OscConfig+0x4c8>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d0f0      	beq.n	8005a92 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d106      	bne.n	8005ac6 <HAL_RCC_OscConfig+0x312>
 8005ab8:	4b6f      	ldr	r3, [pc, #444]	@ (8005c78 <HAL_RCC_OscConfig+0x4c4>)
 8005aba:	6a1b      	ldr	r3, [r3, #32]
 8005abc:	4a6e      	ldr	r2, [pc, #440]	@ (8005c78 <HAL_RCC_OscConfig+0x4c4>)
 8005abe:	f043 0301 	orr.w	r3, r3, #1
 8005ac2:	6213      	str	r3, [r2, #32]
 8005ac4:	e02d      	b.n	8005b22 <HAL_RCC_OscConfig+0x36e>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d10c      	bne.n	8005ae8 <HAL_RCC_OscConfig+0x334>
 8005ace:	4b6a      	ldr	r3, [pc, #424]	@ (8005c78 <HAL_RCC_OscConfig+0x4c4>)
 8005ad0:	6a1b      	ldr	r3, [r3, #32]
 8005ad2:	4a69      	ldr	r2, [pc, #420]	@ (8005c78 <HAL_RCC_OscConfig+0x4c4>)
 8005ad4:	f023 0301 	bic.w	r3, r3, #1
 8005ad8:	6213      	str	r3, [r2, #32]
 8005ada:	4b67      	ldr	r3, [pc, #412]	@ (8005c78 <HAL_RCC_OscConfig+0x4c4>)
 8005adc:	6a1b      	ldr	r3, [r3, #32]
 8005ade:	4a66      	ldr	r2, [pc, #408]	@ (8005c78 <HAL_RCC_OscConfig+0x4c4>)
 8005ae0:	f023 0304 	bic.w	r3, r3, #4
 8005ae4:	6213      	str	r3, [r2, #32]
 8005ae6:	e01c      	b.n	8005b22 <HAL_RCC_OscConfig+0x36e>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	2b05      	cmp	r3, #5
 8005aee:	d10c      	bne.n	8005b0a <HAL_RCC_OscConfig+0x356>
 8005af0:	4b61      	ldr	r3, [pc, #388]	@ (8005c78 <HAL_RCC_OscConfig+0x4c4>)
 8005af2:	6a1b      	ldr	r3, [r3, #32]
 8005af4:	4a60      	ldr	r2, [pc, #384]	@ (8005c78 <HAL_RCC_OscConfig+0x4c4>)
 8005af6:	f043 0304 	orr.w	r3, r3, #4
 8005afa:	6213      	str	r3, [r2, #32]
 8005afc:	4b5e      	ldr	r3, [pc, #376]	@ (8005c78 <HAL_RCC_OscConfig+0x4c4>)
 8005afe:	6a1b      	ldr	r3, [r3, #32]
 8005b00:	4a5d      	ldr	r2, [pc, #372]	@ (8005c78 <HAL_RCC_OscConfig+0x4c4>)
 8005b02:	f043 0301 	orr.w	r3, r3, #1
 8005b06:	6213      	str	r3, [r2, #32]
 8005b08:	e00b      	b.n	8005b22 <HAL_RCC_OscConfig+0x36e>
 8005b0a:	4b5b      	ldr	r3, [pc, #364]	@ (8005c78 <HAL_RCC_OscConfig+0x4c4>)
 8005b0c:	6a1b      	ldr	r3, [r3, #32]
 8005b0e:	4a5a      	ldr	r2, [pc, #360]	@ (8005c78 <HAL_RCC_OscConfig+0x4c4>)
 8005b10:	f023 0301 	bic.w	r3, r3, #1
 8005b14:	6213      	str	r3, [r2, #32]
 8005b16:	4b58      	ldr	r3, [pc, #352]	@ (8005c78 <HAL_RCC_OscConfig+0x4c4>)
 8005b18:	6a1b      	ldr	r3, [r3, #32]
 8005b1a:	4a57      	ldr	r2, [pc, #348]	@ (8005c78 <HAL_RCC_OscConfig+0x4c4>)
 8005b1c:	f023 0304 	bic.w	r3, r3, #4
 8005b20:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	68db      	ldr	r3, [r3, #12]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d015      	beq.n	8005b56 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b2a:	f7fe f84b 	bl	8003bc4 <HAL_GetTick>
 8005b2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b30:	e00a      	b.n	8005b48 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b32:	f7fe f847 	bl	8003bc4 <HAL_GetTick>
 8005b36:	4602      	mov	r2, r0
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	1ad3      	subs	r3, r2, r3
 8005b3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d901      	bls.n	8005b48 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005b44:	2303      	movs	r3, #3
 8005b46:	e0b1      	b.n	8005cac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b48:	4b4b      	ldr	r3, [pc, #300]	@ (8005c78 <HAL_RCC_OscConfig+0x4c4>)
 8005b4a:	6a1b      	ldr	r3, [r3, #32]
 8005b4c:	f003 0302 	and.w	r3, r3, #2
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d0ee      	beq.n	8005b32 <HAL_RCC_OscConfig+0x37e>
 8005b54:	e014      	b.n	8005b80 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b56:	f7fe f835 	bl	8003bc4 <HAL_GetTick>
 8005b5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b5c:	e00a      	b.n	8005b74 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b5e:	f7fe f831 	bl	8003bc4 <HAL_GetTick>
 8005b62:	4602      	mov	r2, r0
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	1ad3      	subs	r3, r2, r3
 8005b68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d901      	bls.n	8005b74 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005b70:	2303      	movs	r3, #3
 8005b72:	e09b      	b.n	8005cac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b74:	4b40      	ldr	r3, [pc, #256]	@ (8005c78 <HAL_RCC_OscConfig+0x4c4>)
 8005b76:	6a1b      	ldr	r3, [r3, #32]
 8005b78:	f003 0302 	and.w	r3, r3, #2
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d1ee      	bne.n	8005b5e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005b80:	7dfb      	ldrb	r3, [r7, #23]
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d105      	bne.n	8005b92 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b86:	4b3c      	ldr	r3, [pc, #240]	@ (8005c78 <HAL_RCC_OscConfig+0x4c4>)
 8005b88:	69db      	ldr	r3, [r3, #28]
 8005b8a:	4a3b      	ldr	r2, [pc, #236]	@ (8005c78 <HAL_RCC_OscConfig+0x4c4>)
 8005b8c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b90:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	69db      	ldr	r3, [r3, #28]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	f000 8087 	beq.w	8005caa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b9c:	4b36      	ldr	r3, [pc, #216]	@ (8005c78 <HAL_RCC_OscConfig+0x4c4>)
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	f003 030c 	and.w	r3, r3, #12
 8005ba4:	2b08      	cmp	r3, #8
 8005ba6:	d061      	beq.n	8005c6c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	69db      	ldr	r3, [r3, #28]
 8005bac:	2b02      	cmp	r3, #2
 8005bae:	d146      	bne.n	8005c3e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bb0:	4b33      	ldr	r3, [pc, #204]	@ (8005c80 <HAL_RCC_OscConfig+0x4cc>)
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bb6:	f7fe f805 	bl	8003bc4 <HAL_GetTick>
 8005bba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005bbc:	e008      	b.n	8005bd0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bbe:	f7fe f801 	bl	8003bc4 <HAL_GetTick>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	1ad3      	subs	r3, r2, r3
 8005bc8:	2b02      	cmp	r3, #2
 8005bca:	d901      	bls.n	8005bd0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005bcc:	2303      	movs	r3, #3
 8005bce:	e06d      	b.n	8005cac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005bd0:	4b29      	ldr	r3, [pc, #164]	@ (8005c78 <HAL_RCC_OscConfig+0x4c4>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d1f0      	bne.n	8005bbe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6a1b      	ldr	r3, [r3, #32]
 8005be0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005be4:	d108      	bne.n	8005bf8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005be6:	4b24      	ldr	r3, [pc, #144]	@ (8005c78 <HAL_RCC_OscConfig+0x4c4>)
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	4921      	ldr	r1, [pc, #132]	@ (8005c78 <HAL_RCC_OscConfig+0x4c4>)
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005bf8:	4b1f      	ldr	r3, [pc, #124]	@ (8005c78 <HAL_RCC_OscConfig+0x4c4>)
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6a19      	ldr	r1, [r3, #32]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c08:	430b      	orrs	r3, r1
 8005c0a:	491b      	ldr	r1, [pc, #108]	@ (8005c78 <HAL_RCC_OscConfig+0x4c4>)
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c10:	4b1b      	ldr	r3, [pc, #108]	@ (8005c80 <HAL_RCC_OscConfig+0x4cc>)
 8005c12:	2201      	movs	r2, #1
 8005c14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c16:	f7fd ffd5 	bl	8003bc4 <HAL_GetTick>
 8005c1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005c1c:	e008      	b.n	8005c30 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c1e:	f7fd ffd1 	bl	8003bc4 <HAL_GetTick>
 8005c22:	4602      	mov	r2, r0
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	1ad3      	subs	r3, r2, r3
 8005c28:	2b02      	cmp	r3, #2
 8005c2a:	d901      	bls.n	8005c30 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005c2c:	2303      	movs	r3, #3
 8005c2e:	e03d      	b.n	8005cac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005c30:	4b11      	ldr	r3, [pc, #68]	@ (8005c78 <HAL_RCC_OscConfig+0x4c4>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d0f0      	beq.n	8005c1e <HAL_RCC_OscConfig+0x46a>
 8005c3c:	e035      	b.n	8005caa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c3e:	4b10      	ldr	r3, [pc, #64]	@ (8005c80 <HAL_RCC_OscConfig+0x4cc>)
 8005c40:	2200      	movs	r2, #0
 8005c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c44:	f7fd ffbe 	bl	8003bc4 <HAL_GetTick>
 8005c48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c4a:	e008      	b.n	8005c5e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c4c:	f7fd ffba 	bl	8003bc4 <HAL_GetTick>
 8005c50:	4602      	mov	r2, r0
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	1ad3      	subs	r3, r2, r3
 8005c56:	2b02      	cmp	r3, #2
 8005c58:	d901      	bls.n	8005c5e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	e026      	b.n	8005cac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c5e:	4b06      	ldr	r3, [pc, #24]	@ (8005c78 <HAL_RCC_OscConfig+0x4c4>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d1f0      	bne.n	8005c4c <HAL_RCC_OscConfig+0x498>
 8005c6a:	e01e      	b.n	8005caa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	69db      	ldr	r3, [r3, #28]
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d107      	bne.n	8005c84 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	e019      	b.n	8005cac <HAL_RCC_OscConfig+0x4f8>
 8005c78:	40021000 	.word	0x40021000
 8005c7c:	40007000 	.word	0x40007000
 8005c80:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005c84:	4b0b      	ldr	r3, [pc, #44]	@ (8005cb4 <HAL_RCC_OscConfig+0x500>)
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6a1b      	ldr	r3, [r3, #32]
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d106      	bne.n	8005ca6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d001      	beq.n	8005caa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e000      	b.n	8005cac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005caa:	2300      	movs	r3, #0
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3718      	adds	r7, #24
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	40021000 	.word	0x40021000

08005cb8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d101      	bne.n	8005ccc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e0d0      	b.n	8005e6e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ccc:	4b6a      	ldr	r3, [pc, #424]	@ (8005e78 <HAL_RCC_ClockConfig+0x1c0>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 0307 	and.w	r3, r3, #7
 8005cd4:	683a      	ldr	r2, [r7, #0]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d910      	bls.n	8005cfc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cda:	4b67      	ldr	r3, [pc, #412]	@ (8005e78 <HAL_RCC_ClockConfig+0x1c0>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f023 0207 	bic.w	r2, r3, #7
 8005ce2:	4965      	ldr	r1, [pc, #404]	@ (8005e78 <HAL_RCC_ClockConfig+0x1c0>)
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cea:	4b63      	ldr	r3, [pc, #396]	@ (8005e78 <HAL_RCC_ClockConfig+0x1c0>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f003 0307 	and.w	r3, r3, #7
 8005cf2:	683a      	ldr	r2, [r7, #0]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d001      	beq.n	8005cfc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	e0b8      	b.n	8005e6e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f003 0302 	and.w	r3, r3, #2
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d020      	beq.n	8005d4a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 0304 	and.w	r3, r3, #4
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d005      	beq.n	8005d20 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d14:	4b59      	ldr	r3, [pc, #356]	@ (8005e7c <HAL_RCC_ClockConfig+0x1c4>)
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	4a58      	ldr	r2, [pc, #352]	@ (8005e7c <HAL_RCC_ClockConfig+0x1c4>)
 8005d1a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005d1e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 0308 	and.w	r3, r3, #8
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d005      	beq.n	8005d38 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d2c:	4b53      	ldr	r3, [pc, #332]	@ (8005e7c <HAL_RCC_ClockConfig+0x1c4>)
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	4a52      	ldr	r2, [pc, #328]	@ (8005e7c <HAL_RCC_ClockConfig+0x1c4>)
 8005d32:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8005d36:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d38:	4b50      	ldr	r3, [pc, #320]	@ (8005e7c <HAL_RCC_ClockConfig+0x1c4>)
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	494d      	ldr	r1, [pc, #308]	@ (8005e7c <HAL_RCC_ClockConfig+0x1c4>)
 8005d46:	4313      	orrs	r3, r2
 8005d48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 0301 	and.w	r3, r3, #1
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d040      	beq.n	8005dd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d107      	bne.n	8005d6e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d5e:	4b47      	ldr	r3, [pc, #284]	@ (8005e7c <HAL_RCC_ClockConfig+0x1c4>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d115      	bne.n	8005d96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e07f      	b.n	8005e6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	2b02      	cmp	r3, #2
 8005d74:	d107      	bne.n	8005d86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d76:	4b41      	ldr	r3, [pc, #260]	@ (8005e7c <HAL_RCC_ClockConfig+0x1c4>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d109      	bne.n	8005d96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e073      	b.n	8005e6e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d86:	4b3d      	ldr	r3, [pc, #244]	@ (8005e7c <HAL_RCC_ClockConfig+0x1c4>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f003 0302 	and.w	r3, r3, #2
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d101      	bne.n	8005d96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	e06b      	b.n	8005e6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d96:	4b39      	ldr	r3, [pc, #228]	@ (8005e7c <HAL_RCC_ClockConfig+0x1c4>)
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	f023 0203 	bic.w	r2, r3, #3
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	4936      	ldr	r1, [pc, #216]	@ (8005e7c <HAL_RCC_ClockConfig+0x1c4>)
 8005da4:	4313      	orrs	r3, r2
 8005da6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005da8:	f7fd ff0c 	bl	8003bc4 <HAL_GetTick>
 8005dac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dae:	e00a      	b.n	8005dc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005db0:	f7fd ff08 	bl	8003bc4 <HAL_GetTick>
 8005db4:	4602      	mov	r2, r0
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	1ad3      	subs	r3, r2, r3
 8005dba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d901      	bls.n	8005dc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005dc2:	2303      	movs	r3, #3
 8005dc4:	e053      	b.n	8005e6e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dc6:	4b2d      	ldr	r3, [pc, #180]	@ (8005e7c <HAL_RCC_ClockConfig+0x1c4>)
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	f003 020c 	and.w	r2, r3, #12
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d1eb      	bne.n	8005db0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005dd8:	4b27      	ldr	r3, [pc, #156]	@ (8005e78 <HAL_RCC_ClockConfig+0x1c0>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 0307 	and.w	r3, r3, #7
 8005de0:	683a      	ldr	r2, [r7, #0]
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d210      	bcs.n	8005e08 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005de6:	4b24      	ldr	r3, [pc, #144]	@ (8005e78 <HAL_RCC_ClockConfig+0x1c0>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f023 0207 	bic.w	r2, r3, #7
 8005dee:	4922      	ldr	r1, [pc, #136]	@ (8005e78 <HAL_RCC_ClockConfig+0x1c0>)
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005df6:	4b20      	ldr	r3, [pc, #128]	@ (8005e78 <HAL_RCC_ClockConfig+0x1c0>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 0307 	and.w	r3, r3, #7
 8005dfe:	683a      	ldr	r2, [r7, #0]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d001      	beq.n	8005e08 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	e032      	b.n	8005e6e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f003 0304 	and.w	r3, r3, #4
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d008      	beq.n	8005e26 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e14:	4b19      	ldr	r3, [pc, #100]	@ (8005e7c <HAL_RCC_ClockConfig+0x1c4>)
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	68db      	ldr	r3, [r3, #12]
 8005e20:	4916      	ldr	r1, [pc, #88]	@ (8005e7c <HAL_RCC_ClockConfig+0x1c4>)
 8005e22:	4313      	orrs	r3, r2
 8005e24:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f003 0308 	and.w	r3, r3, #8
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d009      	beq.n	8005e46 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005e32:	4b12      	ldr	r3, [pc, #72]	@ (8005e7c <HAL_RCC_ClockConfig+0x1c4>)
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	691b      	ldr	r3, [r3, #16]
 8005e3e:	00db      	lsls	r3, r3, #3
 8005e40:	490e      	ldr	r1, [pc, #56]	@ (8005e7c <HAL_RCC_ClockConfig+0x1c4>)
 8005e42:	4313      	orrs	r3, r2
 8005e44:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005e46:	f000 f821 	bl	8005e8c <HAL_RCC_GetSysClockFreq>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8005e7c <HAL_RCC_ClockConfig+0x1c4>)
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	091b      	lsrs	r3, r3, #4
 8005e52:	f003 030f 	and.w	r3, r3, #15
 8005e56:	490a      	ldr	r1, [pc, #40]	@ (8005e80 <HAL_RCC_ClockConfig+0x1c8>)
 8005e58:	5ccb      	ldrb	r3, [r1, r3]
 8005e5a:	fa22 f303 	lsr.w	r3, r2, r3
 8005e5e:	4a09      	ldr	r2, [pc, #36]	@ (8005e84 <HAL_RCC_ClockConfig+0x1cc>)
 8005e60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005e62:	4b09      	ldr	r3, [pc, #36]	@ (8005e88 <HAL_RCC_ClockConfig+0x1d0>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4618      	mov	r0, r3
 8005e68:	f7fd fe6a 	bl	8003b40 <HAL_InitTick>

  return HAL_OK;
 8005e6c:	2300      	movs	r3, #0
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3710      	adds	r7, #16
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	40022000 	.word	0x40022000
 8005e7c:	40021000 	.word	0x40021000
 8005e80:	0800ae5c 	.word	0x0800ae5c
 8005e84:	20000008 	.word	0x20000008
 8005e88:	2000000c 	.word	0x2000000c

08005e8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b087      	sub	sp, #28
 8005e90:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005e92:	2300      	movs	r3, #0
 8005e94:	60fb      	str	r3, [r7, #12]
 8005e96:	2300      	movs	r3, #0
 8005e98:	60bb      	str	r3, [r7, #8]
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	617b      	str	r3, [r7, #20]
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005ea6:	4b1e      	ldr	r3, [pc, #120]	@ (8005f20 <HAL_RCC_GetSysClockFreq+0x94>)
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f003 030c 	and.w	r3, r3, #12
 8005eb2:	2b04      	cmp	r3, #4
 8005eb4:	d002      	beq.n	8005ebc <HAL_RCC_GetSysClockFreq+0x30>
 8005eb6:	2b08      	cmp	r3, #8
 8005eb8:	d003      	beq.n	8005ec2 <HAL_RCC_GetSysClockFreq+0x36>
 8005eba:	e027      	b.n	8005f0c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005ebc:	4b19      	ldr	r3, [pc, #100]	@ (8005f24 <HAL_RCC_GetSysClockFreq+0x98>)
 8005ebe:	613b      	str	r3, [r7, #16]
      break;
 8005ec0:	e027      	b.n	8005f12 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	0c9b      	lsrs	r3, r3, #18
 8005ec6:	f003 030f 	and.w	r3, r3, #15
 8005eca:	4a17      	ldr	r2, [pc, #92]	@ (8005f28 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005ecc:	5cd3      	ldrb	r3, [r2, r3]
 8005ece:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d010      	beq.n	8005efc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005eda:	4b11      	ldr	r3, [pc, #68]	@ (8005f20 <HAL_RCC_GetSysClockFreq+0x94>)
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	0c5b      	lsrs	r3, r3, #17
 8005ee0:	f003 0301 	and.w	r3, r3, #1
 8005ee4:	4a11      	ldr	r2, [pc, #68]	@ (8005f2c <HAL_RCC_GetSysClockFreq+0xa0>)
 8005ee6:	5cd3      	ldrb	r3, [r2, r3]
 8005ee8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a0d      	ldr	r2, [pc, #52]	@ (8005f24 <HAL_RCC_GetSysClockFreq+0x98>)
 8005eee:	fb03 f202 	mul.w	r2, r3, r2
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ef8:	617b      	str	r3, [r7, #20]
 8005efa:	e004      	b.n	8005f06 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	4a0c      	ldr	r2, [pc, #48]	@ (8005f30 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005f00:	fb02 f303 	mul.w	r3, r2, r3
 8005f04:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	613b      	str	r3, [r7, #16]
      break;
 8005f0a:	e002      	b.n	8005f12 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005f0c:	4b05      	ldr	r3, [pc, #20]	@ (8005f24 <HAL_RCC_GetSysClockFreq+0x98>)
 8005f0e:	613b      	str	r3, [r7, #16]
      break;
 8005f10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f12:	693b      	ldr	r3, [r7, #16]
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	371c      	adds	r7, #28
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bc80      	pop	{r7}
 8005f1c:	4770      	bx	lr
 8005f1e:	bf00      	nop
 8005f20:	40021000 	.word	0x40021000
 8005f24:	007a1200 	.word	0x007a1200
 8005f28:	0800ae74 	.word	0x0800ae74
 8005f2c:	0800ae84 	.word	0x0800ae84
 8005f30:	003d0900 	.word	0x003d0900

08005f34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f34:	b480      	push	{r7}
 8005f36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f38:	4b02      	ldr	r3, [pc, #8]	@ (8005f44 <HAL_RCC_GetHCLKFreq+0x10>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bc80      	pop	{r7}
 8005f42:	4770      	bx	lr
 8005f44:	20000008 	.word	0x20000008

08005f48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005f4c:	f7ff fff2 	bl	8005f34 <HAL_RCC_GetHCLKFreq>
 8005f50:	4602      	mov	r2, r0
 8005f52:	4b05      	ldr	r3, [pc, #20]	@ (8005f68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	0a1b      	lsrs	r3, r3, #8
 8005f58:	f003 0307 	and.w	r3, r3, #7
 8005f5c:	4903      	ldr	r1, [pc, #12]	@ (8005f6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f5e:	5ccb      	ldrb	r3, [r1, r3]
 8005f60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	40021000 	.word	0x40021000
 8005f6c:	0800ae6c 	.word	0x0800ae6c

08005f70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005f74:	f7ff ffde 	bl	8005f34 <HAL_RCC_GetHCLKFreq>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	4b05      	ldr	r3, [pc, #20]	@ (8005f90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	0adb      	lsrs	r3, r3, #11
 8005f80:	f003 0307 	and.w	r3, r3, #7
 8005f84:	4903      	ldr	r1, [pc, #12]	@ (8005f94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f86:	5ccb      	ldrb	r3, [r1, r3]
 8005f88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	bd80      	pop	{r7, pc}
 8005f90:	40021000 	.word	0x40021000
 8005f94:	0800ae6c 	.word	0x0800ae6c

08005f98 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b085      	sub	sp, #20
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005fa0:	4b0a      	ldr	r3, [pc, #40]	@ (8005fcc <RCC_Delay+0x34>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a0a      	ldr	r2, [pc, #40]	@ (8005fd0 <RCC_Delay+0x38>)
 8005fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8005faa:	0a5b      	lsrs	r3, r3, #9
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	fb02 f303 	mul.w	r3, r2, r3
 8005fb2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005fb4:	bf00      	nop
  }
  while (Delay --);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	1e5a      	subs	r2, r3, #1
 8005fba:	60fa      	str	r2, [r7, #12]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d1f9      	bne.n	8005fb4 <RCC_Delay+0x1c>
}
 8005fc0:	bf00      	nop
 8005fc2:	bf00      	nop
 8005fc4:	3714      	adds	r7, #20
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bc80      	pop	{r7}
 8005fca:	4770      	bx	lr
 8005fcc:	20000008 	.word	0x20000008
 8005fd0:	10624dd3 	.word	0x10624dd3

08005fd4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b086      	sub	sp, #24
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d101      	bne.n	8005fe8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e093      	b.n	8006110 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d106      	bne.n	8006002 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f7fd fbe1 	bl	80037c4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2202      	movs	r2, #2
 8006006:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	6812      	ldr	r2, [r2, #0]
 8006014:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006018:	f023 0307 	bic.w	r3, r3, #7
 800601c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	3304      	adds	r3, #4
 8006026:	4619      	mov	r1, r3
 8006028:	4610      	mov	r0, r2
 800602a:	f000 fa21 	bl	8006470 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	699b      	ldr	r3, [r3, #24]
 800603c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	6a1b      	ldr	r3, [r3, #32]
 8006044:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	697a      	ldr	r2, [r7, #20]
 800604c:	4313      	orrs	r3, r2
 800604e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006056:	f023 0303 	bic.w	r3, r3, #3
 800605a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	689a      	ldr	r2, [r3, #8]
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	699b      	ldr	r3, [r3, #24]
 8006064:	021b      	lsls	r3, r3, #8
 8006066:	4313      	orrs	r3, r2
 8006068:	693a      	ldr	r2, [r7, #16]
 800606a:	4313      	orrs	r3, r2
 800606c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006074:	f023 030c 	bic.w	r3, r3, #12
 8006078:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006080:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006084:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	68da      	ldr	r2, [r3, #12]
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	69db      	ldr	r3, [r3, #28]
 800608e:	021b      	lsls	r3, r3, #8
 8006090:	4313      	orrs	r3, r2
 8006092:	693a      	ldr	r2, [r7, #16]
 8006094:	4313      	orrs	r3, r2
 8006096:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	011a      	lsls	r2, r3, #4
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	6a1b      	ldr	r3, [r3, #32]
 80060a2:	031b      	lsls	r3, r3, #12
 80060a4:	4313      	orrs	r3, r2
 80060a6:	693a      	ldr	r2, [r7, #16]
 80060a8:	4313      	orrs	r3, r2
 80060aa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80060b2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	685a      	ldr	r2, [r3, #4]
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	695b      	ldr	r3, [r3, #20]
 80060bc:	011b      	lsls	r3, r3, #4
 80060be:	4313      	orrs	r3, r2
 80060c0:	68fa      	ldr	r2, [r7, #12]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	697a      	ldr	r2, [r7, #20]
 80060cc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	693a      	ldr	r2, [r7, #16]
 80060d4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	68fa      	ldr	r2, [r7, #12]
 80060dc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2201      	movs	r2, #1
 80060e2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2201      	movs	r2, #1
 80060ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2201      	movs	r2, #1
 80060f2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2201      	movs	r2, #1
 80060fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2201      	movs	r2, #1
 8006102:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2201      	movs	r2, #1
 800610a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800610e:	2300      	movs	r3, #0
}
 8006110:	4618      	mov	r0, r3
 8006112:	3718      	adds	r7, #24
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}

08006118 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006128:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006130:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006138:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006140:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d110      	bne.n	800616a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006148:	7bfb      	ldrb	r3, [r7, #15]
 800614a:	2b01      	cmp	r3, #1
 800614c:	d102      	bne.n	8006154 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800614e:	7b7b      	ldrb	r3, [r7, #13]
 8006150:	2b01      	cmp	r3, #1
 8006152:	d001      	beq.n	8006158 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006154:	2301      	movs	r3, #1
 8006156:	e069      	b.n	800622c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2202      	movs	r2, #2
 800615c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2202      	movs	r2, #2
 8006164:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006168:	e031      	b.n	80061ce <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	2b04      	cmp	r3, #4
 800616e:	d110      	bne.n	8006192 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006170:	7bbb      	ldrb	r3, [r7, #14]
 8006172:	2b01      	cmp	r3, #1
 8006174:	d102      	bne.n	800617c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006176:	7b3b      	ldrb	r3, [r7, #12]
 8006178:	2b01      	cmp	r3, #1
 800617a:	d001      	beq.n	8006180 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	e055      	b.n	800622c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2202      	movs	r2, #2
 8006184:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2202      	movs	r2, #2
 800618c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006190:	e01d      	b.n	80061ce <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006192:	7bfb      	ldrb	r3, [r7, #15]
 8006194:	2b01      	cmp	r3, #1
 8006196:	d108      	bne.n	80061aa <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006198:	7bbb      	ldrb	r3, [r7, #14]
 800619a:	2b01      	cmp	r3, #1
 800619c:	d105      	bne.n	80061aa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800619e:	7b7b      	ldrb	r3, [r7, #13]
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d102      	bne.n	80061aa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80061a4:	7b3b      	ldrb	r3, [r7, #12]
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d001      	beq.n	80061ae <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	e03e      	b.n	800622c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2202      	movs	r2, #2
 80061b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2202      	movs	r2, #2
 80061ba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2202      	movs	r2, #2
 80061c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2202      	movs	r2, #2
 80061ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d003      	beq.n	80061dc <HAL_TIM_Encoder_Start+0xc4>
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	2b04      	cmp	r3, #4
 80061d8:	d008      	beq.n	80061ec <HAL_TIM_Encoder_Start+0xd4>
 80061da:	e00f      	b.n	80061fc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2201      	movs	r2, #1
 80061e2:	2100      	movs	r1, #0
 80061e4:	4618      	mov	r0, r3
 80061e6:	f000 f9b1 	bl	800654c <TIM_CCxChannelCmd>
      break;
 80061ea:	e016      	b.n	800621a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	2201      	movs	r2, #1
 80061f2:	2104      	movs	r1, #4
 80061f4:	4618      	mov	r0, r3
 80061f6:	f000 f9a9 	bl	800654c <TIM_CCxChannelCmd>
      break;
 80061fa:	e00e      	b.n	800621a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	2201      	movs	r2, #1
 8006202:	2100      	movs	r1, #0
 8006204:	4618      	mov	r0, r3
 8006206:	f000 f9a1 	bl	800654c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2201      	movs	r2, #1
 8006210:	2104      	movs	r1, #4
 8006212:	4618      	mov	r0, r3
 8006214:	f000 f99a 	bl	800654c <TIM_CCxChannelCmd>
      break;
 8006218:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f042 0201 	orr.w	r2, r2, #1
 8006228:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800622a:	2300      	movs	r3, #0
}
 800622c:	4618      	mov	r0, r3
 800622e:	3710      	adds	r7, #16
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}

08006234 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b084      	sub	sp, #16
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	68db      	ldr	r3, [r3, #12]
 8006242:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	f003 0302 	and.w	r3, r3, #2
 8006252:	2b00      	cmp	r3, #0
 8006254:	d020      	beq.n	8006298 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f003 0302 	and.w	r3, r3, #2
 800625c:	2b00      	cmp	r3, #0
 800625e:	d01b      	beq.n	8006298 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f06f 0202 	mvn.w	r2, #2
 8006268:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2201      	movs	r2, #1
 800626e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	699b      	ldr	r3, [r3, #24]
 8006276:	f003 0303 	and.w	r3, r3, #3
 800627a:	2b00      	cmp	r3, #0
 800627c:	d003      	beq.n	8006286 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 f8da 	bl	8006438 <HAL_TIM_IC_CaptureCallback>
 8006284:	e005      	b.n	8006292 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 f8cd 	bl	8006426 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 f8dc 	bl	800644a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	f003 0304 	and.w	r3, r3, #4
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d020      	beq.n	80062e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f003 0304 	and.w	r3, r3, #4
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d01b      	beq.n	80062e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f06f 0204 	mvn.w	r2, #4
 80062b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2202      	movs	r2, #2
 80062ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	699b      	ldr	r3, [r3, #24]
 80062c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d003      	beq.n	80062d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 f8b4 	bl	8006438 <HAL_TIM_IC_CaptureCallback>
 80062d0:	e005      	b.n	80062de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 f8a7 	bl	8006426 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f000 f8b6 	bl	800644a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	f003 0308 	and.w	r3, r3, #8
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d020      	beq.n	8006330 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	f003 0308 	and.w	r3, r3, #8
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d01b      	beq.n	8006330 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f06f 0208 	mvn.w	r2, #8
 8006300:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2204      	movs	r2, #4
 8006306:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	69db      	ldr	r3, [r3, #28]
 800630e:	f003 0303 	and.w	r3, r3, #3
 8006312:	2b00      	cmp	r3, #0
 8006314:	d003      	beq.n	800631e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f000 f88e 	bl	8006438 <HAL_TIM_IC_CaptureCallback>
 800631c:	e005      	b.n	800632a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 f881 	bl	8006426 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f000 f890 	bl	800644a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	f003 0310 	and.w	r3, r3, #16
 8006336:	2b00      	cmp	r3, #0
 8006338:	d020      	beq.n	800637c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f003 0310 	and.w	r3, r3, #16
 8006340:	2b00      	cmp	r3, #0
 8006342:	d01b      	beq.n	800637c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f06f 0210 	mvn.w	r2, #16
 800634c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2208      	movs	r2, #8
 8006352:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	69db      	ldr	r3, [r3, #28]
 800635a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800635e:	2b00      	cmp	r3, #0
 8006360:	d003      	beq.n	800636a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 f868 	bl	8006438 <HAL_TIM_IC_CaptureCallback>
 8006368:	e005      	b.n	8006376 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 f85b 	bl	8006426 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f000 f86a 	bl	800644a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	f003 0301 	and.w	r3, r3, #1
 8006382:	2b00      	cmp	r3, #0
 8006384:	d00c      	beq.n	80063a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f003 0301 	and.w	r3, r3, #1
 800638c:	2b00      	cmp	r3, #0
 800638e:	d007      	beq.n	80063a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f06f 0201 	mvn.w	r2, #1
 8006398:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f000 f83a 	bl	8006414 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00c      	beq.n	80063c4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d007      	beq.n	80063c4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80063bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f000 f94f 	bl	8006662 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d00c      	beq.n	80063e8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d007      	beq.n	80063e8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80063e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 f83a 	bl	800645c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	f003 0320 	and.w	r3, r3, #32
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d00c      	beq.n	800640c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f003 0320 	and.w	r3, r3, #32
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d007      	beq.n	800640c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f06f 0220 	mvn.w	r2, #32
 8006404:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f000 f922 	bl	8006650 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800640c:	bf00      	nop
 800640e:	3710      	adds	r7, #16
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006414:	b480      	push	{r7}
 8006416:	b083      	sub	sp, #12
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800641c:	bf00      	nop
 800641e:	370c      	adds	r7, #12
 8006420:	46bd      	mov	sp, r7
 8006422:	bc80      	pop	{r7}
 8006424:	4770      	bx	lr

08006426 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006426:	b480      	push	{r7}
 8006428:	b083      	sub	sp, #12
 800642a:	af00      	add	r7, sp, #0
 800642c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800642e:	bf00      	nop
 8006430:	370c      	adds	r7, #12
 8006432:	46bd      	mov	sp, r7
 8006434:	bc80      	pop	{r7}
 8006436:	4770      	bx	lr

08006438 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006440:	bf00      	nop
 8006442:	370c      	adds	r7, #12
 8006444:	46bd      	mov	sp, r7
 8006446:	bc80      	pop	{r7}
 8006448:	4770      	bx	lr

0800644a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800644a:	b480      	push	{r7}
 800644c:	b083      	sub	sp, #12
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006452:	bf00      	nop
 8006454:	370c      	adds	r7, #12
 8006456:	46bd      	mov	sp, r7
 8006458:	bc80      	pop	{r7}
 800645a:	4770      	bx	lr

0800645c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800645c:	b480      	push	{r7}
 800645e:	b083      	sub	sp, #12
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006464:	bf00      	nop
 8006466:	370c      	adds	r7, #12
 8006468:	46bd      	mov	sp, r7
 800646a:	bc80      	pop	{r7}
 800646c:	4770      	bx	lr
	...

08006470 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006470:	b480      	push	{r7}
 8006472:	b085      	sub	sp, #20
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	4a2f      	ldr	r2, [pc, #188]	@ (8006540 <TIM_Base_SetConfig+0xd0>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d00b      	beq.n	80064a0 <TIM_Base_SetConfig+0x30>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800648e:	d007      	beq.n	80064a0 <TIM_Base_SetConfig+0x30>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	4a2c      	ldr	r2, [pc, #176]	@ (8006544 <TIM_Base_SetConfig+0xd4>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d003      	beq.n	80064a0 <TIM_Base_SetConfig+0x30>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	4a2b      	ldr	r2, [pc, #172]	@ (8006548 <TIM_Base_SetConfig+0xd8>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d108      	bne.n	80064b2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	68fa      	ldr	r2, [r7, #12]
 80064ae:	4313      	orrs	r3, r2
 80064b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	4a22      	ldr	r2, [pc, #136]	@ (8006540 <TIM_Base_SetConfig+0xd0>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d00b      	beq.n	80064d2 <TIM_Base_SetConfig+0x62>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064c0:	d007      	beq.n	80064d2 <TIM_Base_SetConfig+0x62>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	4a1f      	ldr	r2, [pc, #124]	@ (8006544 <TIM_Base_SetConfig+0xd4>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d003      	beq.n	80064d2 <TIM_Base_SetConfig+0x62>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	4a1e      	ldr	r2, [pc, #120]	@ (8006548 <TIM_Base_SetConfig+0xd8>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d108      	bne.n	80064e4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	68db      	ldr	r3, [r3, #12]
 80064de:	68fa      	ldr	r2, [r7, #12]
 80064e0:	4313      	orrs	r3, r2
 80064e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	695b      	ldr	r3, [r3, #20]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	68fa      	ldr	r2, [r7, #12]
 80064f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	689a      	ldr	r2, [r3, #8]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	4a0d      	ldr	r2, [pc, #52]	@ (8006540 <TIM_Base_SetConfig+0xd0>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d103      	bne.n	8006518 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	691a      	ldr	r2, [r3, #16]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	f003 0301 	and.w	r3, r3, #1
 8006526:	2b00      	cmp	r3, #0
 8006528:	d005      	beq.n	8006536 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	691b      	ldr	r3, [r3, #16]
 800652e:	f023 0201 	bic.w	r2, r3, #1
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	611a      	str	r2, [r3, #16]
  }
}
 8006536:	bf00      	nop
 8006538:	3714      	adds	r7, #20
 800653a:	46bd      	mov	sp, r7
 800653c:	bc80      	pop	{r7}
 800653e:	4770      	bx	lr
 8006540:	40012c00 	.word	0x40012c00
 8006544:	40000400 	.word	0x40000400
 8006548:	40000800 	.word	0x40000800

0800654c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800654c:	b480      	push	{r7}
 800654e:	b087      	sub	sp, #28
 8006550:	af00      	add	r7, sp, #0
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	60b9      	str	r1, [r7, #8]
 8006556:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	f003 031f 	and.w	r3, r3, #31
 800655e:	2201      	movs	r2, #1
 8006560:	fa02 f303 	lsl.w	r3, r2, r3
 8006564:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	6a1a      	ldr	r2, [r3, #32]
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	43db      	mvns	r3, r3
 800656e:	401a      	ands	r2, r3
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	6a1a      	ldr	r2, [r3, #32]
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	f003 031f 	and.w	r3, r3, #31
 800657e:	6879      	ldr	r1, [r7, #4]
 8006580:	fa01 f303 	lsl.w	r3, r1, r3
 8006584:	431a      	orrs	r2, r3
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	621a      	str	r2, [r3, #32]
}
 800658a:	bf00      	nop
 800658c:	371c      	adds	r7, #28
 800658e:	46bd      	mov	sp, r7
 8006590:	bc80      	pop	{r7}
 8006592:	4770      	bx	lr

08006594 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006594:	b480      	push	{r7}
 8006596:	b085      	sub	sp, #20
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d101      	bne.n	80065ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80065a8:	2302      	movs	r3, #2
 80065aa:	e046      	b.n	800663a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2202      	movs	r2, #2
 80065b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	68fa      	ldr	r2, [r7, #12]
 80065da:	4313      	orrs	r3, r2
 80065dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	68fa      	ldr	r2, [r7, #12]
 80065e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a16      	ldr	r2, [pc, #88]	@ (8006644 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d00e      	beq.n	800660e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065f8:	d009      	beq.n	800660e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a12      	ldr	r2, [pc, #72]	@ (8006648 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d004      	beq.n	800660e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a10      	ldr	r2, [pc, #64]	@ (800664c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d10c      	bne.n	8006628 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006614:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	68ba      	ldr	r2, [r7, #8]
 800661c:	4313      	orrs	r3, r2
 800661e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	68ba      	ldr	r2, [r7, #8]
 8006626:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2201      	movs	r2, #1
 800662c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006638:	2300      	movs	r3, #0
}
 800663a:	4618      	mov	r0, r3
 800663c:	3714      	adds	r7, #20
 800663e:	46bd      	mov	sp, r7
 8006640:	bc80      	pop	{r7}
 8006642:	4770      	bx	lr
 8006644:	40012c00 	.word	0x40012c00
 8006648:	40000400 	.word	0x40000400
 800664c:	40000800 	.word	0x40000800

08006650 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006650:	b480      	push	{r7}
 8006652:	b083      	sub	sp, #12
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006658:	bf00      	nop
 800665a:	370c      	adds	r7, #12
 800665c:	46bd      	mov	sp, r7
 800665e:	bc80      	pop	{r7}
 8006660:	4770      	bx	lr

08006662 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006662:	b480      	push	{r7}
 8006664:	b083      	sub	sp, #12
 8006666:	af00      	add	r7, sp, #0
 8006668:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800666a:	bf00      	nop
 800666c:	370c      	adds	r7, #12
 800666e:	46bd      	mov	sp, r7
 8006670:	bc80      	pop	{r7}
 8006672:	4770      	bx	lr

08006674 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b082      	sub	sp, #8
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d101      	bne.n	8006686 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	e042      	b.n	800670c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800668c:	b2db      	uxtb	r3, r3
 800668e:	2b00      	cmp	r3, #0
 8006690:	d106      	bne.n	80066a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2200      	movs	r2, #0
 8006696:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f7fd f92c 	bl	80038f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2224      	movs	r2, #36	@ 0x24
 80066a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	68da      	ldr	r2, [r3, #12]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80066b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f000 ff4f 	bl	800755c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	691a      	ldr	r2, [r3, #16]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80066cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	695a      	ldr	r2, [r3, #20]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80066dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	68da      	ldr	r2, [r3, #12]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80066ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2200      	movs	r2, #0
 80066f2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2220      	movs	r2, #32
 80066f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2220      	movs	r2, #32
 8006700:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800670a:	2300      	movs	r3, #0
}
 800670c:	4618      	mov	r0, r3
 800670e:	3708      	adds	r7, #8
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b08a      	sub	sp, #40	@ 0x28
 8006718:	af02      	add	r7, sp, #8
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	60b9      	str	r1, [r7, #8]
 800671e:	603b      	str	r3, [r7, #0]
 8006720:	4613      	mov	r3, r2
 8006722:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006724:	2300      	movs	r3, #0
 8006726:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800672e:	b2db      	uxtb	r3, r3
 8006730:	2b20      	cmp	r3, #32
 8006732:	d175      	bne.n	8006820 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d002      	beq.n	8006740 <HAL_UART_Transmit+0x2c>
 800673a:	88fb      	ldrh	r3, [r7, #6]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d101      	bne.n	8006744 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	e06e      	b.n	8006822 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2200      	movs	r2, #0
 8006748:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2221      	movs	r2, #33	@ 0x21
 800674e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006752:	f7fd fa37 	bl	8003bc4 <HAL_GetTick>
 8006756:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	88fa      	ldrh	r2, [r7, #6]
 800675c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	88fa      	ldrh	r2, [r7, #6]
 8006762:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800676c:	d108      	bne.n	8006780 <HAL_UART_Transmit+0x6c>
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	691b      	ldr	r3, [r3, #16]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d104      	bne.n	8006780 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006776:	2300      	movs	r3, #0
 8006778:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	61bb      	str	r3, [r7, #24]
 800677e:	e003      	b.n	8006788 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006784:	2300      	movs	r3, #0
 8006786:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006788:	e02e      	b.n	80067e8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	9300      	str	r3, [sp, #0]
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	2200      	movs	r2, #0
 8006792:	2180      	movs	r1, #128	@ 0x80
 8006794:	68f8      	ldr	r0, [r7, #12]
 8006796:	f000 fc2c 	bl	8006ff2 <UART_WaitOnFlagUntilTimeout>
 800679a:	4603      	mov	r3, r0
 800679c:	2b00      	cmp	r3, #0
 800679e:	d005      	beq.n	80067ac <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2220      	movs	r2, #32
 80067a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80067a8:	2303      	movs	r3, #3
 80067aa:	e03a      	b.n	8006822 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80067ac:	69fb      	ldr	r3, [r7, #28]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d10b      	bne.n	80067ca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80067b2:	69bb      	ldr	r3, [r7, #24]
 80067b4:	881b      	ldrh	r3, [r3, #0]
 80067b6:	461a      	mov	r2, r3
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80067c2:	69bb      	ldr	r3, [r7, #24]
 80067c4:	3302      	adds	r3, #2
 80067c6:	61bb      	str	r3, [r7, #24]
 80067c8:	e007      	b.n	80067da <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	781a      	ldrb	r2, [r3, #0]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80067d4:	69fb      	ldr	r3, [r7, #28]
 80067d6:	3301      	adds	r3, #1
 80067d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80067de:	b29b      	uxth	r3, r3
 80067e0:	3b01      	subs	r3, #1
 80067e2:	b29a      	uxth	r2, r3
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d1cb      	bne.n	800678a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	9300      	str	r3, [sp, #0]
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	2200      	movs	r2, #0
 80067fa:	2140      	movs	r1, #64	@ 0x40
 80067fc:	68f8      	ldr	r0, [r7, #12]
 80067fe:	f000 fbf8 	bl	8006ff2 <UART_WaitOnFlagUntilTimeout>
 8006802:	4603      	mov	r3, r0
 8006804:	2b00      	cmp	r3, #0
 8006806:	d005      	beq.n	8006814 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2220      	movs	r2, #32
 800680c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006810:	2303      	movs	r3, #3
 8006812:	e006      	b.n	8006822 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2220      	movs	r2, #32
 8006818:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800681c:	2300      	movs	r3, #0
 800681e:	e000      	b.n	8006822 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006820:	2302      	movs	r3, #2
  }
}
 8006822:	4618      	mov	r0, r3
 8006824:	3720      	adds	r7, #32
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}

0800682a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800682a:	b580      	push	{r7, lr}
 800682c:	b084      	sub	sp, #16
 800682e:	af00      	add	r7, sp, #0
 8006830:	60f8      	str	r0, [r7, #12]
 8006832:	60b9      	str	r1, [r7, #8]
 8006834:	4613      	mov	r3, r2
 8006836:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800683e:	b2db      	uxtb	r3, r3
 8006840:	2b20      	cmp	r3, #32
 8006842:	d112      	bne.n	800686a <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d002      	beq.n	8006850 <HAL_UART_Receive_DMA+0x26>
 800684a:	88fb      	ldrh	r3, [r7, #6]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d101      	bne.n	8006854 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006850:	2301      	movs	r3, #1
 8006852:	e00b      	b.n	800686c <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2200      	movs	r2, #0
 8006858:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800685a:	88fb      	ldrh	r3, [r7, #6]
 800685c:	461a      	mov	r2, r3
 800685e:	68b9      	ldr	r1, [r7, #8]
 8006860:	68f8      	ldr	r0, [r7, #12]
 8006862:	f000 fc1f 	bl	80070a4 <UART_Start_Receive_DMA>
 8006866:	4603      	mov	r3, r0
 8006868:	e000      	b.n	800686c <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800686a:	2302      	movs	r3, #2
  }
}
 800686c:	4618      	mov	r0, r3
 800686e:	3710      	adds	r7, #16
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b0ba      	sub	sp, #232	@ 0xe8
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	68db      	ldr	r3, [r3, #12]
 800688c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	695b      	ldr	r3, [r3, #20]
 8006896:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800689a:	2300      	movs	r3, #0
 800689c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80068a0:	2300      	movs	r3, #0
 80068a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80068a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068aa:	f003 030f 	and.w	r3, r3, #15
 80068ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80068b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d10f      	bne.n	80068da <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80068ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068be:	f003 0320 	and.w	r3, r3, #32
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d009      	beq.n	80068da <HAL_UART_IRQHandler+0x66>
 80068c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068ca:	f003 0320 	and.w	r3, r3, #32
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d003      	beq.n	80068da <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 fd84 	bl	80073e0 <UART_Receive_IT>
      return;
 80068d8:	e25b      	b.n	8006d92 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80068da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80068de:	2b00      	cmp	r3, #0
 80068e0:	f000 80de 	beq.w	8006aa0 <HAL_UART_IRQHandler+0x22c>
 80068e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068e8:	f003 0301 	and.w	r3, r3, #1
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d106      	bne.n	80068fe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80068f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068f4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	f000 80d1 	beq.w	8006aa0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80068fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006902:	f003 0301 	and.w	r3, r3, #1
 8006906:	2b00      	cmp	r3, #0
 8006908:	d00b      	beq.n	8006922 <HAL_UART_IRQHandler+0xae>
 800690a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800690e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006912:	2b00      	cmp	r3, #0
 8006914:	d005      	beq.n	8006922 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800691a:	f043 0201 	orr.w	r2, r3, #1
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006926:	f003 0304 	and.w	r3, r3, #4
 800692a:	2b00      	cmp	r3, #0
 800692c:	d00b      	beq.n	8006946 <HAL_UART_IRQHandler+0xd2>
 800692e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006932:	f003 0301 	and.w	r3, r3, #1
 8006936:	2b00      	cmp	r3, #0
 8006938:	d005      	beq.n	8006946 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800693e:	f043 0202 	orr.w	r2, r3, #2
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800694a:	f003 0302 	and.w	r3, r3, #2
 800694e:	2b00      	cmp	r3, #0
 8006950:	d00b      	beq.n	800696a <HAL_UART_IRQHandler+0xf6>
 8006952:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006956:	f003 0301 	and.w	r3, r3, #1
 800695a:	2b00      	cmp	r3, #0
 800695c:	d005      	beq.n	800696a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006962:	f043 0204 	orr.w	r2, r3, #4
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800696a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800696e:	f003 0308 	and.w	r3, r3, #8
 8006972:	2b00      	cmp	r3, #0
 8006974:	d011      	beq.n	800699a <HAL_UART_IRQHandler+0x126>
 8006976:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800697a:	f003 0320 	and.w	r3, r3, #32
 800697e:	2b00      	cmp	r3, #0
 8006980:	d105      	bne.n	800698e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006982:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006986:	f003 0301 	and.w	r3, r3, #1
 800698a:	2b00      	cmp	r3, #0
 800698c:	d005      	beq.n	800699a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006992:	f043 0208 	orr.w	r2, r3, #8
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800699e:	2b00      	cmp	r3, #0
 80069a0:	f000 81f2 	beq.w	8006d88 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80069a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069a8:	f003 0320 	and.w	r3, r3, #32
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d008      	beq.n	80069c2 <HAL_UART_IRQHandler+0x14e>
 80069b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069b4:	f003 0320 	and.w	r3, r3, #32
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d002      	beq.n	80069c2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f000 fd0f 	bl	80073e0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	695b      	ldr	r3, [r3, #20]
 80069c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	bf14      	ite	ne
 80069d0:	2301      	movne	r3, #1
 80069d2:	2300      	moveq	r3, #0
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069de:	f003 0308 	and.w	r3, r3, #8
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d103      	bne.n	80069ee <HAL_UART_IRQHandler+0x17a>
 80069e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d04f      	beq.n	8006a8e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 fc19 	bl	8007226 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	695b      	ldr	r3, [r3, #20]
 80069fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d041      	beq.n	8006a86 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	3314      	adds	r3, #20
 8006a08:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006a10:	e853 3f00 	ldrex	r3, [r3]
 8006a14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006a18:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006a1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	3314      	adds	r3, #20
 8006a2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006a2e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006a32:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006a3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006a3e:	e841 2300 	strex	r3, r2, [r1]
 8006a42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006a46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d1d9      	bne.n	8006a02 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d013      	beq.n	8006a7e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a5a:	4a7e      	ldr	r2, [pc, #504]	@ (8006c54 <HAL_UART_IRQHandler+0x3e0>)
 8006a5c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a62:	4618      	mov	r0, r3
 8006a64:	f7fd fae0 	bl	8004028 <HAL_DMA_Abort_IT>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d016      	beq.n	8006a9c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006a78:	4610      	mov	r0, r2
 8006a7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a7c:	e00e      	b.n	8006a9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 f9a5 	bl	8006dce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a84:	e00a      	b.n	8006a9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 f9a1 	bl	8006dce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a8c:	e006      	b.n	8006a9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 f99d 	bl	8006dce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2200      	movs	r2, #0
 8006a98:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006a9a:	e175      	b.n	8006d88 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a9c:	bf00      	nop
    return;
 8006a9e:	e173      	b.n	8006d88 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	f040 814f 	bne.w	8006d48 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006aae:	f003 0310 	and.w	r3, r3, #16
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	f000 8148 	beq.w	8006d48 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006ab8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006abc:	f003 0310 	and.w	r3, r3, #16
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	f000 8141 	beq.w	8006d48 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	60bb      	str	r3, [r7, #8]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	60bb      	str	r3, [r7, #8]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	60bb      	str	r3, [r7, #8]
 8006ada:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	695b      	ldr	r3, [r3, #20]
 8006ae2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	f000 80b6 	beq.w	8006c58 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006af8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	f000 8145 	beq.w	8006d8c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006b06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	f080 813e 	bcs.w	8006d8c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006b16:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b1c:	699b      	ldr	r3, [r3, #24]
 8006b1e:	2b20      	cmp	r3, #32
 8006b20:	f000 8088 	beq.w	8006c34 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	330c      	adds	r3, #12
 8006b2a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006b32:	e853 3f00 	ldrex	r3, [r3]
 8006b36:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006b3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006b3e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b42:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	330c      	adds	r3, #12
 8006b4c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006b50:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006b54:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b58:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006b5c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006b60:	e841 2300 	strex	r3, r2, [r1]
 8006b64:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006b68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d1d9      	bne.n	8006b24 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	3314      	adds	r3, #20
 8006b76:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b78:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006b7a:	e853 3f00 	ldrex	r3, [r3]
 8006b7e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006b80:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006b82:	f023 0301 	bic.w	r3, r3, #1
 8006b86:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	3314      	adds	r3, #20
 8006b90:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006b94:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006b98:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b9a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006b9c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006ba0:	e841 2300 	strex	r3, r2, [r1]
 8006ba4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006ba6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d1e1      	bne.n	8006b70 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	3314      	adds	r3, #20
 8006bb2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006bb6:	e853 3f00 	ldrex	r3, [r3]
 8006bba:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006bbc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006bbe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006bc2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	3314      	adds	r3, #20
 8006bcc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006bd0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006bd2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006bd6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006bd8:	e841 2300 	strex	r3, r2, [r1]
 8006bdc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006bde:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d1e3      	bne.n	8006bac <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2220      	movs	r2, #32
 8006be8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	330c      	adds	r3, #12
 8006bf8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bfa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bfc:	e853 3f00 	ldrex	r3, [r3]
 8006c00:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006c02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c04:	f023 0310 	bic.w	r3, r3, #16
 8006c08:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	330c      	adds	r3, #12
 8006c12:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006c16:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006c18:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c1a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006c1c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006c1e:	e841 2300 	strex	r3, r2, [r1]
 8006c22:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006c24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d1e3      	bne.n	8006bf2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f7fd f9be 	bl	8003fb0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2202      	movs	r2, #2
 8006c38:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	1ad3      	subs	r3, r2, r3
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	4619      	mov	r1, r3
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f000 f8c8 	bl	8006de0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006c50:	e09c      	b.n	8006d8c <HAL_UART_IRQHandler+0x518>
 8006c52:	bf00      	nop
 8006c54:	080072eb 	.word	0x080072eb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	1ad3      	subs	r3, r2, r3
 8006c64:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	f000 808e 	beq.w	8006d90 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006c74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	f000 8089 	beq.w	8006d90 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	330c      	adds	r3, #12
 8006c84:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c88:	e853 3f00 	ldrex	r3, [r3]
 8006c8c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006c8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c94:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	330c      	adds	r3, #12
 8006c9e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006ca2:	647a      	str	r2, [r7, #68]	@ 0x44
 8006ca4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006ca8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006caa:	e841 2300 	strex	r3, r2, [r1]
 8006cae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006cb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d1e3      	bne.n	8006c7e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	3314      	adds	r3, #20
 8006cbc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc0:	e853 3f00 	ldrex	r3, [r3]
 8006cc4:	623b      	str	r3, [r7, #32]
   return(result);
 8006cc6:	6a3b      	ldr	r3, [r7, #32]
 8006cc8:	f023 0301 	bic.w	r3, r3, #1
 8006ccc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	3314      	adds	r3, #20
 8006cd6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006cda:	633a      	str	r2, [r7, #48]	@ 0x30
 8006cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cde:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ce0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ce2:	e841 2300 	strex	r3, r2, [r1]
 8006ce6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006ce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d1e3      	bne.n	8006cb6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2220      	movs	r2, #32
 8006cf2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	330c      	adds	r3, #12
 8006d02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	e853 3f00 	ldrex	r3, [r3]
 8006d0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f023 0310 	bic.w	r3, r3, #16
 8006d12:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	330c      	adds	r3, #12
 8006d1c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006d20:	61fa      	str	r2, [r7, #28]
 8006d22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d24:	69b9      	ldr	r1, [r7, #24]
 8006d26:	69fa      	ldr	r2, [r7, #28]
 8006d28:	e841 2300 	strex	r3, r2, [r1]
 8006d2c:	617b      	str	r3, [r7, #20]
   return(result);
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d1e3      	bne.n	8006cfc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2202      	movs	r2, #2
 8006d38:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006d3a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006d3e:	4619      	mov	r1, r3
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f000 f84d 	bl	8006de0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006d46:	e023      	b.n	8006d90 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006d48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d009      	beq.n	8006d68 <HAL_UART_IRQHandler+0x4f4>
 8006d54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d003      	beq.n	8006d68 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 fad6 	bl	8007312 <UART_Transmit_IT>
    return;
 8006d66:	e014      	b.n	8006d92 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006d68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d00e      	beq.n	8006d92 <HAL_UART_IRQHandler+0x51e>
 8006d74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d008      	beq.n	8006d92 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f000 fb15 	bl	80073b0 <UART_EndTransmit_IT>
    return;
 8006d86:	e004      	b.n	8006d92 <HAL_UART_IRQHandler+0x51e>
    return;
 8006d88:	bf00      	nop
 8006d8a:	e002      	b.n	8006d92 <HAL_UART_IRQHandler+0x51e>
      return;
 8006d8c:	bf00      	nop
 8006d8e:	e000      	b.n	8006d92 <HAL_UART_IRQHandler+0x51e>
      return;
 8006d90:	bf00      	nop
  }
}
 8006d92:	37e8      	adds	r7, #232	@ 0xe8
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b083      	sub	sp, #12
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006da0:	bf00      	nop
 8006da2:	370c      	adds	r7, #12
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bc80      	pop	{r7}
 8006da8:	4770      	bx	lr

08006daa <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006daa:	b480      	push	{r7}
 8006dac:	b083      	sub	sp, #12
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006db2:	bf00      	nop
 8006db4:	370c      	adds	r7, #12
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bc80      	pop	{r7}
 8006dba:	4770      	bx	lr

08006dbc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b083      	sub	sp, #12
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006dc4:	bf00      	nop
 8006dc6:	370c      	adds	r7, #12
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bc80      	pop	{r7}
 8006dcc:	4770      	bx	lr

08006dce <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006dce:	b480      	push	{r7}
 8006dd0:	b083      	sub	sp, #12
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006dd6:	bf00      	nop
 8006dd8:	370c      	adds	r7, #12
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bc80      	pop	{r7}
 8006dde:	4770      	bx	lr

08006de0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b083      	sub	sp, #12
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	460b      	mov	r3, r1
 8006dea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006dec:	bf00      	nop
 8006dee:	370c      	adds	r7, #12
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bc80      	pop	{r7}
 8006df4:	4770      	bx	lr

08006df6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006df6:	b580      	push	{r7, lr}
 8006df8:	b09c      	sub	sp, #112	@ 0x70
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e02:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f003 0320 	and.w	r3, r3, #32
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d172      	bne.n	8006ef8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006e12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e14:	2200      	movs	r2, #0
 8006e16:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	330c      	adds	r3, #12
 8006e1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e22:	e853 3f00 	ldrex	r3, [r3]
 8006e26:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006e28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e2a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e2e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006e30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	330c      	adds	r3, #12
 8006e36:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006e38:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006e3a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e3c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006e3e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006e40:	e841 2300 	strex	r3, r2, [r1]
 8006e44:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006e46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d1e5      	bne.n	8006e18 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	3314      	adds	r3, #20
 8006e52:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e56:	e853 3f00 	ldrex	r3, [r3]
 8006e5a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006e5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e5e:	f023 0301 	bic.w	r3, r3, #1
 8006e62:	667b      	str	r3, [r7, #100]	@ 0x64
 8006e64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	3314      	adds	r3, #20
 8006e6a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006e6c:	647a      	str	r2, [r7, #68]	@ 0x44
 8006e6e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e70:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006e72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e74:	e841 2300 	strex	r3, r2, [r1]
 8006e78:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006e7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d1e5      	bne.n	8006e4c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	3314      	adds	r3, #20
 8006e86:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e8a:	e853 3f00 	ldrex	r3, [r3]
 8006e8e:	623b      	str	r3, [r7, #32]
   return(result);
 8006e90:	6a3b      	ldr	r3, [r7, #32]
 8006e92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e96:	663b      	str	r3, [r7, #96]	@ 0x60
 8006e98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	3314      	adds	r3, #20
 8006e9e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006ea0:	633a      	str	r2, [r7, #48]	@ 0x30
 8006ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ea6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ea8:	e841 2300 	strex	r3, r2, [r1]
 8006eac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d1e5      	bne.n	8006e80 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006eb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006eb6:	2220      	movs	r2, #32
 8006eb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ebc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d119      	bne.n	8006ef8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ec4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	330c      	adds	r3, #12
 8006eca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	e853 3f00 	ldrex	r3, [r3]
 8006ed2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f023 0310 	bic.w	r3, r3, #16
 8006eda:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006edc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	330c      	adds	r3, #12
 8006ee2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006ee4:	61fa      	str	r2, [r7, #28]
 8006ee6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee8:	69b9      	ldr	r1, [r7, #24]
 8006eea:	69fa      	ldr	r2, [r7, #28]
 8006eec:	e841 2300 	strex	r3, r2, [r1]
 8006ef0:	617b      	str	r3, [r7, #20]
   return(result);
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d1e5      	bne.n	8006ec4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ef8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006efa:	2200      	movs	r2, #0
 8006efc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006efe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d106      	bne.n	8006f14 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f08:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006f0a:	4619      	mov	r1, r3
 8006f0c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006f0e:	f7ff ff67 	bl	8006de0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006f12:	e002      	b.n	8006f1a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006f14:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006f16:	f7ff ff48 	bl	8006daa <HAL_UART_RxCpltCallback>
}
 8006f1a:	bf00      	nop
 8006f1c:	3770      	adds	r7, #112	@ 0x70
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}

08006f22 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006f22:	b580      	push	{r7, lr}
 8006f24:	b084      	sub	sp, #16
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f2e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2201      	movs	r2, #1
 8006f34:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d108      	bne.n	8006f50 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006f42:	085b      	lsrs	r3, r3, #1
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	4619      	mov	r1, r3
 8006f48:	68f8      	ldr	r0, [r7, #12]
 8006f4a:	f7ff ff49 	bl	8006de0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006f4e:	e002      	b.n	8006f56 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006f50:	68f8      	ldr	r0, [r7, #12]
 8006f52:	f7ff ff33 	bl	8006dbc <HAL_UART_RxHalfCpltCallback>
}
 8006f56:	bf00      	nop
 8006f58:	3710      	adds	r7, #16
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}

08006f5e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006f5e:	b580      	push	{r7, lr}
 8006f60:	b084      	sub	sp, #16
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006f66:	2300      	movs	r3, #0
 8006f68:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f6e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	695b      	ldr	r3, [r3, #20]
 8006f76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	bf14      	ite	ne
 8006f7e:	2301      	movne	r3, #1
 8006f80:	2300      	moveq	r3, #0
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	2b21      	cmp	r3, #33	@ 0x21
 8006f90:	d108      	bne.n	8006fa4 <UART_DMAError+0x46>
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d005      	beq.n	8006fa4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006f9e:	68b8      	ldr	r0, [r7, #8]
 8006fa0:	f000 f91a 	bl	80071d8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	695b      	ldr	r3, [r3, #20]
 8006faa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	bf14      	ite	ne
 8006fb2:	2301      	movne	r3, #1
 8006fb4:	2300      	moveq	r3, #0
 8006fb6:	b2db      	uxtb	r3, r3
 8006fb8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006fc0:	b2db      	uxtb	r3, r3
 8006fc2:	2b22      	cmp	r3, #34	@ 0x22
 8006fc4:	d108      	bne.n	8006fd8 <UART_DMAError+0x7a>
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d005      	beq.n	8006fd8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006fd2:	68b8      	ldr	r0, [r7, #8]
 8006fd4:	f000 f927 	bl	8007226 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fdc:	f043 0210 	orr.w	r2, r3, #16
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006fe4:	68b8      	ldr	r0, [r7, #8]
 8006fe6:	f7ff fef2 	bl	8006dce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fea:	bf00      	nop
 8006fec:	3710      	adds	r7, #16
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}

08006ff2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006ff2:	b580      	push	{r7, lr}
 8006ff4:	b086      	sub	sp, #24
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	60f8      	str	r0, [r7, #12]
 8006ffa:	60b9      	str	r1, [r7, #8]
 8006ffc:	603b      	str	r3, [r7, #0]
 8006ffe:	4613      	mov	r3, r2
 8007000:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007002:	e03b      	b.n	800707c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007004:	6a3b      	ldr	r3, [r7, #32]
 8007006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800700a:	d037      	beq.n	800707c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800700c:	f7fc fdda 	bl	8003bc4 <HAL_GetTick>
 8007010:	4602      	mov	r2, r0
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	1ad3      	subs	r3, r2, r3
 8007016:	6a3a      	ldr	r2, [r7, #32]
 8007018:	429a      	cmp	r2, r3
 800701a:	d302      	bcc.n	8007022 <UART_WaitOnFlagUntilTimeout+0x30>
 800701c:	6a3b      	ldr	r3, [r7, #32]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d101      	bne.n	8007026 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007022:	2303      	movs	r3, #3
 8007024:	e03a      	b.n	800709c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	68db      	ldr	r3, [r3, #12]
 800702c:	f003 0304 	and.w	r3, r3, #4
 8007030:	2b00      	cmp	r3, #0
 8007032:	d023      	beq.n	800707c <UART_WaitOnFlagUntilTimeout+0x8a>
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	2b80      	cmp	r3, #128	@ 0x80
 8007038:	d020      	beq.n	800707c <UART_WaitOnFlagUntilTimeout+0x8a>
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	2b40      	cmp	r3, #64	@ 0x40
 800703e:	d01d      	beq.n	800707c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f003 0308 	and.w	r3, r3, #8
 800704a:	2b08      	cmp	r3, #8
 800704c:	d116      	bne.n	800707c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800704e:	2300      	movs	r3, #0
 8007050:	617b      	str	r3, [r7, #20]
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	617b      	str	r3, [r7, #20]
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	617b      	str	r3, [r7, #20]
 8007062:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007064:	68f8      	ldr	r0, [r7, #12]
 8007066:	f000 f8de 	bl	8007226 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2208      	movs	r2, #8
 800706e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2200      	movs	r2, #0
 8007074:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007078:	2301      	movs	r3, #1
 800707a:	e00f      	b.n	800709c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	4013      	ands	r3, r2
 8007086:	68ba      	ldr	r2, [r7, #8]
 8007088:	429a      	cmp	r2, r3
 800708a:	bf0c      	ite	eq
 800708c:	2301      	moveq	r3, #1
 800708e:	2300      	movne	r3, #0
 8007090:	b2db      	uxtb	r3, r3
 8007092:	461a      	mov	r2, r3
 8007094:	79fb      	ldrb	r3, [r7, #7]
 8007096:	429a      	cmp	r2, r3
 8007098:	d0b4      	beq.n	8007004 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800709a:	2300      	movs	r3, #0
}
 800709c:	4618      	mov	r0, r3
 800709e:	3718      	adds	r7, #24
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}

080070a4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b098      	sub	sp, #96	@ 0x60
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	60f8      	str	r0, [r7, #12]
 80070ac:	60b9      	str	r1, [r7, #8]
 80070ae:	4613      	mov	r3, r2
 80070b0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80070b2:	68ba      	ldr	r2, [r7, #8]
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	88fa      	ldrh	r2, [r7, #6]
 80070bc:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2200      	movs	r2, #0
 80070c2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2222      	movs	r2, #34	@ 0x22
 80070c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070d0:	4a3e      	ldr	r2, [pc, #248]	@ (80071cc <UART_Start_Receive_DMA+0x128>)
 80070d2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070d8:	4a3d      	ldr	r2, [pc, #244]	@ (80071d0 <UART_Start_Receive_DMA+0x12c>)
 80070da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070e0:	4a3c      	ldr	r2, [pc, #240]	@ (80071d4 <UART_Start_Receive_DMA+0x130>)
 80070e2:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070e8:	2200      	movs	r2, #0
 80070ea:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80070ec:	f107 0308 	add.w	r3, r7, #8
 80070f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	3304      	adds	r3, #4
 80070fc:	4619      	mov	r1, r3
 80070fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	88fb      	ldrh	r3, [r7, #6]
 8007104:	f7fc fef4 	bl	8003ef0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007108:	2300      	movs	r3, #0
 800710a:	613b      	str	r3, [r7, #16]
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	613b      	str	r3, [r7, #16]
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	613b      	str	r3, [r7, #16]
 800711c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	691b      	ldr	r3, [r3, #16]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d019      	beq.n	800715a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	330c      	adds	r3, #12
 800712c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800712e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007130:	e853 3f00 	ldrex	r3, [r3]
 8007134:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007136:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007138:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800713c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	330c      	adds	r3, #12
 8007144:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007146:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8007148:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800714a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800714c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800714e:	e841 2300 	strex	r3, r2, [r1]
 8007152:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007154:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007156:	2b00      	cmp	r3, #0
 8007158:	d1e5      	bne.n	8007126 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	3314      	adds	r3, #20
 8007160:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007162:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007164:	e853 3f00 	ldrex	r3, [r3]
 8007168:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800716a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800716c:	f043 0301 	orr.w	r3, r3, #1
 8007170:	657b      	str	r3, [r7, #84]	@ 0x54
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	3314      	adds	r3, #20
 8007178:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800717a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800717c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800717e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007180:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007182:	e841 2300 	strex	r3, r2, [r1]
 8007186:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800718a:	2b00      	cmp	r3, #0
 800718c:	d1e5      	bne.n	800715a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	3314      	adds	r3, #20
 8007194:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007196:	69bb      	ldr	r3, [r7, #24]
 8007198:	e853 3f00 	ldrex	r3, [r3]
 800719c:	617b      	str	r3, [r7, #20]
   return(result);
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80071a4:	653b      	str	r3, [r7, #80]	@ 0x50
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	3314      	adds	r3, #20
 80071ac:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80071ae:	627a      	str	r2, [r7, #36]	@ 0x24
 80071b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b2:	6a39      	ldr	r1, [r7, #32]
 80071b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071b6:	e841 2300 	strex	r3, r2, [r1]
 80071ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80071bc:	69fb      	ldr	r3, [r7, #28]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d1e5      	bne.n	800718e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80071c2:	2300      	movs	r3, #0
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3760      	adds	r7, #96	@ 0x60
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}
 80071cc:	08006df7 	.word	0x08006df7
 80071d0:	08006f23 	.word	0x08006f23
 80071d4:	08006f5f 	.word	0x08006f5f

080071d8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80071d8:	b480      	push	{r7}
 80071da:	b089      	sub	sp, #36	@ 0x24
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	330c      	adds	r3, #12
 80071e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	e853 3f00 	ldrex	r3, [r3]
 80071ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80071f6:	61fb      	str	r3, [r7, #28]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	330c      	adds	r3, #12
 80071fe:	69fa      	ldr	r2, [r7, #28]
 8007200:	61ba      	str	r2, [r7, #24]
 8007202:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007204:	6979      	ldr	r1, [r7, #20]
 8007206:	69ba      	ldr	r2, [r7, #24]
 8007208:	e841 2300 	strex	r3, r2, [r1]
 800720c:	613b      	str	r3, [r7, #16]
   return(result);
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d1e5      	bne.n	80071e0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2220      	movs	r2, #32
 8007218:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800721c:	bf00      	nop
 800721e:	3724      	adds	r7, #36	@ 0x24
 8007220:	46bd      	mov	sp, r7
 8007222:	bc80      	pop	{r7}
 8007224:	4770      	bx	lr

08007226 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007226:	b480      	push	{r7}
 8007228:	b095      	sub	sp, #84	@ 0x54
 800722a:	af00      	add	r7, sp, #0
 800722c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	330c      	adds	r3, #12
 8007234:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007236:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007238:	e853 3f00 	ldrex	r3, [r3]
 800723c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800723e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007240:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007244:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	330c      	adds	r3, #12
 800724c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800724e:	643a      	str	r2, [r7, #64]	@ 0x40
 8007250:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007252:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007254:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007256:	e841 2300 	strex	r3, r2, [r1]
 800725a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800725c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800725e:	2b00      	cmp	r3, #0
 8007260:	d1e5      	bne.n	800722e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	3314      	adds	r3, #20
 8007268:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800726a:	6a3b      	ldr	r3, [r7, #32]
 800726c:	e853 3f00 	ldrex	r3, [r3]
 8007270:	61fb      	str	r3, [r7, #28]
   return(result);
 8007272:	69fb      	ldr	r3, [r7, #28]
 8007274:	f023 0301 	bic.w	r3, r3, #1
 8007278:	64bb      	str	r3, [r7, #72]	@ 0x48
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	3314      	adds	r3, #20
 8007280:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007282:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007284:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007286:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007288:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800728a:	e841 2300 	strex	r3, r2, [r1]
 800728e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007292:	2b00      	cmp	r3, #0
 8007294:	d1e5      	bne.n	8007262 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800729a:	2b01      	cmp	r3, #1
 800729c:	d119      	bne.n	80072d2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	330c      	adds	r3, #12
 80072a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	e853 3f00 	ldrex	r3, [r3]
 80072ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	f023 0310 	bic.w	r3, r3, #16
 80072b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	330c      	adds	r3, #12
 80072bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80072be:	61ba      	str	r2, [r7, #24]
 80072c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c2:	6979      	ldr	r1, [r7, #20]
 80072c4:	69ba      	ldr	r2, [r7, #24]
 80072c6:	e841 2300 	strex	r3, r2, [r1]
 80072ca:	613b      	str	r3, [r7, #16]
   return(result);
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d1e5      	bne.n	800729e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2220      	movs	r2, #32
 80072d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2200      	movs	r2, #0
 80072de:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80072e0:	bf00      	nop
 80072e2:	3754      	adds	r7, #84	@ 0x54
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bc80      	pop	{r7}
 80072e8:	4770      	bx	lr

080072ea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80072ea:	b580      	push	{r7, lr}
 80072ec:	b084      	sub	sp, #16
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2200      	movs	r2, #0
 80072fc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2200      	movs	r2, #0
 8007302:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007304:	68f8      	ldr	r0, [r7, #12]
 8007306:	f7ff fd62 	bl	8006dce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800730a:	bf00      	nop
 800730c:	3710      	adds	r7, #16
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}

08007312 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007312:	b480      	push	{r7}
 8007314:	b085      	sub	sp, #20
 8007316:	af00      	add	r7, sp, #0
 8007318:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007320:	b2db      	uxtb	r3, r3
 8007322:	2b21      	cmp	r3, #33	@ 0x21
 8007324:	d13e      	bne.n	80073a4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	689b      	ldr	r3, [r3, #8]
 800732a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800732e:	d114      	bne.n	800735a <UART_Transmit_IT+0x48>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	691b      	ldr	r3, [r3, #16]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d110      	bne.n	800735a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6a1b      	ldr	r3, [r3, #32]
 800733c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	881b      	ldrh	r3, [r3, #0]
 8007342:	461a      	mov	r2, r3
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800734c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6a1b      	ldr	r3, [r3, #32]
 8007352:	1c9a      	adds	r2, r3, #2
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	621a      	str	r2, [r3, #32]
 8007358:	e008      	b.n	800736c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6a1b      	ldr	r3, [r3, #32]
 800735e:	1c59      	adds	r1, r3, #1
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	6211      	str	r1, [r2, #32]
 8007364:	781a      	ldrb	r2, [r3, #0]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007370:	b29b      	uxth	r3, r3
 8007372:	3b01      	subs	r3, #1
 8007374:	b29b      	uxth	r3, r3
 8007376:	687a      	ldr	r2, [r7, #4]
 8007378:	4619      	mov	r1, r3
 800737a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800737c:	2b00      	cmp	r3, #0
 800737e:	d10f      	bne.n	80073a0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	68da      	ldr	r2, [r3, #12]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800738e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	68da      	ldr	r2, [r3, #12]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800739e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80073a0:	2300      	movs	r3, #0
 80073a2:	e000      	b.n	80073a6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80073a4:	2302      	movs	r3, #2
  }
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3714      	adds	r7, #20
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bc80      	pop	{r7}
 80073ae:	4770      	bx	lr

080073b0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b082      	sub	sp, #8
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	68da      	ldr	r2, [r3, #12]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80073c6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2220      	movs	r2, #32
 80073cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f7ff fce1 	bl	8006d98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80073d6:	2300      	movs	r3, #0
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3708      	adds	r7, #8
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}

080073e0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b08c      	sub	sp, #48	@ 0x30
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80073ee:	b2db      	uxtb	r3, r3
 80073f0:	2b22      	cmp	r3, #34	@ 0x22
 80073f2:	f040 80ae 	bne.w	8007552 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073fe:	d117      	bne.n	8007430 <UART_Receive_IT+0x50>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	691b      	ldr	r3, [r3, #16]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d113      	bne.n	8007430 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007408:	2300      	movs	r3, #0
 800740a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007410:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	b29b      	uxth	r3, r3
 800741a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800741e:	b29a      	uxth	r2, r3
 8007420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007422:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007428:	1c9a      	adds	r2, r3, #2
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	629a      	str	r2, [r3, #40]	@ 0x28
 800742e:	e026      	b.n	800747e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007434:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007436:	2300      	movs	r3, #0
 8007438:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007442:	d007      	beq.n	8007454 <UART_Receive_IT+0x74>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d10a      	bne.n	8007462 <UART_Receive_IT+0x82>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	691b      	ldr	r3, [r3, #16]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d106      	bne.n	8007462 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	b2da      	uxtb	r2, r3
 800745c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800745e:	701a      	strb	r2, [r3, #0]
 8007460:	e008      	b.n	8007474 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	b2db      	uxtb	r3, r3
 800746a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800746e:	b2da      	uxtb	r2, r3
 8007470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007472:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007478:	1c5a      	adds	r2, r3, #1
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007482:	b29b      	uxth	r3, r3
 8007484:	3b01      	subs	r3, #1
 8007486:	b29b      	uxth	r3, r3
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	4619      	mov	r1, r3
 800748c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800748e:	2b00      	cmp	r3, #0
 8007490:	d15d      	bne.n	800754e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	68da      	ldr	r2, [r3, #12]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f022 0220 	bic.w	r2, r2, #32
 80074a0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	68da      	ldr	r2, [r3, #12]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80074b0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	695a      	ldr	r2, [r3, #20]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f022 0201 	bic.w	r2, r2, #1
 80074c0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2220      	movs	r2, #32
 80074c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	d135      	bne.n	8007544 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2200      	movs	r2, #0
 80074dc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	330c      	adds	r3, #12
 80074e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	e853 3f00 	ldrex	r3, [r3]
 80074ec:	613b      	str	r3, [r7, #16]
   return(result);
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	f023 0310 	bic.w	r3, r3, #16
 80074f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	330c      	adds	r3, #12
 80074fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074fe:	623a      	str	r2, [r7, #32]
 8007500:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007502:	69f9      	ldr	r1, [r7, #28]
 8007504:	6a3a      	ldr	r2, [r7, #32]
 8007506:	e841 2300 	strex	r3, r2, [r1]
 800750a:	61bb      	str	r3, [r7, #24]
   return(result);
 800750c:	69bb      	ldr	r3, [r7, #24]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d1e5      	bne.n	80074de <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f003 0310 	and.w	r3, r3, #16
 800751c:	2b10      	cmp	r3, #16
 800751e:	d10a      	bne.n	8007536 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007520:	2300      	movs	r3, #0
 8007522:	60fb      	str	r3, [r7, #12]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	60fb      	str	r3, [r7, #12]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	60fb      	str	r3, [r7, #12]
 8007534:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800753a:	4619      	mov	r1, r3
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f7ff fc4f 	bl	8006de0 <HAL_UARTEx_RxEventCallback>
 8007542:	e002      	b.n	800754a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f7ff fc30 	bl	8006daa <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800754a:	2300      	movs	r3, #0
 800754c:	e002      	b.n	8007554 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800754e:	2300      	movs	r3, #0
 8007550:	e000      	b.n	8007554 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007552:	2302      	movs	r3, #2
  }
}
 8007554:	4618      	mov	r0, r3
 8007556:	3730      	adds	r7, #48	@ 0x30
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}

0800755c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b084      	sub	sp, #16
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	691b      	ldr	r3, [r3, #16]
 800756a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	68da      	ldr	r2, [r3, #12]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	430a      	orrs	r2, r1
 8007578:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	689a      	ldr	r2, [r3, #8]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	691b      	ldr	r3, [r3, #16]
 8007582:	431a      	orrs	r2, r3
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	695b      	ldr	r3, [r3, #20]
 8007588:	4313      	orrs	r3, r2
 800758a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	68db      	ldr	r3, [r3, #12]
 8007592:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8007596:	f023 030c 	bic.w	r3, r3, #12
 800759a:	687a      	ldr	r2, [r7, #4]
 800759c:	6812      	ldr	r2, [r2, #0]
 800759e:	68b9      	ldr	r1, [r7, #8]
 80075a0:	430b      	orrs	r3, r1
 80075a2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	695b      	ldr	r3, [r3, #20]
 80075aa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	699a      	ldr	r2, [r3, #24]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	430a      	orrs	r2, r1
 80075b8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a2c      	ldr	r2, [pc, #176]	@ (8007670 <UART_SetConfig+0x114>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d103      	bne.n	80075cc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80075c4:	f7fe fcd4 	bl	8005f70 <HAL_RCC_GetPCLK2Freq>
 80075c8:	60f8      	str	r0, [r7, #12]
 80075ca:	e002      	b.n	80075d2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80075cc:	f7fe fcbc 	bl	8005f48 <HAL_RCC_GetPCLK1Freq>
 80075d0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80075d2:	68fa      	ldr	r2, [r7, #12]
 80075d4:	4613      	mov	r3, r2
 80075d6:	009b      	lsls	r3, r3, #2
 80075d8:	4413      	add	r3, r2
 80075da:	009a      	lsls	r2, r3, #2
 80075dc:	441a      	add	r2, r3
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	009b      	lsls	r3, r3, #2
 80075e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80075e8:	4a22      	ldr	r2, [pc, #136]	@ (8007674 <UART_SetConfig+0x118>)
 80075ea:	fba2 2303 	umull	r2, r3, r2, r3
 80075ee:	095b      	lsrs	r3, r3, #5
 80075f0:	0119      	lsls	r1, r3, #4
 80075f2:	68fa      	ldr	r2, [r7, #12]
 80075f4:	4613      	mov	r3, r2
 80075f6:	009b      	lsls	r3, r3, #2
 80075f8:	4413      	add	r3, r2
 80075fa:	009a      	lsls	r2, r3, #2
 80075fc:	441a      	add	r2, r3
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	009b      	lsls	r3, r3, #2
 8007604:	fbb2 f2f3 	udiv	r2, r2, r3
 8007608:	4b1a      	ldr	r3, [pc, #104]	@ (8007674 <UART_SetConfig+0x118>)
 800760a:	fba3 0302 	umull	r0, r3, r3, r2
 800760e:	095b      	lsrs	r3, r3, #5
 8007610:	2064      	movs	r0, #100	@ 0x64
 8007612:	fb00 f303 	mul.w	r3, r0, r3
 8007616:	1ad3      	subs	r3, r2, r3
 8007618:	011b      	lsls	r3, r3, #4
 800761a:	3332      	adds	r3, #50	@ 0x32
 800761c:	4a15      	ldr	r2, [pc, #84]	@ (8007674 <UART_SetConfig+0x118>)
 800761e:	fba2 2303 	umull	r2, r3, r2, r3
 8007622:	095b      	lsrs	r3, r3, #5
 8007624:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007628:	4419      	add	r1, r3
 800762a:	68fa      	ldr	r2, [r7, #12]
 800762c:	4613      	mov	r3, r2
 800762e:	009b      	lsls	r3, r3, #2
 8007630:	4413      	add	r3, r2
 8007632:	009a      	lsls	r2, r3, #2
 8007634:	441a      	add	r2, r3
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	009b      	lsls	r3, r3, #2
 800763c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007640:	4b0c      	ldr	r3, [pc, #48]	@ (8007674 <UART_SetConfig+0x118>)
 8007642:	fba3 0302 	umull	r0, r3, r3, r2
 8007646:	095b      	lsrs	r3, r3, #5
 8007648:	2064      	movs	r0, #100	@ 0x64
 800764a:	fb00 f303 	mul.w	r3, r0, r3
 800764e:	1ad3      	subs	r3, r2, r3
 8007650:	011b      	lsls	r3, r3, #4
 8007652:	3332      	adds	r3, #50	@ 0x32
 8007654:	4a07      	ldr	r2, [pc, #28]	@ (8007674 <UART_SetConfig+0x118>)
 8007656:	fba2 2303 	umull	r2, r3, r2, r3
 800765a:	095b      	lsrs	r3, r3, #5
 800765c:	f003 020f 	and.w	r2, r3, #15
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	440a      	add	r2, r1
 8007666:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007668:	bf00      	nop
 800766a:	3710      	adds	r7, #16
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}
 8007670:	40013800 	.word	0x40013800
 8007674:	51eb851f 	.word	0x51eb851f

08007678 <sulp>:
 8007678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800767c:	460f      	mov	r7, r1
 800767e:	4690      	mov	r8, r2
 8007680:	f002 f892 	bl	80097a8 <__ulp>
 8007684:	4604      	mov	r4, r0
 8007686:	460d      	mov	r5, r1
 8007688:	f1b8 0f00 	cmp.w	r8, #0
 800768c:	d011      	beq.n	80076b2 <sulp+0x3a>
 800768e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8007692:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007696:	2b00      	cmp	r3, #0
 8007698:	dd0b      	ble.n	80076b2 <sulp+0x3a>
 800769a:	2400      	movs	r4, #0
 800769c:	051b      	lsls	r3, r3, #20
 800769e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80076a2:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80076a6:	4622      	mov	r2, r4
 80076a8:	462b      	mov	r3, r5
 80076aa:	f7f8 ff17 	bl	80004dc <__aeabi_dmul>
 80076ae:	4604      	mov	r4, r0
 80076b0:	460d      	mov	r5, r1
 80076b2:	4620      	mov	r0, r4
 80076b4:	4629      	mov	r1, r5
 80076b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076ba:	0000      	movs	r0, r0
 80076bc:	0000      	movs	r0, r0
	...

080076c0 <_strtod_l>:
 80076c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076c4:	b09f      	sub	sp, #124	@ 0x7c
 80076c6:	9217      	str	r2, [sp, #92]	@ 0x5c
 80076c8:	2200      	movs	r2, #0
 80076ca:	460c      	mov	r4, r1
 80076cc:	921a      	str	r2, [sp, #104]	@ 0x68
 80076ce:	f04f 0a00 	mov.w	sl, #0
 80076d2:	f04f 0b00 	mov.w	fp, #0
 80076d6:	460a      	mov	r2, r1
 80076d8:	9005      	str	r0, [sp, #20]
 80076da:	9219      	str	r2, [sp, #100]	@ 0x64
 80076dc:	7811      	ldrb	r1, [r2, #0]
 80076de:	292b      	cmp	r1, #43	@ 0x2b
 80076e0:	d048      	beq.n	8007774 <_strtod_l+0xb4>
 80076e2:	d836      	bhi.n	8007752 <_strtod_l+0x92>
 80076e4:	290d      	cmp	r1, #13
 80076e6:	d830      	bhi.n	800774a <_strtod_l+0x8a>
 80076e8:	2908      	cmp	r1, #8
 80076ea:	d830      	bhi.n	800774e <_strtod_l+0x8e>
 80076ec:	2900      	cmp	r1, #0
 80076ee:	d039      	beq.n	8007764 <_strtod_l+0xa4>
 80076f0:	2200      	movs	r2, #0
 80076f2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80076f4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80076f6:	782a      	ldrb	r2, [r5, #0]
 80076f8:	2a30      	cmp	r2, #48	@ 0x30
 80076fa:	f040 80b1 	bne.w	8007860 <_strtod_l+0x1a0>
 80076fe:	786a      	ldrb	r2, [r5, #1]
 8007700:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007704:	2a58      	cmp	r2, #88	@ 0x58
 8007706:	d16c      	bne.n	80077e2 <_strtod_l+0x122>
 8007708:	9302      	str	r3, [sp, #8]
 800770a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800770c:	4a8e      	ldr	r2, [pc, #568]	@ (8007948 <_strtod_l+0x288>)
 800770e:	9301      	str	r3, [sp, #4]
 8007710:	ab1a      	add	r3, sp, #104	@ 0x68
 8007712:	9300      	str	r3, [sp, #0]
 8007714:	9805      	ldr	r0, [sp, #20]
 8007716:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007718:	a919      	add	r1, sp, #100	@ 0x64
 800771a:	f001 f941 	bl	80089a0 <__gethex>
 800771e:	f010 060f 	ands.w	r6, r0, #15
 8007722:	4604      	mov	r4, r0
 8007724:	d005      	beq.n	8007732 <_strtod_l+0x72>
 8007726:	2e06      	cmp	r6, #6
 8007728:	d126      	bne.n	8007778 <_strtod_l+0xb8>
 800772a:	2300      	movs	r3, #0
 800772c:	3501      	adds	r5, #1
 800772e:	9519      	str	r5, [sp, #100]	@ 0x64
 8007730:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007732:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007734:	2b00      	cmp	r3, #0
 8007736:	f040 8584 	bne.w	8008242 <_strtod_l+0xb82>
 800773a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800773c:	b1bb      	cbz	r3, 800776e <_strtod_l+0xae>
 800773e:	4650      	mov	r0, sl
 8007740:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8007744:	b01f      	add	sp, #124	@ 0x7c
 8007746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800774a:	2920      	cmp	r1, #32
 800774c:	d1d0      	bne.n	80076f0 <_strtod_l+0x30>
 800774e:	3201      	adds	r2, #1
 8007750:	e7c3      	b.n	80076da <_strtod_l+0x1a>
 8007752:	292d      	cmp	r1, #45	@ 0x2d
 8007754:	d1cc      	bne.n	80076f0 <_strtod_l+0x30>
 8007756:	2101      	movs	r1, #1
 8007758:	910b      	str	r1, [sp, #44]	@ 0x2c
 800775a:	1c51      	adds	r1, r2, #1
 800775c:	9119      	str	r1, [sp, #100]	@ 0x64
 800775e:	7852      	ldrb	r2, [r2, #1]
 8007760:	2a00      	cmp	r2, #0
 8007762:	d1c7      	bne.n	80076f4 <_strtod_l+0x34>
 8007764:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007766:	9419      	str	r4, [sp, #100]	@ 0x64
 8007768:	2b00      	cmp	r3, #0
 800776a:	f040 8568 	bne.w	800823e <_strtod_l+0xb7e>
 800776e:	4650      	mov	r0, sl
 8007770:	4659      	mov	r1, fp
 8007772:	e7e7      	b.n	8007744 <_strtod_l+0x84>
 8007774:	2100      	movs	r1, #0
 8007776:	e7ef      	b.n	8007758 <_strtod_l+0x98>
 8007778:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800777a:	b13a      	cbz	r2, 800778c <_strtod_l+0xcc>
 800777c:	2135      	movs	r1, #53	@ 0x35
 800777e:	a81c      	add	r0, sp, #112	@ 0x70
 8007780:	f002 f902 	bl	8009988 <__copybits>
 8007784:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007786:	9805      	ldr	r0, [sp, #20]
 8007788:	f001 fcdc 	bl	8009144 <_Bfree>
 800778c:	3e01      	subs	r6, #1
 800778e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007790:	2e04      	cmp	r6, #4
 8007792:	d806      	bhi.n	80077a2 <_strtod_l+0xe2>
 8007794:	e8df f006 	tbb	[pc, r6]
 8007798:	201d0314 	.word	0x201d0314
 800779c:	14          	.byte	0x14
 800779d:	00          	.byte	0x00
 800779e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80077a2:	05e1      	lsls	r1, r4, #23
 80077a4:	bf48      	it	mi
 80077a6:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80077aa:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80077ae:	0d1b      	lsrs	r3, r3, #20
 80077b0:	051b      	lsls	r3, r3, #20
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d1bd      	bne.n	8007732 <_strtod_l+0x72>
 80077b6:	f000 fff5 	bl	80087a4 <__errno>
 80077ba:	2322      	movs	r3, #34	@ 0x22
 80077bc:	6003      	str	r3, [r0, #0]
 80077be:	e7b8      	b.n	8007732 <_strtod_l+0x72>
 80077c0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80077c4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80077c8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80077cc:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80077d0:	e7e7      	b.n	80077a2 <_strtod_l+0xe2>
 80077d2:	f8df b178 	ldr.w	fp, [pc, #376]	@ 800794c <_strtod_l+0x28c>
 80077d6:	e7e4      	b.n	80077a2 <_strtod_l+0xe2>
 80077d8:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80077dc:	f04f 3aff 	mov.w	sl, #4294967295
 80077e0:	e7df      	b.n	80077a2 <_strtod_l+0xe2>
 80077e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80077e4:	1c5a      	adds	r2, r3, #1
 80077e6:	9219      	str	r2, [sp, #100]	@ 0x64
 80077e8:	785b      	ldrb	r3, [r3, #1]
 80077ea:	2b30      	cmp	r3, #48	@ 0x30
 80077ec:	d0f9      	beq.n	80077e2 <_strtod_l+0x122>
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d09f      	beq.n	8007732 <_strtod_l+0x72>
 80077f2:	2301      	movs	r3, #1
 80077f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80077f6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80077f8:	220a      	movs	r2, #10
 80077fa:	930c      	str	r3, [sp, #48]	@ 0x30
 80077fc:	2300      	movs	r3, #0
 80077fe:	461f      	mov	r7, r3
 8007800:	9308      	str	r3, [sp, #32]
 8007802:	930a      	str	r3, [sp, #40]	@ 0x28
 8007804:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007806:	7805      	ldrb	r5, [r0, #0]
 8007808:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800780c:	b2d9      	uxtb	r1, r3
 800780e:	2909      	cmp	r1, #9
 8007810:	d928      	bls.n	8007864 <_strtod_l+0x1a4>
 8007812:	2201      	movs	r2, #1
 8007814:	494e      	ldr	r1, [pc, #312]	@ (8007950 <_strtod_l+0x290>)
 8007816:	f000 ff41 	bl	800869c <strncmp>
 800781a:	2800      	cmp	r0, #0
 800781c:	d032      	beq.n	8007884 <_strtod_l+0x1c4>
 800781e:	2000      	movs	r0, #0
 8007820:	462a      	mov	r2, r5
 8007822:	4681      	mov	r9, r0
 8007824:	463d      	mov	r5, r7
 8007826:	4603      	mov	r3, r0
 8007828:	2a65      	cmp	r2, #101	@ 0x65
 800782a:	d001      	beq.n	8007830 <_strtod_l+0x170>
 800782c:	2a45      	cmp	r2, #69	@ 0x45
 800782e:	d114      	bne.n	800785a <_strtod_l+0x19a>
 8007830:	b91d      	cbnz	r5, 800783a <_strtod_l+0x17a>
 8007832:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007834:	4302      	orrs	r2, r0
 8007836:	d095      	beq.n	8007764 <_strtod_l+0xa4>
 8007838:	2500      	movs	r5, #0
 800783a:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800783c:	1c62      	adds	r2, r4, #1
 800783e:	9219      	str	r2, [sp, #100]	@ 0x64
 8007840:	7862      	ldrb	r2, [r4, #1]
 8007842:	2a2b      	cmp	r2, #43	@ 0x2b
 8007844:	d077      	beq.n	8007936 <_strtod_l+0x276>
 8007846:	2a2d      	cmp	r2, #45	@ 0x2d
 8007848:	d07b      	beq.n	8007942 <_strtod_l+0x282>
 800784a:	f04f 0c00 	mov.w	ip, #0
 800784e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007852:	2909      	cmp	r1, #9
 8007854:	f240 8082 	bls.w	800795c <_strtod_l+0x29c>
 8007858:	9419      	str	r4, [sp, #100]	@ 0x64
 800785a:	f04f 0800 	mov.w	r8, #0
 800785e:	e0a2      	b.n	80079a6 <_strtod_l+0x2e6>
 8007860:	2300      	movs	r3, #0
 8007862:	e7c7      	b.n	80077f4 <_strtod_l+0x134>
 8007864:	2f08      	cmp	r7, #8
 8007866:	bfd5      	itete	le
 8007868:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800786a:	9908      	ldrgt	r1, [sp, #32]
 800786c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007870:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007874:	f100 0001 	add.w	r0, r0, #1
 8007878:	bfd4      	ite	le
 800787a:	930a      	strle	r3, [sp, #40]	@ 0x28
 800787c:	9308      	strgt	r3, [sp, #32]
 800787e:	3701      	adds	r7, #1
 8007880:	9019      	str	r0, [sp, #100]	@ 0x64
 8007882:	e7bf      	b.n	8007804 <_strtod_l+0x144>
 8007884:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007886:	1c5a      	adds	r2, r3, #1
 8007888:	9219      	str	r2, [sp, #100]	@ 0x64
 800788a:	785a      	ldrb	r2, [r3, #1]
 800788c:	b37f      	cbz	r7, 80078ee <_strtod_l+0x22e>
 800788e:	4681      	mov	r9, r0
 8007890:	463d      	mov	r5, r7
 8007892:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007896:	2b09      	cmp	r3, #9
 8007898:	d912      	bls.n	80078c0 <_strtod_l+0x200>
 800789a:	2301      	movs	r3, #1
 800789c:	e7c4      	b.n	8007828 <_strtod_l+0x168>
 800789e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80078a0:	3001      	adds	r0, #1
 80078a2:	1c5a      	adds	r2, r3, #1
 80078a4:	9219      	str	r2, [sp, #100]	@ 0x64
 80078a6:	785a      	ldrb	r2, [r3, #1]
 80078a8:	2a30      	cmp	r2, #48	@ 0x30
 80078aa:	d0f8      	beq.n	800789e <_strtod_l+0x1de>
 80078ac:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80078b0:	2b08      	cmp	r3, #8
 80078b2:	f200 84cb 	bhi.w	800824c <_strtod_l+0xb8c>
 80078b6:	4681      	mov	r9, r0
 80078b8:	2000      	movs	r0, #0
 80078ba:	4605      	mov	r5, r0
 80078bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80078be:	930c      	str	r3, [sp, #48]	@ 0x30
 80078c0:	3a30      	subs	r2, #48	@ 0x30
 80078c2:	f100 0301 	add.w	r3, r0, #1
 80078c6:	d02a      	beq.n	800791e <_strtod_l+0x25e>
 80078c8:	4499      	add	r9, r3
 80078ca:	210a      	movs	r1, #10
 80078cc:	462b      	mov	r3, r5
 80078ce:	eb00 0c05 	add.w	ip, r0, r5
 80078d2:	4563      	cmp	r3, ip
 80078d4:	d10d      	bne.n	80078f2 <_strtod_l+0x232>
 80078d6:	1c69      	adds	r1, r5, #1
 80078d8:	4401      	add	r1, r0
 80078da:	4428      	add	r0, r5
 80078dc:	2808      	cmp	r0, #8
 80078de:	dc16      	bgt.n	800790e <_strtod_l+0x24e>
 80078e0:	230a      	movs	r3, #10
 80078e2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80078e4:	fb03 2300 	mla	r3, r3, r0, r2
 80078e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80078ea:	2300      	movs	r3, #0
 80078ec:	e018      	b.n	8007920 <_strtod_l+0x260>
 80078ee:	4638      	mov	r0, r7
 80078f0:	e7da      	b.n	80078a8 <_strtod_l+0x1e8>
 80078f2:	2b08      	cmp	r3, #8
 80078f4:	f103 0301 	add.w	r3, r3, #1
 80078f8:	dc03      	bgt.n	8007902 <_strtod_l+0x242>
 80078fa:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80078fc:	434e      	muls	r6, r1
 80078fe:	960a      	str	r6, [sp, #40]	@ 0x28
 8007900:	e7e7      	b.n	80078d2 <_strtod_l+0x212>
 8007902:	2b10      	cmp	r3, #16
 8007904:	bfde      	ittt	le
 8007906:	9e08      	ldrle	r6, [sp, #32]
 8007908:	434e      	mulle	r6, r1
 800790a:	9608      	strle	r6, [sp, #32]
 800790c:	e7e1      	b.n	80078d2 <_strtod_l+0x212>
 800790e:	280f      	cmp	r0, #15
 8007910:	dceb      	bgt.n	80078ea <_strtod_l+0x22a>
 8007912:	230a      	movs	r3, #10
 8007914:	9808      	ldr	r0, [sp, #32]
 8007916:	fb03 2300 	mla	r3, r3, r0, r2
 800791a:	9308      	str	r3, [sp, #32]
 800791c:	e7e5      	b.n	80078ea <_strtod_l+0x22a>
 800791e:	4629      	mov	r1, r5
 8007920:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007922:	460d      	mov	r5, r1
 8007924:	1c50      	adds	r0, r2, #1
 8007926:	9019      	str	r0, [sp, #100]	@ 0x64
 8007928:	7852      	ldrb	r2, [r2, #1]
 800792a:	4618      	mov	r0, r3
 800792c:	e7b1      	b.n	8007892 <_strtod_l+0x1d2>
 800792e:	f04f 0900 	mov.w	r9, #0
 8007932:	2301      	movs	r3, #1
 8007934:	e77d      	b.n	8007832 <_strtod_l+0x172>
 8007936:	f04f 0c00 	mov.w	ip, #0
 800793a:	1ca2      	adds	r2, r4, #2
 800793c:	9219      	str	r2, [sp, #100]	@ 0x64
 800793e:	78a2      	ldrb	r2, [r4, #2]
 8007940:	e785      	b.n	800784e <_strtod_l+0x18e>
 8007942:	f04f 0c01 	mov.w	ip, #1
 8007946:	e7f8      	b.n	800793a <_strtod_l+0x27a>
 8007948:	0800aea8 	.word	0x0800aea8
 800794c:	7ff00000 	.word	0x7ff00000
 8007950:	0800ae86 	.word	0x0800ae86
 8007954:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007956:	1c51      	adds	r1, r2, #1
 8007958:	9119      	str	r1, [sp, #100]	@ 0x64
 800795a:	7852      	ldrb	r2, [r2, #1]
 800795c:	2a30      	cmp	r2, #48	@ 0x30
 800795e:	d0f9      	beq.n	8007954 <_strtod_l+0x294>
 8007960:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007964:	2908      	cmp	r1, #8
 8007966:	f63f af78 	bhi.w	800785a <_strtod_l+0x19a>
 800796a:	f04f 080a 	mov.w	r8, #10
 800796e:	3a30      	subs	r2, #48	@ 0x30
 8007970:	920e      	str	r2, [sp, #56]	@ 0x38
 8007972:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007974:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007976:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007978:	1c56      	adds	r6, r2, #1
 800797a:	9619      	str	r6, [sp, #100]	@ 0x64
 800797c:	7852      	ldrb	r2, [r2, #1]
 800797e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007982:	f1be 0f09 	cmp.w	lr, #9
 8007986:	d939      	bls.n	80079fc <_strtod_l+0x33c>
 8007988:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800798a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800798e:	1a76      	subs	r6, r6, r1
 8007990:	2e08      	cmp	r6, #8
 8007992:	dc03      	bgt.n	800799c <_strtod_l+0x2dc>
 8007994:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007996:	4588      	cmp	r8, r1
 8007998:	bfa8      	it	ge
 800799a:	4688      	movge	r8, r1
 800799c:	f1bc 0f00 	cmp.w	ip, #0
 80079a0:	d001      	beq.n	80079a6 <_strtod_l+0x2e6>
 80079a2:	f1c8 0800 	rsb	r8, r8, #0
 80079a6:	2d00      	cmp	r5, #0
 80079a8:	d14e      	bne.n	8007a48 <_strtod_l+0x388>
 80079aa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80079ac:	4308      	orrs	r0, r1
 80079ae:	f47f aec0 	bne.w	8007732 <_strtod_l+0x72>
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	f47f aed6 	bne.w	8007764 <_strtod_l+0xa4>
 80079b8:	2a69      	cmp	r2, #105	@ 0x69
 80079ba:	d028      	beq.n	8007a0e <_strtod_l+0x34e>
 80079bc:	dc25      	bgt.n	8007a0a <_strtod_l+0x34a>
 80079be:	2a49      	cmp	r2, #73	@ 0x49
 80079c0:	d025      	beq.n	8007a0e <_strtod_l+0x34e>
 80079c2:	2a4e      	cmp	r2, #78	@ 0x4e
 80079c4:	f47f aece 	bne.w	8007764 <_strtod_l+0xa4>
 80079c8:	499a      	ldr	r1, [pc, #616]	@ (8007c34 <_strtod_l+0x574>)
 80079ca:	a819      	add	r0, sp, #100	@ 0x64
 80079cc:	f001 fa0a 	bl	8008de4 <__match>
 80079d0:	2800      	cmp	r0, #0
 80079d2:	f43f aec7 	beq.w	8007764 <_strtod_l+0xa4>
 80079d6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	2b28      	cmp	r3, #40	@ 0x28
 80079dc:	d12e      	bne.n	8007a3c <_strtod_l+0x37c>
 80079de:	4996      	ldr	r1, [pc, #600]	@ (8007c38 <_strtod_l+0x578>)
 80079e0:	aa1c      	add	r2, sp, #112	@ 0x70
 80079e2:	a819      	add	r0, sp, #100	@ 0x64
 80079e4:	f001 fa12 	bl	8008e0c <__hexnan>
 80079e8:	2805      	cmp	r0, #5
 80079ea:	d127      	bne.n	8007a3c <_strtod_l+0x37c>
 80079ec:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80079ee:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80079f2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80079f6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80079fa:	e69a      	b.n	8007732 <_strtod_l+0x72>
 80079fc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80079fe:	fb08 2101 	mla	r1, r8, r1, r2
 8007a02:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007a06:	920e      	str	r2, [sp, #56]	@ 0x38
 8007a08:	e7b5      	b.n	8007976 <_strtod_l+0x2b6>
 8007a0a:	2a6e      	cmp	r2, #110	@ 0x6e
 8007a0c:	e7da      	b.n	80079c4 <_strtod_l+0x304>
 8007a0e:	498b      	ldr	r1, [pc, #556]	@ (8007c3c <_strtod_l+0x57c>)
 8007a10:	a819      	add	r0, sp, #100	@ 0x64
 8007a12:	f001 f9e7 	bl	8008de4 <__match>
 8007a16:	2800      	cmp	r0, #0
 8007a18:	f43f aea4 	beq.w	8007764 <_strtod_l+0xa4>
 8007a1c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007a1e:	4988      	ldr	r1, [pc, #544]	@ (8007c40 <_strtod_l+0x580>)
 8007a20:	3b01      	subs	r3, #1
 8007a22:	a819      	add	r0, sp, #100	@ 0x64
 8007a24:	9319      	str	r3, [sp, #100]	@ 0x64
 8007a26:	f001 f9dd 	bl	8008de4 <__match>
 8007a2a:	b910      	cbnz	r0, 8007a32 <_strtod_l+0x372>
 8007a2c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007a2e:	3301      	adds	r3, #1
 8007a30:	9319      	str	r3, [sp, #100]	@ 0x64
 8007a32:	f04f 0a00 	mov.w	sl, #0
 8007a36:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8007c44 <_strtod_l+0x584>
 8007a3a:	e67a      	b.n	8007732 <_strtod_l+0x72>
 8007a3c:	4882      	ldr	r0, [pc, #520]	@ (8007c48 <_strtod_l+0x588>)
 8007a3e:	f000 fef5 	bl	800882c <nan>
 8007a42:	4682      	mov	sl, r0
 8007a44:	468b      	mov	fp, r1
 8007a46:	e674      	b.n	8007732 <_strtod_l+0x72>
 8007a48:	eba8 0309 	sub.w	r3, r8, r9
 8007a4c:	2f00      	cmp	r7, #0
 8007a4e:	bf08      	it	eq
 8007a50:	462f      	moveq	r7, r5
 8007a52:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007a54:	2d10      	cmp	r5, #16
 8007a56:	462c      	mov	r4, r5
 8007a58:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a5a:	bfa8      	it	ge
 8007a5c:	2410      	movge	r4, #16
 8007a5e:	f7f8 fcc3 	bl	80003e8 <__aeabi_ui2d>
 8007a62:	2d09      	cmp	r5, #9
 8007a64:	4682      	mov	sl, r0
 8007a66:	468b      	mov	fp, r1
 8007a68:	dc11      	bgt.n	8007a8e <_strtod_l+0x3ce>
 8007a6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	f43f ae60 	beq.w	8007732 <_strtod_l+0x72>
 8007a72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a74:	dd76      	ble.n	8007b64 <_strtod_l+0x4a4>
 8007a76:	2b16      	cmp	r3, #22
 8007a78:	dc5d      	bgt.n	8007b36 <_strtod_l+0x476>
 8007a7a:	4974      	ldr	r1, [pc, #464]	@ (8007c4c <_strtod_l+0x58c>)
 8007a7c:	4652      	mov	r2, sl
 8007a7e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007a82:	465b      	mov	r3, fp
 8007a84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a88:	f7f8 fd28 	bl	80004dc <__aeabi_dmul>
 8007a8c:	e7d9      	b.n	8007a42 <_strtod_l+0x382>
 8007a8e:	4b6f      	ldr	r3, [pc, #444]	@ (8007c4c <_strtod_l+0x58c>)
 8007a90:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007a94:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007a98:	f7f8 fd20 	bl	80004dc <__aeabi_dmul>
 8007a9c:	4682      	mov	sl, r0
 8007a9e:	9808      	ldr	r0, [sp, #32]
 8007aa0:	468b      	mov	fp, r1
 8007aa2:	f7f8 fca1 	bl	80003e8 <__aeabi_ui2d>
 8007aa6:	4602      	mov	r2, r0
 8007aa8:	460b      	mov	r3, r1
 8007aaa:	4650      	mov	r0, sl
 8007aac:	4659      	mov	r1, fp
 8007aae:	f7f8 fb5f 	bl	8000170 <__adddf3>
 8007ab2:	2d0f      	cmp	r5, #15
 8007ab4:	4682      	mov	sl, r0
 8007ab6:	468b      	mov	fp, r1
 8007ab8:	ddd7      	ble.n	8007a6a <_strtod_l+0x3aa>
 8007aba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007abc:	1b2c      	subs	r4, r5, r4
 8007abe:	441c      	add	r4, r3
 8007ac0:	2c00      	cmp	r4, #0
 8007ac2:	f340 8096 	ble.w	8007bf2 <_strtod_l+0x532>
 8007ac6:	f014 030f 	ands.w	r3, r4, #15
 8007aca:	d00a      	beq.n	8007ae2 <_strtod_l+0x422>
 8007acc:	495f      	ldr	r1, [pc, #380]	@ (8007c4c <_strtod_l+0x58c>)
 8007ace:	4652      	mov	r2, sl
 8007ad0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007ad4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ad8:	465b      	mov	r3, fp
 8007ada:	f7f8 fcff 	bl	80004dc <__aeabi_dmul>
 8007ade:	4682      	mov	sl, r0
 8007ae0:	468b      	mov	fp, r1
 8007ae2:	f034 040f 	bics.w	r4, r4, #15
 8007ae6:	d073      	beq.n	8007bd0 <_strtod_l+0x510>
 8007ae8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007aec:	dd48      	ble.n	8007b80 <_strtod_l+0x4c0>
 8007aee:	2400      	movs	r4, #0
 8007af0:	46a0      	mov	r8, r4
 8007af2:	46a1      	mov	r9, r4
 8007af4:	940a      	str	r4, [sp, #40]	@ 0x28
 8007af6:	2322      	movs	r3, #34	@ 0x22
 8007af8:	f04f 0a00 	mov.w	sl, #0
 8007afc:	9a05      	ldr	r2, [sp, #20]
 8007afe:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8007c44 <_strtod_l+0x584>
 8007b02:	6013      	str	r3, [r2, #0]
 8007b04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	f43f ae13 	beq.w	8007732 <_strtod_l+0x72>
 8007b0c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007b0e:	9805      	ldr	r0, [sp, #20]
 8007b10:	f001 fb18 	bl	8009144 <_Bfree>
 8007b14:	4649      	mov	r1, r9
 8007b16:	9805      	ldr	r0, [sp, #20]
 8007b18:	f001 fb14 	bl	8009144 <_Bfree>
 8007b1c:	4641      	mov	r1, r8
 8007b1e:	9805      	ldr	r0, [sp, #20]
 8007b20:	f001 fb10 	bl	8009144 <_Bfree>
 8007b24:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007b26:	9805      	ldr	r0, [sp, #20]
 8007b28:	f001 fb0c 	bl	8009144 <_Bfree>
 8007b2c:	4621      	mov	r1, r4
 8007b2e:	9805      	ldr	r0, [sp, #20]
 8007b30:	f001 fb08 	bl	8009144 <_Bfree>
 8007b34:	e5fd      	b.n	8007732 <_strtod_l+0x72>
 8007b36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007b38:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	dbbc      	blt.n	8007aba <_strtod_l+0x3fa>
 8007b40:	4c42      	ldr	r4, [pc, #264]	@ (8007c4c <_strtod_l+0x58c>)
 8007b42:	f1c5 050f 	rsb	r5, r5, #15
 8007b46:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007b4a:	4652      	mov	r2, sl
 8007b4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b50:	465b      	mov	r3, fp
 8007b52:	f7f8 fcc3 	bl	80004dc <__aeabi_dmul>
 8007b56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b58:	1b5d      	subs	r5, r3, r5
 8007b5a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007b5e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007b62:	e791      	b.n	8007a88 <_strtod_l+0x3c8>
 8007b64:	3316      	adds	r3, #22
 8007b66:	dba8      	blt.n	8007aba <_strtod_l+0x3fa>
 8007b68:	4b38      	ldr	r3, [pc, #224]	@ (8007c4c <_strtod_l+0x58c>)
 8007b6a:	eba9 0808 	sub.w	r8, r9, r8
 8007b6e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007b72:	4650      	mov	r0, sl
 8007b74:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007b78:	4659      	mov	r1, fp
 8007b7a:	f7f8 fdd9 	bl	8000730 <__aeabi_ddiv>
 8007b7e:	e760      	b.n	8007a42 <_strtod_l+0x382>
 8007b80:	4b33      	ldr	r3, [pc, #204]	@ (8007c50 <_strtod_l+0x590>)
 8007b82:	4650      	mov	r0, sl
 8007b84:	9308      	str	r3, [sp, #32]
 8007b86:	2300      	movs	r3, #0
 8007b88:	4659      	mov	r1, fp
 8007b8a:	461e      	mov	r6, r3
 8007b8c:	1124      	asrs	r4, r4, #4
 8007b8e:	2c01      	cmp	r4, #1
 8007b90:	dc21      	bgt.n	8007bd6 <_strtod_l+0x516>
 8007b92:	b10b      	cbz	r3, 8007b98 <_strtod_l+0x4d8>
 8007b94:	4682      	mov	sl, r0
 8007b96:	468b      	mov	fp, r1
 8007b98:	492d      	ldr	r1, [pc, #180]	@ (8007c50 <_strtod_l+0x590>)
 8007b9a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007b9e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007ba2:	4652      	mov	r2, sl
 8007ba4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ba8:	465b      	mov	r3, fp
 8007baa:	f7f8 fc97 	bl	80004dc <__aeabi_dmul>
 8007bae:	4b25      	ldr	r3, [pc, #148]	@ (8007c44 <_strtod_l+0x584>)
 8007bb0:	460a      	mov	r2, r1
 8007bb2:	400b      	ands	r3, r1
 8007bb4:	4927      	ldr	r1, [pc, #156]	@ (8007c54 <_strtod_l+0x594>)
 8007bb6:	4682      	mov	sl, r0
 8007bb8:	428b      	cmp	r3, r1
 8007bba:	d898      	bhi.n	8007aee <_strtod_l+0x42e>
 8007bbc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007bc0:	428b      	cmp	r3, r1
 8007bc2:	bf86      	itte	hi
 8007bc4:	f04f 3aff 	movhi.w	sl, #4294967295
 8007bc8:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8007c58 <_strtod_l+0x598>
 8007bcc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	9308      	str	r3, [sp, #32]
 8007bd4:	e07a      	b.n	8007ccc <_strtod_l+0x60c>
 8007bd6:	07e2      	lsls	r2, r4, #31
 8007bd8:	d505      	bpl.n	8007be6 <_strtod_l+0x526>
 8007bda:	9b08      	ldr	r3, [sp, #32]
 8007bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be0:	f7f8 fc7c 	bl	80004dc <__aeabi_dmul>
 8007be4:	2301      	movs	r3, #1
 8007be6:	9a08      	ldr	r2, [sp, #32]
 8007be8:	3601      	adds	r6, #1
 8007bea:	3208      	adds	r2, #8
 8007bec:	1064      	asrs	r4, r4, #1
 8007bee:	9208      	str	r2, [sp, #32]
 8007bf0:	e7cd      	b.n	8007b8e <_strtod_l+0x4ce>
 8007bf2:	d0ed      	beq.n	8007bd0 <_strtod_l+0x510>
 8007bf4:	4264      	negs	r4, r4
 8007bf6:	f014 020f 	ands.w	r2, r4, #15
 8007bfa:	d00a      	beq.n	8007c12 <_strtod_l+0x552>
 8007bfc:	4b13      	ldr	r3, [pc, #76]	@ (8007c4c <_strtod_l+0x58c>)
 8007bfe:	4650      	mov	r0, sl
 8007c00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c04:	4659      	mov	r1, fp
 8007c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c0a:	f7f8 fd91 	bl	8000730 <__aeabi_ddiv>
 8007c0e:	4682      	mov	sl, r0
 8007c10:	468b      	mov	fp, r1
 8007c12:	1124      	asrs	r4, r4, #4
 8007c14:	d0dc      	beq.n	8007bd0 <_strtod_l+0x510>
 8007c16:	2c1f      	cmp	r4, #31
 8007c18:	dd20      	ble.n	8007c5c <_strtod_l+0x59c>
 8007c1a:	2400      	movs	r4, #0
 8007c1c:	46a0      	mov	r8, r4
 8007c1e:	46a1      	mov	r9, r4
 8007c20:	940a      	str	r4, [sp, #40]	@ 0x28
 8007c22:	2322      	movs	r3, #34	@ 0x22
 8007c24:	9a05      	ldr	r2, [sp, #20]
 8007c26:	f04f 0a00 	mov.w	sl, #0
 8007c2a:	f04f 0b00 	mov.w	fp, #0
 8007c2e:	6013      	str	r3, [r2, #0]
 8007c30:	e768      	b.n	8007b04 <_strtod_l+0x444>
 8007c32:	bf00      	nop
 8007c34:	0800ae91 	.word	0x0800ae91
 8007c38:	0800ae94 	.word	0x0800ae94
 8007c3c:	0800ae88 	.word	0x0800ae88
 8007c40:	0800ae8b 	.word	0x0800ae8b
 8007c44:	7ff00000 	.word	0x7ff00000
 8007c48:	0800b23e 	.word	0x0800b23e
 8007c4c:	0800b108 	.word	0x0800b108
 8007c50:	0800b0e0 	.word	0x0800b0e0
 8007c54:	7ca00000 	.word	0x7ca00000
 8007c58:	7fefffff 	.word	0x7fefffff
 8007c5c:	f014 0310 	ands.w	r3, r4, #16
 8007c60:	bf18      	it	ne
 8007c62:	236a      	movne	r3, #106	@ 0x6a
 8007c64:	4650      	mov	r0, sl
 8007c66:	9308      	str	r3, [sp, #32]
 8007c68:	4659      	mov	r1, fp
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	4ea9      	ldr	r6, [pc, #676]	@ (8007f14 <_strtod_l+0x854>)
 8007c6e:	07e2      	lsls	r2, r4, #31
 8007c70:	d504      	bpl.n	8007c7c <_strtod_l+0x5bc>
 8007c72:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007c76:	f7f8 fc31 	bl	80004dc <__aeabi_dmul>
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	1064      	asrs	r4, r4, #1
 8007c7e:	f106 0608 	add.w	r6, r6, #8
 8007c82:	d1f4      	bne.n	8007c6e <_strtod_l+0x5ae>
 8007c84:	b10b      	cbz	r3, 8007c8a <_strtod_l+0x5ca>
 8007c86:	4682      	mov	sl, r0
 8007c88:	468b      	mov	fp, r1
 8007c8a:	9b08      	ldr	r3, [sp, #32]
 8007c8c:	b1b3      	cbz	r3, 8007cbc <_strtod_l+0x5fc>
 8007c8e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007c92:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	4659      	mov	r1, fp
 8007c9a:	dd0f      	ble.n	8007cbc <_strtod_l+0x5fc>
 8007c9c:	2b1f      	cmp	r3, #31
 8007c9e:	dd57      	ble.n	8007d50 <_strtod_l+0x690>
 8007ca0:	2b34      	cmp	r3, #52	@ 0x34
 8007ca2:	bfd8      	it	le
 8007ca4:	f04f 33ff 	movle.w	r3, #4294967295
 8007ca8:	f04f 0a00 	mov.w	sl, #0
 8007cac:	bfcf      	iteee	gt
 8007cae:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007cb2:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007cb6:	4093      	lslle	r3, r2
 8007cb8:	ea03 0b01 	andle.w	fp, r3, r1
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	4650      	mov	r0, sl
 8007cc2:	4659      	mov	r1, fp
 8007cc4:	f7f8 fe72 	bl	80009ac <__aeabi_dcmpeq>
 8007cc8:	2800      	cmp	r0, #0
 8007cca:	d1a6      	bne.n	8007c1a <_strtod_l+0x55a>
 8007ccc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007cce:	463a      	mov	r2, r7
 8007cd0:	9300      	str	r3, [sp, #0]
 8007cd2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007cd4:	462b      	mov	r3, r5
 8007cd6:	9805      	ldr	r0, [sp, #20]
 8007cd8:	f001 fa9c 	bl	8009214 <__s2b>
 8007cdc:	900a      	str	r0, [sp, #40]	@ 0x28
 8007cde:	2800      	cmp	r0, #0
 8007ce0:	f43f af05 	beq.w	8007aee <_strtod_l+0x42e>
 8007ce4:	2400      	movs	r4, #0
 8007ce6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ce8:	eba9 0308 	sub.w	r3, r9, r8
 8007cec:	2a00      	cmp	r2, #0
 8007cee:	bfa8      	it	ge
 8007cf0:	2300      	movge	r3, #0
 8007cf2:	46a0      	mov	r8, r4
 8007cf4:	9312      	str	r3, [sp, #72]	@ 0x48
 8007cf6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007cfa:	9316      	str	r3, [sp, #88]	@ 0x58
 8007cfc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007cfe:	9805      	ldr	r0, [sp, #20]
 8007d00:	6859      	ldr	r1, [r3, #4]
 8007d02:	f001 f9df 	bl	80090c4 <_Balloc>
 8007d06:	4681      	mov	r9, r0
 8007d08:	2800      	cmp	r0, #0
 8007d0a:	f43f aef4 	beq.w	8007af6 <_strtod_l+0x436>
 8007d0e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d10:	300c      	adds	r0, #12
 8007d12:	691a      	ldr	r2, [r3, #16]
 8007d14:	f103 010c 	add.w	r1, r3, #12
 8007d18:	3202      	adds	r2, #2
 8007d1a:	0092      	lsls	r2, r2, #2
 8007d1c:	f000 fd77 	bl	800880e <memcpy>
 8007d20:	ab1c      	add	r3, sp, #112	@ 0x70
 8007d22:	9301      	str	r3, [sp, #4]
 8007d24:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007d26:	9300      	str	r3, [sp, #0]
 8007d28:	4652      	mov	r2, sl
 8007d2a:	465b      	mov	r3, fp
 8007d2c:	9805      	ldr	r0, [sp, #20]
 8007d2e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007d32:	f001 fda1 	bl	8009878 <__d2b>
 8007d36:	901a      	str	r0, [sp, #104]	@ 0x68
 8007d38:	2800      	cmp	r0, #0
 8007d3a:	f43f aedc 	beq.w	8007af6 <_strtod_l+0x436>
 8007d3e:	2101      	movs	r1, #1
 8007d40:	9805      	ldr	r0, [sp, #20]
 8007d42:	f001 fafd 	bl	8009340 <__i2b>
 8007d46:	4680      	mov	r8, r0
 8007d48:	b948      	cbnz	r0, 8007d5e <_strtod_l+0x69e>
 8007d4a:	f04f 0800 	mov.w	r8, #0
 8007d4e:	e6d2      	b.n	8007af6 <_strtod_l+0x436>
 8007d50:	f04f 32ff 	mov.w	r2, #4294967295
 8007d54:	fa02 f303 	lsl.w	r3, r2, r3
 8007d58:	ea03 0a0a 	and.w	sl, r3, sl
 8007d5c:	e7ae      	b.n	8007cbc <_strtod_l+0x5fc>
 8007d5e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007d60:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007d62:	2d00      	cmp	r5, #0
 8007d64:	bfab      	itete	ge
 8007d66:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007d68:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007d6a:	18ef      	addge	r7, r5, r3
 8007d6c:	1b5e      	sublt	r6, r3, r5
 8007d6e:	9b08      	ldr	r3, [sp, #32]
 8007d70:	bfa8      	it	ge
 8007d72:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007d74:	eba5 0503 	sub.w	r5, r5, r3
 8007d78:	4415      	add	r5, r2
 8007d7a:	4b67      	ldr	r3, [pc, #412]	@ (8007f18 <_strtod_l+0x858>)
 8007d7c:	f105 35ff 	add.w	r5, r5, #4294967295
 8007d80:	bfb8      	it	lt
 8007d82:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007d84:	429d      	cmp	r5, r3
 8007d86:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007d8a:	da50      	bge.n	8007e2e <_strtod_l+0x76e>
 8007d8c:	1b5b      	subs	r3, r3, r5
 8007d8e:	2b1f      	cmp	r3, #31
 8007d90:	f04f 0101 	mov.w	r1, #1
 8007d94:	eba2 0203 	sub.w	r2, r2, r3
 8007d98:	dc3d      	bgt.n	8007e16 <_strtod_l+0x756>
 8007d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8007d9e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007da0:	2300      	movs	r3, #0
 8007da2:	9310      	str	r3, [sp, #64]	@ 0x40
 8007da4:	18bd      	adds	r5, r7, r2
 8007da6:	9b08      	ldr	r3, [sp, #32]
 8007da8:	42af      	cmp	r7, r5
 8007daa:	4416      	add	r6, r2
 8007dac:	441e      	add	r6, r3
 8007dae:	463b      	mov	r3, r7
 8007db0:	bfa8      	it	ge
 8007db2:	462b      	movge	r3, r5
 8007db4:	42b3      	cmp	r3, r6
 8007db6:	bfa8      	it	ge
 8007db8:	4633      	movge	r3, r6
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	bfc2      	ittt	gt
 8007dbe:	1aed      	subgt	r5, r5, r3
 8007dc0:	1af6      	subgt	r6, r6, r3
 8007dc2:	1aff      	subgt	r7, r7, r3
 8007dc4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	dd16      	ble.n	8007df8 <_strtod_l+0x738>
 8007dca:	4641      	mov	r1, r8
 8007dcc:	461a      	mov	r2, r3
 8007dce:	9805      	ldr	r0, [sp, #20]
 8007dd0:	f001 fb74 	bl	80094bc <__pow5mult>
 8007dd4:	4680      	mov	r8, r0
 8007dd6:	2800      	cmp	r0, #0
 8007dd8:	d0b7      	beq.n	8007d4a <_strtod_l+0x68a>
 8007dda:	4601      	mov	r1, r0
 8007ddc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007dde:	9805      	ldr	r0, [sp, #20]
 8007de0:	f001 fac4 	bl	800936c <__multiply>
 8007de4:	900e      	str	r0, [sp, #56]	@ 0x38
 8007de6:	2800      	cmp	r0, #0
 8007de8:	f43f ae85 	beq.w	8007af6 <_strtod_l+0x436>
 8007dec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007dee:	9805      	ldr	r0, [sp, #20]
 8007df0:	f001 f9a8 	bl	8009144 <_Bfree>
 8007df4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007df6:	931a      	str	r3, [sp, #104]	@ 0x68
 8007df8:	2d00      	cmp	r5, #0
 8007dfa:	dc1d      	bgt.n	8007e38 <_strtod_l+0x778>
 8007dfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	dd23      	ble.n	8007e4a <_strtod_l+0x78a>
 8007e02:	4649      	mov	r1, r9
 8007e04:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007e06:	9805      	ldr	r0, [sp, #20]
 8007e08:	f001 fb58 	bl	80094bc <__pow5mult>
 8007e0c:	4681      	mov	r9, r0
 8007e0e:	b9e0      	cbnz	r0, 8007e4a <_strtod_l+0x78a>
 8007e10:	f04f 0900 	mov.w	r9, #0
 8007e14:	e66f      	b.n	8007af6 <_strtod_l+0x436>
 8007e16:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007e1a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007e1e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007e22:	35e2      	adds	r5, #226	@ 0xe2
 8007e24:	fa01 f305 	lsl.w	r3, r1, r5
 8007e28:	9310      	str	r3, [sp, #64]	@ 0x40
 8007e2a:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007e2c:	e7ba      	b.n	8007da4 <_strtod_l+0x6e4>
 8007e2e:	2300      	movs	r3, #0
 8007e30:	9310      	str	r3, [sp, #64]	@ 0x40
 8007e32:	2301      	movs	r3, #1
 8007e34:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007e36:	e7b5      	b.n	8007da4 <_strtod_l+0x6e4>
 8007e38:	462a      	mov	r2, r5
 8007e3a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007e3c:	9805      	ldr	r0, [sp, #20]
 8007e3e:	f001 fb97 	bl	8009570 <__lshift>
 8007e42:	901a      	str	r0, [sp, #104]	@ 0x68
 8007e44:	2800      	cmp	r0, #0
 8007e46:	d1d9      	bne.n	8007dfc <_strtod_l+0x73c>
 8007e48:	e655      	b.n	8007af6 <_strtod_l+0x436>
 8007e4a:	2e00      	cmp	r6, #0
 8007e4c:	dd07      	ble.n	8007e5e <_strtod_l+0x79e>
 8007e4e:	4649      	mov	r1, r9
 8007e50:	4632      	mov	r2, r6
 8007e52:	9805      	ldr	r0, [sp, #20]
 8007e54:	f001 fb8c 	bl	8009570 <__lshift>
 8007e58:	4681      	mov	r9, r0
 8007e5a:	2800      	cmp	r0, #0
 8007e5c:	d0d8      	beq.n	8007e10 <_strtod_l+0x750>
 8007e5e:	2f00      	cmp	r7, #0
 8007e60:	dd08      	ble.n	8007e74 <_strtod_l+0x7b4>
 8007e62:	4641      	mov	r1, r8
 8007e64:	463a      	mov	r2, r7
 8007e66:	9805      	ldr	r0, [sp, #20]
 8007e68:	f001 fb82 	bl	8009570 <__lshift>
 8007e6c:	4680      	mov	r8, r0
 8007e6e:	2800      	cmp	r0, #0
 8007e70:	f43f ae41 	beq.w	8007af6 <_strtod_l+0x436>
 8007e74:	464a      	mov	r2, r9
 8007e76:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007e78:	9805      	ldr	r0, [sp, #20]
 8007e7a:	f001 fc01 	bl	8009680 <__mdiff>
 8007e7e:	4604      	mov	r4, r0
 8007e80:	2800      	cmp	r0, #0
 8007e82:	f43f ae38 	beq.w	8007af6 <_strtod_l+0x436>
 8007e86:	68c3      	ldr	r3, [r0, #12]
 8007e88:	4641      	mov	r1, r8
 8007e8a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	60c3      	str	r3, [r0, #12]
 8007e90:	f001 fbda 	bl	8009648 <__mcmp>
 8007e94:	2800      	cmp	r0, #0
 8007e96:	da45      	bge.n	8007f24 <_strtod_l+0x864>
 8007e98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e9a:	ea53 030a 	orrs.w	r3, r3, sl
 8007e9e:	d16b      	bne.n	8007f78 <_strtod_l+0x8b8>
 8007ea0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d167      	bne.n	8007f78 <_strtod_l+0x8b8>
 8007ea8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007eac:	0d1b      	lsrs	r3, r3, #20
 8007eae:	051b      	lsls	r3, r3, #20
 8007eb0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007eb4:	d960      	bls.n	8007f78 <_strtod_l+0x8b8>
 8007eb6:	6963      	ldr	r3, [r4, #20]
 8007eb8:	b913      	cbnz	r3, 8007ec0 <_strtod_l+0x800>
 8007eba:	6923      	ldr	r3, [r4, #16]
 8007ebc:	2b01      	cmp	r3, #1
 8007ebe:	dd5b      	ble.n	8007f78 <_strtod_l+0x8b8>
 8007ec0:	4621      	mov	r1, r4
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	9805      	ldr	r0, [sp, #20]
 8007ec6:	f001 fb53 	bl	8009570 <__lshift>
 8007eca:	4641      	mov	r1, r8
 8007ecc:	4604      	mov	r4, r0
 8007ece:	f001 fbbb 	bl	8009648 <__mcmp>
 8007ed2:	2800      	cmp	r0, #0
 8007ed4:	dd50      	ble.n	8007f78 <_strtod_l+0x8b8>
 8007ed6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007eda:	9a08      	ldr	r2, [sp, #32]
 8007edc:	0d1b      	lsrs	r3, r3, #20
 8007ede:	051b      	lsls	r3, r3, #20
 8007ee0:	2a00      	cmp	r2, #0
 8007ee2:	d06a      	beq.n	8007fba <_strtod_l+0x8fa>
 8007ee4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007ee8:	d867      	bhi.n	8007fba <_strtod_l+0x8fa>
 8007eea:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007eee:	f67f ae98 	bls.w	8007c22 <_strtod_l+0x562>
 8007ef2:	4650      	mov	r0, sl
 8007ef4:	4659      	mov	r1, fp
 8007ef6:	4b09      	ldr	r3, [pc, #36]	@ (8007f1c <_strtod_l+0x85c>)
 8007ef8:	2200      	movs	r2, #0
 8007efa:	f7f8 faef 	bl	80004dc <__aeabi_dmul>
 8007efe:	4b08      	ldr	r3, [pc, #32]	@ (8007f20 <_strtod_l+0x860>)
 8007f00:	4682      	mov	sl, r0
 8007f02:	400b      	ands	r3, r1
 8007f04:	468b      	mov	fp, r1
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	f47f ae00 	bne.w	8007b0c <_strtod_l+0x44c>
 8007f0c:	2322      	movs	r3, #34	@ 0x22
 8007f0e:	9a05      	ldr	r2, [sp, #20]
 8007f10:	6013      	str	r3, [r2, #0]
 8007f12:	e5fb      	b.n	8007b0c <_strtod_l+0x44c>
 8007f14:	0800aec0 	.word	0x0800aec0
 8007f18:	fffffc02 	.word	0xfffffc02
 8007f1c:	39500000 	.word	0x39500000
 8007f20:	7ff00000 	.word	0x7ff00000
 8007f24:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007f28:	d165      	bne.n	8007ff6 <_strtod_l+0x936>
 8007f2a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007f2c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007f30:	b35a      	cbz	r2, 8007f8a <_strtod_l+0x8ca>
 8007f32:	4a99      	ldr	r2, [pc, #612]	@ (8008198 <_strtod_l+0xad8>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d12b      	bne.n	8007f90 <_strtod_l+0x8d0>
 8007f38:	9b08      	ldr	r3, [sp, #32]
 8007f3a:	4651      	mov	r1, sl
 8007f3c:	b303      	cbz	r3, 8007f80 <_strtod_l+0x8c0>
 8007f3e:	465a      	mov	r2, fp
 8007f40:	4b96      	ldr	r3, [pc, #600]	@ (800819c <_strtod_l+0xadc>)
 8007f42:	4013      	ands	r3, r2
 8007f44:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007f48:	f04f 32ff 	mov.w	r2, #4294967295
 8007f4c:	d81b      	bhi.n	8007f86 <_strtod_l+0x8c6>
 8007f4e:	0d1b      	lsrs	r3, r3, #20
 8007f50:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007f54:	fa02 f303 	lsl.w	r3, r2, r3
 8007f58:	4299      	cmp	r1, r3
 8007f5a:	d119      	bne.n	8007f90 <_strtod_l+0x8d0>
 8007f5c:	4b90      	ldr	r3, [pc, #576]	@ (80081a0 <_strtod_l+0xae0>)
 8007f5e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007f60:	429a      	cmp	r2, r3
 8007f62:	d102      	bne.n	8007f6a <_strtod_l+0x8aa>
 8007f64:	3101      	adds	r1, #1
 8007f66:	f43f adc6 	beq.w	8007af6 <_strtod_l+0x436>
 8007f6a:	f04f 0a00 	mov.w	sl, #0
 8007f6e:	4b8b      	ldr	r3, [pc, #556]	@ (800819c <_strtod_l+0xadc>)
 8007f70:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007f72:	401a      	ands	r2, r3
 8007f74:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007f78:	9b08      	ldr	r3, [sp, #32]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d1b9      	bne.n	8007ef2 <_strtod_l+0x832>
 8007f7e:	e5c5      	b.n	8007b0c <_strtod_l+0x44c>
 8007f80:	f04f 33ff 	mov.w	r3, #4294967295
 8007f84:	e7e8      	b.n	8007f58 <_strtod_l+0x898>
 8007f86:	4613      	mov	r3, r2
 8007f88:	e7e6      	b.n	8007f58 <_strtod_l+0x898>
 8007f8a:	ea53 030a 	orrs.w	r3, r3, sl
 8007f8e:	d0a2      	beq.n	8007ed6 <_strtod_l+0x816>
 8007f90:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007f92:	b1db      	cbz	r3, 8007fcc <_strtod_l+0x90c>
 8007f94:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007f96:	4213      	tst	r3, r2
 8007f98:	d0ee      	beq.n	8007f78 <_strtod_l+0x8b8>
 8007f9a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f9c:	4650      	mov	r0, sl
 8007f9e:	4659      	mov	r1, fp
 8007fa0:	9a08      	ldr	r2, [sp, #32]
 8007fa2:	b1bb      	cbz	r3, 8007fd4 <_strtod_l+0x914>
 8007fa4:	f7ff fb68 	bl	8007678 <sulp>
 8007fa8:	4602      	mov	r2, r0
 8007faa:	460b      	mov	r3, r1
 8007fac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007fb0:	f7f8 f8de 	bl	8000170 <__adddf3>
 8007fb4:	4682      	mov	sl, r0
 8007fb6:	468b      	mov	fp, r1
 8007fb8:	e7de      	b.n	8007f78 <_strtod_l+0x8b8>
 8007fba:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007fbe:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007fc2:	f04f 3aff 	mov.w	sl, #4294967295
 8007fc6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007fca:	e7d5      	b.n	8007f78 <_strtod_l+0x8b8>
 8007fcc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007fce:	ea13 0f0a 	tst.w	r3, sl
 8007fd2:	e7e1      	b.n	8007f98 <_strtod_l+0x8d8>
 8007fd4:	f7ff fb50 	bl	8007678 <sulp>
 8007fd8:	4602      	mov	r2, r0
 8007fda:	460b      	mov	r3, r1
 8007fdc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007fe0:	f7f8 f8c4 	bl	800016c <__aeabi_dsub>
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	4682      	mov	sl, r0
 8007fea:	468b      	mov	fp, r1
 8007fec:	f7f8 fcde 	bl	80009ac <__aeabi_dcmpeq>
 8007ff0:	2800      	cmp	r0, #0
 8007ff2:	d0c1      	beq.n	8007f78 <_strtod_l+0x8b8>
 8007ff4:	e615      	b.n	8007c22 <_strtod_l+0x562>
 8007ff6:	4641      	mov	r1, r8
 8007ff8:	4620      	mov	r0, r4
 8007ffa:	f001 fc95 	bl	8009928 <__ratio>
 8007ffe:	2200      	movs	r2, #0
 8008000:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008004:	4606      	mov	r6, r0
 8008006:	460f      	mov	r7, r1
 8008008:	f7f8 fce4 	bl	80009d4 <__aeabi_dcmple>
 800800c:	2800      	cmp	r0, #0
 800800e:	d06d      	beq.n	80080ec <_strtod_l+0xa2c>
 8008010:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008012:	2b00      	cmp	r3, #0
 8008014:	d178      	bne.n	8008108 <_strtod_l+0xa48>
 8008016:	f1ba 0f00 	cmp.w	sl, #0
 800801a:	d156      	bne.n	80080ca <_strtod_l+0xa0a>
 800801c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800801e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008022:	2b00      	cmp	r3, #0
 8008024:	d158      	bne.n	80080d8 <_strtod_l+0xa18>
 8008026:	2200      	movs	r2, #0
 8008028:	4630      	mov	r0, r6
 800802a:	4639      	mov	r1, r7
 800802c:	4b5d      	ldr	r3, [pc, #372]	@ (80081a4 <_strtod_l+0xae4>)
 800802e:	f7f8 fcc7 	bl	80009c0 <__aeabi_dcmplt>
 8008032:	2800      	cmp	r0, #0
 8008034:	d157      	bne.n	80080e6 <_strtod_l+0xa26>
 8008036:	4630      	mov	r0, r6
 8008038:	4639      	mov	r1, r7
 800803a:	2200      	movs	r2, #0
 800803c:	4b5a      	ldr	r3, [pc, #360]	@ (80081a8 <_strtod_l+0xae8>)
 800803e:	f7f8 fa4d 	bl	80004dc <__aeabi_dmul>
 8008042:	4606      	mov	r6, r0
 8008044:	460f      	mov	r7, r1
 8008046:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800804a:	9606      	str	r6, [sp, #24]
 800804c:	9307      	str	r3, [sp, #28]
 800804e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008052:	4d52      	ldr	r5, [pc, #328]	@ (800819c <_strtod_l+0xadc>)
 8008054:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008058:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800805a:	401d      	ands	r5, r3
 800805c:	4b53      	ldr	r3, [pc, #332]	@ (80081ac <_strtod_l+0xaec>)
 800805e:	429d      	cmp	r5, r3
 8008060:	f040 80aa 	bne.w	80081b8 <_strtod_l+0xaf8>
 8008064:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008066:	4650      	mov	r0, sl
 8008068:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800806c:	4659      	mov	r1, fp
 800806e:	f001 fb9b 	bl	80097a8 <__ulp>
 8008072:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008076:	f7f8 fa31 	bl	80004dc <__aeabi_dmul>
 800807a:	4652      	mov	r2, sl
 800807c:	465b      	mov	r3, fp
 800807e:	f7f8 f877 	bl	8000170 <__adddf3>
 8008082:	460b      	mov	r3, r1
 8008084:	4945      	ldr	r1, [pc, #276]	@ (800819c <_strtod_l+0xadc>)
 8008086:	4a4a      	ldr	r2, [pc, #296]	@ (80081b0 <_strtod_l+0xaf0>)
 8008088:	4019      	ands	r1, r3
 800808a:	4291      	cmp	r1, r2
 800808c:	4682      	mov	sl, r0
 800808e:	d942      	bls.n	8008116 <_strtod_l+0xa56>
 8008090:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008092:	4b43      	ldr	r3, [pc, #268]	@ (80081a0 <_strtod_l+0xae0>)
 8008094:	429a      	cmp	r2, r3
 8008096:	d103      	bne.n	80080a0 <_strtod_l+0x9e0>
 8008098:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800809a:	3301      	adds	r3, #1
 800809c:	f43f ad2b 	beq.w	8007af6 <_strtod_l+0x436>
 80080a0:	f04f 3aff 	mov.w	sl, #4294967295
 80080a4:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 80081a0 <_strtod_l+0xae0>
 80080a8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80080aa:	9805      	ldr	r0, [sp, #20]
 80080ac:	f001 f84a 	bl	8009144 <_Bfree>
 80080b0:	4649      	mov	r1, r9
 80080b2:	9805      	ldr	r0, [sp, #20]
 80080b4:	f001 f846 	bl	8009144 <_Bfree>
 80080b8:	4641      	mov	r1, r8
 80080ba:	9805      	ldr	r0, [sp, #20]
 80080bc:	f001 f842 	bl	8009144 <_Bfree>
 80080c0:	4621      	mov	r1, r4
 80080c2:	9805      	ldr	r0, [sp, #20]
 80080c4:	f001 f83e 	bl	8009144 <_Bfree>
 80080c8:	e618      	b.n	8007cfc <_strtod_l+0x63c>
 80080ca:	f1ba 0f01 	cmp.w	sl, #1
 80080ce:	d103      	bne.n	80080d8 <_strtod_l+0xa18>
 80080d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	f43f ada5 	beq.w	8007c22 <_strtod_l+0x562>
 80080d8:	2200      	movs	r2, #0
 80080da:	4b36      	ldr	r3, [pc, #216]	@ (80081b4 <_strtod_l+0xaf4>)
 80080dc:	2600      	movs	r6, #0
 80080de:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80080e2:	4f30      	ldr	r7, [pc, #192]	@ (80081a4 <_strtod_l+0xae4>)
 80080e4:	e7b3      	b.n	800804e <_strtod_l+0x98e>
 80080e6:	2600      	movs	r6, #0
 80080e8:	4f2f      	ldr	r7, [pc, #188]	@ (80081a8 <_strtod_l+0xae8>)
 80080ea:	e7ac      	b.n	8008046 <_strtod_l+0x986>
 80080ec:	4630      	mov	r0, r6
 80080ee:	4639      	mov	r1, r7
 80080f0:	4b2d      	ldr	r3, [pc, #180]	@ (80081a8 <_strtod_l+0xae8>)
 80080f2:	2200      	movs	r2, #0
 80080f4:	f7f8 f9f2 	bl	80004dc <__aeabi_dmul>
 80080f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80080fa:	4606      	mov	r6, r0
 80080fc:	460f      	mov	r7, r1
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d0a1      	beq.n	8008046 <_strtod_l+0x986>
 8008102:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008106:	e7a2      	b.n	800804e <_strtod_l+0x98e>
 8008108:	2200      	movs	r2, #0
 800810a:	4b26      	ldr	r3, [pc, #152]	@ (80081a4 <_strtod_l+0xae4>)
 800810c:	4616      	mov	r6, r2
 800810e:	461f      	mov	r7, r3
 8008110:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008114:	e79b      	b.n	800804e <_strtod_l+0x98e>
 8008116:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800811a:	9b08      	ldr	r3, [sp, #32]
 800811c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008120:	2b00      	cmp	r3, #0
 8008122:	d1c1      	bne.n	80080a8 <_strtod_l+0x9e8>
 8008124:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008128:	0d1b      	lsrs	r3, r3, #20
 800812a:	051b      	lsls	r3, r3, #20
 800812c:	429d      	cmp	r5, r3
 800812e:	d1bb      	bne.n	80080a8 <_strtod_l+0x9e8>
 8008130:	4630      	mov	r0, r6
 8008132:	4639      	mov	r1, r7
 8008134:	f7f9 f802 	bl	800113c <__aeabi_d2lz>
 8008138:	f7f8 f9a2 	bl	8000480 <__aeabi_l2d>
 800813c:	4602      	mov	r2, r0
 800813e:	460b      	mov	r3, r1
 8008140:	4630      	mov	r0, r6
 8008142:	4639      	mov	r1, r7
 8008144:	f7f8 f812 	bl	800016c <__aeabi_dsub>
 8008148:	460b      	mov	r3, r1
 800814a:	4602      	mov	r2, r0
 800814c:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008150:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008154:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008156:	ea46 060a 	orr.w	r6, r6, sl
 800815a:	431e      	orrs	r6, r3
 800815c:	d069      	beq.n	8008232 <_strtod_l+0xb72>
 800815e:	a30a      	add	r3, pc, #40	@ (adr r3, 8008188 <_strtod_l+0xac8>)
 8008160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008164:	f7f8 fc2c 	bl	80009c0 <__aeabi_dcmplt>
 8008168:	2800      	cmp	r0, #0
 800816a:	f47f accf 	bne.w	8007b0c <_strtod_l+0x44c>
 800816e:	a308      	add	r3, pc, #32	@ (adr r3, 8008190 <_strtod_l+0xad0>)
 8008170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008174:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008178:	f7f8 fc40 	bl	80009fc <__aeabi_dcmpgt>
 800817c:	2800      	cmp	r0, #0
 800817e:	d093      	beq.n	80080a8 <_strtod_l+0x9e8>
 8008180:	e4c4      	b.n	8007b0c <_strtod_l+0x44c>
 8008182:	bf00      	nop
 8008184:	f3af 8000 	nop.w
 8008188:	94a03595 	.word	0x94a03595
 800818c:	3fdfffff 	.word	0x3fdfffff
 8008190:	35afe535 	.word	0x35afe535
 8008194:	3fe00000 	.word	0x3fe00000
 8008198:	000fffff 	.word	0x000fffff
 800819c:	7ff00000 	.word	0x7ff00000
 80081a0:	7fefffff 	.word	0x7fefffff
 80081a4:	3ff00000 	.word	0x3ff00000
 80081a8:	3fe00000 	.word	0x3fe00000
 80081ac:	7fe00000 	.word	0x7fe00000
 80081b0:	7c9fffff 	.word	0x7c9fffff
 80081b4:	bff00000 	.word	0xbff00000
 80081b8:	9b08      	ldr	r3, [sp, #32]
 80081ba:	b323      	cbz	r3, 8008206 <_strtod_l+0xb46>
 80081bc:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80081c0:	d821      	bhi.n	8008206 <_strtod_l+0xb46>
 80081c2:	a327      	add	r3, pc, #156	@ (adr r3, 8008260 <_strtod_l+0xba0>)
 80081c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c8:	4630      	mov	r0, r6
 80081ca:	4639      	mov	r1, r7
 80081cc:	f7f8 fc02 	bl	80009d4 <__aeabi_dcmple>
 80081d0:	b1a0      	cbz	r0, 80081fc <_strtod_l+0xb3c>
 80081d2:	4639      	mov	r1, r7
 80081d4:	4630      	mov	r0, r6
 80081d6:	f7f8 fc31 	bl	8000a3c <__aeabi_d2uiz>
 80081da:	2801      	cmp	r0, #1
 80081dc:	bf38      	it	cc
 80081de:	2001      	movcc	r0, #1
 80081e0:	f7f8 f902 	bl	80003e8 <__aeabi_ui2d>
 80081e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80081e6:	4606      	mov	r6, r0
 80081e8:	460f      	mov	r7, r1
 80081ea:	b9fb      	cbnz	r3, 800822c <_strtod_l+0xb6c>
 80081ec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80081f0:	9014      	str	r0, [sp, #80]	@ 0x50
 80081f2:	9315      	str	r3, [sp, #84]	@ 0x54
 80081f4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80081f8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80081fc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80081fe:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008202:	1b5b      	subs	r3, r3, r5
 8008204:	9311      	str	r3, [sp, #68]	@ 0x44
 8008206:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800820a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800820e:	f001 facb 	bl	80097a8 <__ulp>
 8008212:	4602      	mov	r2, r0
 8008214:	460b      	mov	r3, r1
 8008216:	4650      	mov	r0, sl
 8008218:	4659      	mov	r1, fp
 800821a:	f7f8 f95f 	bl	80004dc <__aeabi_dmul>
 800821e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008222:	f7f7 ffa5 	bl	8000170 <__adddf3>
 8008226:	4682      	mov	sl, r0
 8008228:	468b      	mov	fp, r1
 800822a:	e776      	b.n	800811a <_strtod_l+0xa5a>
 800822c:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008230:	e7e0      	b.n	80081f4 <_strtod_l+0xb34>
 8008232:	a30d      	add	r3, pc, #52	@ (adr r3, 8008268 <_strtod_l+0xba8>)
 8008234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008238:	f7f8 fbc2 	bl	80009c0 <__aeabi_dcmplt>
 800823c:	e79e      	b.n	800817c <_strtod_l+0xabc>
 800823e:	2300      	movs	r3, #0
 8008240:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008242:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008244:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008246:	6013      	str	r3, [r2, #0]
 8008248:	f7ff ba77 	b.w	800773a <_strtod_l+0x7a>
 800824c:	2a65      	cmp	r2, #101	@ 0x65
 800824e:	f43f ab6e 	beq.w	800792e <_strtod_l+0x26e>
 8008252:	2a45      	cmp	r2, #69	@ 0x45
 8008254:	f43f ab6b 	beq.w	800792e <_strtod_l+0x26e>
 8008258:	2301      	movs	r3, #1
 800825a:	f7ff bba6 	b.w	80079aa <_strtod_l+0x2ea>
 800825e:	bf00      	nop
 8008260:	ffc00000 	.word	0xffc00000
 8008264:	41dfffff 	.word	0x41dfffff
 8008268:	94a03595 	.word	0x94a03595
 800826c:	3fcfffff 	.word	0x3fcfffff

08008270 <strtof>:
 8008270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008274:	4d24      	ldr	r5, [pc, #144]	@ (8008308 <strtof+0x98>)
 8008276:	460a      	mov	r2, r1
 8008278:	4b24      	ldr	r3, [pc, #144]	@ (800830c <strtof+0x9c>)
 800827a:	4601      	mov	r1, r0
 800827c:	6828      	ldr	r0, [r5, #0]
 800827e:	f7ff fa1f 	bl	80076c0 <_strtod_l>
 8008282:	4602      	mov	r2, r0
 8008284:	460b      	mov	r3, r1
 8008286:	4606      	mov	r6, r0
 8008288:	460f      	mov	r7, r1
 800828a:	f7f8 fbc1 	bl	8000a10 <__aeabi_dcmpun>
 800828e:	b168      	cbz	r0, 80082ac <strtof+0x3c>
 8008290:	2f00      	cmp	r7, #0
 8008292:	481f      	ldr	r0, [pc, #124]	@ (8008310 <strtof+0xa0>)
 8008294:	da06      	bge.n	80082a4 <strtof+0x34>
 8008296:	f000 facf 	bl	8008838 <nanf>
 800829a:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 800829e:	4620      	mov	r0, r4
 80082a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082a4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082a8:	f000 bac6 	b.w	8008838 <nanf>
 80082ac:	4639      	mov	r1, r7
 80082ae:	4630      	mov	r0, r6
 80082b0:	f7f8 fbe4 	bl	8000a7c <__aeabi_d2f>
 80082b4:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 80082b8:	4604      	mov	r4, r0
 80082ba:	4916      	ldr	r1, [pc, #88]	@ (8008314 <strtof+0xa4>)
 80082bc:	4640      	mov	r0, r8
 80082be:	f7f8 ff01 	bl	80010c4 <__aeabi_fcmpun>
 80082c2:	b9b0      	cbnz	r0, 80082f2 <strtof+0x82>
 80082c4:	4640      	mov	r0, r8
 80082c6:	4913      	ldr	r1, [pc, #76]	@ (8008314 <strtof+0xa4>)
 80082c8:	f7f8 fede 	bl	8001088 <__aeabi_fcmple>
 80082cc:	b988      	cbnz	r0, 80082f2 <strtof+0x82>
 80082ce:	f027 4900 	bic.w	r9, r7, #2147483648	@ 0x80000000
 80082d2:	f04f 32ff 	mov.w	r2, #4294967295
 80082d6:	4630      	mov	r0, r6
 80082d8:	4649      	mov	r1, r9
 80082da:	4b0f      	ldr	r3, [pc, #60]	@ (8008318 <strtof+0xa8>)
 80082dc:	f7f8 fb98 	bl	8000a10 <__aeabi_dcmpun>
 80082e0:	b970      	cbnz	r0, 8008300 <strtof+0x90>
 80082e2:	f04f 32ff 	mov.w	r2, #4294967295
 80082e6:	4630      	mov	r0, r6
 80082e8:	4649      	mov	r1, r9
 80082ea:	4b0b      	ldr	r3, [pc, #44]	@ (8008318 <strtof+0xa8>)
 80082ec:	f7f8 fb72 	bl	80009d4 <__aeabi_dcmple>
 80082f0:	b930      	cbnz	r0, 8008300 <strtof+0x90>
 80082f2:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 80082f6:	d1d2      	bne.n	800829e <strtof+0x2e>
 80082f8:	4b08      	ldr	r3, [pc, #32]	@ (800831c <strtof+0xac>)
 80082fa:	403b      	ands	r3, r7
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d0ce      	beq.n	800829e <strtof+0x2e>
 8008300:	2222      	movs	r2, #34	@ 0x22
 8008302:	682b      	ldr	r3, [r5, #0]
 8008304:	601a      	str	r2, [r3, #0]
 8008306:	e7ca      	b.n	800829e <strtof+0x2e>
 8008308:	2000018c 	.word	0x2000018c
 800830c:	20000020 	.word	0x20000020
 8008310:	0800b23e 	.word	0x0800b23e
 8008314:	7f7fffff 	.word	0x7f7fffff
 8008318:	7fefffff 	.word	0x7fefffff
 800831c:	7ff00000 	.word	0x7ff00000

08008320 <_strtoul_l.constprop.0>:
 8008320:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008324:	4686      	mov	lr, r0
 8008326:	460d      	mov	r5, r1
 8008328:	4e33      	ldr	r6, [pc, #204]	@ (80083f8 <_strtoul_l.constprop.0+0xd8>)
 800832a:	4628      	mov	r0, r5
 800832c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008330:	5d37      	ldrb	r7, [r6, r4]
 8008332:	f017 0708 	ands.w	r7, r7, #8
 8008336:	d1f8      	bne.n	800832a <_strtoul_l.constprop.0+0xa>
 8008338:	2c2d      	cmp	r4, #45	@ 0x2d
 800833a:	d12f      	bne.n	800839c <_strtoul_l.constprop.0+0x7c>
 800833c:	2701      	movs	r7, #1
 800833e:	782c      	ldrb	r4, [r5, #0]
 8008340:	1c85      	adds	r5, r0, #2
 8008342:	f033 0010 	bics.w	r0, r3, #16
 8008346:	d109      	bne.n	800835c <_strtoul_l.constprop.0+0x3c>
 8008348:	2c30      	cmp	r4, #48	@ 0x30
 800834a:	d12c      	bne.n	80083a6 <_strtoul_l.constprop.0+0x86>
 800834c:	7828      	ldrb	r0, [r5, #0]
 800834e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8008352:	2858      	cmp	r0, #88	@ 0x58
 8008354:	d127      	bne.n	80083a6 <_strtoul_l.constprop.0+0x86>
 8008356:	2310      	movs	r3, #16
 8008358:	786c      	ldrb	r4, [r5, #1]
 800835a:	3502      	adds	r5, #2
 800835c:	f04f 38ff 	mov.w	r8, #4294967295
 8008360:	fbb8 f8f3 	udiv	r8, r8, r3
 8008364:	2600      	movs	r6, #0
 8008366:	fb03 f908 	mul.w	r9, r3, r8
 800836a:	4630      	mov	r0, r6
 800836c:	ea6f 0909 	mvn.w	r9, r9
 8008370:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8008374:	f1bc 0f09 	cmp.w	ip, #9
 8008378:	d81c      	bhi.n	80083b4 <_strtoul_l.constprop.0+0x94>
 800837a:	4664      	mov	r4, ip
 800837c:	42a3      	cmp	r3, r4
 800837e:	dd2a      	ble.n	80083d6 <_strtoul_l.constprop.0+0xb6>
 8008380:	f1b6 3fff 	cmp.w	r6, #4294967295
 8008384:	d007      	beq.n	8008396 <_strtoul_l.constprop.0+0x76>
 8008386:	4580      	cmp	r8, r0
 8008388:	d322      	bcc.n	80083d0 <_strtoul_l.constprop.0+0xb0>
 800838a:	d101      	bne.n	8008390 <_strtoul_l.constprop.0+0x70>
 800838c:	45a1      	cmp	r9, r4
 800838e:	db1f      	blt.n	80083d0 <_strtoul_l.constprop.0+0xb0>
 8008390:	2601      	movs	r6, #1
 8008392:	fb00 4003 	mla	r0, r0, r3, r4
 8008396:	f815 4b01 	ldrb.w	r4, [r5], #1
 800839a:	e7e9      	b.n	8008370 <_strtoul_l.constprop.0+0x50>
 800839c:	2c2b      	cmp	r4, #43	@ 0x2b
 800839e:	bf04      	itt	eq
 80083a0:	782c      	ldrbeq	r4, [r5, #0]
 80083a2:	1c85      	addeq	r5, r0, #2
 80083a4:	e7cd      	b.n	8008342 <_strtoul_l.constprop.0+0x22>
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d1d8      	bne.n	800835c <_strtoul_l.constprop.0+0x3c>
 80083aa:	2c30      	cmp	r4, #48	@ 0x30
 80083ac:	bf0c      	ite	eq
 80083ae:	2308      	moveq	r3, #8
 80083b0:	230a      	movne	r3, #10
 80083b2:	e7d3      	b.n	800835c <_strtoul_l.constprop.0+0x3c>
 80083b4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80083b8:	f1bc 0f19 	cmp.w	ip, #25
 80083bc:	d801      	bhi.n	80083c2 <_strtoul_l.constprop.0+0xa2>
 80083be:	3c37      	subs	r4, #55	@ 0x37
 80083c0:	e7dc      	b.n	800837c <_strtoul_l.constprop.0+0x5c>
 80083c2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80083c6:	f1bc 0f19 	cmp.w	ip, #25
 80083ca:	d804      	bhi.n	80083d6 <_strtoul_l.constprop.0+0xb6>
 80083cc:	3c57      	subs	r4, #87	@ 0x57
 80083ce:	e7d5      	b.n	800837c <_strtoul_l.constprop.0+0x5c>
 80083d0:	f04f 36ff 	mov.w	r6, #4294967295
 80083d4:	e7df      	b.n	8008396 <_strtoul_l.constprop.0+0x76>
 80083d6:	1c73      	adds	r3, r6, #1
 80083d8:	d106      	bne.n	80083e8 <_strtoul_l.constprop.0+0xc8>
 80083da:	2322      	movs	r3, #34	@ 0x22
 80083dc:	4630      	mov	r0, r6
 80083de:	f8ce 3000 	str.w	r3, [lr]
 80083e2:	b932      	cbnz	r2, 80083f2 <_strtoul_l.constprop.0+0xd2>
 80083e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80083e8:	b107      	cbz	r7, 80083ec <_strtoul_l.constprop.0+0xcc>
 80083ea:	4240      	negs	r0, r0
 80083ec:	2a00      	cmp	r2, #0
 80083ee:	d0f9      	beq.n	80083e4 <_strtoul_l.constprop.0+0xc4>
 80083f0:	b106      	cbz	r6, 80083f4 <_strtoul_l.constprop.0+0xd4>
 80083f2:	1e69      	subs	r1, r5, #1
 80083f4:	6011      	str	r1, [r2, #0]
 80083f6:	e7f5      	b.n	80083e4 <_strtoul_l.constprop.0+0xc4>
 80083f8:	0800aee9 	.word	0x0800aee9

080083fc <strtoul>:
 80083fc:	4613      	mov	r3, r2
 80083fe:	460a      	mov	r2, r1
 8008400:	4601      	mov	r1, r0
 8008402:	4802      	ldr	r0, [pc, #8]	@ (800840c <strtoul+0x10>)
 8008404:	6800      	ldr	r0, [r0, #0]
 8008406:	f7ff bf8b 	b.w	8008320 <_strtoul_l.constprop.0>
 800840a:	bf00      	nop
 800840c:	2000018c 	.word	0x2000018c

08008410 <std>:
 8008410:	2300      	movs	r3, #0
 8008412:	b510      	push	{r4, lr}
 8008414:	4604      	mov	r4, r0
 8008416:	e9c0 3300 	strd	r3, r3, [r0]
 800841a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800841e:	6083      	str	r3, [r0, #8]
 8008420:	8181      	strh	r1, [r0, #12]
 8008422:	6643      	str	r3, [r0, #100]	@ 0x64
 8008424:	81c2      	strh	r2, [r0, #14]
 8008426:	6183      	str	r3, [r0, #24]
 8008428:	4619      	mov	r1, r3
 800842a:	2208      	movs	r2, #8
 800842c:	305c      	adds	r0, #92	@ 0x5c
 800842e:	f000 f92d 	bl	800868c <memset>
 8008432:	4b0d      	ldr	r3, [pc, #52]	@ (8008468 <std+0x58>)
 8008434:	6224      	str	r4, [r4, #32]
 8008436:	6263      	str	r3, [r4, #36]	@ 0x24
 8008438:	4b0c      	ldr	r3, [pc, #48]	@ (800846c <std+0x5c>)
 800843a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800843c:	4b0c      	ldr	r3, [pc, #48]	@ (8008470 <std+0x60>)
 800843e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008440:	4b0c      	ldr	r3, [pc, #48]	@ (8008474 <std+0x64>)
 8008442:	6323      	str	r3, [r4, #48]	@ 0x30
 8008444:	4b0c      	ldr	r3, [pc, #48]	@ (8008478 <std+0x68>)
 8008446:	429c      	cmp	r4, r3
 8008448:	d006      	beq.n	8008458 <std+0x48>
 800844a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800844e:	4294      	cmp	r4, r2
 8008450:	d002      	beq.n	8008458 <std+0x48>
 8008452:	33d0      	adds	r3, #208	@ 0xd0
 8008454:	429c      	cmp	r4, r3
 8008456:	d105      	bne.n	8008464 <std+0x54>
 8008458:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800845c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008460:	f000 b9ca 	b.w	80087f8 <__retarget_lock_init_recursive>
 8008464:	bd10      	pop	{r4, pc}
 8008466:	bf00      	nop
 8008468:	08008595 	.word	0x08008595
 800846c:	080085b7 	.word	0x080085b7
 8008470:	080085ef 	.word	0x080085ef
 8008474:	08008613 	.word	0x08008613
 8008478:	2000096c 	.word	0x2000096c

0800847c <stdio_exit_handler>:
 800847c:	4a02      	ldr	r2, [pc, #8]	@ (8008488 <stdio_exit_handler+0xc>)
 800847e:	4903      	ldr	r1, [pc, #12]	@ (800848c <stdio_exit_handler+0x10>)
 8008480:	4803      	ldr	r0, [pc, #12]	@ (8008490 <stdio_exit_handler+0x14>)
 8008482:	f000 b869 	b.w	8008558 <_fwalk_sglue>
 8008486:	bf00      	nop
 8008488:	20000014 	.word	0x20000014
 800848c:	0800a0fd 	.word	0x0800a0fd
 8008490:	20000190 	.word	0x20000190

08008494 <cleanup_stdio>:
 8008494:	6841      	ldr	r1, [r0, #4]
 8008496:	4b0c      	ldr	r3, [pc, #48]	@ (80084c8 <cleanup_stdio+0x34>)
 8008498:	b510      	push	{r4, lr}
 800849a:	4299      	cmp	r1, r3
 800849c:	4604      	mov	r4, r0
 800849e:	d001      	beq.n	80084a4 <cleanup_stdio+0x10>
 80084a0:	f001 fe2c 	bl	800a0fc <_fflush_r>
 80084a4:	68a1      	ldr	r1, [r4, #8]
 80084a6:	4b09      	ldr	r3, [pc, #36]	@ (80084cc <cleanup_stdio+0x38>)
 80084a8:	4299      	cmp	r1, r3
 80084aa:	d002      	beq.n	80084b2 <cleanup_stdio+0x1e>
 80084ac:	4620      	mov	r0, r4
 80084ae:	f001 fe25 	bl	800a0fc <_fflush_r>
 80084b2:	68e1      	ldr	r1, [r4, #12]
 80084b4:	4b06      	ldr	r3, [pc, #24]	@ (80084d0 <cleanup_stdio+0x3c>)
 80084b6:	4299      	cmp	r1, r3
 80084b8:	d004      	beq.n	80084c4 <cleanup_stdio+0x30>
 80084ba:	4620      	mov	r0, r4
 80084bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084c0:	f001 be1c 	b.w	800a0fc <_fflush_r>
 80084c4:	bd10      	pop	{r4, pc}
 80084c6:	bf00      	nop
 80084c8:	2000096c 	.word	0x2000096c
 80084cc:	200009d4 	.word	0x200009d4
 80084d0:	20000a3c 	.word	0x20000a3c

080084d4 <global_stdio_init.part.0>:
 80084d4:	b510      	push	{r4, lr}
 80084d6:	4b0b      	ldr	r3, [pc, #44]	@ (8008504 <global_stdio_init.part.0+0x30>)
 80084d8:	4c0b      	ldr	r4, [pc, #44]	@ (8008508 <global_stdio_init.part.0+0x34>)
 80084da:	4a0c      	ldr	r2, [pc, #48]	@ (800850c <global_stdio_init.part.0+0x38>)
 80084dc:	4620      	mov	r0, r4
 80084de:	601a      	str	r2, [r3, #0]
 80084e0:	2104      	movs	r1, #4
 80084e2:	2200      	movs	r2, #0
 80084e4:	f7ff ff94 	bl	8008410 <std>
 80084e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80084ec:	2201      	movs	r2, #1
 80084ee:	2109      	movs	r1, #9
 80084f0:	f7ff ff8e 	bl	8008410 <std>
 80084f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80084f8:	2202      	movs	r2, #2
 80084fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084fe:	2112      	movs	r1, #18
 8008500:	f7ff bf86 	b.w	8008410 <std>
 8008504:	20000aa4 	.word	0x20000aa4
 8008508:	2000096c 	.word	0x2000096c
 800850c:	0800847d 	.word	0x0800847d

08008510 <__sfp_lock_acquire>:
 8008510:	4801      	ldr	r0, [pc, #4]	@ (8008518 <__sfp_lock_acquire+0x8>)
 8008512:	f000 b972 	b.w	80087fa <__retarget_lock_acquire_recursive>
 8008516:	bf00      	nop
 8008518:	20000aad 	.word	0x20000aad

0800851c <__sfp_lock_release>:
 800851c:	4801      	ldr	r0, [pc, #4]	@ (8008524 <__sfp_lock_release+0x8>)
 800851e:	f000 b96d 	b.w	80087fc <__retarget_lock_release_recursive>
 8008522:	bf00      	nop
 8008524:	20000aad 	.word	0x20000aad

08008528 <__sinit>:
 8008528:	b510      	push	{r4, lr}
 800852a:	4604      	mov	r4, r0
 800852c:	f7ff fff0 	bl	8008510 <__sfp_lock_acquire>
 8008530:	6a23      	ldr	r3, [r4, #32]
 8008532:	b11b      	cbz	r3, 800853c <__sinit+0x14>
 8008534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008538:	f7ff bff0 	b.w	800851c <__sfp_lock_release>
 800853c:	4b04      	ldr	r3, [pc, #16]	@ (8008550 <__sinit+0x28>)
 800853e:	6223      	str	r3, [r4, #32]
 8008540:	4b04      	ldr	r3, [pc, #16]	@ (8008554 <__sinit+0x2c>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d1f5      	bne.n	8008534 <__sinit+0xc>
 8008548:	f7ff ffc4 	bl	80084d4 <global_stdio_init.part.0>
 800854c:	e7f2      	b.n	8008534 <__sinit+0xc>
 800854e:	bf00      	nop
 8008550:	08008495 	.word	0x08008495
 8008554:	20000aa4 	.word	0x20000aa4

08008558 <_fwalk_sglue>:
 8008558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800855c:	4607      	mov	r7, r0
 800855e:	4688      	mov	r8, r1
 8008560:	4614      	mov	r4, r2
 8008562:	2600      	movs	r6, #0
 8008564:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008568:	f1b9 0901 	subs.w	r9, r9, #1
 800856c:	d505      	bpl.n	800857a <_fwalk_sglue+0x22>
 800856e:	6824      	ldr	r4, [r4, #0]
 8008570:	2c00      	cmp	r4, #0
 8008572:	d1f7      	bne.n	8008564 <_fwalk_sglue+0xc>
 8008574:	4630      	mov	r0, r6
 8008576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800857a:	89ab      	ldrh	r3, [r5, #12]
 800857c:	2b01      	cmp	r3, #1
 800857e:	d907      	bls.n	8008590 <_fwalk_sglue+0x38>
 8008580:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008584:	3301      	adds	r3, #1
 8008586:	d003      	beq.n	8008590 <_fwalk_sglue+0x38>
 8008588:	4629      	mov	r1, r5
 800858a:	4638      	mov	r0, r7
 800858c:	47c0      	blx	r8
 800858e:	4306      	orrs	r6, r0
 8008590:	3568      	adds	r5, #104	@ 0x68
 8008592:	e7e9      	b.n	8008568 <_fwalk_sglue+0x10>

08008594 <__sread>:
 8008594:	b510      	push	{r4, lr}
 8008596:	460c      	mov	r4, r1
 8008598:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800859c:	f000 f8de 	bl	800875c <_read_r>
 80085a0:	2800      	cmp	r0, #0
 80085a2:	bfab      	itete	ge
 80085a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80085a6:	89a3      	ldrhlt	r3, [r4, #12]
 80085a8:	181b      	addge	r3, r3, r0
 80085aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80085ae:	bfac      	ite	ge
 80085b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80085b2:	81a3      	strhlt	r3, [r4, #12]
 80085b4:	bd10      	pop	{r4, pc}

080085b6 <__swrite>:
 80085b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085ba:	461f      	mov	r7, r3
 80085bc:	898b      	ldrh	r3, [r1, #12]
 80085be:	4605      	mov	r5, r0
 80085c0:	05db      	lsls	r3, r3, #23
 80085c2:	460c      	mov	r4, r1
 80085c4:	4616      	mov	r6, r2
 80085c6:	d505      	bpl.n	80085d4 <__swrite+0x1e>
 80085c8:	2302      	movs	r3, #2
 80085ca:	2200      	movs	r2, #0
 80085cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085d0:	f000 f8b2 	bl	8008738 <_lseek_r>
 80085d4:	89a3      	ldrh	r3, [r4, #12]
 80085d6:	4632      	mov	r2, r6
 80085d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80085dc:	81a3      	strh	r3, [r4, #12]
 80085de:	4628      	mov	r0, r5
 80085e0:	463b      	mov	r3, r7
 80085e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80085ea:	f000 b8c9 	b.w	8008780 <_write_r>

080085ee <__sseek>:
 80085ee:	b510      	push	{r4, lr}
 80085f0:	460c      	mov	r4, r1
 80085f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085f6:	f000 f89f 	bl	8008738 <_lseek_r>
 80085fa:	1c43      	adds	r3, r0, #1
 80085fc:	89a3      	ldrh	r3, [r4, #12]
 80085fe:	bf15      	itete	ne
 8008600:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008602:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008606:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800860a:	81a3      	strheq	r3, [r4, #12]
 800860c:	bf18      	it	ne
 800860e:	81a3      	strhne	r3, [r4, #12]
 8008610:	bd10      	pop	{r4, pc}

08008612 <__sclose>:
 8008612:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008616:	f000 b87f 	b.w	8008718 <_close_r>

0800861a <_vsniprintf_r>:
 800861a:	b530      	push	{r4, r5, lr}
 800861c:	4614      	mov	r4, r2
 800861e:	2c00      	cmp	r4, #0
 8008620:	4605      	mov	r5, r0
 8008622:	461a      	mov	r2, r3
 8008624:	b09b      	sub	sp, #108	@ 0x6c
 8008626:	da05      	bge.n	8008634 <_vsniprintf_r+0x1a>
 8008628:	238b      	movs	r3, #139	@ 0x8b
 800862a:	6003      	str	r3, [r0, #0]
 800862c:	f04f 30ff 	mov.w	r0, #4294967295
 8008630:	b01b      	add	sp, #108	@ 0x6c
 8008632:	bd30      	pop	{r4, r5, pc}
 8008634:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008638:	f8ad 300c 	strh.w	r3, [sp, #12]
 800863c:	bf0c      	ite	eq
 800863e:	4623      	moveq	r3, r4
 8008640:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008644:	9302      	str	r3, [sp, #8]
 8008646:	9305      	str	r3, [sp, #20]
 8008648:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800864c:	9100      	str	r1, [sp, #0]
 800864e:	9104      	str	r1, [sp, #16]
 8008650:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008654:	4669      	mov	r1, sp
 8008656:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8008658:	f001 fa42 	bl	8009ae0 <_svfiprintf_r>
 800865c:	1c43      	adds	r3, r0, #1
 800865e:	bfbc      	itt	lt
 8008660:	238b      	movlt	r3, #139	@ 0x8b
 8008662:	602b      	strlt	r3, [r5, #0]
 8008664:	2c00      	cmp	r4, #0
 8008666:	d0e3      	beq.n	8008630 <_vsniprintf_r+0x16>
 8008668:	2200      	movs	r2, #0
 800866a:	9b00      	ldr	r3, [sp, #0]
 800866c:	701a      	strb	r2, [r3, #0]
 800866e:	e7df      	b.n	8008630 <_vsniprintf_r+0x16>

08008670 <vsniprintf>:
 8008670:	b507      	push	{r0, r1, r2, lr}
 8008672:	9300      	str	r3, [sp, #0]
 8008674:	4613      	mov	r3, r2
 8008676:	460a      	mov	r2, r1
 8008678:	4601      	mov	r1, r0
 800867a:	4803      	ldr	r0, [pc, #12]	@ (8008688 <vsniprintf+0x18>)
 800867c:	6800      	ldr	r0, [r0, #0]
 800867e:	f7ff ffcc 	bl	800861a <_vsniprintf_r>
 8008682:	b003      	add	sp, #12
 8008684:	f85d fb04 	ldr.w	pc, [sp], #4
 8008688:	2000018c 	.word	0x2000018c

0800868c <memset>:
 800868c:	4603      	mov	r3, r0
 800868e:	4402      	add	r2, r0
 8008690:	4293      	cmp	r3, r2
 8008692:	d100      	bne.n	8008696 <memset+0xa>
 8008694:	4770      	bx	lr
 8008696:	f803 1b01 	strb.w	r1, [r3], #1
 800869a:	e7f9      	b.n	8008690 <memset+0x4>

0800869c <strncmp>:
 800869c:	b510      	push	{r4, lr}
 800869e:	b16a      	cbz	r2, 80086bc <strncmp+0x20>
 80086a0:	3901      	subs	r1, #1
 80086a2:	1884      	adds	r4, r0, r2
 80086a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086a8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80086ac:	429a      	cmp	r2, r3
 80086ae:	d103      	bne.n	80086b8 <strncmp+0x1c>
 80086b0:	42a0      	cmp	r0, r4
 80086b2:	d001      	beq.n	80086b8 <strncmp+0x1c>
 80086b4:	2a00      	cmp	r2, #0
 80086b6:	d1f5      	bne.n	80086a4 <strncmp+0x8>
 80086b8:	1ad0      	subs	r0, r2, r3
 80086ba:	bd10      	pop	{r4, pc}
 80086bc:	4610      	mov	r0, r2
 80086be:	e7fc      	b.n	80086ba <strncmp+0x1e>

080086c0 <__strtok_r>:
 80086c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086c2:	4604      	mov	r4, r0
 80086c4:	b908      	cbnz	r0, 80086ca <__strtok_r+0xa>
 80086c6:	6814      	ldr	r4, [r2, #0]
 80086c8:	b144      	cbz	r4, 80086dc <__strtok_r+0x1c>
 80086ca:	460f      	mov	r7, r1
 80086cc:	4620      	mov	r0, r4
 80086ce:	f814 5b01 	ldrb.w	r5, [r4], #1
 80086d2:	f817 6b01 	ldrb.w	r6, [r7], #1
 80086d6:	b91e      	cbnz	r6, 80086e0 <__strtok_r+0x20>
 80086d8:	b965      	cbnz	r5, 80086f4 <__strtok_r+0x34>
 80086da:	6015      	str	r5, [r2, #0]
 80086dc:	2000      	movs	r0, #0
 80086de:	e005      	b.n	80086ec <__strtok_r+0x2c>
 80086e0:	42b5      	cmp	r5, r6
 80086e2:	d1f6      	bne.n	80086d2 <__strtok_r+0x12>
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d1f0      	bne.n	80086ca <__strtok_r+0xa>
 80086e8:	6014      	str	r4, [r2, #0]
 80086ea:	7003      	strb	r3, [r0, #0]
 80086ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086ee:	461c      	mov	r4, r3
 80086f0:	e00c      	b.n	800870c <__strtok_r+0x4c>
 80086f2:	b915      	cbnz	r5, 80086fa <__strtok_r+0x3a>
 80086f4:	460e      	mov	r6, r1
 80086f6:	f814 3b01 	ldrb.w	r3, [r4], #1
 80086fa:	f816 5b01 	ldrb.w	r5, [r6], #1
 80086fe:	42ab      	cmp	r3, r5
 8008700:	d1f7      	bne.n	80086f2 <__strtok_r+0x32>
 8008702:	2b00      	cmp	r3, #0
 8008704:	d0f3      	beq.n	80086ee <__strtok_r+0x2e>
 8008706:	2300      	movs	r3, #0
 8008708:	f804 3c01 	strb.w	r3, [r4, #-1]
 800870c:	6014      	str	r4, [r2, #0]
 800870e:	e7ed      	b.n	80086ec <__strtok_r+0x2c>

08008710 <strtok_r>:
 8008710:	2301      	movs	r3, #1
 8008712:	f7ff bfd5 	b.w	80086c0 <__strtok_r>
	...

08008718 <_close_r>:
 8008718:	b538      	push	{r3, r4, r5, lr}
 800871a:	2300      	movs	r3, #0
 800871c:	4d05      	ldr	r5, [pc, #20]	@ (8008734 <_close_r+0x1c>)
 800871e:	4604      	mov	r4, r0
 8008720:	4608      	mov	r0, r1
 8008722:	602b      	str	r3, [r5, #0]
 8008724:	f7fa ff8d 	bl	8003642 <_close>
 8008728:	1c43      	adds	r3, r0, #1
 800872a:	d102      	bne.n	8008732 <_close_r+0x1a>
 800872c:	682b      	ldr	r3, [r5, #0]
 800872e:	b103      	cbz	r3, 8008732 <_close_r+0x1a>
 8008730:	6023      	str	r3, [r4, #0]
 8008732:	bd38      	pop	{r3, r4, r5, pc}
 8008734:	20000aa8 	.word	0x20000aa8

08008738 <_lseek_r>:
 8008738:	b538      	push	{r3, r4, r5, lr}
 800873a:	4604      	mov	r4, r0
 800873c:	4608      	mov	r0, r1
 800873e:	4611      	mov	r1, r2
 8008740:	2200      	movs	r2, #0
 8008742:	4d05      	ldr	r5, [pc, #20]	@ (8008758 <_lseek_r+0x20>)
 8008744:	602a      	str	r2, [r5, #0]
 8008746:	461a      	mov	r2, r3
 8008748:	f7fa ff9f 	bl	800368a <_lseek>
 800874c:	1c43      	adds	r3, r0, #1
 800874e:	d102      	bne.n	8008756 <_lseek_r+0x1e>
 8008750:	682b      	ldr	r3, [r5, #0]
 8008752:	b103      	cbz	r3, 8008756 <_lseek_r+0x1e>
 8008754:	6023      	str	r3, [r4, #0]
 8008756:	bd38      	pop	{r3, r4, r5, pc}
 8008758:	20000aa8 	.word	0x20000aa8

0800875c <_read_r>:
 800875c:	b538      	push	{r3, r4, r5, lr}
 800875e:	4604      	mov	r4, r0
 8008760:	4608      	mov	r0, r1
 8008762:	4611      	mov	r1, r2
 8008764:	2200      	movs	r2, #0
 8008766:	4d05      	ldr	r5, [pc, #20]	@ (800877c <_read_r+0x20>)
 8008768:	602a      	str	r2, [r5, #0]
 800876a:	461a      	mov	r2, r3
 800876c:	f7fa ff30 	bl	80035d0 <_read>
 8008770:	1c43      	adds	r3, r0, #1
 8008772:	d102      	bne.n	800877a <_read_r+0x1e>
 8008774:	682b      	ldr	r3, [r5, #0]
 8008776:	b103      	cbz	r3, 800877a <_read_r+0x1e>
 8008778:	6023      	str	r3, [r4, #0]
 800877a:	bd38      	pop	{r3, r4, r5, pc}
 800877c:	20000aa8 	.word	0x20000aa8

08008780 <_write_r>:
 8008780:	b538      	push	{r3, r4, r5, lr}
 8008782:	4604      	mov	r4, r0
 8008784:	4608      	mov	r0, r1
 8008786:	4611      	mov	r1, r2
 8008788:	2200      	movs	r2, #0
 800878a:	4d05      	ldr	r5, [pc, #20]	@ (80087a0 <_write_r+0x20>)
 800878c:	602a      	str	r2, [r5, #0]
 800878e:	461a      	mov	r2, r3
 8008790:	f7fa ff3b 	bl	800360a <_write>
 8008794:	1c43      	adds	r3, r0, #1
 8008796:	d102      	bne.n	800879e <_write_r+0x1e>
 8008798:	682b      	ldr	r3, [r5, #0]
 800879a:	b103      	cbz	r3, 800879e <_write_r+0x1e>
 800879c:	6023      	str	r3, [r4, #0]
 800879e:	bd38      	pop	{r3, r4, r5, pc}
 80087a0:	20000aa8 	.word	0x20000aa8

080087a4 <__errno>:
 80087a4:	4b01      	ldr	r3, [pc, #4]	@ (80087ac <__errno+0x8>)
 80087a6:	6818      	ldr	r0, [r3, #0]
 80087a8:	4770      	bx	lr
 80087aa:	bf00      	nop
 80087ac:	2000018c 	.word	0x2000018c

080087b0 <__libc_init_array>:
 80087b0:	b570      	push	{r4, r5, r6, lr}
 80087b2:	2600      	movs	r6, #0
 80087b4:	4d0c      	ldr	r5, [pc, #48]	@ (80087e8 <__libc_init_array+0x38>)
 80087b6:	4c0d      	ldr	r4, [pc, #52]	@ (80087ec <__libc_init_array+0x3c>)
 80087b8:	1b64      	subs	r4, r4, r5
 80087ba:	10a4      	asrs	r4, r4, #2
 80087bc:	42a6      	cmp	r6, r4
 80087be:	d109      	bne.n	80087d4 <__libc_init_array+0x24>
 80087c0:	f002 fa44 	bl	800ac4c <_init>
 80087c4:	2600      	movs	r6, #0
 80087c6:	4d0a      	ldr	r5, [pc, #40]	@ (80087f0 <__libc_init_array+0x40>)
 80087c8:	4c0a      	ldr	r4, [pc, #40]	@ (80087f4 <__libc_init_array+0x44>)
 80087ca:	1b64      	subs	r4, r4, r5
 80087cc:	10a4      	asrs	r4, r4, #2
 80087ce:	42a6      	cmp	r6, r4
 80087d0:	d105      	bne.n	80087de <__libc_init_array+0x2e>
 80087d2:	bd70      	pop	{r4, r5, r6, pc}
 80087d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80087d8:	4798      	blx	r3
 80087da:	3601      	adds	r6, #1
 80087dc:	e7ee      	b.n	80087bc <__libc_init_array+0xc>
 80087de:	f855 3b04 	ldr.w	r3, [r5], #4
 80087e2:	4798      	blx	r3
 80087e4:	3601      	adds	r6, #1
 80087e6:	e7f2      	b.n	80087ce <__libc_init_array+0x1e>
 80087e8:	0800b280 	.word	0x0800b280
 80087ec:	0800b280 	.word	0x0800b280
 80087f0:	0800b280 	.word	0x0800b280
 80087f4:	0800b284 	.word	0x0800b284

080087f8 <__retarget_lock_init_recursive>:
 80087f8:	4770      	bx	lr

080087fa <__retarget_lock_acquire_recursive>:
 80087fa:	4770      	bx	lr

080087fc <__retarget_lock_release_recursive>:
 80087fc:	4770      	bx	lr

080087fe <strcpy>:
 80087fe:	4603      	mov	r3, r0
 8008800:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008804:	f803 2b01 	strb.w	r2, [r3], #1
 8008808:	2a00      	cmp	r2, #0
 800880a:	d1f9      	bne.n	8008800 <strcpy+0x2>
 800880c:	4770      	bx	lr

0800880e <memcpy>:
 800880e:	440a      	add	r2, r1
 8008810:	4291      	cmp	r1, r2
 8008812:	f100 33ff 	add.w	r3, r0, #4294967295
 8008816:	d100      	bne.n	800881a <memcpy+0xc>
 8008818:	4770      	bx	lr
 800881a:	b510      	push	{r4, lr}
 800881c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008820:	4291      	cmp	r1, r2
 8008822:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008826:	d1f9      	bne.n	800881c <memcpy+0xe>
 8008828:	bd10      	pop	{r4, pc}
	...

0800882c <nan>:
 800882c:	2000      	movs	r0, #0
 800882e:	4901      	ldr	r1, [pc, #4]	@ (8008834 <nan+0x8>)
 8008830:	4770      	bx	lr
 8008832:	bf00      	nop
 8008834:	7ff80000 	.word	0x7ff80000

08008838 <nanf>:
 8008838:	4800      	ldr	r0, [pc, #0]	@ (800883c <nanf+0x4>)
 800883a:	4770      	bx	lr
 800883c:	7fc00000 	.word	0x7fc00000

08008840 <_free_r>:
 8008840:	b538      	push	{r3, r4, r5, lr}
 8008842:	4605      	mov	r5, r0
 8008844:	2900      	cmp	r1, #0
 8008846:	d040      	beq.n	80088ca <_free_r+0x8a>
 8008848:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800884c:	1f0c      	subs	r4, r1, #4
 800884e:	2b00      	cmp	r3, #0
 8008850:	bfb8      	it	lt
 8008852:	18e4      	addlt	r4, r4, r3
 8008854:	f000 fc2a 	bl	80090ac <__malloc_lock>
 8008858:	4a1c      	ldr	r2, [pc, #112]	@ (80088cc <_free_r+0x8c>)
 800885a:	6813      	ldr	r3, [r2, #0]
 800885c:	b933      	cbnz	r3, 800886c <_free_r+0x2c>
 800885e:	6063      	str	r3, [r4, #4]
 8008860:	6014      	str	r4, [r2, #0]
 8008862:	4628      	mov	r0, r5
 8008864:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008868:	f000 bc26 	b.w	80090b8 <__malloc_unlock>
 800886c:	42a3      	cmp	r3, r4
 800886e:	d908      	bls.n	8008882 <_free_r+0x42>
 8008870:	6820      	ldr	r0, [r4, #0]
 8008872:	1821      	adds	r1, r4, r0
 8008874:	428b      	cmp	r3, r1
 8008876:	bf01      	itttt	eq
 8008878:	6819      	ldreq	r1, [r3, #0]
 800887a:	685b      	ldreq	r3, [r3, #4]
 800887c:	1809      	addeq	r1, r1, r0
 800887e:	6021      	streq	r1, [r4, #0]
 8008880:	e7ed      	b.n	800885e <_free_r+0x1e>
 8008882:	461a      	mov	r2, r3
 8008884:	685b      	ldr	r3, [r3, #4]
 8008886:	b10b      	cbz	r3, 800888c <_free_r+0x4c>
 8008888:	42a3      	cmp	r3, r4
 800888a:	d9fa      	bls.n	8008882 <_free_r+0x42>
 800888c:	6811      	ldr	r1, [r2, #0]
 800888e:	1850      	adds	r0, r2, r1
 8008890:	42a0      	cmp	r0, r4
 8008892:	d10b      	bne.n	80088ac <_free_r+0x6c>
 8008894:	6820      	ldr	r0, [r4, #0]
 8008896:	4401      	add	r1, r0
 8008898:	1850      	adds	r0, r2, r1
 800889a:	4283      	cmp	r3, r0
 800889c:	6011      	str	r1, [r2, #0]
 800889e:	d1e0      	bne.n	8008862 <_free_r+0x22>
 80088a0:	6818      	ldr	r0, [r3, #0]
 80088a2:	685b      	ldr	r3, [r3, #4]
 80088a4:	4408      	add	r0, r1
 80088a6:	6010      	str	r0, [r2, #0]
 80088a8:	6053      	str	r3, [r2, #4]
 80088aa:	e7da      	b.n	8008862 <_free_r+0x22>
 80088ac:	d902      	bls.n	80088b4 <_free_r+0x74>
 80088ae:	230c      	movs	r3, #12
 80088b0:	602b      	str	r3, [r5, #0]
 80088b2:	e7d6      	b.n	8008862 <_free_r+0x22>
 80088b4:	6820      	ldr	r0, [r4, #0]
 80088b6:	1821      	adds	r1, r4, r0
 80088b8:	428b      	cmp	r3, r1
 80088ba:	bf01      	itttt	eq
 80088bc:	6819      	ldreq	r1, [r3, #0]
 80088be:	685b      	ldreq	r3, [r3, #4]
 80088c0:	1809      	addeq	r1, r1, r0
 80088c2:	6021      	streq	r1, [r4, #0]
 80088c4:	6063      	str	r3, [r4, #4]
 80088c6:	6054      	str	r4, [r2, #4]
 80088c8:	e7cb      	b.n	8008862 <_free_r+0x22>
 80088ca:	bd38      	pop	{r3, r4, r5, pc}
 80088cc:	20000ab4 	.word	0x20000ab4

080088d0 <rshift>:
 80088d0:	6903      	ldr	r3, [r0, #16]
 80088d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80088d6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80088da:	f100 0414 	add.w	r4, r0, #20
 80088de:	ea4f 1261 	mov.w	r2, r1, asr #5
 80088e2:	dd46      	ble.n	8008972 <rshift+0xa2>
 80088e4:	f011 011f 	ands.w	r1, r1, #31
 80088e8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80088ec:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80088f0:	d10c      	bne.n	800890c <rshift+0x3c>
 80088f2:	4629      	mov	r1, r5
 80088f4:	f100 0710 	add.w	r7, r0, #16
 80088f8:	42b1      	cmp	r1, r6
 80088fa:	d335      	bcc.n	8008968 <rshift+0x98>
 80088fc:	1a9b      	subs	r3, r3, r2
 80088fe:	009b      	lsls	r3, r3, #2
 8008900:	1eea      	subs	r2, r5, #3
 8008902:	4296      	cmp	r6, r2
 8008904:	bf38      	it	cc
 8008906:	2300      	movcc	r3, #0
 8008908:	4423      	add	r3, r4
 800890a:	e015      	b.n	8008938 <rshift+0x68>
 800890c:	46a1      	mov	r9, r4
 800890e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008912:	f1c1 0820 	rsb	r8, r1, #32
 8008916:	40cf      	lsrs	r7, r1
 8008918:	f105 0e04 	add.w	lr, r5, #4
 800891c:	4576      	cmp	r6, lr
 800891e:	46f4      	mov	ip, lr
 8008920:	d816      	bhi.n	8008950 <rshift+0x80>
 8008922:	1a9a      	subs	r2, r3, r2
 8008924:	0092      	lsls	r2, r2, #2
 8008926:	3a04      	subs	r2, #4
 8008928:	3501      	adds	r5, #1
 800892a:	42ae      	cmp	r6, r5
 800892c:	bf38      	it	cc
 800892e:	2200      	movcc	r2, #0
 8008930:	18a3      	adds	r3, r4, r2
 8008932:	50a7      	str	r7, [r4, r2]
 8008934:	b107      	cbz	r7, 8008938 <rshift+0x68>
 8008936:	3304      	adds	r3, #4
 8008938:	42a3      	cmp	r3, r4
 800893a:	eba3 0204 	sub.w	r2, r3, r4
 800893e:	bf08      	it	eq
 8008940:	2300      	moveq	r3, #0
 8008942:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008946:	6102      	str	r2, [r0, #16]
 8008948:	bf08      	it	eq
 800894a:	6143      	streq	r3, [r0, #20]
 800894c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008950:	f8dc c000 	ldr.w	ip, [ip]
 8008954:	fa0c fc08 	lsl.w	ip, ip, r8
 8008958:	ea4c 0707 	orr.w	r7, ip, r7
 800895c:	f849 7b04 	str.w	r7, [r9], #4
 8008960:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008964:	40cf      	lsrs	r7, r1
 8008966:	e7d9      	b.n	800891c <rshift+0x4c>
 8008968:	f851 cb04 	ldr.w	ip, [r1], #4
 800896c:	f847 cf04 	str.w	ip, [r7, #4]!
 8008970:	e7c2      	b.n	80088f8 <rshift+0x28>
 8008972:	4623      	mov	r3, r4
 8008974:	e7e0      	b.n	8008938 <rshift+0x68>

08008976 <__hexdig_fun>:
 8008976:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800897a:	2b09      	cmp	r3, #9
 800897c:	d802      	bhi.n	8008984 <__hexdig_fun+0xe>
 800897e:	3820      	subs	r0, #32
 8008980:	b2c0      	uxtb	r0, r0
 8008982:	4770      	bx	lr
 8008984:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008988:	2b05      	cmp	r3, #5
 800898a:	d801      	bhi.n	8008990 <__hexdig_fun+0x1a>
 800898c:	3847      	subs	r0, #71	@ 0x47
 800898e:	e7f7      	b.n	8008980 <__hexdig_fun+0xa>
 8008990:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008994:	2b05      	cmp	r3, #5
 8008996:	d801      	bhi.n	800899c <__hexdig_fun+0x26>
 8008998:	3827      	subs	r0, #39	@ 0x27
 800899a:	e7f1      	b.n	8008980 <__hexdig_fun+0xa>
 800899c:	2000      	movs	r0, #0
 800899e:	4770      	bx	lr

080089a0 <__gethex>:
 80089a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089a4:	468a      	mov	sl, r1
 80089a6:	4690      	mov	r8, r2
 80089a8:	b085      	sub	sp, #20
 80089aa:	9302      	str	r3, [sp, #8]
 80089ac:	680b      	ldr	r3, [r1, #0]
 80089ae:	9001      	str	r0, [sp, #4]
 80089b0:	1c9c      	adds	r4, r3, #2
 80089b2:	46a1      	mov	r9, r4
 80089b4:	f814 0b01 	ldrb.w	r0, [r4], #1
 80089b8:	2830      	cmp	r0, #48	@ 0x30
 80089ba:	d0fa      	beq.n	80089b2 <__gethex+0x12>
 80089bc:	eba9 0303 	sub.w	r3, r9, r3
 80089c0:	f1a3 0b02 	sub.w	fp, r3, #2
 80089c4:	f7ff ffd7 	bl	8008976 <__hexdig_fun>
 80089c8:	4605      	mov	r5, r0
 80089ca:	2800      	cmp	r0, #0
 80089cc:	d168      	bne.n	8008aa0 <__gethex+0x100>
 80089ce:	2201      	movs	r2, #1
 80089d0:	4648      	mov	r0, r9
 80089d2:	499f      	ldr	r1, [pc, #636]	@ (8008c50 <__gethex+0x2b0>)
 80089d4:	f7ff fe62 	bl	800869c <strncmp>
 80089d8:	4607      	mov	r7, r0
 80089da:	2800      	cmp	r0, #0
 80089dc:	d167      	bne.n	8008aae <__gethex+0x10e>
 80089de:	f899 0001 	ldrb.w	r0, [r9, #1]
 80089e2:	4626      	mov	r6, r4
 80089e4:	f7ff ffc7 	bl	8008976 <__hexdig_fun>
 80089e8:	2800      	cmp	r0, #0
 80089ea:	d062      	beq.n	8008ab2 <__gethex+0x112>
 80089ec:	4623      	mov	r3, r4
 80089ee:	7818      	ldrb	r0, [r3, #0]
 80089f0:	4699      	mov	r9, r3
 80089f2:	2830      	cmp	r0, #48	@ 0x30
 80089f4:	f103 0301 	add.w	r3, r3, #1
 80089f8:	d0f9      	beq.n	80089ee <__gethex+0x4e>
 80089fa:	f7ff ffbc 	bl	8008976 <__hexdig_fun>
 80089fe:	fab0 f580 	clz	r5, r0
 8008a02:	f04f 0b01 	mov.w	fp, #1
 8008a06:	096d      	lsrs	r5, r5, #5
 8008a08:	464a      	mov	r2, r9
 8008a0a:	4616      	mov	r6, r2
 8008a0c:	7830      	ldrb	r0, [r6, #0]
 8008a0e:	3201      	adds	r2, #1
 8008a10:	f7ff ffb1 	bl	8008976 <__hexdig_fun>
 8008a14:	2800      	cmp	r0, #0
 8008a16:	d1f8      	bne.n	8008a0a <__gethex+0x6a>
 8008a18:	2201      	movs	r2, #1
 8008a1a:	4630      	mov	r0, r6
 8008a1c:	498c      	ldr	r1, [pc, #560]	@ (8008c50 <__gethex+0x2b0>)
 8008a1e:	f7ff fe3d 	bl	800869c <strncmp>
 8008a22:	2800      	cmp	r0, #0
 8008a24:	d13f      	bne.n	8008aa6 <__gethex+0x106>
 8008a26:	b944      	cbnz	r4, 8008a3a <__gethex+0x9a>
 8008a28:	1c74      	adds	r4, r6, #1
 8008a2a:	4622      	mov	r2, r4
 8008a2c:	4616      	mov	r6, r2
 8008a2e:	7830      	ldrb	r0, [r6, #0]
 8008a30:	3201      	adds	r2, #1
 8008a32:	f7ff ffa0 	bl	8008976 <__hexdig_fun>
 8008a36:	2800      	cmp	r0, #0
 8008a38:	d1f8      	bne.n	8008a2c <__gethex+0x8c>
 8008a3a:	1ba4      	subs	r4, r4, r6
 8008a3c:	00a7      	lsls	r7, r4, #2
 8008a3e:	7833      	ldrb	r3, [r6, #0]
 8008a40:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008a44:	2b50      	cmp	r3, #80	@ 0x50
 8008a46:	d13e      	bne.n	8008ac6 <__gethex+0x126>
 8008a48:	7873      	ldrb	r3, [r6, #1]
 8008a4a:	2b2b      	cmp	r3, #43	@ 0x2b
 8008a4c:	d033      	beq.n	8008ab6 <__gethex+0x116>
 8008a4e:	2b2d      	cmp	r3, #45	@ 0x2d
 8008a50:	d034      	beq.n	8008abc <__gethex+0x11c>
 8008a52:	2400      	movs	r4, #0
 8008a54:	1c71      	adds	r1, r6, #1
 8008a56:	7808      	ldrb	r0, [r1, #0]
 8008a58:	f7ff ff8d 	bl	8008976 <__hexdig_fun>
 8008a5c:	1e43      	subs	r3, r0, #1
 8008a5e:	b2db      	uxtb	r3, r3
 8008a60:	2b18      	cmp	r3, #24
 8008a62:	d830      	bhi.n	8008ac6 <__gethex+0x126>
 8008a64:	f1a0 0210 	sub.w	r2, r0, #16
 8008a68:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008a6c:	f7ff ff83 	bl	8008976 <__hexdig_fun>
 8008a70:	f100 3cff 	add.w	ip, r0, #4294967295
 8008a74:	fa5f fc8c 	uxtb.w	ip, ip
 8008a78:	f1bc 0f18 	cmp.w	ip, #24
 8008a7c:	f04f 030a 	mov.w	r3, #10
 8008a80:	d91e      	bls.n	8008ac0 <__gethex+0x120>
 8008a82:	b104      	cbz	r4, 8008a86 <__gethex+0xe6>
 8008a84:	4252      	negs	r2, r2
 8008a86:	4417      	add	r7, r2
 8008a88:	f8ca 1000 	str.w	r1, [sl]
 8008a8c:	b1ed      	cbz	r5, 8008aca <__gethex+0x12a>
 8008a8e:	f1bb 0f00 	cmp.w	fp, #0
 8008a92:	bf0c      	ite	eq
 8008a94:	2506      	moveq	r5, #6
 8008a96:	2500      	movne	r5, #0
 8008a98:	4628      	mov	r0, r5
 8008a9a:	b005      	add	sp, #20
 8008a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aa0:	2500      	movs	r5, #0
 8008aa2:	462c      	mov	r4, r5
 8008aa4:	e7b0      	b.n	8008a08 <__gethex+0x68>
 8008aa6:	2c00      	cmp	r4, #0
 8008aa8:	d1c7      	bne.n	8008a3a <__gethex+0x9a>
 8008aaa:	4627      	mov	r7, r4
 8008aac:	e7c7      	b.n	8008a3e <__gethex+0x9e>
 8008aae:	464e      	mov	r6, r9
 8008ab0:	462f      	mov	r7, r5
 8008ab2:	2501      	movs	r5, #1
 8008ab4:	e7c3      	b.n	8008a3e <__gethex+0x9e>
 8008ab6:	2400      	movs	r4, #0
 8008ab8:	1cb1      	adds	r1, r6, #2
 8008aba:	e7cc      	b.n	8008a56 <__gethex+0xb6>
 8008abc:	2401      	movs	r4, #1
 8008abe:	e7fb      	b.n	8008ab8 <__gethex+0x118>
 8008ac0:	fb03 0002 	mla	r0, r3, r2, r0
 8008ac4:	e7ce      	b.n	8008a64 <__gethex+0xc4>
 8008ac6:	4631      	mov	r1, r6
 8008ac8:	e7de      	b.n	8008a88 <__gethex+0xe8>
 8008aca:	4629      	mov	r1, r5
 8008acc:	eba6 0309 	sub.w	r3, r6, r9
 8008ad0:	3b01      	subs	r3, #1
 8008ad2:	2b07      	cmp	r3, #7
 8008ad4:	dc0a      	bgt.n	8008aec <__gethex+0x14c>
 8008ad6:	9801      	ldr	r0, [sp, #4]
 8008ad8:	f000 faf4 	bl	80090c4 <_Balloc>
 8008adc:	4604      	mov	r4, r0
 8008ade:	b940      	cbnz	r0, 8008af2 <__gethex+0x152>
 8008ae0:	4602      	mov	r2, r0
 8008ae2:	21e4      	movs	r1, #228	@ 0xe4
 8008ae4:	4b5b      	ldr	r3, [pc, #364]	@ (8008c54 <__gethex+0x2b4>)
 8008ae6:	485c      	ldr	r0, [pc, #368]	@ (8008c58 <__gethex+0x2b8>)
 8008ae8:	f001 fb68 	bl	800a1bc <__assert_func>
 8008aec:	3101      	adds	r1, #1
 8008aee:	105b      	asrs	r3, r3, #1
 8008af0:	e7ef      	b.n	8008ad2 <__gethex+0x132>
 8008af2:	2300      	movs	r3, #0
 8008af4:	f100 0a14 	add.w	sl, r0, #20
 8008af8:	4655      	mov	r5, sl
 8008afa:	469b      	mov	fp, r3
 8008afc:	45b1      	cmp	r9, r6
 8008afe:	d337      	bcc.n	8008b70 <__gethex+0x1d0>
 8008b00:	f845 bb04 	str.w	fp, [r5], #4
 8008b04:	eba5 050a 	sub.w	r5, r5, sl
 8008b08:	10ad      	asrs	r5, r5, #2
 8008b0a:	6125      	str	r5, [r4, #16]
 8008b0c:	4658      	mov	r0, fp
 8008b0e:	f000 fbcb 	bl	80092a8 <__hi0bits>
 8008b12:	016d      	lsls	r5, r5, #5
 8008b14:	f8d8 6000 	ldr.w	r6, [r8]
 8008b18:	1a2d      	subs	r5, r5, r0
 8008b1a:	42b5      	cmp	r5, r6
 8008b1c:	dd54      	ble.n	8008bc8 <__gethex+0x228>
 8008b1e:	1bad      	subs	r5, r5, r6
 8008b20:	4629      	mov	r1, r5
 8008b22:	4620      	mov	r0, r4
 8008b24:	f000 ff53 	bl	80099ce <__any_on>
 8008b28:	4681      	mov	r9, r0
 8008b2a:	b178      	cbz	r0, 8008b4c <__gethex+0x1ac>
 8008b2c:	f04f 0901 	mov.w	r9, #1
 8008b30:	1e6b      	subs	r3, r5, #1
 8008b32:	1159      	asrs	r1, r3, #5
 8008b34:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008b38:	f003 021f 	and.w	r2, r3, #31
 8008b3c:	fa09 f202 	lsl.w	r2, r9, r2
 8008b40:	420a      	tst	r2, r1
 8008b42:	d003      	beq.n	8008b4c <__gethex+0x1ac>
 8008b44:	454b      	cmp	r3, r9
 8008b46:	dc36      	bgt.n	8008bb6 <__gethex+0x216>
 8008b48:	f04f 0902 	mov.w	r9, #2
 8008b4c:	4629      	mov	r1, r5
 8008b4e:	4620      	mov	r0, r4
 8008b50:	f7ff febe 	bl	80088d0 <rshift>
 8008b54:	442f      	add	r7, r5
 8008b56:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008b5a:	42bb      	cmp	r3, r7
 8008b5c:	da42      	bge.n	8008be4 <__gethex+0x244>
 8008b5e:	4621      	mov	r1, r4
 8008b60:	9801      	ldr	r0, [sp, #4]
 8008b62:	f000 faef 	bl	8009144 <_Bfree>
 8008b66:	2300      	movs	r3, #0
 8008b68:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008b6a:	25a3      	movs	r5, #163	@ 0xa3
 8008b6c:	6013      	str	r3, [r2, #0]
 8008b6e:	e793      	b.n	8008a98 <__gethex+0xf8>
 8008b70:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008b74:	2a2e      	cmp	r2, #46	@ 0x2e
 8008b76:	d012      	beq.n	8008b9e <__gethex+0x1fe>
 8008b78:	2b20      	cmp	r3, #32
 8008b7a:	d104      	bne.n	8008b86 <__gethex+0x1e6>
 8008b7c:	f845 bb04 	str.w	fp, [r5], #4
 8008b80:	f04f 0b00 	mov.w	fp, #0
 8008b84:	465b      	mov	r3, fp
 8008b86:	7830      	ldrb	r0, [r6, #0]
 8008b88:	9303      	str	r3, [sp, #12]
 8008b8a:	f7ff fef4 	bl	8008976 <__hexdig_fun>
 8008b8e:	9b03      	ldr	r3, [sp, #12]
 8008b90:	f000 000f 	and.w	r0, r0, #15
 8008b94:	4098      	lsls	r0, r3
 8008b96:	ea4b 0b00 	orr.w	fp, fp, r0
 8008b9a:	3304      	adds	r3, #4
 8008b9c:	e7ae      	b.n	8008afc <__gethex+0x15c>
 8008b9e:	45b1      	cmp	r9, r6
 8008ba0:	d8ea      	bhi.n	8008b78 <__gethex+0x1d8>
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	4630      	mov	r0, r6
 8008ba6:	492a      	ldr	r1, [pc, #168]	@ (8008c50 <__gethex+0x2b0>)
 8008ba8:	9303      	str	r3, [sp, #12]
 8008baa:	f7ff fd77 	bl	800869c <strncmp>
 8008bae:	9b03      	ldr	r3, [sp, #12]
 8008bb0:	2800      	cmp	r0, #0
 8008bb2:	d1e1      	bne.n	8008b78 <__gethex+0x1d8>
 8008bb4:	e7a2      	b.n	8008afc <__gethex+0x15c>
 8008bb6:	4620      	mov	r0, r4
 8008bb8:	1ea9      	subs	r1, r5, #2
 8008bba:	f000 ff08 	bl	80099ce <__any_on>
 8008bbe:	2800      	cmp	r0, #0
 8008bc0:	d0c2      	beq.n	8008b48 <__gethex+0x1a8>
 8008bc2:	f04f 0903 	mov.w	r9, #3
 8008bc6:	e7c1      	b.n	8008b4c <__gethex+0x1ac>
 8008bc8:	da09      	bge.n	8008bde <__gethex+0x23e>
 8008bca:	1b75      	subs	r5, r6, r5
 8008bcc:	4621      	mov	r1, r4
 8008bce:	462a      	mov	r2, r5
 8008bd0:	9801      	ldr	r0, [sp, #4]
 8008bd2:	f000 fccd 	bl	8009570 <__lshift>
 8008bd6:	4604      	mov	r4, r0
 8008bd8:	1b7f      	subs	r7, r7, r5
 8008bda:	f100 0a14 	add.w	sl, r0, #20
 8008bde:	f04f 0900 	mov.w	r9, #0
 8008be2:	e7b8      	b.n	8008b56 <__gethex+0x1b6>
 8008be4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008be8:	42bd      	cmp	r5, r7
 8008bea:	dd6f      	ble.n	8008ccc <__gethex+0x32c>
 8008bec:	1bed      	subs	r5, r5, r7
 8008bee:	42ae      	cmp	r6, r5
 8008bf0:	dc34      	bgt.n	8008c5c <__gethex+0x2bc>
 8008bf2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008bf6:	2b02      	cmp	r3, #2
 8008bf8:	d022      	beq.n	8008c40 <__gethex+0x2a0>
 8008bfa:	2b03      	cmp	r3, #3
 8008bfc:	d024      	beq.n	8008c48 <__gethex+0x2a8>
 8008bfe:	2b01      	cmp	r3, #1
 8008c00:	d115      	bne.n	8008c2e <__gethex+0x28e>
 8008c02:	42ae      	cmp	r6, r5
 8008c04:	d113      	bne.n	8008c2e <__gethex+0x28e>
 8008c06:	2e01      	cmp	r6, #1
 8008c08:	d10b      	bne.n	8008c22 <__gethex+0x282>
 8008c0a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008c0e:	9a02      	ldr	r2, [sp, #8]
 8008c10:	2562      	movs	r5, #98	@ 0x62
 8008c12:	6013      	str	r3, [r2, #0]
 8008c14:	2301      	movs	r3, #1
 8008c16:	6123      	str	r3, [r4, #16]
 8008c18:	f8ca 3000 	str.w	r3, [sl]
 8008c1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c1e:	601c      	str	r4, [r3, #0]
 8008c20:	e73a      	b.n	8008a98 <__gethex+0xf8>
 8008c22:	4620      	mov	r0, r4
 8008c24:	1e71      	subs	r1, r6, #1
 8008c26:	f000 fed2 	bl	80099ce <__any_on>
 8008c2a:	2800      	cmp	r0, #0
 8008c2c:	d1ed      	bne.n	8008c0a <__gethex+0x26a>
 8008c2e:	4621      	mov	r1, r4
 8008c30:	9801      	ldr	r0, [sp, #4]
 8008c32:	f000 fa87 	bl	8009144 <_Bfree>
 8008c36:	2300      	movs	r3, #0
 8008c38:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008c3a:	2550      	movs	r5, #80	@ 0x50
 8008c3c:	6013      	str	r3, [r2, #0]
 8008c3e:	e72b      	b.n	8008a98 <__gethex+0xf8>
 8008c40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d1f3      	bne.n	8008c2e <__gethex+0x28e>
 8008c46:	e7e0      	b.n	8008c0a <__gethex+0x26a>
 8008c48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d1dd      	bne.n	8008c0a <__gethex+0x26a>
 8008c4e:	e7ee      	b.n	8008c2e <__gethex+0x28e>
 8008c50:	0800ae86 	.word	0x0800ae86
 8008c54:	0800aff1 	.word	0x0800aff1
 8008c58:	0800b002 	.word	0x0800b002
 8008c5c:	1e6f      	subs	r7, r5, #1
 8008c5e:	f1b9 0f00 	cmp.w	r9, #0
 8008c62:	d130      	bne.n	8008cc6 <__gethex+0x326>
 8008c64:	b127      	cbz	r7, 8008c70 <__gethex+0x2d0>
 8008c66:	4639      	mov	r1, r7
 8008c68:	4620      	mov	r0, r4
 8008c6a:	f000 feb0 	bl	80099ce <__any_on>
 8008c6e:	4681      	mov	r9, r0
 8008c70:	2301      	movs	r3, #1
 8008c72:	4629      	mov	r1, r5
 8008c74:	1b76      	subs	r6, r6, r5
 8008c76:	2502      	movs	r5, #2
 8008c78:	117a      	asrs	r2, r7, #5
 8008c7a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008c7e:	f007 071f 	and.w	r7, r7, #31
 8008c82:	40bb      	lsls	r3, r7
 8008c84:	4213      	tst	r3, r2
 8008c86:	4620      	mov	r0, r4
 8008c88:	bf18      	it	ne
 8008c8a:	f049 0902 	orrne.w	r9, r9, #2
 8008c8e:	f7ff fe1f 	bl	80088d0 <rshift>
 8008c92:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008c96:	f1b9 0f00 	cmp.w	r9, #0
 8008c9a:	d047      	beq.n	8008d2c <__gethex+0x38c>
 8008c9c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008ca0:	2b02      	cmp	r3, #2
 8008ca2:	d015      	beq.n	8008cd0 <__gethex+0x330>
 8008ca4:	2b03      	cmp	r3, #3
 8008ca6:	d017      	beq.n	8008cd8 <__gethex+0x338>
 8008ca8:	2b01      	cmp	r3, #1
 8008caa:	d109      	bne.n	8008cc0 <__gethex+0x320>
 8008cac:	f019 0f02 	tst.w	r9, #2
 8008cb0:	d006      	beq.n	8008cc0 <__gethex+0x320>
 8008cb2:	f8da 3000 	ldr.w	r3, [sl]
 8008cb6:	ea49 0903 	orr.w	r9, r9, r3
 8008cba:	f019 0f01 	tst.w	r9, #1
 8008cbe:	d10e      	bne.n	8008cde <__gethex+0x33e>
 8008cc0:	f045 0510 	orr.w	r5, r5, #16
 8008cc4:	e032      	b.n	8008d2c <__gethex+0x38c>
 8008cc6:	f04f 0901 	mov.w	r9, #1
 8008cca:	e7d1      	b.n	8008c70 <__gethex+0x2d0>
 8008ccc:	2501      	movs	r5, #1
 8008cce:	e7e2      	b.n	8008c96 <__gethex+0x2f6>
 8008cd0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008cd2:	f1c3 0301 	rsb	r3, r3, #1
 8008cd6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008cd8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d0f0      	beq.n	8008cc0 <__gethex+0x320>
 8008cde:	f04f 0c00 	mov.w	ip, #0
 8008ce2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008ce6:	f104 0314 	add.w	r3, r4, #20
 8008cea:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008cee:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cf8:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008cfc:	d01b      	beq.n	8008d36 <__gethex+0x396>
 8008cfe:	3201      	adds	r2, #1
 8008d00:	6002      	str	r2, [r0, #0]
 8008d02:	2d02      	cmp	r5, #2
 8008d04:	f104 0314 	add.w	r3, r4, #20
 8008d08:	d13c      	bne.n	8008d84 <__gethex+0x3e4>
 8008d0a:	f8d8 2000 	ldr.w	r2, [r8]
 8008d0e:	3a01      	subs	r2, #1
 8008d10:	42b2      	cmp	r2, r6
 8008d12:	d109      	bne.n	8008d28 <__gethex+0x388>
 8008d14:	2201      	movs	r2, #1
 8008d16:	1171      	asrs	r1, r6, #5
 8008d18:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008d1c:	f006 061f 	and.w	r6, r6, #31
 8008d20:	fa02 f606 	lsl.w	r6, r2, r6
 8008d24:	421e      	tst	r6, r3
 8008d26:	d13a      	bne.n	8008d9e <__gethex+0x3fe>
 8008d28:	f045 0520 	orr.w	r5, r5, #32
 8008d2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d2e:	601c      	str	r4, [r3, #0]
 8008d30:	9b02      	ldr	r3, [sp, #8]
 8008d32:	601f      	str	r7, [r3, #0]
 8008d34:	e6b0      	b.n	8008a98 <__gethex+0xf8>
 8008d36:	4299      	cmp	r1, r3
 8008d38:	f843 cc04 	str.w	ip, [r3, #-4]
 8008d3c:	d8d9      	bhi.n	8008cf2 <__gethex+0x352>
 8008d3e:	68a3      	ldr	r3, [r4, #8]
 8008d40:	459b      	cmp	fp, r3
 8008d42:	db17      	blt.n	8008d74 <__gethex+0x3d4>
 8008d44:	6861      	ldr	r1, [r4, #4]
 8008d46:	9801      	ldr	r0, [sp, #4]
 8008d48:	3101      	adds	r1, #1
 8008d4a:	f000 f9bb 	bl	80090c4 <_Balloc>
 8008d4e:	4681      	mov	r9, r0
 8008d50:	b918      	cbnz	r0, 8008d5a <__gethex+0x3ba>
 8008d52:	4602      	mov	r2, r0
 8008d54:	2184      	movs	r1, #132	@ 0x84
 8008d56:	4b19      	ldr	r3, [pc, #100]	@ (8008dbc <__gethex+0x41c>)
 8008d58:	e6c5      	b.n	8008ae6 <__gethex+0x146>
 8008d5a:	6922      	ldr	r2, [r4, #16]
 8008d5c:	f104 010c 	add.w	r1, r4, #12
 8008d60:	3202      	adds	r2, #2
 8008d62:	0092      	lsls	r2, r2, #2
 8008d64:	300c      	adds	r0, #12
 8008d66:	f7ff fd52 	bl	800880e <memcpy>
 8008d6a:	4621      	mov	r1, r4
 8008d6c:	9801      	ldr	r0, [sp, #4]
 8008d6e:	f000 f9e9 	bl	8009144 <_Bfree>
 8008d72:	464c      	mov	r4, r9
 8008d74:	6923      	ldr	r3, [r4, #16]
 8008d76:	1c5a      	adds	r2, r3, #1
 8008d78:	6122      	str	r2, [r4, #16]
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008d80:	615a      	str	r2, [r3, #20]
 8008d82:	e7be      	b.n	8008d02 <__gethex+0x362>
 8008d84:	6922      	ldr	r2, [r4, #16]
 8008d86:	455a      	cmp	r2, fp
 8008d88:	dd0b      	ble.n	8008da2 <__gethex+0x402>
 8008d8a:	2101      	movs	r1, #1
 8008d8c:	4620      	mov	r0, r4
 8008d8e:	f7ff fd9f 	bl	80088d0 <rshift>
 8008d92:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008d96:	3701      	adds	r7, #1
 8008d98:	42bb      	cmp	r3, r7
 8008d9a:	f6ff aee0 	blt.w	8008b5e <__gethex+0x1be>
 8008d9e:	2501      	movs	r5, #1
 8008da0:	e7c2      	b.n	8008d28 <__gethex+0x388>
 8008da2:	f016 061f 	ands.w	r6, r6, #31
 8008da6:	d0fa      	beq.n	8008d9e <__gethex+0x3fe>
 8008da8:	4453      	add	r3, sl
 8008daa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008dae:	f000 fa7b 	bl	80092a8 <__hi0bits>
 8008db2:	f1c6 0620 	rsb	r6, r6, #32
 8008db6:	42b0      	cmp	r0, r6
 8008db8:	dbe7      	blt.n	8008d8a <__gethex+0x3ea>
 8008dba:	e7f0      	b.n	8008d9e <__gethex+0x3fe>
 8008dbc:	0800aff1 	.word	0x0800aff1

08008dc0 <L_shift>:
 8008dc0:	f1c2 0208 	rsb	r2, r2, #8
 8008dc4:	0092      	lsls	r2, r2, #2
 8008dc6:	b570      	push	{r4, r5, r6, lr}
 8008dc8:	f1c2 0620 	rsb	r6, r2, #32
 8008dcc:	6843      	ldr	r3, [r0, #4]
 8008dce:	6804      	ldr	r4, [r0, #0]
 8008dd0:	fa03 f506 	lsl.w	r5, r3, r6
 8008dd4:	432c      	orrs	r4, r5
 8008dd6:	40d3      	lsrs	r3, r2
 8008dd8:	6004      	str	r4, [r0, #0]
 8008dda:	f840 3f04 	str.w	r3, [r0, #4]!
 8008dde:	4288      	cmp	r0, r1
 8008de0:	d3f4      	bcc.n	8008dcc <L_shift+0xc>
 8008de2:	bd70      	pop	{r4, r5, r6, pc}

08008de4 <__match>:
 8008de4:	b530      	push	{r4, r5, lr}
 8008de6:	6803      	ldr	r3, [r0, #0]
 8008de8:	3301      	adds	r3, #1
 8008dea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008dee:	b914      	cbnz	r4, 8008df6 <__match+0x12>
 8008df0:	6003      	str	r3, [r0, #0]
 8008df2:	2001      	movs	r0, #1
 8008df4:	bd30      	pop	{r4, r5, pc}
 8008df6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008dfa:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008dfe:	2d19      	cmp	r5, #25
 8008e00:	bf98      	it	ls
 8008e02:	3220      	addls	r2, #32
 8008e04:	42a2      	cmp	r2, r4
 8008e06:	d0f0      	beq.n	8008dea <__match+0x6>
 8008e08:	2000      	movs	r0, #0
 8008e0a:	e7f3      	b.n	8008df4 <__match+0x10>

08008e0c <__hexnan>:
 8008e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e10:	2500      	movs	r5, #0
 8008e12:	680b      	ldr	r3, [r1, #0]
 8008e14:	4682      	mov	sl, r0
 8008e16:	115e      	asrs	r6, r3, #5
 8008e18:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008e1c:	f013 031f 	ands.w	r3, r3, #31
 8008e20:	bf18      	it	ne
 8008e22:	3604      	addne	r6, #4
 8008e24:	1f37      	subs	r7, r6, #4
 8008e26:	4690      	mov	r8, r2
 8008e28:	46b9      	mov	r9, r7
 8008e2a:	463c      	mov	r4, r7
 8008e2c:	46ab      	mov	fp, r5
 8008e2e:	b087      	sub	sp, #28
 8008e30:	6801      	ldr	r1, [r0, #0]
 8008e32:	9301      	str	r3, [sp, #4]
 8008e34:	f846 5c04 	str.w	r5, [r6, #-4]
 8008e38:	9502      	str	r5, [sp, #8]
 8008e3a:	784a      	ldrb	r2, [r1, #1]
 8008e3c:	1c4b      	adds	r3, r1, #1
 8008e3e:	9303      	str	r3, [sp, #12]
 8008e40:	b342      	cbz	r2, 8008e94 <__hexnan+0x88>
 8008e42:	4610      	mov	r0, r2
 8008e44:	9105      	str	r1, [sp, #20]
 8008e46:	9204      	str	r2, [sp, #16]
 8008e48:	f7ff fd95 	bl	8008976 <__hexdig_fun>
 8008e4c:	2800      	cmp	r0, #0
 8008e4e:	d151      	bne.n	8008ef4 <__hexnan+0xe8>
 8008e50:	9a04      	ldr	r2, [sp, #16]
 8008e52:	9905      	ldr	r1, [sp, #20]
 8008e54:	2a20      	cmp	r2, #32
 8008e56:	d818      	bhi.n	8008e8a <__hexnan+0x7e>
 8008e58:	9b02      	ldr	r3, [sp, #8]
 8008e5a:	459b      	cmp	fp, r3
 8008e5c:	dd13      	ble.n	8008e86 <__hexnan+0x7a>
 8008e5e:	454c      	cmp	r4, r9
 8008e60:	d206      	bcs.n	8008e70 <__hexnan+0x64>
 8008e62:	2d07      	cmp	r5, #7
 8008e64:	dc04      	bgt.n	8008e70 <__hexnan+0x64>
 8008e66:	462a      	mov	r2, r5
 8008e68:	4649      	mov	r1, r9
 8008e6a:	4620      	mov	r0, r4
 8008e6c:	f7ff ffa8 	bl	8008dc0 <L_shift>
 8008e70:	4544      	cmp	r4, r8
 8008e72:	d952      	bls.n	8008f1a <__hexnan+0x10e>
 8008e74:	2300      	movs	r3, #0
 8008e76:	f1a4 0904 	sub.w	r9, r4, #4
 8008e7a:	f844 3c04 	str.w	r3, [r4, #-4]
 8008e7e:	461d      	mov	r5, r3
 8008e80:	464c      	mov	r4, r9
 8008e82:	f8cd b008 	str.w	fp, [sp, #8]
 8008e86:	9903      	ldr	r1, [sp, #12]
 8008e88:	e7d7      	b.n	8008e3a <__hexnan+0x2e>
 8008e8a:	2a29      	cmp	r2, #41	@ 0x29
 8008e8c:	d157      	bne.n	8008f3e <__hexnan+0x132>
 8008e8e:	3102      	adds	r1, #2
 8008e90:	f8ca 1000 	str.w	r1, [sl]
 8008e94:	f1bb 0f00 	cmp.w	fp, #0
 8008e98:	d051      	beq.n	8008f3e <__hexnan+0x132>
 8008e9a:	454c      	cmp	r4, r9
 8008e9c:	d206      	bcs.n	8008eac <__hexnan+0xa0>
 8008e9e:	2d07      	cmp	r5, #7
 8008ea0:	dc04      	bgt.n	8008eac <__hexnan+0xa0>
 8008ea2:	462a      	mov	r2, r5
 8008ea4:	4649      	mov	r1, r9
 8008ea6:	4620      	mov	r0, r4
 8008ea8:	f7ff ff8a 	bl	8008dc0 <L_shift>
 8008eac:	4544      	cmp	r4, r8
 8008eae:	d936      	bls.n	8008f1e <__hexnan+0x112>
 8008eb0:	4623      	mov	r3, r4
 8008eb2:	f1a8 0204 	sub.w	r2, r8, #4
 8008eb6:	f853 1b04 	ldr.w	r1, [r3], #4
 8008eba:	429f      	cmp	r7, r3
 8008ebc:	f842 1f04 	str.w	r1, [r2, #4]!
 8008ec0:	d2f9      	bcs.n	8008eb6 <__hexnan+0xaa>
 8008ec2:	1b3b      	subs	r3, r7, r4
 8008ec4:	f023 0303 	bic.w	r3, r3, #3
 8008ec8:	3304      	adds	r3, #4
 8008eca:	3401      	adds	r4, #1
 8008ecc:	3e03      	subs	r6, #3
 8008ece:	42b4      	cmp	r4, r6
 8008ed0:	bf88      	it	hi
 8008ed2:	2304      	movhi	r3, #4
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	4443      	add	r3, r8
 8008ed8:	f843 2b04 	str.w	r2, [r3], #4
 8008edc:	429f      	cmp	r7, r3
 8008ede:	d2fb      	bcs.n	8008ed8 <__hexnan+0xcc>
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	b91b      	cbnz	r3, 8008eec <__hexnan+0xe0>
 8008ee4:	4547      	cmp	r7, r8
 8008ee6:	d128      	bne.n	8008f3a <__hexnan+0x12e>
 8008ee8:	2301      	movs	r3, #1
 8008eea:	603b      	str	r3, [r7, #0]
 8008eec:	2005      	movs	r0, #5
 8008eee:	b007      	add	sp, #28
 8008ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ef4:	3501      	adds	r5, #1
 8008ef6:	2d08      	cmp	r5, #8
 8008ef8:	f10b 0b01 	add.w	fp, fp, #1
 8008efc:	dd06      	ble.n	8008f0c <__hexnan+0x100>
 8008efe:	4544      	cmp	r4, r8
 8008f00:	d9c1      	bls.n	8008e86 <__hexnan+0x7a>
 8008f02:	2300      	movs	r3, #0
 8008f04:	2501      	movs	r5, #1
 8008f06:	f844 3c04 	str.w	r3, [r4, #-4]
 8008f0a:	3c04      	subs	r4, #4
 8008f0c:	6822      	ldr	r2, [r4, #0]
 8008f0e:	f000 000f 	and.w	r0, r0, #15
 8008f12:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008f16:	6020      	str	r0, [r4, #0]
 8008f18:	e7b5      	b.n	8008e86 <__hexnan+0x7a>
 8008f1a:	2508      	movs	r5, #8
 8008f1c:	e7b3      	b.n	8008e86 <__hexnan+0x7a>
 8008f1e:	9b01      	ldr	r3, [sp, #4]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d0dd      	beq.n	8008ee0 <__hexnan+0xd4>
 8008f24:	f04f 32ff 	mov.w	r2, #4294967295
 8008f28:	f1c3 0320 	rsb	r3, r3, #32
 8008f2c:	40da      	lsrs	r2, r3
 8008f2e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008f32:	4013      	ands	r3, r2
 8008f34:	f846 3c04 	str.w	r3, [r6, #-4]
 8008f38:	e7d2      	b.n	8008ee0 <__hexnan+0xd4>
 8008f3a:	3f04      	subs	r7, #4
 8008f3c:	e7d0      	b.n	8008ee0 <__hexnan+0xd4>
 8008f3e:	2004      	movs	r0, #4
 8008f40:	e7d5      	b.n	8008eee <__hexnan+0xe2>
	...

08008f44 <sbrk_aligned>:
 8008f44:	b570      	push	{r4, r5, r6, lr}
 8008f46:	4e0f      	ldr	r6, [pc, #60]	@ (8008f84 <sbrk_aligned+0x40>)
 8008f48:	460c      	mov	r4, r1
 8008f4a:	6831      	ldr	r1, [r6, #0]
 8008f4c:	4605      	mov	r5, r0
 8008f4e:	b911      	cbnz	r1, 8008f56 <sbrk_aligned+0x12>
 8008f50:	f001 f916 	bl	800a180 <_sbrk_r>
 8008f54:	6030      	str	r0, [r6, #0]
 8008f56:	4621      	mov	r1, r4
 8008f58:	4628      	mov	r0, r5
 8008f5a:	f001 f911 	bl	800a180 <_sbrk_r>
 8008f5e:	1c43      	adds	r3, r0, #1
 8008f60:	d103      	bne.n	8008f6a <sbrk_aligned+0x26>
 8008f62:	f04f 34ff 	mov.w	r4, #4294967295
 8008f66:	4620      	mov	r0, r4
 8008f68:	bd70      	pop	{r4, r5, r6, pc}
 8008f6a:	1cc4      	adds	r4, r0, #3
 8008f6c:	f024 0403 	bic.w	r4, r4, #3
 8008f70:	42a0      	cmp	r0, r4
 8008f72:	d0f8      	beq.n	8008f66 <sbrk_aligned+0x22>
 8008f74:	1a21      	subs	r1, r4, r0
 8008f76:	4628      	mov	r0, r5
 8008f78:	f001 f902 	bl	800a180 <_sbrk_r>
 8008f7c:	3001      	adds	r0, #1
 8008f7e:	d1f2      	bne.n	8008f66 <sbrk_aligned+0x22>
 8008f80:	e7ef      	b.n	8008f62 <sbrk_aligned+0x1e>
 8008f82:	bf00      	nop
 8008f84:	20000ab0 	.word	0x20000ab0

08008f88 <_malloc_r>:
 8008f88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f8c:	1ccd      	adds	r5, r1, #3
 8008f8e:	f025 0503 	bic.w	r5, r5, #3
 8008f92:	3508      	adds	r5, #8
 8008f94:	2d0c      	cmp	r5, #12
 8008f96:	bf38      	it	cc
 8008f98:	250c      	movcc	r5, #12
 8008f9a:	2d00      	cmp	r5, #0
 8008f9c:	4606      	mov	r6, r0
 8008f9e:	db01      	blt.n	8008fa4 <_malloc_r+0x1c>
 8008fa0:	42a9      	cmp	r1, r5
 8008fa2:	d904      	bls.n	8008fae <_malloc_r+0x26>
 8008fa4:	230c      	movs	r3, #12
 8008fa6:	6033      	str	r3, [r6, #0]
 8008fa8:	2000      	movs	r0, #0
 8008faa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009084 <_malloc_r+0xfc>
 8008fb2:	f000 f87b 	bl	80090ac <__malloc_lock>
 8008fb6:	f8d8 3000 	ldr.w	r3, [r8]
 8008fba:	461c      	mov	r4, r3
 8008fbc:	bb44      	cbnz	r4, 8009010 <_malloc_r+0x88>
 8008fbe:	4629      	mov	r1, r5
 8008fc0:	4630      	mov	r0, r6
 8008fc2:	f7ff ffbf 	bl	8008f44 <sbrk_aligned>
 8008fc6:	1c43      	adds	r3, r0, #1
 8008fc8:	4604      	mov	r4, r0
 8008fca:	d158      	bne.n	800907e <_malloc_r+0xf6>
 8008fcc:	f8d8 4000 	ldr.w	r4, [r8]
 8008fd0:	4627      	mov	r7, r4
 8008fd2:	2f00      	cmp	r7, #0
 8008fd4:	d143      	bne.n	800905e <_malloc_r+0xd6>
 8008fd6:	2c00      	cmp	r4, #0
 8008fd8:	d04b      	beq.n	8009072 <_malloc_r+0xea>
 8008fda:	6823      	ldr	r3, [r4, #0]
 8008fdc:	4639      	mov	r1, r7
 8008fde:	4630      	mov	r0, r6
 8008fe0:	eb04 0903 	add.w	r9, r4, r3
 8008fe4:	f001 f8cc 	bl	800a180 <_sbrk_r>
 8008fe8:	4581      	cmp	r9, r0
 8008fea:	d142      	bne.n	8009072 <_malloc_r+0xea>
 8008fec:	6821      	ldr	r1, [r4, #0]
 8008fee:	4630      	mov	r0, r6
 8008ff0:	1a6d      	subs	r5, r5, r1
 8008ff2:	4629      	mov	r1, r5
 8008ff4:	f7ff ffa6 	bl	8008f44 <sbrk_aligned>
 8008ff8:	3001      	adds	r0, #1
 8008ffa:	d03a      	beq.n	8009072 <_malloc_r+0xea>
 8008ffc:	6823      	ldr	r3, [r4, #0]
 8008ffe:	442b      	add	r3, r5
 8009000:	6023      	str	r3, [r4, #0]
 8009002:	f8d8 3000 	ldr.w	r3, [r8]
 8009006:	685a      	ldr	r2, [r3, #4]
 8009008:	bb62      	cbnz	r2, 8009064 <_malloc_r+0xdc>
 800900a:	f8c8 7000 	str.w	r7, [r8]
 800900e:	e00f      	b.n	8009030 <_malloc_r+0xa8>
 8009010:	6822      	ldr	r2, [r4, #0]
 8009012:	1b52      	subs	r2, r2, r5
 8009014:	d420      	bmi.n	8009058 <_malloc_r+0xd0>
 8009016:	2a0b      	cmp	r2, #11
 8009018:	d917      	bls.n	800904a <_malloc_r+0xc2>
 800901a:	1961      	adds	r1, r4, r5
 800901c:	42a3      	cmp	r3, r4
 800901e:	6025      	str	r5, [r4, #0]
 8009020:	bf18      	it	ne
 8009022:	6059      	strne	r1, [r3, #4]
 8009024:	6863      	ldr	r3, [r4, #4]
 8009026:	bf08      	it	eq
 8009028:	f8c8 1000 	streq.w	r1, [r8]
 800902c:	5162      	str	r2, [r4, r5]
 800902e:	604b      	str	r3, [r1, #4]
 8009030:	4630      	mov	r0, r6
 8009032:	f000 f841 	bl	80090b8 <__malloc_unlock>
 8009036:	f104 000b 	add.w	r0, r4, #11
 800903a:	1d23      	adds	r3, r4, #4
 800903c:	f020 0007 	bic.w	r0, r0, #7
 8009040:	1ac2      	subs	r2, r0, r3
 8009042:	bf1c      	itt	ne
 8009044:	1a1b      	subne	r3, r3, r0
 8009046:	50a3      	strne	r3, [r4, r2]
 8009048:	e7af      	b.n	8008faa <_malloc_r+0x22>
 800904a:	6862      	ldr	r2, [r4, #4]
 800904c:	42a3      	cmp	r3, r4
 800904e:	bf0c      	ite	eq
 8009050:	f8c8 2000 	streq.w	r2, [r8]
 8009054:	605a      	strne	r2, [r3, #4]
 8009056:	e7eb      	b.n	8009030 <_malloc_r+0xa8>
 8009058:	4623      	mov	r3, r4
 800905a:	6864      	ldr	r4, [r4, #4]
 800905c:	e7ae      	b.n	8008fbc <_malloc_r+0x34>
 800905e:	463c      	mov	r4, r7
 8009060:	687f      	ldr	r7, [r7, #4]
 8009062:	e7b6      	b.n	8008fd2 <_malloc_r+0x4a>
 8009064:	461a      	mov	r2, r3
 8009066:	685b      	ldr	r3, [r3, #4]
 8009068:	42a3      	cmp	r3, r4
 800906a:	d1fb      	bne.n	8009064 <_malloc_r+0xdc>
 800906c:	2300      	movs	r3, #0
 800906e:	6053      	str	r3, [r2, #4]
 8009070:	e7de      	b.n	8009030 <_malloc_r+0xa8>
 8009072:	230c      	movs	r3, #12
 8009074:	4630      	mov	r0, r6
 8009076:	6033      	str	r3, [r6, #0]
 8009078:	f000 f81e 	bl	80090b8 <__malloc_unlock>
 800907c:	e794      	b.n	8008fa8 <_malloc_r+0x20>
 800907e:	6005      	str	r5, [r0, #0]
 8009080:	e7d6      	b.n	8009030 <_malloc_r+0xa8>
 8009082:	bf00      	nop
 8009084:	20000ab4 	.word	0x20000ab4

08009088 <__ascii_mbtowc>:
 8009088:	b082      	sub	sp, #8
 800908a:	b901      	cbnz	r1, 800908e <__ascii_mbtowc+0x6>
 800908c:	a901      	add	r1, sp, #4
 800908e:	b142      	cbz	r2, 80090a2 <__ascii_mbtowc+0x1a>
 8009090:	b14b      	cbz	r3, 80090a6 <__ascii_mbtowc+0x1e>
 8009092:	7813      	ldrb	r3, [r2, #0]
 8009094:	600b      	str	r3, [r1, #0]
 8009096:	7812      	ldrb	r2, [r2, #0]
 8009098:	1e10      	subs	r0, r2, #0
 800909a:	bf18      	it	ne
 800909c:	2001      	movne	r0, #1
 800909e:	b002      	add	sp, #8
 80090a0:	4770      	bx	lr
 80090a2:	4610      	mov	r0, r2
 80090a4:	e7fb      	b.n	800909e <__ascii_mbtowc+0x16>
 80090a6:	f06f 0001 	mvn.w	r0, #1
 80090aa:	e7f8      	b.n	800909e <__ascii_mbtowc+0x16>

080090ac <__malloc_lock>:
 80090ac:	4801      	ldr	r0, [pc, #4]	@ (80090b4 <__malloc_lock+0x8>)
 80090ae:	f7ff bba4 	b.w	80087fa <__retarget_lock_acquire_recursive>
 80090b2:	bf00      	nop
 80090b4:	20000aac 	.word	0x20000aac

080090b8 <__malloc_unlock>:
 80090b8:	4801      	ldr	r0, [pc, #4]	@ (80090c0 <__malloc_unlock+0x8>)
 80090ba:	f7ff bb9f 	b.w	80087fc <__retarget_lock_release_recursive>
 80090be:	bf00      	nop
 80090c0:	20000aac 	.word	0x20000aac

080090c4 <_Balloc>:
 80090c4:	b570      	push	{r4, r5, r6, lr}
 80090c6:	69c6      	ldr	r6, [r0, #28]
 80090c8:	4604      	mov	r4, r0
 80090ca:	460d      	mov	r5, r1
 80090cc:	b976      	cbnz	r6, 80090ec <_Balloc+0x28>
 80090ce:	2010      	movs	r0, #16
 80090d0:	f001 f8a6 	bl	800a220 <malloc>
 80090d4:	4602      	mov	r2, r0
 80090d6:	61e0      	str	r0, [r4, #28]
 80090d8:	b920      	cbnz	r0, 80090e4 <_Balloc+0x20>
 80090da:	216b      	movs	r1, #107	@ 0x6b
 80090dc:	4b17      	ldr	r3, [pc, #92]	@ (800913c <_Balloc+0x78>)
 80090de:	4818      	ldr	r0, [pc, #96]	@ (8009140 <_Balloc+0x7c>)
 80090e0:	f001 f86c 	bl	800a1bc <__assert_func>
 80090e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80090e8:	6006      	str	r6, [r0, #0]
 80090ea:	60c6      	str	r6, [r0, #12]
 80090ec:	69e6      	ldr	r6, [r4, #28]
 80090ee:	68f3      	ldr	r3, [r6, #12]
 80090f0:	b183      	cbz	r3, 8009114 <_Balloc+0x50>
 80090f2:	69e3      	ldr	r3, [r4, #28]
 80090f4:	68db      	ldr	r3, [r3, #12]
 80090f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80090fa:	b9b8      	cbnz	r0, 800912c <_Balloc+0x68>
 80090fc:	2101      	movs	r1, #1
 80090fe:	fa01 f605 	lsl.w	r6, r1, r5
 8009102:	1d72      	adds	r2, r6, #5
 8009104:	4620      	mov	r0, r4
 8009106:	0092      	lsls	r2, r2, #2
 8009108:	f001 f876 	bl	800a1f8 <_calloc_r>
 800910c:	b160      	cbz	r0, 8009128 <_Balloc+0x64>
 800910e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009112:	e00e      	b.n	8009132 <_Balloc+0x6e>
 8009114:	2221      	movs	r2, #33	@ 0x21
 8009116:	2104      	movs	r1, #4
 8009118:	4620      	mov	r0, r4
 800911a:	f001 f86d 	bl	800a1f8 <_calloc_r>
 800911e:	69e3      	ldr	r3, [r4, #28]
 8009120:	60f0      	str	r0, [r6, #12]
 8009122:	68db      	ldr	r3, [r3, #12]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d1e4      	bne.n	80090f2 <_Balloc+0x2e>
 8009128:	2000      	movs	r0, #0
 800912a:	bd70      	pop	{r4, r5, r6, pc}
 800912c:	6802      	ldr	r2, [r0, #0]
 800912e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009132:	2300      	movs	r3, #0
 8009134:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009138:	e7f7      	b.n	800912a <_Balloc+0x66>
 800913a:	bf00      	nop
 800913c:	0800b062 	.word	0x0800b062
 8009140:	0800b079 	.word	0x0800b079

08009144 <_Bfree>:
 8009144:	b570      	push	{r4, r5, r6, lr}
 8009146:	69c6      	ldr	r6, [r0, #28]
 8009148:	4605      	mov	r5, r0
 800914a:	460c      	mov	r4, r1
 800914c:	b976      	cbnz	r6, 800916c <_Bfree+0x28>
 800914e:	2010      	movs	r0, #16
 8009150:	f001 f866 	bl	800a220 <malloc>
 8009154:	4602      	mov	r2, r0
 8009156:	61e8      	str	r0, [r5, #28]
 8009158:	b920      	cbnz	r0, 8009164 <_Bfree+0x20>
 800915a:	218f      	movs	r1, #143	@ 0x8f
 800915c:	4b08      	ldr	r3, [pc, #32]	@ (8009180 <_Bfree+0x3c>)
 800915e:	4809      	ldr	r0, [pc, #36]	@ (8009184 <_Bfree+0x40>)
 8009160:	f001 f82c 	bl	800a1bc <__assert_func>
 8009164:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009168:	6006      	str	r6, [r0, #0]
 800916a:	60c6      	str	r6, [r0, #12]
 800916c:	b13c      	cbz	r4, 800917e <_Bfree+0x3a>
 800916e:	69eb      	ldr	r3, [r5, #28]
 8009170:	6862      	ldr	r2, [r4, #4]
 8009172:	68db      	ldr	r3, [r3, #12]
 8009174:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009178:	6021      	str	r1, [r4, #0]
 800917a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800917e:	bd70      	pop	{r4, r5, r6, pc}
 8009180:	0800b062 	.word	0x0800b062
 8009184:	0800b079 	.word	0x0800b079

08009188 <__multadd>:
 8009188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800918c:	4607      	mov	r7, r0
 800918e:	460c      	mov	r4, r1
 8009190:	461e      	mov	r6, r3
 8009192:	2000      	movs	r0, #0
 8009194:	690d      	ldr	r5, [r1, #16]
 8009196:	f101 0c14 	add.w	ip, r1, #20
 800919a:	f8dc 3000 	ldr.w	r3, [ip]
 800919e:	3001      	adds	r0, #1
 80091a0:	b299      	uxth	r1, r3
 80091a2:	fb02 6101 	mla	r1, r2, r1, r6
 80091a6:	0c1e      	lsrs	r6, r3, #16
 80091a8:	0c0b      	lsrs	r3, r1, #16
 80091aa:	fb02 3306 	mla	r3, r2, r6, r3
 80091ae:	b289      	uxth	r1, r1
 80091b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80091b4:	4285      	cmp	r5, r0
 80091b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80091ba:	f84c 1b04 	str.w	r1, [ip], #4
 80091be:	dcec      	bgt.n	800919a <__multadd+0x12>
 80091c0:	b30e      	cbz	r6, 8009206 <__multadd+0x7e>
 80091c2:	68a3      	ldr	r3, [r4, #8]
 80091c4:	42ab      	cmp	r3, r5
 80091c6:	dc19      	bgt.n	80091fc <__multadd+0x74>
 80091c8:	6861      	ldr	r1, [r4, #4]
 80091ca:	4638      	mov	r0, r7
 80091cc:	3101      	adds	r1, #1
 80091ce:	f7ff ff79 	bl	80090c4 <_Balloc>
 80091d2:	4680      	mov	r8, r0
 80091d4:	b928      	cbnz	r0, 80091e2 <__multadd+0x5a>
 80091d6:	4602      	mov	r2, r0
 80091d8:	21ba      	movs	r1, #186	@ 0xba
 80091da:	4b0c      	ldr	r3, [pc, #48]	@ (800920c <__multadd+0x84>)
 80091dc:	480c      	ldr	r0, [pc, #48]	@ (8009210 <__multadd+0x88>)
 80091de:	f000 ffed 	bl	800a1bc <__assert_func>
 80091e2:	6922      	ldr	r2, [r4, #16]
 80091e4:	f104 010c 	add.w	r1, r4, #12
 80091e8:	3202      	adds	r2, #2
 80091ea:	0092      	lsls	r2, r2, #2
 80091ec:	300c      	adds	r0, #12
 80091ee:	f7ff fb0e 	bl	800880e <memcpy>
 80091f2:	4621      	mov	r1, r4
 80091f4:	4638      	mov	r0, r7
 80091f6:	f7ff ffa5 	bl	8009144 <_Bfree>
 80091fa:	4644      	mov	r4, r8
 80091fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009200:	3501      	adds	r5, #1
 8009202:	615e      	str	r6, [r3, #20]
 8009204:	6125      	str	r5, [r4, #16]
 8009206:	4620      	mov	r0, r4
 8009208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800920c:	0800aff1 	.word	0x0800aff1
 8009210:	0800b079 	.word	0x0800b079

08009214 <__s2b>:
 8009214:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009218:	4615      	mov	r5, r2
 800921a:	2209      	movs	r2, #9
 800921c:	461f      	mov	r7, r3
 800921e:	3308      	adds	r3, #8
 8009220:	460c      	mov	r4, r1
 8009222:	fb93 f3f2 	sdiv	r3, r3, r2
 8009226:	4606      	mov	r6, r0
 8009228:	2201      	movs	r2, #1
 800922a:	2100      	movs	r1, #0
 800922c:	429a      	cmp	r2, r3
 800922e:	db09      	blt.n	8009244 <__s2b+0x30>
 8009230:	4630      	mov	r0, r6
 8009232:	f7ff ff47 	bl	80090c4 <_Balloc>
 8009236:	b940      	cbnz	r0, 800924a <__s2b+0x36>
 8009238:	4602      	mov	r2, r0
 800923a:	21d3      	movs	r1, #211	@ 0xd3
 800923c:	4b18      	ldr	r3, [pc, #96]	@ (80092a0 <__s2b+0x8c>)
 800923e:	4819      	ldr	r0, [pc, #100]	@ (80092a4 <__s2b+0x90>)
 8009240:	f000 ffbc 	bl	800a1bc <__assert_func>
 8009244:	0052      	lsls	r2, r2, #1
 8009246:	3101      	adds	r1, #1
 8009248:	e7f0      	b.n	800922c <__s2b+0x18>
 800924a:	9b08      	ldr	r3, [sp, #32]
 800924c:	2d09      	cmp	r5, #9
 800924e:	6143      	str	r3, [r0, #20]
 8009250:	f04f 0301 	mov.w	r3, #1
 8009254:	6103      	str	r3, [r0, #16]
 8009256:	dd16      	ble.n	8009286 <__s2b+0x72>
 8009258:	f104 0909 	add.w	r9, r4, #9
 800925c:	46c8      	mov	r8, r9
 800925e:	442c      	add	r4, r5
 8009260:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009264:	4601      	mov	r1, r0
 8009266:	220a      	movs	r2, #10
 8009268:	4630      	mov	r0, r6
 800926a:	3b30      	subs	r3, #48	@ 0x30
 800926c:	f7ff ff8c 	bl	8009188 <__multadd>
 8009270:	45a0      	cmp	r8, r4
 8009272:	d1f5      	bne.n	8009260 <__s2b+0x4c>
 8009274:	f1a5 0408 	sub.w	r4, r5, #8
 8009278:	444c      	add	r4, r9
 800927a:	1b2d      	subs	r5, r5, r4
 800927c:	1963      	adds	r3, r4, r5
 800927e:	42bb      	cmp	r3, r7
 8009280:	db04      	blt.n	800928c <__s2b+0x78>
 8009282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009286:	2509      	movs	r5, #9
 8009288:	340a      	adds	r4, #10
 800928a:	e7f6      	b.n	800927a <__s2b+0x66>
 800928c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009290:	4601      	mov	r1, r0
 8009292:	220a      	movs	r2, #10
 8009294:	4630      	mov	r0, r6
 8009296:	3b30      	subs	r3, #48	@ 0x30
 8009298:	f7ff ff76 	bl	8009188 <__multadd>
 800929c:	e7ee      	b.n	800927c <__s2b+0x68>
 800929e:	bf00      	nop
 80092a0:	0800aff1 	.word	0x0800aff1
 80092a4:	0800b079 	.word	0x0800b079

080092a8 <__hi0bits>:
 80092a8:	4603      	mov	r3, r0
 80092aa:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80092ae:	bf3a      	itte	cc
 80092b0:	0403      	lslcc	r3, r0, #16
 80092b2:	2010      	movcc	r0, #16
 80092b4:	2000      	movcs	r0, #0
 80092b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80092ba:	bf3c      	itt	cc
 80092bc:	021b      	lslcc	r3, r3, #8
 80092be:	3008      	addcc	r0, #8
 80092c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80092c4:	bf3c      	itt	cc
 80092c6:	011b      	lslcc	r3, r3, #4
 80092c8:	3004      	addcc	r0, #4
 80092ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80092ce:	bf3c      	itt	cc
 80092d0:	009b      	lslcc	r3, r3, #2
 80092d2:	3002      	addcc	r0, #2
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	db05      	blt.n	80092e4 <__hi0bits+0x3c>
 80092d8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80092dc:	f100 0001 	add.w	r0, r0, #1
 80092e0:	bf08      	it	eq
 80092e2:	2020      	moveq	r0, #32
 80092e4:	4770      	bx	lr

080092e6 <__lo0bits>:
 80092e6:	6803      	ldr	r3, [r0, #0]
 80092e8:	4602      	mov	r2, r0
 80092ea:	f013 0007 	ands.w	r0, r3, #7
 80092ee:	d00b      	beq.n	8009308 <__lo0bits+0x22>
 80092f0:	07d9      	lsls	r1, r3, #31
 80092f2:	d421      	bmi.n	8009338 <__lo0bits+0x52>
 80092f4:	0798      	lsls	r0, r3, #30
 80092f6:	bf49      	itett	mi
 80092f8:	085b      	lsrmi	r3, r3, #1
 80092fa:	089b      	lsrpl	r3, r3, #2
 80092fc:	2001      	movmi	r0, #1
 80092fe:	6013      	strmi	r3, [r2, #0]
 8009300:	bf5c      	itt	pl
 8009302:	2002      	movpl	r0, #2
 8009304:	6013      	strpl	r3, [r2, #0]
 8009306:	4770      	bx	lr
 8009308:	b299      	uxth	r1, r3
 800930a:	b909      	cbnz	r1, 8009310 <__lo0bits+0x2a>
 800930c:	2010      	movs	r0, #16
 800930e:	0c1b      	lsrs	r3, r3, #16
 8009310:	b2d9      	uxtb	r1, r3
 8009312:	b909      	cbnz	r1, 8009318 <__lo0bits+0x32>
 8009314:	3008      	adds	r0, #8
 8009316:	0a1b      	lsrs	r3, r3, #8
 8009318:	0719      	lsls	r1, r3, #28
 800931a:	bf04      	itt	eq
 800931c:	091b      	lsreq	r3, r3, #4
 800931e:	3004      	addeq	r0, #4
 8009320:	0799      	lsls	r1, r3, #30
 8009322:	bf04      	itt	eq
 8009324:	089b      	lsreq	r3, r3, #2
 8009326:	3002      	addeq	r0, #2
 8009328:	07d9      	lsls	r1, r3, #31
 800932a:	d403      	bmi.n	8009334 <__lo0bits+0x4e>
 800932c:	085b      	lsrs	r3, r3, #1
 800932e:	f100 0001 	add.w	r0, r0, #1
 8009332:	d003      	beq.n	800933c <__lo0bits+0x56>
 8009334:	6013      	str	r3, [r2, #0]
 8009336:	4770      	bx	lr
 8009338:	2000      	movs	r0, #0
 800933a:	4770      	bx	lr
 800933c:	2020      	movs	r0, #32
 800933e:	4770      	bx	lr

08009340 <__i2b>:
 8009340:	b510      	push	{r4, lr}
 8009342:	460c      	mov	r4, r1
 8009344:	2101      	movs	r1, #1
 8009346:	f7ff febd 	bl	80090c4 <_Balloc>
 800934a:	4602      	mov	r2, r0
 800934c:	b928      	cbnz	r0, 800935a <__i2b+0x1a>
 800934e:	f240 1145 	movw	r1, #325	@ 0x145
 8009352:	4b04      	ldr	r3, [pc, #16]	@ (8009364 <__i2b+0x24>)
 8009354:	4804      	ldr	r0, [pc, #16]	@ (8009368 <__i2b+0x28>)
 8009356:	f000 ff31 	bl	800a1bc <__assert_func>
 800935a:	2301      	movs	r3, #1
 800935c:	6144      	str	r4, [r0, #20]
 800935e:	6103      	str	r3, [r0, #16]
 8009360:	bd10      	pop	{r4, pc}
 8009362:	bf00      	nop
 8009364:	0800aff1 	.word	0x0800aff1
 8009368:	0800b079 	.word	0x0800b079

0800936c <__multiply>:
 800936c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009370:	4614      	mov	r4, r2
 8009372:	690a      	ldr	r2, [r1, #16]
 8009374:	6923      	ldr	r3, [r4, #16]
 8009376:	460f      	mov	r7, r1
 8009378:	429a      	cmp	r2, r3
 800937a:	bfa2      	ittt	ge
 800937c:	4623      	movge	r3, r4
 800937e:	460c      	movge	r4, r1
 8009380:	461f      	movge	r7, r3
 8009382:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009386:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800938a:	68a3      	ldr	r3, [r4, #8]
 800938c:	6861      	ldr	r1, [r4, #4]
 800938e:	eb0a 0609 	add.w	r6, sl, r9
 8009392:	42b3      	cmp	r3, r6
 8009394:	b085      	sub	sp, #20
 8009396:	bfb8      	it	lt
 8009398:	3101      	addlt	r1, #1
 800939a:	f7ff fe93 	bl	80090c4 <_Balloc>
 800939e:	b930      	cbnz	r0, 80093ae <__multiply+0x42>
 80093a0:	4602      	mov	r2, r0
 80093a2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80093a6:	4b43      	ldr	r3, [pc, #268]	@ (80094b4 <__multiply+0x148>)
 80093a8:	4843      	ldr	r0, [pc, #268]	@ (80094b8 <__multiply+0x14c>)
 80093aa:	f000 ff07 	bl	800a1bc <__assert_func>
 80093ae:	f100 0514 	add.w	r5, r0, #20
 80093b2:	462b      	mov	r3, r5
 80093b4:	2200      	movs	r2, #0
 80093b6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80093ba:	4543      	cmp	r3, r8
 80093bc:	d321      	bcc.n	8009402 <__multiply+0x96>
 80093be:	f107 0114 	add.w	r1, r7, #20
 80093c2:	f104 0214 	add.w	r2, r4, #20
 80093c6:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80093ca:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80093ce:	9302      	str	r3, [sp, #8]
 80093d0:	1b13      	subs	r3, r2, r4
 80093d2:	3b15      	subs	r3, #21
 80093d4:	f023 0303 	bic.w	r3, r3, #3
 80093d8:	3304      	adds	r3, #4
 80093da:	f104 0715 	add.w	r7, r4, #21
 80093de:	42ba      	cmp	r2, r7
 80093e0:	bf38      	it	cc
 80093e2:	2304      	movcc	r3, #4
 80093e4:	9301      	str	r3, [sp, #4]
 80093e6:	9b02      	ldr	r3, [sp, #8]
 80093e8:	9103      	str	r1, [sp, #12]
 80093ea:	428b      	cmp	r3, r1
 80093ec:	d80c      	bhi.n	8009408 <__multiply+0x9c>
 80093ee:	2e00      	cmp	r6, #0
 80093f0:	dd03      	ble.n	80093fa <__multiply+0x8e>
 80093f2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d05a      	beq.n	80094b0 <__multiply+0x144>
 80093fa:	6106      	str	r6, [r0, #16]
 80093fc:	b005      	add	sp, #20
 80093fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009402:	f843 2b04 	str.w	r2, [r3], #4
 8009406:	e7d8      	b.n	80093ba <__multiply+0x4e>
 8009408:	f8b1 a000 	ldrh.w	sl, [r1]
 800940c:	f1ba 0f00 	cmp.w	sl, #0
 8009410:	d023      	beq.n	800945a <__multiply+0xee>
 8009412:	46a9      	mov	r9, r5
 8009414:	f04f 0c00 	mov.w	ip, #0
 8009418:	f104 0e14 	add.w	lr, r4, #20
 800941c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009420:	f8d9 3000 	ldr.w	r3, [r9]
 8009424:	fa1f fb87 	uxth.w	fp, r7
 8009428:	b29b      	uxth	r3, r3
 800942a:	fb0a 330b 	mla	r3, sl, fp, r3
 800942e:	4463      	add	r3, ip
 8009430:	f8d9 c000 	ldr.w	ip, [r9]
 8009434:	0c3f      	lsrs	r7, r7, #16
 8009436:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800943a:	fb0a c707 	mla	r7, sl, r7, ip
 800943e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009442:	b29b      	uxth	r3, r3
 8009444:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009448:	4572      	cmp	r2, lr
 800944a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800944e:	f849 3b04 	str.w	r3, [r9], #4
 8009452:	d8e3      	bhi.n	800941c <__multiply+0xb0>
 8009454:	9b01      	ldr	r3, [sp, #4]
 8009456:	f845 c003 	str.w	ip, [r5, r3]
 800945a:	9b03      	ldr	r3, [sp, #12]
 800945c:	3104      	adds	r1, #4
 800945e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009462:	f1b9 0f00 	cmp.w	r9, #0
 8009466:	d021      	beq.n	80094ac <__multiply+0x140>
 8009468:	46ae      	mov	lr, r5
 800946a:	f04f 0a00 	mov.w	sl, #0
 800946e:	682b      	ldr	r3, [r5, #0]
 8009470:	f104 0c14 	add.w	ip, r4, #20
 8009474:	f8bc b000 	ldrh.w	fp, [ip]
 8009478:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800947c:	b29b      	uxth	r3, r3
 800947e:	fb09 770b 	mla	r7, r9, fp, r7
 8009482:	4457      	add	r7, sl
 8009484:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009488:	f84e 3b04 	str.w	r3, [lr], #4
 800948c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009490:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009494:	f8be 3000 	ldrh.w	r3, [lr]
 8009498:	4562      	cmp	r2, ip
 800949a:	fb09 330a 	mla	r3, r9, sl, r3
 800949e:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80094a2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80094a6:	d8e5      	bhi.n	8009474 <__multiply+0x108>
 80094a8:	9f01      	ldr	r7, [sp, #4]
 80094aa:	51eb      	str	r3, [r5, r7]
 80094ac:	3504      	adds	r5, #4
 80094ae:	e79a      	b.n	80093e6 <__multiply+0x7a>
 80094b0:	3e01      	subs	r6, #1
 80094b2:	e79c      	b.n	80093ee <__multiply+0x82>
 80094b4:	0800aff1 	.word	0x0800aff1
 80094b8:	0800b079 	.word	0x0800b079

080094bc <__pow5mult>:
 80094bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094c0:	4615      	mov	r5, r2
 80094c2:	f012 0203 	ands.w	r2, r2, #3
 80094c6:	4607      	mov	r7, r0
 80094c8:	460e      	mov	r6, r1
 80094ca:	d007      	beq.n	80094dc <__pow5mult+0x20>
 80094cc:	4c25      	ldr	r4, [pc, #148]	@ (8009564 <__pow5mult+0xa8>)
 80094ce:	3a01      	subs	r2, #1
 80094d0:	2300      	movs	r3, #0
 80094d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80094d6:	f7ff fe57 	bl	8009188 <__multadd>
 80094da:	4606      	mov	r6, r0
 80094dc:	10ad      	asrs	r5, r5, #2
 80094de:	d03d      	beq.n	800955c <__pow5mult+0xa0>
 80094e0:	69fc      	ldr	r4, [r7, #28]
 80094e2:	b97c      	cbnz	r4, 8009504 <__pow5mult+0x48>
 80094e4:	2010      	movs	r0, #16
 80094e6:	f000 fe9b 	bl	800a220 <malloc>
 80094ea:	4602      	mov	r2, r0
 80094ec:	61f8      	str	r0, [r7, #28]
 80094ee:	b928      	cbnz	r0, 80094fc <__pow5mult+0x40>
 80094f0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80094f4:	4b1c      	ldr	r3, [pc, #112]	@ (8009568 <__pow5mult+0xac>)
 80094f6:	481d      	ldr	r0, [pc, #116]	@ (800956c <__pow5mult+0xb0>)
 80094f8:	f000 fe60 	bl	800a1bc <__assert_func>
 80094fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009500:	6004      	str	r4, [r0, #0]
 8009502:	60c4      	str	r4, [r0, #12]
 8009504:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009508:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800950c:	b94c      	cbnz	r4, 8009522 <__pow5mult+0x66>
 800950e:	f240 2171 	movw	r1, #625	@ 0x271
 8009512:	4638      	mov	r0, r7
 8009514:	f7ff ff14 	bl	8009340 <__i2b>
 8009518:	2300      	movs	r3, #0
 800951a:	4604      	mov	r4, r0
 800951c:	f8c8 0008 	str.w	r0, [r8, #8]
 8009520:	6003      	str	r3, [r0, #0]
 8009522:	f04f 0900 	mov.w	r9, #0
 8009526:	07eb      	lsls	r3, r5, #31
 8009528:	d50a      	bpl.n	8009540 <__pow5mult+0x84>
 800952a:	4631      	mov	r1, r6
 800952c:	4622      	mov	r2, r4
 800952e:	4638      	mov	r0, r7
 8009530:	f7ff ff1c 	bl	800936c <__multiply>
 8009534:	4680      	mov	r8, r0
 8009536:	4631      	mov	r1, r6
 8009538:	4638      	mov	r0, r7
 800953a:	f7ff fe03 	bl	8009144 <_Bfree>
 800953e:	4646      	mov	r6, r8
 8009540:	106d      	asrs	r5, r5, #1
 8009542:	d00b      	beq.n	800955c <__pow5mult+0xa0>
 8009544:	6820      	ldr	r0, [r4, #0]
 8009546:	b938      	cbnz	r0, 8009558 <__pow5mult+0x9c>
 8009548:	4622      	mov	r2, r4
 800954a:	4621      	mov	r1, r4
 800954c:	4638      	mov	r0, r7
 800954e:	f7ff ff0d 	bl	800936c <__multiply>
 8009552:	6020      	str	r0, [r4, #0]
 8009554:	f8c0 9000 	str.w	r9, [r0]
 8009558:	4604      	mov	r4, r0
 800955a:	e7e4      	b.n	8009526 <__pow5mult+0x6a>
 800955c:	4630      	mov	r0, r6
 800955e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009562:	bf00      	nop
 8009564:	0800b0d4 	.word	0x0800b0d4
 8009568:	0800b062 	.word	0x0800b062
 800956c:	0800b079 	.word	0x0800b079

08009570 <__lshift>:
 8009570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009574:	460c      	mov	r4, r1
 8009576:	4607      	mov	r7, r0
 8009578:	4691      	mov	r9, r2
 800957a:	6923      	ldr	r3, [r4, #16]
 800957c:	6849      	ldr	r1, [r1, #4]
 800957e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009582:	68a3      	ldr	r3, [r4, #8]
 8009584:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009588:	f108 0601 	add.w	r6, r8, #1
 800958c:	42b3      	cmp	r3, r6
 800958e:	db0b      	blt.n	80095a8 <__lshift+0x38>
 8009590:	4638      	mov	r0, r7
 8009592:	f7ff fd97 	bl	80090c4 <_Balloc>
 8009596:	4605      	mov	r5, r0
 8009598:	b948      	cbnz	r0, 80095ae <__lshift+0x3e>
 800959a:	4602      	mov	r2, r0
 800959c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80095a0:	4b27      	ldr	r3, [pc, #156]	@ (8009640 <__lshift+0xd0>)
 80095a2:	4828      	ldr	r0, [pc, #160]	@ (8009644 <__lshift+0xd4>)
 80095a4:	f000 fe0a 	bl	800a1bc <__assert_func>
 80095a8:	3101      	adds	r1, #1
 80095aa:	005b      	lsls	r3, r3, #1
 80095ac:	e7ee      	b.n	800958c <__lshift+0x1c>
 80095ae:	2300      	movs	r3, #0
 80095b0:	f100 0114 	add.w	r1, r0, #20
 80095b4:	f100 0210 	add.w	r2, r0, #16
 80095b8:	4618      	mov	r0, r3
 80095ba:	4553      	cmp	r3, sl
 80095bc:	db33      	blt.n	8009626 <__lshift+0xb6>
 80095be:	6920      	ldr	r0, [r4, #16]
 80095c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80095c4:	f104 0314 	add.w	r3, r4, #20
 80095c8:	f019 091f 	ands.w	r9, r9, #31
 80095cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80095d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80095d4:	d02b      	beq.n	800962e <__lshift+0xbe>
 80095d6:	468a      	mov	sl, r1
 80095d8:	2200      	movs	r2, #0
 80095da:	f1c9 0e20 	rsb	lr, r9, #32
 80095de:	6818      	ldr	r0, [r3, #0]
 80095e0:	fa00 f009 	lsl.w	r0, r0, r9
 80095e4:	4310      	orrs	r0, r2
 80095e6:	f84a 0b04 	str.w	r0, [sl], #4
 80095ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80095ee:	459c      	cmp	ip, r3
 80095f0:	fa22 f20e 	lsr.w	r2, r2, lr
 80095f4:	d8f3      	bhi.n	80095de <__lshift+0x6e>
 80095f6:	ebac 0304 	sub.w	r3, ip, r4
 80095fa:	3b15      	subs	r3, #21
 80095fc:	f023 0303 	bic.w	r3, r3, #3
 8009600:	3304      	adds	r3, #4
 8009602:	f104 0015 	add.w	r0, r4, #21
 8009606:	4584      	cmp	ip, r0
 8009608:	bf38      	it	cc
 800960a:	2304      	movcc	r3, #4
 800960c:	50ca      	str	r2, [r1, r3]
 800960e:	b10a      	cbz	r2, 8009614 <__lshift+0xa4>
 8009610:	f108 0602 	add.w	r6, r8, #2
 8009614:	3e01      	subs	r6, #1
 8009616:	4638      	mov	r0, r7
 8009618:	4621      	mov	r1, r4
 800961a:	612e      	str	r6, [r5, #16]
 800961c:	f7ff fd92 	bl	8009144 <_Bfree>
 8009620:	4628      	mov	r0, r5
 8009622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009626:	f842 0f04 	str.w	r0, [r2, #4]!
 800962a:	3301      	adds	r3, #1
 800962c:	e7c5      	b.n	80095ba <__lshift+0x4a>
 800962e:	3904      	subs	r1, #4
 8009630:	f853 2b04 	ldr.w	r2, [r3], #4
 8009634:	459c      	cmp	ip, r3
 8009636:	f841 2f04 	str.w	r2, [r1, #4]!
 800963a:	d8f9      	bhi.n	8009630 <__lshift+0xc0>
 800963c:	e7ea      	b.n	8009614 <__lshift+0xa4>
 800963e:	bf00      	nop
 8009640:	0800aff1 	.word	0x0800aff1
 8009644:	0800b079 	.word	0x0800b079

08009648 <__mcmp>:
 8009648:	4603      	mov	r3, r0
 800964a:	690a      	ldr	r2, [r1, #16]
 800964c:	6900      	ldr	r0, [r0, #16]
 800964e:	b530      	push	{r4, r5, lr}
 8009650:	1a80      	subs	r0, r0, r2
 8009652:	d10e      	bne.n	8009672 <__mcmp+0x2a>
 8009654:	3314      	adds	r3, #20
 8009656:	3114      	adds	r1, #20
 8009658:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800965c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009660:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009664:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009668:	4295      	cmp	r5, r2
 800966a:	d003      	beq.n	8009674 <__mcmp+0x2c>
 800966c:	d205      	bcs.n	800967a <__mcmp+0x32>
 800966e:	f04f 30ff 	mov.w	r0, #4294967295
 8009672:	bd30      	pop	{r4, r5, pc}
 8009674:	42a3      	cmp	r3, r4
 8009676:	d3f3      	bcc.n	8009660 <__mcmp+0x18>
 8009678:	e7fb      	b.n	8009672 <__mcmp+0x2a>
 800967a:	2001      	movs	r0, #1
 800967c:	e7f9      	b.n	8009672 <__mcmp+0x2a>
	...

08009680 <__mdiff>:
 8009680:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009684:	4689      	mov	r9, r1
 8009686:	4606      	mov	r6, r0
 8009688:	4611      	mov	r1, r2
 800968a:	4648      	mov	r0, r9
 800968c:	4614      	mov	r4, r2
 800968e:	f7ff ffdb 	bl	8009648 <__mcmp>
 8009692:	1e05      	subs	r5, r0, #0
 8009694:	d112      	bne.n	80096bc <__mdiff+0x3c>
 8009696:	4629      	mov	r1, r5
 8009698:	4630      	mov	r0, r6
 800969a:	f7ff fd13 	bl	80090c4 <_Balloc>
 800969e:	4602      	mov	r2, r0
 80096a0:	b928      	cbnz	r0, 80096ae <__mdiff+0x2e>
 80096a2:	f240 2137 	movw	r1, #567	@ 0x237
 80096a6:	4b3e      	ldr	r3, [pc, #248]	@ (80097a0 <__mdiff+0x120>)
 80096a8:	483e      	ldr	r0, [pc, #248]	@ (80097a4 <__mdiff+0x124>)
 80096aa:	f000 fd87 	bl	800a1bc <__assert_func>
 80096ae:	2301      	movs	r3, #1
 80096b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80096b4:	4610      	mov	r0, r2
 80096b6:	b003      	add	sp, #12
 80096b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096bc:	bfbc      	itt	lt
 80096be:	464b      	movlt	r3, r9
 80096c0:	46a1      	movlt	r9, r4
 80096c2:	4630      	mov	r0, r6
 80096c4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80096c8:	bfba      	itte	lt
 80096ca:	461c      	movlt	r4, r3
 80096cc:	2501      	movlt	r5, #1
 80096ce:	2500      	movge	r5, #0
 80096d0:	f7ff fcf8 	bl	80090c4 <_Balloc>
 80096d4:	4602      	mov	r2, r0
 80096d6:	b918      	cbnz	r0, 80096e0 <__mdiff+0x60>
 80096d8:	f240 2145 	movw	r1, #581	@ 0x245
 80096dc:	4b30      	ldr	r3, [pc, #192]	@ (80097a0 <__mdiff+0x120>)
 80096de:	e7e3      	b.n	80096a8 <__mdiff+0x28>
 80096e0:	f100 0b14 	add.w	fp, r0, #20
 80096e4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80096e8:	f109 0310 	add.w	r3, r9, #16
 80096ec:	60c5      	str	r5, [r0, #12]
 80096ee:	f04f 0c00 	mov.w	ip, #0
 80096f2:	f109 0514 	add.w	r5, r9, #20
 80096f6:	46d9      	mov	r9, fp
 80096f8:	6926      	ldr	r6, [r4, #16]
 80096fa:	f104 0e14 	add.w	lr, r4, #20
 80096fe:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009702:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009706:	9301      	str	r3, [sp, #4]
 8009708:	9b01      	ldr	r3, [sp, #4]
 800970a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800970e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009712:	b281      	uxth	r1, r0
 8009714:	9301      	str	r3, [sp, #4]
 8009716:	fa1f f38a 	uxth.w	r3, sl
 800971a:	1a5b      	subs	r3, r3, r1
 800971c:	0c00      	lsrs	r0, r0, #16
 800971e:	4463      	add	r3, ip
 8009720:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009724:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009728:	b29b      	uxth	r3, r3
 800972a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800972e:	4576      	cmp	r6, lr
 8009730:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009734:	f849 3b04 	str.w	r3, [r9], #4
 8009738:	d8e6      	bhi.n	8009708 <__mdiff+0x88>
 800973a:	1b33      	subs	r3, r6, r4
 800973c:	3b15      	subs	r3, #21
 800973e:	f023 0303 	bic.w	r3, r3, #3
 8009742:	3415      	adds	r4, #21
 8009744:	3304      	adds	r3, #4
 8009746:	42a6      	cmp	r6, r4
 8009748:	bf38      	it	cc
 800974a:	2304      	movcc	r3, #4
 800974c:	441d      	add	r5, r3
 800974e:	445b      	add	r3, fp
 8009750:	461e      	mov	r6, r3
 8009752:	462c      	mov	r4, r5
 8009754:	4544      	cmp	r4, r8
 8009756:	d30e      	bcc.n	8009776 <__mdiff+0xf6>
 8009758:	f108 0103 	add.w	r1, r8, #3
 800975c:	1b49      	subs	r1, r1, r5
 800975e:	f021 0103 	bic.w	r1, r1, #3
 8009762:	3d03      	subs	r5, #3
 8009764:	45a8      	cmp	r8, r5
 8009766:	bf38      	it	cc
 8009768:	2100      	movcc	r1, #0
 800976a:	440b      	add	r3, r1
 800976c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009770:	b199      	cbz	r1, 800979a <__mdiff+0x11a>
 8009772:	6117      	str	r7, [r2, #16]
 8009774:	e79e      	b.n	80096b4 <__mdiff+0x34>
 8009776:	46e6      	mov	lr, ip
 8009778:	f854 1b04 	ldr.w	r1, [r4], #4
 800977c:	fa1f fc81 	uxth.w	ip, r1
 8009780:	44f4      	add	ip, lr
 8009782:	0c08      	lsrs	r0, r1, #16
 8009784:	4471      	add	r1, lr
 8009786:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800978a:	b289      	uxth	r1, r1
 800978c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009790:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009794:	f846 1b04 	str.w	r1, [r6], #4
 8009798:	e7dc      	b.n	8009754 <__mdiff+0xd4>
 800979a:	3f01      	subs	r7, #1
 800979c:	e7e6      	b.n	800976c <__mdiff+0xec>
 800979e:	bf00      	nop
 80097a0:	0800aff1 	.word	0x0800aff1
 80097a4:	0800b079 	.word	0x0800b079

080097a8 <__ulp>:
 80097a8:	4b0e      	ldr	r3, [pc, #56]	@ (80097e4 <__ulp+0x3c>)
 80097aa:	400b      	ands	r3, r1
 80097ac:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	dc08      	bgt.n	80097c6 <__ulp+0x1e>
 80097b4:	425b      	negs	r3, r3
 80097b6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80097ba:	ea4f 5223 	mov.w	r2, r3, asr #20
 80097be:	da04      	bge.n	80097ca <__ulp+0x22>
 80097c0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80097c4:	4113      	asrs	r3, r2
 80097c6:	2200      	movs	r2, #0
 80097c8:	e008      	b.n	80097dc <__ulp+0x34>
 80097ca:	f1a2 0314 	sub.w	r3, r2, #20
 80097ce:	2b1e      	cmp	r3, #30
 80097d0:	bfd6      	itet	le
 80097d2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80097d6:	2201      	movgt	r2, #1
 80097d8:	40da      	lsrle	r2, r3
 80097da:	2300      	movs	r3, #0
 80097dc:	4619      	mov	r1, r3
 80097de:	4610      	mov	r0, r2
 80097e0:	4770      	bx	lr
 80097e2:	bf00      	nop
 80097e4:	7ff00000 	.word	0x7ff00000

080097e8 <__b2d>:
 80097e8:	6902      	ldr	r2, [r0, #16]
 80097ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ec:	f100 0614 	add.w	r6, r0, #20
 80097f0:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 80097f4:	f852 4c04 	ldr.w	r4, [r2, #-4]
 80097f8:	4f1e      	ldr	r7, [pc, #120]	@ (8009874 <__b2d+0x8c>)
 80097fa:	4620      	mov	r0, r4
 80097fc:	f7ff fd54 	bl	80092a8 <__hi0bits>
 8009800:	4603      	mov	r3, r0
 8009802:	f1c0 0020 	rsb	r0, r0, #32
 8009806:	2b0a      	cmp	r3, #10
 8009808:	f1a2 0504 	sub.w	r5, r2, #4
 800980c:	6008      	str	r0, [r1, #0]
 800980e:	dc12      	bgt.n	8009836 <__b2d+0x4e>
 8009810:	42ae      	cmp	r6, r5
 8009812:	bf2c      	ite	cs
 8009814:	2200      	movcs	r2, #0
 8009816:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800981a:	f1c3 0c0b 	rsb	ip, r3, #11
 800981e:	3315      	adds	r3, #21
 8009820:	fa24 fe0c 	lsr.w	lr, r4, ip
 8009824:	fa04 f303 	lsl.w	r3, r4, r3
 8009828:	fa22 f20c 	lsr.w	r2, r2, ip
 800982c:	ea4e 0107 	orr.w	r1, lr, r7
 8009830:	431a      	orrs	r2, r3
 8009832:	4610      	mov	r0, r2
 8009834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009836:	42ae      	cmp	r6, r5
 8009838:	bf36      	itet	cc
 800983a:	f1a2 0508 	subcc.w	r5, r2, #8
 800983e:	2200      	movcs	r2, #0
 8009840:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8009844:	3b0b      	subs	r3, #11
 8009846:	d012      	beq.n	800986e <__b2d+0x86>
 8009848:	f1c3 0720 	rsb	r7, r3, #32
 800984c:	fa22 f107 	lsr.w	r1, r2, r7
 8009850:	409c      	lsls	r4, r3
 8009852:	430c      	orrs	r4, r1
 8009854:	42b5      	cmp	r5, r6
 8009856:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800985a:	bf94      	ite	ls
 800985c:	2400      	movls	r4, #0
 800985e:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8009862:	409a      	lsls	r2, r3
 8009864:	40fc      	lsrs	r4, r7
 8009866:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800986a:	4322      	orrs	r2, r4
 800986c:	e7e1      	b.n	8009832 <__b2d+0x4a>
 800986e:	ea44 0107 	orr.w	r1, r4, r7
 8009872:	e7de      	b.n	8009832 <__b2d+0x4a>
 8009874:	3ff00000 	.word	0x3ff00000

08009878 <__d2b>:
 8009878:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800987c:	2101      	movs	r1, #1
 800987e:	4690      	mov	r8, r2
 8009880:	4699      	mov	r9, r3
 8009882:	9e08      	ldr	r6, [sp, #32]
 8009884:	f7ff fc1e 	bl	80090c4 <_Balloc>
 8009888:	4604      	mov	r4, r0
 800988a:	b930      	cbnz	r0, 800989a <__d2b+0x22>
 800988c:	4602      	mov	r2, r0
 800988e:	f240 310f 	movw	r1, #783	@ 0x30f
 8009892:	4b23      	ldr	r3, [pc, #140]	@ (8009920 <__d2b+0xa8>)
 8009894:	4823      	ldr	r0, [pc, #140]	@ (8009924 <__d2b+0xac>)
 8009896:	f000 fc91 	bl	800a1bc <__assert_func>
 800989a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800989e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80098a2:	b10d      	cbz	r5, 80098a8 <__d2b+0x30>
 80098a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80098a8:	9301      	str	r3, [sp, #4]
 80098aa:	f1b8 0300 	subs.w	r3, r8, #0
 80098ae:	d024      	beq.n	80098fa <__d2b+0x82>
 80098b0:	4668      	mov	r0, sp
 80098b2:	9300      	str	r3, [sp, #0]
 80098b4:	f7ff fd17 	bl	80092e6 <__lo0bits>
 80098b8:	e9dd 1200 	ldrd	r1, r2, [sp]
 80098bc:	b1d8      	cbz	r0, 80098f6 <__d2b+0x7e>
 80098be:	f1c0 0320 	rsb	r3, r0, #32
 80098c2:	fa02 f303 	lsl.w	r3, r2, r3
 80098c6:	430b      	orrs	r3, r1
 80098c8:	40c2      	lsrs	r2, r0
 80098ca:	6163      	str	r3, [r4, #20]
 80098cc:	9201      	str	r2, [sp, #4]
 80098ce:	9b01      	ldr	r3, [sp, #4]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	bf0c      	ite	eq
 80098d4:	2201      	moveq	r2, #1
 80098d6:	2202      	movne	r2, #2
 80098d8:	61a3      	str	r3, [r4, #24]
 80098da:	6122      	str	r2, [r4, #16]
 80098dc:	b1ad      	cbz	r5, 800990a <__d2b+0x92>
 80098de:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80098e2:	4405      	add	r5, r0
 80098e4:	6035      	str	r5, [r6, #0]
 80098e6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80098ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098ec:	6018      	str	r0, [r3, #0]
 80098ee:	4620      	mov	r0, r4
 80098f0:	b002      	add	sp, #8
 80098f2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80098f6:	6161      	str	r1, [r4, #20]
 80098f8:	e7e9      	b.n	80098ce <__d2b+0x56>
 80098fa:	a801      	add	r0, sp, #4
 80098fc:	f7ff fcf3 	bl	80092e6 <__lo0bits>
 8009900:	9b01      	ldr	r3, [sp, #4]
 8009902:	2201      	movs	r2, #1
 8009904:	6163      	str	r3, [r4, #20]
 8009906:	3020      	adds	r0, #32
 8009908:	e7e7      	b.n	80098da <__d2b+0x62>
 800990a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800990e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009912:	6030      	str	r0, [r6, #0]
 8009914:	6918      	ldr	r0, [r3, #16]
 8009916:	f7ff fcc7 	bl	80092a8 <__hi0bits>
 800991a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800991e:	e7e4      	b.n	80098ea <__d2b+0x72>
 8009920:	0800aff1 	.word	0x0800aff1
 8009924:	0800b079 	.word	0x0800b079

08009928 <__ratio>:
 8009928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800992c:	b085      	sub	sp, #20
 800992e:	e9cd 1000 	strd	r1, r0, [sp]
 8009932:	a902      	add	r1, sp, #8
 8009934:	f7ff ff58 	bl	80097e8 <__b2d>
 8009938:	468b      	mov	fp, r1
 800993a:	4606      	mov	r6, r0
 800993c:	460f      	mov	r7, r1
 800993e:	9800      	ldr	r0, [sp, #0]
 8009940:	a903      	add	r1, sp, #12
 8009942:	f7ff ff51 	bl	80097e8 <__b2d>
 8009946:	460d      	mov	r5, r1
 8009948:	9b01      	ldr	r3, [sp, #4]
 800994a:	4689      	mov	r9, r1
 800994c:	6919      	ldr	r1, [r3, #16]
 800994e:	9b00      	ldr	r3, [sp, #0]
 8009950:	4604      	mov	r4, r0
 8009952:	691b      	ldr	r3, [r3, #16]
 8009954:	4630      	mov	r0, r6
 8009956:	1ac9      	subs	r1, r1, r3
 8009958:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800995c:	1a9b      	subs	r3, r3, r2
 800995e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009962:	2b00      	cmp	r3, #0
 8009964:	bfcd      	iteet	gt
 8009966:	463a      	movgt	r2, r7
 8009968:	462a      	movle	r2, r5
 800996a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800996e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8009972:	bfd8      	it	le
 8009974:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009978:	464b      	mov	r3, r9
 800997a:	4622      	mov	r2, r4
 800997c:	4659      	mov	r1, fp
 800997e:	f7f6 fed7 	bl	8000730 <__aeabi_ddiv>
 8009982:	b005      	add	sp, #20
 8009984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009988 <__copybits>:
 8009988:	3901      	subs	r1, #1
 800998a:	b570      	push	{r4, r5, r6, lr}
 800998c:	1149      	asrs	r1, r1, #5
 800998e:	6914      	ldr	r4, [r2, #16]
 8009990:	3101      	adds	r1, #1
 8009992:	f102 0314 	add.w	r3, r2, #20
 8009996:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800999a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800999e:	1f05      	subs	r5, r0, #4
 80099a0:	42a3      	cmp	r3, r4
 80099a2:	d30c      	bcc.n	80099be <__copybits+0x36>
 80099a4:	1aa3      	subs	r3, r4, r2
 80099a6:	3b11      	subs	r3, #17
 80099a8:	f023 0303 	bic.w	r3, r3, #3
 80099ac:	3211      	adds	r2, #17
 80099ae:	42a2      	cmp	r2, r4
 80099b0:	bf88      	it	hi
 80099b2:	2300      	movhi	r3, #0
 80099b4:	4418      	add	r0, r3
 80099b6:	2300      	movs	r3, #0
 80099b8:	4288      	cmp	r0, r1
 80099ba:	d305      	bcc.n	80099c8 <__copybits+0x40>
 80099bc:	bd70      	pop	{r4, r5, r6, pc}
 80099be:	f853 6b04 	ldr.w	r6, [r3], #4
 80099c2:	f845 6f04 	str.w	r6, [r5, #4]!
 80099c6:	e7eb      	b.n	80099a0 <__copybits+0x18>
 80099c8:	f840 3b04 	str.w	r3, [r0], #4
 80099cc:	e7f4      	b.n	80099b8 <__copybits+0x30>

080099ce <__any_on>:
 80099ce:	f100 0214 	add.w	r2, r0, #20
 80099d2:	6900      	ldr	r0, [r0, #16]
 80099d4:	114b      	asrs	r3, r1, #5
 80099d6:	4298      	cmp	r0, r3
 80099d8:	b510      	push	{r4, lr}
 80099da:	db11      	blt.n	8009a00 <__any_on+0x32>
 80099dc:	dd0a      	ble.n	80099f4 <__any_on+0x26>
 80099de:	f011 011f 	ands.w	r1, r1, #31
 80099e2:	d007      	beq.n	80099f4 <__any_on+0x26>
 80099e4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80099e8:	fa24 f001 	lsr.w	r0, r4, r1
 80099ec:	fa00 f101 	lsl.w	r1, r0, r1
 80099f0:	428c      	cmp	r4, r1
 80099f2:	d10b      	bne.n	8009a0c <__any_on+0x3e>
 80099f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80099f8:	4293      	cmp	r3, r2
 80099fa:	d803      	bhi.n	8009a04 <__any_on+0x36>
 80099fc:	2000      	movs	r0, #0
 80099fe:	bd10      	pop	{r4, pc}
 8009a00:	4603      	mov	r3, r0
 8009a02:	e7f7      	b.n	80099f4 <__any_on+0x26>
 8009a04:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009a08:	2900      	cmp	r1, #0
 8009a0a:	d0f5      	beq.n	80099f8 <__any_on+0x2a>
 8009a0c:	2001      	movs	r0, #1
 8009a0e:	e7f6      	b.n	80099fe <__any_on+0x30>

08009a10 <__ascii_wctomb>:
 8009a10:	4603      	mov	r3, r0
 8009a12:	4608      	mov	r0, r1
 8009a14:	b141      	cbz	r1, 8009a28 <__ascii_wctomb+0x18>
 8009a16:	2aff      	cmp	r2, #255	@ 0xff
 8009a18:	d904      	bls.n	8009a24 <__ascii_wctomb+0x14>
 8009a1a:	228a      	movs	r2, #138	@ 0x8a
 8009a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a20:	601a      	str	r2, [r3, #0]
 8009a22:	4770      	bx	lr
 8009a24:	2001      	movs	r0, #1
 8009a26:	700a      	strb	r2, [r1, #0]
 8009a28:	4770      	bx	lr

08009a2a <__ssputs_r>:
 8009a2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a2e:	461f      	mov	r7, r3
 8009a30:	688e      	ldr	r6, [r1, #8]
 8009a32:	4682      	mov	sl, r0
 8009a34:	42be      	cmp	r6, r7
 8009a36:	460c      	mov	r4, r1
 8009a38:	4690      	mov	r8, r2
 8009a3a:	680b      	ldr	r3, [r1, #0]
 8009a3c:	d82d      	bhi.n	8009a9a <__ssputs_r+0x70>
 8009a3e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009a42:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009a46:	d026      	beq.n	8009a96 <__ssputs_r+0x6c>
 8009a48:	6965      	ldr	r5, [r4, #20]
 8009a4a:	6909      	ldr	r1, [r1, #16]
 8009a4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009a50:	eba3 0901 	sub.w	r9, r3, r1
 8009a54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009a58:	1c7b      	adds	r3, r7, #1
 8009a5a:	444b      	add	r3, r9
 8009a5c:	106d      	asrs	r5, r5, #1
 8009a5e:	429d      	cmp	r5, r3
 8009a60:	bf38      	it	cc
 8009a62:	461d      	movcc	r5, r3
 8009a64:	0553      	lsls	r3, r2, #21
 8009a66:	d527      	bpl.n	8009ab8 <__ssputs_r+0x8e>
 8009a68:	4629      	mov	r1, r5
 8009a6a:	f7ff fa8d 	bl	8008f88 <_malloc_r>
 8009a6e:	4606      	mov	r6, r0
 8009a70:	b360      	cbz	r0, 8009acc <__ssputs_r+0xa2>
 8009a72:	464a      	mov	r2, r9
 8009a74:	6921      	ldr	r1, [r4, #16]
 8009a76:	f7fe feca 	bl	800880e <memcpy>
 8009a7a:	89a3      	ldrh	r3, [r4, #12]
 8009a7c:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009a80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a84:	81a3      	strh	r3, [r4, #12]
 8009a86:	6126      	str	r6, [r4, #16]
 8009a88:	444e      	add	r6, r9
 8009a8a:	6026      	str	r6, [r4, #0]
 8009a8c:	463e      	mov	r6, r7
 8009a8e:	6165      	str	r5, [r4, #20]
 8009a90:	eba5 0509 	sub.w	r5, r5, r9
 8009a94:	60a5      	str	r5, [r4, #8]
 8009a96:	42be      	cmp	r6, r7
 8009a98:	d900      	bls.n	8009a9c <__ssputs_r+0x72>
 8009a9a:	463e      	mov	r6, r7
 8009a9c:	4632      	mov	r2, r6
 8009a9e:	4641      	mov	r1, r8
 8009aa0:	6820      	ldr	r0, [r4, #0]
 8009aa2:	f000 fb53 	bl	800a14c <memmove>
 8009aa6:	2000      	movs	r0, #0
 8009aa8:	68a3      	ldr	r3, [r4, #8]
 8009aaa:	1b9b      	subs	r3, r3, r6
 8009aac:	60a3      	str	r3, [r4, #8]
 8009aae:	6823      	ldr	r3, [r4, #0]
 8009ab0:	4433      	add	r3, r6
 8009ab2:	6023      	str	r3, [r4, #0]
 8009ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ab8:	462a      	mov	r2, r5
 8009aba:	f000 fbb9 	bl	800a230 <_realloc_r>
 8009abe:	4606      	mov	r6, r0
 8009ac0:	2800      	cmp	r0, #0
 8009ac2:	d1e0      	bne.n	8009a86 <__ssputs_r+0x5c>
 8009ac4:	4650      	mov	r0, sl
 8009ac6:	6921      	ldr	r1, [r4, #16]
 8009ac8:	f7fe feba 	bl	8008840 <_free_r>
 8009acc:	230c      	movs	r3, #12
 8009ace:	f8ca 3000 	str.w	r3, [sl]
 8009ad2:	89a3      	ldrh	r3, [r4, #12]
 8009ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ad8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009adc:	81a3      	strh	r3, [r4, #12]
 8009ade:	e7e9      	b.n	8009ab4 <__ssputs_r+0x8a>

08009ae0 <_svfiprintf_r>:
 8009ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ae4:	4698      	mov	r8, r3
 8009ae6:	898b      	ldrh	r3, [r1, #12]
 8009ae8:	4607      	mov	r7, r0
 8009aea:	061b      	lsls	r3, r3, #24
 8009aec:	460d      	mov	r5, r1
 8009aee:	4614      	mov	r4, r2
 8009af0:	b09d      	sub	sp, #116	@ 0x74
 8009af2:	d510      	bpl.n	8009b16 <_svfiprintf_r+0x36>
 8009af4:	690b      	ldr	r3, [r1, #16]
 8009af6:	b973      	cbnz	r3, 8009b16 <_svfiprintf_r+0x36>
 8009af8:	2140      	movs	r1, #64	@ 0x40
 8009afa:	f7ff fa45 	bl	8008f88 <_malloc_r>
 8009afe:	6028      	str	r0, [r5, #0]
 8009b00:	6128      	str	r0, [r5, #16]
 8009b02:	b930      	cbnz	r0, 8009b12 <_svfiprintf_r+0x32>
 8009b04:	230c      	movs	r3, #12
 8009b06:	603b      	str	r3, [r7, #0]
 8009b08:	f04f 30ff 	mov.w	r0, #4294967295
 8009b0c:	b01d      	add	sp, #116	@ 0x74
 8009b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b12:	2340      	movs	r3, #64	@ 0x40
 8009b14:	616b      	str	r3, [r5, #20]
 8009b16:	2300      	movs	r3, #0
 8009b18:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b1a:	2320      	movs	r3, #32
 8009b1c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009b20:	2330      	movs	r3, #48	@ 0x30
 8009b22:	f04f 0901 	mov.w	r9, #1
 8009b26:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b2a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8009cc4 <_svfiprintf_r+0x1e4>
 8009b2e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009b32:	4623      	mov	r3, r4
 8009b34:	469a      	mov	sl, r3
 8009b36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b3a:	b10a      	cbz	r2, 8009b40 <_svfiprintf_r+0x60>
 8009b3c:	2a25      	cmp	r2, #37	@ 0x25
 8009b3e:	d1f9      	bne.n	8009b34 <_svfiprintf_r+0x54>
 8009b40:	ebba 0b04 	subs.w	fp, sl, r4
 8009b44:	d00b      	beq.n	8009b5e <_svfiprintf_r+0x7e>
 8009b46:	465b      	mov	r3, fp
 8009b48:	4622      	mov	r2, r4
 8009b4a:	4629      	mov	r1, r5
 8009b4c:	4638      	mov	r0, r7
 8009b4e:	f7ff ff6c 	bl	8009a2a <__ssputs_r>
 8009b52:	3001      	adds	r0, #1
 8009b54:	f000 80a7 	beq.w	8009ca6 <_svfiprintf_r+0x1c6>
 8009b58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b5a:	445a      	add	r2, fp
 8009b5c:	9209      	str	r2, [sp, #36]	@ 0x24
 8009b5e:	f89a 3000 	ldrb.w	r3, [sl]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	f000 809f 	beq.w	8009ca6 <_svfiprintf_r+0x1c6>
 8009b68:	2300      	movs	r3, #0
 8009b6a:	f04f 32ff 	mov.w	r2, #4294967295
 8009b6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b72:	f10a 0a01 	add.w	sl, sl, #1
 8009b76:	9304      	str	r3, [sp, #16]
 8009b78:	9307      	str	r3, [sp, #28]
 8009b7a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009b7e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009b80:	4654      	mov	r4, sl
 8009b82:	2205      	movs	r2, #5
 8009b84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b88:	484e      	ldr	r0, [pc, #312]	@ (8009cc4 <_svfiprintf_r+0x1e4>)
 8009b8a:	f000 fb09 	bl	800a1a0 <memchr>
 8009b8e:	9a04      	ldr	r2, [sp, #16]
 8009b90:	b9d8      	cbnz	r0, 8009bca <_svfiprintf_r+0xea>
 8009b92:	06d0      	lsls	r0, r2, #27
 8009b94:	bf44      	itt	mi
 8009b96:	2320      	movmi	r3, #32
 8009b98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b9c:	0711      	lsls	r1, r2, #28
 8009b9e:	bf44      	itt	mi
 8009ba0:	232b      	movmi	r3, #43	@ 0x2b
 8009ba2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ba6:	f89a 3000 	ldrb.w	r3, [sl]
 8009baa:	2b2a      	cmp	r3, #42	@ 0x2a
 8009bac:	d015      	beq.n	8009bda <_svfiprintf_r+0xfa>
 8009bae:	4654      	mov	r4, sl
 8009bb0:	2000      	movs	r0, #0
 8009bb2:	f04f 0c0a 	mov.w	ip, #10
 8009bb6:	9a07      	ldr	r2, [sp, #28]
 8009bb8:	4621      	mov	r1, r4
 8009bba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009bbe:	3b30      	subs	r3, #48	@ 0x30
 8009bc0:	2b09      	cmp	r3, #9
 8009bc2:	d94b      	bls.n	8009c5c <_svfiprintf_r+0x17c>
 8009bc4:	b1b0      	cbz	r0, 8009bf4 <_svfiprintf_r+0x114>
 8009bc6:	9207      	str	r2, [sp, #28]
 8009bc8:	e014      	b.n	8009bf4 <_svfiprintf_r+0x114>
 8009bca:	eba0 0308 	sub.w	r3, r0, r8
 8009bce:	fa09 f303 	lsl.w	r3, r9, r3
 8009bd2:	4313      	orrs	r3, r2
 8009bd4:	46a2      	mov	sl, r4
 8009bd6:	9304      	str	r3, [sp, #16]
 8009bd8:	e7d2      	b.n	8009b80 <_svfiprintf_r+0xa0>
 8009bda:	9b03      	ldr	r3, [sp, #12]
 8009bdc:	1d19      	adds	r1, r3, #4
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	9103      	str	r1, [sp, #12]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	bfbb      	ittet	lt
 8009be6:	425b      	neglt	r3, r3
 8009be8:	f042 0202 	orrlt.w	r2, r2, #2
 8009bec:	9307      	strge	r3, [sp, #28]
 8009bee:	9307      	strlt	r3, [sp, #28]
 8009bf0:	bfb8      	it	lt
 8009bf2:	9204      	strlt	r2, [sp, #16]
 8009bf4:	7823      	ldrb	r3, [r4, #0]
 8009bf6:	2b2e      	cmp	r3, #46	@ 0x2e
 8009bf8:	d10a      	bne.n	8009c10 <_svfiprintf_r+0x130>
 8009bfa:	7863      	ldrb	r3, [r4, #1]
 8009bfc:	2b2a      	cmp	r3, #42	@ 0x2a
 8009bfe:	d132      	bne.n	8009c66 <_svfiprintf_r+0x186>
 8009c00:	9b03      	ldr	r3, [sp, #12]
 8009c02:	3402      	adds	r4, #2
 8009c04:	1d1a      	adds	r2, r3, #4
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	9203      	str	r2, [sp, #12]
 8009c0a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009c0e:	9305      	str	r3, [sp, #20]
 8009c10:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8009cc8 <_svfiprintf_r+0x1e8>
 8009c14:	2203      	movs	r2, #3
 8009c16:	4650      	mov	r0, sl
 8009c18:	7821      	ldrb	r1, [r4, #0]
 8009c1a:	f000 fac1 	bl	800a1a0 <memchr>
 8009c1e:	b138      	cbz	r0, 8009c30 <_svfiprintf_r+0x150>
 8009c20:	2240      	movs	r2, #64	@ 0x40
 8009c22:	9b04      	ldr	r3, [sp, #16]
 8009c24:	eba0 000a 	sub.w	r0, r0, sl
 8009c28:	4082      	lsls	r2, r0
 8009c2a:	4313      	orrs	r3, r2
 8009c2c:	3401      	adds	r4, #1
 8009c2e:	9304      	str	r3, [sp, #16]
 8009c30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c34:	2206      	movs	r2, #6
 8009c36:	4825      	ldr	r0, [pc, #148]	@ (8009ccc <_svfiprintf_r+0x1ec>)
 8009c38:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009c3c:	f000 fab0 	bl	800a1a0 <memchr>
 8009c40:	2800      	cmp	r0, #0
 8009c42:	d036      	beq.n	8009cb2 <_svfiprintf_r+0x1d2>
 8009c44:	4b22      	ldr	r3, [pc, #136]	@ (8009cd0 <_svfiprintf_r+0x1f0>)
 8009c46:	bb1b      	cbnz	r3, 8009c90 <_svfiprintf_r+0x1b0>
 8009c48:	9b03      	ldr	r3, [sp, #12]
 8009c4a:	3307      	adds	r3, #7
 8009c4c:	f023 0307 	bic.w	r3, r3, #7
 8009c50:	3308      	adds	r3, #8
 8009c52:	9303      	str	r3, [sp, #12]
 8009c54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c56:	4433      	add	r3, r6
 8009c58:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c5a:	e76a      	b.n	8009b32 <_svfiprintf_r+0x52>
 8009c5c:	460c      	mov	r4, r1
 8009c5e:	2001      	movs	r0, #1
 8009c60:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c64:	e7a8      	b.n	8009bb8 <_svfiprintf_r+0xd8>
 8009c66:	2300      	movs	r3, #0
 8009c68:	f04f 0c0a 	mov.w	ip, #10
 8009c6c:	4619      	mov	r1, r3
 8009c6e:	3401      	adds	r4, #1
 8009c70:	9305      	str	r3, [sp, #20]
 8009c72:	4620      	mov	r0, r4
 8009c74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c78:	3a30      	subs	r2, #48	@ 0x30
 8009c7a:	2a09      	cmp	r2, #9
 8009c7c:	d903      	bls.n	8009c86 <_svfiprintf_r+0x1a6>
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d0c6      	beq.n	8009c10 <_svfiprintf_r+0x130>
 8009c82:	9105      	str	r1, [sp, #20]
 8009c84:	e7c4      	b.n	8009c10 <_svfiprintf_r+0x130>
 8009c86:	4604      	mov	r4, r0
 8009c88:	2301      	movs	r3, #1
 8009c8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c8e:	e7f0      	b.n	8009c72 <_svfiprintf_r+0x192>
 8009c90:	ab03      	add	r3, sp, #12
 8009c92:	9300      	str	r3, [sp, #0]
 8009c94:	462a      	mov	r2, r5
 8009c96:	4638      	mov	r0, r7
 8009c98:	4b0e      	ldr	r3, [pc, #56]	@ (8009cd4 <_svfiprintf_r+0x1f4>)
 8009c9a:	a904      	add	r1, sp, #16
 8009c9c:	f3af 8000 	nop.w
 8009ca0:	1c42      	adds	r2, r0, #1
 8009ca2:	4606      	mov	r6, r0
 8009ca4:	d1d6      	bne.n	8009c54 <_svfiprintf_r+0x174>
 8009ca6:	89ab      	ldrh	r3, [r5, #12]
 8009ca8:	065b      	lsls	r3, r3, #25
 8009caa:	f53f af2d 	bmi.w	8009b08 <_svfiprintf_r+0x28>
 8009cae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009cb0:	e72c      	b.n	8009b0c <_svfiprintf_r+0x2c>
 8009cb2:	ab03      	add	r3, sp, #12
 8009cb4:	9300      	str	r3, [sp, #0]
 8009cb6:	462a      	mov	r2, r5
 8009cb8:	4638      	mov	r0, r7
 8009cba:	4b06      	ldr	r3, [pc, #24]	@ (8009cd4 <_svfiprintf_r+0x1f4>)
 8009cbc:	a904      	add	r1, sp, #16
 8009cbe:	f000 f87d 	bl	8009dbc <_printf_i>
 8009cc2:	e7ed      	b.n	8009ca0 <_svfiprintf_r+0x1c0>
 8009cc4:	0800b1d0 	.word	0x0800b1d0
 8009cc8:	0800b1d6 	.word	0x0800b1d6
 8009ccc:	0800b1da 	.word	0x0800b1da
 8009cd0:	00000000 	.word	0x00000000
 8009cd4:	08009a2b 	.word	0x08009a2b

08009cd8 <_printf_common>:
 8009cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cdc:	4616      	mov	r6, r2
 8009cde:	4698      	mov	r8, r3
 8009ce0:	688a      	ldr	r2, [r1, #8]
 8009ce2:	690b      	ldr	r3, [r1, #16]
 8009ce4:	4607      	mov	r7, r0
 8009ce6:	4293      	cmp	r3, r2
 8009ce8:	bfb8      	it	lt
 8009cea:	4613      	movlt	r3, r2
 8009cec:	6033      	str	r3, [r6, #0]
 8009cee:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009cf2:	460c      	mov	r4, r1
 8009cf4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009cf8:	b10a      	cbz	r2, 8009cfe <_printf_common+0x26>
 8009cfa:	3301      	adds	r3, #1
 8009cfc:	6033      	str	r3, [r6, #0]
 8009cfe:	6823      	ldr	r3, [r4, #0]
 8009d00:	0699      	lsls	r1, r3, #26
 8009d02:	bf42      	ittt	mi
 8009d04:	6833      	ldrmi	r3, [r6, #0]
 8009d06:	3302      	addmi	r3, #2
 8009d08:	6033      	strmi	r3, [r6, #0]
 8009d0a:	6825      	ldr	r5, [r4, #0]
 8009d0c:	f015 0506 	ands.w	r5, r5, #6
 8009d10:	d106      	bne.n	8009d20 <_printf_common+0x48>
 8009d12:	f104 0a19 	add.w	sl, r4, #25
 8009d16:	68e3      	ldr	r3, [r4, #12]
 8009d18:	6832      	ldr	r2, [r6, #0]
 8009d1a:	1a9b      	subs	r3, r3, r2
 8009d1c:	42ab      	cmp	r3, r5
 8009d1e:	dc2b      	bgt.n	8009d78 <_printf_common+0xa0>
 8009d20:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009d24:	6822      	ldr	r2, [r4, #0]
 8009d26:	3b00      	subs	r3, #0
 8009d28:	bf18      	it	ne
 8009d2a:	2301      	movne	r3, #1
 8009d2c:	0692      	lsls	r2, r2, #26
 8009d2e:	d430      	bmi.n	8009d92 <_printf_common+0xba>
 8009d30:	4641      	mov	r1, r8
 8009d32:	4638      	mov	r0, r7
 8009d34:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009d38:	47c8      	blx	r9
 8009d3a:	3001      	adds	r0, #1
 8009d3c:	d023      	beq.n	8009d86 <_printf_common+0xae>
 8009d3e:	6823      	ldr	r3, [r4, #0]
 8009d40:	6922      	ldr	r2, [r4, #16]
 8009d42:	f003 0306 	and.w	r3, r3, #6
 8009d46:	2b04      	cmp	r3, #4
 8009d48:	bf14      	ite	ne
 8009d4a:	2500      	movne	r5, #0
 8009d4c:	6833      	ldreq	r3, [r6, #0]
 8009d4e:	f04f 0600 	mov.w	r6, #0
 8009d52:	bf08      	it	eq
 8009d54:	68e5      	ldreq	r5, [r4, #12]
 8009d56:	f104 041a 	add.w	r4, r4, #26
 8009d5a:	bf08      	it	eq
 8009d5c:	1aed      	subeq	r5, r5, r3
 8009d5e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009d62:	bf08      	it	eq
 8009d64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	bfc4      	itt	gt
 8009d6c:	1a9b      	subgt	r3, r3, r2
 8009d6e:	18ed      	addgt	r5, r5, r3
 8009d70:	42b5      	cmp	r5, r6
 8009d72:	d11a      	bne.n	8009daa <_printf_common+0xd2>
 8009d74:	2000      	movs	r0, #0
 8009d76:	e008      	b.n	8009d8a <_printf_common+0xb2>
 8009d78:	2301      	movs	r3, #1
 8009d7a:	4652      	mov	r2, sl
 8009d7c:	4641      	mov	r1, r8
 8009d7e:	4638      	mov	r0, r7
 8009d80:	47c8      	blx	r9
 8009d82:	3001      	adds	r0, #1
 8009d84:	d103      	bne.n	8009d8e <_printf_common+0xb6>
 8009d86:	f04f 30ff 	mov.w	r0, #4294967295
 8009d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d8e:	3501      	adds	r5, #1
 8009d90:	e7c1      	b.n	8009d16 <_printf_common+0x3e>
 8009d92:	2030      	movs	r0, #48	@ 0x30
 8009d94:	18e1      	adds	r1, r4, r3
 8009d96:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009d9a:	1c5a      	adds	r2, r3, #1
 8009d9c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009da0:	4422      	add	r2, r4
 8009da2:	3302      	adds	r3, #2
 8009da4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009da8:	e7c2      	b.n	8009d30 <_printf_common+0x58>
 8009daa:	2301      	movs	r3, #1
 8009dac:	4622      	mov	r2, r4
 8009dae:	4641      	mov	r1, r8
 8009db0:	4638      	mov	r0, r7
 8009db2:	47c8      	blx	r9
 8009db4:	3001      	adds	r0, #1
 8009db6:	d0e6      	beq.n	8009d86 <_printf_common+0xae>
 8009db8:	3601      	adds	r6, #1
 8009dba:	e7d9      	b.n	8009d70 <_printf_common+0x98>

08009dbc <_printf_i>:
 8009dbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009dc0:	7e0f      	ldrb	r7, [r1, #24]
 8009dc2:	4691      	mov	r9, r2
 8009dc4:	2f78      	cmp	r7, #120	@ 0x78
 8009dc6:	4680      	mov	r8, r0
 8009dc8:	460c      	mov	r4, r1
 8009dca:	469a      	mov	sl, r3
 8009dcc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009dce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009dd2:	d807      	bhi.n	8009de4 <_printf_i+0x28>
 8009dd4:	2f62      	cmp	r7, #98	@ 0x62
 8009dd6:	d80a      	bhi.n	8009dee <_printf_i+0x32>
 8009dd8:	2f00      	cmp	r7, #0
 8009dda:	f000 80d3 	beq.w	8009f84 <_printf_i+0x1c8>
 8009dde:	2f58      	cmp	r7, #88	@ 0x58
 8009de0:	f000 80ba 	beq.w	8009f58 <_printf_i+0x19c>
 8009de4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009de8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009dec:	e03a      	b.n	8009e64 <_printf_i+0xa8>
 8009dee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009df2:	2b15      	cmp	r3, #21
 8009df4:	d8f6      	bhi.n	8009de4 <_printf_i+0x28>
 8009df6:	a101      	add	r1, pc, #4	@ (adr r1, 8009dfc <_printf_i+0x40>)
 8009df8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009dfc:	08009e55 	.word	0x08009e55
 8009e00:	08009e69 	.word	0x08009e69
 8009e04:	08009de5 	.word	0x08009de5
 8009e08:	08009de5 	.word	0x08009de5
 8009e0c:	08009de5 	.word	0x08009de5
 8009e10:	08009de5 	.word	0x08009de5
 8009e14:	08009e69 	.word	0x08009e69
 8009e18:	08009de5 	.word	0x08009de5
 8009e1c:	08009de5 	.word	0x08009de5
 8009e20:	08009de5 	.word	0x08009de5
 8009e24:	08009de5 	.word	0x08009de5
 8009e28:	08009f6b 	.word	0x08009f6b
 8009e2c:	08009e93 	.word	0x08009e93
 8009e30:	08009f25 	.word	0x08009f25
 8009e34:	08009de5 	.word	0x08009de5
 8009e38:	08009de5 	.word	0x08009de5
 8009e3c:	08009f8d 	.word	0x08009f8d
 8009e40:	08009de5 	.word	0x08009de5
 8009e44:	08009e93 	.word	0x08009e93
 8009e48:	08009de5 	.word	0x08009de5
 8009e4c:	08009de5 	.word	0x08009de5
 8009e50:	08009f2d 	.word	0x08009f2d
 8009e54:	6833      	ldr	r3, [r6, #0]
 8009e56:	1d1a      	adds	r2, r3, #4
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	6032      	str	r2, [r6, #0]
 8009e5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009e60:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009e64:	2301      	movs	r3, #1
 8009e66:	e09e      	b.n	8009fa6 <_printf_i+0x1ea>
 8009e68:	6833      	ldr	r3, [r6, #0]
 8009e6a:	6820      	ldr	r0, [r4, #0]
 8009e6c:	1d19      	adds	r1, r3, #4
 8009e6e:	6031      	str	r1, [r6, #0]
 8009e70:	0606      	lsls	r6, r0, #24
 8009e72:	d501      	bpl.n	8009e78 <_printf_i+0xbc>
 8009e74:	681d      	ldr	r5, [r3, #0]
 8009e76:	e003      	b.n	8009e80 <_printf_i+0xc4>
 8009e78:	0645      	lsls	r5, r0, #25
 8009e7a:	d5fb      	bpl.n	8009e74 <_printf_i+0xb8>
 8009e7c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009e80:	2d00      	cmp	r5, #0
 8009e82:	da03      	bge.n	8009e8c <_printf_i+0xd0>
 8009e84:	232d      	movs	r3, #45	@ 0x2d
 8009e86:	426d      	negs	r5, r5
 8009e88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009e8c:	230a      	movs	r3, #10
 8009e8e:	4859      	ldr	r0, [pc, #356]	@ (8009ff4 <_printf_i+0x238>)
 8009e90:	e011      	b.n	8009eb6 <_printf_i+0xfa>
 8009e92:	6821      	ldr	r1, [r4, #0]
 8009e94:	6833      	ldr	r3, [r6, #0]
 8009e96:	0608      	lsls	r0, r1, #24
 8009e98:	f853 5b04 	ldr.w	r5, [r3], #4
 8009e9c:	d402      	bmi.n	8009ea4 <_printf_i+0xe8>
 8009e9e:	0649      	lsls	r1, r1, #25
 8009ea0:	bf48      	it	mi
 8009ea2:	b2ad      	uxthmi	r5, r5
 8009ea4:	2f6f      	cmp	r7, #111	@ 0x6f
 8009ea6:	6033      	str	r3, [r6, #0]
 8009ea8:	bf14      	ite	ne
 8009eaa:	230a      	movne	r3, #10
 8009eac:	2308      	moveq	r3, #8
 8009eae:	4851      	ldr	r0, [pc, #324]	@ (8009ff4 <_printf_i+0x238>)
 8009eb0:	2100      	movs	r1, #0
 8009eb2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009eb6:	6866      	ldr	r6, [r4, #4]
 8009eb8:	2e00      	cmp	r6, #0
 8009eba:	bfa8      	it	ge
 8009ebc:	6821      	ldrge	r1, [r4, #0]
 8009ebe:	60a6      	str	r6, [r4, #8]
 8009ec0:	bfa4      	itt	ge
 8009ec2:	f021 0104 	bicge.w	r1, r1, #4
 8009ec6:	6021      	strge	r1, [r4, #0]
 8009ec8:	b90d      	cbnz	r5, 8009ece <_printf_i+0x112>
 8009eca:	2e00      	cmp	r6, #0
 8009ecc:	d04b      	beq.n	8009f66 <_printf_i+0x1aa>
 8009ece:	4616      	mov	r6, r2
 8009ed0:	fbb5 f1f3 	udiv	r1, r5, r3
 8009ed4:	fb03 5711 	mls	r7, r3, r1, r5
 8009ed8:	5dc7      	ldrb	r7, [r0, r7]
 8009eda:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009ede:	462f      	mov	r7, r5
 8009ee0:	42bb      	cmp	r3, r7
 8009ee2:	460d      	mov	r5, r1
 8009ee4:	d9f4      	bls.n	8009ed0 <_printf_i+0x114>
 8009ee6:	2b08      	cmp	r3, #8
 8009ee8:	d10b      	bne.n	8009f02 <_printf_i+0x146>
 8009eea:	6823      	ldr	r3, [r4, #0]
 8009eec:	07df      	lsls	r7, r3, #31
 8009eee:	d508      	bpl.n	8009f02 <_printf_i+0x146>
 8009ef0:	6923      	ldr	r3, [r4, #16]
 8009ef2:	6861      	ldr	r1, [r4, #4]
 8009ef4:	4299      	cmp	r1, r3
 8009ef6:	bfde      	ittt	le
 8009ef8:	2330      	movle	r3, #48	@ 0x30
 8009efa:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009efe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009f02:	1b92      	subs	r2, r2, r6
 8009f04:	6122      	str	r2, [r4, #16]
 8009f06:	464b      	mov	r3, r9
 8009f08:	4621      	mov	r1, r4
 8009f0a:	4640      	mov	r0, r8
 8009f0c:	f8cd a000 	str.w	sl, [sp]
 8009f10:	aa03      	add	r2, sp, #12
 8009f12:	f7ff fee1 	bl	8009cd8 <_printf_common>
 8009f16:	3001      	adds	r0, #1
 8009f18:	d14a      	bne.n	8009fb0 <_printf_i+0x1f4>
 8009f1a:	f04f 30ff 	mov.w	r0, #4294967295
 8009f1e:	b004      	add	sp, #16
 8009f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f24:	6823      	ldr	r3, [r4, #0]
 8009f26:	f043 0320 	orr.w	r3, r3, #32
 8009f2a:	6023      	str	r3, [r4, #0]
 8009f2c:	2778      	movs	r7, #120	@ 0x78
 8009f2e:	4832      	ldr	r0, [pc, #200]	@ (8009ff8 <_printf_i+0x23c>)
 8009f30:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009f34:	6823      	ldr	r3, [r4, #0]
 8009f36:	6831      	ldr	r1, [r6, #0]
 8009f38:	061f      	lsls	r7, r3, #24
 8009f3a:	f851 5b04 	ldr.w	r5, [r1], #4
 8009f3e:	d402      	bmi.n	8009f46 <_printf_i+0x18a>
 8009f40:	065f      	lsls	r7, r3, #25
 8009f42:	bf48      	it	mi
 8009f44:	b2ad      	uxthmi	r5, r5
 8009f46:	6031      	str	r1, [r6, #0]
 8009f48:	07d9      	lsls	r1, r3, #31
 8009f4a:	bf44      	itt	mi
 8009f4c:	f043 0320 	orrmi.w	r3, r3, #32
 8009f50:	6023      	strmi	r3, [r4, #0]
 8009f52:	b11d      	cbz	r5, 8009f5c <_printf_i+0x1a0>
 8009f54:	2310      	movs	r3, #16
 8009f56:	e7ab      	b.n	8009eb0 <_printf_i+0xf4>
 8009f58:	4826      	ldr	r0, [pc, #152]	@ (8009ff4 <_printf_i+0x238>)
 8009f5a:	e7e9      	b.n	8009f30 <_printf_i+0x174>
 8009f5c:	6823      	ldr	r3, [r4, #0]
 8009f5e:	f023 0320 	bic.w	r3, r3, #32
 8009f62:	6023      	str	r3, [r4, #0]
 8009f64:	e7f6      	b.n	8009f54 <_printf_i+0x198>
 8009f66:	4616      	mov	r6, r2
 8009f68:	e7bd      	b.n	8009ee6 <_printf_i+0x12a>
 8009f6a:	6833      	ldr	r3, [r6, #0]
 8009f6c:	6825      	ldr	r5, [r4, #0]
 8009f6e:	1d18      	adds	r0, r3, #4
 8009f70:	6961      	ldr	r1, [r4, #20]
 8009f72:	6030      	str	r0, [r6, #0]
 8009f74:	062e      	lsls	r6, r5, #24
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	d501      	bpl.n	8009f7e <_printf_i+0x1c2>
 8009f7a:	6019      	str	r1, [r3, #0]
 8009f7c:	e002      	b.n	8009f84 <_printf_i+0x1c8>
 8009f7e:	0668      	lsls	r0, r5, #25
 8009f80:	d5fb      	bpl.n	8009f7a <_printf_i+0x1be>
 8009f82:	8019      	strh	r1, [r3, #0]
 8009f84:	2300      	movs	r3, #0
 8009f86:	4616      	mov	r6, r2
 8009f88:	6123      	str	r3, [r4, #16]
 8009f8a:	e7bc      	b.n	8009f06 <_printf_i+0x14a>
 8009f8c:	6833      	ldr	r3, [r6, #0]
 8009f8e:	2100      	movs	r1, #0
 8009f90:	1d1a      	adds	r2, r3, #4
 8009f92:	6032      	str	r2, [r6, #0]
 8009f94:	681e      	ldr	r6, [r3, #0]
 8009f96:	6862      	ldr	r2, [r4, #4]
 8009f98:	4630      	mov	r0, r6
 8009f9a:	f000 f901 	bl	800a1a0 <memchr>
 8009f9e:	b108      	cbz	r0, 8009fa4 <_printf_i+0x1e8>
 8009fa0:	1b80      	subs	r0, r0, r6
 8009fa2:	6060      	str	r0, [r4, #4]
 8009fa4:	6863      	ldr	r3, [r4, #4]
 8009fa6:	6123      	str	r3, [r4, #16]
 8009fa8:	2300      	movs	r3, #0
 8009faa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009fae:	e7aa      	b.n	8009f06 <_printf_i+0x14a>
 8009fb0:	4632      	mov	r2, r6
 8009fb2:	4649      	mov	r1, r9
 8009fb4:	4640      	mov	r0, r8
 8009fb6:	6923      	ldr	r3, [r4, #16]
 8009fb8:	47d0      	blx	sl
 8009fba:	3001      	adds	r0, #1
 8009fbc:	d0ad      	beq.n	8009f1a <_printf_i+0x15e>
 8009fbe:	6823      	ldr	r3, [r4, #0]
 8009fc0:	079b      	lsls	r3, r3, #30
 8009fc2:	d413      	bmi.n	8009fec <_printf_i+0x230>
 8009fc4:	68e0      	ldr	r0, [r4, #12]
 8009fc6:	9b03      	ldr	r3, [sp, #12]
 8009fc8:	4298      	cmp	r0, r3
 8009fca:	bfb8      	it	lt
 8009fcc:	4618      	movlt	r0, r3
 8009fce:	e7a6      	b.n	8009f1e <_printf_i+0x162>
 8009fd0:	2301      	movs	r3, #1
 8009fd2:	4632      	mov	r2, r6
 8009fd4:	4649      	mov	r1, r9
 8009fd6:	4640      	mov	r0, r8
 8009fd8:	47d0      	blx	sl
 8009fda:	3001      	adds	r0, #1
 8009fdc:	d09d      	beq.n	8009f1a <_printf_i+0x15e>
 8009fde:	3501      	adds	r5, #1
 8009fe0:	68e3      	ldr	r3, [r4, #12]
 8009fe2:	9903      	ldr	r1, [sp, #12]
 8009fe4:	1a5b      	subs	r3, r3, r1
 8009fe6:	42ab      	cmp	r3, r5
 8009fe8:	dcf2      	bgt.n	8009fd0 <_printf_i+0x214>
 8009fea:	e7eb      	b.n	8009fc4 <_printf_i+0x208>
 8009fec:	2500      	movs	r5, #0
 8009fee:	f104 0619 	add.w	r6, r4, #25
 8009ff2:	e7f5      	b.n	8009fe0 <_printf_i+0x224>
 8009ff4:	0800b1e1 	.word	0x0800b1e1
 8009ff8:	0800b1f2 	.word	0x0800b1f2

08009ffc <__sflush_r>:
 8009ffc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a002:	0716      	lsls	r6, r2, #28
 800a004:	4605      	mov	r5, r0
 800a006:	460c      	mov	r4, r1
 800a008:	d454      	bmi.n	800a0b4 <__sflush_r+0xb8>
 800a00a:	684b      	ldr	r3, [r1, #4]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	dc02      	bgt.n	800a016 <__sflush_r+0x1a>
 800a010:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a012:	2b00      	cmp	r3, #0
 800a014:	dd48      	ble.n	800a0a8 <__sflush_r+0xac>
 800a016:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a018:	2e00      	cmp	r6, #0
 800a01a:	d045      	beq.n	800a0a8 <__sflush_r+0xac>
 800a01c:	2300      	movs	r3, #0
 800a01e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a022:	682f      	ldr	r7, [r5, #0]
 800a024:	6a21      	ldr	r1, [r4, #32]
 800a026:	602b      	str	r3, [r5, #0]
 800a028:	d030      	beq.n	800a08c <__sflush_r+0x90>
 800a02a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a02c:	89a3      	ldrh	r3, [r4, #12]
 800a02e:	0759      	lsls	r1, r3, #29
 800a030:	d505      	bpl.n	800a03e <__sflush_r+0x42>
 800a032:	6863      	ldr	r3, [r4, #4]
 800a034:	1ad2      	subs	r2, r2, r3
 800a036:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a038:	b10b      	cbz	r3, 800a03e <__sflush_r+0x42>
 800a03a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a03c:	1ad2      	subs	r2, r2, r3
 800a03e:	2300      	movs	r3, #0
 800a040:	4628      	mov	r0, r5
 800a042:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a044:	6a21      	ldr	r1, [r4, #32]
 800a046:	47b0      	blx	r6
 800a048:	1c43      	adds	r3, r0, #1
 800a04a:	89a3      	ldrh	r3, [r4, #12]
 800a04c:	d106      	bne.n	800a05c <__sflush_r+0x60>
 800a04e:	6829      	ldr	r1, [r5, #0]
 800a050:	291d      	cmp	r1, #29
 800a052:	d82b      	bhi.n	800a0ac <__sflush_r+0xb0>
 800a054:	4a28      	ldr	r2, [pc, #160]	@ (800a0f8 <__sflush_r+0xfc>)
 800a056:	410a      	asrs	r2, r1
 800a058:	07d6      	lsls	r6, r2, #31
 800a05a:	d427      	bmi.n	800a0ac <__sflush_r+0xb0>
 800a05c:	2200      	movs	r2, #0
 800a05e:	6062      	str	r2, [r4, #4]
 800a060:	6922      	ldr	r2, [r4, #16]
 800a062:	04d9      	lsls	r1, r3, #19
 800a064:	6022      	str	r2, [r4, #0]
 800a066:	d504      	bpl.n	800a072 <__sflush_r+0x76>
 800a068:	1c42      	adds	r2, r0, #1
 800a06a:	d101      	bne.n	800a070 <__sflush_r+0x74>
 800a06c:	682b      	ldr	r3, [r5, #0]
 800a06e:	b903      	cbnz	r3, 800a072 <__sflush_r+0x76>
 800a070:	6560      	str	r0, [r4, #84]	@ 0x54
 800a072:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a074:	602f      	str	r7, [r5, #0]
 800a076:	b1b9      	cbz	r1, 800a0a8 <__sflush_r+0xac>
 800a078:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a07c:	4299      	cmp	r1, r3
 800a07e:	d002      	beq.n	800a086 <__sflush_r+0x8a>
 800a080:	4628      	mov	r0, r5
 800a082:	f7fe fbdd 	bl	8008840 <_free_r>
 800a086:	2300      	movs	r3, #0
 800a088:	6363      	str	r3, [r4, #52]	@ 0x34
 800a08a:	e00d      	b.n	800a0a8 <__sflush_r+0xac>
 800a08c:	2301      	movs	r3, #1
 800a08e:	4628      	mov	r0, r5
 800a090:	47b0      	blx	r6
 800a092:	4602      	mov	r2, r0
 800a094:	1c50      	adds	r0, r2, #1
 800a096:	d1c9      	bne.n	800a02c <__sflush_r+0x30>
 800a098:	682b      	ldr	r3, [r5, #0]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d0c6      	beq.n	800a02c <__sflush_r+0x30>
 800a09e:	2b1d      	cmp	r3, #29
 800a0a0:	d001      	beq.n	800a0a6 <__sflush_r+0xaa>
 800a0a2:	2b16      	cmp	r3, #22
 800a0a4:	d11d      	bne.n	800a0e2 <__sflush_r+0xe6>
 800a0a6:	602f      	str	r7, [r5, #0]
 800a0a8:	2000      	movs	r0, #0
 800a0aa:	e021      	b.n	800a0f0 <__sflush_r+0xf4>
 800a0ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a0b0:	b21b      	sxth	r3, r3
 800a0b2:	e01a      	b.n	800a0ea <__sflush_r+0xee>
 800a0b4:	690f      	ldr	r7, [r1, #16]
 800a0b6:	2f00      	cmp	r7, #0
 800a0b8:	d0f6      	beq.n	800a0a8 <__sflush_r+0xac>
 800a0ba:	0793      	lsls	r3, r2, #30
 800a0bc:	bf18      	it	ne
 800a0be:	2300      	movne	r3, #0
 800a0c0:	680e      	ldr	r6, [r1, #0]
 800a0c2:	bf08      	it	eq
 800a0c4:	694b      	ldreq	r3, [r1, #20]
 800a0c6:	1bf6      	subs	r6, r6, r7
 800a0c8:	600f      	str	r7, [r1, #0]
 800a0ca:	608b      	str	r3, [r1, #8]
 800a0cc:	2e00      	cmp	r6, #0
 800a0ce:	ddeb      	ble.n	800a0a8 <__sflush_r+0xac>
 800a0d0:	4633      	mov	r3, r6
 800a0d2:	463a      	mov	r2, r7
 800a0d4:	4628      	mov	r0, r5
 800a0d6:	6a21      	ldr	r1, [r4, #32]
 800a0d8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800a0dc:	47e0      	blx	ip
 800a0de:	2800      	cmp	r0, #0
 800a0e0:	dc07      	bgt.n	800a0f2 <__sflush_r+0xf6>
 800a0e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a0ea:	f04f 30ff 	mov.w	r0, #4294967295
 800a0ee:	81a3      	strh	r3, [r4, #12]
 800a0f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0f2:	4407      	add	r7, r0
 800a0f4:	1a36      	subs	r6, r6, r0
 800a0f6:	e7e9      	b.n	800a0cc <__sflush_r+0xd0>
 800a0f8:	dfbffffe 	.word	0xdfbffffe

0800a0fc <_fflush_r>:
 800a0fc:	b538      	push	{r3, r4, r5, lr}
 800a0fe:	690b      	ldr	r3, [r1, #16]
 800a100:	4605      	mov	r5, r0
 800a102:	460c      	mov	r4, r1
 800a104:	b913      	cbnz	r3, 800a10c <_fflush_r+0x10>
 800a106:	2500      	movs	r5, #0
 800a108:	4628      	mov	r0, r5
 800a10a:	bd38      	pop	{r3, r4, r5, pc}
 800a10c:	b118      	cbz	r0, 800a116 <_fflush_r+0x1a>
 800a10e:	6a03      	ldr	r3, [r0, #32]
 800a110:	b90b      	cbnz	r3, 800a116 <_fflush_r+0x1a>
 800a112:	f7fe fa09 	bl	8008528 <__sinit>
 800a116:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d0f3      	beq.n	800a106 <_fflush_r+0xa>
 800a11e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a120:	07d0      	lsls	r0, r2, #31
 800a122:	d404      	bmi.n	800a12e <_fflush_r+0x32>
 800a124:	0599      	lsls	r1, r3, #22
 800a126:	d402      	bmi.n	800a12e <_fflush_r+0x32>
 800a128:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a12a:	f7fe fb66 	bl	80087fa <__retarget_lock_acquire_recursive>
 800a12e:	4628      	mov	r0, r5
 800a130:	4621      	mov	r1, r4
 800a132:	f7ff ff63 	bl	8009ffc <__sflush_r>
 800a136:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a138:	4605      	mov	r5, r0
 800a13a:	07da      	lsls	r2, r3, #31
 800a13c:	d4e4      	bmi.n	800a108 <_fflush_r+0xc>
 800a13e:	89a3      	ldrh	r3, [r4, #12]
 800a140:	059b      	lsls	r3, r3, #22
 800a142:	d4e1      	bmi.n	800a108 <_fflush_r+0xc>
 800a144:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a146:	f7fe fb59 	bl	80087fc <__retarget_lock_release_recursive>
 800a14a:	e7dd      	b.n	800a108 <_fflush_r+0xc>

0800a14c <memmove>:
 800a14c:	4288      	cmp	r0, r1
 800a14e:	b510      	push	{r4, lr}
 800a150:	eb01 0402 	add.w	r4, r1, r2
 800a154:	d902      	bls.n	800a15c <memmove+0x10>
 800a156:	4284      	cmp	r4, r0
 800a158:	4623      	mov	r3, r4
 800a15a:	d807      	bhi.n	800a16c <memmove+0x20>
 800a15c:	1e43      	subs	r3, r0, #1
 800a15e:	42a1      	cmp	r1, r4
 800a160:	d008      	beq.n	800a174 <memmove+0x28>
 800a162:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a166:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a16a:	e7f8      	b.n	800a15e <memmove+0x12>
 800a16c:	4601      	mov	r1, r0
 800a16e:	4402      	add	r2, r0
 800a170:	428a      	cmp	r2, r1
 800a172:	d100      	bne.n	800a176 <memmove+0x2a>
 800a174:	bd10      	pop	{r4, pc}
 800a176:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a17a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a17e:	e7f7      	b.n	800a170 <memmove+0x24>

0800a180 <_sbrk_r>:
 800a180:	b538      	push	{r3, r4, r5, lr}
 800a182:	2300      	movs	r3, #0
 800a184:	4d05      	ldr	r5, [pc, #20]	@ (800a19c <_sbrk_r+0x1c>)
 800a186:	4604      	mov	r4, r0
 800a188:	4608      	mov	r0, r1
 800a18a:	602b      	str	r3, [r5, #0]
 800a18c:	f7f9 fa8a 	bl	80036a4 <_sbrk>
 800a190:	1c43      	adds	r3, r0, #1
 800a192:	d102      	bne.n	800a19a <_sbrk_r+0x1a>
 800a194:	682b      	ldr	r3, [r5, #0]
 800a196:	b103      	cbz	r3, 800a19a <_sbrk_r+0x1a>
 800a198:	6023      	str	r3, [r4, #0]
 800a19a:	bd38      	pop	{r3, r4, r5, pc}
 800a19c:	20000aa8 	.word	0x20000aa8

0800a1a0 <memchr>:
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	b510      	push	{r4, lr}
 800a1a4:	b2c9      	uxtb	r1, r1
 800a1a6:	4402      	add	r2, r0
 800a1a8:	4293      	cmp	r3, r2
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	d101      	bne.n	800a1b2 <memchr+0x12>
 800a1ae:	2000      	movs	r0, #0
 800a1b0:	e003      	b.n	800a1ba <memchr+0x1a>
 800a1b2:	7804      	ldrb	r4, [r0, #0]
 800a1b4:	3301      	adds	r3, #1
 800a1b6:	428c      	cmp	r4, r1
 800a1b8:	d1f6      	bne.n	800a1a8 <memchr+0x8>
 800a1ba:	bd10      	pop	{r4, pc}

0800a1bc <__assert_func>:
 800a1bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a1be:	4614      	mov	r4, r2
 800a1c0:	461a      	mov	r2, r3
 800a1c2:	4b09      	ldr	r3, [pc, #36]	@ (800a1e8 <__assert_func+0x2c>)
 800a1c4:	4605      	mov	r5, r0
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	68d8      	ldr	r0, [r3, #12]
 800a1ca:	b954      	cbnz	r4, 800a1e2 <__assert_func+0x26>
 800a1cc:	4b07      	ldr	r3, [pc, #28]	@ (800a1ec <__assert_func+0x30>)
 800a1ce:	461c      	mov	r4, r3
 800a1d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a1d4:	9100      	str	r1, [sp, #0]
 800a1d6:	462b      	mov	r3, r5
 800a1d8:	4905      	ldr	r1, [pc, #20]	@ (800a1f0 <__assert_func+0x34>)
 800a1da:	f000 f857 	bl	800a28c <fiprintf>
 800a1de:	f000 f867 	bl	800a2b0 <abort>
 800a1e2:	4b04      	ldr	r3, [pc, #16]	@ (800a1f4 <__assert_func+0x38>)
 800a1e4:	e7f4      	b.n	800a1d0 <__assert_func+0x14>
 800a1e6:	bf00      	nop
 800a1e8:	2000018c 	.word	0x2000018c
 800a1ec:	0800b23e 	.word	0x0800b23e
 800a1f0:	0800b210 	.word	0x0800b210
 800a1f4:	0800b203 	.word	0x0800b203

0800a1f8 <_calloc_r>:
 800a1f8:	b570      	push	{r4, r5, r6, lr}
 800a1fa:	fba1 5402 	umull	r5, r4, r1, r2
 800a1fe:	b93c      	cbnz	r4, 800a210 <_calloc_r+0x18>
 800a200:	4629      	mov	r1, r5
 800a202:	f7fe fec1 	bl	8008f88 <_malloc_r>
 800a206:	4606      	mov	r6, r0
 800a208:	b928      	cbnz	r0, 800a216 <_calloc_r+0x1e>
 800a20a:	2600      	movs	r6, #0
 800a20c:	4630      	mov	r0, r6
 800a20e:	bd70      	pop	{r4, r5, r6, pc}
 800a210:	220c      	movs	r2, #12
 800a212:	6002      	str	r2, [r0, #0]
 800a214:	e7f9      	b.n	800a20a <_calloc_r+0x12>
 800a216:	462a      	mov	r2, r5
 800a218:	4621      	mov	r1, r4
 800a21a:	f7fe fa37 	bl	800868c <memset>
 800a21e:	e7f5      	b.n	800a20c <_calloc_r+0x14>

0800a220 <malloc>:
 800a220:	4b02      	ldr	r3, [pc, #8]	@ (800a22c <malloc+0xc>)
 800a222:	4601      	mov	r1, r0
 800a224:	6818      	ldr	r0, [r3, #0]
 800a226:	f7fe beaf 	b.w	8008f88 <_malloc_r>
 800a22a:	bf00      	nop
 800a22c:	2000018c 	.word	0x2000018c

0800a230 <_realloc_r>:
 800a230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a234:	4680      	mov	r8, r0
 800a236:	4615      	mov	r5, r2
 800a238:	460c      	mov	r4, r1
 800a23a:	b921      	cbnz	r1, 800a246 <_realloc_r+0x16>
 800a23c:	4611      	mov	r1, r2
 800a23e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a242:	f7fe bea1 	b.w	8008f88 <_malloc_r>
 800a246:	b92a      	cbnz	r2, 800a254 <_realloc_r+0x24>
 800a248:	f7fe fafa 	bl	8008840 <_free_r>
 800a24c:	2400      	movs	r4, #0
 800a24e:	4620      	mov	r0, r4
 800a250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a254:	f000 f833 	bl	800a2be <_malloc_usable_size_r>
 800a258:	4285      	cmp	r5, r0
 800a25a:	4606      	mov	r6, r0
 800a25c:	d802      	bhi.n	800a264 <_realloc_r+0x34>
 800a25e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a262:	d8f4      	bhi.n	800a24e <_realloc_r+0x1e>
 800a264:	4629      	mov	r1, r5
 800a266:	4640      	mov	r0, r8
 800a268:	f7fe fe8e 	bl	8008f88 <_malloc_r>
 800a26c:	4607      	mov	r7, r0
 800a26e:	2800      	cmp	r0, #0
 800a270:	d0ec      	beq.n	800a24c <_realloc_r+0x1c>
 800a272:	42b5      	cmp	r5, r6
 800a274:	462a      	mov	r2, r5
 800a276:	4621      	mov	r1, r4
 800a278:	bf28      	it	cs
 800a27a:	4632      	movcs	r2, r6
 800a27c:	f7fe fac7 	bl	800880e <memcpy>
 800a280:	4621      	mov	r1, r4
 800a282:	4640      	mov	r0, r8
 800a284:	f7fe fadc 	bl	8008840 <_free_r>
 800a288:	463c      	mov	r4, r7
 800a28a:	e7e0      	b.n	800a24e <_realloc_r+0x1e>

0800a28c <fiprintf>:
 800a28c:	b40e      	push	{r1, r2, r3}
 800a28e:	b503      	push	{r0, r1, lr}
 800a290:	4601      	mov	r1, r0
 800a292:	ab03      	add	r3, sp, #12
 800a294:	4805      	ldr	r0, [pc, #20]	@ (800a2ac <fiprintf+0x20>)
 800a296:	f853 2b04 	ldr.w	r2, [r3], #4
 800a29a:	6800      	ldr	r0, [r0, #0]
 800a29c:	9301      	str	r3, [sp, #4]
 800a29e:	f000 f83d 	bl	800a31c <_vfiprintf_r>
 800a2a2:	b002      	add	sp, #8
 800a2a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a2a8:	b003      	add	sp, #12
 800a2aa:	4770      	bx	lr
 800a2ac:	2000018c 	.word	0x2000018c

0800a2b0 <abort>:
 800a2b0:	2006      	movs	r0, #6
 800a2b2:	b508      	push	{r3, lr}
 800a2b4:	f000 fa06 	bl	800a6c4 <raise>
 800a2b8:	2001      	movs	r0, #1
 800a2ba:	f7f9 f97e 	bl	80035ba <_exit>

0800a2be <_malloc_usable_size_r>:
 800a2be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2c2:	1f18      	subs	r0, r3, #4
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	bfbc      	itt	lt
 800a2c8:	580b      	ldrlt	r3, [r1, r0]
 800a2ca:	18c0      	addlt	r0, r0, r3
 800a2cc:	4770      	bx	lr

0800a2ce <__sfputc_r>:
 800a2ce:	6893      	ldr	r3, [r2, #8]
 800a2d0:	b410      	push	{r4}
 800a2d2:	3b01      	subs	r3, #1
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	6093      	str	r3, [r2, #8]
 800a2d8:	da07      	bge.n	800a2ea <__sfputc_r+0x1c>
 800a2da:	6994      	ldr	r4, [r2, #24]
 800a2dc:	42a3      	cmp	r3, r4
 800a2de:	db01      	blt.n	800a2e4 <__sfputc_r+0x16>
 800a2e0:	290a      	cmp	r1, #10
 800a2e2:	d102      	bne.n	800a2ea <__sfputc_r+0x1c>
 800a2e4:	bc10      	pop	{r4}
 800a2e6:	f000 b931 	b.w	800a54c <__swbuf_r>
 800a2ea:	6813      	ldr	r3, [r2, #0]
 800a2ec:	1c58      	adds	r0, r3, #1
 800a2ee:	6010      	str	r0, [r2, #0]
 800a2f0:	7019      	strb	r1, [r3, #0]
 800a2f2:	4608      	mov	r0, r1
 800a2f4:	bc10      	pop	{r4}
 800a2f6:	4770      	bx	lr

0800a2f8 <__sfputs_r>:
 800a2f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2fa:	4606      	mov	r6, r0
 800a2fc:	460f      	mov	r7, r1
 800a2fe:	4614      	mov	r4, r2
 800a300:	18d5      	adds	r5, r2, r3
 800a302:	42ac      	cmp	r4, r5
 800a304:	d101      	bne.n	800a30a <__sfputs_r+0x12>
 800a306:	2000      	movs	r0, #0
 800a308:	e007      	b.n	800a31a <__sfputs_r+0x22>
 800a30a:	463a      	mov	r2, r7
 800a30c:	4630      	mov	r0, r6
 800a30e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a312:	f7ff ffdc 	bl	800a2ce <__sfputc_r>
 800a316:	1c43      	adds	r3, r0, #1
 800a318:	d1f3      	bne.n	800a302 <__sfputs_r+0xa>
 800a31a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a31c <_vfiprintf_r>:
 800a31c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a320:	460d      	mov	r5, r1
 800a322:	4614      	mov	r4, r2
 800a324:	4698      	mov	r8, r3
 800a326:	4606      	mov	r6, r0
 800a328:	b09d      	sub	sp, #116	@ 0x74
 800a32a:	b118      	cbz	r0, 800a334 <_vfiprintf_r+0x18>
 800a32c:	6a03      	ldr	r3, [r0, #32]
 800a32e:	b90b      	cbnz	r3, 800a334 <_vfiprintf_r+0x18>
 800a330:	f7fe f8fa 	bl	8008528 <__sinit>
 800a334:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a336:	07d9      	lsls	r1, r3, #31
 800a338:	d405      	bmi.n	800a346 <_vfiprintf_r+0x2a>
 800a33a:	89ab      	ldrh	r3, [r5, #12]
 800a33c:	059a      	lsls	r2, r3, #22
 800a33e:	d402      	bmi.n	800a346 <_vfiprintf_r+0x2a>
 800a340:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a342:	f7fe fa5a 	bl	80087fa <__retarget_lock_acquire_recursive>
 800a346:	89ab      	ldrh	r3, [r5, #12]
 800a348:	071b      	lsls	r3, r3, #28
 800a34a:	d501      	bpl.n	800a350 <_vfiprintf_r+0x34>
 800a34c:	692b      	ldr	r3, [r5, #16]
 800a34e:	b99b      	cbnz	r3, 800a378 <_vfiprintf_r+0x5c>
 800a350:	4629      	mov	r1, r5
 800a352:	4630      	mov	r0, r6
 800a354:	f000 f938 	bl	800a5c8 <__swsetup_r>
 800a358:	b170      	cbz	r0, 800a378 <_vfiprintf_r+0x5c>
 800a35a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a35c:	07dc      	lsls	r4, r3, #31
 800a35e:	d504      	bpl.n	800a36a <_vfiprintf_r+0x4e>
 800a360:	f04f 30ff 	mov.w	r0, #4294967295
 800a364:	b01d      	add	sp, #116	@ 0x74
 800a366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a36a:	89ab      	ldrh	r3, [r5, #12]
 800a36c:	0598      	lsls	r0, r3, #22
 800a36e:	d4f7      	bmi.n	800a360 <_vfiprintf_r+0x44>
 800a370:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a372:	f7fe fa43 	bl	80087fc <__retarget_lock_release_recursive>
 800a376:	e7f3      	b.n	800a360 <_vfiprintf_r+0x44>
 800a378:	2300      	movs	r3, #0
 800a37a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a37c:	2320      	movs	r3, #32
 800a37e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a382:	2330      	movs	r3, #48	@ 0x30
 800a384:	f04f 0901 	mov.w	r9, #1
 800a388:	f8cd 800c 	str.w	r8, [sp, #12]
 800a38c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800a538 <_vfiprintf_r+0x21c>
 800a390:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a394:	4623      	mov	r3, r4
 800a396:	469a      	mov	sl, r3
 800a398:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a39c:	b10a      	cbz	r2, 800a3a2 <_vfiprintf_r+0x86>
 800a39e:	2a25      	cmp	r2, #37	@ 0x25
 800a3a0:	d1f9      	bne.n	800a396 <_vfiprintf_r+0x7a>
 800a3a2:	ebba 0b04 	subs.w	fp, sl, r4
 800a3a6:	d00b      	beq.n	800a3c0 <_vfiprintf_r+0xa4>
 800a3a8:	465b      	mov	r3, fp
 800a3aa:	4622      	mov	r2, r4
 800a3ac:	4629      	mov	r1, r5
 800a3ae:	4630      	mov	r0, r6
 800a3b0:	f7ff ffa2 	bl	800a2f8 <__sfputs_r>
 800a3b4:	3001      	adds	r0, #1
 800a3b6:	f000 80a7 	beq.w	800a508 <_vfiprintf_r+0x1ec>
 800a3ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a3bc:	445a      	add	r2, fp
 800a3be:	9209      	str	r2, [sp, #36]	@ 0x24
 800a3c0:	f89a 3000 	ldrb.w	r3, [sl]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	f000 809f 	beq.w	800a508 <_vfiprintf_r+0x1ec>
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	f04f 32ff 	mov.w	r2, #4294967295
 800a3d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a3d4:	f10a 0a01 	add.w	sl, sl, #1
 800a3d8:	9304      	str	r3, [sp, #16]
 800a3da:	9307      	str	r3, [sp, #28]
 800a3dc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a3e0:	931a      	str	r3, [sp, #104]	@ 0x68
 800a3e2:	4654      	mov	r4, sl
 800a3e4:	2205      	movs	r2, #5
 800a3e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3ea:	4853      	ldr	r0, [pc, #332]	@ (800a538 <_vfiprintf_r+0x21c>)
 800a3ec:	f7ff fed8 	bl	800a1a0 <memchr>
 800a3f0:	9a04      	ldr	r2, [sp, #16]
 800a3f2:	b9d8      	cbnz	r0, 800a42c <_vfiprintf_r+0x110>
 800a3f4:	06d1      	lsls	r1, r2, #27
 800a3f6:	bf44      	itt	mi
 800a3f8:	2320      	movmi	r3, #32
 800a3fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a3fe:	0713      	lsls	r3, r2, #28
 800a400:	bf44      	itt	mi
 800a402:	232b      	movmi	r3, #43	@ 0x2b
 800a404:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a408:	f89a 3000 	ldrb.w	r3, [sl]
 800a40c:	2b2a      	cmp	r3, #42	@ 0x2a
 800a40e:	d015      	beq.n	800a43c <_vfiprintf_r+0x120>
 800a410:	4654      	mov	r4, sl
 800a412:	2000      	movs	r0, #0
 800a414:	f04f 0c0a 	mov.w	ip, #10
 800a418:	9a07      	ldr	r2, [sp, #28]
 800a41a:	4621      	mov	r1, r4
 800a41c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a420:	3b30      	subs	r3, #48	@ 0x30
 800a422:	2b09      	cmp	r3, #9
 800a424:	d94b      	bls.n	800a4be <_vfiprintf_r+0x1a2>
 800a426:	b1b0      	cbz	r0, 800a456 <_vfiprintf_r+0x13a>
 800a428:	9207      	str	r2, [sp, #28]
 800a42a:	e014      	b.n	800a456 <_vfiprintf_r+0x13a>
 800a42c:	eba0 0308 	sub.w	r3, r0, r8
 800a430:	fa09 f303 	lsl.w	r3, r9, r3
 800a434:	4313      	orrs	r3, r2
 800a436:	46a2      	mov	sl, r4
 800a438:	9304      	str	r3, [sp, #16]
 800a43a:	e7d2      	b.n	800a3e2 <_vfiprintf_r+0xc6>
 800a43c:	9b03      	ldr	r3, [sp, #12]
 800a43e:	1d19      	adds	r1, r3, #4
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	9103      	str	r1, [sp, #12]
 800a444:	2b00      	cmp	r3, #0
 800a446:	bfbb      	ittet	lt
 800a448:	425b      	neglt	r3, r3
 800a44a:	f042 0202 	orrlt.w	r2, r2, #2
 800a44e:	9307      	strge	r3, [sp, #28]
 800a450:	9307      	strlt	r3, [sp, #28]
 800a452:	bfb8      	it	lt
 800a454:	9204      	strlt	r2, [sp, #16]
 800a456:	7823      	ldrb	r3, [r4, #0]
 800a458:	2b2e      	cmp	r3, #46	@ 0x2e
 800a45a:	d10a      	bne.n	800a472 <_vfiprintf_r+0x156>
 800a45c:	7863      	ldrb	r3, [r4, #1]
 800a45e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a460:	d132      	bne.n	800a4c8 <_vfiprintf_r+0x1ac>
 800a462:	9b03      	ldr	r3, [sp, #12]
 800a464:	3402      	adds	r4, #2
 800a466:	1d1a      	adds	r2, r3, #4
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	9203      	str	r2, [sp, #12]
 800a46c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a470:	9305      	str	r3, [sp, #20]
 800a472:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800a53c <_vfiprintf_r+0x220>
 800a476:	2203      	movs	r2, #3
 800a478:	4650      	mov	r0, sl
 800a47a:	7821      	ldrb	r1, [r4, #0]
 800a47c:	f7ff fe90 	bl	800a1a0 <memchr>
 800a480:	b138      	cbz	r0, 800a492 <_vfiprintf_r+0x176>
 800a482:	2240      	movs	r2, #64	@ 0x40
 800a484:	9b04      	ldr	r3, [sp, #16]
 800a486:	eba0 000a 	sub.w	r0, r0, sl
 800a48a:	4082      	lsls	r2, r0
 800a48c:	4313      	orrs	r3, r2
 800a48e:	3401      	adds	r4, #1
 800a490:	9304      	str	r3, [sp, #16]
 800a492:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a496:	2206      	movs	r2, #6
 800a498:	4829      	ldr	r0, [pc, #164]	@ (800a540 <_vfiprintf_r+0x224>)
 800a49a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a49e:	f7ff fe7f 	bl	800a1a0 <memchr>
 800a4a2:	2800      	cmp	r0, #0
 800a4a4:	d03f      	beq.n	800a526 <_vfiprintf_r+0x20a>
 800a4a6:	4b27      	ldr	r3, [pc, #156]	@ (800a544 <_vfiprintf_r+0x228>)
 800a4a8:	bb1b      	cbnz	r3, 800a4f2 <_vfiprintf_r+0x1d6>
 800a4aa:	9b03      	ldr	r3, [sp, #12]
 800a4ac:	3307      	adds	r3, #7
 800a4ae:	f023 0307 	bic.w	r3, r3, #7
 800a4b2:	3308      	adds	r3, #8
 800a4b4:	9303      	str	r3, [sp, #12]
 800a4b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4b8:	443b      	add	r3, r7
 800a4ba:	9309      	str	r3, [sp, #36]	@ 0x24
 800a4bc:	e76a      	b.n	800a394 <_vfiprintf_r+0x78>
 800a4be:	460c      	mov	r4, r1
 800a4c0:	2001      	movs	r0, #1
 800a4c2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a4c6:	e7a8      	b.n	800a41a <_vfiprintf_r+0xfe>
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	f04f 0c0a 	mov.w	ip, #10
 800a4ce:	4619      	mov	r1, r3
 800a4d0:	3401      	adds	r4, #1
 800a4d2:	9305      	str	r3, [sp, #20]
 800a4d4:	4620      	mov	r0, r4
 800a4d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a4da:	3a30      	subs	r2, #48	@ 0x30
 800a4dc:	2a09      	cmp	r2, #9
 800a4de:	d903      	bls.n	800a4e8 <_vfiprintf_r+0x1cc>
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d0c6      	beq.n	800a472 <_vfiprintf_r+0x156>
 800a4e4:	9105      	str	r1, [sp, #20]
 800a4e6:	e7c4      	b.n	800a472 <_vfiprintf_r+0x156>
 800a4e8:	4604      	mov	r4, r0
 800a4ea:	2301      	movs	r3, #1
 800a4ec:	fb0c 2101 	mla	r1, ip, r1, r2
 800a4f0:	e7f0      	b.n	800a4d4 <_vfiprintf_r+0x1b8>
 800a4f2:	ab03      	add	r3, sp, #12
 800a4f4:	9300      	str	r3, [sp, #0]
 800a4f6:	462a      	mov	r2, r5
 800a4f8:	4630      	mov	r0, r6
 800a4fa:	4b13      	ldr	r3, [pc, #76]	@ (800a548 <_vfiprintf_r+0x22c>)
 800a4fc:	a904      	add	r1, sp, #16
 800a4fe:	f3af 8000 	nop.w
 800a502:	4607      	mov	r7, r0
 800a504:	1c78      	adds	r0, r7, #1
 800a506:	d1d6      	bne.n	800a4b6 <_vfiprintf_r+0x19a>
 800a508:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a50a:	07d9      	lsls	r1, r3, #31
 800a50c:	d405      	bmi.n	800a51a <_vfiprintf_r+0x1fe>
 800a50e:	89ab      	ldrh	r3, [r5, #12]
 800a510:	059a      	lsls	r2, r3, #22
 800a512:	d402      	bmi.n	800a51a <_vfiprintf_r+0x1fe>
 800a514:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a516:	f7fe f971 	bl	80087fc <__retarget_lock_release_recursive>
 800a51a:	89ab      	ldrh	r3, [r5, #12]
 800a51c:	065b      	lsls	r3, r3, #25
 800a51e:	f53f af1f 	bmi.w	800a360 <_vfiprintf_r+0x44>
 800a522:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a524:	e71e      	b.n	800a364 <_vfiprintf_r+0x48>
 800a526:	ab03      	add	r3, sp, #12
 800a528:	9300      	str	r3, [sp, #0]
 800a52a:	462a      	mov	r2, r5
 800a52c:	4630      	mov	r0, r6
 800a52e:	4b06      	ldr	r3, [pc, #24]	@ (800a548 <_vfiprintf_r+0x22c>)
 800a530:	a904      	add	r1, sp, #16
 800a532:	f7ff fc43 	bl	8009dbc <_printf_i>
 800a536:	e7e4      	b.n	800a502 <_vfiprintf_r+0x1e6>
 800a538:	0800b1d0 	.word	0x0800b1d0
 800a53c:	0800b1d6 	.word	0x0800b1d6
 800a540:	0800b1da 	.word	0x0800b1da
 800a544:	00000000 	.word	0x00000000
 800a548:	0800a2f9 	.word	0x0800a2f9

0800a54c <__swbuf_r>:
 800a54c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a54e:	460e      	mov	r6, r1
 800a550:	4614      	mov	r4, r2
 800a552:	4605      	mov	r5, r0
 800a554:	b118      	cbz	r0, 800a55e <__swbuf_r+0x12>
 800a556:	6a03      	ldr	r3, [r0, #32]
 800a558:	b90b      	cbnz	r3, 800a55e <__swbuf_r+0x12>
 800a55a:	f7fd ffe5 	bl	8008528 <__sinit>
 800a55e:	69a3      	ldr	r3, [r4, #24]
 800a560:	60a3      	str	r3, [r4, #8]
 800a562:	89a3      	ldrh	r3, [r4, #12]
 800a564:	071a      	lsls	r2, r3, #28
 800a566:	d501      	bpl.n	800a56c <__swbuf_r+0x20>
 800a568:	6923      	ldr	r3, [r4, #16]
 800a56a:	b943      	cbnz	r3, 800a57e <__swbuf_r+0x32>
 800a56c:	4621      	mov	r1, r4
 800a56e:	4628      	mov	r0, r5
 800a570:	f000 f82a 	bl	800a5c8 <__swsetup_r>
 800a574:	b118      	cbz	r0, 800a57e <__swbuf_r+0x32>
 800a576:	f04f 37ff 	mov.w	r7, #4294967295
 800a57a:	4638      	mov	r0, r7
 800a57c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a57e:	6823      	ldr	r3, [r4, #0]
 800a580:	6922      	ldr	r2, [r4, #16]
 800a582:	b2f6      	uxtb	r6, r6
 800a584:	1a98      	subs	r0, r3, r2
 800a586:	6963      	ldr	r3, [r4, #20]
 800a588:	4637      	mov	r7, r6
 800a58a:	4283      	cmp	r3, r0
 800a58c:	dc05      	bgt.n	800a59a <__swbuf_r+0x4e>
 800a58e:	4621      	mov	r1, r4
 800a590:	4628      	mov	r0, r5
 800a592:	f7ff fdb3 	bl	800a0fc <_fflush_r>
 800a596:	2800      	cmp	r0, #0
 800a598:	d1ed      	bne.n	800a576 <__swbuf_r+0x2a>
 800a59a:	68a3      	ldr	r3, [r4, #8]
 800a59c:	3b01      	subs	r3, #1
 800a59e:	60a3      	str	r3, [r4, #8]
 800a5a0:	6823      	ldr	r3, [r4, #0]
 800a5a2:	1c5a      	adds	r2, r3, #1
 800a5a4:	6022      	str	r2, [r4, #0]
 800a5a6:	701e      	strb	r6, [r3, #0]
 800a5a8:	6962      	ldr	r2, [r4, #20]
 800a5aa:	1c43      	adds	r3, r0, #1
 800a5ac:	429a      	cmp	r2, r3
 800a5ae:	d004      	beq.n	800a5ba <__swbuf_r+0x6e>
 800a5b0:	89a3      	ldrh	r3, [r4, #12]
 800a5b2:	07db      	lsls	r3, r3, #31
 800a5b4:	d5e1      	bpl.n	800a57a <__swbuf_r+0x2e>
 800a5b6:	2e0a      	cmp	r6, #10
 800a5b8:	d1df      	bne.n	800a57a <__swbuf_r+0x2e>
 800a5ba:	4621      	mov	r1, r4
 800a5bc:	4628      	mov	r0, r5
 800a5be:	f7ff fd9d 	bl	800a0fc <_fflush_r>
 800a5c2:	2800      	cmp	r0, #0
 800a5c4:	d0d9      	beq.n	800a57a <__swbuf_r+0x2e>
 800a5c6:	e7d6      	b.n	800a576 <__swbuf_r+0x2a>

0800a5c8 <__swsetup_r>:
 800a5c8:	b538      	push	{r3, r4, r5, lr}
 800a5ca:	4b29      	ldr	r3, [pc, #164]	@ (800a670 <__swsetup_r+0xa8>)
 800a5cc:	4605      	mov	r5, r0
 800a5ce:	6818      	ldr	r0, [r3, #0]
 800a5d0:	460c      	mov	r4, r1
 800a5d2:	b118      	cbz	r0, 800a5dc <__swsetup_r+0x14>
 800a5d4:	6a03      	ldr	r3, [r0, #32]
 800a5d6:	b90b      	cbnz	r3, 800a5dc <__swsetup_r+0x14>
 800a5d8:	f7fd ffa6 	bl	8008528 <__sinit>
 800a5dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5e0:	0719      	lsls	r1, r3, #28
 800a5e2:	d422      	bmi.n	800a62a <__swsetup_r+0x62>
 800a5e4:	06da      	lsls	r2, r3, #27
 800a5e6:	d407      	bmi.n	800a5f8 <__swsetup_r+0x30>
 800a5e8:	2209      	movs	r2, #9
 800a5ea:	602a      	str	r2, [r5, #0]
 800a5ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a5f0:	f04f 30ff 	mov.w	r0, #4294967295
 800a5f4:	81a3      	strh	r3, [r4, #12]
 800a5f6:	e033      	b.n	800a660 <__swsetup_r+0x98>
 800a5f8:	0758      	lsls	r0, r3, #29
 800a5fa:	d512      	bpl.n	800a622 <__swsetup_r+0x5a>
 800a5fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a5fe:	b141      	cbz	r1, 800a612 <__swsetup_r+0x4a>
 800a600:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a604:	4299      	cmp	r1, r3
 800a606:	d002      	beq.n	800a60e <__swsetup_r+0x46>
 800a608:	4628      	mov	r0, r5
 800a60a:	f7fe f919 	bl	8008840 <_free_r>
 800a60e:	2300      	movs	r3, #0
 800a610:	6363      	str	r3, [r4, #52]	@ 0x34
 800a612:	89a3      	ldrh	r3, [r4, #12]
 800a614:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a618:	81a3      	strh	r3, [r4, #12]
 800a61a:	2300      	movs	r3, #0
 800a61c:	6063      	str	r3, [r4, #4]
 800a61e:	6923      	ldr	r3, [r4, #16]
 800a620:	6023      	str	r3, [r4, #0]
 800a622:	89a3      	ldrh	r3, [r4, #12]
 800a624:	f043 0308 	orr.w	r3, r3, #8
 800a628:	81a3      	strh	r3, [r4, #12]
 800a62a:	6923      	ldr	r3, [r4, #16]
 800a62c:	b94b      	cbnz	r3, 800a642 <__swsetup_r+0x7a>
 800a62e:	89a3      	ldrh	r3, [r4, #12]
 800a630:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a634:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a638:	d003      	beq.n	800a642 <__swsetup_r+0x7a>
 800a63a:	4621      	mov	r1, r4
 800a63c:	4628      	mov	r0, r5
 800a63e:	f000 f882 	bl	800a746 <__smakebuf_r>
 800a642:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a646:	f013 0201 	ands.w	r2, r3, #1
 800a64a:	d00a      	beq.n	800a662 <__swsetup_r+0x9a>
 800a64c:	2200      	movs	r2, #0
 800a64e:	60a2      	str	r2, [r4, #8]
 800a650:	6962      	ldr	r2, [r4, #20]
 800a652:	4252      	negs	r2, r2
 800a654:	61a2      	str	r2, [r4, #24]
 800a656:	6922      	ldr	r2, [r4, #16]
 800a658:	b942      	cbnz	r2, 800a66c <__swsetup_r+0xa4>
 800a65a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a65e:	d1c5      	bne.n	800a5ec <__swsetup_r+0x24>
 800a660:	bd38      	pop	{r3, r4, r5, pc}
 800a662:	0799      	lsls	r1, r3, #30
 800a664:	bf58      	it	pl
 800a666:	6962      	ldrpl	r2, [r4, #20]
 800a668:	60a2      	str	r2, [r4, #8]
 800a66a:	e7f4      	b.n	800a656 <__swsetup_r+0x8e>
 800a66c:	2000      	movs	r0, #0
 800a66e:	e7f7      	b.n	800a660 <__swsetup_r+0x98>
 800a670:	2000018c 	.word	0x2000018c

0800a674 <_raise_r>:
 800a674:	291f      	cmp	r1, #31
 800a676:	b538      	push	{r3, r4, r5, lr}
 800a678:	4605      	mov	r5, r0
 800a67a:	460c      	mov	r4, r1
 800a67c:	d904      	bls.n	800a688 <_raise_r+0x14>
 800a67e:	2316      	movs	r3, #22
 800a680:	6003      	str	r3, [r0, #0]
 800a682:	f04f 30ff 	mov.w	r0, #4294967295
 800a686:	bd38      	pop	{r3, r4, r5, pc}
 800a688:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a68a:	b112      	cbz	r2, 800a692 <_raise_r+0x1e>
 800a68c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a690:	b94b      	cbnz	r3, 800a6a6 <_raise_r+0x32>
 800a692:	4628      	mov	r0, r5
 800a694:	f000 f830 	bl	800a6f8 <_getpid_r>
 800a698:	4622      	mov	r2, r4
 800a69a:	4601      	mov	r1, r0
 800a69c:	4628      	mov	r0, r5
 800a69e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a6a2:	f000 b817 	b.w	800a6d4 <_kill_r>
 800a6a6:	2b01      	cmp	r3, #1
 800a6a8:	d00a      	beq.n	800a6c0 <_raise_r+0x4c>
 800a6aa:	1c59      	adds	r1, r3, #1
 800a6ac:	d103      	bne.n	800a6b6 <_raise_r+0x42>
 800a6ae:	2316      	movs	r3, #22
 800a6b0:	6003      	str	r3, [r0, #0]
 800a6b2:	2001      	movs	r0, #1
 800a6b4:	e7e7      	b.n	800a686 <_raise_r+0x12>
 800a6b6:	2100      	movs	r1, #0
 800a6b8:	4620      	mov	r0, r4
 800a6ba:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a6be:	4798      	blx	r3
 800a6c0:	2000      	movs	r0, #0
 800a6c2:	e7e0      	b.n	800a686 <_raise_r+0x12>

0800a6c4 <raise>:
 800a6c4:	4b02      	ldr	r3, [pc, #8]	@ (800a6d0 <raise+0xc>)
 800a6c6:	4601      	mov	r1, r0
 800a6c8:	6818      	ldr	r0, [r3, #0]
 800a6ca:	f7ff bfd3 	b.w	800a674 <_raise_r>
 800a6ce:	bf00      	nop
 800a6d0:	2000018c 	.word	0x2000018c

0800a6d4 <_kill_r>:
 800a6d4:	b538      	push	{r3, r4, r5, lr}
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	4d06      	ldr	r5, [pc, #24]	@ (800a6f4 <_kill_r+0x20>)
 800a6da:	4604      	mov	r4, r0
 800a6dc:	4608      	mov	r0, r1
 800a6de:	4611      	mov	r1, r2
 800a6e0:	602b      	str	r3, [r5, #0]
 800a6e2:	f7f8 ff5a 	bl	800359a <_kill>
 800a6e6:	1c43      	adds	r3, r0, #1
 800a6e8:	d102      	bne.n	800a6f0 <_kill_r+0x1c>
 800a6ea:	682b      	ldr	r3, [r5, #0]
 800a6ec:	b103      	cbz	r3, 800a6f0 <_kill_r+0x1c>
 800a6ee:	6023      	str	r3, [r4, #0]
 800a6f0:	bd38      	pop	{r3, r4, r5, pc}
 800a6f2:	bf00      	nop
 800a6f4:	20000aa8 	.word	0x20000aa8

0800a6f8 <_getpid_r>:
 800a6f8:	f7f8 bf48 	b.w	800358c <_getpid>

0800a6fc <__swhatbuf_r>:
 800a6fc:	b570      	push	{r4, r5, r6, lr}
 800a6fe:	460c      	mov	r4, r1
 800a700:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a704:	4615      	mov	r5, r2
 800a706:	2900      	cmp	r1, #0
 800a708:	461e      	mov	r6, r3
 800a70a:	b096      	sub	sp, #88	@ 0x58
 800a70c:	da0c      	bge.n	800a728 <__swhatbuf_r+0x2c>
 800a70e:	89a3      	ldrh	r3, [r4, #12]
 800a710:	2100      	movs	r1, #0
 800a712:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a716:	bf14      	ite	ne
 800a718:	2340      	movne	r3, #64	@ 0x40
 800a71a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a71e:	2000      	movs	r0, #0
 800a720:	6031      	str	r1, [r6, #0]
 800a722:	602b      	str	r3, [r5, #0]
 800a724:	b016      	add	sp, #88	@ 0x58
 800a726:	bd70      	pop	{r4, r5, r6, pc}
 800a728:	466a      	mov	r2, sp
 800a72a:	f000 f849 	bl	800a7c0 <_fstat_r>
 800a72e:	2800      	cmp	r0, #0
 800a730:	dbed      	blt.n	800a70e <__swhatbuf_r+0x12>
 800a732:	9901      	ldr	r1, [sp, #4]
 800a734:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a738:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a73c:	4259      	negs	r1, r3
 800a73e:	4159      	adcs	r1, r3
 800a740:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a744:	e7eb      	b.n	800a71e <__swhatbuf_r+0x22>

0800a746 <__smakebuf_r>:
 800a746:	898b      	ldrh	r3, [r1, #12]
 800a748:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a74a:	079d      	lsls	r5, r3, #30
 800a74c:	4606      	mov	r6, r0
 800a74e:	460c      	mov	r4, r1
 800a750:	d507      	bpl.n	800a762 <__smakebuf_r+0x1c>
 800a752:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a756:	6023      	str	r3, [r4, #0]
 800a758:	6123      	str	r3, [r4, #16]
 800a75a:	2301      	movs	r3, #1
 800a75c:	6163      	str	r3, [r4, #20]
 800a75e:	b003      	add	sp, #12
 800a760:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a762:	466a      	mov	r2, sp
 800a764:	ab01      	add	r3, sp, #4
 800a766:	f7ff ffc9 	bl	800a6fc <__swhatbuf_r>
 800a76a:	9f00      	ldr	r7, [sp, #0]
 800a76c:	4605      	mov	r5, r0
 800a76e:	4639      	mov	r1, r7
 800a770:	4630      	mov	r0, r6
 800a772:	f7fe fc09 	bl	8008f88 <_malloc_r>
 800a776:	b948      	cbnz	r0, 800a78c <__smakebuf_r+0x46>
 800a778:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a77c:	059a      	lsls	r2, r3, #22
 800a77e:	d4ee      	bmi.n	800a75e <__smakebuf_r+0x18>
 800a780:	f023 0303 	bic.w	r3, r3, #3
 800a784:	f043 0302 	orr.w	r3, r3, #2
 800a788:	81a3      	strh	r3, [r4, #12]
 800a78a:	e7e2      	b.n	800a752 <__smakebuf_r+0xc>
 800a78c:	89a3      	ldrh	r3, [r4, #12]
 800a78e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a792:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a796:	81a3      	strh	r3, [r4, #12]
 800a798:	9b01      	ldr	r3, [sp, #4]
 800a79a:	6020      	str	r0, [r4, #0]
 800a79c:	b15b      	cbz	r3, 800a7b6 <__smakebuf_r+0x70>
 800a79e:	4630      	mov	r0, r6
 800a7a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a7a4:	f000 f81e 	bl	800a7e4 <_isatty_r>
 800a7a8:	b128      	cbz	r0, 800a7b6 <__smakebuf_r+0x70>
 800a7aa:	89a3      	ldrh	r3, [r4, #12]
 800a7ac:	f023 0303 	bic.w	r3, r3, #3
 800a7b0:	f043 0301 	orr.w	r3, r3, #1
 800a7b4:	81a3      	strh	r3, [r4, #12]
 800a7b6:	89a3      	ldrh	r3, [r4, #12]
 800a7b8:	431d      	orrs	r5, r3
 800a7ba:	81a5      	strh	r5, [r4, #12]
 800a7bc:	e7cf      	b.n	800a75e <__smakebuf_r+0x18>
	...

0800a7c0 <_fstat_r>:
 800a7c0:	b538      	push	{r3, r4, r5, lr}
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	4d06      	ldr	r5, [pc, #24]	@ (800a7e0 <_fstat_r+0x20>)
 800a7c6:	4604      	mov	r4, r0
 800a7c8:	4608      	mov	r0, r1
 800a7ca:	4611      	mov	r1, r2
 800a7cc:	602b      	str	r3, [r5, #0]
 800a7ce:	f7f8 ff43 	bl	8003658 <_fstat>
 800a7d2:	1c43      	adds	r3, r0, #1
 800a7d4:	d102      	bne.n	800a7dc <_fstat_r+0x1c>
 800a7d6:	682b      	ldr	r3, [r5, #0]
 800a7d8:	b103      	cbz	r3, 800a7dc <_fstat_r+0x1c>
 800a7da:	6023      	str	r3, [r4, #0]
 800a7dc:	bd38      	pop	{r3, r4, r5, pc}
 800a7de:	bf00      	nop
 800a7e0:	20000aa8 	.word	0x20000aa8

0800a7e4 <_isatty_r>:
 800a7e4:	b538      	push	{r3, r4, r5, lr}
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	4d05      	ldr	r5, [pc, #20]	@ (800a800 <_isatty_r+0x1c>)
 800a7ea:	4604      	mov	r4, r0
 800a7ec:	4608      	mov	r0, r1
 800a7ee:	602b      	str	r3, [r5, #0]
 800a7f0:	f7f8 ff41 	bl	8003676 <_isatty>
 800a7f4:	1c43      	adds	r3, r0, #1
 800a7f6:	d102      	bne.n	800a7fe <_isatty_r+0x1a>
 800a7f8:	682b      	ldr	r3, [r5, #0]
 800a7fa:	b103      	cbz	r3, 800a7fe <_isatty_r+0x1a>
 800a7fc:	6023      	str	r3, [r4, #0]
 800a7fe:	bd38      	pop	{r3, r4, r5, pc}
 800a800:	20000aa8 	.word	0x20000aa8

0800a804 <atan2f>:
 800a804:	f000 b88a 	b.w	800a91c <__ieee754_atan2f>

0800a808 <sqrtf>:
 800a808:	b538      	push	{r3, r4, r5, lr}
 800a80a:	4605      	mov	r5, r0
 800a80c:	f000 f816 	bl	800a83c <__ieee754_sqrtf>
 800a810:	4629      	mov	r1, r5
 800a812:	4604      	mov	r4, r0
 800a814:	4628      	mov	r0, r5
 800a816:	f7f6 fc55 	bl	80010c4 <__aeabi_fcmpun>
 800a81a:	b968      	cbnz	r0, 800a838 <sqrtf+0x30>
 800a81c:	2100      	movs	r1, #0
 800a81e:	4628      	mov	r0, r5
 800a820:	f7f6 fc28 	bl	8001074 <__aeabi_fcmplt>
 800a824:	b140      	cbz	r0, 800a838 <sqrtf+0x30>
 800a826:	f7fd ffbd 	bl	80087a4 <__errno>
 800a82a:	2321      	movs	r3, #33	@ 0x21
 800a82c:	2100      	movs	r1, #0
 800a82e:	6003      	str	r3, [r0, #0]
 800a830:	4608      	mov	r0, r1
 800a832:	f7f6 fb35 	bl	8000ea0 <__aeabi_fdiv>
 800a836:	4604      	mov	r4, r0
 800a838:	4620      	mov	r0, r4
 800a83a:	bd38      	pop	{r3, r4, r5, pc}

0800a83c <__ieee754_sqrtf>:
 800a83c:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 800a840:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800a844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a848:	4603      	mov	r3, r0
 800a84a:	4604      	mov	r4, r0
 800a84c:	d30a      	bcc.n	800a864 <__ieee754_sqrtf+0x28>
 800a84e:	4601      	mov	r1, r0
 800a850:	f7f6 fa72 	bl	8000d38 <__aeabi_fmul>
 800a854:	4601      	mov	r1, r0
 800a856:	4620      	mov	r0, r4
 800a858:	f7f6 f966 	bl	8000b28 <__addsf3>
 800a85c:	4604      	mov	r4, r0
 800a85e:	4620      	mov	r0, r4
 800a860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a864:	2a00      	cmp	r2, #0
 800a866:	d0fa      	beq.n	800a85e <__ieee754_sqrtf+0x22>
 800a868:	2800      	cmp	r0, #0
 800a86a:	da06      	bge.n	800a87a <__ieee754_sqrtf+0x3e>
 800a86c:	4601      	mov	r1, r0
 800a86e:	f7f6 f959 	bl	8000b24 <__aeabi_fsub>
 800a872:	4601      	mov	r1, r0
 800a874:	f7f6 fb14 	bl	8000ea0 <__aeabi_fdiv>
 800a878:	e7f0      	b.n	800a85c <__ieee754_sqrtf+0x20>
 800a87a:	f010 42ff 	ands.w	r2, r0, #2139095040	@ 0x7f800000
 800a87e:	ea4f 51e0 	mov.w	r1, r0, asr #23
 800a882:	d03e      	beq.n	800a902 <__ieee754_sqrtf+0xc6>
 800a884:	2400      	movs	r4, #0
 800a886:	f1a1 057f 	sub.w	r5, r1, #127	@ 0x7f
 800a88a:	07ca      	lsls	r2, r1, #31
 800a88c:	f04f 0019 	mov.w	r0, #25
 800a890:	4626      	mov	r6, r4
 800a892:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 800a896:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a89a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a89e:	bf58      	it	pl
 800a8a0:	005b      	lslpl	r3, r3, #1
 800a8a2:	106d      	asrs	r5, r5, #1
 800a8a4:	005b      	lsls	r3, r3, #1
 800a8a6:	1872      	adds	r2, r6, r1
 800a8a8:	429a      	cmp	r2, r3
 800a8aa:	bfcf      	iteee	gt
 800a8ac:	461a      	movgt	r2, r3
 800a8ae:	1856      	addle	r6, r2, r1
 800a8b0:	1864      	addle	r4, r4, r1
 800a8b2:	1a9a      	suble	r2, r3, r2
 800a8b4:	3801      	subs	r0, #1
 800a8b6:	ea4f 0342 	mov.w	r3, r2, lsl #1
 800a8ba:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800a8be:	d1f2      	bne.n	800a8a6 <__ieee754_sqrtf+0x6a>
 800a8c0:	b1ba      	cbz	r2, 800a8f2 <__ieee754_sqrtf+0xb6>
 800a8c2:	4e14      	ldr	r6, [pc, #80]	@ (800a914 <__ieee754_sqrtf+0xd8>)
 800a8c4:	4f14      	ldr	r7, [pc, #80]	@ (800a918 <__ieee754_sqrtf+0xdc>)
 800a8c6:	6830      	ldr	r0, [r6, #0]
 800a8c8:	6839      	ldr	r1, [r7, #0]
 800a8ca:	f7f6 f92b 	bl	8000b24 <__aeabi_fsub>
 800a8ce:	f8d6 8000 	ldr.w	r8, [r6]
 800a8d2:	4601      	mov	r1, r0
 800a8d4:	4640      	mov	r0, r8
 800a8d6:	f7f6 fbd7 	bl	8001088 <__aeabi_fcmple>
 800a8da:	b150      	cbz	r0, 800a8f2 <__ieee754_sqrtf+0xb6>
 800a8dc:	6830      	ldr	r0, [r6, #0]
 800a8de:	6839      	ldr	r1, [r7, #0]
 800a8e0:	f7f6 f922 	bl	8000b28 <__addsf3>
 800a8e4:	6836      	ldr	r6, [r6, #0]
 800a8e6:	4601      	mov	r1, r0
 800a8e8:	4630      	mov	r0, r6
 800a8ea:	f7f6 fbc3 	bl	8001074 <__aeabi_fcmplt>
 800a8ee:	b168      	cbz	r0, 800a90c <__ieee754_sqrtf+0xd0>
 800a8f0:	3402      	adds	r4, #2
 800a8f2:	1064      	asrs	r4, r4, #1
 800a8f4:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 800a8f8:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 800a8fc:	e7af      	b.n	800a85e <__ieee754_sqrtf+0x22>
 800a8fe:	005b      	lsls	r3, r3, #1
 800a900:	3201      	adds	r2, #1
 800a902:	0218      	lsls	r0, r3, #8
 800a904:	d5fb      	bpl.n	800a8fe <__ieee754_sqrtf+0xc2>
 800a906:	3a01      	subs	r2, #1
 800a908:	1a89      	subs	r1, r1, r2
 800a90a:	e7bb      	b.n	800a884 <__ieee754_sqrtf+0x48>
 800a90c:	3401      	adds	r4, #1
 800a90e:	f024 0401 	bic.w	r4, r4, #1
 800a912:	e7ee      	b.n	800a8f2 <__ieee754_sqrtf+0xb6>
 800a914:	200001e0 	.word	0x200001e0
 800a918:	200001dc 	.word	0x200001dc

0800a91c <__ieee754_atan2f>:
 800a91c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a91e:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 800a922:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 800a926:	4603      	mov	r3, r0
 800a928:	d805      	bhi.n	800a936 <__ieee754_atan2f+0x1a>
 800a92a:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 800a92e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800a932:	4607      	mov	r7, r0
 800a934:	d904      	bls.n	800a940 <__ieee754_atan2f+0x24>
 800a936:	4618      	mov	r0, r3
 800a938:	f7f6 f8f6 	bl	8000b28 <__addsf3>
 800a93c:	4603      	mov	r3, r0
 800a93e:	e010      	b.n	800a962 <__ieee754_atan2f+0x46>
 800a940:	f1b1 5f7e 	cmp.w	r1, #1065353216	@ 0x3f800000
 800a944:	d103      	bne.n	800a94e <__ieee754_atan2f+0x32>
 800a946:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a94a:	f000 b86f 	b.w	800aa2c <atanf>
 800a94e:	178c      	asrs	r4, r1, #30
 800a950:	f004 0402 	and.w	r4, r4, #2
 800a954:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800a958:	b92a      	cbnz	r2, 800a966 <__ieee754_atan2f+0x4a>
 800a95a:	2c02      	cmp	r4, #2
 800a95c:	d04b      	beq.n	800a9f6 <__ieee754_atan2f+0xda>
 800a95e:	2c03      	cmp	r4, #3
 800a960:	d04b      	beq.n	800a9fa <__ieee754_atan2f+0xde>
 800a962:	4618      	mov	r0, r3
 800a964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a966:	b91e      	cbnz	r6, 800a970 <__ieee754_atan2f+0x54>
 800a968:	2f00      	cmp	r7, #0
 800a96a:	da4c      	bge.n	800aa06 <__ieee754_atan2f+0xea>
 800a96c:	4b27      	ldr	r3, [pc, #156]	@ (800aa0c <__ieee754_atan2f+0xf0>)
 800a96e:	e7f8      	b.n	800a962 <__ieee754_atan2f+0x46>
 800a970:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 800a974:	d10e      	bne.n	800a994 <__ieee754_atan2f+0x78>
 800a976:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800a97a:	f104 34ff 	add.w	r4, r4, #4294967295
 800a97e:	d105      	bne.n	800a98c <__ieee754_atan2f+0x70>
 800a980:	2c02      	cmp	r4, #2
 800a982:	d83c      	bhi.n	800a9fe <__ieee754_atan2f+0xe2>
 800a984:	4b22      	ldr	r3, [pc, #136]	@ (800aa10 <__ieee754_atan2f+0xf4>)
 800a986:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800a98a:	e7ea      	b.n	800a962 <__ieee754_atan2f+0x46>
 800a98c:	2c02      	cmp	r4, #2
 800a98e:	d838      	bhi.n	800aa02 <__ieee754_atan2f+0xe6>
 800a990:	4b20      	ldr	r3, [pc, #128]	@ (800aa14 <__ieee754_atan2f+0xf8>)
 800a992:	e7f8      	b.n	800a986 <__ieee754_atan2f+0x6a>
 800a994:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800a998:	d0e6      	beq.n	800a968 <__ieee754_atan2f+0x4c>
 800a99a:	1b92      	subs	r2, r2, r6
 800a99c:	f1b2 5ff4 	cmp.w	r2, #511705088	@ 0x1e800000
 800a9a0:	ea4f 50e2 	mov.w	r0, r2, asr #23
 800a9a4:	da17      	bge.n	800a9d6 <__ieee754_atan2f+0xba>
 800a9a6:	2900      	cmp	r1, #0
 800a9a8:	da01      	bge.n	800a9ae <__ieee754_atan2f+0x92>
 800a9aa:	303c      	adds	r0, #60	@ 0x3c
 800a9ac:	db15      	blt.n	800a9da <__ieee754_atan2f+0xbe>
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	f7f6 fa76 	bl	8000ea0 <__aeabi_fdiv>
 800a9b4:	f000 f946 	bl	800ac44 <fabsf>
 800a9b8:	f000 f838 	bl	800aa2c <atanf>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	2c01      	cmp	r4, #1
 800a9c0:	d00d      	beq.n	800a9de <__ieee754_atan2f+0xc2>
 800a9c2:	2c02      	cmp	r4, #2
 800a9c4:	d00e      	beq.n	800a9e4 <__ieee754_atan2f+0xc8>
 800a9c6:	2c00      	cmp	r4, #0
 800a9c8:	d0cb      	beq.n	800a962 <__ieee754_atan2f+0x46>
 800a9ca:	4913      	ldr	r1, [pc, #76]	@ (800aa18 <__ieee754_atan2f+0xfc>)
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	f7f6 f8ab 	bl	8000b28 <__addsf3>
 800a9d2:	4912      	ldr	r1, [pc, #72]	@ (800aa1c <__ieee754_atan2f+0x100>)
 800a9d4:	e00c      	b.n	800a9f0 <__ieee754_atan2f+0xd4>
 800a9d6:	4b12      	ldr	r3, [pc, #72]	@ (800aa20 <__ieee754_atan2f+0x104>)
 800a9d8:	e7f1      	b.n	800a9be <__ieee754_atan2f+0xa2>
 800a9da:	2300      	movs	r3, #0
 800a9dc:	e7ef      	b.n	800a9be <__ieee754_atan2f+0xa2>
 800a9de:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800a9e2:	e7be      	b.n	800a962 <__ieee754_atan2f+0x46>
 800a9e4:	490c      	ldr	r1, [pc, #48]	@ (800aa18 <__ieee754_atan2f+0xfc>)
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	f7f6 f89e 	bl	8000b28 <__addsf3>
 800a9ec:	4601      	mov	r1, r0
 800a9ee:	480b      	ldr	r0, [pc, #44]	@ (800aa1c <__ieee754_atan2f+0x100>)
 800a9f0:	f7f6 f898 	bl	8000b24 <__aeabi_fsub>
 800a9f4:	e7a2      	b.n	800a93c <__ieee754_atan2f+0x20>
 800a9f6:	4b09      	ldr	r3, [pc, #36]	@ (800aa1c <__ieee754_atan2f+0x100>)
 800a9f8:	e7b3      	b.n	800a962 <__ieee754_atan2f+0x46>
 800a9fa:	4b0a      	ldr	r3, [pc, #40]	@ (800aa24 <__ieee754_atan2f+0x108>)
 800a9fc:	e7b1      	b.n	800a962 <__ieee754_atan2f+0x46>
 800a9fe:	4b0a      	ldr	r3, [pc, #40]	@ (800aa28 <__ieee754_atan2f+0x10c>)
 800aa00:	e7af      	b.n	800a962 <__ieee754_atan2f+0x46>
 800aa02:	2300      	movs	r3, #0
 800aa04:	e7ad      	b.n	800a962 <__ieee754_atan2f+0x46>
 800aa06:	4b06      	ldr	r3, [pc, #24]	@ (800aa20 <__ieee754_atan2f+0x104>)
 800aa08:	e7ab      	b.n	800a962 <__ieee754_atan2f+0x46>
 800aa0a:	bf00      	nop
 800aa0c:	bfc90fdb 	.word	0xbfc90fdb
 800aa10:	0800b24c 	.word	0x0800b24c
 800aa14:	0800b240 	.word	0x0800b240
 800aa18:	33bbbd2e 	.word	0x33bbbd2e
 800aa1c:	40490fdb 	.word	0x40490fdb
 800aa20:	3fc90fdb 	.word	0x3fc90fdb
 800aa24:	c0490fdb 	.word	0xc0490fdb
 800aa28:	3f490fdb 	.word	0x3f490fdb

0800aa2c <atanf>:
 800aa2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa30:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 800aa34:	f1b5 4fa1 	cmp.w	r5, #1350565888	@ 0x50800000
 800aa38:	4604      	mov	r4, r0
 800aa3a:	4680      	mov	r8, r0
 800aa3c:	d30e      	bcc.n	800aa5c <atanf+0x30>
 800aa3e:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800aa42:	d904      	bls.n	800aa4e <atanf+0x22>
 800aa44:	4601      	mov	r1, r0
 800aa46:	f7f6 f86f 	bl	8000b28 <__addsf3>
 800aa4a:	4604      	mov	r4, r0
 800aa4c:	e003      	b.n	800aa56 <atanf+0x2a>
 800aa4e:	2800      	cmp	r0, #0
 800aa50:	f340 80ce 	ble.w	800abf0 <atanf+0x1c4>
 800aa54:	4c67      	ldr	r4, [pc, #412]	@ (800abf4 <atanf+0x1c8>)
 800aa56:	4620      	mov	r0, r4
 800aa58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa5c:	4b66      	ldr	r3, [pc, #408]	@ (800abf8 <atanf+0x1cc>)
 800aa5e:	429d      	cmp	r5, r3
 800aa60:	d80e      	bhi.n	800aa80 <atanf+0x54>
 800aa62:	f1b5 5f44 	cmp.w	r5, #822083584	@ 0x31000000
 800aa66:	d208      	bcs.n	800aa7a <atanf+0x4e>
 800aa68:	4964      	ldr	r1, [pc, #400]	@ (800abfc <atanf+0x1d0>)
 800aa6a:	f7f6 f85d 	bl	8000b28 <__addsf3>
 800aa6e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800aa72:	f7f6 fb1d 	bl	80010b0 <__aeabi_fcmpgt>
 800aa76:	2800      	cmp	r0, #0
 800aa78:	d1ed      	bne.n	800aa56 <atanf+0x2a>
 800aa7a:	f04f 36ff 	mov.w	r6, #4294967295
 800aa7e:	e01c      	b.n	800aaba <atanf+0x8e>
 800aa80:	f000 f8e0 	bl	800ac44 <fabsf>
 800aa84:	4b5e      	ldr	r3, [pc, #376]	@ (800ac00 <atanf+0x1d4>)
 800aa86:	4604      	mov	r4, r0
 800aa88:	429d      	cmp	r5, r3
 800aa8a:	d87c      	bhi.n	800ab86 <atanf+0x15a>
 800aa8c:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800aa90:	429d      	cmp	r5, r3
 800aa92:	d867      	bhi.n	800ab64 <atanf+0x138>
 800aa94:	4601      	mov	r1, r0
 800aa96:	f7f6 f847 	bl	8000b28 <__addsf3>
 800aa9a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800aa9e:	f7f6 f841 	bl	8000b24 <__aeabi_fsub>
 800aaa2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800aaa6:	4605      	mov	r5, r0
 800aaa8:	4620      	mov	r0, r4
 800aaaa:	f7f6 f83d 	bl	8000b28 <__addsf3>
 800aaae:	4601      	mov	r1, r0
 800aab0:	4628      	mov	r0, r5
 800aab2:	f7f6 f9f5 	bl	8000ea0 <__aeabi_fdiv>
 800aab6:	2600      	movs	r6, #0
 800aab8:	4604      	mov	r4, r0
 800aaba:	4621      	mov	r1, r4
 800aabc:	4620      	mov	r0, r4
 800aabe:	f7f6 f93b 	bl	8000d38 <__aeabi_fmul>
 800aac2:	4601      	mov	r1, r0
 800aac4:	4607      	mov	r7, r0
 800aac6:	f7f6 f937 	bl	8000d38 <__aeabi_fmul>
 800aaca:	4605      	mov	r5, r0
 800aacc:	494d      	ldr	r1, [pc, #308]	@ (800ac04 <atanf+0x1d8>)
 800aace:	f7f6 f933 	bl	8000d38 <__aeabi_fmul>
 800aad2:	494d      	ldr	r1, [pc, #308]	@ (800ac08 <atanf+0x1dc>)
 800aad4:	f7f6 f828 	bl	8000b28 <__addsf3>
 800aad8:	4629      	mov	r1, r5
 800aada:	f7f6 f92d 	bl	8000d38 <__aeabi_fmul>
 800aade:	494b      	ldr	r1, [pc, #300]	@ (800ac0c <atanf+0x1e0>)
 800aae0:	f7f6 f822 	bl	8000b28 <__addsf3>
 800aae4:	4629      	mov	r1, r5
 800aae6:	f7f6 f927 	bl	8000d38 <__aeabi_fmul>
 800aaea:	4949      	ldr	r1, [pc, #292]	@ (800ac10 <atanf+0x1e4>)
 800aaec:	f7f6 f81c 	bl	8000b28 <__addsf3>
 800aaf0:	4629      	mov	r1, r5
 800aaf2:	f7f6 f921 	bl	8000d38 <__aeabi_fmul>
 800aaf6:	4947      	ldr	r1, [pc, #284]	@ (800ac14 <atanf+0x1e8>)
 800aaf8:	f7f6 f816 	bl	8000b28 <__addsf3>
 800aafc:	4629      	mov	r1, r5
 800aafe:	f7f6 f91b 	bl	8000d38 <__aeabi_fmul>
 800ab02:	4945      	ldr	r1, [pc, #276]	@ (800ac18 <atanf+0x1ec>)
 800ab04:	f7f6 f810 	bl	8000b28 <__addsf3>
 800ab08:	4639      	mov	r1, r7
 800ab0a:	f7f6 f915 	bl	8000d38 <__aeabi_fmul>
 800ab0e:	4943      	ldr	r1, [pc, #268]	@ (800ac1c <atanf+0x1f0>)
 800ab10:	4607      	mov	r7, r0
 800ab12:	4628      	mov	r0, r5
 800ab14:	f7f6 f910 	bl	8000d38 <__aeabi_fmul>
 800ab18:	4941      	ldr	r1, [pc, #260]	@ (800ac20 <atanf+0x1f4>)
 800ab1a:	f7f6 f803 	bl	8000b24 <__aeabi_fsub>
 800ab1e:	4629      	mov	r1, r5
 800ab20:	f7f6 f90a 	bl	8000d38 <__aeabi_fmul>
 800ab24:	493f      	ldr	r1, [pc, #252]	@ (800ac24 <atanf+0x1f8>)
 800ab26:	f7f5 fffd 	bl	8000b24 <__aeabi_fsub>
 800ab2a:	4629      	mov	r1, r5
 800ab2c:	f7f6 f904 	bl	8000d38 <__aeabi_fmul>
 800ab30:	493d      	ldr	r1, [pc, #244]	@ (800ac28 <atanf+0x1fc>)
 800ab32:	f7f5 fff7 	bl	8000b24 <__aeabi_fsub>
 800ab36:	4629      	mov	r1, r5
 800ab38:	f7f6 f8fe 	bl	8000d38 <__aeabi_fmul>
 800ab3c:	493b      	ldr	r1, [pc, #236]	@ (800ac2c <atanf+0x200>)
 800ab3e:	f7f5 fff1 	bl	8000b24 <__aeabi_fsub>
 800ab42:	4629      	mov	r1, r5
 800ab44:	f7f6 f8f8 	bl	8000d38 <__aeabi_fmul>
 800ab48:	4601      	mov	r1, r0
 800ab4a:	4638      	mov	r0, r7
 800ab4c:	f7f5 ffec 	bl	8000b28 <__addsf3>
 800ab50:	4621      	mov	r1, r4
 800ab52:	f7f6 f8f1 	bl	8000d38 <__aeabi_fmul>
 800ab56:	1c73      	adds	r3, r6, #1
 800ab58:	4601      	mov	r1, r0
 800ab5a:	d133      	bne.n	800abc4 <atanf+0x198>
 800ab5c:	4620      	mov	r0, r4
 800ab5e:	f7f5 ffe1 	bl	8000b24 <__aeabi_fsub>
 800ab62:	e772      	b.n	800aa4a <atanf+0x1e>
 800ab64:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800ab68:	f7f5 ffdc 	bl	8000b24 <__aeabi_fsub>
 800ab6c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800ab70:	4605      	mov	r5, r0
 800ab72:	4620      	mov	r0, r4
 800ab74:	f7f5 ffd8 	bl	8000b28 <__addsf3>
 800ab78:	4601      	mov	r1, r0
 800ab7a:	4628      	mov	r0, r5
 800ab7c:	f7f6 f990 	bl	8000ea0 <__aeabi_fdiv>
 800ab80:	2601      	movs	r6, #1
 800ab82:	4604      	mov	r4, r0
 800ab84:	e799      	b.n	800aaba <atanf+0x8e>
 800ab86:	4b2a      	ldr	r3, [pc, #168]	@ (800ac30 <atanf+0x204>)
 800ab88:	429d      	cmp	r5, r3
 800ab8a:	d814      	bhi.n	800abb6 <atanf+0x18a>
 800ab8c:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 800ab90:	f7f5 ffc8 	bl	8000b24 <__aeabi_fsub>
 800ab94:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 800ab98:	4605      	mov	r5, r0
 800ab9a:	4620      	mov	r0, r4
 800ab9c:	f7f6 f8cc 	bl	8000d38 <__aeabi_fmul>
 800aba0:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800aba4:	f7f5 ffc0 	bl	8000b28 <__addsf3>
 800aba8:	4601      	mov	r1, r0
 800abaa:	4628      	mov	r0, r5
 800abac:	f7f6 f978 	bl	8000ea0 <__aeabi_fdiv>
 800abb0:	2602      	movs	r6, #2
 800abb2:	4604      	mov	r4, r0
 800abb4:	e781      	b.n	800aaba <atanf+0x8e>
 800abb6:	4601      	mov	r1, r0
 800abb8:	481e      	ldr	r0, [pc, #120]	@ (800ac34 <atanf+0x208>)
 800abba:	f7f6 f971 	bl	8000ea0 <__aeabi_fdiv>
 800abbe:	2603      	movs	r6, #3
 800abc0:	4604      	mov	r4, r0
 800abc2:	e77a      	b.n	800aaba <atanf+0x8e>
 800abc4:	4b1c      	ldr	r3, [pc, #112]	@ (800ac38 <atanf+0x20c>)
 800abc6:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800abca:	f7f5 ffab 	bl	8000b24 <__aeabi_fsub>
 800abce:	4621      	mov	r1, r4
 800abd0:	f7f5 ffa8 	bl	8000b24 <__aeabi_fsub>
 800abd4:	4b19      	ldr	r3, [pc, #100]	@ (800ac3c <atanf+0x210>)
 800abd6:	4601      	mov	r1, r0
 800abd8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800abdc:	f7f5 ffa2 	bl	8000b24 <__aeabi_fsub>
 800abe0:	f1b8 0f00 	cmp.w	r8, #0
 800abe4:	4604      	mov	r4, r0
 800abe6:	f6bf af36 	bge.w	800aa56 <atanf+0x2a>
 800abea:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 800abee:	e732      	b.n	800aa56 <atanf+0x2a>
 800abf0:	4c13      	ldr	r4, [pc, #76]	@ (800ac40 <atanf+0x214>)
 800abf2:	e730      	b.n	800aa56 <atanf+0x2a>
 800abf4:	3fc90fdb 	.word	0x3fc90fdb
 800abf8:	3edfffff 	.word	0x3edfffff
 800abfc:	7149f2ca 	.word	0x7149f2ca
 800ac00:	3f97ffff 	.word	0x3f97ffff
 800ac04:	3c8569d7 	.word	0x3c8569d7
 800ac08:	3d4bda59 	.word	0x3d4bda59
 800ac0c:	3d886b35 	.word	0x3d886b35
 800ac10:	3dba2e6e 	.word	0x3dba2e6e
 800ac14:	3e124925 	.word	0x3e124925
 800ac18:	3eaaaaab 	.word	0x3eaaaaab
 800ac1c:	bd15a221 	.word	0xbd15a221
 800ac20:	3d6ef16b 	.word	0x3d6ef16b
 800ac24:	3d9d8795 	.word	0x3d9d8795
 800ac28:	3de38e38 	.word	0x3de38e38
 800ac2c:	3e4ccccd 	.word	0x3e4ccccd
 800ac30:	401bffff 	.word	0x401bffff
 800ac34:	bf800000 	.word	0xbf800000
 800ac38:	0800b258 	.word	0x0800b258
 800ac3c:	0800b268 	.word	0x0800b268
 800ac40:	bfc90fdb 	.word	0xbfc90fdb

0800ac44 <fabsf>:
 800ac44:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800ac48:	4770      	bx	lr
	...

0800ac4c <_init>:
 800ac4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac4e:	bf00      	nop
 800ac50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac52:	bc08      	pop	{r3}
 800ac54:	469e      	mov	lr, r3
 800ac56:	4770      	bx	lr

0800ac58 <_fini>:
 800ac58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac5a:	bf00      	nop
 800ac5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac5e:	bc08      	pop	{r3}
 800ac60:	469e      	mov	lr, r3
 800ac62:	4770      	bx	lr
