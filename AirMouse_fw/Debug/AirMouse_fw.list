
AirMouse_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c11c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000698  0800c230  0800c230  0000d230  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c8c8  0800c8c8  0000e1e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c8c8  0800c8c8  0000d8c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c8d0  0800c8d0  0000e1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c8d0  0800c8d0  0000d8d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c8d4  0800c8d4  0000d8d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800c8d8  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008d0  200001e8  0800cac0  0000e1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ab8  0800cac0  0000eab8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012dcc  00000000  00000000  0000e211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003384  00000000  00000000  00020fdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001288  00000000  00000000  00024368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e69  00000000  00000000  000255f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000533f  00000000  00000000  00026459  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017a91  00000000  00000000  0002b798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091f4e  00000000  00000000  00043229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d5177  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064a8  00000000  00000000  000d51bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  000db664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c214 	.word	0x0800c214

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	0800c214 	.word	0x0800c214

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	@ 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_frsub>:
 8000b7c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b80:	e002      	b.n	8000b88 <__addsf3>
 8000b82:	bf00      	nop

08000b84 <__aeabi_fsub>:
 8000b84:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b88 <__addsf3>:
 8000b88:	0042      	lsls	r2, r0, #1
 8000b8a:	bf1f      	itttt	ne
 8000b8c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b90:	ea92 0f03 	teqne	r2, r3
 8000b94:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b98:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b9c:	d06a      	beq.n	8000c74 <__addsf3+0xec>
 8000b9e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ba2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ba6:	bfc1      	itttt	gt
 8000ba8:	18d2      	addgt	r2, r2, r3
 8000baa:	4041      	eorgt	r1, r0
 8000bac:	4048      	eorgt	r0, r1
 8000bae:	4041      	eorgt	r1, r0
 8000bb0:	bfb8      	it	lt
 8000bb2:	425b      	neglt	r3, r3
 8000bb4:	2b19      	cmp	r3, #25
 8000bb6:	bf88      	it	hi
 8000bb8:	4770      	bxhi	lr
 8000bba:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000bbe:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bc2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bc6:	bf18      	it	ne
 8000bc8:	4240      	negne	r0, r0
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bd2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bd6:	bf18      	it	ne
 8000bd8:	4249      	negne	r1, r1
 8000bda:	ea92 0f03 	teq	r2, r3
 8000bde:	d03f      	beq.n	8000c60 <__addsf3+0xd8>
 8000be0:	f1a2 0201 	sub.w	r2, r2, #1
 8000be4:	fa41 fc03 	asr.w	ip, r1, r3
 8000be8:	eb10 000c 	adds.w	r0, r0, ip
 8000bec:	f1c3 0320 	rsb	r3, r3, #32
 8000bf0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bf4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bf8:	d502      	bpl.n	8000c00 <__addsf3+0x78>
 8000bfa:	4249      	negs	r1, r1
 8000bfc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c00:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c04:	d313      	bcc.n	8000c2e <__addsf3+0xa6>
 8000c06:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c0a:	d306      	bcc.n	8000c1a <__addsf3+0x92>
 8000c0c:	0840      	lsrs	r0, r0, #1
 8000c0e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c12:	f102 0201 	add.w	r2, r2, #1
 8000c16:	2afe      	cmp	r2, #254	@ 0xfe
 8000c18:	d251      	bcs.n	8000cbe <__addsf3+0x136>
 8000c1a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c22:	bf08      	it	eq
 8000c24:	f020 0001 	biceq.w	r0, r0, #1
 8000c28:	ea40 0003 	orr.w	r0, r0, r3
 8000c2c:	4770      	bx	lr
 8000c2e:	0049      	lsls	r1, r1, #1
 8000c30:	eb40 0000 	adc.w	r0, r0, r0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	bf28      	it	cs
 8000c38:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c3c:	d2ed      	bcs.n	8000c1a <__addsf3+0x92>
 8000c3e:	fab0 fc80 	clz	ip, r0
 8000c42:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c46:	ebb2 020c 	subs.w	r2, r2, ip
 8000c4a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c4e:	bfaa      	itet	ge
 8000c50:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c54:	4252      	neglt	r2, r2
 8000c56:	4318      	orrge	r0, r3
 8000c58:	bfbc      	itt	lt
 8000c5a:	40d0      	lsrlt	r0, r2
 8000c5c:	4318      	orrlt	r0, r3
 8000c5e:	4770      	bx	lr
 8000c60:	f092 0f00 	teq	r2, #0
 8000c64:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c68:	bf06      	itte	eq
 8000c6a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c6e:	3201      	addeq	r2, #1
 8000c70:	3b01      	subne	r3, #1
 8000c72:	e7b5      	b.n	8000be0 <__addsf3+0x58>
 8000c74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c7c:	bf18      	it	ne
 8000c7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c82:	d021      	beq.n	8000cc8 <__addsf3+0x140>
 8000c84:	ea92 0f03 	teq	r2, r3
 8000c88:	d004      	beq.n	8000c94 <__addsf3+0x10c>
 8000c8a:	f092 0f00 	teq	r2, #0
 8000c8e:	bf08      	it	eq
 8000c90:	4608      	moveq	r0, r1
 8000c92:	4770      	bx	lr
 8000c94:	ea90 0f01 	teq	r0, r1
 8000c98:	bf1c      	itt	ne
 8000c9a:	2000      	movne	r0, #0
 8000c9c:	4770      	bxne	lr
 8000c9e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000ca2:	d104      	bne.n	8000cae <__addsf3+0x126>
 8000ca4:	0040      	lsls	r0, r0, #1
 8000ca6:	bf28      	it	cs
 8000ca8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000cac:	4770      	bx	lr
 8000cae:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cb2:	bf3c      	itt	cc
 8000cb4:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000cb8:	4770      	bxcc	lr
 8000cba:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cbe:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cc2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc6:	4770      	bx	lr
 8000cc8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ccc:	bf16      	itet	ne
 8000cce:	4608      	movne	r0, r1
 8000cd0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cd4:	4601      	movne	r1, r0
 8000cd6:	0242      	lsls	r2, r0, #9
 8000cd8:	bf06      	itte	eq
 8000cda:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cde:	ea90 0f01 	teqeq	r0, r1
 8000ce2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_ui2f>:
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e004      	b.n	8000cf8 <__aeabi_i2f+0x8>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_i2f>:
 8000cf0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cf4:	bf48      	it	mi
 8000cf6:	4240      	negmi	r0, r0
 8000cf8:	ea5f 0c00 	movs.w	ip, r0
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d04:	4601      	mov	r1, r0
 8000d06:	f04f 0000 	mov.w	r0, #0
 8000d0a:	e01c      	b.n	8000d46 <__aeabi_l2f+0x2a>

08000d0c <__aeabi_ul2f>:
 8000d0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e00a      	b.n	8000d30 <__aeabi_l2f+0x14>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_l2f>:
 8000d1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d28:	d502      	bpl.n	8000d30 <__aeabi_l2f+0x14>
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d30:	ea5f 0c01 	movs.w	ip, r1
 8000d34:	bf02      	ittt	eq
 8000d36:	4684      	moveq	ip, r0
 8000d38:	4601      	moveq	r1, r0
 8000d3a:	2000      	moveq	r0, #0
 8000d3c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d40:	bf08      	it	eq
 8000d42:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d46:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d4a:	fabc f28c 	clz	r2, ip
 8000d4e:	3a08      	subs	r2, #8
 8000d50:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d54:	db10      	blt.n	8000d78 <__aeabi_l2f+0x5c>
 8000d56:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d60:	f1c2 0220 	rsb	r2, r2, #32
 8000d64:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d68:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6c:	eb43 0002 	adc.w	r0, r3, r2
 8000d70:	bf08      	it	eq
 8000d72:	f020 0001 	biceq.w	r0, r0, #1
 8000d76:	4770      	bx	lr
 8000d78:	f102 0220 	add.w	r2, r2, #32
 8000d7c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d80:	f1c2 0220 	rsb	r2, r2, #32
 8000d84:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d88:	fa21 f202 	lsr.w	r2, r1, r2
 8000d8c:	eb43 0002 	adc.w	r0, r3, r2
 8000d90:	bf08      	it	eq
 8000d92:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_fmul>:
 8000d98:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000da0:	bf1e      	ittt	ne
 8000da2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000da6:	ea92 0f0c 	teqne	r2, ip
 8000daa:	ea93 0f0c 	teqne	r3, ip
 8000dae:	d06f      	beq.n	8000e90 <__aeabi_fmul+0xf8>
 8000db0:	441a      	add	r2, r3
 8000db2:	ea80 0c01 	eor.w	ip, r0, r1
 8000db6:	0240      	lsls	r0, r0, #9
 8000db8:	bf18      	it	ne
 8000dba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dbe:	d01e      	beq.n	8000dfe <__aeabi_fmul+0x66>
 8000dc0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000dc4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dc8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dcc:	fba0 3101 	umull	r3, r1, r0, r1
 8000dd0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dd4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dd8:	bf3e      	ittt	cc
 8000dda:	0049      	lslcc	r1, r1, #1
 8000ddc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000de0:	005b      	lslcc	r3, r3, #1
 8000de2:	ea40 0001 	orr.w	r0, r0, r1
 8000de6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dea:	2afd      	cmp	r2, #253	@ 0xfd
 8000dec:	d81d      	bhi.n	8000e2a <__aeabi_fmul+0x92>
 8000dee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000df2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df6:	bf08      	it	eq
 8000df8:	f020 0001 	biceq.w	r0, r0, #1
 8000dfc:	4770      	bx	lr
 8000dfe:	f090 0f00 	teq	r0, #0
 8000e02:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000e06:	bf08      	it	eq
 8000e08:	0249      	lsleq	r1, r1, #9
 8000e0a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e0e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e12:	3a7f      	subs	r2, #127	@ 0x7f
 8000e14:	bfc2      	ittt	gt
 8000e16:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e1a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e1e:	4770      	bxgt	lr
 8000e20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	3a01      	subs	r2, #1
 8000e2a:	dc5d      	bgt.n	8000ee8 <__aeabi_fmul+0x150>
 8000e2c:	f112 0f19 	cmn.w	r2, #25
 8000e30:	bfdc      	itt	le
 8000e32:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e36:	4770      	bxle	lr
 8000e38:	f1c2 0200 	rsb	r2, r2, #0
 8000e3c:	0041      	lsls	r1, r0, #1
 8000e3e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e42:	f1c2 0220 	rsb	r2, r2, #32
 8000e46:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e4a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e4e:	f140 0000 	adc.w	r0, r0, #0
 8000e52:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e56:	bf08      	it	eq
 8000e58:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5c:	4770      	bx	lr
 8000e5e:	f092 0f00 	teq	r2, #0
 8000e62:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e66:	bf02      	ittt	eq
 8000e68:	0040      	lsleq	r0, r0, #1
 8000e6a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e6e:	3a01      	subeq	r2, #1
 8000e70:	d0f9      	beq.n	8000e66 <__aeabi_fmul+0xce>
 8000e72:	ea40 000c 	orr.w	r0, r0, ip
 8000e76:	f093 0f00 	teq	r3, #0
 8000e7a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e7e:	bf02      	ittt	eq
 8000e80:	0049      	lsleq	r1, r1, #1
 8000e82:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e86:	3b01      	subeq	r3, #1
 8000e88:	d0f9      	beq.n	8000e7e <__aeabi_fmul+0xe6>
 8000e8a:	ea41 010c 	orr.w	r1, r1, ip
 8000e8e:	e78f      	b.n	8000db0 <__aeabi_fmul+0x18>
 8000e90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e94:	ea92 0f0c 	teq	r2, ip
 8000e98:	bf18      	it	ne
 8000e9a:	ea93 0f0c 	teqne	r3, ip
 8000e9e:	d00a      	beq.n	8000eb6 <__aeabi_fmul+0x11e>
 8000ea0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ea4:	bf18      	it	ne
 8000ea6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000eaa:	d1d8      	bne.n	8000e5e <__aeabi_fmul+0xc6>
 8000eac:	ea80 0001 	eor.w	r0, r0, r1
 8000eb0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000eb4:	4770      	bx	lr
 8000eb6:	f090 0f00 	teq	r0, #0
 8000eba:	bf17      	itett	ne
 8000ebc:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000ec0:	4608      	moveq	r0, r1
 8000ec2:	f091 0f00 	teqne	r1, #0
 8000ec6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eca:	d014      	beq.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ecc:	ea92 0f0c 	teq	r2, ip
 8000ed0:	d101      	bne.n	8000ed6 <__aeabi_fmul+0x13e>
 8000ed2:	0242      	lsls	r2, r0, #9
 8000ed4:	d10f      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ed6:	ea93 0f0c 	teq	r3, ip
 8000eda:	d103      	bne.n	8000ee4 <__aeabi_fmul+0x14c>
 8000edc:	024b      	lsls	r3, r1, #9
 8000ede:	bf18      	it	ne
 8000ee0:	4608      	movne	r0, r1
 8000ee2:	d108      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ee4:	ea80 0001 	eor.w	r0, r0, r1
 8000ee8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000eec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ef0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ef4:	4770      	bx	lr
 8000ef6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000efa:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000efe:	4770      	bx	lr

08000f00 <__aeabi_fdiv>:
 8000f00:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000f04:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f08:	bf1e      	ittt	ne
 8000f0a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f0e:	ea92 0f0c 	teqne	r2, ip
 8000f12:	ea93 0f0c 	teqne	r3, ip
 8000f16:	d069      	beq.n	8000fec <__aeabi_fdiv+0xec>
 8000f18:	eba2 0203 	sub.w	r2, r2, r3
 8000f1c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f20:	0249      	lsls	r1, r1, #9
 8000f22:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f26:	d037      	beq.n	8000f98 <__aeabi_fdiv+0x98>
 8000f28:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f2c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f30:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f34:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f38:	428b      	cmp	r3, r1
 8000f3a:	bf38      	it	cc
 8000f3c:	005b      	lslcc	r3, r3, #1
 8000f3e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f42:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f46:	428b      	cmp	r3, r1
 8000f48:	bf24      	itt	cs
 8000f4a:	1a5b      	subcs	r3, r3, r1
 8000f4c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f50:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f5a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f5e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f62:	bf24      	itt	cs
 8000f64:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f68:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f6c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f76:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f7a:	011b      	lsls	r3, r3, #4
 8000f7c:	bf18      	it	ne
 8000f7e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f82:	d1e0      	bne.n	8000f46 <__aeabi_fdiv+0x46>
 8000f84:	2afd      	cmp	r2, #253	@ 0xfd
 8000f86:	f63f af50 	bhi.w	8000e2a <__aeabi_fmul+0x92>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f90:	bf08      	it	eq
 8000f92:	f020 0001 	biceq.w	r0, r0, #1
 8000f96:	4770      	bx	lr
 8000f98:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f9c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fa0:	327f      	adds	r2, #127	@ 0x7f
 8000fa2:	bfc2      	ittt	gt
 8000fa4:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000fa8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fac:	4770      	bxgt	lr
 8000fae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000fb2:	f04f 0300 	mov.w	r3, #0
 8000fb6:	3a01      	subs	r2, #1
 8000fb8:	e737      	b.n	8000e2a <__aeabi_fmul+0x92>
 8000fba:	f092 0f00 	teq	r2, #0
 8000fbe:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fc2:	bf02      	ittt	eq
 8000fc4:	0040      	lsleq	r0, r0, #1
 8000fc6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fca:	3a01      	subeq	r2, #1
 8000fcc:	d0f9      	beq.n	8000fc2 <__aeabi_fdiv+0xc2>
 8000fce:	ea40 000c 	orr.w	r0, r0, ip
 8000fd2:	f093 0f00 	teq	r3, #0
 8000fd6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fda:	bf02      	ittt	eq
 8000fdc:	0049      	lsleq	r1, r1, #1
 8000fde:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fe2:	3b01      	subeq	r3, #1
 8000fe4:	d0f9      	beq.n	8000fda <__aeabi_fdiv+0xda>
 8000fe6:	ea41 010c 	orr.w	r1, r1, ip
 8000fea:	e795      	b.n	8000f18 <__aeabi_fdiv+0x18>
 8000fec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ff0:	ea92 0f0c 	teq	r2, ip
 8000ff4:	d108      	bne.n	8001008 <__aeabi_fdiv+0x108>
 8000ff6:	0242      	lsls	r2, r0, #9
 8000ff8:	f47f af7d 	bne.w	8000ef6 <__aeabi_fmul+0x15e>
 8000ffc:	ea93 0f0c 	teq	r3, ip
 8001000:	f47f af70 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 8001004:	4608      	mov	r0, r1
 8001006:	e776      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001008:	ea93 0f0c 	teq	r3, ip
 800100c:	d104      	bne.n	8001018 <__aeabi_fdiv+0x118>
 800100e:	024b      	lsls	r3, r1, #9
 8001010:	f43f af4c 	beq.w	8000eac <__aeabi_fmul+0x114>
 8001014:	4608      	mov	r0, r1
 8001016:	e76e      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001018:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800101c:	bf18      	it	ne
 800101e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8001022:	d1ca      	bne.n	8000fba <__aeabi_fdiv+0xba>
 8001024:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001028:	f47f af5c 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 800102c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8001030:	f47f af3c 	bne.w	8000eac <__aeabi_fmul+0x114>
 8001034:	e75f      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001036:	bf00      	nop

08001038 <__gesf2>:
 8001038:	f04f 3cff 	mov.w	ip, #4294967295
 800103c:	e006      	b.n	800104c <__cmpsf2+0x4>
 800103e:	bf00      	nop

08001040 <__lesf2>:
 8001040:	f04f 0c01 	mov.w	ip, #1
 8001044:	e002      	b.n	800104c <__cmpsf2+0x4>
 8001046:	bf00      	nop

08001048 <__cmpsf2>:
 8001048:	f04f 0c01 	mov.w	ip, #1
 800104c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001050:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001054:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001058:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800105c:	bf18      	it	ne
 800105e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001062:	d011      	beq.n	8001088 <__cmpsf2+0x40>
 8001064:	b001      	add	sp, #4
 8001066:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800106a:	bf18      	it	ne
 800106c:	ea90 0f01 	teqne	r0, r1
 8001070:	bf58      	it	pl
 8001072:	ebb2 0003 	subspl.w	r0, r2, r3
 8001076:	bf88      	it	hi
 8001078:	17c8      	asrhi	r0, r1, #31
 800107a:	bf38      	it	cc
 800107c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001080:	bf18      	it	ne
 8001082:	f040 0001 	orrne.w	r0, r0, #1
 8001086:	4770      	bx	lr
 8001088:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800108c:	d102      	bne.n	8001094 <__cmpsf2+0x4c>
 800108e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001092:	d105      	bne.n	80010a0 <__cmpsf2+0x58>
 8001094:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001098:	d1e4      	bne.n	8001064 <__cmpsf2+0x1c>
 800109a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800109e:	d0e1      	beq.n	8001064 <__cmpsf2+0x1c>
 80010a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop

080010a8 <__aeabi_cfrcmple>:
 80010a8:	4684      	mov	ip, r0
 80010aa:	4608      	mov	r0, r1
 80010ac:	4661      	mov	r1, ip
 80010ae:	e7ff      	b.n	80010b0 <__aeabi_cfcmpeq>

080010b0 <__aeabi_cfcmpeq>:
 80010b0:	b50f      	push	{r0, r1, r2, r3, lr}
 80010b2:	f7ff ffc9 	bl	8001048 <__cmpsf2>
 80010b6:	2800      	cmp	r0, #0
 80010b8:	bf48      	it	mi
 80010ba:	f110 0f00 	cmnmi.w	r0, #0
 80010be:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010c0 <__aeabi_fcmpeq>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff fff4 	bl	80010b0 <__aeabi_cfcmpeq>
 80010c8:	bf0c      	ite	eq
 80010ca:	2001      	moveq	r0, #1
 80010cc:	2000      	movne	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmplt>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffea 	bl	80010b0 <__aeabi_cfcmpeq>
 80010dc:	bf34      	ite	cc
 80010de:	2001      	movcc	r0, #1
 80010e0:	2000      	movcs	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmple>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffe0 	bl	80010b0 <__aeabi_cfcmpeq>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpge>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffd2 	bl	80010a8 <__aeabi_cfrcmple>
 8001104:	bf94      	ite	ls
 8001106:	2001      	movls	r0, #1
 8001108:	2000      	movhi	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpgt>:
 8001110:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001114:	f7ff ffc8 	bl	80010a8 <__aeabi_cfrcmple>
 8001118:	bf34      	ite	cc
 800111a:	2001      	movcc	r0, #1
 800111c:	2000      	movcs	r0, #0
 800111e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001122:	bf00      	nop

08001124 <__aeabi_fcmpun>:
 8001124:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001128:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800112c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001130:	d102      	bne.n	8001138 <__aeabi_fcmpun+0x14>
 8001132:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001136:	d108      	bne.n	800114a <__aeabi_fcmpun+0x26>
 8001138:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800113c:	d102      	bne.n	8001144 <__aeabi_fcmpun+0x20>
 800113e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001142:	d102      	bne.n	800114a <__aeabi_fcmpun+0x26>
 8001144:	f04f 0000 	mov.w	r0, #0
 8001148:	4770      	bx	lr
 800114a:	f04f 0001 	mov.w	r0, #1
 800114e:	4770      	bx	lr

08001150 <__aeabi_f2iz>:
 8001150:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001154:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001158:	d30f      	bcc.n	800117a <__aeabi_f2iz+0x2a>
 800115a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800115e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001162:	d90d      	bls.n	8001180 <__aeabi_f2iz+0x30>
 8001164:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001168:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800116c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001170:	fa23 f002 	lsr.w	r0, r3, r2
 8001174:	bf18      	it	ne
 8001176:	4240      	negne	r0, r0
 8001178:	4770      	bx	lr
 800117a:	f04f 0000 	mov.w	r0, #0
 800117e:	4770      	bx	lr
 8001180:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001184:	d101      	bne.n	800118a <__aeabi_f2iz+0x3a>
 8001186:	0242      	lsls	r2, r0, #9
 8001188:	d105      	bne.n	8001196 <__aeabi_f2iz+0x46>
 800118a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800118e:	bf08      	it	eq
 8001190:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001194:	4770      	bx	lr
 8001196:	f04f 0000 	mov.w	r0, #0
 800119a:	4770      	bx	lr

0800119c <__aeabi_d2lz>:
 800119c:	b538      	push	{r3, r4, r5, lr}
 800119e:	2200      	movs	r2, #0
 80011a0:	2300      	movs	r3, #0
 80011a2:	4604      	mov	r4, r0
 80011a4:	460d      	mov	r5, r1
 80011a6:	f7ff fc13 	bl	80009d0 <__aeabi_dcmplt>
 80011aa:	b928      	cbnz	r0, 80011b8 <__aeabi_d2lz+0x1c>
 80011ac:	4620      	mov	r0, r4
 80011ae:	4629      	mov	r1, r5
 80011b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80011b4:	f000 b80a 	b.w	80011cc <__aeabi_d2ulz>
 80011b8:	4620      	mov	r0, r4
 80011ba:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 80011be:	f000 f805 	bl	80011cc <__aeabi_d2ulz>
 80011c2:	4240      	negs	r0, r0
 80011c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011c8:	bd38      	pop	{r3, r4, r5, pc}
 80011ca:	bf00      	nop

080011cc <__aeabi_d2ulz>:
 80011cc:	b5d0      	push	{r4, r6, r7, lr}
 80011ce:	2200      	movs	r2, #0
 80011d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001200 <__aeabi_d2ulz+0x34>)
 80011d2:	4606      	mov	r6, r0
 80011d4:	460f      	mov	r7, r1
 80011d6:	f7ff f989 	bl	80004ec <__aeabi_dmul>
 80011da:	f7ff fc5f 	bl	8000a9c <__aeabi_d2uiz>
 80011de:	4604      	mov	r4, r0
 80011e0:	f7ff f90a 	bl	80003f8 <__aeabi_ui2d>
 80011e4:	2200      	movs	r2, #0
 80011e6:	4b07      	ldr	r3, [pc, #28]	@ (8001204 <__aeabi_d2ulz+0x38>)
 80011e8:	f7ff f980 	bl	80004ec <__aeabi_dmul>
 80011ec:	4602      	mov	r2, r0
 80011ee:	460b      	mov	r3, r1
 80011f0:	4630      	mov	r0, r6
 80011f2:	4639      	mov	r1, r7
 80011f4:	f7fe ffc2 	bl	800017c <__aeabi_dsub>
 80011f8:	f7ff fc50 	bl	8000a9c <__aeabi_d2uiz>
 80011fc:	4621      	mov	r1, r4
 80011fe:	bdd0      	pop	{r4, r6, r7, pc}
 8001200:	3df00000 	.word	0x3df00000
 8001204:	41f00000 	.word	0x41f00000

08001208 <buttonInit>:
static uint32_t lastDebounceTime_LEFT = 0;
static uint32_t lastDebounceTime_RIGHT = 0;


void buttonInit()
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  // Registering 'button' command in CLI.
  cliAdd("button", cliButton);
 800120c:	4902      	ldr	r1, [pc, #8]	@ (8001218 <buttonInit+0x10>)
 800120e:	4803      	ldr	r0, [pc, #12]	@ (800121c <buttonInit+0x14>)
 8001210:	f000 ff0a 	bl	8002028 <cliAdd>
}
 8001214:	bf00      	nop
 8001216:	bd80      	pop	{r7, pc}
 8001218:	0800130d 	.word	0x0800130d
 800121c:	0800c230 	.word	0x0800c230

08001220 <isButtonPressed>:

uint8_t isButtonPressed(GPIO_TypeDef *port, uint32_t pin)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
  if (port == LEFT_BTN_GPIO_Port && pin == LEFT_BTN_Pin)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a12      	ldr	r2, [pc, #72]	@ (8001278 <isButtonPressed+0x58>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d10b      	bne.n	800124a <isButtonPressed+0x2a>
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	2b10      	cmp	r3, #16
 8001236:	d108      	bne.n	800124a <isButtonPressed+0x2a>
  {
    if (isLeftButtonPressed)
 8001238:	4b10      	ldr	r3, [pc, #64]	@ (800127c <isButtonPressed+0x5c>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d014      	beq.n	800126a <isButtonPressed+0x4a>
    {
      isLeftButtonPressed = 0;
 8001240:	4b0e      	ldr	r3, [pc, #56]	@ (800127c <isButtonPressed+0x5c>)
 8001242:	2200      	movs	r2, #0
 8001244:	701a      	strb	r2, [r3, #0]
      return 1;
 8001246:	2301      	movs	r3, #1
 8001248:	e010      	b.n	800126c <isButtonPressed+0x4c>
    }
  }
  else if (port == RIGHT_BTN_GPIO_Port && pin == RIGHT_BTN_Pin)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a0a      	ldr	r2, [pc, #40]	@ (8001278 <isButtonPressed+0x58>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d10b      	bne.n	800126a <isButtonPressed+0x4a>
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	2b08      	cmp	r3, #8
 8001256:	d108      	bne.n	800126a <isButtonPressed+0x4a>
  {
    if (isRightButtonPressed)
 8001258:	4b09      	ldr	r3, [pc, #36]	@ (8001280 <isButtonPressed+0x60>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d004      	beq.n	800126a <isButtonPressed+0x4a>
    {
      isRightButtonPressed = 0;
 8001260:	4b07      	ldr	r3, [pc, #28]	@ (8001280 <isButtonPressed+0x60>)
 8001262:	2200      	movs	r2, #0
 8001264:	701a      	strb	r2, [r3, #0]
      return 1;
 8001266:	2301      	movs	r3, #1
 8001268:	e000      	b.n	800126c <isButtonPressed+0x4c>
    }
  }

  return 0;
 800126a:	2300      	movs	r3, #0
}
 800126c:	4618      	mov	r0, r3
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	bc80      	pop	{r7}
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	40010c00 	.word	0x40010c00
 800127c:	20000204 	.word	0x20000204
 8001280:	20000205 	.word	0x20000205

08001284 <buttonRead>:

void buttonRead(GPIO_TypeDef *port, uint32_t pin)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
  uint32_t currentTime = HAL_GetTick();
 800128e:	f002 fbc5 	bl	8003a1c <HAL_GetTick>
 8001292:	60f8      	str	r0, [r7, #12]

  if (pin == LEFT_BTN_Pin)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	2b10      	cmp	r3, #16
 8001298:	d129      	bne.n	80012ee <buttonRead+0x6a>
  {
    // left button debouncing.
    if ((currentTime - lastDebounceTime_LEFT) > DEBOUNCE_DELAY)
 800129a:	4b17      	ldr	r3, [pc, #92]	@ (80012f8 <buttonRead+0x74>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	68fa      	ldr	r2, [r7, #12]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	2b32      	cmp	r3, #50	@ 0x32
 80012a4:	d90d      	bls.n	80012c2 <buttonRead+0x3e>
    {
      lastDebounceTime_LEFT = currentTime;
 80012a6:	4a14      	ldr	r2, [pc, #80]	@ (80012f8 <buttonRead+0x74>)
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	6013      	str	r3, [r2, #0]

      if (HAL_GPIO_ReadPin(LEFT_BTN_GPIO_Port, LEFT_BTN_Pin) == GPIO_PIN_SET)
 80012ac:	2110      	movs	r1, #16
 80012ae:	4813      	ldr	r0, [pc, #76]	@ (80012fc <buttonRead+0x78>)
 80012b0:	f003 f916 	bl	80044e0 <HAL_GPIO_ReadPin>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d119      	bne.n	80012ee <buttonRead+0x6a>
      {
        isLeftButtonPressed = 1;
 80012ba:	4b11      	ldr	r3, [pc, #68]	@ (8001300 <buttonRead+0x7c>)
 80012bc:	2201      	movs	r2, #1
 80012be:	701a      	strb	r2, [r3, #0]
          isRightButtonPressed = 1;
        }
      }
    }
  }
}
 80012c0:	e015      	b.n	80012ee <buttonRead+0x6a>
    else if (pin == RIGHT_BTN_Pin)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	2b08      	cmp	r3, #8
 80012c6:	d112      	bne.n	80012ee <buttonRead+0x6a>
      if ((currentTime - lastDebounceTime_RIGHT) > DEBOUNCE_DELAY)
 80012c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001304 <buttonRead+0x80>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	68fa      	ldr	r2, [r7, #12]
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	2b32      	cmp	r3, #50	@ 0x32
 80012d2:	d90c      	bls.n	80012ee <buttonRead+0x6a>
        lastDebounceTime_RIGHT = currentTime;
 80012d4:	4a0b      	ldr	r2, [pc, #44]	@ (8001304 <buttonRead+0x80>)
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	6013      	str	r3, [r2, #0]
        if (HAL_GPIO_ReadPin(RIGHT_BTN_GPIO_Port, RIGHT_BTN_Pin) == GPIO_PIN_SET)
 80012da:	2108      	movs	r1, #8
 80012dc:	4807      	ldr	r0, [pc, #28]	@ (80012fc <buttonRead+0x78>)
 80012de:	f003 f8ff 	bl	80044e0 <HAL_GPIO_ReadPin>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d102      	bne.n	80012ee <buttonRead+0x6a>
          isRightButtonPressed = 1;
 80012e8:	4b07      	ldr	r3, [pc, #28]	@ (8001308 <buttonRead+0x84>)
 80012ea:	2201      	movs	r2, #1
 80012ec:	701a      	strb	r2, [r3, #0]
}
 80012ee:	bf00      	nop
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000208 	.word	0x20000208
 80012fc:	40010c00 	.word	0x40010c00
 8001300:	20000204 	.word	0x20000204
 8001304:	2000020c 	.word	0x2000020c
 8001308:	20000205 	.word	0x20000205

0800130c <cliButton>:

void cliButton(cli_args_t *args)
{
 800130c:	b590      	push	{r4, r7, lr}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8001314:	2300      	movs	r3, #0
 8001316:	73fb      	strb	r3, [r7, #15]

  if(args->argc == 1 && args->isStr(0, "show"))
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	881b      	ldrh	r3, [r3, #0]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d12e      	bne.n	800137e <cliButton+0x72>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	695b      	ldr	r3, [r3, #20]
 8001324:	491c      	ldr	r1, [pc, #112]	@ (8001398 <cliButton+0x8c>)
 8001326:	2000      	movs	r0, #0
 8001328:	4798      	blx	r3
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d026      	beq.n	800137e <cliButton+0x72>
  {
    uint8_t str = 0;
 8001330:	2300      	movs	r3, #0
 8001332:	73bb      	strb	r3, [r7, #14]

    while(cliKeepLoop())
 8001334:	e01a      	b.n	800136c <cliButton+0x60>
    {
      str = uartRead(CH_USART1);
 8001336:	2001      	movs	r0, #1
 8001338:	f001 f824 	bl	8002384 <uartRead>
 800133c:	4603      	mov	r3, r0
 800133e:	73bb      	strb	r3, [r7, #14]

      if(str == 0x0D) break;
 8001340:	7bbb      	ldrb	r3, [r7, #14]
 8001342:	2b0d      	cmp	r3, #13
 8001344:	d018      	beq.n	8001378 <cliButton+0x6c>

      cliPrintf("%d %d\n", HAL_GPIO_ReadPin(LEFT_BTN_GPIO_Port, LEFT_BTN_Pin), HAL_GPIO_ReadPin(RIGHT_BTN_GPIO_Port, RIGHT_BTN_Pin));
 8001346:	2110      	movs	r1, #16
 8001348:	4814      	ldr	r0, [pc, #80]	@ (800139c <cliButton+0x90>)
 800134a:	f003 f8c9 	bl	80044e0 <HAL_GPIO_ReadPin>
 800134e:	4603      	mov	r3, r0
 8001350:	461c      	mov	r4, r3
 8001352:	2108      	movs	r1, #8
 8001354:	4811      	ldr	r0, [pc, #68]	@ (800139c <cliButton+0x90>)
 8001356:	f003 f8c3 	bl	80044e0 <HAL_GPIO_ReadPin>
 800135a:	4603      	mov	r3, r0
 800135c:	461a      	mov	r2, r3
 800135e:	4621      	mov	r1, r4
 8001360:	480f      	ldr	r0, [pc, #60]	@ (80013a0 <cliButton+0x94>)
 8001362:	f000 fd5f 	bl	8001e24 <cliPrintf>

      HAL_Delay(50);
 8001366:	2032      	movs	r0, #50	@ 0x32
 8001368:	f002 fb62 	bl	8003a30 <HAL_Delay>
    while(cliKeepLoop())
 800136c:	f000 fe4e 	bl	800200c <cliKeepLoop>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d1df      	bne.n	8001336 <cliButton+0x2a>
 8001376:	e000      	b.n	800137a <cliButton+0x6e>
      if(str == 0x0D) break;
 8001378:	bf00      	nop
    }

    ret = true;
 800137a:	2301      	movs	r3, #1
 800137c:	73fb      	strb	r3, [r7, #15]
  }

  if(ret != true)
 800137e:	7bfb      	ldrb	r3, [r7, #15]
 8001380:	f083 0301 	eor.w	r3, r3, #1
 8001384:	b2db      	uxtb	r3, r3
 8001386:	2b00      	cmp	r3, #0
 8001388:	d002      	beq.n	8001390 <cliButton+0x84>
  {
    cliPrintf("button show\n");
 800138a:	4806      	ldr	r0, [pc, #24]	@ (80013a4 <cliButton+0x98>)
 800138c:	f000 fd4a 	bl	8001e24 <cliPrintf>
  }
}
 8001390:	bf00      	nop
 8001392:	3714      	adds	r7, #20
 8001394:	46bd      	mov	sp, r7
 8001396:	bd90      	pop	{r4, r7, pc}
 8001398:	0800c238 	.word	0x0800c238
 800139c:	40010c00 	.word	0x40010c00
 80013a0:	0800c240 	.word	0x0800c240
 80013a4:	0800c248 	.word	0x0800c248

080013a8 <cliInit>:
void cliShowList(cli_args_t *args);
void cliMemoryDump(cli_args_t *args);


bool cliInit(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  cli_node.is_open = false;
 80013ac:	4b1b      	ldr	r3, [pc, #108]	@ (800141c <cliInit+0x74>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	721a      	strb	r2, [r3, #8]
  cli_node.is_log  = false;
 80013b2:	4b1a      	ldr	r3, [pc, #104]	@ (800141c <cliInit+0x74>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	725a      	strb	r2, [r3, #9]
  cli_node.state   = CLI_RX_IDLE;
 80013b8:	4b18      	ldr	r3, [pc, #96]	@ (800141c <cliInit+0x74>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	741a      	strb	r2, [r3, #16]

  cli_node.hist_line_i     = 0;
 80013be:	4b17      	ldr	r3, [pc, #92]	@ (800141c <cliInit+0x74>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
  cli_node.hist_line_last  = 0;
 80013c6:	4b15      	ldr	r3, [pc, #84]	@ (800141c <cliInit+0x74>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
  cli_node.hist_line_count = 0;
 80013ce:	4b13      	ldr	r3, [pc, #76]	@ (800141c <cliInit+0x74>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	f883 2197 	strb.w	r2, [r3, #407]	@ 0x197
  cli_node.hist_line_new   = false;
 80013d6:	4b11      	ldr	r3, [pc, #68]	@ (800141c <cliInit+0x74>)
 80013d8:	2200      	movs	r2, #0
 80013da:	f883 2194 	strb.w	r2, [r3, #404]	@ 0x194

  cli_node.cmd_args.getData  = cliArgsGetData;
 80013de:	4b0f      	ldr	r3, [pc, #60]	@ (800141c <cliInit+0x74>)
 80013e0:	4a0f      	ldr	r2, [pc, #60]	@ (8001420 <cliInit+0x78>)
 80013e2:	f8c3 2434 	str.w	r2, [r3, #1076]	@ 0x434
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 80013e6:	4b0d      	ldr	r3, [pc, #52]	@ (800141c <cliInit+0x74>)
 80013e8:	4a0e      	ldr	r2, [pc, #56]	@ (8001424 <cliInit+0x7c>)
 80013ea:	f8c3 2438 	str.w	r2, [r3, #1080]	@ 0x438
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 80013ee:	4b0b      	ldr	r3, [pc, #44]	@ (800141c <cliInit+0x74>)
 80013f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001428 <cliInit+0x80>)
 80013f2:	f8c3 243c 	str.w	r2, [r3, #1084]	@ 0x43c
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 80013f6:	4b09      	ldr	r3, [pc, #36]	@ (800141c <cliInit+0x74>)
 80013f8:	4a0c      	ldr	r2, [pc, #48]	@ (800142c <cliInit+0x84>)
 80013fa:	f8c3 2440 	str.w	r2, [r3, #1088]	@ 0x440

  cliLineClean(&cli_node);
 80013fe:	4807      	ldr	r0, [pc, #28]	@ (800141c <cliInit+0x74>)
 8001400:	f000 fb86 	bl	8001b10 <cliLineClean>

  cliAdd("help", cliShowList);
 8001404:	490a      	ldr	r1, [pc, #40]	@ (8001430 <cliInit+0x88>)
 8001406:	480b      	ldr	r0, [pc, #44]	@ (8001434 <cliInit+0x8c>)
 8001408:	f000 fe0e 	bl	8002028 <cliAdd>
  cliAdd("md"  , cliMemoryDump);
 800140c:	490a      	ldr	r1, [pc, #40]	@ (8001438 <cliInit+0x90>)
 800140e:	480b      	ldr	r0, [pc, #44]	@ (800143c <cliInit+0x94>)
 8001410:	f000 fe0a 	bl	8002028 <cliAdd>

  return true;
 8001414:	2301      	movs	r3, #1
}
 8001416:	4618      	mov	r0, r3
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20000210 	.word	0x20000210
 8001420:	08001ed5 	.word	0x08001ed5
 8001424:	08001f25 	.word	0x08001f25
 8001428:	08001f75 	.word	0x08001f75
 800142c:	08001fb9 	.word	0x08001fb9
 8001430:	080020bd 	.word	0x080020bd
 8001434:	0800c258 	.word	0x0800c258
 8001438:	0800212d 	.word	0x0800212d
 800143c:	0800c260 	.word	0x0800c260

08001440 <cliOpen>:

bool cliOpen(uint8_t ch, uint32_t baud)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	6039      	str	r1, [r7, #0]
 800144a:	71fb      	strb	r3, [r7, #7]
  cli_node.ch = ch;
 800144c:	4a1c      	ldr	r2, [pc, #112]	@ (80014c0 <cliOpen+0x80>)
 800144e:	79fb      	ldrb	r3, [r7, #7]
 8001450:	7013      	strb	r3, [r2, #0]
  cli_node.baud = baud;
 8001452:	4a1b      	ldr	r2, [pc, #108]	@ (80014c0 <cliOpen+0x80>)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	6053      	str	r3, [r2, #4]

  qbuffer.in = 0;
 8001458:	4b1a      	ldr	r3, [pc, #104]	@ (80014c4 <cliOpen+0x84>)
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
  qbuffer.out = 0;
 800145e:	4b19      	ldr	r3, [pc, #100]	@ (80014c4 <cliOpen+0x84>)
 8001460:	2200      	movs	r2, #0
 8001462:	605a      	str	r2, [r3, #4]
  qbuffer.len = 256;
 8001464:	4b17      	ldr	r3, [pc, #92]	@ (80014c4 <cliOpen+0x84>)
 8001466:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800146a:	609a      	str	r2, [r3, #8]
  qbuffer.p_buf = &uart_buf[0];
 800146c:	4b15      	ldr	r3, [pc, #84]	@ (80014c4 <cliOpen+0x84>)
 800146e:	4a16      	ldr	r2, [pc, #88]	@ (80014c8 <cliOpen+0x88>)
 8001470:	60da      	str	r2, [r3, #12]

  cli_node.is_open = true;
 8001472:	4b13      	ldr	r3, [pc, #76]	@ (80014c0 <cliOpen+0x80>)
 8001474:	2201      	movs	r2, #1
 8001476:	721a      	strb	r2, [r3, #8]

  if(ch == CH_CDC)
 8001478:	79fb      	ldrb	r3, [r7, #7]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d01a      	beq.n	80014b4 <cliOpen+0x74>
  {
  }
  else if(ch == CH_USART1)
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d117      	bne.n	80014b4 <cliOpen+0x74>
  {
    if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&uart_buf, 256) != HAL_OK)
 8001484:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001488:	490f      	ldr	r1, [pc, #60]	@ (80014c8 <cliOpen+0x88>)
 800148a:	4810      	ldr	r0, [pc, #64]	@ (80014cc <cliOpen+0x8c>)
 800148c:	f005 f8e1 	bl	8006652 <HAL_UART_Receive_DMA>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d002      	beq.n	800149c <cliOpen+0x5c>
    {
      cli_node.is_open = false;
 8001496:	4b0a      	ldr	r3, [pc, #40]	@ (80014c0 <cliOpen+0x80>)
 8001498:	2200      	movs	r2, #0
 800149a:	721a      	strb	r2, [r3, #8]
    }

    qbuffer.in = qbuffer.len - hdma_usart1_rx.Instance->CNDTR;
 800149c:	4b09      	ldr	r3, [pc, #36]	@ (80014c4 <cliOpen+0x84>)
 800149e:	689a      	ldr	r2, [r3, #8]
 80014a0:	4b0b      	ldr	r3, [pc, #44]	@ (80014d0 <cliOpen+0x90>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	4a06      	ldr	r2, [pc, #24]	@ (80014c4 <cliOpen+0x84>)
 80014aa:	6013      	str	r3, [r2, #0]
    qbuffer.out = qbuffer.in;
 80014ac:	4b05      	ldr	r3, [pc, #20]	@ (80014c4 <cliOpen+0x84>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a04      	ldr	r2, [pc, #16]	@ (80014c4 <cliOpen+0x84>)
 80014b2:	6053      	str	r3, [r2, #4]
  }

  return cli_node.is_open;
 80014b4:	4b02      	ldr	r3, [pc, #8]	@ (80014c0 <cliOpen+0x80>)
 80014b6:	7a1b      	ldrb	r3, [r3, #8]
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	20000210 	.word	0x20000210
 80014c4:	20000654 	.word	0x20000654
 80014c8:	20000664 	.word	0x20000664
 80014cc:	20000850 	.word	0x20000850
 80014d0:	200008e0 	.word	0x200008e0

080014d4 <cliShowLog>:
  cli_node.is_log = false;
  return true;
}

void cliShowLog(cli_t *p_cli)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  if (cli_node.is_log == true)
 80014dc:	4b34      	ldr	r3, [pc, #208]	@ (80015b0 <cliShowLog+0xdc>)
 80014de:	7a5b      	ldrb	r3, [r3, #9]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d061      	beq.n	80015a8 <cliShowLog+0xd4>
  {
    uartPrintf(p_cli->log_ch, "Cursor  : %d\n", p_cli->line.cursor);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	7a98      	ldrb	r0, [r3, #10]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
 80014ee:	461a      	mov	r2, r3
 80014f0:	4930      	ldr	r1, [pc, #192]	@ (80015b4 <cliShowLog+0xe0>)
 80014f2:	f000 feeb 	bl	80022cc <uartPrintf>
    uartPrintf(p_cli->log_ch, "Count   : %d\n", p_cli->line.count);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	7a98      	ldrb	r0, [r3, #10]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
 8001500:	461a      	mov	r2, r3
 8001502:	492d      	ldr	r1, [pc, #180]	@ (80015b8 <cliShowLog+0xe4>)
 8001504:	f000 fee2 	bl	80022cc <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf_len : %d\n", p_cli->line.buf_len);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	7a98      	ldrb	r0, [r3, #10]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f893 32e4 	ldrb.w	r3, [r3, #740]	@ 0x2e4
 8001512:	461a      	mov	r2, r3
 8001514:	4929      	ldr	r1, [pc, #164]	@ (80015bc <cliShowLog+0xe8>)
 8001516:	f000 fed9 	bl	80022cc <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf     : %s\n", p_cli->line.buf);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	7a98      	ldrb	r0, [r3, #10]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 8001524:	461a      	mov	r2, r3
 8001526:	4926      	ldr	r1, [pc, #152]	@ (80015c0 <cliShowLog+0xec>)
 8001528:	f000 fed0 	bl	80022cc <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_i  : %d\n", p_cli->hist_line_i);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	7a98      	ldrb	r0, [r3, #10]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f993 3195 	ldrsb.w	r3, [r3, #405]	@ 0x195
 8001536:	461a      	mov	r2, r3
 8001538:	4922      	ldr	r1, [pc, #136]	@ (80015c4 <cliShowLog+0xf0>)
 800153a:	f000 fec7 	bl	80022cc <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_lt : %d\n", p_cli->hist_line_last);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	7a98      	ldrb	r0, [r3, #10]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8001548:	461a      	mov	r2, r3
 800154a:	491f      	ldr	r1, [pc, #124]	@ (80015c8 <cliShowLog+0xf4>)
 800154c:	f000 febe 	bl	80022cc <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_c  : %d\n", p_cli->hist_line_count);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	7a98      	ldrb	r0, [r3, #10]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 800155a:	461a      	mov	r2, r3
 800155c:	491b      	ldr	r1, [pc, #108]	@ (80015cc <cliShowLog+0xf8>)
 800155e:	f000 feb5 	bl	80022cc <uartPrintf>

    for (int i=0; i<p_cli->hist_line_count; i++)
 8001562:	2300      	movs	r3, #0
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	e012      	b.n	800158e <cliShowLog+0xba>
    {
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	7a98      	ldrb	r0, [r3, #10]
 800156c:	68fa      	ldr	r2, [r7, #12]
 800156e:	4613      	mov	r3, r2
 8001570:	015b      	lsls	r3, r3, #5
 8001572:	4413      	add	r3, r2
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	4413      	add	r3, r2
 8001578:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	4413      	add	r3, r2
 8001580:	68fa      	ldr	r2, [r7, #12]
 8001582:	4913      	ldr	r1, [pc, #76]	@ (80015d0 <cliShowLog+0xfc>)
 8001584:	f000 fea2 	bl	80022cc <uartPrintf>
    for (int i=0; i<p_cli->hist_line_count; i++)
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	3301      	adds	r3, #1
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 8001594:	461a      	mov	r2, r3
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	4293      	cmp	r3, r2
 800159a:	dbe5      	blt.n	8001568 <cliShowLog+0x94>
    }
    uartPrintf(p_cli->log_ch, "\n");
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	7a9b      	ldrb	r3, [r3, #10]
 80015a0:	490c      	ldr	r1, [pc, #48]	@ (80015d4 <cliShowLog+0x100>)
 80015a2:	4618      	mov	r0, r3
 80015a4:	f000 fe92 	bl	80022cc <uartPrintf>
  }
}
 80015a8:	bf00      	nop
 80015aa:	3710      	adds	r7, #16
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	20000210 	.word	0x20000210
 80015b4:	0800c264 	.word	0x0800c264
 80015b8:	0800c274 	.word	0x0800c274
 80015bc:	0800c284 	.word	0x0800c284
 80015c0:	0800c294 	.word	0x0800c294
 80015c4:	0800c2a4 	.word	0x0800c2a4
 80015c8:	0800c2b4 	.word	0x0800c2b4
 80015cc:	0800c2c4 	.word	0x0800c2c4
 80015d0:	0800c2d4 	.word	0x0800c2d4
 80015d4:	0800c2e4 	.word	0x0800c2e4

080015d8 <cliShowPrompt>:

void cliShowPrompt(cli_t *p_cli)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  uartPrintf(p_cli->ch, "\n\r");
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	4906      	ldr	r1, [pc, #24]	@ (8001600 <cliShowPrompt+0x28>)
 80015e6:	4618      	mov	r0, r3
 80015e8:	f000 fe70 	bl	80022cc <uartPrintf>
  uartPrintf(p_cli->ch, CLI_PROMPT_STR);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	4904      	ldr	r1, [pc, #16]	@ (8001604 <cliShowPrompt+0x2c>)
 80015f2:	4618      	mov	r0, r3
 80015f4:	f000 fe6a 	bl	80022cc <uartPrintf>
}
 80015f8:	bf00      	nop
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	0800c2e8 	.word	0x0800c2e8
 8001604:	0800c2ec 	.word	0x0800c2ec

08001608 <cliMain>:

bool cliMain(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  if (cli_node.is_open != true)
 800160c:	4b0e      	ldr	r3, [pc, #56]	@ (8001648 <cliMain+0x40>)
 800160e:	7a1b      	ldrb	r3, [r3, #8]
 8001610:	f083 0301 	eor.w	r3, r3, #1
 8001614:	b2db      	uxtb	r3, r3
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <cliMain+0x16>
  {
    return false;
 800161a:	2300      	movs	r3, #0
 800161c:	e012      	b.n	8001644 <cliMain+0x3c>
  }

  if(uartAvailable(cli_node.ch) > 0)
 800161e:	4b0a      	ldr	r3, [pc, #40]	@ (8001648 <cliMain+0x40>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	4618      	mov	r0, r3
 8001624:	f000 fe24 	bl	8002270 <uartAvailable>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d009      	beq.n	8001642 <cliMain+0x3a>
  {
    cliUpdate(&cli_node, uartRead(cli_node.ch));
 800162e:	4b06      	ldr	r3, [pc, #24]	@ (8001648 <cliMain+0x40>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	4618      	mov	r0, r3
 8001634:	f000 fea6 	bl	8002384 <uartRead>
 8001638:	4603      	mov	r3, r0
 800163a:	4619      	mov	r1, r3
 800163c:	4802      	ldr	r0, [pc, #8]	@ (8001648 <cliMain+0x40>)
 800163e:	f000 f805 	bl	800164c <cliUpdate>
  }

  return true;
 8001642:	2301      	movs	r3, #1
}
 8001644:	4618      	mov	r0, r3
 8001646:	bd80      	pop	{r7, pc}
 8001648:	20000210 	.word	0x20000210

0800164c <cliUpdate>:
{
  return uartWrite(cli_node.ch, p_data, length);
}

bool cliUpdate(cli_t *p_cli, uint8_t rx_data)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b08c      	sub	sp, #48	@ 0x30
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	460b      	mov	r3, r1
 8001656:	70fb      	strb	r3, [r7, #3]
  bool ret = false;
 8001658:	2300      	movs	r3, #0
 800165a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t tx_buf[8];
  cli_line_t *line;

  line = &p_cli->line;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 8001664:	61fb      	str	r3, [r7, #28]


  if (p_cli->state == CLI_RX_IDLE)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	7c1b      	ldrb	r3, [r3, #16]
 800166a:	2b00      	cmp	r3, #0
 800166c:	f040 816d 	bne.w	800194a <cliUpdate+0x2fe>
  {
    switch(rx_data)
 8001670:	78fb      	ldrb	r3, [r7, #3]
 8001672:	2b7f      	cmp	r3, #127	@ 0x7f
 8001674:	d02a      	beq.n	80016cc <cliUpdate+0x80>
 8001676:	2b7f      	cmp	r3, #127	@ 0x7f
 8001678:	f300 80da 	bgt.w	8001830 <cliUpdate+0x1e4>
 800167c:	2b1b      	cmp	r3, #27
 800167e:	d021      	beq.n	80016c4 <cliUpdate+0x78>
 8001680:	2b1b      	cmp	r3, #27
 8001682:	f300 80d5 	bgt.w	8001830 <cliUpdate+0x1e4>
 8001686:	2b08      	cmp	r3, #8
 8001688:	d062      	beq.n	8001750 <cliUpdate+0x104>
 800168a:	2b0d      	cmp	r3, #13
 800168c:	f040 80d0 	bne.w	8001830 <cliUpdate+0x1e4>
    {
      // 엔터
      //
      case CLI_KEY_ENTER:
        if (line->count > 0)
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001696:	2b00      	cmp	r3, #0
 8001698:	d005      	beq.n	80016a6 <cliUpdate+0x5a>
        {
          cliLineAdd(p_cli);
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f000 fa51 	bl	8001b42 <cliLineAdd>
          cliRunCmd(p_cli);
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f000 fb1d 	bl	8001ce0 <cliRunCmd>
        }

        line->count = 0;
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	2200      	movs	r2, #0
 80016aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        line->cursor = 0;
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	2200      	movs	r2, #0
 80016b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        line->buf[0] = 0;
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	2200      	movs	r2, #0
 80016ba:	701a      	strb	r2, [r3, #0]
        cliShowPrompt(p_cli);
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f7ff ff8b 	bl	80015d8 <cliShowPrompt>
        break;
 80016c2:	e142      	b.n	800194a <cliUpdate+0x2fe>


      case CLI_KEY_ESC:
        p_cli->state = CLI_RX_SP1;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2201      	movs	r2, #1
 80016c8:	741a      	strb	r2, [r3, #16]
        break;
 80016ca:	e13e      	b.n	800194a <cliUpdate+0x2fe>


      // DEL
      //
      case CLI_KEY_DEL:
        if (line->cursor < line->count)
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80016d8:	429a      	cmp	r2, r3
 80016da:	f080 8131 	bcs.w	8001940 <cliUpdate+0x2f4>
        {
          uint8_t mov_len;

          mov_len = line->count - line->cursor;
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	76fb      	strb	r3, [r7, #27]
          for (int i=1; i<mov_len; i++)
 80016ee:	2301      	movs	r3, #1
 80016f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016f2:	e013      	b.n	800171c <cliUpdate+0xd0>
          {
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80016fa:	461a      	mov	r2, r3
 80016fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016fe:	441a      	add	r2, r3
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001706:	4619      	mov	r1, r3
 8001708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800170a:	440b      	add	r3, r1
 800170c:	3b01      	subs	r3, #1
 800170e:	69f9      	ldr	r1, [r7, #28]
 8001710:	5c89      	ldrb	r1, [r1, r2]
 8001712:	69fa      	ldr	r2, [r7, #28]
 8001714:	54d1      	strb	r1, [r2, r3]
          for (int i=1; i<mov_len; i++)
 8001716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001718:	3301      	adds	r3, #1
 800171a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800171c:	7efb      	ldrb	r3, [r7, #27]
 800171e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001720:	429a      	cmp	r2, r3
 8001722:	dbe7      	blt.n	80016f4 <cliUpdate+0xa8>
          }

          line->count--;
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800172a:	3b01      	subs	r3, #1
 800172c:	b2da      	uxtb	r2, r3
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          line->buf[line->count] = 0;
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800173a:	461a      	mov	r2, r3
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	2100      	movs	r1, #0
 8001740:	5499      	strb	r1, [r3, r2]

          uartPrintf(p_cli->ch, "\x1B[1P");
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	498d      	ldr	r1, [pc, #564]	@ (800197c <cliUpdate+0x330>)
 8001748:	4618      	mov	r0, r3
 800174a:	f000 fdbf 	bl	80022cc <uartPrintf>
        }
        break;
 800174e:	e0f7      	b.n	8001940 <cliUpdate+0x2f4>


      // 백스페이스
      //
      case CLI_KEY_BACK:
        if (line->count > 0 && line->cursor > 0)
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001756:	2b00      	cmp	r3, #0
 8001758:	d055      	beq.n	8001806 <cliUpdate+0x1ba>
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001760:	2b00      	cmp	r3, #0
 8001762:	d050      	beq.n	8001806 <cliUpdate+0x1ba>
        {
          if (line->cursor == line->count)
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001770:	429a      	cmp	r2, r3
 8001772:	d10e      	bne.n	8001792 <cliUpdate+0x146>
          {
            line->count--;
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800177a:	3b01      	subs	r3, #1
 800177c:	b2da      	uxtb	r2, r3
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
            line->buf[line->count] = 0;
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800178a:	461a      	mov	r2, r3
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	2100      	movs	r1, #0
 8001790:	5499      	strb	r1, [r3, r2]
          }

          if (line->cursor < line->count)
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800179e:	429a      	cmp	r2, r3
 80017a0:	d231      	bcs.n	8001806 <cliUpdate+0x1ba>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	76bb      	strb	r3, [r7, #26]

            for (int i=0; i<mov_len; i++)
 80017b2:	2300      	movs	r3, #0
 80017b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80017b6:	e013      	b.n	80017e0 <cliUpdate+0x194>
            {
              line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80017be:	461a      	mov	r2, r3
 80017c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017c2:	441a      	add	r2, r3
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80017ca:	4619      	mov	r1, r3
 80017cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017ce:	440b      	add	r3, r1
 80017d0:	3b01      	subs	r3, #1
 80017d2:	69f9      	ldr	r1, [r7, #28]
 80017d4:	5c89      	ldrb	r1, [r1, r2]
 80017d6:	69fa      	ldr	r2, [r7, #28]
 80017d8:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 80017da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017dc:	3301      	adds	r3, #1
 80017de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80017e0:	7ebb      	ldrb	r3, [r7, #26]
 80017e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80017e4:	429a      	cmp	r2, r3
 80017e6:	dbe7      	blt.n	80017b8 <cliUpdate+0x16c>
            }

            line->count--;
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80017ee:	3b01      	subs	r3, #1
 80017f0:	b2da      	uxtb	r2, r3
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
            line->buf[line->count] = 0;
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80017fe:	461a      	mov	r2, r3
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	2100      	movs	r1, #0
 8001804:	5499      	strb	r1, [r3, r2]
          }
        }

        if (line->cursor > 0)
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800180c:	2b00      	cmp	r3, #0
 800180e:	f000 8099 	beq.w	8001944 <cliUpdate+0x2f8>
        {
          line->cursor--;
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001818:	3b01      	subs	r3, #1
 800181a:	b2da      	uxtb	r2, r3
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	4956      	ldr	r1, [pc, #344]	@ (8001980 <cliUpdate+0x334>)
 8001828:	4618      	mov	r0, r3
 800182a:	f000 fd4f 	bl	80022cc <uartPrintf>
        }
        break;
 800182e:	e089      	b.n	8001944 <cliUpdate+0x2f8>


      default:
        if ((line->count + 1) < line->buf_len)
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001836:	3301      	adds	r3, #1
 8001838:	69fa      	ldr	r2, [r7, #28]
 800183a:	f892 2040 	ldrb.w	r2, [r2, #64]	@ 0x40
 800183e:	4293      	cmp	r3, r2
 8001840:	f280 8082 	bge.w	8001948 <cliUpdate+0x2fc>
        {
          if (line->cursor == line->count)
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001850:	429a      	cmp	r2, r3
 8001852:	d124      	bne.n	800189e <cliUpdate+0x252>
          {
            uartWrite(p_cli->ch, &rx_data, 1);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	1cf9      	adds	r1, r7, #3
 800185a:	2201      	movs	r2, #1
 800185c:	4618      	mov	r0, r3
 800185e:	f000 fd6d 	bl	800233c <uartWrite>

            line->buf[line->cursor] = rx_data;
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001868:	461a      	mov	r2, r3
 800186a:	78f9      	ldrb	r1, [r7, #3]
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	5499      	strb	r1, [r3, r2]
            line->count++;
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001876:	3301      	adds	r3, #1
 8001878:	b2da      	uxtb	r2, r3
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
            line->cursor++;
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001886:	3301      	adds	r3, #1
 8001888:	b2da      	uxtb	r2, r3
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
            line->buf[line->count] = 0;
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001896:	461a      	mov	r2, r3
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	2100      	movs	r1, #0
 800189c:	5499      	strb	r1, [r3, r2]
          }
          if (line->cursor < line->count)
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d24c      	bcs.n	8001948 <cliUpdate+0x2fc>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	767b      	strb	r3, [r7, #25]
            for (int i=0; i<mov_len; i++)
 80018be:	2300      	movs	r3, #0
 80018c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80018c2:	e013      	b.n	80018ec <cliUpdate+0x2a0>
            {
              line->buf[line->count - i] = line->buf[line->count - i - 1];
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80018ca:	461a      	mov	r2, r3
 80018cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	1e5a      	subs	r2, r3, #1
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80018d8:	4619      	mov	r1, r3
 80018da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018dc:	1acb      	subs	r3, r1, r3
 80018de:	69f9      	ldr	r1, [r7, #28]
 80018e0:	5c89      	ldrb	r1, [r1, r2]
 80018e2:	69fa      	ldr	r2, [r7, #28]
 80018e4:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 80018e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e8:	3301      	adds	r3, #1
 80018ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80018ec:	7e7b      	ldrb	r3, [r7, #25]
 80018ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018f0:	429a      	cmp	r2, r3
 80018f2:	dbe7      	blt.n	80018c4 <cliUpdate+0x278>
            }
            line->buf[line->cursor] = rx_data;
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80018fa:	461a      	mov	r2, r3
 80018fc:	78f9      	ldrb	r1, [r7, #3]
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	5499      	strb	r1, [r3, r2]
            line->count++;
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001908:	3301      	adds	r3, #1
 800190a:	b2da      	uxtb	r2, r3
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
            line->cursor++;
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001918:	3301      	adds	r3, #1
 800191a:	b2da      	uxtb	r2, r3
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
            line->buf[line->count] = 0;
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001928:	461a      	mov	r2, r3
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	2100      	movs	r1, #0
 800192e:	5499      	strb	r1, [r3, r2]

            uartPrintf(p_cli->ch, "\x1B[4h%c\x1B[4l", rx_data);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	78fa      	ldrb	r2, [r7, #3]
 8001936:	4913      	ldr	r1, [pc, #76]	@ (8001984 <cliUpdate+0x338>)
 8001938:	4618      	mov	r0, r3
 800193a:	f000 fcc7 	bl	80022cc <uartPrintf>
          }
        }
        break;
 800193e:	e003      	b.n	8001948 <cliUpdate+0x2fc>
        break;
 8001940:	bf00      	nop
 8001942:	e002      	b.n	800194a <cliUpdate+0x2fe>
        break;
 8001944:	bf00      	nop
 8001946:	e000      	b.n	800194a <cliUpdate+0x2fe>
        break;
 8001948:	bf00      	nop
    }
  }

  switch(p_cli->state)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	7c1b      	ldrb	r3, [r3, #16]
 800194e:	3b01      	subs	r3, #1
 8001950:	2b03      	cmp	r3, #3
 8001952:	f200 80d0 	bhi.w	8001af6 <cliUpdate+0x4aa>
 8001956:	a201      	add	r2, pc, #4	@ (adr r2, 800195c <cliUpdate+0x310>)
 8001958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800195c:	0800196d 	.word	0x0800196d
 8001960:	08001975 	.word	0x08001975
 8001964:	08001989 	.word	0x08001989
 8001968:	08001aed 	.word	0x08001aed
  {
    case CLI_RX_SP1:
      p_cli->state = CLI_RX_SP2;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2202      	movs	r2, #2
 8001970:	741a      	strb	r2, [r3, #16]
      break;
 8001972:	e0c0      	b.n	8001af6 <cliUpdate+0x4aa>

    case CLI_RX_SP2:
      p_cli->state = CLI_RX_SP3;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2203      	movs	r2, #3
 8001978:	741a      	strb	r2, [r3, #16]
      break;
 800197a:	e0bc      	b.n	8001af6 <cliUpdate+0x4aa>
 800197c:	0800c2f4 	.word	0x0800c2f4
 8001980:	0800c2fc 	.word	0x0800c2fc
 8001984:	0800c304 	.word	0x0800c304

    case CLI_RX_SP3:
      p_cli->state = CLI_RX_IDLE;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	741a      	strb	r2, [r3, #16]

      if (rx_data == CLI_KEY_LEFT)
 800198e:	78fb      	ldrb	r3, [r7, #3]
 8001990:	2b44      	cmp	r3, #68	@ 0x44
 8001992:	d11a      	bne.n	80019ca <cliUpdate+0x37e>
      {
        if (line->cursor > 0)
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800199a:	2b00      	cmp	r3, #0
 800199c:	d015      	beq.n	80019ca <cliUpdate+0x37e>
        {
          line->cursor--;
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019a4:	3b01      	subs	r3, #1
 80019a6:	b2da      	uxtb	r2, r3
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          tx_buf[0] = 0x1B;
 80019ae:	231b      	movs	r3, #27
 80019b0:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 80019b2:	235b      	movs	r3, #91	@ 0x5b
 80019b4:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 80019b6:	78fb      	ldrb	r3, [r7, #3]
 80019b8:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	f107 010c 	add.w	r1, r7, #12
 80019c2:	2203      	movs	r2, #3
 80019c4:	4618      	mov	r0, r3
 80019c6:	f000 fcb9 	bl	800233c <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_RIGHT)
 80019ca:	78fb      	ldrb	r3, [r7, #3]
 80019cc:	2b43      	cmp	r3, #67	@ 0x43
 80019ce:	d11d      	bne.n	8001a0c <cliUpdate+0x3c0>
      {
        if (line->cursor < line->count)
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80019dc:	429a      	cmp	r2, r3
 80019de:	d215      	bcs.n	8001a0c <cliUpdate+0x3c0>
        {
          line->cursor++;
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019e6:	3301      	adds	r3, #1
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

          tx_buf[0] = 0x1B;
 80019f0:	231b      	movs	r3, #27
 80019f2:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 80019f4:	235b      	movs	r3, #91	@ 0x5b
 80019f6:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 80019f8:	78fb      	ldrb	r3, [r7, #3]
 80019fa:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	f107 010c 	add.w	r1, r7, #12
 8001a04:	2203      	movs	r2, #3
 8001a06:	4618      	mov	r0, r3
 8001a08:	f000 fc98 	bl	800233c <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_UP)
 8001a0c:	78fb      	ldrb	r3, [r7, #3]
 8001a0e:	2b41      	cmp	r3, #65	@ 0x41
 8001a10:	d10c      	bne.n	8001a2c <cliUpdate+0x3e0>
      {
        cliLineChange(p_cli, true);
 8001a12:	2101      	movs	r1, #1
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f000 f8d9 	bl	8001bcc <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	781a      	ldrb	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 8001a24:	4619      	mov	r1, r3
 8001a26:	4610      	mov	r0, r2
 8001a28:	f000 fc50 	bl	80022cc <uartPrintf>
      }

      if (rx_data == CLI_KEY_DOWN)
 8001a2c:	78fb      	ldrb	r3, [r7, #3]
 8001a2e:	2b42      	cmp	r3, #66	@ 0x42
 8001a30:	d10c      	bne.n	8001a4c <cliUpdate+0x400>
      {
        cliLineChange(p_cli, false);
 8001a32:	2100      	movs	r1, #0
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f000 f8c9 	bl	8001bcc <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	781a      	ldrb	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 8001a44:	4619      	mov	r1, r3
 8001a46:	4610      	mov	r0, r2
 8001a48:	f000 fc40 	bl	80022cc <uartPrintf>
      }

      if (rx_data == CLI_KEY_HOME)
 8001a4c:	78fb      	ldrb	r3, [r7, #3]
 8001a4e:	2b31      	cmp	r3, #49	@ 0x31
 8001a50:	d10f      	bne.n	8001a72 <cliUpdate+0x426>
      {
        uartPrintf(p_cli->ch, "\x1B[%dD", line->cursor);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	7818      	ldrb	r0, [r3, #0]
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	492a      	ldr	r1, [pc, #168]	@ (8001b08 <cliUpdate+0x4bc>)
 8001a60:	f000 fc34 	bl	80022cc <uartPrintf>
        line->cursor = 0;
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	2200      	movs	r2, #0
 8001a68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        p_cli->state = CLI_RX_SP4;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2204      	movs	r2, #4
 8001a70:	741a      	strb	r2, [r3, #16]
      }

      if (rx_data == CLI_KEY_END)
 8001a72:	78fb      	ldrb	r3, [r7, #3]
 8001a74:	2b34      	cmp	r3, #52	@ 0x34
 8001a76:	d13d      	bne.n	8001af4 <cliUpdate+0x4a8>
      {
        uint16_t mov_len;

        if (line->cursor < line->count)
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d20f      	bcs.n	8001aa8 <cliUpdate+0x45c>
        {
          mov_len = line->count - line->cursor;
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001a8e:	461a      	mov	r2, r3
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dC", mov_len);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	8afa      	ldrh	r2, [r7, #22]
 8001aa0:	491a      	ldr	r1, [pc, #104]	@ (8001b0c <cliUpdate+0x4c0>)
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f000 fc12 	bl	80022cc <uartPrintf>
        }
        if (line->cursor > line->count)
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d90f      	bls.n	8001ad8 <cliUpdate+0x48c>
        {
          mov_len = line->cursor - line->count;
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001abe:	461a      	mov	r2, r3
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dD", mov_len);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	8afa      	ldrh	r2, [r7, #22]
 8001ad0:	490d      	ldr	r1, [pc, #52]	@ (8001b08 <cliUpdate+0x4bc>)
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f000 fbfa 	bl	80022cc <uartPrintf>
        }
        line->cursor = line->count;
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        p_cli->state = CLI_RX_SP4;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2204      	movs	r2, #4
 8001ae8:	741a      	strb	r2, [r3, #16]
      }
      break;
 8001aea:	e003      	b.n	8001af4 <cliUpdate+0x4a8>

    case CLI_RX_SP4:
      p_cli->state = CLI_RX_IDLE;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	741a      	strb	r2, [r3, #16]
      break;
 8001af2:	e000      	b.n	8001af6 <cliUpdate+0x4aa>
      break;
 8001af4:	bf00      	nop
  }



  cliShowLog(p_cli);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f7ff fcec 	bl	80014d4 <cliShowLog>

  return ret;
 8001afc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3730      	adds	r7, #48	@ 0x30
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	0800c310 	.word	0x0800c310
 8001b0c:	0800c318 	.word	0x0800c318

08001b10 <cliLineClean>:

void cliLineClean(cli_t *p_cli)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  p_cli->line.count   = 0;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f883 22e6 	strb.w	r2, [r3, #742]	@ 0x2e6
  p_cli->line.cursor  = 0;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	f883 22e5 	strb.w	r2, [r3, #741]	@ 0x2e5
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	223f      	movs	r2, #63	@ 0x3f
 8001b2c:	f883 22e4 	strb.w	r2, [r3, #740]	@ 0x2e4
  p_cli->line.buf[0]  = 0;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	f883 22a4 	strb.w	r2, [r3, #676]	@ 0x2a4
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bc80      	pop	{r7}
 8001b40:	4770      	bx	lr

08001b42 <cliLineAdd>:

void cliLineAdd(cli_t *p_cli)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b082      	sub	sp, #8
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]

  p_cli->line_buf[p_cli->hist_line_last] = p_cli->line;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8001b50:	461a      	mov	r2, r3
 8001b52:	6879      	ldr	r1, [r7, #4]
 8001b54:	4613      	mov	r3, r2
 8001b56:	015b      	lsls	r3, r3, #5
 8001b58:	4413      	add	r3, r2
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	4413      	add	r3, r2
 8001b5e:	440b      	add	r3, r1
 8001b60:	f503 72cc 	add.w	r2, r3, #408	@ 0x198
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	4610      	mov	r0, r2
 8001b68:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 8001b6c:	2243      	movs	r2, #67	@ 0x43
 8001b6e:	4619      	mov	r1, r3
 8001b70:	f007 fc05 	bl	800937e <memcpy>

  if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 8001b7a:	2b03      	cmp	r3, #3
 8001b7c:	d807      	bhi.n	8001b8e <cliLineAdd+0x4c>
  {
    p_cli->hist_line_count++;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 8001b84:	3301      	adds	r3, #1
 8001b86:	b2da      	uxtb	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f883 2197 	strb.w	r2, [r3, #407]	@ 0x197
  }

  p_cli->hist_line_i    = p_cli->hist_line_last;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8001b94:	b25a      	sxtb	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
  p_cli->hist_line_last = (p_cli->hist_line_last + 1) % CLI_LINE_HIS_MAX;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	425a      	negs	r2, r3
 8001ba6:	f003 0303 	and.w	r3, r3, #3
 8001baa:	f002 0203 	and.w	r2, r2, #3
 8001bae:	bf58      	it	pl
 8001bb0:	4253      	negpl	r3, r2
 8001bb2:	b2da      	uxtb	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
  p_cli->hist_line_new  = true;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	f883 2194 	strb.w	r2, [r3, #404]	@ 0x194
}
 8001bc2:	bf00      	nop
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
	...

08001bcc <cliLineChange>:

void cliLineChange(cli_t *p_cli, int8_t key_up)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	70fb      	strb	r3, [r7, #3]
  uint8_t change_i;


  if (p_cli->hist_line_count == 0)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d076      	beq.n	8001cd0 <cliLineChange+0x104>
  {
    return;
  }


  if (p_cli->line.cursor > 0)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d008      	beq.n	8001bfe <cliLineChange+0x32>
  {
    uartPrintf(p_cli->ch, "\x1B[%dD", p_cli->line.cursor);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	7818      	ldrb	r0, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	4937      	ldr	r1, [pc, #220]	@ (8001cd8 <cliLineChange+0x10c>)
 8001bfa:	f000 fb67 	bl	80022cc <uartPrintf>
  }
  if (p_cli->line.count > 0)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d008      	beq.n	8001c1a <cliLineChange+0x4e>
  {
    uartPrintf(p_cli->ch, "\x1B[%dP", p_cli->line.count);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	7818      	ldrb	r0, [r3, #0]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
 8001c12:	461a      	mov	r2, r3
 8001c14:	4931      	ldr	r1, [pc, #196]	@ (8001cdc <cliLineChange+0x110>)
 8001c16:	f000 fb59 	bl	80022cc <uartPrintf>
  }


  if (key_up == true)
 8001c1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d125      	bne.n	8001c6e <cliLineChange+0xa2>
  {
    if (p_cli->hist_line_new == true)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f893 3194 	ldrb.w	r3, [r3, #404]	@ 0x194
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d006      	beq.n	8001c3a <cliLineChange+0x6e>
    {
      p_cli->hist_line_i = p_cli->hist_line_last;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8001c32:	b25a      	sxtb	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
    }
    p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) % p_cli->hist_line_count;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f993 3195 	ldrsb.w	r3, [r3, #405]	@ 0x195
 8001c40:	461a      	mov	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 8001c48:	4413      	add	r3, r2
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	f892 2197 	ldrb.w	r2, [r2, #407]	@ 0x197
 8001c52:	fb93 f1f2 	sdiv	r1, r3, r2
 8001c56:	fb01 f202 	mul.w	r2, r1, r2
 8001c5a:	1a9b      	subs	r3, r3, r2
 8001c5c:	b25a      	sxtb	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
    change_i = p_cli->hist_line_i;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f993 3195 	ldrsb.w	r3, [r3, #405]	@ 0x195
 8001c6a:	73fb      	strb	r3, [r7, #15]
 8001c6c:	e013      	b.n	8001c96 <cliLineChange+0xca>
  }
  else
  {
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f993 3195 	ldrsb.w	r3, [r3, #405]	@ 0x195
 8001c74:	3301      	adds	r3, #1
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	f892 2197 	ldrb.w	r2, [r2, #407]	@ 0x197
 8001c7c:	fb93 f1f2 	sdiv	r1, r3, r2
 8001c80:	fb01 f202 	mul.w	r2, r1, r2
 8001c84:	1a9b      	subs	r3, r3, r2
 8001c86:	b25a      	sxtb	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
    change_i = p_cli->hist_line_i;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f993 3195 	ldrsb.w	r3, [r3, #405]	@ 0x195
 8001c94:	73fb      	strb	r3, [r7, #15]
  }

  p_cli->line = p_cli->line_buf[change_i];
 8001c96:	7bfa      	ldrb	r2, [r7, #15]
 8001c98:	6879      	ldr	r1, [r7, #4]
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	015b      	lsls	r3, r3, #5
 8001ca0:	4413      	add	r3, r2
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	4413      	add	r3, r2
 8001ca6:	4403      	add	r3, r0
 8001ca8:	f503 72cc 	add.w	r2, r3, #408	@ 0x198
 8001cac:	f501 7329 	add.w	r3, r1, #676	@ 0x2a4
 8001cb0:	4611      	mov	r1, r2
 8001cb2:	2243      	movs	r2, #67	@ 0x43
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f007 fb62 	bl	800937e <memcpy>
  p_cli->line.cursor = p_cli->line.count;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f893 22e6 	ldrb.w	r2, [r3, #742]	@ 0x2e6
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f883 22e5 	strb.w	r2, [r3, #741]	@ 0x2e5

  p_cli->hist_line_new = false;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 2194 	strb.w	r2, [r3, #404]	@ 0x194
 8001cce:	e000      	b.n	8001cd2 <cliLineChange+0x106>
    return;
 8001cd0:	bf00      	nop
}
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	0800c310 	.word	0x0800c310
 8001cdc:	0800c320 	.word	0x0800c320

08001ce0 <cliRunCmd>:

bool cliRunCmd(cli_t *p_cli)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	72fb      	strb	r3, [r7, #11]


  if (cliParseArgs(p_cli) == true)
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f000 f851 	bl	8001d94 <cliParseArgs>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d046      	beq.n	8001d86 <cliRunCmd+0xa6>
  {
    cliPrintf("\r\n");
 8001cf8:	4825      	ldr	r0, [pc, #148]	@ (8001d90 <cliRunCmd+0xb0>)
 8001cfa:	f000 f893 	bl	8001e24 <cliPrintf>

    cliToUpper(p_cli->argv[0]);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8001d04:	4618      	mov	r0, r3
 8001d06:	f000 f8b1 	bl	8001e6c <cliToUpper>

    for (int i=0; i<p_cli->cmd_count; i++)
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60fb      	str	r3, [r7, #12]
 8001d0e:	e033      	b.n	8001d78 <cliRunCmd+0x98>
    {
      if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f8d3 0114 	ldr.w	r0, [r3, #276]	@ 0x114
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	4413      	add	r3, r2
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	4413      	add	r3, r2
 8001d28:	3304      	adds	r3, #4
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	f7fe fa10 	bl	8000150 <strcmp>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d11d      	bne.n	8001d72 <cliRunCmd+0x92>
      {
        p_cli->cmd_args.argc =  p_cli->argc - 1;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f8b3 3112 	ldrh.w	r3, [r3, #274]	@ 0x112
 8001d3c:	3b01      	subs	r3, #1
 8001d3e:	b29a      	uxth	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f8a3 242c 	strh.w	r2, [r3, #1068]	@ 0x42c
        p_cli->cmd_args.argv = &p_cli->argv[1];
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f503 728c 	add.w	r2, r3, #280	@ 0x118
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
        p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);
 8001d52:	6879      	ldr	r1, [r7, #4]
 8001d54:	68fa      	ldr	r2, [r7, #12]
 8001d56:	4613      	mov	r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	4413      	add	r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	440b      	add	r3, r1
 8001d60:	f503 733f 	add.w	r3, r3, #764	@ 0x2fc
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	f202 422c 	addw	r2, r2, #1068	@ 0x42c
 8001d6c:	4610      	mov	r0, r2
 8001d6e:	4798      	blx	r3
        break;
 8001d70:	e009      	b.n	8001d86 <cliRunCmd+0xa6>
    for (int i=0; i<p_cli->cmd_count; i++)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	3301      	adds	r3, #1
 8001d76:	60fb      	str	r3, [r7, #12]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	@ 0x2e8
 8001d7e:	461a      	mov	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	4293      	cmp	r3, r2
 8001d84:	dbc4      	blt.n	8001d10 <cliRunCmd+0x30>
      }
    }
  }

  return ret;
 8001d86:	7afb      	ldrb	r3, [r7, #11]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3710      	adds	r7, #16
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	0800c328 	.word	0x0800c328

08001d94 <cliParseArgs>:

bool cliParseArgs(cli_t *p_cli)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b088      	sub	sp, #32
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	77fb      	strb	r3, [r7, #31]
  char *tok;
  char *next_ptr;
  uint16_t argc = 0;
 8001da0:	2300      	movs	r3, #0
 8001da2:	82fb      	strh	r3, [r7, #22]
  static const char *delim = " \f\n\r\t\v";
  char *cmdline;
  char **argv;

  p_cli->argc = 0;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	f8a3 2112 	strh.w	r2, [r3, #274]	@ 0x112

  cmdline = (char *)p_cli->line.buf;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 8001db2:	613b      	str	r3, [r7, #16]
  argv    = p_cli->argv;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 8001dba:	60fb      	str	r3, [r7, #12]

  argv[argc] = NULL;
 8001dbc:	8afb      	ldrh	r3, [r7, #22]
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	68fa      	ldr	r2, [r7, #12]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]

  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8001dc8:	4b15      	ldr	r3, [pc, #84]	@ (8001e20 <cliParseArgs+0x8c>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f107 0208 	add.w	r2, r7, #8
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	6938      	ldr	r0, [r7, #16]
 8001dd4:	f007 fa42 	bl	800925c <strtok_r>
 8001dd8:	61b8      	str	r0, [r7, #24]
 8001dda:	e010      	b.n	8001dfe <cliParseArgs+0x6a>
  {
    argv[argc++] = tok;
 8001ddc:	8afb      	ldrh	r3, [r7, #22]
 8001dde:	1c5a      	adds	r2, r3, #1
 8001de0:	82fa      	strh	r2, [r7, #22]
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	68fa      	ldr	r2, [r7, #12]
 8001de6:	4413      	add	r3, r2
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	601a      	str	r2, [r3, #0]
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8001dec:	4b0c      	ldr	r3, [pc, #48]	@ (8001e20 <cliParseArgs+0x8c>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f107 0208 	add.w	r2, r7, #8
 8001df4:	4619      	mov	r1, r3
 8001df6:	2000      	movs	r0, #0
 8001df8:	f007 fa30 	bl	800925c <strtok_r>
 8001dfc:	61b8      	str	r0, [r7, #24]
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d1eb      	bne.n	8001ddc <cliParseArgs+0x48>
  }

  p_cli->argc = argc;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	8afa      	ldrh	r2, [r7, #22]
 8001e08:	f8a3 2112 	strh.w	r2, [r3, #274]	@ 0x112

  if (argc > 0)
 8001e0c:	8afb      	ldrh	r3, [r7, #22]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <cliParseArgs+0x82>
  {
    ret = true;
 8001e12:	2301      	movs	r3, #1
 8001e14:	77fb      	strb	r3, [r7, #31]
  }

  return ret;
 8001e16:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3720      	adds	r7, #32
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	20000000 	.word	0x20000000

08001e24 <cliPrintf>:

void cliPrintf(const char *fmt, ...)
{
 8001e24:	b40f      	push	{r0, r1, r2, r3}
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b084      	sub	sp, #16
 8001e2a:	af00      	add	r7, sp, #0
  va_list arg;
  va_start (arg, fmt);
 8001e2c:	f107 031c 	add.w	r3, r7, #28
 8001e30:	607b      	str	r3, [r7, #4]
  int32_t len;
  cli_t *p_cli = &cli_node;
 8001e32:	4b0d      	ldr	r3, [pc, #52]	@ (8001e68 <cliPrintf+0x44>)
 8001e34:	60fb      	str	r3, [r7, #12]


  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f103 0011 	add.w	r0, r3, #17
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e44:	f007 f9ba 	bl	80091bc <vsniprintf>
 8001e48:	60b8      	str	r0, [r7, #8]
  va_end(arg);

  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	7818      	ldrb	r0, [r3, #0]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	3311      	adds	r3, #17
 8001e52:	68ba      	ldr	r2, [r7, #8]
 8001e54:	4619      	mov	r1, r3
 8001e56:	f000 fa71 	bl	800233c <uartWrite>
}
 8001e5a:	bf00      	nop
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001e64:	b004      	add	sp, #16
 8001e66:	4770      	bx	lr
 8001e68:	20000210 	.word	0x20000210

08001e6c <cliToUpper>:

void cliToUpper(char *str)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  uint16_t i;
  uint8_t  str_ch;

  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8001e74:	2300      	movs	r3, #0
 8001e76:	81fb      	strh	r3, [r7, #14]
 8001e78:	e018      	b.n	8001eac <cliToUpper+0x40>
  {
    str_ch = str[i];
 8001e7a:	89fb      	ldrh	r3, [r7, #14]
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	4413      	add	r3, r2
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	737b      	strb	r3, [r7, #13]

    if (str_ch == 0)
 8001e84:	7b7b      	ldrb	r3, [r7, #13]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d014      	beq.n	8001eb4 <cliToUpper+0x48>
    {
      break;
    }

    if ((str_ch >= 'a') && (str_ch <= 'z'))
 8001e8a:	7b7b      	ldrb	r3, [r7, #13]
 8001e8c:	2b60      	cmp	r3, #96	@ 0x60
 8001e8e:	d905      	bls.n	8001e9c <cliToUpper+0x30>
 8001e90:	7b7b      	ldrb	r3, [r7, #13]
 8001e92:	2b7a      	cmp	r3, #122	@ 0x7a
 8001e94:	d802      	bhi.n	8001e9c <cliToUpper+0x30>
    {
      str_ch = str_ch - 'a' + 'A';
 8001e96:	7b7b      	ldrb	r3, [r7, #13]
 8001e98:	3b20      	subs	r3, #32
 8001e9a:	737b      	strb	r3, [r7, #13]
    }
    str[i] = str_ch;
 8001e9c:	89fb      	ldrh	r3, [r7, #14]
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	7b7a      	ldrb	r2, [r7, #13]
 8001ea4:	701a      	strb	r2, [r3, #0]
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8001ea6:	89fb      	ldrh	r3, [r7, #14]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	81fb      	strh	r3, [r7, #14]
 8001eac:	89fb      	ldrh	r3, [r7, #14]
 8001eae:	2b0f      	cmp	r3, #15
 8001eb0:	d9e3      	bls.n	8001e7a <cliToUpper+0xe>
 8001eb2:	e000      	b.n	8001eb6 <cliToUpper+0x4a>
      break;
 8001eb4:	bf00      	nop
  }

  if (i == CLI_CMD_NAME_MAX)
 8001eb6:	89fb      	ldrh	r3, [r7, #14]
 8001eb8:	2b10      	cmp	r3, #16
 8001eba:	d105      	bne.n	8001ec8 <cliToUpper+0x5c>
  {
    str[i-1] = 0;
 8001ebc:	89fb      	ldrh	r3, [r7, #14]
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	701a      	strb	r2, [r3, #0]
  }
}
 8001ec8:	bf00      	nop
 8001eca:	3714      	adds	r7, #20
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bc80      	pop	{r7}
 8001ed0:	4770      	bx	lr
	...

08001ed4 <cliArgsGetData>:

int32_t cliArgsGetData(uint8_t index)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	4603      	mov	r3, r0
 8001edc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = 0;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8001ee2:	4b0f      	ldr	r3, [pc, #60]	@ (8001f20 <cliArgsGetData+0x4c>)
 8001ee4:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8001ee6:	79fb      	ldrb	r3, [r7, #7]
 8001ee8:	b29a      	uxth	r2, r3
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	@ 0x42c
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d301      	bcc.n	8001ef8 <cliArgsGetData+0x24>
  {
    return 0;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	e00e      	b.n	8001f16 <cliArgsGetData+0x42>
  }

  ret = (int32_t)strtoul((const char * ) p_cli->cmd_args.argv[index], (char **)NULL, (int) 0);
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8001efe:	79fb      	ldrb	r3, [r7, #7]
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	4413      	add	r3, r2
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2200      	movs	r2, #0
 8001f08:	2100      	movs	r1, #0
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f006 f990 	bl	8008230 <strtoul>
 8001f10:	4603      	mov	r3, r0
 8001f12:	60fb      	str	r3, [r7, #12]

  return ret;
 8001f14:	68fb      	ldr	r3, [r7, #12]
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	20000210 	.word	0x20000210

08001f24 <cliArgsGetFloat>:

float cliArgsGetFloat(uint8_t index)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	71fb      	strb	r3, [r7, #7]
  float ret = 0.0;
 8001f2e:	f04f 0300 	mov.w	r3, #0
 8001f32:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8001f34:	4b0e      	ldr	r3, [pc, #56]	@ (8001f70 <cliArgsGetFloat+0x4c>)
 8001f36:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8001f38:	79fb      	ldrb	r3, [r7, #7]
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	@ 0x42c
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d302      	bcc.n	8001f4c <cliArgsGetFloat+0x28>
  {
    return 0;
 8001f46:	f04f 0300 	mov.w	r3, #0
 8001f4a:	e00c      	b.n	8001f66 <cliArgsGetFloat+0x42>
  }

  ret = (float)strtof((const char * ) p_cli->cmd_args.argv[index], (char **)NULL);
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8001f52:	79fb      	ldrb	r3, [r7, #7]
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	4413      	add	r3, r2
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f006 f8a1 	bl	80080a4 <strtof>
 8001f62:	60f8      	str	r0, [r7, #12]

  return ret;
 8001f64:	68fb      	ldr	r3, [r7, #12]
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3710      	adds	r7, #16
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	20000210 	.word	0x20000210

08001f74 <cliArgsGetStr>:

char *cliArgsGetStr(uint8_t index)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b085      	sub	sp, #20
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	71fb      	strb	r3, [r7, #7]
  char *ret = NULL;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8001f82:	4b0c      	ldr	r3, [pc, #48]	@ (8001fb4 <cliArgsGetStr+0x40>)
 8001f84:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8001f86:	79fb      	ldrb	r3, [r7, #7]
 8001f88:	b29a      	uxth	r2, r3
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	@ 0x42c
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d301      	bcc.n	8001f98 <cliArgsGetStr+0x24>
  {
    return 0;
 8001f94:	2300      	movs	r3, #0
 8001f96:	e008      	b.n	8001faa <cliArgsGetStr+0x36>
  }

  ret = p_cli->cmd_args.argv[index];
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8001f9e:	79fb      	ldrb	r3, [r7, #7]
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	4413      	add	r3, r2
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	60fb      	str	r3, [r7, #12]

  return ret;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3714      	adds	r7, #20
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bc80      	pop	{r7}
 8001fb2:	4770      	bx	lr
 8001fb4:	20000210 	.word	0x20000210

08001fb8 <cliArgsIsStr>:

bool cliArgsIsStr(uint8_t index, char *p_str)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	6039      	str	r1, [r7, #0]
 8001fc2:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	73fb      	strb	r3, [r7, #15]
  cli_t *p_cli = &cli_node;
 8001fc8:	4b0f      	ldr	r3, [pc, #60]	@ (8002008 <cliArgsIsStr+0x50>)
 8001fca:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8001fcc:	79fb      	ldrb	r3, [r7, #7]
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	@ 0x42c
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d301      	bcc.n	8001fde <cliArgsIsStr+0x26>
  {
    return 0;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	e010      	b.n	8002000 <cliArgsIsStr+0x48>
  }

  if(strcmp(p_str, p_cli->cmd_args.argv[index]) == 0)
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8001fe4:	79fb      	ldrb	r3, [r7, #7]
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	4413      	add	r3, r2
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4619      	mov	r1, r3
 8001fee:	6838      	ldr	r0, [r7, #0]
 8001ff0:	f7fe f8ae 	bl	8000150 <strcmp>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d101      	bne.n	8001ffe <cliArgsIsStr+0x46>
  {
    ret = true;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002000:	4618      	mov	r0, r3
 8002002:	3710      	adds	r7, #16
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	20000210 	.word	0x20000210

0800200c <cliKeepLoop>:

bool cliKeepLoop(void)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
  cli_t *p_cli = &cli_node;
 8002012:	4b04      	ldr	r3, [pc, #16]	@ (8002024 <cliKeepLoop+0x18>)
 8002014:	607b      	str	r3, [r7, #4]

  if(p_cli->ch != -1)
  {
    return true;
 8002016:	2301      	movs	r3, #1
  }
  else
  {
    return false;
  }
}
 8002018:	4618      	mov	r0, r3
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	bc80      	pop	{r7}
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	20000210 	.word	0x20000210

08002028 <cliAdd>:

bool cliAdd(const char *cmd_str, void (*p_func)(cli_args_t *))
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b086      	sub	sp, #24
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  bool ret = true;
 8002032:	2301      	movs	r3, #1
 8002034:	75fb      	strb	r3, [r7, #23]
  cli_t *p_cli = &cli_node;
 8002036:	4b20      	ldr	r3, [pc, #128]	@ (80020b8 <cliAdd+0x90>)
 8002038:	613b      	str	r3, [r7, #16]
  uint16_t index;

  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	@ 0x2e8
 8002040:	2b0f      	cmp	r3, #15
 8002042:	d901      	bls.n	8002048 <cliAdd+0x20>
  {
    return false;
 8002044:	2300      	movs	r3, #0
 8002046:	e032      	b.n	80020ae <cliAdd+0x86>
  }

  index = p_cli->cmd_count;
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	@ 0x2e8
 800204e:	81fb      	strh	r3, [r7, #14]

  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 8002050:	89fa      	ldrh	r2, [r7, #14]
 8002052:	4613      	mov	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	4413      	add	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 800205e:	693a      	ldr	r2, [r7, #16]
 8002060:	4413      	add	r3, r2
 8002062:	3304      	adds	r3, #4
 8002064:	6879      	ldr	r1, [r7, #4]
 8002066:	4618      	mov	r0, r3
 8002068:	f007 f973 	bl	8009352 <strcpy>
  p_cli->cmd_list[index].cmd_func = p_func;
 800206c:	89fa      	ldrh	r2, [r7, #14]
 800206e:	6939      	ldr	r1, [r7, #16]
 8002070:	4613      	mov	r3, r2
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	4413      	add	r3, r2
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	440b      	add	r3, r1
 800207a:	f503 733f 	add.w	r3, r3, #764	@ 0x2fc
 800207e:	683a      	ldr	r2, [r7, #0]
 8002080:	601a      	str	r2, [r3, #0]

  cliToUpper(p_cli->cmd_list[index].cmd_str);
 8002082:	89fa      	ldrh	r2, [r7, #14]
 8002084:	4613      	mov	r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	4413      	add	r3, r2
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	4413      	add	r3, r2
 8002094:	3304      	adds	r3, #4
 8002096:	4618      	mov	r0, r3
 8002098:	f7ff fee8 	bl	8001e6c <cliToUpper>

  p_cli->cmd_count++;
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	@ 0x2e8
 80020a2:	3301      	adds	r3, #1
 80020a4:	b29a      	uxth	r2, r3
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	f8a3 22e8 	strh.w	r2, [r3, #744]	@ 0x2e8

  return ret;
 80020ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3718      	adds	r7, #24
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	20000210 	.word	0x20000210

080020bc <cliShowList>:

void cliShowList(cli_args_t *args)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  cli_t *p_cli = &cli_node;
 80020c4:	4b15      	ldr	r3, [pc, #84]	@ (800211c <cliShowList+0x60>)
 80020c6:	60bb      	str	r3, [r7, #8]


  cliPrintf("\r\n");
 80020c8:	4815      	ldr	r0, [pc, #84]	@ (8002120 <cliShowList+0x64>)
 80020ca:	f7ff feab 	bl	8001e24 <cliPrintf>
  cliPrintf("---------- cmd list ---------\r\n");
 80020ce:	4815      	ldr	r0, [pc, #84]	@ (8002124 <cliShowList+0x68>)
 80020d0:	f7ff fea8 	bl	8001e24 <cliPrintf>

  for (int i=0; i<p_cli->cmd_count; i++)
 80020d4:	2300      	movs	r3, #0
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	e012      	b.n	8002100 <cliShowList+0x44>
  {
    cliPrintf(p_cli->cmd_list[i].cmd_str);
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	4613      	mov	r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	4413      	add	r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 80020e8:	68ba      	ldr	r2, [r7, #8]
 80020ea:	4413      	add	r3, r2
 80020ec:	3304      	adds	r3, #4
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7ff fe98 	bl	8001e24 <cliPrintf>
    cliPrintf("\r\n");
 80020f4:	480a      	ldr	r0, [pc, #40]	@ (8002120 <cliShowList+0x64>)
 80020f6:	f7ff fe95 	bl	8001e24 <cliPrintf>
  for (int i=0; i<p_cli->cmd_count; i++)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	3301      	adds	r3, #1
 80020fe:	60fb      	str	r3, [r7, #12]
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	@ 0x2e8
 8002106:	461a      	mov	r2, r3
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	4293      	cmp	r3, r2
 800210c:	dbe5      	blt.n	80020da <cliShowList+0x1e>
  }

  cliPrintf("-----------------------------\r\n");
 800210e:	4806      	ldr	r0, [pc, #24]	@ (8002128 <cliShowList+0x6c>)
 8002110:	f7ff fe88 	bl	8001e24 <cliPrintf>
}
 8002114:	bf00      	nop
 8002116:	3710      	adds	r7, #16
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	20000210 	.word	0x20000210
 8002120:	0800c328 	.word	0x0800c328
 8002124:	0800c32c 	.word	0x0800c32c
 8002128:	0800c34c 	.word	0x0800c34c

0800212c <cliMemoryDump>:

void cliMemoryDump(cli_args_t *args)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b08c      	sub	sp, #48	@ 0x30
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  int idx, size = 16;
 8002134:	2310      	movs	r3, #16
 8002136:	62bb      	str	r3, [r7, #40]	@ 0x28
  unsigned int *addr;
  int idx1, i;
  unsigned int *ascptr;
  unsigned char asc[4];

  int    argc = args->argc;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	881b      	ldrh	r3, [r3, #0]
 800213c:	617b      	str	r3, [r7, #20]
  char **argv = args->argv;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	613b      	str	r3, [r7, #16]


  if(args->argc < 1)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	881b      	ldrh	r3, [r3, #0]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d103      	bne.n	8002154 <cliMemoryDump+0x28>
  {
    cliPrintf(">> md addr [size] \n");
 800214c:	4840      	ldr	r0, [pc, #256]	@ (8002250 <cliMemoryDump+0x124>)
 800214e:	f7ff fe69 	bl	8001e24 <cliPrintf>
 8002152:	e07a      	b.n	800224a <cliMemoryDump+0x11e>
    return;
  }

  if(argc > 1)
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	2b01      	cmp	r3, #1
 8002158:	dd09      	ble.n	800216e <cliMemoryDump+0x42>
  {
    size = (int)strtoul((const char * ) argv[1], (char **)NULL, (int) 0);
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	3304      	adds	r3, #4
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2200      	movs	r2, #0
 8002162:	2100      	movs	r1, #0
 8002164:	4618      	mov	r0, r3
 8002166:	f006 f863 	bl	8008230 <strtoul>
 800216a:	4603      	mov	r3, r0
 800216c:	62bb      	str	r3, [r7, #40]	@ 0x28
  }
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2200      	movs	r2, #0
 8002174:	2100      	movs	r1, #0
 8002176:	4618      	mov	r0, r3
 8002178:	f006 f85a 	bl	8008230 <strtoul>
 800217c:	4603      	mov	r3, r0
 800217e:	627b      	str	r3, [r7, #36]	@ 0x24
  ascptr = (unsigned int *)addr;
 8002180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002182:	61bb      	str	r3, [r7, #24]

  cliPrintf("\n   ");
 8002184:	4833      	ldr	r0, [pc, #204]	@ (8002254 <cliMemoryDump+0x128>)
 8002186:	f7ff fe4d 	bl	8001e24 <cliPrintf>
  for (idx = 0; idx<size; idx++)
 800218a:	2300      	movs	r3, #0
 800218c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800218e:	e058      	b.n	8002242 <cliMemoryDump+0x116>
  {
    if((idx%4) == 0)
 8002190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002192:	f003 0303 	and.w	r3, r3, #3
 8002196:	2b00      	cmp	r3, #0
 8002198:	d104      	bne.n	80021a4 <cliMemoryDump+0x78>
    {
      cliPrintf(" 0x%08X: ", (unsigned int)addr);
 800219a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800219c:	4619      	mov	r1, r3
 800219e:	482e      	ldr	r0, [pc, #184]	@ (8002258 <cliMemoryDump+0x12c>)
 80021a0:	f7ff fe40 	bl	8001e24 <cliPrintf>
    }
    cliPrintf(" 0x%08X", *(addr));
 80021a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4619      	mov	r1, r3
 80021aa:	482c      	ldr	r0, [pc, #176]	@ (800225c <cliMemoryDump+0x130>)
 80021ac:	f7ff fe3a 	bl	8001e24 <cliPrintf>

    if ((idx%4) == 3)
 80021b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021b2:	425a      	negs	r2, r3
 80021b4:	f003 0303 	and.w	r3, r3, #3
 80021b8:	f002 0203 	and.w	r2, r2, #3
 80021bc:	bf58      	it	pl
 80021be:	4253      	negpl	r3, r2
 80021c0:	2b03      	cmp	r3, #3
 80021c2:	d138      	bne.n	8002236 <cliMemoryDump+0x10a>
    {
      cliPrintf ("  |");
 80021c4:	4826      	ldr	r0, [pc, #152]	@ (8002260 <cliMemoryDump+0x134>)
 80021c6:	f7ff fe2d 	bl	8001e24 <cliPrintf>
      for (idx1= 0; idx1< 4; idx1++)
 80021ca:	2300      	movs	r3, #0
 80021cc:	623b      	str	r3, [r7, #32]
 80021ce:	e02c      	b.n	800222a <cliMemoryDump+0xfe>
      {
        memcpy((char *)asc, (char *)ascptr, 4);
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	60fb      	str	r3, [r7, #12]
        for (i=0;i<4;i++)
 80021d6:	2300      	movs	r3, #0
 80021d8:	61fb      	str	r3, [r7, #28]
 80021da:	e01d      	b.n	8002218 <cliMemoryDump+0xec>
        {
          if (asc[i] > 0x1f && asc[i] < 0x7f)
 80021dc:	f107 020c 	add.w	r2, r7, #12
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	4413      	add	r3, r2
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	2b1f      	cmp	r3, #31
 80021e8:	d910      	bls.n	800220c <cliMemoryDump+0xe0>
 80021ea:	f107 020c 	add.w	r2, r7, #12
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	4413      	add	r3, r2
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	2b7e      	cmp	r3, #126	@ 0x7e
 80021f6:	d809      	bhi.n	800220c <cliMemoryDump+0xe0>
          {
            cliPrintf("%c", asc[i]);
 80021f8:	f107 020c 	add.w	r2, r7, #12
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	4413      	add	r3, r2
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	4619      	mov	r1, r3
 8002204:	4817      	ldr	r0, [pc, #92]	@ (8002264 <cliMemoryDump+0x138>)
 8002206:	f7ff fe0d 	bl	8001e24 <cliPrintf>
 800220a:	e002      	b.n	8002212 <cliMemoryDump+0xe6>
          }
          else
          {
            cliPrintf(".");
 800220c:	4816      	ldr	r0, [pc, #88]	@ (8002268 <cliMemoryDump+0x13c>)
 800220e:	f7ff fe09 	bl	8001e24 <cliPrintf>
        for (i=0;i<4;i++)
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	3301      	adds	r3, #1
 8002216:	61fb      	str	r3, [r7, #28]
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	2b03      	cmp	r3, #3
 800221c:	ddde      	ble.n	80021dc <cliMemoryDump+0xb0>
          }
        }
        ascptr+=1;
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	3304      	adds	r3, #4
 8002222:	61bb      	str	r3, [r7, #24]
      for (idx1= 0; idx1< 4; idx1++)
 8002224:	6a3b      	ldr	r3, [r7, #32]
 8002226:	3301      	adds	r3, #1
 8002228:	623b      	str	r3, [r7, #32]
 800222a:	6a3b      	ldr	r3, [r7, #32]
 800222c:	2b03      	cmp	r3, #3
 800222e:	ddcf      	ble.n	80021d0 <cliMemoryDump+0xa4>
      }
      cliPrintf("|\n   ");
 8002230:	480e      	ldr	r0, [pc, #56]	@ (800226c <cliMemoryDump+0x140>)
 8002232:	f7ff fdf7 	bl	8001e24 <cliPrintf>
    }
    addr++;
 8002236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002238:	3304      	adds	r3, #4
 800223a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (idx = 0; idx<size; idx++)
 800223c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800223e:	3301      	adds	r3, #1
 8002240:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002242:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002246:	429a      	cmp	r2, r3
 8002248:	dba2      	blt.n	8002190 <cliMemoryDump+0x64>
  }
}
 800224a:	3730      	adds	r7, #48	@ 0x30
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	0800c36c 	.word	0x0800c36c
 8002254:	0800c380 	.word	0x0800c380
 8002258:	0800c388 	.word	0x0800c388
 800225c:	0800c394 	.word	0x0800c394
 8002260:	0800c39c 	.word	0x0800c39c
 8002264:	0800c3a0 	.word	0x0800c3a0
 8002268:	0800c3a4 	.word	0x0800c3a4
 800226c:	0800c3a8 	.word	0x0800c3a8

08002270 <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	4603      	mov	r3, r0
 8002278:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 800227a:	2300      	movs	r3, #0
 800227c:	60fb      	str	r3, [r7, #12]

  switch(ch)
 800227e:	79fb      	ldrb	r3, [r7, #7]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d017      	beq.n	80022b4 <uartAvailable+0x44>
 8002284:	2b01      	cmp	r3, #1
 8002286:	d116      	bne.n	80022b6 <uartAvailable+0x46>
    case CH_CDC:
      //ret = cdcAvailable();
      break;

    case CH_USART1:
      qbuffer.in = (qbuffer.len - hdma_usart1_rx.Instance->CNDTR);
 8002288:	4b0e      	ldr	r3, [pc, #56]	@ (80022c4 <uartAvailable+0x54>)
 800228a:	689a      	ldr	r2, [r3, #8]
 800228c:	4b0e      	ldr	r3, [pc, #56]	@ (80022c8 <uartAvailable+0x58>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	4a0b      	ldr	r2, [pc, #44]	@ (80022c4 <uartAvailable+0x54>)
 8002296:	6013      	str	r3, [r2, #0]
      ret = (qbuffer.in - qbuffer.out) % qbuffer.len;
 8002298:	4b0a      	ldr	r3, [pc, #40]	@ (80022c4 <uartAvailable+0x54>)
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	4b09      	ldr	r3, [pc, #36]	@ (80022c4 <uartAvailable+0x54>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	4a08      	ldr	r2, [pc, #32]	@ (80022c4 <uartAvailable+0x54>)
 80022a4:	6892      	ldr	r2, [r2, #8]
 80022a6:	fbb3 f1f2 	udiv	r1, r3, r2
 80022aa:	fb01 f202 	mul.w	r2, r1, r2
 80022ae:	1a9b      	subs	r3, r3, r2
 80022b0:	60fb      	str	r3, [r7, #12]
      break;
 80022b2:	e000      	b.n	80022b6 <uartAvailable+0x46>
      break;
 80022b4:	bf00      	nop
  }

  return ret;
 80022b6:	68fb      	ldr	r3, [r7, #12]
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3714      	adds	r7, #20
 80022bc:	46bd      	mov	sp, r7
 80022be:	bc80      	pop	{r7}
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	20000654 	.word	0x20000654
 80022c8:	200008e0 	.word	0x200008e0

080022cc <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
 80022cc:	b40e      	push	{r1, r2, r3}
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b0c7      	sub	sp, #284	@ 0x11c
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	4602      	mov	r2, r0
 80022d6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80022da:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 80022de:	701a      	strb	r2, [r3, #0]
  char buf[256];
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
 80022e0:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 80022e4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80022e8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80022ec:	601a      	str	r2, [r3, #0]
  len = vsnprintf(buf, 256, fmt, args);
 80022ee:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80022f2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80022f6:	f107 0010 	add.w	r0, r7, #16
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8002300:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002304:	f006 ff5a 	bl	80091bc <vsniprintf>
 8002308:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

  ret = uartWrite(ch, (uint8_t *)buf, len);
 800230c:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002310:	f107 0110 	add.w	r1, r7, #16
 8002314:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002318:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	4618      	mov	r0, r3
 8002320:	f000 f80c 	bl	800233c <uartWrite>
 8002324:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

  va_end(args);


  return ret;
 8002328:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 800232c:	4618      	mov	r0, r3
 800232e:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 8002332:	46bd      	mov	sp, r7
 8002334:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002338:	b003      	add	sp, #12
 800233a:	4770      	bx	lr

0800233c <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af00      	add	r7, sp, #0
 8002342:	4603      	mov	r3, r0
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	607a      	str	r2, [r7, #4]
 8002348:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 800234a:	2300      	movs	r3, #0
 800234c:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  if(ch == CH_CDC)
 800234e:	7bfb      	ldrb	r3, [r7, #15]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d010      	beq.n	8002376 <uartWrite+0x3a>
  {
    //ret = cdcWrite(p_data, length);
  }
  else if(ch == CH_USART1)
 8002354:	7bfb      	ldrb	r3, [r7, #15]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d10d      	bne.n	8002376 <uartWrite+0x3a>
  {
    status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	b29a      	uxth	r2, r3
 800235e:	2364      	movs	r3, #100	@ 0x64
 8002360:	68b9      	ldr	r1, [r7, #8]
 8002362:	4807      	ldr	r0, [pc, #28]	@ (8002380 <uartWrite+0x44>)
 8002364:	f004 f8ea 	bl	800653c <HAL_UART_Transmit>
 8002368:	4603      	mov	r3, r0
 800236a:	74fb      	strb	r3, [r7, #19]
    if (status == HAL_OK)
 800236c:	7cfb      	ldrb	r3, [r7, #19]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <uartWrite+0x3a>
    {
      ret = length;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8002376:	697b      	ldr	r3, [r7, #20]
}
 8002378:	4618      	mov	r0, r3
 800237a:	3718      	adds	r7, #24
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	20000850 	.word	0x20000850

08002384 <uartRead>:

uint8_t uartRead(uint8_t ch)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	4603      	mov	r3, r0
 800238c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = 0;
 800238e:	2300      	movs	r3, #0
 8002390:	73fb      	strb	r3, [r7, #15]

  if(ch == CH_CDC)
 8002392:	79fb      	ldrb	r3, [r7, #7]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d009      	beq.n	80023ac <uartRead+0x28>
  {
    //data = cdcRead();
  }
  else if(ch == CH_USART1)
 8002398:	79fb      	ldrb	r3, [r7, #7]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d106      	bne.n	80023ac <uartRead+0x28>
  {
     qbufferRead(&qbuffer, &data,1);
 800239e:	f107 030f 	add.w	r3, r7, #15
 80023a2:	2201      	movs	r2, #1
 80023a4:	4619      	mov	r1, r3
 80023a6:	4804      	ldr	r0, [pc, #16]	@ (80023b8 <uartRead+0x34>)
 80023a8:	f000 f808 	bl	80023bc <qbufferRead>
  }

  return data;
 80023ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	20000654 	.word	0x20000654

080023bc <qbufferRead>:

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 80023bc:	b480      	push	{r7}
 80023be:	b087      	sub	sp, #28
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	607a      	str	r2, [r7, #4]
  bool ret = true;
 80023c8:	2301      	movs	r3, #1
 80023ca:	75fb      	strb	r3, [r7, #23]

  for(int i=0; i<length; i++)
 80023cc:	2300      	movs	r3, #0
 80023ce:	613b      	str	r3, [r7, #16]
 80023d0:	e026      	b.n	8002420 <qbufferRead+0x64>
  {
    if(p_node->p_buf != NULL)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d009      	beq.n	80023ee <qbufferRead+0x32>
    {
      p_data[i] = p_node->p_buf[p_node->out];
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	68da      	ldr	r2, [r3, #12]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	441a      	add	r2, r3
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	68b9      	ldr	r1, [r7, #8]
 80023e8:	440b      	add	r3, r1
 80023ea:	7812      	ldrb	r2, [r2, #0]
 80023ec:	701a      	strb	r2, [r3, #0]
    }

    if(p_node->out != p_node->in)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	685a      	ldr	r2, [r3, #4]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d00c      	beq.n	8002414 <qbufferRead+0x58>
    {
      p_node->out = (p_node->out + 1) % p_node->len;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	3301      	adds	r3, #1
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	6892      	ldr	r2, [r2, #8]
 8002404:	fbb3 f1f2 	udiv	r1, r3, r2
 8002408:	fb01 f202 	mul.w	r2, r1, r2
 800240c:	1a9a      	subs	r2, r3, r2
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	605a      	str	r2, [r3, #4]
 8002412:	e002      	b.n	800241a <qbufferRead+0x5e>
    }
    else
    {
      ret = false;
 8002414:	2300      	movs	r3, #0
 8002416:	75fb      	strb	r3, [r7, #23]
      break;
 8002418:	e006      	b.n	8002428 <qbufferRead+0x6c>
  for(int i=0; i<length; i++)
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	3301      	adds	r3, #1
 800241e:	613b      	str	r3, [r7, #16]
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	429a      	cmp	r2, r3
 8002426:	d8d4      	bhi.n	80023d2 <qbufferRead+0x16>
    }
  }

  return ret;
 8002428:	7dfb      	ldrb	r3, [r7, #23]
}
 800242a:	4618      	mov	r0, r3
 800242c:	371c      	adds	r7, #28
 800242e:	46bd      	mov	sp, r7
 8002430:	bc80      	pop	{r7}
 8002432:	4770      	bx	lr

08002434 <ComplementaryFilter_Init>:

#include "complementary_filter.h"


void ComplementaryFilter_Init(ComplementaryFilter *cf, float alpha, float initial_angle)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
  cf->alpha = alpha;  // 상보 필터 계수 설정
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	68ba      	ldr	r2, [r7, #8]
 8002444:	605a      	str	r2, [r3, #4]
  cf->angle = initial_angle;  // 초기 각도 값 설정
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	601a      	str	r2, [r3, #0]
}
 800244c:	bf00      	nop
 800244e:	3714      	adds	r7, #20
 8002450:	46bd      	mov	sp, r7
 8002452:	bc80      	pop	{r7}
 8002454:	4770      	bx	lr

08002456 <ComplementaryFilter_Update>:

float ComplementaryFilter_Update(ComplementaryFilter *cf,
                                 float accel_angle,
                                 float gyro_rate,
                                 float dt)
{
 8002456:	b5b0      	push	{r4, r5, r7, lr}
 8002458:	b084      	sub	sp, #16
 800245a:	af00      	add	r7, sp, #0
 800245c:	60f8      	str	r0, [r7, #12]
 800245e:	60b9      	str	r1, [r7, #8]
 8002460:	607a      	str	r2, [r7, #4]
 8002462:	603b      	str	r3, [r7, #0]
  // 상보 필터 방정식: 필터링된 각도 = (자이로 각속도 기반 각도) + (가속도계 기반 각도)
  cf->angle = cf->alpha * (cf->angle + gyro_rate * dt) + (1.0f - cf->alpha) * accel_angle;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	685c      	ldr	r4, [r3, #4]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681d      	ldr	r5, [r3, #0]
 800246c:	6839      	ldr	r1, [r7, #0]
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f7fe fc92 	bl	8000d98 <__aeabi_fmul>
 8002474:	4603      	mov	r3, r0
 8002476:	4619      	mov	r1, r3
 8002478:	4628      	mov	r0, r5
 800247a:	f7fe fb85 	bl	8000b88 <__addsf3>
 800247e:	4603      	mov	r3, r0
 8002480:	4619      	mov	r1, r3
 8002482:	4620      	mov	r0, r4
 8002484:	f7fe fc88 	bl	8000d98 <__aeabi_fmul>
 8002488:	4603      	mov	r3, r0
 800248a:	461c      	mov	r4, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	4619      	mov	r1, r3
 8002492:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8002496:	f7fe fb75 	bl	8000b84 <__aeabi_fsub>
 800249a:	4603      	mov	r3, r0
 800249c:	68b9      	ldr	r1, [r7, #8]
 800249e:	4618      	mov	r0, r3
 80024a0:	f7fe fc7a 	bl	8000d98 <__aeabi_fmul>
 80024a4:	4603      	mov	r3, r0
 80024a6:	4619      	mov	r1, r3
 80024a8:	4620      	mov	r0, r4
 80024aa:	f7fe fb6d 	bl	8000b88 <__addsf3>
 80024ae:	4603      	mov	r3, r0
 80024b0:	461a      	mov	r2, r3
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	601a      	str	r2, [r3, #0]
  return cf->angle;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bdb0      	pop	{r4, r5, r7, pc}

080024c2 <dataProcessingInit>:

int32_t prev_wheel = 0;


void dataProcessingInit()
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	af00      	add	r7, sp, #0
  // Initialize filters.
  filterInit();
 80024c6:	f000 f803 	bl	80024d0 <filterInit>
}
 80024ca:	bf00      	nop
 80024cc:	bd80      	pop	{r7, pc}
	...

080024d0 <filterInit>:

// Initialize kalman filter and complementary filter.
void filterInit()
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
    KalmanFilter_Init(&kf_z, 0.01f, 0.1f, 0.0f);
 80024d4:	f04f 0300 	mov.w	r3, #0
 80024d8:	4a0c      	ldr	r2, [pc, #48]	@ (800250c <filterInit+0x3c>)
 80024da:	490d      	ldr	r1, [pc, #52]	@ (8002510 <filterInit+0x40>)
 80024dc:	480d      	ldr	r0, [pc, #52]	@ (8002514 <filterInit+0x44>)
 80024de:	f000 faa3 	bl	8002a28 <KalmanFilter_Init>
    KalmanFilter_Init(&kf_y, 0.01f, 0.1f, 0.0f);
 80024e2:	f04f 0300 	mov.w	r3, #0
 80024e6:	4a09      	ldr	r2, [pc, #36]	@ (800250c <filterInit+0x3c>)
 80024e8:	4909      	ldr	r1, [pc, #36]	@ (8002510 <filterInit+0x40>)
 80024ea:	480b      	ldr	r0, [pc, #44]	@ (8002518 <filterInit+0x48>)
 80024ec:	f000 fa9c 	bl	8002a28 <KalmanFilter_Init>
    ComplementaryFilter_Init(&cf_z, 0.98f, 0.0f);
 80024f0:	f04f 0200 	mov.w	r2, #0
 80024f4:	4909      	ldr	r1, [pc, #36]	@ (800251c <filterInit+0x4c>)
 80024f6:	480a      	ldr	r0, [pc, #40]	@ (8002520 <filterInit+0x50>)
 80024f8:	f7ff ff9c 	bl	8002434 <ComplementaryFilter_Init>
    ComplementaryFilter_Init(&cf_y, 0.98f, 0.0f);
 80024fc:	f04f 0200 	mov.w	r2, #0
 8002500:	4906      	ldr	r1, [pc, #24]	@ (800251c <filterInit+0x4c>)
 8002502:	4808      	ldr	r0, [pc, #32]	@ (8002524 <filterInit+0x54>)
 8002504:	f7ff ff96 	bl	8002434 <ComplementaryFilter_Init>
}
 8002508:	bf00      	nop
 800250a:	bd80      	pop	{r7, pc}
 800250c:	3dcccccd 	.word	0x3dcccccd
 8002510:	3c23d70a 	.word	0x3c23d70a
 8002514:	20000774 	.word	0x20000774
 8002518:	20000788 	.word	0x20000788
 800251c:	3f7ae148 	.word	0x3f7ae148
 8002520:	2000079c 	.word	0x2000079c
 8002524:	200007a4 	.word	0x200007a4

08002528 <calculateMouseX>:

// X-axis movement can be obtained wity yaw.
int8_t calculateMouseX()
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b086      	sub	sp, #24
 800252c:	af00      	add	r7, sp, #0
  // Read MPU6050 Datasheet.
  float gz = (float)raw_gz / 32.8;
 800252e:	4b20      	ldr	r3, [pc, #128]	@ (80025b0 <calculateMouseX+0x88>)
 8002530:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002534:	4618      	mov	r0, r3
 8002536:	f7fe fbdb 	bl	8000cf0 <__aeabi_i2f>
 800253a:	4603      	mov	r3, r0
 800253c:	4618      	mov	r0, r3
 800253e:	f7fd ff7d 	bl	800043c <__aeabi_f2d>
 8002542:	a319      	add	r3, pc, #100	@ (adr r3, 80025a8 <calculateMouseX+0x80>)
 8002544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002548:	f7fe f8fa 	bl	8000740 <__aeabi_ddiv>
 800254c:	4602      	mov	r2, r0
 800254e:	460b      	mov	r3, r1
 8002550:	4610      	mov	r0, r2
 8002552:	4619      	mov	r1, r3
 8002554:	f7fe fac2 	bl	8000adc <__aeabi_d2f>
 8002558:	4603      	mov	r3, r0
 800255a:	617b      	str	r3, [r7, #20]

  // Calculate yaw (rad)
  float yaw = gz * TIME_INTERVAL;
 800255c:	4915      	ldr	r1, [pc, #84]	@ (80025b4 <calculateMouseX+0x8c>)
 800255e:	6978      	ldr	r0, [r7, #20]
 8002560:	f7fe fc1a 	bl	8000d98 <__aeabi_fmul>
 8002564:	4603      	mov	r3, r0
 8002566:	613b      	str	r3, [r7, #16]

  // Apply complementary filter
  float c_filtered_yaw = ComplementaryFilter_Update(&cf_z, yaw, gz, TIME_INTERVAL);
 8002568:	4b12      	ldr	r3, [pc, #72]	@ (80025b4 <calculateMouseX+0x8c>)
 800256a:	697a      	ldr	r2, [r7, #20]
 800256c:	6939      	ldr	r1, [r7, #16]
 800256e:	4812      	ldr	r0, [pc, #72]	@ (80025b8 <calculateMouseX+0x90>)
 8002570:	f7ff ff71 	bl	8002456 <ComplementaryFilter_Update>
 8002574:	60f8      	str	r0, [r7, #12]

  // Apply kalman filter
  float k_filtered_yaw = KalmanFilter_Update(&kf_z, c_filtered_yaw);
 8002576:	68f9      	ldr	r1, [r7, #12]
 8002578:	4810      	ldr	r0, [pc, #64]	@ (80025bc <calculateMouseX+0x94>)
 800257a:	f000 fa72 	bl	8002a62 <KalmanFilter_Update>
 800257e:	60b8      	str	r0, [r7, #8]

  // Apply SENSITIVITY
  float mouse_x = k_filtered_yaw * SCALE_X * (-1);
 8002580:	4b0f      	ldr	r3, [pc, #60]	@ (80025c0 <calculateMouseX+0x98>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68b9      	ldr	r1, [r7, #8]
 8002586:	4618      	mov	r0, r3
 8002588:	f7fe fc06 	bl	8000d98 <__aeabi_fmul>
 800258c:	4603      	mov	r3, r0
 800258e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002592:	607b      	str	r3, [r7, #4]

  return mouse_x;
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f7fe fddb 	bl	8001150 <__aeabi_f2iz>
 800259a:	4603      	mov	r3, r0
 800259c:	b25b      	sxtb	r3, r3
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3718      	adds	r7, #24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	66666666 	.word	0x66666666
 80025ac:	40406666 	.word	0x40406666
 80025b0:	2000076e 	.word	0x2000076e
 80025b4:	3dcccccd 	.word	0x3dcccccd
 80025b8:	2000079c 	.word	0x2000079c
 80025bc:	20000774 	.word	0x20000774
 80025c0:	20000004 	.word	0x20000004
 80025c4:	00000000 	.word	0x00000000

080025c8 <calculateMouseY>:

// Y-axis movement can be obtained with roll.
int8_t calculateMouseY()
{
 80025c8:	b590      	push	{r4, r7, lr}
 80025ca:	b089      	sub	sp, #36	@ 0x24
 80025cc:	af00      	add	r7, sp, #0
  // Read MPU6050 Datasheet.
  float ax = (float)raw_ax / 4096;
 80025ce:	4b3e      	ldr	r3, [pc, #248]	@ (80026c8 <calculateMouseY+0x100>)
 80025d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7fe fb8b 	bl	8000cf0 <__aeabi_i2f>
 80025da:	4603      	mov	r3, r0
 80025dc:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7fe fc8d 	bl	8000f00 <__aeabi_fdiv>
 80025e6:	4603      	mov	r3, r0
 80025e8:	61fb      	str	r3, [r7, #28]
  float ay = (float)raw_ay / 4096;
 80025ea:	4b38      	ldr	r3, [pc, #224]	@ (80026cc <calculateMouseY+0x104>)
 80025ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7fe fb7d 	bl	8000cf0 <__aeabi_i2f>
 80025f6:	4603      	mov	r3, r0
 80025f8:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7fe fc7f 	bl	8000f00 <__aeabi_fdiv>
 8002602:	4603      	mov	r3, r0
 8002604:	61bb      	str	r3, [r7, #24]
  float az = (float)raw_az / 4096;
 8002606:	4b32      	ldr	r3, [pc, #200]	@ (80026d0 <calculateMouseY+0x108>)
 8002608:	f9b3 3000 	ldrsh.w	r3, [r3]
 800260c:	4618      	mov	r0, r3
 800260e:	f7fe fb6f 	bl	8000cf0 <__aeabi_i2f>
 8002612:	4603      	mov	r3, r0
 8002614:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 8002618:	4618      	mov	r0, r3
 800261a:	f7fe fc71 	bl	8000f00 <__aeabi_fdiv>
 800261e:	4603      	mov	r3, r0
 8002620:	617b      	str	r3, [r7, #20]
  float gy = (float)raw_gy / 32.8;
 8002622:	4b2c      	ldr	r3, [pc, #176]	@ (80026d4 <calculateMouseY+0x10c>)
 8002624:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002628:	4618      	mov	r0, r3
 800262a:	f7fe fb61 	bl	8000cf0 <__aeabi_i2f>
 800262e:	4603      	mov	r3, r0
 8002630:	4618      	mov	r0, r3
 8002632:	f7fd ff03 	bl	800043c <__aeabi_f2d>
 8002636:	a322      	add	r3, pc, #136	@ (adr r3, 80026c0 <calculateMouseY+0xf8>)
 8002638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800263c:	f7fe f880 	bl	8000740 <__aeabi_ddiv>
 8002640:	4602      	mov	r2, r0
 8002642:	460b      	mov	r3, r1
 8002644:	4610      	mov	r0, r2
 8002646:	4619      	mov	r1, r3
 8002648:	f7fe fa48 	bl	8000adc <__aeabi_d2f>
 800264c:	4603      	mov	r3, r0
 800264e:	613b      	str	r3, [r7, #16]

  // Calculate roll (rad)
  float roll = atan2f(ax, sqrtf(ay * ay + az * az));
 8002650:	69b9      	ldr	r1, [r7, #24]
 8002652:	69b8      	ldr	r0, [r7, #24]
 8002654:	f7fe fba0 	bl	8000d98 <__aeabi_fmul>
 8002658:	4603      	mov	r3, r0
 800265a:	461c      	mov	r4, r3
 800265c:	6979      	ldr	r1, [r7, #20]
 800265e:	6978      	ldr	r0, [r7, #20]
 8002660:	f7fe fb9a 	bl	8000d98 <__aeabi_fmul>
 8002664:	4603      	mov	r3, r0
 8002666:	4619      	mov	r1, r3
 8002668:	4620      	mov	r0, r4
 800266a:	f7fe fa8d 	bl	8000b88 <__addsf3>
 800266e:	4603      	mov	r3, r0
 8002670:	4618      	mov	r0, r3
 8002672:	f009 fbad 	bl	800bdd0 <sqrtf>
 8002676:	4603      	mov	r3, r0
 8002678:	4619      	mov	r1, r3
 800267a:	69f8      	ldr	r0, [r7, #28]
 800267c:	f009 fba6 	bl	800bdcc <atan2f>
 8002680:	60f8      	str	r0, [r7, #12]

  // Apply complementary filter
  float c_filtered_roll = ComplementaryFilter_Update(&cf_y, roll, gy, (float)TIME_INTERVAL);
 8002682:	4b15      	ldr	r3, [pc, #84]	@ (80026d8 <calculateMouseY+0x110>)
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	68f9      	ldr	r1, [r7, #12]
 8002688:	4814      	ldr	r0, [pc, #80]	@ (80026dc <calculateMouseY+0x114>)
 800268a:	f7ff fee4 	bl	8002456 <ComplementaryFilter_Update>
 800268e:	60b8      	str	r0, [r7, #8]

  // Apply kalman filter
  float k_filtered_roll = KalmanFilter_Update(&kf_y, c_filtered_roll);
 8002690:	68b9      	ldr	r1, [r7, #8]
 8002692:	4813      	ldr	r0, [pc, #76]	@ (80026e0 <calculateMouseY+0x118>)
 8002694:	f000 f9e5 	bl	8002a62 <KalmanFilter_Update>
 8002698:	6078      	str	r0, [r7, #4]

  // Apply SENSITIVITY
  float mouse_y = k_filtered_roll * SCALE_Y;
 800269a:	4b12      	ldr	r3, [pc, #72]	@ (80026e4 <calculateMouseY+0x11c>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4619      	mov	r1, r3
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f7fe fb79 	bl	8000d98 <__aeabi_fmul>
 80026a6:	4603      	mov	r3, r0
 80026a8:	603b      	str	r3, [r7, #0]

  return mouse_y;
 80026aa:	6838      	ldr	r0, [r7, #0]
 80026ac:	f7fe fd50 	bl	8001150 <__aeabi_f2iz>
 80026b0:	4603      	mov	r3, r0
 80026b2:	b25b      	sxtb	r3, r3
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3724      	adds	r7, #36	@ 0x24
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd90      	pop	{r4, r7, pc}
 80026bc:	f3af 8000 	nop.w
 80026c0:	66666666 	.word	0x66666666
 80026c4:	40406666 	.word	0x40406666
 80026c8:	20000764 	.word	0x20000764
 80026cc:	20000766 	.word	0x20000766
 80026d0:	20000768 	.word	0x20000768
 80026d4:	2000076c 	.word	0x2000076c
 80026d8:	3dcccccd 	.word	0x3dcccccd
 80026dc:	200007a4 	.word	0x200007a4
 80026e0:	20000788 	.word	0x20000788
 80026e4:	20000008 	.word	0x20000008

080026e8 <calculateMouseWheel>:

int8_t calculateMouseWheel()
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
  int32_t curr_wheel = __HAL_TIM_GET_COUNTER(&htim3);
 80026ee:	4b22      	ldr	r3, [pc, #136]	@ (8002778 <calculateMouseWheel+0x90>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f4:	607b      	str	r3, [r7, #4]
  int32_t wheel_move = 0;
 80026f6:	2300      	movs	r3, #0
 80026f8:	603b      	str	r3, [r7, #0]

  // wrap-around 처리 (128 -> 0 or 0 -> 128)
  if (curr_wheel == 0 && prev_wheel == 128)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d108      	bne.n	8002712 <calculateMouseWheel+0x2a>
 8002700:	4b1e      	ldr	r3, [pc, #120]	@ (800277c <calculateMouseWheel+0x94>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2b80      	cmp	r3, #128	@ 0x80
 8002706:	d104      	bne.n	8002712 <calculateMouseWheel+0x2a>
  {
    prev_wheel = curr_wheel;
 8002708:	4a1c      	ldr	r2, [pc, #112]	@ (800277c <calculateMouseWheel+0x94>)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6013      	str	r3, [r2, #0]
    return 1;  // 시계 방향 회전, 휠 위로 스크롤
 800270e:	2301      	movs	r3, #1
 8002710:	e02c      	b.n	800276c <calculateMouseWheel+0x84>
  }
  else if (curr_wheel == 128 && prev_wheel == 0)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2b80      	cmp	r3, #128	@ 0x80
 8002716:	d109      	bne.n	800272c <calculateMouseWheel+0x44>
 8002718:	4b18      	ldr	r3, [pc, #96]	@ (800277c <calculateMouseWheel+0x94>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d105      	bne.n	800272c <calculateMouseWheel+0x44>
  {
    prev_wheel = curr_wheel;
 8002720:	4a16      	ldr	r2, [pc, #88]	@ (800277c <calculateMouseWheel+0x94>)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6013      	str	r3, [r2, #0]
    return -1;  // 반시계 방향 회전, 휠 아래로 스크롤
 8002726:	f04f 33ff 	mov.w	r3, #4294967295
 800272a:	e01f      	b.n	800276c <calculateMouseWheel+0x84>
  }

  // 일반적인 값 증가/감소 처리
  if (curr_wheel > prev_wheel)
 800272c:	4b13      	ldr	r3, [pc, #76]	@ (800277c <calculateMouseWheel+0x94>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	429a      	cmp	r2, r3
 8002734:	dd09      	ble.n	800274a <calculateMouseWheel+0x62>
  {
    wheel_move = curr_wheel - prev_wheel;
 8002736:	4b11      	ldr	r3, [pc, #68]	@ (800277c <calculateMouseWheel+0x94>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	603b      	str	r3, [r7, #0]
    prev_wheel = curr_wheel;
 8002740:	4a0e      	ldr	r2, [pc, #56]	@ (800277c <calculateMouseWheel+0x94>)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6013      	str	r3, [r2, #0]
    return 1;  // 휠 위로 스크롤
 8002746:	2301      	movs	r3, #1
 8002748:	e010      	b.n	800276c <calculateMouseWheel+0x84>
  }
  else if (curr_wheel < prev_wheel)
 800274a:	4b0c      	ldr	r3, [pc, #48]	@ (800277c <calculateMouseWheel+0x94>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	429a      	cmp	r2, r3
 8002752:	da0a      	bge.n	800276a <calculateMouseWheel+0x82>
  {
    wheel_move = curr_wheel - prev_wheel;
 8002754:	4b09      	ldr	r3, [pc, #36]	@ (800277c <calculateMouseWheel+0x94>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	603b      	str	r3, [r7, #0]
    prev_wheel = curr_wheel;
 800275e:	4a07      	ldr	r2, [pc, #28]	@ (800277c <calculateMouseWheel+0x94>)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6013      	str	r3, [r2, #0]
    return -1;  // 휠 아래로 스크롤
 8002764:	f04f 33ff 	mov.w	r3, #4294967295
 8002768:	e000      	b.n	800276c <calculateMouseWheel+0x84>
  }

  // 변화가 없을 때
  return 0;
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	bc80      	pop	{r7}
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	20000808 	.word	0x20000808
 800277c:	200007ac 	.word	0x200007ac

08002780 <readData>:

void readData()
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af04      	add	r7, sp, #16
  // Read MPU6050 data.
  MPU6050_GetData(&raw_ax, &raw_ay, &raw_az, &raw_gx, &raw_gy, &raw_gz, &raw_temp);
 8002786:	4b0b      	ldr	r3, [pc, #44]	@ (80027b4 <readData+0x34>)
 8002788:	9302      	str	r3, [sp, #8]
 800278a:	4b0b      	ldr	r3, [pc, #44]	@ (80027b8 <readData+0x38>)
 800278c:	9301      	str	r3, [sp, #4]
 800278e:	4b0b      	ldr	r3, [pc, #44]	@ (80027bc <readData+0x3c>)
 8002790:	9300      	str	r3, [sp, #0]
 8002792:	4b0b      	ldr	r3, [pc, #44]	@ (80027c0 <readData+0x40>)
 8002794:	4a0b      	ldr	r2, [pc, #44]	@ (80027c4 <readData+0x44>)
 8002796:	490c      	ldr	r1, [pc, #48]	@ (80027c8 <readData+0x48>)
 8002798:	480c      	ldr	r0, [pc, #48]	@ (80027cc <readData+0x4c>)
 800279a:	f000 fb75 	bl	8002e88 <MPU6050_GetData>

  // Read button data
  buttonRead(LEFT_BTN_GPIO_Port, LEFT_BTN_Pin);
 800279e:	2110      	movs	r1, #16
 80027a0:	480b      	ldr	r0, [pc, #44]	@ (80027d0 <readData+0x50>)
 80027a2:	f7fe fd6f 	bl	8001284 <buttonRead>
  buttonRead(RIGHT_BTN_GPIO_Port, RIGHT_BTN_Pin);
 80027a6:	2108      	movs	r1, #8
 80027a8:	4809      	ldr	r0, [pc, #36]	@ (80027d0 <readData+0x50>)
 80027aa:	f7fe fd6b 	bl	8001284 <buttonRead>

}
 80027ae:	bf00      	nop
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	20000770 	.word	0x20000770
 80027b8:	2000076e 	.word	0x2000076e
 80027bc:	2000076c 	.word	0x2000076c
 80027c0:	2000076a 	.word	0x2000076a
 80027c4:	20000768 	.word	0x20000768
 80027c8:	20000766 	.word	0x20000766
 80027cc:	20000764 	.word	0x20000764
 80027d0:	40010c00 	.word	0x40010c00

080027d4 <dataProcessing>:

bool dataProcessing()
{
 80027d4:	b590      	push	{r4, r7, lr}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af02      	add	r7, sp, #8
  // USB HID Data
  int8_t HID_report[4];

  // Initialize USB HID Data.
  HID_report[0] = 0x00; // Mouse Button State (0x01: Left Button Clicked, 0x02: Right Button Clicked)
 80027da:	2300      	movs	r3, #0
 80027dc:	713b      	strb	r3, [r7, #4]
  HID_report[1] = 0x00; // Mouse X-axis Movement.
 80027de:	2300      	movs	r3, #0
 80027e0:	717b      	strb	r3, [r7, #5]
  HID_report[2] = 0x00; // Mouse Y-axis Movement.
 80027e2:	2300      	movs	r3, #0
 80027e4:	71bb      	strb	r3, [r7, #6]
  HID_report[3] = 0x00; // Mouse Wheel Movement.
 80027e6:	2300      	movs	r3, #0
 80027e8:	71fb      	strb	r3, [r7, #7]

  // Calculate Mouse X, Y Movement.
  HID_report[1] = calculateMouseX();
 80027ea:	f7ff fe9d 	bl	8002528 <calculateMouseX>
 80027ee:	4603      	mov	r3, r0
 80027f0:	717b      	strb	r3, [r7, #5]
  HID_report[2] = calculateMouseY();
 80027f2:	f7ff fee9 	bl	80025c8 <calculateMouseY>
 80027f6:	4603      	mov	r3, r0
 80027f8:	71bb      	strb	r3, [r7, #6]

  // Mouse Left Button Clicked.
  if(isButtonPressed(LEFT_BTN_GPIO_Port, LEFT_BTN_Pin))
 80027fa:	2110      	movs	r1, #16
 80027fc:	481c      	ldr	r0, [pc, #112]	@ (8002870 <dataProcessing+0x9c>)
 80027fe:	f7fe fd0f 	bl	8001220 <isButtonPressed>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d002      	beq.n	800280e <dataProcessing+0x3a>
  {
    HID_report[0] = 0x01;
 8002808:	2301      	movs	r3, #1
 800280a:	713b      	strb	r3, [r7, #4]
 800280c:	e008      	b.n	8002820 <dataProcessing+0x4c>
  }
  // Mouse Right Button Clicked.
  else if(isButtonPressed(RIGHT_BTN_GPIO_Port, RIGHT_BTN_Pin))
 800280e:	2108      	movs	r1, #8
 8002810:	4817      	ldr	r0, [pc, #92]	@ (8002870 <dataProcessing+0x9c>)
 8002812:	f7fe fd05 	bl	8001220 <isButtonPressed>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d001      	beq.n	8002820 <dataProcessing+0x4c>
  {
    HID_report[0] = 0x02;
 800281c:	2302      	movs	r3, #2
 800281e:	713b      	strb	r3, [r7, #4]
  }

  // Mouse Wheel
  HID_report[3] = calculateMouseWheel();
 8002820:	f7ff ff62 	bl	80026e8 <calculateMouseWheel>
 8002824:	4603      	mov	r3, r0
 8002826:	71fb      	strb	r3, [r7, #7]

  // Data Transmit.
  HAL_UART_Transmit(&huart2, (uint8_t *)HID_report, sizeof(HID_report), 50);
 8002828:	1d39      	adds	r1, r7, #4
 800282a:	2332      	movs	r3, #50	@ 0x32
 800282c:	2204      	movs	r2, #4
 800282e:	4811      	ldr	r0, [pc, #68]	@ (8002874 <dataProcessing+0xa0>)
 8002830:	f003 fe84 	bl	800653c <HAL_UART_Transmit>

  // Print HID_report data on cli terminal.
  cliPrintf("%d %d %d %d (encoder : %d)\n", HID_report[0], HID_report[1], HID_report[2], HID_report[3], prev_wheel);
 8002834:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8002838:	4619      	mov	r1, r3
 800283a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800283e:	4618      	mov	r0, r3
 8002840:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002844:	461c      	mov	r4, r3
 8002846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284a:	461a      	mov	r2, r3
 800284c:	4b0a      	ldr	r3, [pc, #40]	@ (8002878 <dataProcessing+0xa4>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	9301      	str	r3, [sp, #4]
 8002852:	9200      	str	r2, [sp, #0]
 8002854:	4623      	mov	r3, r4
 8002856:	4602      	mov	r2, r0
 8002858:	4808      	ldr	r0, [pc, #32]	@ (800287c <dataProcessing+0xa8>)
 800285a:	f7ff fae3 	bl	8001e24 <cliPrintf>

  // Data Processing delay.
  HAL_Delay((uint32_t)(TIME_INTERVAL * 10));
 800285e:	2001      	movs	r0, #1
 8002860:	f001 f8e6 	bl	8003a30 <HAL_Delay>

  return 1;
 8002864:	2301      	movs	r3, #1
}
 8002866:	4618      	mov	r0, r3
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	bd90      	pop	{r4, r7, pc}
 800286e:	bf00      	nop
 8002870:	40010c00 	.word	0x40010c00
 8002874:	20000898 	.word	0x20000898
 8002878:	200007ac 	.word	0x200007ac
 800287c:	0800c3b8 	.word	0x0800c3b8

08002880 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002886:	4b10      	ldr	r3, [pc, #64]	@ (80028c8 <MX_DMA_Init+0x48>)
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	4a0f      	ldr	r2, [pc, #60]	@ (80028c8 <MX_DMA_Init+0x48>)
 800288c:	f043 0301 	orr.w	r3, r3, #1
 8002890:	6153      	str	r3, [r2, #20]
 8002892:	4b0d      	ldr	r3, [pc, #52]	@ (80028c8 <MX_DMA_Init+0x48>)
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	607b      	str	r3, [r7, #4]
 800289c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800289e:	2200      	movs	r2, #0
 80028a0:	2100      	movs	r1, #0
 80028a2:	200f      	movs	r0, #15
 80028a4:	f001 f9bf 	bl	8003c26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80028a8:	200f      	movs	r0, #15
 80028aa:	f001 f9d8 	bl	8003c5e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80028ae:	2200      	movs	r2, #0
 80028b0:	2100      	movs	r1, #0
 80028b2:	2010      	movs	r0, #16
 80028b4:	f001 f9b7 	bl	8003c26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80028b8:	2010      	movs	r0, #16
 80028ba:	f001 f9d0 	bl	8003c5e <HAL_NVIC_EnableIRQ>

}
 80028be:	bf00      	nop
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	40021000 	.word	0x40021000

080028cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b088      	sub	sp, #32
 80028d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d2:	f107 0310 	add.w	r3, r7, #16
 80028d6:	2200      	movs	r2, #0
 80028d8:	601a      	str	r2, [r3, #0]
 80028da:	605a      	str	r2, [r3, #4]
 80028dc:	609a      	str	r2, [r3, #8]
 80028de:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028e0:	4b19      	ldr	r3, [pc, #100]	@ (8002948 <MX_GPIO_Init+0x7c>)
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	4a18      	ldr	r2, [pc, #96]	@ (8002948 <MX_GPIO_Init+0x7c>)
 80028e6:	f043 0320 	orr.w	r3, r3, #32
 80028ea:	6193      	str	r3, [r2, #24]
 80028ec:	4b16      	ldr	r3, [pc, #88]	@ (8002948 <MX_GPIO_Init+0x7c>)
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	f003 0320 	and.w	r3, r3, #32
 80028f4:	60fb      	str	r3, [r7, #12]
 80028f6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028f8:	4b13      	ldr	r3, [pc, #76]	@ (8002948 <MX_GPIO_Init+0x7c>)
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	4a12      	ldr	r2, [pc, #72]	@ (8002948 <MX_GPIO_Init+0x7c>)
 80028fe:	f043 0304 	orr.w	r3, r3, #4
 8002902:	6193      	str	r3, [r2, #24]
 8002904:	4b10      	ldr	r3, [pc, #64]	@ (8002948 <MX_GPIO_Init+0x7c>)
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	f003 0304 	and.w	r3, r3, #4
 800290c:	60bb      	str	r3, [r7, #8]
 800290e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002910:	4b0d      	ldr	r3, [pc, #52]	@ (8002948 <MX_GPIO_Init+0x7c>)
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	4a0c      	ldr	r2, [pc, #48]	@ (8002948 <MX_GPIO_Init+0x7c>)
 8002916:	f043 0308 	orr.w	r3, r3, #8
 800291a:	6193      	str	r3, [r2, #24]
 800291c:	4b0a      	ldr	r3, [pc, #40]	@ (8002948 <MX_GPIO_Init+0x7c>)
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	f003 0308 	and.w	r3, r3, #8
 8002924:	607b      	str	r3, [r7, #4]
 8002926:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = RIGHT_BTN_Pin|LEFT_BTN_Pin;
 8002928:	2318      	movs	r3, #24
 800292a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800292c:	2300      	movs	r3, #0
 800292e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002930:	2302      	movs	r3, #2
 8002932:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002934:	f107 0310 	add.w	r3, r7, #16
 8002938:	4619      	mov	r1, r3
 800293a:	4804      	ldr	r0, [pc, #16]	@ (800294c <MX_GPIO_Init+0x80>)
 800293c:	f001 fc4c 	bl	80041d8 <HAL_GPIO_Init>

}
 8002940:	bf00      	nop
 8002942:	3720      	adds	r7, #32
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	40021000 	.word	0x40021000
 800294c:	40010c00 	.word	0x40010c00

08002950 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002954:	4b12      	ldr	r3, [pc, #72]	@ (80029a0 <MX_I2C1_Init+0x50>)
 8002956:	4a13      	ldr	r2, [pc, #76]	@ (80029a4 <MX_I2C1_Init+0x54>)
 8002958:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800295a:	4b11      	ldr	r3, [pc, #68]	@ (80029a0 <MX_I2C1_Init+0x50>)
 800295c:	4a12      	ldr	r2, [pc, #72]	@ (80029a8 <MX_I2C1_Init+0x58>)
 800295e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002960:	4b0f      	ldr	r3, [pc, #60]	@ (80029a0 <MX_I2C1_Init+0x50>)
 8002962:	2200      	movs	r2, #0
 8002964:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002966:	4b0e      	ldr	r3, [pc, #56]	@ (80029a0 <MX_I2C1_Init+0x50>)
 8002968:	2200      	movs	r2, #0
 800296a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800296c:	4b0c      	ldr	r3, [pc, #48]	@ (80029a0 <MX_I2C1_Init+0x50>)
 800296e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002972:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002974:	4b0a      	ldr	r3, [pc, #40]	@ (80029a0 <MX_I2C1_Init+0x50>)
 8002976:	2200      	movs	r2, #0
 8002978:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800297a:	4b09      	ldr	r3, [pc, #36]	@ (80029a0 <MX_I2C1_Init+0x50>)
 800297c:	2200      	movs	r2, #0
 800297e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002980:	4b07      	ldr	r3, [pc, #28]	@ (80029a0 <MX_I2C1_Init+0x50>)
 8002982:	2200      	movs	r2, #0
 8002984:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002986:	4b06      	ldr	r3, [pc, #24]	@ (80029a0 <MX_I2C1_Init+0x50>)
 8002988:	2200      	movs	r2, #0
 800298a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800298c:	4804      	ldr	r0, [pc, #16]	@ (80029a0 <MX_I2C1_Init+0x50>)
 800298e:	f001 fdbf 	bl	8004510 <HAL_I2C_Init>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d001      	beq.n	800299c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002998:	f000 f92b 	bl	8002bf2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800299c:	bf00      	nop
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	200007b0 	.word	0x200007b0
 80029a4:	40005400 	.word	0x40005400
 80029a8:	000186a0 	.word	0x000186a0

080029ac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b088      	sub	sp, #32
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b4:	f107 0310 	add.w	r3, r7, #16
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]
 80029bc:	605a      	str	r2, [r3, #4]
 80029be:	609a      	str	r2, [r3, #8]
 80029c0:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a15      	ldr	r2, [pc, #84]	@ (8002a1c <HAL_I2C_MspInit+0x70>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d123      	bne.n	8002a14 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029cc:	4b14      	ldr	r3, [pc, #80]	@ (8002a20 <HAL_I2C_MspInit+0x74>)
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	4a13      	ldr	r2, [pc, #76]	@ (8002a20 <HAL_I2C_MspInit+0x74>)
 80029d2:	f043 0308 	orr.w	r3, r3, #8
 80029d6:	6193      	str	r3, [r2, #24]
 80029d8:	4b11      	ldr	r3, [pc, #68]	@ (8002a20 <HAL_I2C_MspInit+0x74>)
 80029da:	699b      	ldr	r3, [r3, #24]
 80029dc:	f003 0308 	and.w	r3, r3, #8
 80029e0:	60fb      	str	r3, [r7, #12]
 80029e2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80029e4:	23c0      	movs	r3, #192	@ 0xc0
 80029e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029e8:	2312      	movs	r3, #18
 80029ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029ec:	2303      	movs	r3, #3
 80029ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029f0:	f107 0310 	add.w	r3, r7, #16
 80029f4:	4619      	mov	r1, r3
 80029f6:	480b      	ldr	r0, [pc, #44]	@ (8002a24 <HAL_I2C_MspInit+0x78>)
 80029f8:	f001 fbee 	bl	80041d8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80029fc:	4b08      	ldr	r3, [pc, #32]	@ (8002a20 <HAL_I2C_MspInit+0x74>)
 80029fe:	69db      	ldr	r3, [r3, #28]
 8002a00:	4a07      	ldr	r2, [pc, #28]	@ (8002a20 <HAL_I2C_MspInit+0x74>)
 8002a02:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002a06:	61d3      	str	r3, [r2, #28]
 8002a08:	4b05      	ldr	r3, [pc, #20]	@ (8002a20 <HAL_I2C_MspInit+0x74>)
 8002a0a:	69db      	ldr	r3, [r3, #28]
 8002a0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a10:	60bb      	str	r3, [r7, #8]
 8002a12:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002a14:	bf00      	nop
 8002a16:	3720      	adds	r7, #32
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	40005400 	.word	0x40005400
 8002a20:	40021000 	.word	0x40021000
 8002a24:	40010c00 	.word	0x40010c00

08002a28 <KalmanFilter_Init>:

void KalmanFilter_Init(KalmanFilter *kf,
                       float process_noise,
                       float measurement_noise,
                       float initial_value)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
 8002a34:	603b      	str	r3, [r7, #0]
    kf->q = process_noise;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	68ba      	ldr	r2, [r7, #8]
 8002a3a:	601a      	str	r2, [r3, #0]
    kf->r = measurement_noise;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	605a      	str	r2, [r3, #4]
    kf->x = initial_value;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	609a      	str	r2, [r3, #8]
    kf->p = 1.0f;  // 초기 공분산 값을 1로 설정
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002a4e:	60da      	str	r2, [r3, #12]
    kf->k = 0.0f;  // 초기 칼만 이득 값
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f04f 0200 	mov.w	r2, #0
 8002a56:	611a      	str	r2, [r3, #16]
}
 8002a58:	bf00      	nop
 8002a5a:	3714      	adds	r7, #20
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bc80      	pop	{r7}
 8002a60:	4770      	bx	lr

08002a62 <KalmanFilter_Update>:

float KalmanFilter_Update(KalmanFilter *kf, float measurement)
{
 8002a62:	b5b0      	push	{r4, r5, r7, lr}
 8002a64:	b082      	sub	sp, #8
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
 8002a6a:	6039      	str	r1, [r7, #0]
    // 1. 예측 단계
    kf->p += kf->q;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	68da      	ldr	r2, [r3, #12]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4619      	mov	r1, r3
 8002a76:	4610      	mov	r0, r2
 8002a78:	f7fe f886 	bl	8000b88 <__addsf3>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	461a      	mov	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	60da      	str	r2, [r3, #12]

    // 2. 칼만 이득 계산
    kf->k = kf->p / (kf->p + kf->r);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	68dc      	ldr	r4, [r3, #12]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	68da      	ldr	r2, [r3, #12]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	4619      	mov	r1, r3
 8002a92:	4610      	mov	r0, r2
 8002a94:	f7fe f878 	bl	8000b88 <__addsf3>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	4620      	mov	r0, r4
 8002a9e:	f7fe fa2f 	bl	8000f00 <__aeabi_fdiv>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	611a      	str	r2, [r3, #16]

    // 3. 값 업데이트
    kf->x += kf->k * (measurement - kf->x);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689c      	ldr	r4, [r3, #8]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	691d      	ldr	r5, [r3, #16]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	6838      	ldr	r0, [r7, #0]
 8002aba:	f7fe f863 	bl	8000b84 <__aeabi_fsub>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	4628      	mov	r0, r5
 8002ac4:	f7fe f968 	bl	8000d98 <__aeabi_fmul>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	4619      	mov	r1, r3
 8002acc:	4620      	mov	r0, r4
 8002ace:	f7fe f85b 	bl	8000b88 <__addsf3>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	609a      	str	r2, [r3, #8]

    // 4. 공분산 갱신
    kf->p *= (1.0f - kf->k);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	68dc      	ldr	r4, [r3, #12]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8002ae8:	f7fe f84c 	bl	8000b84 <__aeabi_fsub>
 8002aec:	4603      	mov	r3, r0
 8002aee:	4619      	mov	r1, r3
 8002af0:	4620      	mov	r0, r4
 8002af2:	f7fe f951 	bl	8000d98 <__aeabi_fmul>
 8002af6:	4603      	mov	r3, r0
 8002af8:	461a      	mov	r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	60da      	str	r2, [r3, #12]

    return kf->x;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	689b      	ldr	r3, [r3, #8]
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002b0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b10:	f000 ff2c 	bl	800396c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b14:	f000 f828 	bl	8002b68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b18:	f7ff fed8 	bl	80028cc <MX_GPIO_Init>
  MX_DMA_Init();
 8002b1c:	f7ff feb0 	bl	8002880 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002b20:	f000 fdc2 	bl	80036a8 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8002b24:	f7ff ff14 	bl	8002950 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8002b28:	f000 fde8 	bl	80036fc <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8002b2c:	f000 fd22 	bl	8003574 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  cliInit();
 8002b30:	f7fe fc3a 	bl	80013a8 <cliInit>
  MPU6050_Init(0x06);
 8002b34:	2006      	movs	r0, #6
 8002b36:	f000 fa69 	bl	800300c <MPU6050_Init>
  dataProcessingInit();
 8002b3a:	f7ff fcc2 	bl	80024c2 <dataProcessingInit>
  buttonInit();
 8002b3e:	f7fe fb63 	bl	8001208 <buttonInit>
  //bluetoothInit();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  cliOpen(CH_USART1, 11520);
 8002b42:	f44f 5134 	mov.w	r1, #11520	@ 0x2d00
 8002b46:	2001      	movs	r0, #1
 8002b48:	f7fe fc7a 	bl	8001440 <cliOpen>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8002b4c:	213c      	movs	r1, #60	@ 0x3c
 8002b4e:	4805      	ldr	r0, [pc, #20]	@ (8002b64 <main+0x58>)
 8002b50:	f003 f9f6 	bl	8005f40 <HAL_TIM_Encoder_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    readData();
 8002b54:	f7ff fe14 	bl	8002780 <readData>

    dataProcessing();
 8002b58:	f7ff fe3c 	bl	80027d4 <dataProcessing>

    cliMain();
 8002b5c:	f7fe fd54 	bl	8001608 <cliMain>
    readData();
 8002b60:	bf00      	nop
 8002b62:	e7f7      	b.n	8002b54 <main+0x48>
 8002b64:	20000808 	.word	0x20000808

08002b68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b090      	sub	sp, #64	@ 0x40
 8002b6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b6e:	f107 0318 	add.w	r3, r7, #24
 8002b72:	2228      	movs	r2, #40	@ 0x28
 8002b74:	2100      	movs	r1, #0
 8002b76:	4618      	mov	r0, r3
 8002b78:	f006 fb2e 	bl	80091d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b7c:	1d3b      	adds	r3, r7, #4
 8002b7e:	2200      	movs	r2, #0
 8002b80:	601a      	str	r2, [r3, #0]
 8002b82:	605a      	str	r2, [r3, #4]
 8002b84:	609a      	str	r2, [r3, #8]
 8002b86:	60da      	str	r2, [r3, #12]
 8002b88:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002b8e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002b92:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002b94:	2300      	movs	r3, #0
 8002b96:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ba0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002ba4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002ba6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8002baa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002bac:	f107 0318 	add.w	r3, r7, #24
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f002 fd13 	bl	80055dc <HAL_RCC_OscConfig>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002bbc:	f000 f819 	bl	8002bf2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002bc0:	230f      	movs	r3, #15
 8002bc2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002bcc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002bd0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002bd6:	1d3b      	adds	r3, r7, #4
 8002bd8:	2102      	movs	r1, #2
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f002 ff80 	bl	8005ae0 <HAL_RCC_ClockConfig>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d001      	beq.n	8002bea <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002be6:	f000 f804 	bl	8002bf2 <Error_Handler>
  }
}
 8002bea:	bf00      	nop
 8002bec:	3740      	adds	r7, #64	@ 0x40
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bf6:	b672      	cpsid	i
}
 8002bf8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002bfa:	bf00      	nop
 8002bfc:	e7fd      	b.n	8002bfa <Error_Handler+0x8>
	...

08002c00 <MPU6050_ReadOneByte>:
//������ ���� 1����Ʈ �б� 
// �Ķ����1 : ���� ��巹��, �Ķ���� 2 : ������ �������� ��巹��
// ���ϰ� : �������䰪

uint8_t MPU6050_ReadOneByte(uint8_t RegAddr)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b088      	sub	sp, #32
 8002c04:	af04      	add	r7, sp, #16
 8002c06:	4603      	mov	r3, r0
 8002c08:	71fb      	strb	r3, [r7, #7]
	uint8_t Data = 0;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(&MPU6050_I2C_PORT,MPU6050_DEVICE_ADDR,RegAddr,1,&Data,1,1000);
 8002c0e:	79fb      	ldrb	r3, [r7, #7]
 8002c10:	b29a      	uxth	r2, r3
 8002c12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c16:	9302      	str	r3, [sp, #8]
 8002c18:	2301      	movs	r3, #1
 8002c1a:	9301      	str	r3, [sp, #4]
 8002c1c:	f107 030f 	add.w	r3, r7, #15
 8002c20:	9300      	str	r3, [sp, #0]
 8002c22:	2301      	movs	r3, #1
 8002c24:	21d0      	movs	r1, #208	@ 0xd0
 8002c26:	4804      	ldr	r0, [pc, #16]	@ (8002c38 <MPU6050_ReadOneByte+0x38>)
 8002c28:	f001 feb0 	bl	800498c <HAL_I2C_Mem_Read>
	return Data;
 8002c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3710      	adds	r7, #16
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	200007b0 	.word	0x200007b0

08002c3c <MPU6050_WriteOneByte>:

//������  1����Ʈ ���� 
// �Ķ����1 : ���� ��巹��, �Ķ���� 2 : ������ �������� ��巹��
// ���ϰ� : �������䰪
void MPU6050_WriteOneByte(uint8_t RegAddr, uint8_t Data)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af04      	add	r7, sp, #16
 8002c42:	4603      	mov	r3, r0
 8002c44:	460a      	mov	r2, r1
 8002c46:	71fb      	strb	r3, [r7, #7]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&MPU6050_I2C_PORT,MPU6050_DEVICE_ADDR,RegAddr,I2C_MEMADD_SIZE_8BIT,&Data,1,1000);
 8002c4c:	79fb      	ldrb	r3, [r7, #7]
 8002c4e:	b29a      	uxth	r2, r3
 8002c50:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c54:	9302      	str	r3, [sp, #8]
 8002c56:	2301      	movs	r3, #1
 8002c58:	9301      	str	r3, [sp, #4]
 8002c5a:	1dbb      	adds	r3, r7, #6
 8002c5c:	9300      	str	r3, [sp, #0]
 8002c5e:	2301      	movs	r3, #1
 8002c60:	21d0      	movs	r1, #208	@ 0xd0
 8002c62:	4803      	ldr	r0, [pc, #12]	@ (8002c70 <MPU6050_WriteOneByte+0x34>)
 8002c64:	f001 fd98 	bl	8004798 <HAL_I2C_Mem_Write>
}
 8002c68:	bf00      	nop
 8002c6a:	3708      	adds	r7, #8
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	200007b0 	.word	0x200007b0

08002c74 <MPU6050_WriteBits>:

bool MPU6050_WriteBits(uint8_t RegAddr, uint8_t BitStart, uint8_t Length, uint8_t Data)
{
 8002c74:	b590      	push	{r4, r7, lr}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	4604      	mov	r4, r0
 8002c7c:	4608      	mov	r0, r1
 8002c7e:	4611      	mov	r1, r2
 8002c80:	461a      	mov	r2, r3
 8002c82:	4623      	mov	r3, r4
 8002c84:	71fb      	strb	r3, [r7, #7]
 8002c86:	4603      	mov	r3, r0
 8002c88:	71bb      	strb	r3, [r7, #6]
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	717b      	strb	r3, [r7, #5]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	713b      	strb	r3, [r7, #4]

   uint8_t Dat, Mask;
    
		Dat = MPU6050_ReadOneByte(RegAddr);
 8002c92:	79fb      	ldrb	r3, [r7, #7]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7ff ffb3 	bl	8002c00 <MPU6050_ReadOneByte>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	73fb      	strb	r3, [r7, #15]
    Mask = (0xFF << (BitStart + 1)) | 0xFF >> ((8 - BitStart) + Length - 1);
 8002c9e:	79bb      	ldrb	r3, [r7, #6]
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	22ff      	movs	r2, #255	@ 0xff
 8002ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca8:	b25a      	sxtb	r2, r3
 8002caa:	79bb      	ldrb	r3, [r7, #6]
 8002cac:	f1c3 0108 	rsb	r1, r3, #8
 8002cb0:	797b      	ldrb	r3, [r7, #5]
 8002cb2:	440b      	add	r3, r1
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	21ff      	movs	r1, #255	@ 0xff
 8002cb8:	fa41 f303 	asr.w	r3, r1, r3
 8002cbc:	b25b      	sxtb	r3, r3
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	b25b      	sxtb	r3, r3
 8002cc2:	73bb      	strb	r3, [r7, #14]
    Data <<= (8 - Length);
 8002cc4:	793a      	ldrb	r2, [r7, #4]
 8002cc6:	797b      	ldrb	r3, [r7, #5]
 8002cc8:	f1c3 0308 	rsb	r3, r3, #8
 8002ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd0:	713b      	strb	r3, [r7, #4]
    Data >>= (7 - BitStart);
 8002cd2:	793a      	ldrb	r2, [r7, #4]
 8002cd4:	79bb      	ldrb	r3, [r7, #6]
 8002cd6:	f1c3 0307 	rsb	r3, r3, #7
 8002cda:	fa42 f303 	asr.w	r3, r2, r3
 8002cde:	713b      	strb	r3, [r7, #4]
    Dat &= Mask;
 8002ce0:	7bfa      	ldrb	r2, [r7, #15]
 8002ce2:	7bbb      	ldrb	r3, [r7, #14]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	73fb      	strb	r3, [r7, #15]
    Dat |= Data;
 8002ce8:	7bfa      	ldrb	r2, [r7, #15]
 8002cea:	793b      	ldrb	r3, [r7, #4]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteOneByte(RegAddr, Dat);
 8002cf0:	7bfa      	ldrb	r2, [r7, #15]
 8002cf2:	79fb      	ldrb	r3, [r7, #7]
 8002cf4:	4611      	mov	r1, r2
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7ff ffa0 	bl	8002c3c <MPU6050_WriteOneByte>
    
    return true;
 8002cfc:	2301      	movs	r3, #1
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3714      	adds	r7, #20
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd90      	pop	{r4, r7, pc}

08002d06 <MPU6050_WriteOneBit>:

bool MPU6050_WriteOneBit(uint8_t RegAddr, uint8_t BitNum, uint8_t Data)
{
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b084      	sub	sp, #16
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	71fb      	strb	r3, [r7, #7]
 8002d10:	460b      	mov	r3, r1
 8002d12:	71bb      	strb	r3, [r7, #6]
 8002d14:	4613      	mov	r3, r2
 8002d16:	717b      	strb	r3, [r7, #5]
    uint8_t Dat;
    
    Dat = MPU6050_ReadOneByte(RegAddr);
 8002d18:	79fb      	ldrb	r3, [r7, #7]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7ff ff70 	bl	8002c00 <MPU6050_ReadOneByte>
 8002d20:	4603      	mov	r3, r0
 8002d22:	73fb      	strb	r3, [r7, #15]
    Dat = (Data != 0) ? (Dat | (1 << BitNum)) : (Dat & ~(1 << BitNum));
 8002d24:	797b      	ldrb	r3, [r7, #5]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00a      	beq.n	8002d40 <MPU6050_WriteOneBit+0x3a>
 8002d2a:	79bb      	ldrb	r3, [r7, #6]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d32:	b25a      	sxtb	r2, r3
 8002d34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	b25b      	sxtb	r3, r3
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	e00b      	b.n	8002d58 <MPU6050_WriteOneBit+0x52>
 8002d40:	79bb      	ldrb	r3, [r7, #6]
 8002d42:	2201      	movs	r2, #1
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	b25b      	sxtb	r3, r3
 8002d4a:	43db      	mvns	r3, r3
 8002d4c:	b25a      	sxtb	r2, r3
 8002d4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d52:	4013      	ands	r3, r2
 8002d54:	b25b      	sxtb	r3, r3
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteOneByte(RegAddr, Dat);
 8002d5a:	7bfa      	ldrb	r2, [r7, #15]
 8002d5c:	79fb      	ldrb	r3, [r7, #7]
 8002d5e:	4611      	mov	r1, r2
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff ff6b 	bl	8002c3c <MPU6050_WriteOneByte>
    
    return true;
 8002d66:	2301      	movs	r3, #1
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3710      	adds	r7, #16
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <MPU6050_ReadBuff>:

//�����б� (����̽� ��巹��, �������� ��巹��, ������ ũ��, ���� ������)
bool MPU6050_ReadBuff(uint8_t RegAddr, uint8_t Num, uint8_t *pBuff)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af04      	add	r7, sp, #16
 8002d76:	4603      	mov	r3, r0
 8002d78:	603a      	str	r2, [r7, #0]
 8002d7a:	71fb      	strb	r3, [r7, #7]
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	71bb      	strb	r3, [r7, #6]
	// �޸� �б�(����̽� ��巹��, 8��Ʈ ��巹�� �޸� ũ��, ���� ������, ���ۼ���, �õ�Ƚ��)
	return HAL_I2C_Mem_Read(&MPU6050_I2C_PORT,MPU6050_DEVICE_ADDR,RegAddr,I2C_MEMADD_SIZE_8BIT,pBuff,Num,1000);
 8002d80:	79fb      	ldrb	r3, [r7, #7]
 8002d82:	b29a      	uxth	r2, r3
 8002d84:	79bb      	ldrb	r3, [r7, #6]
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002d8c:	9102      	str	r1, [sp, #8]
 8002d8e:	9301      	str	r3, [sp, #4]
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	9300      	str	r3, [sp, #0]
 8002d94:	2301      	movs	r3, #1
 8002d96:	21d0      	movs	r1, #208	@ 0xd0
 8002d98:	4806      	ldr	r0, [pc, #24]	@ (8002db4 <MPU6050_ReadBuff+0x44>)
 8002d9a:	f001 fdf7 	bl	800498c <HAL_I2C_Mem_Read>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	bf14      	ite	ne
 8002da4:	2301      	movne	r3, #1
 8002da6:	2300      	moveq	r3, #0
 8002da8:	b2db      	uxtb	r3, r3
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	200007b0 	.word	0x200007b0

08002db8 <MPU6050_SetClockSource>:
  	}
  	*pOutVal >>= 3;
}

void MPU6050_SetClockSource(uint8_t source)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	71fb      	strb	r3, [r7, #7]
    MPU6050_WriteBits(MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, source);
 8002dc2:	79fb      	ldrb	r3, [r7, #7]
 8002dc4:	2203      	movs	r2, #3
 8002dc6:	2102      	movs	r1, #2
 8002dc8:	206b      	movs	r0, #107	@ 0x6b
 8002dca:	f7ff ff53 	bl	8002c74 <MPU6050_WriteBits>
}
 8002dce:	bf00      	nop
 8002dd0:	3708      	adds	r7, #8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <MPU6050_SetFullScaleGyroRange>:

void MPU6050_SetFullScaleGyroRange(uint8_t range)
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b082      	sub	sp, #8
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	4603      	mov	r3, r0
 8002dde:	71fb      	strb	r3, [r7, #7]
    MPU6050_WriteBits(MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, range);
 8002de0:	79fb      	ldrb	r3, [r7, #7]
 8002de2:	2202      	movs	r2, #2
 8002de4:	2104      	movs	r1, #4
 8002de6:	201b      	movs	r0, #27
 8002de8:	f7ff ff44 	bl	8002c74 <MPU6050_WriteBits>
}
 8002dec:	bf00      	nop
 8002dee:	3708      	adds	r7, #8
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <MPU6050_SetLPF>:

void MPU6050_SetLPF(uint8_t	LowPassFilter)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	71fb      	strb	r3, [r7, #7]
   MPU6050_WriteOneByte(MPU6050_RA_CONFIG, LowPassFilter);
 8002dfe:	79fb      	ldrb	r3, [r7, #7]
 8002e00:	4619      	mov	r1, r3
 8002e02:	201a      	movs	r0, #26
 8002e04:	f7ff ff1a 	bl	8002c3c <MPU6050_WriteOneByte>
}
 8002e08:	bf00      	nop
 8002e0a:	3708      	adds	r7, #8
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <MPU6050_SetFullScaleAccelRange>:

void MPU6050_SetFullScaleAccelRange(uint8_t range)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	4603      	mov	r3, r0
 8002e18:	71fb      	strb	r3, [r7, #7]
    MPU6050_WriteBits(MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, range);
 8002e1a:	79fb      	ldrb	r3, [r7, #7]
 8002e1c:	2202      	movs	r2, #2
 8002e1e:	2104      	movs	r1, #4
 8002e20:	201c      	movs	r0, #28
 8002e22:	f7ff ff27 	bl	8002c74 <MPU6050_WriteBits>
}
 8002e26:	bf00      	nop
 8002e28:	3708      	adds	r7, #8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <MPU6050_SetSleepEnabled>:

void MPU6050_SetSleepEnabled(uint8_t enabled) 
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b082      	sub	sp, #8
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	4603      	mov	r3, r0
 8002e36:	71fb      	strb	r3, [r7, #7]
    MPU6050_WriteOneBit(MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, enabled);
 8002e38:	79fb      	ldrb	r3, [r7, #7]
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	2106      	movs	r1, #6
 8002e3e:	206b      	movs	r0, #107	@ 0x6b
 8002e40:	f7ff ff61 	bl	8002d06 <MPU6050_WriteOneBit>
}
 8002e44:	bf00      	nop
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <MPU6050_SetI2CMasterModeEnabled>:

void MPU6050_SetI2CMasterModeEnabled(uint8_t enabled) 
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	4603      	mov	r3, r0
 8002e54:	71fb      	strb	r3, [r7, #7]
    MPU6050_WriteOneBit(MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_EN_BIT, enabled);
 8002e56:	79fb      	ldrb	r3, [r7, #7]
 8002e58:	461a      	mov	r2, r3
 8002e5a:	2105      	movs	r1, #5
 8002e5c:	206a      	movs	r0, #106	@ 0x6a
 8002e5e:	f7ff ff52 	bl	8002d06 <MPU6050_WriteOneBit>
}
 8002e62:	bf00      	nop
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <MPU6050_SetI2CBypassEnabled>:

void MPU6050_SetI2CBypassEnabled(uint8_t enabled) 
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b082      	sub	sp, #8
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	4603      	mov	r3, r0
 8002e72:	71fb      	strb	r3, [r7, #7]
    MPU6050_WriteOneBit(MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_I2C_BYPASS_EN_BIT, enabled);
 8002e74:	79fb      	ldrb	r3, [r7, #7]
 8002e76:	461a      	mov	r2, r3
 8002e78:	2101      	movs	r1, #1
 8002e7a:	2037      	movs	r0, #55	@ 0x37
 8002e7c:	f7ff ff43 	bl	8002d06 <MPU6050_WriteOneBit>
}
 8002e80:	bf00      	nop
 8002e82:	3708      	adds	r7, #8
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <MPU6050_GetData>:

void MPU6050_GetData(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz, int16_t* tmpr) 
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b08c      	sub	sp, #48	@ 0x30
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	607a      	str	r2, [r7, #4]
 8002e94:	603b      	str	r3, [r7, #0]
	uint8_t Buffer[14] = {0};
 8002e96:	2300      	movs	r3, #0
 8002e98:	623b      	str	r3, [r7, #32]
 8002e9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	601a      	str	r2, [r3, #0]
 8002ea2:	605a      	str	r2, [r3, #4]
 8002ea4:	811a      	strh	r2, [r3, #8]
	int16_t InBuffer[7] = {0};
 8002ea6:	f107 0310 	add.w	r3, r7, #16
 8002eaa:	2200      	movs	r2, #0
 8002eac:	601a      	str	r2, [r3, #0]
 8002eae:	605a      	str	r2, [r3, #4]
 8002eb0:	609a      	str	r2, [r3, #8]
 8002eb2:	819a      	strh	r2, [r3, #12]
	int16_t temp;
	
	MPU6050_ReadBuff(MPU6050_RA_ACCEL_XOUT_H, 14, Buffer);
 8002eb4:	f107 0320 	add.w	r3, r7, #32
 8002eb8:	461a      	mov	r2, r3
 8002eba:	210e      	movs	r1, #14
 8002ebc:	203b      	movs	r0, #59	@ 0x3b
 8002ebe:	f7ff ff57 	bl	8002d70 <MPU6050_ReadBuff>
		
  InBuffer[0] = (((int16_t)Buffer[0]) << 8) | Buffer[1];
 8002ec2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002ec6:	021b      	lsls	r3, r3, #8
 8002ec8:	b21a      	sxth	r2, r3
 8002eca:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002ece:	b21b      	sxth	r3, r3
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	b21b      	sxth	r3, r3
 8002ed4:	823b      	strh	r3, [r7, #16]
  InBuffer[1] = (((int16_t)Buffer[2]) << 8) | Buffer[3];
 8002ed6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8002eda:	021b      	lsls	r3, r3, #8
 8002edc:	b21a      	sxth	r2, r3
 8002ede:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002ee2:	b21b      	sxth	r3, r3
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	b21b      	sxth	r3, r3
 8002ee8:	827b      	strh	r3, [r7, #18]
  InBuffer[2] = (((int16_t)Buffer[4]) << 8) | Buffer[5];
 8002eea:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002eee:	021b      	lsls	r3, r3, #8
 8002ef0:	b21a      	sxth	r2, r3
 8002ef2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002ef6:	b21b      	sxth	r3, r3
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	b21b      	sxth	r3, r3
 8002efc:	82bb      	strh	r3, [r7, #20]

  InBuffer[3] = (((int16_t)Buffer[8]) << 8) | Buffer[9];
 8002efe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002f02:	021b      	lsls	r3, r3, #8
 8002f04:	b21a      	sxth	r2, r3
 8002f06:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8002f0a:	b21b      	sxth	r3, r3
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	b21b      	sxth	r3, r3
 8002f10:	82fb      	strh	r3, [r7, #22]
  InBuffer[4] = (((int16_t)Buffer[10]) << 8) | Buffer[11];
 8002f12:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8002f16:	021b      	lsls	r3, r3, #8
 8002f18:	b21a      	sxth	r2, r3
 8002f1a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002f1e:	b21b      	sxth	r3, r3
 8002f20:	4313      	orrs	r3, r2
 8002f22:	b21b      	sxth	r3, r3
 8002f24:	833b      	strh	r3, [r7, #24]
  InBuffer[5] = (((int16_t)Buffer[12]) << 8) | Buffer[13];
 8002f26:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002f2a:	021b      	lsls	r3, r3, #8
 8002f2c:	b21a      	sxth	r2, r3
 8002f2e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8002f32:	b21b      	sxth	r3, r3
 8002f34:	4313      	orrs	r3, r2
 8002f36:	b21b      	sxth	r3, r3
 8002f38:	837b      	strh	r3, [r7, #26]
	
	temp = (((int16_t)Buffer[6]) << 8) | Buffer[7];
 8002f3a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002f3e:	021b      	lsls	r3, r3, #8
 8002f40:	b21a      	sxth	r2, r3
 8002f42:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002f46:	b21b      	sxth	r3, r3
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	InBuffer[6] = (int16_t)(temp* 10L / 34) + 3653;
 8002f4c:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	@ 0x2e
 8002f50:	4613      	mov	r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	4413      	add	r3, r2
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	4a2a      	ldr	r2, [pc, #168]	@ (8003004 <MPU6050_GetData+0x17c>)
 8002f5a:	fb82 1203 	smull	r1, r2, r2, r3
 8002f5e:	1112      	asrs	r2, r2, #4
 8002f60:	17db      	asrs	r3, r3, #31
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	f603 6345 	addw	r3, r3, #3653	@ 0xe45
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	b21b      	sxth	r3, r3
 8002f6e:	83bb      	strh	r3, [r7, #28]
	
	*ax = *(InBuffer + 0);
 8002f70:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	801a      	strh	r2, [r3, #0]
	*ay = *(InBuffer + 1);
 8002f78:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	801a      	strh	r2, [r3, #0]
	*az = *(InBuffer + 2);
 8002f80:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	801a      	strh	r2, [r3, #0]
	*gx = *(InBuffer + 3) / 32.8f;
 8002f88:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7fd feaf 	bl	8000cf0 <__aeabi_i2f>
 8002f92:	4603      	mov	r3, r0
 8002f94:	491c      	ldr	r1, [pc, #112]	@ (8003008 <MPU6050_GetData+0x180>)
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7fd ffb2 	bl	8000f00 <__aeabi_fdiv>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7fe f8d6 	bl	8001150 <__aeabi_f2iz>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	b21a      	sxth	r2, r3
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	801a      	strh	r2, [r3, #0]
	*gy = *(InBuffer + 4) / 32.8f;
 8002fac:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7fd fe9d 	bl	8000cf0 <__aeabi_i2f>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	4913      	ldr	r1, [pc, #76]	@ (8003008 <MPU6050_GetData+0x180>)
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7fd ffa0 	bl	8000f00 <__aeabi_fdiv>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7fe f8c4 	bl	8001150 <__aeabi_f2iz>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	b21a      	sxth	r2, r3
 8002fcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fce:	801a      	strh	r2, [r3, #0]
	*gz = *(InBuffer + 5) / 32.8f;
 8002fd0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7fd fe8b 	bl	8000cf0 <__aeabi_i2f>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	490a      	ldr	r1, [pc, #40]	@ (8003008 <MPU6050_GetData+0x180>)
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7fd ff8e 	bl	8000f00 <__aeabi_fdiv>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f7fe f8b2 	bl	8001150 <__aeabi_f2iz>
 8002fec:	4603      	mov	r3, r0
 8002fee:	b21a      	sxth	r2, r3
 8002ff0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ff2:	801a      	strh	r2, [r3, #0]
	*tmpr = *(InBuffer + 6);
 8002ff4:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8002ff8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ffa:	801a      	strh	r2, [r3, #0]
}
 8002ffc:	bf00      	nop
 8002ffe:	3730      	adds	r7, #48	@ 0x30
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	78787879 	.word	0x78787879
 8003008:	42033333 	.word	0x42033333

0800300c <MPU6050_Init>:
	MPU6050_GyroOffset.Z = TempGz >> 5;

}

void MPU6050_Init(uint8_t	lpf)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	4603      	mov	r3, r0
 8003014:	71fb      	strb	r3, [r7, #7]
  MPU6050_SetClockSource(MPU6050_CLOCK_PLL_XGYRO); 
 8003016:	2001      	movs	r0, #1
 8003018:	f7ff fece 	bl	8002db8 <MPU6050_SetClockSource>
  MPU6050_SetFullScaleGyroRange(MPU6050_GYRO_FS_1000);
 800301c:	2002      	movs	r0, #2
 800301e:	f7ff feda 	bl	8002dd6 <MPU6050_SetFullScaleGyroRange>
  MPU6050_SetFullScaleAccelRange(MPU6050_ACCEL_FS_2);	
 8003022:	2000      	movs	r0, #0
 8003024:	f7ff fef4 	bl	8002e10 <MPU6050_SetFullScaleAccelRange>
		MPU6050_DLPF_BW_42          0x03
		MPU6050_DLPF_BW_20          0x04
		MPU6050_DLPF_BW_10          0x05
		MPU6050_DLPF_BW_5           0x06
	*/
	MPU6050_SetLPF(lpf);
 8003028:	79fb      	ldrb	r3, [r7, #7]
 800302a:	4618      	mov	r0, r3
 800302c:	f7ff fee2 	bl	8002df4 <MPU6050_SetLPF>
	
  MPU6050_SetSleepEnabled(0); 
 8003030:	2000      	movs	r0, #0
 8003032:	f7ff fefc 	bl	8002e2e <MPU6050_SetSleepEnabled>
	MPU6050_SetI2CMasterModeEnabled(0);	 
 8003036:	2000      	movs	r0, #0
 8003038:	f7ff ff08 	bl	8002e4c <MPU6050_SetI2CMasterModeEnabled>
	MPU6050_SetI2CBypassEnabled(1);	 
 800303c:	2001      	movs	r0, #1
 800303e:	f7ff ff14 	bl	8002e6a <MPU6050_SetI2CBypassEnabled>
	
	MPU6050_WriteOneBit(MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_INT_LEVEL_BIT, 0);
 8003042:	2200      	movs	r2, #0
 8003044:	2107      	movs	r1, #7
 8003046:	2037      	movs	r0, #55	@ 0x37
 8003048:	f7ff fe5d 	bl	8002d06 <MPU6050_WriteOneBit>
	MPU6050_WriteOneBit( MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_INT_OPEN_BIT, 0);
 800304c:	2200      	movs	r2, #0
 800304e:	2106      	movs	r1, #6
 8003050:	2037      	movs	r0, #55	@ 0x37
 8003052:	f7ff fe58 	bl	8002d06 <MPU6050_WriteOneBit>
	MPU6050_WriteOneBit(MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_LATCH_INT_EN_BIT, 1);
 8003056:	2201      	movs	r2, #1
 8003058:	2105      	movs	r1, #5
 800305a:	2037      	movs	r0, #55	@ 0x37
 800305c:	f7ff fe53 	bl	8002d06 <MPU6050_WriteOneBit>
	MPU6050_WriteOneBit(MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_INT_RD_CLEAR_BIT, 1);
 8003060:	2201      	movs	r2, #1
 8003062:	2104      	movs	r1, #4
 8003064:	2037      	movs	r0, #55	@ 0x37
 8003066:	f7ff fe4e 	bl	8002d06 <MPU6050_WriteOneBit>
  MPU6050_WriteOneBit(MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_DATA_RDY_BIT, 1);
 800306a:	2201      	movs	r2, #1
 800306c:	2100      	movs	r1, #0
 800306e:	2038      	movs	r0, #56	@ 0x38
 8003070:	f7ff fe49 	bl	8002d06 <MPU6050_WriteOneBit>
	HAL_Delay(100);  // ���̷� ����ȭ ���
 8003074:	2064      	movs	r0, #100	@ 0x64
 8003076:	f000 fcdb 	bl	8003a30 <HAL_Delay>

	cliAdd("mpu6050", cliMPU6050);
 800307a:	4904      	ldr	r1, [pc, #16]	@ (800308c <MPU6050_Init+0x80>)
 800307c:	4804      	ldr	r0, [pc, #16]	@ (8003090 <MPU6050_Init+0x84>)
 800307e:	f7fe ffd3 	bl	8002028 <cliAdd>
}
 8003082:	bf00      	nop
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	08003099 	.word	0x08003099
 8003090:	0800c3d4 	.word	0x0800c3d4
 8003094:	00000000 	.word	0x00000000

08003098 <cliMPU6050>:

void cliMPU6050(cli_args_t *args)
{
 8003098:	b590      	push	{r4, r7, lr}
 800309a:	b0a3      	sub	sp, #140	@ 0x8c
 800309c:	af0c      	add	r7, sp, #48	@ 0x30
 800309e:	6078      	str	r0, [r7, #4]
  bool ret = false;
 80030a0:	2300      	movs	r3, #0
 80030a2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

  if(args->argc == 1 && args->isStr(0, "show"))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	881b      	ldrh	r3, [r3, #0]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	f040 80ee 	bne.w	800328c <cliMPU6050+0x1f4>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	695b      	ldr	r3, [r3, #20]
 80030b4:	497e      	ldr	r1, [pc, #504]	@ (80032b0 <cliMPU6050+0x218>)
 80030b6:	2000      	movs	r0, #0
 80030b8:	4798      	blx	r3
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f000 80e5 	beq.w	800328c <cliMPU6050+0x1f4>
  {
    int16_t raw_ax = 0, raw_ay = 0, raw_az = 0;
 80030c2:	2300      	movs	r3, #0
 80030c4:	82bb      	strh	r3, [r7, #20]
 80030c6:	2300      	movs	r3, #0
 80030c8:	827b      	strh	r3, [r7, #18]
 80030ca:	2300      	movs	r3, #0
 80030cc:	823b      	strh	r3, [r7, #16]
    int16_t raw_gx = 0, raw_gy = 0, raw_gz = 0;
 80030ce:	2300      	movs	r3, #0
 80030d0:	81fb      	strh	r3, [r7, #14]
 80030d2:	2300      	movs	r3, #0
 80030d4:	81bb      	strh	r3, [r7, #12]
 80030d6:	2300      	movs	r3, #0
 80030d8:	817b      	strh	r3, [r7, #10]
    int16_t raw_temp = 0;
 80030da:	2300      	movs	r3, #0
 80030dc:	813b      	strh	r3, [r7, #8]

    double ax = 0.0, ay = 0.0, az = 0.0;
 80030de:	f04f 0200 	mov.w	r2, #0
 80030e2:	f04f 0300 	mov.w	r3, #0
 80030e6:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 80030ea:	f04f 0200 	mov.w	r2, #0
 80030ee:	f04f 0300 	mov.w	r3, #0
 80030f2:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 80030f6:	f04f 0200 	mov.w	r2, #0
 80030fa:	f04f 0300 	mov.w	r3, #0
 80030fe:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double gx = 0.0, gy = 0.0, gz = 0.0;
 8003102:	f04f 0200 	mov.w	r2, #0
 8003106:	f04f 0300 	mov.w	r3, #0
 800310a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 800310e:	f04f 0200 	mov.w	r2, #0
 8003112:	f04f 0300 	mov.w	r3, #0
 8003116:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 800311a:	f04f 0200 	mov.w	r2, #0
 800311e:	f04f 0300 	mov.w	r3, #0
 8003122:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double temp = 0.0;
 8003126:	f04f 0200 	mov.w	r2, #0
 800312a:	f04f 0300 	mov.w	r3, #0
 800312e:	e9c7 2306 	strd	r2, r3, [r7, #24]

    uint8_t str = 0;
 8003132:	2300      	movs	r3, #0
 8003134:	75fb      	strb	r3, [r7, #23]

    while(cliKeepLoop())
 8003136:	e09e      	b.n	8003276 <cliMPU6050+0x1de>
    {
      str = uartRead(CH_USART1);
 8003138:	2001      	movs	r0, #1
 800313a:	f7ff f923 	bl	8002384 <uartRead>
 800313e:	4603      	mov	r3, r0
 8003140:	75fb      	strb	r3, [r7, #23]

      if(str == 0x0D)
 8003142:	7dfb      	ldrb	r3, [r7, #23]
 8003144:	2b0d      	cmp	r3, #13
 8003146:	f000 809d 	beq.w	8003284 <cliMPU6050+0x1ec>
        break;

      MPU6050_GetData(&raw_ax, &raw_ay, &raw_az, &raw_gx, &raw_gy, &raw_gz, &raw_temp);
 800314a:	f107 040e 	add.w	r4, r7, #14
 800314e:	f107 0210 	add.w	r2, r7, #16
 8003152:	f107 0112 	add.w	r1, r7, #18
 8003156:	f107 0014 	add.w	r0, r7, #20
 800315a:	f107 0308 	add.w	r3, r7, #8
 800315e:	9302      	str	r3, [sp, #8]
 8003160:	f107 030a 	add.w	r3, r7, #10
 8003164:	9301      	str	r3, [sp, #4]
 8003166:	f107 030c 	add.w	r3, r7, #12
 800316a:	9300      	str	r3, [sp, #0]
 800316c:	4623      	mov	r3, r4
 800316e:	f7ff fe8b 	bl	8002e88 <MPU6050_GetData>

      ax = (double)raw_ax / 4096;
 8003172:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003176:	4618      	mov	r0, r3
 8003178:	f7fd f94e 	bl	8000418 <__aeabi_i2d>
 800317c:	f04f 0200 	mov.w	r2, #0
 8003180:	4b4c      	ldr	r3, [pc, #304]	@ (80032b4 <cliMPU6050+0x21c>)
 8003182:	f7fd fadd 	bl	8000740 <__aeabi_ddiv>
 8003186:	4602      	mov	r2, r0
 8003188:	460b      	mov	r3, r1
 800318a:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
      ay = (double)raw_ay / 4096;
 800318e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003192:	4618      	mov	r0, r3
 8003194:	f7fd f940 	bl	8000418 <__aeabi_i2d>
 8003198:	f04f 0200 	mov.w	r2, #0
 800319c:	4b45      	ldr	r3, [pc, #276]	@ (80032b4 <cliMPU6050+0x21c>)
 800319e:	f7fd facf 	bl	8000740 <__aeabi_ddiv>
 80031a2:	4602      	mov	r2, r0
 80031a4:	460b      	mov	r3, r1
 80031a6:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
      az = (double)raw_az / 4096;
 80031aa:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7fd f932 	bl	8000418 <__aeabi_i2d>
 80031b4:	f04f 0200 	mov.w	r2, #0
 80031b8:	4b3e      	ldr	r3, [pc, #248]	@ (80032b4 <cliMPU6050+0x21c>)
 80031ba:	f7fd fac1 	bl	8000740 <__aeabi_ddiv>
 80031be:	4602      	mov	r2, r0
 80031c0:	460b      	mov	r3, r1
 80031c2:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
      gx = (double)raw_gx / 32.8;
 80031c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7fd f924 	bl	8000418 <__aeabi_i2d>
 80031d0:	a335      	add	r3, pc, #212	@ (adr r3, 80032a8 <cliMPU6050+0x210>)
 80031d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d6:	f7fd fab3 	bl	8000740 <__aeabi_ddiv>
 80031da:	4602      	mov	r2, r0
 80031dc:	460b      	mov	r3, r1
 80031de:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
      gy = (double)raw_gy / 32.8;
 80031e2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7fd f916 	bl	8000418 <__aeabi_i2d>
 80031ec:	a32e      	add	r3, pc, #184	@ (adr r3, 80032a8 <cliMPU6050+0x210>)
 80031ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f2:	f7fd faa5 	bl	8000740 <__aeabi_ddiv>
 80031f6:	4602      	mov	r2, r0
 80031f8:	460b      	mov	r3, r1
 80031fa:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
      gz = (double)raw_gz / 32.8;
 80031fe:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003202:	4618      	mov	r0, r3
 8003204:	f7fd f908 	bl	8000418 <__aeabi_i2d>
 8003208:	a327      	add	r3, pc, #156	@ (adr r3, 80032a8 <cliMPU6050+0x210>)
 800320a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800320e:	f7fd fa97 	bl	8000740 <__aeabi_ddiv>
 8003212:	4602      	mov	r2, r0
 8003214:	460b      	mov	r3, r1
 8003216:	e9c7 2308 	strd	r2, r3, [r7, #32]
      temp = (double)raw_temp / 100;
 800321a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800321e:	4618      	mov	r0, r3
 8003220:	f7fd f8fa 	bl	8000418 <__aeabi_i2d>
 8003224:	f04f 0200 	mov.w	r2, #0
 8003228:	4b23      	ldr	r3, [pc, #140]	@ (80032b8 <cliMPU6050+0x220>)
 800322a:	f7fd fa89 	bl	8000740 <__aeabi_ddiv>
 800322e:	4602      	mov	r2, r0
 8003230:	460b      	mov	r3, r1
 8003232:	e9c7 2306 	strd	r2, r3, [r7, #24]

      cliPrintf("ax: %.2f, ay: %.2f, az: %.2f, gx: %.2f, gy: %.2f, gz: %.2f, temp: %.2f\n", ax, ay, az, gx, gy, gz, temp);
 8003236:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800323a:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 800323e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003242:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003246:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800324a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800324e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003252:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003256:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800325a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800325e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003262:	e9cd 2300 	strd	r2, r3, [sp]
 8003266:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800326a:	4814      	ldr	r0, [pc, #80]	@ (80032bc <cliMPU6050+0x224>)
 800326c:	f7fe fdda 	bl	8001e24 <cliPrintf>

      HAL_Delay(200);
 8003270:	20c8      	movs	r0, #200	@ 0xc8
 8003272:	f000 fbdd 	bl	8003a30 <HAL_Delay>
    while(cliKeepLoop())
 8003276:	f7fe fec9 	bl	800200c <cliKeepLoop>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	f47f af5b 	bne.w	8003138 <cliMPU6050+0xa0>
 8003282:	e000      	b.n	8003286 <cliMPU6050+0x1ee>
        break;
 8003284:	bf00      	nop
    }

    ret = true;
 8003286:	2301      	movs	r3, #1
 8003288:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
  }

  if(ret != true)
 800328c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8003290:	f083 0301 	eor.w	r3, r3, #1
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	d002      	beq.n	80032a0 <cliMPU6050+0x208>
  {
    cliPrintf("mpu6050 show\n");
 800329a:	4809      	ldr	r0, [pc, #36]	@ (80032c0 <cliMPU6050+0x228>)
 800329c:	f7fe fdc2 	bl	8001e24 <cliPrintf>
  }
}
 80032a0:	bf00      	nop
 80032a2:	375c      	adds	r7, #92	@ 0x5c
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd90      	pop	{r4, r7, pc}
 80032a8:	66666666 	.word	0x66666666
 80032ac:	40406666 	.word	0x40406666
 80032b0:	0800c3dc 	.word	0x0800c3dc
 80032b4:	40b00000 	.word	0x40b00000
 80032b8:	40590000 	.word	0x40590000
 80032bc:	0800c3e4 	.word	0x0800c3e4
 80032c0:	0800c42c 	.word	0x0800c42c

080032c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b085      	sub	sp, #20
 80032c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80032ca:	4b15      	ldr	r3, [pc, #84]	@ (8003320 <HAL_MspInit+0x5c>)
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	4a14      	ldr	r2, [pc, #80]	@ (8003320 <HAL_MspInit+0x5c>)
 80032d0:	f043 0301 	orr.w	r3, r3, #1
 80032d4:	6193      	str	r3, [r2, #24]
 80032d6:	4b12      	ldr	r3, [pc, #72]	@ (8003320 <HAL_MspInit+0x5c>)
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	60bb      	str	r3, [r7, #8]
 80032e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80032e2:	4b0f      	ldr	r3, [pc, #60]	@ (8003320 <HAL_MspInit+0x5c>)
 80032e4:	69db      	ldr	r3, [r3, #28]
 80032e6:	4a0e      	ldr	r2, [pc, #56]	@ (8003320 <HAL_MspInit+0x5c>)
 80032e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032ec:	61d3      	str	r3, [r2, #28]
 80032ee:	4b0c      	ldr	r3, [pc, #48]	@ (8003320 <HAL_MspInit+0x5c>)
 80032f0:	69db      	ldr	r3, [r3, #28]
 80032f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032f6:	607b      	str	r3, [r7, #4]
 80032f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80032fa:	4b0a      	ldr	r3, [pc, #40]	@ (8003324 <HAL_MspInit+0x60>)
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	60fb      	str	r3, [r7, #12]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8003306:	60fb      	str	r3, [r7, #12]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800330e:	60fb      	str	r3, [r7, #12]
 8003310:	4a04      	ldr	r2, [pc, #16]	@ (8003324 <HAL_MspInit+0x60>)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003316:	bf00      	nop
 8003318:	3714      	adds	r7, #20
 800331a:	46bd      	mov	sp, r7
 800331c:	bc80      	pop	{r7}
 800331e:	4770      	bx	lr
 8003320:	40021000 	.word	0x40021000
 8003324:	40010000 	.word	0x40010000

08003328 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003328:	b480      	push	{r7}
 800332a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800332c:	bf00      	nop
 800332e:	e7fd      	b.n	800332c <NMI_Handler+0x4>

08003330 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003330:	b480      	push	{r7}
 8003332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003334:	bf00      	nop
 8003336:	e7fd      	b.n	8003334 <HardFault_Handler+0x4>

08003338 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003338:	b480      	push	{r7}
 800333a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800333c:	bf00      	nop
 800333e:	e7fd      	b.n	800333c <MemManage_Handler+0x4>

08003340 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003344:	bf00      	nop
 8003346:	e7fd      	b.n	8003344 <BusFault_Handler+0x4>

08003348 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800334c:	bf00      	nop
 800334e:	e7fd      	b.n	800334c <UsageFault_Handler+0x4>

08003350 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003354:	bf00      	nop
 8003356:	46bd      	mov	sp, r7
 8003358:	bc80      	pop	{r7}
 800335a:	4770      	bx	lr

0800335c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003360:	bf00      	nop
 8003362:	46bd      	mov	sp, r7
 8003364:	bc80      	pop	{r7}
 8003366:	4770      	bx	lr

08003368 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800336c:	bf00      	nop
 800336e:	46bd      	mov	sp, r7
 8003370:	bc80      	pop	{r7}
 8003372:	4770      	bx	lr

08003374 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003378:	f000 fb3e 	bl	80039f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800337c:	bf00      	nop
 800337e:	bd80      	pop	{r7, pc}

08003380 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003384:	4802      	ldr	r0, [pc, #8]	@ (8003390 <DMA1_Channel5_IRQHandler+0x10>)
 8003386:	f000 fdf3 	bl	8003f70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800338a:	bf00      	nop
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	200008e0 	.word	0x200008e0

08003394 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003398:	4802      	ldr	r0, [pc, #8]	@ (80033a4 <DMA1_Channel6_IRQHandler+0x10>)
 800339a:	f000 fde9 	bl	8003f70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800339e:	bf00      	nop
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	20000924 	.word	0x20000924

080033a8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80033ac:	4802      	ldr	r0, [pc, #8]	@ (80033b8 <TIM3_IRQHandler+0x10>)
 80033ae:	f002 fe55 	bl	800605c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80033b2:	bf00      	nop
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	20000808 	.word	0x20000808

080033bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80033c0:	4802      	ldr	r0, [pc, #8]	@ (80033cc <USART1_IRQHandler+0x10>)
 80033c2:	f003 f96b 	bl	800669c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80033c6:	bf00      	nop
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	20000850 	.word	0x20000850

080033d0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80033d4:	4802      	ldr	r0, [pc, #8]	@ (80033e0 <USART2_IRQHandler+0x10>)
 80033d6:	f003 f961 	bl	800669c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80033da:	bf00      	nop
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	20000898 	.word	0x20000898

080033e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80033e4:	b480      	push	{r7}
 80033e6:	af00      	add	r7, sp, #0
  return 1;
 80033e8:	2301      	movs	r3, #1
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bc80      	pop	{r7}
 80033f0:	4770      	bx	lr

080033f2 <_kill>:

int _kill(int pid, int sig)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b082      	sub	sp, #8
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
 80033fa:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80033fc:	f005 ff7c 	bl	80092f8 <__errno>
 8003400:	4603      	mov	r3, r0
 8003402:	2216      	movs	r2, #22
 8003404:	601a      	str	r2, [r3, #0]
  return -1;
 8003406:	f04f 33ff 	mov.w	r3, #4294967295
}
 800340a:	4618      	mov	r0, r3
 800340c:	3708      	adds	r7, #8
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}

08003412 <_exit>:

void _exit (int status)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	b082      	sub	sp, #8
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800341a:	f04f 31ff 	mov.w	r1, #4294967295
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f7ff ffe7 	bl	80033f2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003424:	bf00      	nop
 8003426:	e7fd      	b.n	8003424 <_exit+0x12>

08003428 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003434:	2300      	movs	r3, #0
 8003436:	617b      	str	r3, [r7, #20]
 8003438:	e00a      	b.n	8003450 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800343a:	f3af 8000 	nop.w
 800343e:	4601      	mov	r1, r0
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	1c5a      	adds	r2, r3, #1
 8003444:	60ba      	str	r2, [r7, #8]
 8003446:	b2ca      	uxtb	r2, r1
 8003448:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	3301      	adds	r3, #1
 800344e:	617b      	str	r3, [r7, #20]
 8003450:	697a      	ldr	r2, [r7, #20]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	429a      	cmp	r2, r3
 8003456:	dbf0      	blt.n	800343a <_read+0x12>
  }

  return len;
 8003458:	687b      	ldr	r3, [r7, #4]
}
 800345a:	4618      	mov	r0, r3
 800345c:	3718      	adds	r7, #24
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}

08003462 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003462:	b580      	push	{r7, lr}
 8003464:	b086      	sub	sp, #24
 8003466:	af00      	add	r7, sp, #0
 8003468:	60f8      	str	r0, [r7, #12]
 800346a:	60b9      	str	r1, [r7, #8]
 800346c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800346e:	2300      	movs	r3, #0
 8003470:	617b      	str	r3, [r7, #20]
 8003472:	e009      	b.n	8003488 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	1c5a      	adds	r2, r3, #1
 8003478:	60ba      	str	r2, [r7, #8]
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	4618      	mov	r0, r3
 800347e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	3301      	adds	r3, #1
 8003486:	617b      	str	r3, [r7, #20]
 8003488:	697a      	ldr	r2, [r7, #20]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	429a      	cmp	r2, r3
 800348e:	dbf1      	blt.n	8003474 <_write+0x12>
  }
  return len;
 8003490:	687b      	ldr	r3, [r7, #4]
}
 8003492:	4618      	mov	r0, r3
 8003494:	3718      	adds	r7, #24
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <_close>:

int _close(int file)
{
 800349a:	b480      	push	{r7}
 800349c:	b083      	sub	sp, #12
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80034a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	370c      	adds	r7, #12
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bc80      	pop	{r7}
 80034ae:	4770      	bx	lr

080034b0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80034c0:	605a      	str	r2, [r3, #4]
  return 0;
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bc80      	pop	{r7}
 80034cc:	4770      	bx	lr

080034ce <_isatty>:

int _isatty(int file)
{
 80034ce:	b480      	push	{r7}
 80034d0:	b083      	sub	sp, #12
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80034d6:	2301      	movs	r3, #1
}
 80034d8:	4618      	mov	r0, r3
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	bc80      	pop	{r7}
 80034e0:	4770      	bx	lr

080034e2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80034e2:	b480      	push	{r7}
 80034e4:	b085      	sub	sp, #20
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	60f8      	str	r0, [r7, #12]
 80034ea:	60b9      	str	r1, [r7, #8]
 80034ec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3714      	adds	r7, #20
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bc80      	pop	{r7}
 80034f8:	4770      	bx	lr
	...

080034fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b086      	sub	sp, #24
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003504:	4a14      	ldr	r2, [pc, #80]	@ (8003558 <_sbrk+0x5c>)
 8003506:	4b15      	ldr	r3, [pc, #84]	@ (800355c <_sbrk+0x60>)
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003510:	4b13      	ldr	r3, [pc, #76]	@ (8003560 <_sbrk+0x64>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d102      	bne.n	800351e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003518:	4b11      	ldr	r3, [pc, #68]	@ (8003560 <_sbrk+0x64>)
 800351a:	4a12      	ldr	r2, [pc, #72]	@ (8003564 <_sbrk+0x68>)
 800351c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800351e:	4b10      	ldr	r3, [pc, #64]	@ (8003560 <_sbrk+0x64>)
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4413      	add	r3, r2
 8003526:	693a      	ldr	r2, [r7, #16]
 8003528:	429a      	cmp	r2, r3
 800352a:	d207      	bcs.n	800353c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800352c:	f005 fee4 	bl	80092f8 <__errno>
 8003530:	4603      	mov	r3, r0
 8003532:	220c      	movs	r2, #12
 8003534:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003536:	f04f 33ff 	mov.w	r3, #4294967295
 800353a:	e009      	b.n	8003550 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800353c:	4b08      	ldr	r3, [pc, #32]	@ (8003560 <_sbrk+0x64>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003542:	4b07      	ldr	r3, [pc, #28]	@ (8003560 <_sbrk+0x64>)
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4413      	add	r3, r2
 800354a:	4a05      	ldr	r2, [pc, #20]	@ (8003560 <_sbrk+0x64>)
 800354c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800354e:	68fb      	ldr	r3, [r7, #12]
}
 8003550:	4618      	mov	r0, r3
 8003552:	3718      	adds	r7, #24
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	20005000 	.word	0x20005000
 800355c:	00000400 	.word	0x00000400
 8003560:	20000804 	.word	0x20000804
 8003564:	20000ab8 	.word	0x20000ab8

08003568 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003568:	b480      	push	{r7}
 800356a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800356c:	bf00      	nop
 800356e:	46bd      	mov	sp, r7
 8003570:	bc80      	pop	{r7}
 8003572:	4770      	bx	lr

08003574 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b08c      	sub	sp, #48	@ 0x30
 8003578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800357a:	f107 030c 	add.w	r3, r7, #12
 800357e:	2224      	movs	r2, #36	@ 0x24
 8003580:	2100      	movs	r1, #0
 8003582:	4618      	mov	r0, r3
 8003584:	f005 fe28 	bl	80091d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003588:	1d3b      	adds	r3, r7, #4
 800358a:	2200      	movs	r2, #0
 800358c:	601a      	str	r2, [r3, #0]
 800358e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003590:	4b20      	ldr	r3, [pc, #128]	@ (8003614 <MX_TIM3_Init+0xa0>)
 8003592:	4a21      	ldr	r2, [pc, #132]	@ (8003618 <MX_TIM3_Init+0xa4>)
 8003594:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003596:	4b1f      	ldr	r3, [pc, #124]	@ (8003614 <MX_TIM3_Init+0xa0>)
 8003598:	2200      	movs	r2, #0
 800359a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800359c:	4b1d      	ldr	r3, [pc, #116]	@ (8003614 <MX_TIM3_Init+0xa0>)
 800359e:	2200      	movs	r2, #0
 80035a0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 128;
 80035a2:	4b1c      	ldr	r3, [pc, #112]	@ (8003614 <MX_TIM3_Init+0xa0>)
 80035a4:	2280      	movs	r2, #128	@ 0x80
 80035a6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035a8:	4b1a      	ldr	r3, [pc, #104]	@ (8003614 <MX_TIM3_Init+0xa0>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035ae:	4b19      	ldr	r3, [pc, #100]	@ (8003614 <MX_TIM3_Init+0xa0>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80035b4:	2301      	movs	r3, #1
 80035b6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80035b8:	2300      	movs	r3, #0
 80035ba:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80035bc:	2301      	movs	r3, #1
 80035be:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80035c0:	2300      	movs	r3, #0
 80035c2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80035c4:	2300      	movs	r3, #0
 80035c6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80035c8:	2300      	movs	r3, #0
 80035ca:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80035cc:	2301      	movs	r3, #1
 80035ce:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80035d0:	2300      	movs	r3, #0
 80035d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80035d4:	2300      	movs	r3, #0
 80035d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80035d8:	f107 030c 	add.w	r3, r7, #12
 80035dc:	4619      	mov	r1, r3
 80035de:	480d      	ldr	r0, [pc, #52]	@ (8003614 <MX_TIM3_Init+0xa0>)
 80035e0:	f002 fc0c 	bl	8005dfc <HAL_TIM_Encoder_Init>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80035ea:	f7ff fb02 	bl	8002bf2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035ee:	2300      	movs	r3, #0
 80035f0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035f2:	2300      	movs	r3, #0
 80035f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80035f6:	1d3b      	adds	r3, r7, #4
 80035f8:	4619      	mov	r1, r3
 80035fa:	4806      	ldr	r0, [pc, #24]	@ (8003614 <MX_TIM3_Init+0xa0>)
 80035fc:	f002 fede 	bl	80063bc <HAL_TIMEx_MasterConfigSynchronization>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8003606:	f7ff faf4 	bl	8002bf2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800360a:	bf00      	nop
 800360c:	3730      	adds	r7, #48	@ 0x30
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	20000808 	.word	0x20000808
 8003618:	40000400 	.word	0x40000400

0800361c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b088      	sub	sp, #32
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003624:	f107 0310 	add.w	r3, r7, #16
 8003628:	2200      	movs	r2, #0
 800362a:	601a      	str	r2, [r3, #0]
 800362c:	605a      	str	r2, [r3, #4]
 800362e:	609a      	str	r2, [r3, #8]
 8003630:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM3)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a19      	ldr	r2, [pc, #100]	@ (800369c <HAL_TIM_Encoder_MspInit+0x80>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d12b      	bne.n	8003694 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800363c:	4b18      	ldr	r3, [pc, #96]	@ (80036a0 <HAL_TIM_Encoder_MspInit+0x84>)
 800363e:	69db      	ldr	r3, [r3, #28]
 8003640:	4a17      	ldr	r2, [pc, #92]	@ (80036a0 <HAL_TIM_Encoder_MspInit+0x84>)
 8003642:	f043 0302 	orr.w	r3, r3, #2
 8003646:	61d3      	str	r3, [r2, #28]
 8003648:	4b15      	ldr	r3, [pc, #84]	@ (80036a0 <HAL_TIM_Encoder_MspInit+0x84>)
 800364a:	69db      	ldr	r3, [r3, #28]
 800364c:	f003 0302 	and.w	r3, r3, #2
 8003650:	60fb      	str	r3, [r7, #12]
 8003652:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003654:	4b12      	ldr	r3, [pc, #72]	@ (80036a0 <HAL_TIM_Encoder_MspInit+0x84>)
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	4a11      	ldr	r2, [pc, #68]	@ (80036a0 <HAL_TIM_Encoder_MspInit+0x84>)
 800365a:	f043 0304 	orr.w	r3, r3, #4
 800365e:	6193      	str	r3, [r2, #24]
 8003660:	4b0f      	ldr	r3, [pc, #60]	@ (80036a0 <HAL_TIM_Encoder_MspInit+0x84>)
 8003662:	699b      	ldr	r3, [r3, #24]
 8003664:	f003 0304 	and.w	r3, r3, #4
 8003668:	60bb      	str	r3, [r7, #8]
 800366a:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_OTB_Pin|ENCODER_OTA_Pin;
 800366c:	23c0      	movs	r3, #192	@ 0xc0
 800366e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003670:	2300      	movs	r3, #0
 8003672:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003674:	2300      	movs	r3, #0
 8003676:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003678:	f107 0310 	add.w	r3, r7, #16
 800367c:	4619      	mov	r1, r3
 800367e:	4809      	ldr	r0, [pc, #36]	@ (80036a4 <HAL_TIM_Encoder_MspInit+0x88>)
 8003680:	f000 fdaa 	bl	80041d8 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003684:	2200      	movs	r2, #0
 8003686:	2100      	movs	r1, #0
 8003688:	201d      	movs	r0, #29
 800368a:	f000 facc 	bl	8003c26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800368e:	201d      	movs	r0, #29
 8003690:	f000 fae5 	bl	8003c5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003694:	bf00      	nop
 8003696:	3720      	adds	r7, #32
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}
 800369c:	40000400 	.word	0x40000400
 80036a0:	40021000 	.word	0x40021000
 80036a4:	40010800 	.word	0x40010800

080036a8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80036ac:	4b11      	ldr	r3, [pc, #68]	@ (80036f4 <MX_USART1_UART_Init+0x4c>)
 80036ae:	4a12      	ldr	r2, [pc, #72]	@ (80036f8 <MX_USART1_UART_Init+0x50>)
 80036b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80036b2:	4b10      	ldr	r3, [pc, #64]	@ (80036f4 <MX_USART1_UART_Init+0x4c>)
 80036b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80036b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80036ba:	4b0e      	ldr	r3, [pc, #56]	@ (80036f4 <MX_USART1_UART_Init+0x4c>)
 80036bc:	2200      	movs	r2, #0
 80036be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80036c0:	4b0c      	ldr	r3, [pc, #48]	@ (80036f4 <MX_USART1_UART_Init+0x4c>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80036c6:	4b0b      	ldr	r3, [pc, #44]	@ (80036f4 <MX_USART1_UART_Init+0x4c>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80036cc:	4b09      	ldr	r3, [pc, #36]	@ (80036f4 <MX_USART1_UART_Init+0x4c>)
 80036ce:	220c      	movs	r2, #12
 80036d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80036d2:	4b08      	ldr	r3, [pc, #32]	@ (80036f4 <MX_USART1_UART_Init+0x4c>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80036d8:	4b06      	ldr	r3, [pc, #24]	@ (80036f4 <MX_USART1_UART_Init+0x4c>)
 80036da:	2200      	movs	r2, #0
 80036dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80036de:	4805      	ldr	r0, [pc, #20]	@ (80036f4 <MX_USART1_UART_Init+0x4c>)
 80036e0:	f002 fedc 	bl	800649c <HAL_UART_Init>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d001      	beq.n	80036ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80036ea:	f7ff fa82 	bl	8002bf2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80036ee:	bf00      	nop
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	20000850 	.word	0x20000850
 80036f8:	40013800 	.word	0x40013800

080036fc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003700:	4b11      	ldr	r3, [pc, #68]	@ (8003748 <MX_USART2_UART_Init+0x4c>)
 8003702:	4a12      	ldr	r2, [pc, #72]	@ (800374c <MX_USART2_UART_Init+0x50>)
 8003704:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003706:	4b10      	ldr	r3, [pc, #64]	@ (8003748 <MX_USART2_UART_Init+0x4c>)
 8003708:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800370c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800370e:	4b0e      	ldr	r3, [pc, #56]	@ (8003748 <MX_USART2_UART_Init+0x4c>)
 8003710:	2200      	movs	r2, #0
 8003712:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003714:	4b0c      	ldr	r3, [pc, #48]	@ (8003748 <MX_USART2_UART_Init+0x4c>)
 8003716:	2200      	movs	r2, #0
 8003718:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800371a:	4b0b      	ldr	r3, [pc, #44]	@ (8003748 <MX_USART2_UART_Init+0x4c>)
 800371c:	2200      	movs	r2, #0
 800371e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003720:	4b09      	ldr	r3, [pc, #36]	@ (8003748 <MX_USART2_UART_Init+0x4c>)
 8003722:	220c      	movs	r2, #12
 8003724:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003726:	4b08      	ldr	r3, [pc, #32]	@ (8003748 <MX_USART2_UART_Init+0x4c>)
 8003728:	2200      	movs	r2, #0
 800372a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800372c:	4b06      	ldr	r3, [pc, #24]	@ (8003748 <MX_USART2_UART_Init+0x4c>)
 800372e:	2200      	movs	r2, #0
 8003730:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003732:	4805      	ldr	r0, [pc, #20]	@ (8003748 <MX_USART2_UART_Init+0x4c>)
 8003734:	f002 feb2 	bl	800649c <HAL_UART_Init>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d001      	beq.n	8003742 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800373e:	f7ff fa58 	bl	8002bf2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003742:	bf00      	nop
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	20000898 	.word	0x20000898
 800374c:	40004400 	.word	0x40004400

08003750 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b08a      	sub	sp, #40	@ 0x28
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003758:	f107 0318 	add.w	r3, r7, #24
 800375c:	2200      	movs	r2, #0
 800375e:	601a      	str	r2, [r3, #0]
 8003760:	605a      	str	r2, [r3, #4]
 8003762:	609a      	str	r2, [r3, #8]
 8003764:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a65      	ldr	r2, [pc, #404]	@ (8003900 <HAL_UART_MspInit+0x1b0>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d160      	bne.n	8003832 <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003770:	4b64      	ldr	r3, [pc, #400]	@ (8003904 <HAL_UART_MspInit+0x1b4>)
 8003772:	699b      	ldr	r3, [r3, #24]
 8003774:	4a63      	ldr	r2, [pc, #396]	@ (8003904 <HAL_UART_MspInit+0x1b4>)
 8003776:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800377a:	6193      	str	r3, [r2, #24]
 800377c:	4b61      	ldr	r3, [pc, #388]	@ (8003904 <HAL_UART_MspInit+0x1b4>)
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003784:	617b      	str	r3, [r7, #20]
 8003786:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003788:	4b5e      	ldr	r3, [pc, #376]	@ (8003904 <HAL_UART_MspInit+0x1b4>)
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	4a5d      	ldr	r2, [pc, #372]	@ (8003904 <HAL_UART_MspInit+0x1b4>)
 800378e:	f043 0304 	orr.w	r3, r3, #4
 8003792:	6193      	str	r3, [r2, #24]
 8003794:	4b5b      	ldr	r3, [pc, #364]	@ (8003904 <HAL_UART_MspInit+0x1b4>)
 8003796:	699b      	ldr	r3, [r3, #24]
 8003798:	f003 0304 	and.w	r3, r3, #4
 800379c:	613b      	str	r3, [r7, #16]
 800379e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = UART_CLI_TX_Pin;
 80037a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80037a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037a6:	2302      	movs	r3, #2
 80037a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80037aa:	2303      	movs	r3, #3
 80037ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(UART_CLI_TX_GPIO_Port, &GPIO_InitStruct);
 80037ae:	f107 0318 	add.w	r3, r7, #24
 80037b2:	4619      	mov	r1, r3
 80037b4:	4854      	ldr	r0, [pc, #336]	@ (8003908 <HAL_UART_MspInit+0x1b8>)
 80037b6:	f000 fd0f 	bl	80041d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = UART_CLI_RX_Pin;
 80037ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80037be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80037c0:	2300      	movs	r3, #0
 80037c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037c4:	2300      	movs	r3, #0
 80037c6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(UART_CLI_RX_GPIO_Port, &GPIO_InitStruct);
 80037c8:	f107 0318 	add.w	r3, r7, #24
 80037cc:	4619      	mov	r1, r3
 80037ce:	484e      	ldr	r0, [pc, #312]	@ (8003908 <HAL_UART_MspInit+0x1b8>)
 80037d0:	f000 fd02 	bl	80041d8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80037d4:	4b4d      	ldr	r3, [pc, #308]	@ (800390c <HAL_UART_MspInit+0x1bc>)
 80037d6:	4a4e      	ldr	r2, [pc, #312]	@ (8003910 <HAL_UART_MspInit+0x1c0>)
 80037d8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80037da:	4b4c      	ldr	r3, [pc, #304]	@ (800390c <HAL_UART_MspInit+0x1bc>)
 80037dc:	2200      	movs	r2, #0
 80037de:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037e0:	4b4a      	ldr	r3, [pc, #296]	@ (800390c <HAL_UART_MspInit+0x1bc>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80037e6:	4b49      	ldr	r3, [pc, #292]	@ (800390c <HAL_UART_MspInit+0x1bc>)
 80037e8:	2280      	movs	r2, #128	@ 0x80
 80037ea:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80037ec:	4b47      	ldr	r3, [pc, #284]	@ (800390c <HAL_UART_MspInit+0x1bc>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80037f2:	4b46      	ldr	r3, [pc, #280]	@ (800390c <HAL_UART_MspInit+0x1bc>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80037f8:	4b44      	ldr	r3, [pc, #272]	@ (800390c <HAL_UART_MspInit+0x1bc>)
 80037fa:	2220      	movs	r2, #32
 80037fc:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80037fe:	4b43      	ldr	r3, [pc, #268]	@ (800390c <HAL_UART_MspInit+0x1bc>)
 8003800:	2200      	movs	r2, #0
 8003802:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003804:	4841      	ldr	r0, [pc, #260]	@ (800390c <HAL_UART_MspInit+0x1bc>)
 8003806:	f000 fa45 	bl	8003c94 <HAL_DMA_Init>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d001      	beq.n	8003814 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8003810:	f7ff f9ef 	bl	8002bf2 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a3d      	ldr	r2, [pc, #244]	@ (800390c <HAL_UART_MspInit+0x1bc>)
 8003818:	63da      	str	r2, [r3, #60]	@ 0x3c
 800381a:	4a3c      	ldr	r2, [pc, #240]	@ (800390c <HAL_UART_MspInit+0x1bc>)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003820:	2200      	movs	r2, #0
 8003822:	2100      	movs	r1, #0
 8003824:	2025      	movs	r0, #37	@ 0x25
 8003826:	f000 f9fe 	bl	8003c26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800382a:	2025      	movs	r0, #37	@ 0x25
 800382c:	f000 fa17 	bl	8003c5e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003830:	e062      	b.n	80038f8 <HAL_UART_MspInit+0x1a8>
  else if(uartHandle->Instance==USART2)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a37      	ldr	r2, [pc, #220]	@ (8003914 <HAL_UART_MspInit+0x1c4>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d15d      	bne.n	80038f8 <HAL_UART_MspInit+0x1a8>
    __HAL_RCC_USART2_CLK_ENABLE();
 800383c:	4b31      	ldr	r3, [pc, #196]	@ (8003904 <HAL_UART_MspInit+0x1b4>)
 800383e:	69db      	ldr	r3, [r3, #28]
 8003840:	4a30      	ldr	r2, [pc, #192]	@ (8003904 <HAL_UART_MspInit+0x1b4>)
 8003842:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003846:	61d3      	str	r3, [r2, #28]
 8003848:	4b2e      	ldr	r3, [pc, #184]	@ (8003904 <HAL_UART_MspInit+0x1b4>)
 800384a:	69db      	ldr	r3, [r3, #28]
 800384c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003850:	60fb      	str	r3, [r7, #12]
 8003852:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003854:	4b2b      	ldr	r3, [pc, #172]	@ (8003904 <HAL_UART_MspInit+0x1b4>)
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	4a2a      	ldr	r2, [pc, #168]	@ (8003904 <HAL_UART_MspInit+0x1b4>)
 800385a:	f043 0304 	orr.w	r3, r3, #4
 800385e:	6193      	str	r3, [r2, #24]
 8003860:	4b28      	ldr	r3, [pc, #160]	@ (8003904 <HAL_UART_MspInit+0x1b4>)
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	f003 0304 	and.w	r3, r3, #4
 8003868:	60bb      	str	r3, [r7, #8]
 800386a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = UART_BT_TX_Pin;
 800386c:	2304      	movs	r3, #4
 800386e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003870:	2302      	movs	r3, #2
 8003872:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003874:	2303      	movs	r3, #3
 8003876:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(UART_BT_TX_GPIO_Port, &GPIO_InitStruct);
 8003878:	f107 0318 	add.w	r3, r7, #24
 800387c:	4619      	mov	r1, r3
 800387e:	4822      	ldr	r0, [pc, #136]	@ (8003908 <HAL_UART_MspInit+0x1b8>)
 8003880:	f000 fcaa 	bl	80041d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART_BT_RX_Pin;
 8003884:	2308      	movs	r3, #8
 8003886:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003888:	2300      	movs	r3, #0
 800388a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800388c:	2300      	movs	r3, #0
 800388e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(UART_BT_RX_GPIO_Port, &GPIO_InitStruct);
 8003890:	f107 0318 	add.w	r3, r7, #24
 8003894:	4619      	mov	r1, r3
 8003896:	481c      	ldr	r0, [pc, #112]	@ (8003908 <HAL_UART_MspInit+0x1b8>)
 8003898:	f000 fc9e 	bl	80041d8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800389c:	4b1e      	ldr	r3, [pc, #120]	@ (8003918 <HAL_UART_MspInit+0x1c8>)
 800389e:	4a1f      	ldr	r2, [pc, #124]	@ (800391c <HAL_UART_MspInit+0x1cc>)
 80038a0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80038a2:	4b1d      	ldr	r3, [pc, #116]	@ (8003918 <HAL_UART_MspInit+0x1c8>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80038a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003918 <HAL_UART_MspInit+0x1c8>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80038ae:	4b1a      	ldr	r3, [pc, #104]	@ (8003918 <HAL_UART_MspInit+0x1c8>)
 80038b0:	2280      	movs	r2, #128	@ 0x80
 80038b2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80038b4:	4b18      	ldr	r3, [pc, #96]	@ (8003918 <HAL_UART_MspInit+0x1c8>)
 80038b6:	2200      	movs	r2, #0
 80038b8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80038ba:	4b17      	ldr	r3, [pc, #92]	@ (8003918 <HAL_UART_MspInit+0x1c8>)
 80038bc:	2200      	movs	r2, #0
 80038be:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80038c0:	4b15      	ldr	r3, [pc, #84]	@ (8003918 <HAL_UART_MspInit+0x1c8>)
 80038c2:	2220      	movs	r2, #32
 80038c4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80038c6:	4b14      	ldr	r3, [pc, #80]	@ (8003918 <HAL_UART_MspInit+0x1c8>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80038cc:	4812      	ldr	r0, [pc, #72]	@ (8003918 <HAL_UART_MspInit+0x1c8>)
 80038ce:	f000 f9e1 	bl	8003c94 <HAL_DMA_Init>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d001      	beq.n	80038dc <HAL_UART_MspInit+0x18c>
      Error_Handler();
 80038d8:	f7ff f98b 	bl	8002bf2 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a0e      	ldr	r2, [pc, #56]	@ (8003918 <HAL_UART_MspInit+0x1c8>)
 80038e0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80038e2:	4a0d      	ldr	r2, [pc, #52]	@ (8003918 <HAL_UART_MspInit+0x1c8>)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80038e8:	2200      	movs	r2, #0
 80038ea:	2100      	movs	r1, #0
 80038ec:	2026      	movs	r0, #38	@ 0x26
 80038ee:	f000 f99a 	bl	8003c26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80038f2:	2026      	movs	r0, #38	@ 0x26
 80038f4:	f000 f9b3 	bl	8003c5e <HAL_NVIC_EnableIRQ>
}
 80038f8:	bf00      	nop
 80038fa:	3728      	adds	r7, #40	@ 0x28
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	40013800 	.word	0x40013800
 8003904:	40021000 	.word	0x40021000
 8003908:	40010800 	.word	0x40010800
 800390c:	200008e0 	.word	0x200008e0
 8003910:	40020058 	.word	0x40020058
 8003914:	40004400 	.word	0x40004400
 8003918:	20000924 	.word	0x20000924
 800391c:	4002006c 	.word	0x4002006c

08003920 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003920:	f7ff fe22 	bl	8003568 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003924:	480b      	ldr	r0, [pc, #44]	@ (8003954 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003926:	490c      	ldr	r1, [pc, #48]	@ (8003958 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003928:	4a0c      	ldr	r2, [pc, #48]	@ (800395c <LoopFillZerobss+0x16>)
  movs r3, #0
 800392a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800392c:	e002      	b.n	8003934 <LoopCopyDataInit>

0800392e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800392e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003930:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003932:	3304      	adds	r3, #4

08003934 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003934:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003936:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003938:	d3f9      	bcc.n	800392e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800393a:	4a09      	ldr	r2, [pc, #36]	@ (8003960 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800393c:	4c09      	ldr	r4, [pc, #36]	@ (8003964 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800393e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003940:	e001      	b.n	8003946 <LoopFillZerobss>

08003942 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003942:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003944:	3204      	adds	r2, #4

08003946 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003946:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003948:	d3fb      	bcc.n	8003942 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800394a:	f005 fcdb 	bl	8009304 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800394e:	f7ff f8dd 	bl	8002b0c <main>
  bx lr
 8003952:	4770      	bx	lr
  ldr r0, =_sdata
 8003954:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003958:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 800395c:	0800c8d8 	.word	0x0800c8d8
  ldr r2, =_sbss
 8003960:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8003964:	20000ab8 	.word	0x20000ab8

08003968 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003968:	e7fe      	b.n	8003968 <ADC1_2_IRQHandler>
	...

0800396c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003970:	4b08      	ldr	r3, [pc, #32]	@ (8003994 <HAL_Init+0x28>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a07      	ldr	r2, [pc, #28]	@ (8003994 <HAL_Init+0x28>)
 8003976:	f043 0310 	orr.w	r3, r3, #16
 800397a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800397c:	2003      	movs	r0, #3
 800397e:	f000 f947 	bl	8003c10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003982:	200f      	movs	r0, #15
 8003984:	f000 f808 	bl	8003998 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003988:	f7ff fc9c 	bl	80032c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	40022000 	.word	0x40022000

08003998 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80039a0:	4b12      	ldr	r3, [pc, #72]	@ (80039ec <HAL_InitTick+0x54>)
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	4b12      	ldr	r3, [pc, #72]	@ (80039f0 <HAL_InitTick+0x58>)
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	4619      	mov	r1, r3
 80039aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80039ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80039b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b6:	4618      	mov	r0, r3
 80039b8:	f000 f95f 	bl	8003c7a <HAL_SYSTICK_Config>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d001      	beq.n	80039c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e00e      	b.n	80039e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2b0f      	cmp	r3, #15
 80039ca:	d80a      	bhi.n	80039e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80039cc:	2200      	movs	r2, #0
 80039ce:	6879      	ldr	r1, [r7, #4]
 80039d0:	f04f 30ff 	mov.w	r0, #4294967295
 80039d4:	f000 f927 	bl	8003c26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80039d8:	4a06      	ldr	r2, [pc, #24]	@ (80039f4 <HAL_InitTick+0x5c>)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80039de:	2300      	movs	r3, #0
 80039e0:	e000      	b.n	80039e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3708      	adds	r7, #8
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	2000000c 	.word	0x2000000c
 80039f0:	20000014 	.word	0x20000014
 80039f4:	20000010 	.word	0x20000010

080039f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039f8:	b480      	push	{r7}
 80039fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80039fc:	4b05      	ldr	r3, [pc, #20]	@ (8003a14 <HAL_IncTick+0x1c>)
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	461a      	mov	r2, r3
 8003a02:	4b05      	ldr	r3, [pc, #20]	@ (8003a18 <HAL_IncTick+0x20>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4413      	add	r3, r2
 8003a08:	4a03      	ldr	r2, [pc, #12]	@ (8003a18 <HAL_IncTick+0x20>)
 8003a0a:	6013      	str	r3, [r2, #0]
}
 8003a0c:	bf00      	nop
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bc80      	pop	{r7}
 8003a12:	4770      	bx	lr
 8003a14:	20000014 	.word	0x20000014
 8003a18:	20000968 	.word	0x20000968

08003a1c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	af00      	add	r7, sp, #0
  return uwTick;
 8003a20:	4b02      	ldr	r3, [pc, #8]	@ (8003a2c <HAL_GetTick+0x10>)
 8003a22:	681b      	ldr	r3, [r3, #0]
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bc80      	pop	{r7}
 8003a2a:	4770      	bx	lr
 8003a2c:	20000968 	.word	0x20000968

08003a30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a38:	f7ff fff0 	bl	8003a1c <HAL_GetTick>
 8003a3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a48:	d005      	beq.n	8003a56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8003a74 <HAL_Delay+0x44>)
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	461a      	mov	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	4413      	add	r3, r2
 8003a54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003a56:	bf00      	nop
 8003a58:	f7ff ffe0 	bl	8003a1c <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d8f7      	bhi.n	8003a58 <HAL_Delay+0x28>
  {
  }
}
 8003a68:	bf00      	nop
 8003a6a:	bf00      	nop
 8003a6c:	3710      	adds	r7, #16
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	20000014 	.word	0x20000014

08003a78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f003 0307 	and.w	r3, r3, #7
 8003a86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a88:	4b0c      	ldr	r3, [pc, #48]	@ (8003abc <__NVIC_SetPriorityGrouping+0x44>)
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a8e:	68ba      	ldr	r2, [r7, #8]
 8003a90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003a94:	4013      	ands	r3, r2
 8003a96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003aa0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003aa4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003aa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003aaa:	4a04      	ldr	r2, [pc, #16]	@ (8003abc <__NVIC_SetPriorityGrouping+0x44>)
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	60d3      	str	r3, [r2, #12]
}
 8003ab0:	bf00      	nop
 8003ab2:	3714      	adds	r7, #20
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bc80      	pop	{r7}
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	e000ed00 	.word	0xe000ed00

08003ac0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ac4:	4b04      	ldr	r3, [pc, #16]	@ (8003ad8 <__NVIC_GetPriorityGrouping+0x18>)
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	0a1b      	lsrs	r3, r3, #8
 8003aca:	f003 0307 	and.w	r3, r3, #7
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bc80      	pop	{r7}
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	e000ed00 	.word	0xe000ed00

08003adc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	db0b      	blt.n	8003b06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003aee:	79fb      	ldrb	r3, [r7, #7]
 8003af0:	f003 021f 	and.w	r2, r3, #31
 8003af4:	4906      	ldr	r1, [pc, #24]	@ (8003b10 <__NVIC_EnableIRQ+0x34>)
 8003af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003afa:	095b      	lsrs	r3, r3, #5
 8003afc:	2001      	movs	r0, #1
 8003afe:	fa00 f202 	lsl.w	r2, r0, r2
 8003b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b06:	bf00      	nop
 8003b08:	370c      	adds	r7, #12
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bc80      	pop	{r7}
 8003b0e:	4770      	bx	lr
 8003b10:	e000e100 	.word	0xe000e100

08003b14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	6039      	str	r1, [r7, #0]
 8003b1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	db0a      	blt.n	8003b3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	b2da      	uxtb	r2, r3
 8003b2c:	490c      	ldr	r1, [pc, #48]	@ (8003b60 <__NVIC_SetPriority+0x4c>)
 8003b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b32:	0112      	lsls	r2, r2, #4
 8003b34:	b2d2      	uxtb	r2, r2
 8003b36:	440b      	add	r3, r1
 8003b38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b3c:	e00a      	b.n	8003b54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	b2da      	uxtb	r2, r3
 8003b42:	4908      	ldr	r1, [pc, #32]	@ (8003b64 <__NVIC_SetPriority+0x50>)
 8003b44:	79fb      	ldrb	r3, [r7, #7]
 8003b46:	f003 030f 	and.w	r3, r3, #15
 8003b4a:	3b04      	subs	r3, #4
 8003b4c:	0112      	lsls	r2, r2, #4
 8003b4e:	b2d2      	uxtb	r2, r2
 8003b50:	440b      	add	r3, r1
 8003b52:	761a      	strb	r2, [r3, #24]
}
 8003b54:	bf00      	nop
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bc80      	pop	{r7}
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	e000e100 	.word	0xe000e100
 8003b64:	e000ed00 	.word	0xe000ed00

08003b68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b089      	sub	sp, #36	@ 0x24
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f003 0307 	and.w	r3, r3, #7
 8003b7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	f1c3 0307 	rsb	r3, r3, #7
 8003b82:	2b04      	cmp	r3, #4
 8003b84:	bf28      	it	cs
 8003b86:	2304      	movcs	r3, #4
 8003b88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	3304      	adds	r3, #4
 8003b8e:	2b06      	cmp	r3, #6
 8003b90:	d902      	bls.n	8003b98 <NVIC_EncodePriority+0x30>
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	3b03      	subs	r3, #3
 8003b96:	e000      	b.n	8003b9a <NVIC_EncodePriority+0x32>
 8003b98:	2300      	movs	r3, #0
 8003b9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba6:	43da      	mvns	r2, r3
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	401a      	ands	r2, r3
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8003bba:	43d9      	mvns	r1, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bc0:	4313      	orrs	r3, r2
         );
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3724      	adds	r7, #36	@ 0x24
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bc80      	pop	{r7}
 8003bca:	4770      	bx	lr

08003bcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003bdc:	d301      	bcc.n	8003be2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003bde:	2301      	movs	r3, #1
 8003be0:	e00f      	b.n	8003c02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003be2:	4a0a      	ldr	r2, [pc, #40]	@ (8003c0c <SysTick_Config+0x40>)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	3b01      	subs	r3, #1
 8003be8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003bea:	210f      	movs	r1, #15
 8003bec:	f04f 30ff 	mov.w	r0, #4294967295
 8003bf0:	f7ff ff90 	bl	8003b14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003bf4:	4b05      	ldr	r3, [pc, #20]	@ (8003c0c <SysTick_Config+0x40>)
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003bfa:	4b04      	ldr	r3, [pc, #16]	@ (8003c0c <SysTick_Config+0x40>)
 8003bfc:	2207      	movs	r2, #7
 8003bfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3708      	adds	r7, #8
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	e000e010 	.word	0xe000e010

08003c10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f7ff ff2d 	bl	8003a78 <__NVIC_SetPriorityGrouping>
}
 8003c1e:	bf00      	nop
 8003c20:	3708      	adds	r7, #8
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}

08003c26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c26:	b580      	push	{r7, lr}
 8003c28:	b086      	sub	sp, #24
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	60b9      	str	r1, [r7, #8]
 8003c30:	607a      	str	r2, [r7, #4]
 8003c32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c34:	2300      	movs	r3, #0
 8003c36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c38:	f7ff ff42 	bl	8003ac0 <__NVIC_GetPriorityGrouping>
 8003c3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	68b9      	ldr	r1, [r7, #8]
 8003c42:	6978      	ldr	r0, [r7, #20]
 8003c44:	f7ff ff90 	bl	8003b68 <NVIC_EncodePriority>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c4e:	4611      	mov	r1, r2
 8003c50:	4618      	mov	r0, r3
 8003c52:	f7ff ff5f 	bl	8003b14 <__NVIC_SetPriority>
}
 8003c56:	bf00      	nop
 8003c58:	3718      	adds	r7, #24
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}

08003c5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c5e:	b580      	push	{r7, lr}
 8003c60:	b082      	sub	sp, #8
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	4603      	mov	r3, r0
 8003c66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f7ff ff35 	bl	8003adc <__NVIC_EnableIRQ>
}
 8003c72:	bf00      	nop
 8003c74:	3708      	adds	r7, #8
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}

08003c7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	b082      	sub	sp, #8
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f7ff ffa2 	bl	8003bcc <SysTick_Config>
 8003c88:	4603      	mov	r3, r0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3708      	adds	r7, #8
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
	...

08003c94 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b085      	sub	sp, #20
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d101      	bne.n	8003caa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e043      	b.n	8003d32 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	461a      	mov	r2, r3
 8003cb0:	4b22      	ldr	r3, [pc, #136]	@ (8003d3c <HAL_DMA_Init+0xa8>)
 8003cb2:	4413      	add	r3, r2
 8003cb4:	4a22      	ldr	r2, [pc, #136]	@ (8003d40 <HAL_DMA_Init+0xac>)
 8003cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cba:	091b      	lsrs	r3, r3, #4
 8003cbc:	009a      	lsls	r2, r3, #2
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a1f      	ldr	r2, [pc, #124]	@ (8003d44 <HAL_DMA_Init+0xb0>)
 8003cc6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2202      	movs	r2, #2
 8003ccc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003cde:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003ce2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003cec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cf8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	695b      	ldr	r3, [r3, #20]
 8003cfe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	69db      	ldr	r3, [r3, #28]
 8003d0a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3714      	adds	r7, #20
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bc80      	pop	{r7}
 8003d3a:	4770      	bx	lr
 8003d3c:	bffdfff8 	.word	0xbffdfff8
 8003d40:	cccccccd 	.word	0xcccccccd
 8003d44:	40020000 	.word	0x40020000

08003d48 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b086      	sub	sp, #24
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	607a      	str	r2, [r7, #4]
 8003d54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d56:	2300      	movs	r3, #0
 8003d58:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d101      	bne.n	8003d68 <HAL_DMA_Start_IT+0x20>
 8003d64:	2302      	movs	r3, #2
 8003d66:	e04b      	b.n	8003e00 <HAL_DMA_Start_IT+0xb8>
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d13a      	bne.n	8003df2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2202      	movs	r2, #2
 8003d80:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f022 0201 	bic.w	r2, r2, #1
 8003d98:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	68b9      	ldr	r1, [r7, #8]
 8003da0:	68f8      	ldr	r0, [r7, #12]
 8003da2:	f000 f9eb 	bl	800417c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d008      	beq.n	8003dc0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f042 020e 	orr.w	r2, r2, #14
 8003dbc:	601a      	str	r2, [r3, #0]
 8003dbe:	e00f      	b.n	8003de0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f022 0204 	bic.w	r2, r2, #4
 8003dce:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f042 020a 	orr.w	r2, r2, #10
 8003dde:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f042 0201 	orr.w	r2, r2, #1
 8003dee:	601a      	str	r2, [r3, #0]
 8003df0:	e005      	b.n	8003dfe <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003dfa:	2302      	movs	r3, #2
 8003dfc:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003dfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3718      	adds	r7, #24
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b085      	sub	sp, #20
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e10:	2300      	movs	r3, #0
 8003e12:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d008      	beq.n	8003e32 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2204      	movs	r2, #4
 8003e24:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e020      	b.n	8003e74 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f022 020e 	bic.w	r2, r2, #14
 8003e40:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f022 0201 	bic.w	r2, r2, #1
 8003e50:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e5a:	2101      	movs	r1, #1
 8003e5c:	fa01 f202 	lsl.w	r2, r1, r2
 8003e60:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2201      	movs	r2, #1
 8003e66:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3714      	adds	r7, #20
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bc80      	pop	{r7}
 8003e7c:	4770      	bx	lr
	...

08003e80 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d005      	beq.n	8003ea4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2204      	movs	r2, #4
 8003e9c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	73fb      	strb	r3, [r7, #15]
 8003ea2:	e051      	b.n	8003f48 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f022 020e 	bic.w	r2, r2, #14
 8003eb2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f022 0201 	bic.w	r2, r2, #1
 8003ec2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a22      	ldr	r2, [pc, #136]	@ (8003f54 <HAL_DMA_Abort_IT+0xd4>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d029      	beq.n	8003f22 <HAL_DMA_Abort_IT+0xa2>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a21      	ldr	r2, [pc, #132]	@ (8003f58 <HAL_DMA_Abort_IT+0xd8>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d022      	beq.n	8003f1e <HAL_DMA_Abort_IT+0x9e>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a1f      	ldr	r2, [pc, #124]	@ (8003f5c <HAL_DMA_Abort_IT+0xdc>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d01a      	beq.n	8003f18 <HAL_DMA_Abort_IT+0x98>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a1e      	ldr	r2, [pc, #120]	@ (8003f60 <HAL_DMA_Abort_IT+0xe0>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d012      	beq.n	8003f12 <HAL_DMA_Abort_IT+0x92>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a1c      	ldr	r2, [pc, #112]	@ (8003f64 <HAL_DMA_Abort_IT+0xe4>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d00a      	beq.n	8003f0c <HAL_DMA_Abort_IT+0x8c>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a1b      	ldr	r2, [pc, #108]	@ (8003f68 <HAL_DMA_Abort_IT+0xe8>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d102      	bne.n	8003f06 <HAL_DMA_Abort_IT+0x86>
 8003f00:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003f04:	e00e      	b.n	8003f24 <HAL_DMA_Abort_IT+0xa4>
 8003f06:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003f0a:	e00b      	b.n	8003f24 <HAL_DMA_Abort_IT+0xa4>
 8003f0c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003f10:	e008      	b.n	8003f24 <HAL_DMA_Abort_IT+0xa4>
 8003f12:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003f16:	e005      	b.n	8003f24 <HAL_DMA_Abort_IT+0xa4>
 8003f18:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003f1c:	e002      	b.n	8003f24 <HAL_DMA_Abort_IT+0xa4>
 8003f1e:	2310      	movs	r3, #16
 8003f20:	e000      	b.n	8003f24 <HAL_DMA_Abort_IT+0xa4>
 8003f22:	2301      	movs	r3, #1
 8003f24:	4a11      	ldr	r2, [pc, #68]	@ (8003f6c <HAL_DMA_Abort_IT+0xec>)
 8003f26:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d003      	beq.n	8003f48 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	4798      	blx	r3
    } 
  }
  return status;
 8003f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3710      	adds	r7, #16
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	40020008 	.word	0x40020008
 8003f58:	4002001c 	.word	0x4002001c
 8003f5c:	40020030 	.word	0x40020030
 8003f60:	40020044 	.word	0x40020044
 8003f64:	40020058 	.word	0x40020058
 8003f68:	4002006c 	.word	0x4002006c
 8003f6c:	40020000 	.word	0x40020000

08003f70 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f8c:	2204      	movs	r2, #4
 8003f8e:	409a      	lsls	r2, r3
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	4013      	ands	r3, r2
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d04f      	beq.n	8004038 <HAL_DMA_IRQHandler+0xc8>
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	f003 0304 	and.w	r3, r3, #4
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d04a      	beq.n	8004038 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0320 	and.w	r3, r3, #32
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d107      	bne.n	8003fc0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f022 0204 	bic.w	r2, r2, #4
 8003fbe:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a66      	ldr	r2, [pc, #408]	@ (8004160 <HAL_DMA_IRQHandler+0x1f0>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d029      	beq.n	800401e <HAL_DMA_IRQHandler+0xae>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a65      	ldr	r2, [pc, #404]	@ (8004164 <HAL_DMA_IRQHandler+0x1f4>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d022      	beq.n	800401a <HAL_DMA_IRQHandler+0xaa>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a63      	ldr	r2, [pc, #396]	@ (8004168 <HAL_DMA_IRQHandler+0x1f8>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d01a      	beq.n	8004014 <HAL_DMA_IRQHandler+0xa4>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a62      	ldr	r2, [pc, #392]	@ (800416c <HAL_DMA_IRQHandler+0x1fc>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d012      	beq.n	800400e <HAL_DMA_IRQHandler+0x9e>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a60      	ldr	r2, [pc, #384]	@ (8004170 <HAL_DMA_IRQHandler+0x200>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d00a      	beq.n	8004008 <HAL_DMA_IRQHandler+0x98>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a5f      	ldr	r2, [pc, #380]	@ (8004174 <HAL_DMA_IRQHandler+0x204>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d102      	bne.n	8004002 <HAL_DMA_IRQHandler+0x92>
 8003ffc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004000:	e00e      	b.n	8004020 <HAL_DMA_IRQHandler+0xb0>
 8004002:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004006:	e00b      	b.n	8004020 <HAL_DMA_IRQHandler+0xb0>
 8004008:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800400c:	e008      	b.n	8004020 <HAL_DMA_IRQHandler+0xb0>
 800400e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004012:	e005      	b.n	8004020 <HAL_DMA_IRQHandler+0xb0>
 8004014:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004018:	e002      	b.n	8004020 <HAL_DMA_IRQHandler+0xb0>
 800401a:	2340      	movs	r3, #64	@ 0x40
 800401c:	e000      	b.n	8004020 <HAL_DMA_IRQHandler+0xb0>
 800401e:	2304      	movs	r3, #4
 8004020:	4a55      	ldr	r2, [pc, #340]	@ (8004178 <HAL_DMA_IRQHandler+0x208>)
 8004022:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004028:	2b00      	cmp	r3, #0
 800402a:	f000 8094 	beq.w	8004156 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004036:	e08e      	b.n	8004156 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800403c:	2202      	movs	r2, #2
 800403e:	409a      	lsls	r2, r3
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	4013      	ands	r3, r2
 8004044:	2b00      	cmp	r3, #0
 8004046:	d056      	beq.n	80040f6 <HAL_DMA_IRQHandler+0x186>
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	f003 0302 	and.w	r3, r3, #2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d051      	beq.n	80040f6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0320 	and.w	r3, r3, #32
 800405c:	2b00      	cmp	r3, #0
 800405e:	d10b      	bne.n	8004078 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f022 020a 	bic.w	r2, r2, #10
 800406e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a38      	ldr	r2, [pc, #224]	@ (8004160 <HAL_DMA_IRQHandler+0x1f0>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d029      	beq.n	80040d6 <HAL_DMA_IRQHandler+0x166>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a37      	ldr	r2, [pc, #220]	@ (8004164 <HAL_DMA_IRQHandler+0x1f4>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d022      	beq.n	80040d2 <HAL_DMA_IRQHandler+0x162>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a35      	ldr	r2, [pc, #212]	@ (8004168 <HAL_DMA_IRQHandler+0x1f8>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d01a      	beq.n	80040cc <HAL_DMA_IRQHandler+0x15c>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a34      	ldr	r2, [pc, #208]	@ (800416c <HAL_DMA_IRQHandler+0x1fc>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d012      	beq.n	80040c6 <HAL_DMA_IRQHandler+0x156>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a32      	ldr	r2, [pc, #200]	@ (8004170 <HAL_DMA_IRQHandler+0x200>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d00a      	beq.n	80040c0 <HAL_DMA_IRQHandler+0x150>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a31      	ldr	r2, [pc, #196]	@ (8004174 <HAL_DMA_IRQHandler+0x204>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d102      	bne.n	80040ba <HAL_DMA_IRQHandler+0x14a>
 80040b4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80040b8:	e00e      	b.n	80040d8 <HAL_DMA_IRQHandler+0x168>
 80040ba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80040be:	e00b      	b.n	80040d8 <HAL_DMA_IRQHandler+0x168>
 80040c0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80040c4:	e008      	b.n	80040d8 <HAL_DMA_IRQHandler+0x168>
 80040c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80040ca:	e005      	b.n	80040d8 <HAL_DMA_IRQHandler+0x168>
 80040cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80040d0:	e002      	b.n	80040d8 <HAL_DMA_IRQHandler+0x168>
 80040d2:	2320      	movs	r3, #32
 80040d4:	e000      	b.n	80040d8 <HAL_DMA_IRQHandler+0x168>
 80040d6:	2302      	movs	r3, #2
 80040d8:	4a27      	ldr	r2, [pc, #156]	@ (8004178 <HAL_DMA_IRQHandler+0x208>)
 80040da:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d034      	beq.n	8004156 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80040f4:	e02f      	b.n	8004156 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040fa:	2208      	movs	r2, #8
 80040fc:	409a      	lsls	r2, r3
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	4013      	ands	r3, r2
 8004102:	2b00      	cmp	r3, #0
 8004104:	d028      	beq.n	8004158 <HAL_DMA_IRQHandler+0x1e8>
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	f003 0308 	and.w	r3, r3, #8
 800410c:	2b00      	cmp	r3, #0
 800410e:	d023      	beq.n	8004158 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f022 020e 	bic.w	r2, r2, #14
 800411e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004128:	2101      	movs	r1, #1
 800412a:	fa01 f202 	lsl.w	r2, r1, r2
 800412e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2201      	movs	r2, #1
 800413a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800414a:	2b00      	cmp	r3, #0
 800414c:	d004      	beq.n	8004158 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	4798      	blx	r3
    }
  }
  return;
 8004156:	bf00      	nop
 8004158:	bf00      	nop
}
 800415a:	3710      	adds	r7, #16
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	40020008 	.word	0x40020008
 8004164:	4002001c 	.word	0x4002001c
 8004168:	40020030 	.word	0x40020030
 800416c:	40020044 	.word	0x40020044
 8004170:	40020058 	.word	0x40020058
 8004174:	4002006c 	.word	0x4002006c
 8004178:	40020000 	.word	0x40020000

0800417c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800417c:	b480      	push	{r7}
 800417e:	b085      	sub	sp, #20
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	607a      	str	r2, [r7, #4]
 8004188:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004192:	2101      	movs	r1, #1
 8004194:	fa01 f202 	lsl.w	r2, r1, r2
 8004198:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	683a      	ldr	r2, [r7, #0]
 80041a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	2b10      	cmp	r3, #16
 80041a8:	d108      	bne.n	80041bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68ba      	ldr	r2, [r7, #8]
 80041b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80041ba:	e007      	b.n	80041cc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68ba      	ldr	r2, [r7, #8]
 80041c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	60da      	str	r2, [r3, #12]
}
 80041cc:	bf00      	nop
 80041ce:	3714      	adds	r7, #20
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bc80      	pop	{r7}
 80041d4:	4770      	bx	lr
	...

080041d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041d8:	b480      	push	{r7}
 80041da:	b08b      	sub	sp, #44	@ 0x2c
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80041e2:	2300      	movs	r3, #0
 80041e4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80041e6:	2300      	movs	r3, #0
 80041e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80041ea:	e169      	b.n	80044c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80041ec:	2201      	movs	r2, #1
 80041ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f0:	fa02 f303 	lsl.w	r3, r2, r3
 80041f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	69fa      	ldr	r2, [r7, #28]
 80041fc:	4013      	ands	r3, r2
 80041fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004200:	69ba      	ldr	r2, [r7, #24]
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	429a      	cmp	r2, r3
 8004206:	f040 8158 	bne.w	80044ba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	4a9a      	ldr	r2, [pc, #616]	@ (8004478 <HAL_GPIO_Init+0x2a0>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d05e      	beq.n	80042d2 <HAL_GPIO_Init+0xfa>
 8004214:	4a98      	ldr	r2, [pc, #608]	@ (8004478 <HAL_GPIO_Init+0x2a0>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d875      	bhi.n	8004306 <HAL_GPIO_Init+0x12e>
 800421a:	4a98      	ldr	r2, [pc, #608]	@ (800447c <HAL_GPIO_Init+0x2a4>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d058      	beq.n	80042d2 <HAL_GPIO_Init+0xfa>
 8004220:	4a96      	ldr	r2, [pc, #600]	@ (800447c <HAL_GPIO_Init+0x2a4>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d86f      	bhi.n	8004306 <HAL_GPIO_Init+0x12e>
 8004226:	4a96      	ldr	r2, [pc, #600]	@ (8004480 <HAL_GPIO_Init+0x2a8>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d052      	beq.n	80042d2 <HAL_GPIO_Init+0xfa>
 800422c:	4a94      	ldr	r2, [pc, #592]	@ (8004480 <HAL_GPIO_Init+0x2a8>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d869      	bhi.n	8004306 <HAL_GPIO_Init+0x12e>
 8004232:	4a94      	ldr	r2, [pc, #592]	@ (8004484 <HAL_GPIO_Init+0x2ac>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d04c      	beq.n	80042d2 <HAL_GPIO_Init+0xfa>
 8004238:	4a92      	ldr	r2, [pc, #584]	@ (8004484 <HAL_GPIO_Init+0x2ac>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d863      	bhi.n	8004306 <HAL_GPIO_Init+0x12e>
 800423e:	4a92      	ldr	r2, [pc, #584]	@ (8004488 <HAL_GPIO_Init+0x2b0>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d046      	beq.n	80042d2 <HAL_GPIO_Init+0xfa>
 8004244:	4a90      	ldr	r2, [pc, #576]	@ (8004488 <HAL_GPIO_Init+0x2b0>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d85d      	bhi.n	8004306 <HAL_GPIO_Init+0x12e>
 800424a:	2b12      	cmp	r3, #18
 800424c:	d82a      	bhi.n	80042a4 <HAL_GPIO_Init+0xcc>
 800424e:	2b12      	cmp	r3, #18
 8004250:	d859      	bhi.n	8004306 <HAL_GPIO_Init+0x12e>
 8004252:	a201      	add	r2, pc, #4	@ (adr r2, 8004258 <HAL_GPIO_Init+0x80>)
 8004254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004258:	080042d3 	.word	0x080042d3
 800425c:	080042ad 	.word	0x080042ad
 8004260:	080042bf 	.word	0x080042bf
 8004264:	08004301 	.word	0x08004301
 8004268:	08004307 	.word	0x08004307
 800426c:	08004307 	.word	0x08004307
 8004270:	08004307 	.word	0x08004307
 8004274:	08004307 	.word	0x08004307
 8004278:	08004307 	.word	0x08004307
 800427c:	08004307 	.word	0x08004307
 8004280:	08004307 	.word	0x08004307
 8004284:	08004307 	.word	0x08004307
 8004288:	08004307 	.word	0x08004307
 800428c:	08004307 	.word	0x08004307
 8004290:	08004307 	.word	0x08004307
 8004294:	08004307 	.word	0x08004307
 8004298:	08004307 	.word	0x08004307
 800429c:	080042b5 	.word	0x080042b5
 80042a0:	080042c9 	.word	0x080042c9
 80042a4:	4a79      	ldr	r2, [pc, #484]	@ (800448c <HAL_GPIO_Init+0x2b4>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d013      	beq.n	80042d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80042aa:	e02c      	b.n	8004306 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	623b      	str	r3, [r7, #32]
          break;
 80042b2:	e029      	b.n	8004308 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	3304      	adds	r3, #4
 80042ba:	623b      	str	r3, [r7, #32]
          break;
 80042bc:	e024      	b.n	8004308 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	3308      	adds	r3, #8
 80042c4:	623b      	str	r3, [r7, #32]
          break;
 80042c6:	e01f      	b.n	8004308 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	330c      	adds	r3, #12
 80042ce:	623b      	str	r3, [r7, #32]
          break;
 80042d0:	e01a      	b.n	8004308 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d102      	bne.n	80042e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80042da:	2304      	movs	r3, #4
 80042dc:	623b      	str	r3, [r7, #32]
          break;
 80042de:	e013      	b.n	8004308 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d105      	bne.n	80042f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80042e8:	2308      	movs	r3, #8
 80042ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	69fa      	ldr	r2, [r7, #28]
 80042f0:	611a      	str	r2, [r3, #16]
          break;
 80042f2:	e009      	b.n	8004308 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80042f4:	2308      	movs	r3, #8
 80042f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	69fa      	ldr	r2, [r7, #28]
 80042fc:	615a      	str	r2, [r3, #20]
          break;
 80042fe:	e003      	b.n	8004308 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004300:	2300      	movs	r3, #0
 8004302:	623b      	str	r3, [r7, #32]
          break;
 8004304:	e000      	b.n	8004308 <HAL_GPIO_Init+0x130>
          break;
 8004306:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	2bff      	cmp	r3, #255	@ 0xff
 800430c:	d801      	bhi.n	8004312 <HAL_GPIO_Init+0x13a>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	e001      	b.n	8004316 <HAL_GPIO_Init+0x13e>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	3304      	adds	r3, #4
 8004316:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	2bff      	cmp	r3, #255	@ 0xff
 800431c:	d802      	bhi.n	8004324 <HAL_GPIO_Init+0x14c>
 800431e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	e002      	b.n	800432a <HAL_GPIO_Init+0x152>
 8004324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004326:	3b08      	subs	r3, #8
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	210f      	movs	r1, #15
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	fa01 f303 	lsl.w	r3, r1, r3
 8004338:	43db      	mvns	r3, r3
 800433a:	401a      	ands	r2, r3
 800433c:	6a39      	ldr	r1, [r7, #32]
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	fa01 f303 	lsl.w	r3, r1, r3
 8004344:	431a      	orrs	r2, r3
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004352:	2b00      	cmp	r3, #0
 8004354:	f000 80b1 	beq.w	80044ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004358:	4b4d      	ldr	r3, [pc, #308]	@ (8004490 <HAL_GPIO_Init+0x2b8>)
 800435a:	699b      	ldr	r3, [r3, #24]
 800435c:	4a4c      	ldr	r2, [pc, #304]	@ (8004490 <HAL_GPIO_Init+0x2b8>)
 800435e:	f043 0301 	orr.w	r3, r3, #1
 8004362:	6193      	str	r3, [r2, #24]
 8004364:	4b4a      	ldr	r3, [pc, #296]	@ (8004490 <HAL_GPIO_Init+0x2b8>)
 8004366:	699b      	ldr	r3, [r3, #24]
 8004368:	f003 0301 	and.w	r3, r3, #1
 800436c:	60bb      	str	r3, [r7, #8]
 800436e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004370:	4a48      	ldr	r2, [pc, #288]	@ (8004494 <HAL_GPIO_Init+0x2bc>)
 8004372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004374:	089b      	lsrs	r3, r3, #2
 8004376:	3302      	adds	r3, #2
 8004378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800437c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800437e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004380:	f003 0303 	and.w	r3, r3, #3
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	220f      	movs	r2, #15
 8004388:	fa02 f303 	lsl.w	r3, r2, r3
 800438c:	43db      	mvns	r3, r3
 800438e:	68fa      	ldr	r2, [r7, #12]
 8004390:	4013      	ands	r3, r2
 8004392:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a40      	ldr	r2, [pc, #256]	@ (8004498 <HAL_GPIO_Init+0x2c0>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d013      	beq.n	80043c4 <HAL_GPIO_Init+0x1ec>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a3f      	ldr	r2, [pc, #252]	@ (800449c <HAL_GPIO_Init+0x2c4>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d00d      	beq.n	80043c0 <HAL_GPIO_Init+0x1e8>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4a3e      	ldr	r2, [pc, #248]	@ (80044a0 <HAL_GPIO_Init+0x2c8>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d007      	beq.n	80043bc <HAL_GPIO_Init+0x1e4>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a3d      	ldr	r2, [pc, #244]	@ (80044a4 <HAL_GPIO_Init+0x2cc>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d101      	bne.n	80043b8 <HAL_GPIO_Init+0x1e0>
 80043b4:	2303      	movs	r3, #3
 80043b6:	e006      	b.n	80043c6 <HAL_GPIO_Init+0x1ee>
 80043b8:	2304      	movs	r3, #4
 80043ba:	e004      	b.n	80043c6 <HAL_GPIO_Init+0x1ee>
 80043bc:	2302      	movs	r3, #2
 80043be:	e002      	b.n	80043c6 <HAL_GPIO_Init+0x1ee>
 80043c0:	2301      	movs	r3, #1
 80043c2:	e000      	b.n	80043c6 <HAL_GPIO_Init+0x1ee>
 80043c4:	2300      	movs	r3, #0
 80043c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043c8:	f002 0203 	and.w	r2, r2, #3
 80043cc:	0092      	lsls	r2, r2, #2
 80043ce:	4093      	lsls	r3, r2
 80043d0:	68fa      	ldr	r2, [r7, #12]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80043d6:	492f      	ldr	r1, [pc, #188]	@ (8004494 <HAL_GPIO_Init+0x2bc>)
 80043d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043da:	089b      	lsrs	r3, r3, #2
 80043dc:	3302      	adds	r3, #2
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d006      	beq.n	80043fe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80043f0:	4b2d      	ldr	r3, [pc, #180]	@ (80044a8 <HAL_GPIO_Init+0x2d0>)
 80043f2:	689a      	ldr	r2, [r3, #8]
 80043f4:	492c      	ldr	r1, [pc, #176]	@ (80044a8 <HAL_GPIO_Init+0x2d0>)
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	608b      	str	r3, [r1, #8]
 80043fc:	e006      	b.n	800440c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80043fe:	4b2a      	ldr	r3, [pc, #168]	@ (80044a8 <HAL_GPIO_Init+0x2d0>)
 8004400:	689a      	ldr	r2, [r3, #8]
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	43db      	mvns	r3, r3
 8004406:	4928      	ldr	r1, [pc, #160]	@ (80044a8 <HAL_GPIO_Init+0x2d0>)
 8004408:	4013      	ands	r3, r2
 800440a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d006      	beq.n	8004426 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004418:	4b23      	ldr	r3, [pc, #140]	@ (80044a8 <HAL_GPIO_Init+0x2d0>)
 800441a:	68da      	ldr	r2, [r3, #12]
 800441c:	4922      	ldr	r1, [pc, #136]	@ (80044a8 <HAL_GPIO_Init+0x2d0>)
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	4313      	orrs	r3, r2
 8004422:	60cb      	str	r3, [r1, #12]
 8004424:	e006      	b.n	8004434 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004426:	4b20      	ldr	r3, [pc, #128]	@ (80044a8 <HAL_GPIO_Init+0x2d0>)
 8004428:	68da      	ldr	r2, [r3, #12]
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	43db      	mvns	r3, r3
 800442e:	491e      	ldr	r1, [pc, #120]	@ (80044a8 <HAL_GPIO_Init+0x2d0>)
 8004430:	4013      	ands	r3, r2
 8004432:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d006      	beq.n	800444e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004440:	4b19      	ldr	r3, [pc, #100]	@ (80044a8 <HAL_GPIO_Init+0x2d0>)
 8004442:	685a      	ldr	r2, [r3, #4]
 8004444:	4918      	ldr	r1, [pc, #96]	@ (80044a8 <HAL_GPIO_Init+0x2d0>)
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	4313      	orrs	r3, r2
 800444a:	604b      	str	r3, [r1, #4]
 800444c:	e006      	b.n	800445c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800444e:	4b16      	ldr	r3, [pc, #88]	@ (80044a8 <HAL_GPIO_Init+0x2d0>)
 8004450:	685a      	ldr	r2, [r3, #4]
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	43db      	mvns	r3, r3
 8004456:	4914      	ldr	r1, [pc, #80]	@ (80044a8 <HAL_GPIO_Init+0x2d0>)
 8004458:	4013      	ands	r3, r2
 800445a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d021      	beq.n	80044ac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004468:	4b0f      	ldr	r3, [pc, #60]	@ (80044a8 <HAL_GPIO_Init+0x2d0>)
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	490e      	ldr	r1, [pc, #56]	@ (80044a8 <HAL_GPIO_Init+0x2d0>)
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	4313      	orrs	r3, r2
 8004472:	600b      	str	r3, [r1, #0]
 8004474:	e021      	b.n	80044ba <HAL_GPIO_Init+0x2e2>
 8004476:	bf00      	nop
 8004478:	10320000 	.word	0x10320000
 800447c:	10310000 	.word	0x10310000
 8004480:	10220000 	.word	0x10220000
 8004484:	10210000 	.word	0x10210000
 8004488:	10120000 	.word	0x10120000
 800448c:	10110000 	.word	0x10110000
 8004490:	40021000 	.word	0x40021000
 8004494:	40010000 	.word	0x40010000
 8004498:	40010800 	.word	0x40010800
 800449c:	40010c00 	.word	0x40010c00
 80044a0:	40011000 	.word	0x40011000
 80044a4:	40011400 	.word	0x40011400
 80044a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80044ac:	4b0b      	ldr	r3, [pc, #44]	@ (80044dc <HAL_GPIO_Init+0x304>)
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	43db      	mvns	r3, r3
 80044b4:	4909      	ldr	r1, [pc, #36]	@ (80044dc <HAL_GPIO_Init+0x304>)
 80044b6:	4013      	ands	r3, r2
 80044b8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80044ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044bc:	3301      	adds	r3, #1
 80044be:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c6:	fa22 f303 	lsr.w	r3, r2, r3
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	f47f ae8e 	bne.w	80041ec <HAL_GPIO_Init+0x14>
  }
}
 80044d0:	bf00      	nop
 80044d2:	bf00      	nop
 80044d4:	372c      	adds	r7, #44	@ 0x2c
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bc80      	pop	{r7}
 80044da:	4770      	bx	lr
 80044dc:	40010400 	.word	0x40010400

080044e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b085      	sub	sp, #20
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	460b      	mov	r3, r1
 80044ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	689a      	ldr	r2, [r3, #8]
 80044f0:	887b      	ldrh	r3, [r7, #2]
 80044f2:	4013      	ands	r3, r2
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d002      	beq.n	80044fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80044f8:	2301      	movs	r3, #1
 80044fa:	73fb      	strb	r3, [r7, #15]
 80044fc:	e001      	b.n	8004502 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80044fe:	2300      	movs	r3, #0
 8004500:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004502:	7bfb      	ldrb	r3, [r7, #15]
}
 8004504:	4618      	mov	r0, r3
 8004506:	3714      	adds	r7, #20
 8004508:	46bd      	mov	sp, r7
 800450a:	bc80      	pop	{r7}
 800450c:	4770      	bx	lr
	...

08004510 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d101      	bne.n	8004522 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e12b      	b.n	800477a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004528:	b2db      	uxtb	r3, r3
 800452a:	2b00      	cmp	r3, #0
 800452c:	d106      	bne.n	800453c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f7fe fa38 	bl	80029ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2224      	movs	r2, #36	@ 0x24
 8004540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f022 0201 	bic.w	r2, r2, #1
 8004552:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004562:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004572:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004574:	f001 fbfc 	bl	8005d70 <HAL_RCC_GetPCLK1Freq>
 8004578:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	4a81      	ldr	r2, [pc, #516]	@ (8004784 <HAL_I2C_Init+0x274>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d807      	bhi.n	8004594 <HAL_I2C_Init+0x84>
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	4a80      	ldr	r2, [pc, #512]	@ (8004788 <HAL_I2C_Init+0x278>)
 8004588:	4293      	cmp	r3, r2
 800458a:	bf94      	ite	ls
 800458c:	2301      	movls	r3, #1
 800458e:	2300      	movhi	r3, #0
 8004590:	b2db      	uxtb	r3, r3
 8004592:	e006      	b.n	80045a2 <HAL_I2C_Init+0x92>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	4a7d      	ldr	r2, [pc, #500]	@ (800478c <HAL_I2C_Init+0x27c>)
 8004598:	4293      	cmp	r3, r2
 800459a:	bf94      	ite	ls
 800459c:	2301      	movls	r3, #1
 800459e:	2300      	movhi	r3, #0
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d001      	beq.n	80045aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e0e7      	b.n	800477a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	4a78      	ldr	r2, [pc, #480]	@ (8004790 <HAL_I2C_Init+0x280>)
 80045ae:	fba2 2303 	umull	r2, r3, r2, r3
 80045b2:	0c9b      	lsrs	r3, r3, #18
 80045b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68ba      	ldr	r2, [r7, #8]
 80045c6:	430a      	orrs	r2, r1
 80045c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	6a1b      	ldr	r3, [r3, #32]
 80045d0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	4a6a      	ldr	r2, [pc, #424]	@ (8004784 <HAL_I2C_Init+0x274>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d802      	bhi.n	80045e4 <HAL_I2C_Init+0xd4>
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	3301      	adds	r3, #1
 80045e2:	e009      	b.n	80045f8 <HAL_I2C_Init+0xe8>
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80045ea:	fb02 f303 	mul.w	r3, r2, r3
 80045ee:	4a69      	ldr	r2, [pc, #420]	@ (8004794 <HAL_I2C_Init+0x284>)
 80045f0:	fba2 2303 	umull	r2, r3, r2, r3
 80045f4:	099b      	lsrs	r3, r3, #6
 80045f6:	3301      	adds	r3, #1
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	6812      	ldr	r2, [r2, #0]
 80045fc:	430b      	orrs	r3, r1
 80045fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	69db      	ldr	r3, [r3, #28]
 8004606:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800460a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	495c      	ldr	r1, [pc, #368]	@ (8004784 <HAL_I2C_Init+0x274>)
 8004614:	428b      	cmp	r3, r1
 8004616:	d819      	bhi.n	800464c <HAL_I2C_Init+0x13c>
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	1e59      	subs	r1, r3, #1
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	005b      	lsls	r3, r3, #1
 8004622:	fbb1 f3f3 	udiv	r3, r1, r3
 8004626:	1c59      	adds	r1, r3, #1
 8004628:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800462c:	400b      	ands	r3, r1
 800462e:	2b00      	cmp	r3, #0
 8004630:	d00a      	beq.n	8004648 <HAL_I2C_Init+0x138>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	1e59      	subs	r1, r3, #1
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	005b      	lsls	r3, r3, #1
 800463c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004640:	3301      	adds	r3, #1
 8004642:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004646:	e051      	b.n	80046ec <HAL_I2C_Init+0x1dc>
 8004648:	2304      	movs	r3, #4
 800464a:	e04f      	b.n	80046ec <HAL_I2C_Init+0x1dc>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d111      	bne.n	8004678 <HAL_I2C_Init+0x168>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	1e58      	subs	r0, r3, #1
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6859      	ldr	r1, [r3, #4]
 800465c:	460b      	mov	r3, r1
 800465e:	005b      	lsls	r3, r3, #1
 8004660:	440b      	add	r3, r1
 8004662:	fbb0 f3f3 	udiv	r3, r0, r3
 8004666:	3301      	adds	r3, #1
 8004668:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800466c:	2b00      	cmp	r3, #0
 800466e:	bf0c      	ite	eq
 8004670:	2301      	moveq	r3, #1
 8004672:	2300      	movne	r3, #0
 8004674:	b2db      	uxtb	r3, r3
 8004676:	e012      	b.n	800469e <HAL_I2C_Init+0x18e>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	1e58      	subs	r0, r3, #1
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6859      	ldr	r1, [r3, #4]
 8004680:	460b      	mov	r3, r1
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	440b      	add	r3, r1
 8004686:	0099      	lsls	r1, r3, #2
 8004688:	440b      	add	r3, r1
 800468a:	fbb0 f3f3 	udiv	r3, r0, r3
 800468e:	3301      	adds	r3, #1
 8004690:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004694:	2b00      	cmp	r3, #0
 8004696:	bf0c      	ite	eq
 8004698:	2301      	moveq	r3, #1
 800469a:	2300      	movne	r3, #0
 800469c:	b2db      	uxtb	r3, r3
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d001      	beq.n	80046a6 <HAL_I2C_Init+0x196>
 80046a2:	2301      	movs	r3, #1
 80046a4:	e022      	b.n	80046ec <HAL_I2C_Init+0x1dc>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d10e      	bne.n	80046cc <HAL_I2C_Init+0x1bc>
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	1e58      	subs	r0, r3, #1
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6859      	ldr	r1, [r3, #4]
 80046b6:	460b      	mov	r3, r1
 80046b8:	005b      	lsls	r3, r3, #1
 80046ba:	440b      	add	r3, r1
 80046bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80046c0:	3301      	adds	r3, #1
 80046c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046ca:	e00f      	b.n	80046ec <HAL_I2C_Init+0x1dc>
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	1e58      	subs	r0, r3, #1
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6859      	ldr	r1, [r3, #4]
 80046d4:	460b      	mov	r3, r1
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	440b      	add	r3, r1
 80046da:	0099      	lsls	r1, r3, #2
 80046dc:	440b      	add	r3, r1
 80046de:	fbb0 f3f3 	udiv	r3, r0, r3
 80046e2:	3301      	adds	r3, #1
 80046e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80046ec:	6879      	ldr	r1, [r7, #4]
 80046ee:	6809      	ldr	r1, [r1, #0]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	69da      	ldr	r2, [r3, #28]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	431a      	orrs	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	430a      	orrs	r2, r1
 800470e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800471a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	6911      	ldr	r1, [r2, #16]
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	68d2      	ldr	r2, [r2, #12]
 8004726:	4311      	orrs	r1, r2
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	6812      	ldr	r2, [r2, #0]
 800472c:	430b      	orrs	r3, r1
 800472e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	695a      	ldr	r2, [r3, #20]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	699b      	ldr	r3, [r3, #24]
 8004742:	431a      	orrs	r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	430a      	orrs	r2, r1
 800474a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f042 0201 	orr.w	r2, r2, #1
 800475a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2220      	movs	r2, #32
 8004766:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3710      	adds	r7, #16
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	000186a0 	.word	0x000186a0
 8004788:	001e847f 	.word	0x001e847f
 800478c:	003d08ff 	.word	0x003d08ff
 8004790:	431bde83 	.word	0x431bde83
 8004794:	10624dd3 	.word	0x10624dd3

08004798 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b088      	sub	sp, #32
 800479c:	af02      	add	r7, sp, #8
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	4608      	mov	r0, r1
 80047a2:	4611      	mov	r1, r2
 80047a4:	461a      	mov	r2, r3
 80047a6:	4603      	mov	r3, r0
 80047a8:	817b      	strh	r3, [r7, #10]
 80047aa:	460b      	mov	r3, r1
 80047ac:	813b      	strh	r3, [r7, #8]
 80047ae:	4613      	mov	r3, r2
 80047b0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80047b2:	f7ff f933 	bl	8003a1c <HAL_GetTick>
 80047b6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	2b20      	cmp	r3, #32
 80047c2:	f040 80d9 	bne.w	8004978 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	9300      	str	r3, [sp, #0]
 80047ca:	2319      	movs	r3, #25
 80047cc:	2201      	movs	r2, #1
 80047ce:	496d      	ldr	r1, [pc, #436]	@ (8004984 <HAL_I2C_Mem_Write+0x1ec>)
 80047d0:	68f8      	ldr	r0, [r7, #12]
 80047d2:	f000 fccd 	bl	8005170 <I2C_WaitOnFlagUntilTimeout>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d001      	beq.n	80047e0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80047dc:	2302      	movs	r3, #2
 80047de:	e0cc      	b.n	800497a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d101      	bne.n	80047ee <HAL_I2C_Mem_Write+0x56>
 80047ea:	2302      	movs	r3, #2
 80047ec:	e0c5      	b.n	800497a <HAL_I2C_Mem_Write+0x1e2>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2201      	movs	r2, #1
 80047f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0301 	and.w	r3, r3, #1
 8004800:	2b01      	cmp	r3, #1
 8004802:	d007      	beq.n	8004814 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f042 0201 	orr.w	r2, r2, #1
 8004812:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004822:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2221      	movs	r2, #33	@ 0x21
 8004828:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2240      	movs	r2, #64	@ 0x40
 8004830:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2200      	movs	r2, #0
 8004838:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6a3a      	ldr	r2, [r7, #32]
 800483e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004844:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800484a:	b29a      	uxth	r2, r3
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	4a4d      	ldr	r2, [pc, #308]	@ (8004988 <HAL_I2C_Mem_Write+0x1f0>)
 8004854:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004856:	88f8      	ldrh	r0, [r7, #6]
 8004858:	893a      	ldrh	r2, [r7, #8]
 800485a:	8979      	ldrh	r1, [r7, #10]
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	9301      	str	r3, [sp, #4]
 8004860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004862:	9300      	str	r3, [sp, #0]
 8004864:	4603      	mov	r3, r0
 8004866:	68f8      	ldr	r0, [r7, #12]
 8004868:	f000 fb04 	bl	8004e74 <I2C_RequestMemoryWrite>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d052      	beq.n	8004918 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e081      	b.n	800497a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004876:	697a      	ldr	r2, [r7, #20]
 8004878:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800487a:	68f8      	ldr	r0, [r7, #12]
 800487c:	f000 fd92 	bl	80053a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d00d      	beq.n	80048a2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800488a:	2b04      	cmp	r3, #4
 800488c:	d107      	bne.n	800489e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800489c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e06b      	b.n	800497a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048a6:	781a      	ldrb	r2, [r3, #0]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b2:	1c5a      	adds	r2, r3, #1
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048bc:	3b01      	subs	r3, #1
 80048be:	b29a      	uxth	r2, r3
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	3b01      	subs	r3, #1
 80048cc:	b29a      	uxth	r2, r3
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	695b      	ldr	r3, [r3, #20]
 80048d8:	f003 0304 	and.w	r3, r3, #4
 80048dc:	2b04      	cmp	r3, #4
 80048de:	d11b      	bne.n	8004918 <HAL_I2C_Mem_Write+0x180>
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d017      	beq.n	8004918 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ec:	781a      	ldrb	r2, [r3, #0]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f8:	1c5a      	adds	r2, r3, #1
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004902:	3b01      	subs	r3, #1
 8004904:	b29a      	uxth	r2, r3
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800490e:	b29b      	uxth	r3, r3
 8004910:	3b01      	subs	r3, #1
 8004912:	b29a      	uxth	r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800491c:	2b00      	cmp	r3, #0
 800491e:	d1aa      	bne.n	8004876 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004920:	697a      	ldr	r2, [r7, #20]
 8004922:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004924:	68f8      	ldr	r0, [r7, #12]
 8004926:	f000 fd85 	bl	8005434 <I2C_WaitOnBTFFlagUntilTimeout>
 800492a:	4603      	mov	r3, r0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d00d      	beq.n	800494c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004934:	2b04      	cmp	r3, #4
 8004936:	d107      	bne.n	8004948 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004946:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e016      	b.n	800497a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800495a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2220      	movs	r2, #32
 8004960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2200      	movs	r2, #0
 8004970:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004974:	2300      	movs	r3, #0
 8004976:	e000      	b.n	800497a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004978:	2302      	movs	r3, #2
  }
}
 800497a:	4618      	mov	r0, r3
 800497c:	3718      	adds	r7, #24
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	00100002 	.word	0x00100002
 8004988:	ffff0000 	.word	0xffff0000

0800498c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b08c      	sub	sp, #48	@ 0x30
 8004990:	af02      	add	r7, sp, #8
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	4608      	mov	r0, r1
 8004996:	4611      	mov	r1, r2
 8004998:	461a      	mov	r2, r3
 800499a:	4603      	mov	r3, r0
 800499c:	817b      	strh	r3, [r7, #10]
 800499e:	460b      	mov	r3, r1
 80049a0:	813b      	strh	r3, [r7, #8]
 80049a2:	4613      	mov	r3, r2
 80049a4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80049a6:	2300      	movs	r3, #0
 80049a8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80049aa:	f7ff f837 	bl	8003a1c <HAL_GetTick>
 80049ae:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	2b20      	cmp	r3, #32
 80049ba:	f040 8250 	bne.w	8004e5e <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80049be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c0:	9300      	str	r3, [sp, #0]
 80049c2:	2319      	movs	r3, #25
 80049c4:	2201      	movs	r2, #1
 80049c6:	4982      	ldr	r1, [pc, #520]	@ (8004bd0 <HAL_I2C_Mem_Read+0x244>)
 80049c8:	68f8      	ldr	r0, [r7, #12]
 80049ca:	f000 fbd1 	bl	8005170 <I2C_WaitOnFlagUntilTimeout>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d001      	beq.n	80049d8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80049d4:	2302      	movs	r3, #2
 80049d6:	e243      	b.n	8004e60 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d101      	bne.n	80049e6 <HAL_I2C_Mem_Read+0x5a>
 80049e2:	2302      	movs	r3, #2
 80049e4:	e23c      	b.n	8004e60 <HAL_I2C_Mem_Read+0x4d4>
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2201      	movs	r2, #1
 80049ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0301 	and.w	r3, r3, #1
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d007      	beq.n	8004a0c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f042 0201 	orr.w	r2, r2, #1
 8004a0a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a1a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2222      	movs	r2, #34	@ 0x22
 8004a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2240      	movs	r2, #64	@ 0x40
 8004a28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a36:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004a3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a42:	b29a      	uxth	r2, r3
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	4a62      	ldr	r2, [pc, #392]	@ (8004bd4 <HAL_I2C_Mem_Read+0x248>)
 8004a4c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a4e:	88f8      	ldrh	r0, [r7, #6]
 8004a50:	893a      	ldrh	r2, [r7, #8]
 8004a52:	8979      	ldrh	r1, [r7, #10]
 8004a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a56:	9301      	str	r3, [sp, #4]
 8004a58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a5a:	9300      	str	r3, [sp, #0]
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	68f8      	ldr	r0, [r7, #12]
 8004a60:	f000 fa9e 	bl	8004fa0 <I2C_RequestMemoryRead>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d001      	beq.n	8004a6e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e1f8      	b.n	8004e60 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d113      	bne.n	8004a9e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a76:	2300      	movs	r3, #0
 8004a78:	61fb      	str	r3, [r7, #28]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	695b      	ldr	r3, [r3, #20]
 8004a80:	61fb      	str	r3, [r7, #28]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	699b      	ldr	r3, [r3, #24]
 8004a88:	61fb      	str	r3, [r7, #28]
 8004a8a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a9a:	601a      	str	r2, [r3, #0]
 8004a9c:	e1cc      	b.n	8004e38 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d11e      	bne.n	8004ae4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ab4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004ab6:	b672      	cpsid	i
}
 8004ab8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aba:	2300      	movs	r3, #0
 8004abc:	61bb      	str	r3, [r7, #24]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	695b      	ldr	r3, [r3, #20]
 8004ac4:	61bb      	str	r3, [r7, #24]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	699b      	ldr	r3, [r3, #24]
 8004acc:	61bb      	str	r3, [r7, #24]
 8004ace:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ade:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004ae0:	b662      	cpsie	i
}
 8004ae2:	e035      	b.n	8004b50 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d11e      	bne.n	8004b2a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004afa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004afc:	b672      	cpsid	i
}
 8004afe:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b00:	2300      	movs	r3, #0
 8004b02:	617b      	str	r3, [r7, #20]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	695b      	ldr	r3, [r3, #20]
 8004b0a:	617b      	str	r3, [r7, #20]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	617b      	str	r3, [r7, #20]
 8004b14:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b24:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004b26:	b662      	cpsie	i
}
 8004b28:	e012      	b.n	8004b50 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004b38:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	613b      	str	r3, [r7, #16]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	695b      	ldr	r3, [r3, #20]
 8004b44:	613b      	str	r3, [r7, #16]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	699b      	ldr	r3, [r3, #24]
 8004b4c:	613b      	str	r3, [r7, #16]
 8004b4e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004b50:	e172      	b.n	8004e38 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b56:	2b03      	cmp	r3, #3
 8004b58:	f200 811f 	bhi.w	8004d9a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d123      	bne.n	8004bac <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b66:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004b68:	68f8      	ldr	r0, [r7, #12]
 8004b6a:	f000 fcab 	bl	80054c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d001      	beq.n	8004b78 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e173      	b.n	8004e60 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	691a      	ldr	r2, [r3, #16]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b82:	b2d2      	uxtb	r2, r2
 8004b84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b8a:	1c5a      	adds	r2, r3, #1
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b94:	3b01      	subs	r3, #1
 8004b96:	b29a      	uxth	r2, r3
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	3b01      	subs	r3, #1
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004baa:	e145      	b.n	8004e38 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d152      	bne.n	8004c5a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb6:	9300      	str	r3, [sp, #0]
 8004bb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bba:	2200      	movs	r2, #0
 8004bbc:	4906      	ldr	r1, [pc, #24]	@ (8004bd8 <HAL_I2C_Mem_Read+0x24c>)
 8004bbe:	68f8      	ldr	r0, [r7, #12]
 8004bc0:	f000 fad6 	bl	8005170 <I2C_WaitOnFlagUntilTimeout>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d008      	beq.n	8004bdc <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e148      	b.n	8004e60 <HAL_I2C_Mem_Read+0x4d4>
 8004bce:	bf00      	nop
 8004bd0:	00100002 	.word	0x00100002
 8004bd4:	ffff0000 	.word	0xffff0000
 8004bd8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004bdc:	b672      	cpsid	i
}
 8004bde:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	691a      	ldr	r2, [r3, #16]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bfa:	b2d2      	uxtb	r2, r2
 8004bfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c02:	1c5a      	adds	r2, r3, #1
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	b29a      	uxth	r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	b29a      	uxth	r2, r3
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004c22:	b662      	cpsie	i
}
 8004c24:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	691a      	ldr	r2, [r3, #16]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c30:	b2d2      	uxtb	r2, r2
 8004c32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c38:	1c5a      	adds	r2, r3, #1
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c42:	3b01      	subs	r3, #1
 8004c44:	b29a      	uxth	r2, r3
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	3b01      	subs	r3, #1
 8004c52:	b29a      	uxth	r2, r3
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004c58:	e0ee      	b.n	8004e38 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c5c:	9300      	str	r3, [sp, #0]
 8004c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c60:	2200      	movs	r2, #0
 8004c62:	4981      	ldr	r1, [pc, #516]	@ (8004e68 <HAL_I2C_Mem_Read+0x4dc>)
 8004c64:	68f8      	ldr	r0, [r7, #12]
 8004c66:	f000 fa83 	bl	8005170 <I2C_WaitOnFlagUntilTimeout>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d001      	beq.n	8004c74 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e0f5      	b.n	8004e60 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c82:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004c84:	b672      	cpsid	i
}
 8004c86:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	691a      	ldr	r2, [r3, #16]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c92:	b2d2      	uxtb	r2, r2
 8004c94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c9a:	1c5a      	adds	r2, r3, #1
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ca4:	3b01      	subs	r3, #1
 8004ca6:	b29a      	uxth	r2, r3
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	b29a      	uxth	r2, r3
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004cba:	4b6c      	ldr	r3, [pc, #432]	@ (8004e6c <HAL_I2C_Mem_Read+0x4e0>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	08db      	lsrs	r3, r3, #3
 8004cc0:	4a6b      	ldr	r2, [pc, #428]	@ (8004e70 <HAL_I2C_Mem_Read+0x4e4>)
 8004cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc6:	0a1a      	lsrs	r2, r3, #8
 8004cc8:	4613      	mov	r3, r2
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	4413      	add	r3, r2
 8004cce:	00da      	lsls	r2, r3, #3
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004cd4:	6a3b      	ldr	r3, [r7, #32]
 8004cd6:	3b01      	subs	r3, #1
 8004cd8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004cda:	6a3b      	ldr	r3, [r7, #32]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d118      	bne.n	8004d12 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2220      	movs	r2, #32
 8004cea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cfa:	f043 0220 	orr.w	r2, r3, #32
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004d02:	b662      	cpsie	i
}
 8004d04:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e0a6      	b.n	8004e60 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	695b      	ldr	r3, [r3, #20]
 8004d18:	f003 0304 	and.w	r3, r3, #4
 8004d1c:	2b04      	cmp	r3, #4
 8004d1e:	d1d9      	bne.n	8004cd4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	691a      	ldr	r2, [r3, #16]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d3a:	b2d2      	uxtb	r2, r2
 8004d3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d42:	1c5a      	adds	r2, r3, #1
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d4c:	3b01      	subs	r3, #1
 8004d4e:	b29a      	uxth	r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	b29a      	uxth	r2, r3
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004d62:	b662      	cpsie	i
}
 8004d64:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	691a      	ldr	r2, [r3, #16]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d70:	b2d2      	uxtb	r2, r2
 8004d72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d78:	1c5a      	adds	r2, r3, #1
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d82:	3b01      	subs	r3, #1
 8004d84:	b29a      	uxth	r2, r3
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	3b01      	subs	r3, #1
 8004d92:	b29a      	uxth	r2, r3
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004d98:	e04e      	b.n	8004e38 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d9c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004d9e:	68f8      	ldr	r0, [r7, #12]
 8004da0:	f000 fb90 	bl	80054c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d001      	beq.n	8004dae <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e058      	b.n	8004e60 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	691a      	ldr	r2, [r3, #16]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db8:	b2d2      	uxtb	r2, r2
 8004dba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dc0:	1c5a      	adds	r2, r3, #1
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	b29a      	uxth	r2, r3
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	3b01      	subs	r3, #1
 8004dda:	b29a      	uxth	r2, r3
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	f003 0304 	and.w	r3, r3, #4
 8004dea:	2b04      	cmp	r3, #4
 8004dec:	d124      	bne.n	8004e38 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004df2:	2b03      	cmp	r3, #3
 8004df4:	d107      	bne.n	8004e06 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e04:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	691a      	ldr	r2, [r3, #16]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e10:	b2d2      	uxtb	r2, r2
 8004e12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e18:	1c5a      	adds	r2, r3, #1
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e22:	3b01      	subs	r3, #1
 8004e24:	b29a      	uxth	r2, r3
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	3b01      	subs	r3, #1
 8004e32:	b29a      	uxth	r2, r3
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	f47f ae88 	bne.w	8004b52 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2220      	movs	r2, #32
 8004e46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	e000      	b.n	8004e60 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8004e5e:	2302      	movs	r3, #2
  }
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3728      	adds	r7, #40	@ 0x28
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	00010004 	.word	0x00010004
 8004e6c:	2000000c 	.word	0x2000000c
 8004e70:	14f8b589 	.word	0x14f8b589

08004e74 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b088      	sub	sp, #32
 8004e78:	af02      	add	r7, sp, #8
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	4608      	mov	r0, r1
 8004e7e:	4611      	mov	r1, r2
 8004e80:	461a      	mov	r2, r3
 8004e82:	4603      	mov	r3, r0
 8004e84:	817b      	strh	r3, [r7, #10]
 8004e86:	460b      	mov	r3, r1
 8004e88:	813b      	strh	r3, [r7, #8]
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e9c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea0:	9300      	str	r3, [sp, #0]
 8004ea2:	6a3b      	ldr	r3, [r7, #32]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004eaa:	68f8      	ldr	r0, [r7, #12]
 8004eac:	f000 f960 	bl	8005170 <I2C_WaitOnFlagUntilTimeout>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00d      	beq.n	8004ed2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ec0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ec4:	d103      	bne.n	8004ece <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ecc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e05f      	b.n	8004f92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004ed2:	897b      	ldrh	r3, [r7, #10]
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004ee0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee4:	6a3a      	ldr	r2, [r7, #32]
 8004ee6:	492d      	ldr	r1, [pc, #180]	@ (8004f9c <I2C_RequestMemoryWrite+0x128>)
 8004ee8:	68f8      	ldr	r0, [r7, #12]
 8004eea:	f000 f9bb 	bl	8005264 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d001      	beq.n	8004ef8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e04c      	b.n	8004f92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ef8:	2300      	movs	r3, #0
 8004efa:	617b      	str	r3, [r7, #20]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	695b      	ldr	r3, [r3, #20]
 8004f02:	617b      	str	r3, [r7, #20]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	699b      	ldr	r3, [r3, #24]
 8004f0a:	617b      	str	r3, [r7, #20]
 8004f0c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f10:	6a39      	ldr	r1, [r7, #32]
 8004f12:	68f8      	ldr	r0, [r7, #12]
 8004f14:	f000 fa46 	bl	80053a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00d      	beq.n	8004f3a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f22:	2b04      	cmp	r3, #4
 8004f24:	d107      	bne.n	8004f36 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f34:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e02b      	b.n	8004f92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f3a:	88fb      	ldrh	r3, [r7, #6]
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d105      	bne.n	8004f4c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f40:	893b      	ldrh	r3, [r7, #8]
 8004f42:	b2da      	uxtb	r2, r3
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	611a      	str	r2, [r3, #16]
 8004f4a:	e021      	b.n	8004f90 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004f4c:	893b      	ldrh	r3, [r7, #8]
 8004f4e:	0a1b      	lsrs	r3, r3, #8
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	b2da      	uxtb	r2, r3
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f5c:	6a39      	ldr	r1, [r7, #32]
 8004f5e:	68f8      	ldr	r0, [r7, #12]
 8004f60:	f000 fa20 	bl	80053a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00d      	beq.n	8004f86 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f6e:	2b04      	cmp	r3, #4
 8004f70:	d107      	bne.n	8004f82 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f80:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e005      	b.n	8004f92 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f86:	893b      	ldrh	r3, [r7, #8]
 8004f88:	b2da      	uxtb	r2, r3
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3718      	adds	r7, #24
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	00010002 	.word	0x00010002

08004fa0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b088      	sub	sp, #32
 8004fa4:	af02      	add	r7, sp, #8
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	4608      	mov	r0, r1
 8004faa:	4611      	mov	r1, r2
 8004fac:	461a      	mov	r2, r3
 8004fae:	4603      	mov	r3, r0
 8004fb0:	817b      	strh	r3, [r7, #10]
 8004fb2:	460b      	mov	r3, r1
 8004fb4:	813b      	strh	r3, [r7, #8]
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004fc8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004fd8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fdc:	9300      	str	r3, [sp, #0]
 8004fde:	6a3b      	ldr	r3, [r7, #32]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004fe6:	68f8      	ldr	r0, [r7, #12]
 8004fe8:	f000 f8c2 	bl	8005170 <I2C_WaitOnFlagUntilTimeout>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00d      	beq.n	800500e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ffc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005000:	d103      	bne.n	800500a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005008:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e0aa      	b.n	8005164 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800500e:	897b      	ldrh	r3, [r7, #10]
 8005010:	b2db      	uxtb	r3, r3
 8005012:	461a      	mov	r2, r3
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800501c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800501e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005020:	6a3a      	ldr	r2, [r7, #32]
 8005022:	4952      	ldr	r1, [pc, #328]	@ (800516c <I2C_RequestMemoryRead+0x1cc>)
 8005024:	68f8      	ldr	r0, [r7, #12]
 8005026:	f000 f91d 	bl	8005264 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800502a:	4603      	mov	r3, r0
 800502c:	2b00      	cmp	r3, #0
 800502e:	d001      	beq.n	8005034 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	e097      	b.n	8005164 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005034:	2300      	movs	r3, #0
 8005036:	617b      	str	r3, [r7, #20]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	695b      	ldr	r3, [r3, #20]
 800503e:	617b      	str	r3, [r7, #20]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	699b      	ldr	r3, [r3, #24]
 8005046:	617b      	str	r3, [r7, #20]
 8005048:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800504a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800504c:	6a39      	ldr	r1, [r7, #32]
 800504e:	68f8      	ldr	r0, [r7, #12]
 8005050:	f000 f9a8 	bl	80053a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d00d      	beq.n	8005076 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800505e:	2b04      	cmp	r3, #4
 8005060:	d107      	bne.n	8005072 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005070:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e076      	b.n	8005164 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005076:	88fb      	ldrh	r3, [r7, #6]
 8005078:	2b01      	cmp	r3, #1
 800507a:	d105      	bne.n	8005088 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800507c:	893b      	ldrh	r3, [r7, #8]
 800507e:	b2da      	uxtb	r2, r3
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	611a      	str	r2, [r3, #16]
 8005086:	e021      	b.n	80050cc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005088:	893b      	ldrh	r3, [r7, #8]
 800508a:	0a1b      	lsrs	r3, r3, #8
 800508c:	b29b      	uxth	r3, r3
 800508e:	b2da      	uxtb	r2, r3
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005096:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005098:	6a39      	ldr	r1, [r7, #32]
 800509a:	68f8      	ldr	r0, [r7, #12]
 800509c:	f000 f982 	bl	80053a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00d      	beq.n	80050c2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050aa:	2b04      	cmp	r3, #4
 80050ac:	d107      	bne.n	80050be <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e050      	b.n	8005164 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80050c2:	893b      	ldrh	r3, [r7, #8]
 80050c4:	b2da      	uxtb	r2, r3
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050ce:	6a39      	ldr	r1, [r7, #32]
 80050d0:	68f8      	ldr	r0, [r7, #12]
 80050d2:	f000 f967 	bl	80053a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d00d      	beq.n	80050f8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050e0:	2b04      	cmp	r3, #4
 80050e2:	d107      	bne.n	80050f4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050f2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	e035      	b.n	8005164 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005106:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800510a:	9300      	str	r3, [sp, #0]
 800510c:	6a3b      	ldr	r3, [r7, #32]
 800510e:	2200      	movs	r2, #0
 8005110:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005114:	68f8      	ldr	r0, [r7, #12]
 8005116:	f000 f82b 	bl	8005170 <I2C_WaitOnFlagUntilTimeout>
 800511a:	4603      	mov	r3, r0
 800511c:	2b00      	cmp	r3, #0
 800511e:	d00d      	beq.n	800513c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800512a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800512e:	d103      	bne.n	8005138 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005136:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005138:	2303      	movs	r3, #3
 800513a:	e013      	b.n	8005164 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800513c:	897b      	ldrh	r3, [r7, #10]
 800513e:	b2db      	uxtb	r3, r3
 8005140:	f043 0301 	orr.w	r3, r3, #1
 8005144:	b2da      	uxtb	r2, r3
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800514c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800514e:	6a3a      	ldr	r2, [r7, #32]
 8005150:	4906      	ldr	r1, [pc, #24]	@ (800516c <I2C_RequestMemoryRead+0x1cc>)
 8005152:	68f8      	ldr	r0, [r7, #12]
 8005154:	f000 f886 	bl	8005264 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d001      	beq.n	8005162 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e000      	b.n	8005164 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005162:	2300      	movs	r3, #0
}
 8005164:	4618      	mov	r0, r3
 8005166:	3718      	adds	r7, #24
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}
 800516c:	00010002 	.word	0x00010002

08005170 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	603b      	str	r3, [r7, #0]
 800517c:	4613      	mov	r3, r2
 800517e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005180:	e048      	b.n	8005214 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005188:	d044      	beq.n	8005214 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800518a:	f7fe fc47 	bl	8003a1c <HAL_GetTick>
 800518e:	4602      	mov	r2, r0
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	1ad3      	subs	r3, r2, r3
 8005194:	683a      	ldr	r2, [r7, #0]
 8005196:	429a      	cmp	r2, r3
 8005198:	d302      	bcc.n	80051a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d139      	bne.n	8005214 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	0c1b      	lsrs	r3, r3, #16
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d10d      	bne.n	80051c6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	695b      	ldr	r3, [r3, #20]
 80051b0:	43da      	mvns	r2, r3
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	4013      	ands	r3, r2
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	bf0c      	ite	eq
 80051bc:	2301      	moveq	r3, #1
 80051be:	2300      	movne	r3, #0
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	461a      	mov	r2, r3
 80051c4:	e00c      	b.n	80051e0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	699b      	ldr	r3, [r3, #24]
 80051cc:	43da      	mvns	r2, r3
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	4013      	ands	r3, r2
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	bf0c      	ite	eq
 80051d8:	2301      	moveq	r3, #1
 80051da:	2300      	movne	r3, #0
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	461a      	mov	r2, r3
 80051e0:	79fb      	ldrb	r3, [r7, #7]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d116      	bne.n	8005214 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2200      	movs	r2, #0
 80051ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2220      	movs	r2, #32
 80051f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005200:	f043 0220 	orr.w	r2, r3, #32
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2200      	movs	r2, #0
 800520c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e023      	b.n	800525c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	0c1b      	lsrs	r3, r3, #16
 8005218:	b2db      	uxtb	r3, r3
 800521a:	2b01      	cmp	r3, #1
 800521c:	d10d      	bne.n	800523a <I2C_WaitOnFlagUntilTimeout+0xca>
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	695b      	ldr	r3, [r3, #20]
 8005224:	43da      	mvns	r2, r3
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	4013      	ands	r3, r2
 800522a:	b29b      	uxth	r3, r3
 800522c:	2b00      	cmp	r3, #0
 800522e:	bf0c      	ite	eq
 8005230:	2301      	moveq	r3, #1
 8005232:	2300      	movne	r3, #0
 8005234:	b2db      	uxtb	r3, r3
 8005236:	461a      	mov	r2, r3
 8005238:	e00c      	b.n	8005254 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	43da      	mvns	r2, r3
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	4013      	ands	r3, r2
 8005246:	b29b      	uxth	r3, r3
 8005248:	2b00      	cmp	r3, #0
 800524a:	bf0c      	ite	eq
 800524c:	2301      	moveq	r3, #1
 800524e:	2300      	movne	r3, #0
 8005250:	b2db      	uxtb	r3, r3
 8005252:	461a      	mov	r2, r3
 8005254:	79fb      	ldrb	r3, [r7, #7]
 8005256:	429a      	cmp	r2, r3
 8005258:	d093      	beq.n	8005182 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800525a:	2300      	movs	r3, #0
}
 800525c:	4618      	mov	r0, r3
 800525e:	3710      	adds	r7, #16
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	607a      	str	r2, [r7, #4]
 8005270:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005272:	e071      	b.n	8005358 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	695b      	ldr	r3, [r3, #20]
 800527a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800527e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005282:	d123      	bne.n	80052cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005292:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800529c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2200      	movs	r2, #0
 80052a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2220      	movs	r2, #32
 80052a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052b8:	f043 0204 	orr.w	r2, r3, #4
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2200      	movs	r2, #0
 80052c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e067      	b.n	800539c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052d2:	d041      	beq.n	8005358 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052d4:	f7fe fba2 	bl	8003a1c <HAL_GetTick>
 80052d8:	4602      	mov	r2, r0
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d302      	bcc.n	80052ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d136      	bne.n	8005358 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	0c1b      	lsrs	r3, r3, #16
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d10c      	bne.n	800530e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	695b      	ldr	r3, [r3, #20]
 80052fa:	43da      	mvns	r2, r3
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	4013      	ands	r3, r2
 8005300:	b29b      	uxth	r3, r3
 8005302:	2b00      	cmp	r3, #0
 8005304:	bf14      	ite	ne
 8005306:	2301      	movne	r3, #1
 8005308:	2300      	moveq	r3, #0
 800530a:	b2db      	uxtb	r3, r3
 800530c:	e00b      	b.n	8005326 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	699b      	ldr	r3, [r3, #24]
 8005314:	43da      	mvns	r2, r3
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	4013      	ands	r3, r2
 800531a:	b29b      	uxth	r3, r3
 800531c:	2b00      	cmp	r3, #0
 800531e:	bf14      	ite	ne
 8005320:	2301      	movne	r3, #1
 8005322:	2300      	moveq	r3, #0
 8005324:	b2db      	uxtb	r3, r3
 8005326:	2b00      	cmp	r3, #0
 8005328:	d016      	beq.n	8005358 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2200      	movs	r2, #0
 800532e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2220      	movs	r2, #32
 8005334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2200      	movs	r2, #0
 800533c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005344:	f043 0220 	orr.w	r2, r3, #32
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2200      	movs	r2, #0
 8005350:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e021      	b.n	800539c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	0c1b      	lsrs	r3, r3, #16
 800535c:	b2db      	uxtb	r3, r3
 800535e:	2b01      	cmp	r3, #1
 8005360:	d10c      	bne.n	800537c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	695b      	ldr	r3, [r3, #20]
 8005368:	43da      	mvns	r2, r3
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	4013      	ands	r3, r2
 800536e:	b29b      	uxth	r3, r3
 8005370:	2b00      	cmp	r3, #0
 8005372:	bf14      	ite	ne
 8005374:	2301      	movne	r3, #1
 8005376:	2300      	moveq	r3, #0
 8005378:	b2db      	uxtb	r3, r3
 800537a:	e00b      	b.n	8005394 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	699b      	ldr	r3, [r3, #24]
 8005382:	43da      	mvns	r2, r3
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	4013      	ands	r3, r2
 8005388:	b29b      	uxth	r3, r3
 800538a:	2b00      	cmp	r3, #0
 800538c:	bf14      	ite	ne
 800538e:	2301      	movne	r3, #1
 8005390:	2300      	moveq	r3, #0
 8005392:	b2db      	uxtb	r3, r3
 8005394:	2b00      	cmp	r3, #0
 8005396:	f47f af6d 	bne.w	8005274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800539a:	2300      	movs	r3, #0
}
 800539c:	4618      	mov	r0, r3
 800539e:	3710      	adds	r7, #16
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}

080053a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b084      	sub	sp, #16
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053b0:	e034      	b.n	800541c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80053b2:	68f8      	ldr	r0, [r7, #12]
 80053b4:	f000 f8e3 	bl	800557e <I2C_IsAcknowledgeFailed>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d001      	beq.n	80053c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e034      	b.n	800542c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053c8:	d028      	beq.n	800541c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053ca:	f7fe fb27 	bl	8003a1c <HAL_GetTick>
 80053ce:	4602      	mov	r2, r0
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	68ba      	ldr	r2, [r7, #8]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d302      	bcc.n	80053e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d11d      	bne.n	800541c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	695b      	ldr	r3, [r3, #20]
 80053e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053ea:	2b80      	cmp	r3, #128	@ 0x80
 80053ec:	d016      	beq.n	800541c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2200      	movs	r2, #0
 80053f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2220      	movs	r2, #32
 80053f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005408:	f043 0220 	orr.w	r2, r3, #32
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2200      	movs	r2, #0
 8005414:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e007      	b.n	800542c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	695b      	ldr	r3, [r3, #20]
 8005422:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005426:	2b80      	cmp	r3, #128	@ 0x80
 8005428:	d1c3      	bne.n	80053b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800542a:	2300      	movs	r3, #0
}
 800542c:	4618      	mov	r0, r3
 800542e:	3710      	adds	r7, #16
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005440:	e034      	b.n	80054ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005442:	68f8      	ldr	r0, [r7, #12]
 8005444:	f000 f89b 	bl	800557e <I2C_IsAcknowledgeFailed>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d001      	beq.n	8005452 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e034      	b.n	80054bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005458:	d028      	beq.n	80054ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800545a:	f7fe fadf 	bl	8003a1c <HAL_GetTick>
 800545e:	4602      	mov	r2, r0
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	68ba      	ldr	r2, [r7, #8]
 8005466:	429a      	cmp	r2, r3
 8005468:	d302      	bcc.n	8005470 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d11d      	bne.n	80054ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	695b      	ldr	r3, [r3, #20]
 8005476:	f003 0304 	and.w	r3, r3, #4
 800547a:	2b04      	cmp	r3, #4
 800547c:	d016      	beq.n	80054ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2200      	movs	r2, #0
 8005482:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2220      	movs	r2, #32
 8005488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2200      	movs	r2, #0
 8005490:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005498:	f043 0220 	orr.w	r2, r3, #32
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e007      	b.n	80054bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	f003 0304 	and.w	r3, r3, #4
 80054b6:	2b04      	cmp	r3, #4
 80054b8:	d1c3      	bne.n	8005442 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80054ba:	2300      	movs	r3, #0
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3710      	adds	r7, #16
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80054d0:	e049      	b.n	8005566 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	695b      	ldr	r3, [r3, #20]
 80054d8:	f003 0310 	and.w	r3, r3, #16
 80054dc:	2b10      	cmp	r3, #16
 80054de:	d119      	bne.n	8005514 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f06f 0210 	mvn.w	r2, #16
 80054e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2200      	movs	r2, #0
 80054ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2220      	movs	r2, #32
 80054f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2200      	movs	r2, #0
 800550c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	e030      	b.n	8005576 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005514:	f7fe fa82 	bl	8003a1c <HAL_GetTick>
 8005518:	4602      	mov	r2, r0
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	68ba      	ldr	r2, [r7, #8]
 8005520:	429a      	cmp	r2, r3
 8005522:	d302      	bcc.n	800552a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d11d      	bne.n	8005566 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	695b      	ldr	r3, [r3, #20]
 8005530:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005534:	2b40      	cmp	r3, #64	@ 0x40
 8005536:	d016      	beq.n	8005566 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2200      	movs	r2, #0
 800553c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2220      	movs	r2, #32
 8005542:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2200      	movs	r2, #0
 800554a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005552:	f043 0220 	orr.w	r2, r3, #32
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e007      	b.n	8005576 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	695b      	ldr	r3, [r3, #20]
 800556c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005570:	2b40      	cmp	r3, #64	@ 0x40
 8005572:	d1ae      	bne.n	80054d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3710      	adds	r7, #16
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}

0800557e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800557e:	b480      	push	{r7}
 8005580:	b083      	sub	sp, #12
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	695b      	ldr	r3, [r3, #20]
 800558c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005590:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005594:	d11b      	bne.n	80055ce <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800559e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2220      	movs	r2, #32
 80055aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ba:	f043 0204 	orr.w	r2, r3, #4
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e000      	b.n	80055d0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80055ce:	2300      	movs	r3, #0
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bc80      	pop	{r7}
 80055d8:	4770      	bx	lr
	...

080055dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b086      	sub	sp, #24
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d101      	bne.n	80055ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e272      	b.n	8005ad4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f003 0301 	and.w	r3, r3, #1
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	f000 8087 	beq.w	800570a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80055fc:	4b92      	ldr	r3, [pc, #584]	@ (8005848 <HAL_RCC_OscConfig+0x26c>)
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	f003 030c 	and.w	r3, r3, #12
 8005604:	2b04      	cmp	r3, #4
 8005606:	d00c      	beq.n	8005622 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005608:	4b8f      	ldr	r3, [pc, #572]	@ (8005848 <HAL_RCC_OscConfig+0x26c>)
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	f003 030c 	and.w	r3, r3, #12
 8005610:	2b08      	cmp	r3, #8
 8005612:	d112      	bne.n	800563a <HAL_RCC_OscConfig+0x5e>
 8005614:	4b8c      	ldr	r3, [pc, #560]	@ (8005848 <HAL_RCC_OscConfig+0x26c>)
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800561c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005620:	d10b      	bne.n	800563a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005622:	4b89      	ldr	r3, [pc, #548]	@ (8005848 <HAL_RCC_OscConfig+0x26c>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800562a:	2b00      	cmp	r3, #0
 800562c:	d06c      	beq.n	8005708 <HAL_RCC_OscConfig+0x12c>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d168      	bne.n	8005708 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e24c      	b.n	8005ad4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005642:	d106      	bne.n	8005652 <HAL_RCC_OscConfig+0x76>
 8005644:	4b80      	ldr	r3, [pc, #512]	@ (8005848 <HAL_RCC_OscConfig+0x26c>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a7f      	ldr	r2, [pc, #508]	@ (8005848 <HAL_RCC_OscConfig+0x26c>)
 800564a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800564e:	6013      	str	r3, [r2, #0]
 8005650:	e02e      	b.n	80056b0 <HAL_RCC_OscConfig+0xd4>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d10c      	bne.n	8005674 <HAL_RCC_OscConfig+0x98>
 800565a:	4b7b      	ldr	r3, [pc, #492]	@ (8005848 <HAL_RCC_OscConfig+0x26c>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a7a      	ldr	r2, [pc, #488]	@ (8005848 <HAL_RCC_OscConfig+0x26c>)
 8005660:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005664:	6013      	str	r3, [r2, #0]
 8005666:	4b78      	ldr	r3, [pc, #480]	@ (8005848 <HAL_RCC_OscConfig+0x26c>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a77      	ldr	r2, [pc, #476]	@ (8005848 <HAL_RCC_OscConfig+0x26c>)
 800566c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005670:	6013      	str	r3, [r2, #0]
 8005672:	e01d      	b.n	80056b0 <HAL_RCC_OscConfig+0xd4>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800567c:	d10c      	bne.n	8005698 <HAL_RCC_OscConfig+0xbc>
 800567e:	4b72      	ldr	r3, [pc, #456]	@ (8005848 <HAL_RCC_OscConfig+0x26c>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a71      	ldr	r2, [pc, #452]	@ (8005848 <HAL_RCC_OscConfig+0x26c>)
 8005684:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005688:	6013      	str	r3, [r2, #0]
 800568a:	4b6f      	ldr	r3, [pc, #444]	@ (8005848 <HAL_RCC_OscConfig+0x26c>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a6e      	ldr	r2, [pc, #440]	@ (8005848 <HAL_RCC_OscConfig+0x26c>)
 8005690:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005694:	6013      	str	r3, [r2, #0]
 8005696:	e00b      	b.n	80056b0 <HAL_RCC_OscConfig+0xd4>
 8005698:	4b6b      	ldr	r3, [pc, #428]	@ (8005848 <HAL_RCC_OscConfig+0x26c>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a6a      	ldr	r2, [pc, #424]	@ (8005848 <HAL_RCC_OscConfig+0x26c>)
 800569e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056a2:	6013      	str	r3, [r2, #0]
 80056a4:	4b68      	ldr	r3, [pc, #416]	@ (8005848 <HAL_RCC_OscConfig+0x26c>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a67      	ldr	r2, [pc, #412]	@ (8005848 <HAL_RCC_OscConfig+0x26c>)
 80056aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80056ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d013      	beq.n	80056e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056b8:	f7fe f9b0 	bl	8003a1c <HAL_GetTick>
 80056bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056be:	e008      	b.n	80056d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056c0:	f7fe f9ac 	bl	8003a1c <HAL_GetTick>
 80056c4:	4602      	mov	r2, r0
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	1ad3      	subs	r3, r2, r3
 80056ca:	2b64      	cmp	r3, #100	@ 0x64
 80056cc:	d901      	bls.n	80056d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80056ce:	2303      	movs	r3, #3
 80056d0:	e200      	b.n	8005ad4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056d2:	4b5d      	ldr	r3, [pc, #372]	@ (8005848 <HAL_RCC_OscConfig+0x26c>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d0f0      	beq.n	80056c0 <HAL_RCC_OscConfig+0xe4>
 80056de:	e014      	b.n	800570a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056e0:	f7fe f99c 	bl	8003a1c <HAL_GetTick>
 80056e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056e6:	e008      	b.n	80056fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056e8:	f7fe f998 	bl	8003a1c <HAL_GetTick>
 80056ec:	4602      	mov	r2, r0
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	2b64      	cmp	r3, #100	@ 0x64
 80056f4:	d901      	bls.n	80056fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80056f6:	2303      	movs	r3, #3
 80056f8:	e1ec      	b.n	8005ad4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056fa:	4b53      	ldr	r3, [pc, #332]	@ (8005848 <HAL_RCC_OscConfig+0x26c>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005702:	2b00      	cmp	r3, #0
 8005704:	d1f0      	bne.n	80056e8 <HAL_RCC_OscConfig+0x10c>
 8005706:	e000      	b.n	800570a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005708:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 0302 	and.w	r3, r3, #2
 8005712:	2b00      	cmp	r3, #0
 8005714:	d063      	beq.n	80057de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005716:	4b4c      	ldr	r3, [pc, #304]	@ (8005848 <HAL_RCC_OscConfig+0x26c>)
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	f003 030c 	and.w	r3, r3, #12
 800571e:	2b00      	cmp	r3, #0
 8005720:	d00b      	beq.n	800573a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005722:	4b49      	ldr	r3, [pc, #292]	@ (8005848 <HAL_RCC_OscConfig+0x26c>)
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	f003 030c 	and.w	r3, r3, #12
 800572a:	2b08      	cmp	r3, #8
 800572c:	d11c      	bne.n	8005768 <HAL_RCC_OscConfig+0x18c>
 800572e:	4b46      	ldr	r3, [pc, #280]	@ (8005848 <HAL_RCC_OscConfig+0x26c>)
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005736:	2b00      	cmp	r3, #0
 8005738:	d116      	bne.n	8005768 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800573a:	4b43      	ldr	r3, [pc, #268]	@ (8005848 <HAL_RCC_OscConfig+0x26c>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 0302 	and.w	r3, r3, #2
 8005742:	2b00      	cmp	r3, #0
 8005744:	d005      	beq.n	8005752 <HAL_RCC_OscConfig+0x176>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	2b01      	cmp	r3, #1
 800574c:	d001      	beq.n	8005752 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e1c0      	b.n	8005ad4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005752:	4b3d      	ldr	r3, [pc, #244]	@ (8005848 <HAL_RCC_OscConfig+0x26c>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	695b      	ldr	r3, [r3, #20]
 800575e:	00db      	lsls	r3, r3, #3
 8005760:	4939      	ldr	r1, [pc, #228]	@ (8005848 <HAL_RCC_OscConfig+0x26c>)
 8005762:	4313      	orrs	r3, r2
 8005764:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005766:	e03a      	b.n	80057de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	691b      	ldr	r3, [r3, #16]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d020      	beq.n	80057b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005770:	4b36      	ldr	r3, [pc, #216]	@ (800584c <HAL_RCC_OscConfig+0x270>)
 8005772:	2201      	movs	r2, #1
 8005774:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005776:	f7fe f951 	bl	8003a1c <HAL_GetTick>
 800577a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800577c:	e008      	b.n	8005790 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800577e:	f7fe f94d 	bl	8003a1c <HAL_GetTick>
 8005782:	4602      	mov	r2, r0
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	1ad3      	subs	r3, r2, r3
 8005788:	2b02      	cmp	r3, #2
 800578a:	d901      	bls.n	8005790 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800578c:	2303      	movs	r3, #3
 800578e:	e1a1      	b.n	8005ad4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005790:	4b2d      	ldr	r3, [pc, #180]	@ (8005848 <HAL_RCC_OscConfig+0x26c>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 0302 	and.w	r3, r3, #2
 8005798:	2b00      	cmp	r3, #0
 800579a:	d0f0      	beq.n	800577e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800579c:	4b2a      	ldr	r3, [pc, #168]	@ (8005848 <HAL_RCC_OscConfig+0x26c>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	695b      	ldr	r3, [r3, #20]
 80057a8:	00db      	lsls	r3, r3, #3
 80057aa:	4927      	ldr	r1, [pc, #156]	@ (8005848 <HAL_RCC_OscConfig+0x26c>)
 80057ac:	4313      	orrs	r3, r2
 80057ae:	600b      	str	r3, [r1, #0]
 80057b0:	e015      	b.n	80057de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057b2:	4b26      	ldr	r3, [pc, #152]	@ (800584c <HAL_RCC_OscConfig+0x270>)
 80057b4:	2200      	movs	r2, #0
 80057b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057b8:	f7fe f930 	bl	8003a1c <HAL_GetTick>
 80057bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057be:	e008      	b.n	80057d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057c0:	f7fe f92c 	bl	8003a1c <HAL_GetTick>
 80057c4:	4602      	mov	r2, r0
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	1ad3      	subs	r3, r2, r3
 80057ca:	2b02      	cmp	r3, #2
 80057cc:	d901      	bls.n	80057d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80057ce:	2303      	movs	r3, #3
 80057d0:	e180      	b.n	8005ad4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057d2:	4b1d      	ldr	r3, [pc, #116]	@ (8005848 <HAL_RCC_OscConfig+0x26c>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f003 0302 	and.w	r3, r3, #2
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d1f0      	bne.n	80057c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 0308 	and.w	r3, r3, #8
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d03a      	beq.n	8005860 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	699b      	ldr	r3, [r3, #24]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d019      	beq.n	8005826 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057f2:	4b17      	ldr	r3, [pc, #92]	@ (8005850 <HAL_RCC_OscConfig+0x274>)
 80057f4:	2201      	movs	r2, #1
 80057f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057f8:	f7fe f910 	bl	8003a1c <HAL_GetTick>
 80057fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057fe:	e008      	b.n	8005812 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005800:	f7fe f90c 	bl	8003a1c <HAL_GetTick>
 8005804:	4602      	mov	r2, r0
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	2b02      	cmp	r3, #2
 800580c:	d901      	bls.n	8005812 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800580e:	2303      	movs	r3, #3
 8005810:	e160      	b.n	8005ad4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005812:	4b0d      	ldr	r3, [pc, #52]	@ (8005848 <HAL_RCC_OscConfig+0x26c>)
 8005814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005816:	f003 0302 	and.w	r3, r3, #2
 800581a:	2b00      	cmp	r3, #0
 800581c:	d0f0      	beq.n	8005800 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800581e:	2001      	movs	r0, #1
 8005820:	f000 face 	bl	8005dc0 <RCC_Delay>
 8005824:	e01c      	b.n	8005860 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005826:	4b0a      	ldr	r3, [pc, #40]	@ (8005850 <HAL_RCC_OscConfig+0x274>)
 8005828:	2200      	movs	r2, #0
 800582a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800582c:	f7fe f8f6 	bl	8003a1c <HAL_GetTick>
 8005830:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005832:	e00f      	b.n	8005854 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005834:	f7fe f8f2 	bl	8003a1c <HAL_GetTick>
 8005838:	4602      	mov	r2, r0
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	1ad3      	subs	r3, r2, r3
 800583e:	2b02      	cmp	r3, #2
 8005840:	d908      	bls.n	8005854 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005842:	2303      	movs	r3, #3
 8005844:	e146      	b.n	8005ad4 <HAL_RCC_OscConfig+0x4f8>
 8005846:	bf00      	nop
 8005848:	40021000 	.word	0x40021000
 800584c:	42420000 	.word	0x42420000
 8005850:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005854:	4b92      	ldr	r3, [pc, #584]	@ (8005aa0 <HAL_RCC_OscConfig+0x4c4>)
 8005856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005858:	f003 0302 	and.w	r3, r3, #2
 800585c:	2b00      	cmp	r3, #0
 800585e:	d1e9      	bne.n	8005834 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 0304 	and.w	r3, r3, #4
 8005868:	2b00      	cmp	r3, #0
 800586a:	f000 80a6 	beq.w	80059ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800586e:	2300      	movs	r3, #0
 8005870:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005872:	4b8b      	ldr	r3, [pc, #556]	@ (8005aa0 <HAL_RCC_OscConfig+0x4c4>)
 8005874:	69db      	ldr	r3, [r3, #28]
 8005876:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800587a:	2b00      	cmp	r3, #0
 800587c:	d10d      	bne.n	800589a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800587e:	4b88      	ldr	r3, [pc, #544]	@ (8005aa0 <HAL_RCC_OscConfig+0x4c4>)
 8005880:	69db      	ldr	r3, [r3, #28]
 8005882:	4a87      	ldr	r2, [pc, #540]	@ (8005aa0 <HAL_RCC_OscConfig+0x4c4>)
 8005884:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005888:	61d3      	str	r3, [r2, #28]
 800588a:	4b85      	ldr	r3, [pc, #532]	@ (8005aa0 <HAL_RCC_OscConfig+0x4c4>)
 800588c:	69db      	ldr	r3, [r3, #28]
 800588e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005892:	60bb      	str	r3, [r7, #8]
 8005894:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005896:	2301      	movs	r3, #1
 8005898:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800589a:	4b82      	ldr	r3, [pc, #520]	@ (8005aa4 <HAL_RCC_OscConfig+0x4c8>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d118      	bne.n	80058d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058a6:	4b7f      	ldr	r3, [pc, #508]	@ (8005aa4 <HAL_RCC_OscConfig+0x4c8>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a7e      	ldr	r2, [pc, #504]	@ (8005aa4 <HAL_RCC_OscConfig+0x4c8>)
 80058ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058b2:	f7fe f8b3 	bl	8003a1c <HAL_GetTick>
 80058b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058b8:	e008      	b.n	80058cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058ba:	f7fe f8af 	bl	8003a1c <HAL_GetTick>
 80058be:	4602      	mov	r2, r0
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	1ad3      	subs	r3, r2, r3
 80058c4:	2b64      	cmp	r3, #100	@ 0x64
 80058c6:	d901      	bls.n	80058cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80058c8:	2303      	movs	r3, #3
 80058ca:	e103      	b.n	8005ad4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058cc:	4b75      	ldr	r3, [pc, #468]	@ (8005aa4 <HAL_RCC_OscConfig+0x4c8>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d0f0      	beq.n	80058ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d106      	bne.n	80058ee <HAL_RCC_OscConfig+0x312>
 80058e0:	4b6f      	ldr	r3, [pc, #444]	@ (8005aa0 <HAL_RCC_OscConfig+0x4c4>)
 80058e2:	6a1b      	ldr	r3, [r3, #32]
 80058e4:	4a6e      	ldr	r2, [pc, #440]	@ (8005aa0 <HAL_RCC_OscConfig+0x4c4>)
 80058e6:	f043 0301 	orr.w	r3, r3, #1
 80058ea:	6213      	str	r3, [r2, #32]
 80058ec:	e02d      	b.n	800594a <HAL_RCC_OscConfig+0x36e>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d10c      	bne.n	8005910 <HAL_RCC_OscConfig+0x334>
 80058f6:	4b6a      	ldr	r3, [pc, #424]	@ (8005aa0 <HAL_RCC_OscConfig+0x4c4>)
 80058f8:	6a1b      	ldr	r3, [r3, #32]
 80058fa:	4a69      	ldr	r2, [pc, #420]	@ (8005aa0 <HAL_RCC_OscConfig+0x4c4>)
 80058fc:	f023 0301 	bic.w	r3, r3, #1
 8005900:	6213      	str	r3, [r2, #32]
 8005902:	4b67      	ldr	r3, [pc, #412]	@ (8005aa0 <HAL_RCC_OscConfig+0x4c4>)
 8005904:	6a1b      	ldr	r3, [r3, #32]
 8005906:	4a66      	ldr	r2, [pc, #408]	@ (8005aa0 <HAL_RCC_OscConfig+0x4c4>)
 8005908:	f023 0304 	bic.w	r3, r3, #4
 800590c:	6213      	str	r3, [r2, #32]
 800590e:	e01c      	b.n	800594a <HAL_RCC_OscConfig+0x36e>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	2b05      	cmp	r3, #5
 8005916:	d10c      	bne.n	8005932 <HAL_RCC_OscConfig+0x356>
 8005918:	4b61      	ldr	r3, [pc, #388]	@ (8005aa0 <HAL_RCC_OscConfig+0x4c4>)
 800591a:	6a1b      	ldr	r3, [r3, #32]
 800591c:	4a60      	ldr	r2, [pc, #384]	@ (8005aa0 <HAL_RCC_OscConfig+0x4c4>)
 800591e:	f043 0304 	orr.w	r3, r3, #4
 8005922:	6213      	str	r3, [r2, #32]
 8005924:	4b5e      	ldr	r3, [pc, #376]	@ (8005aa0 <HAL_RCC_OscConfig+0x4c4>)
 8005926:	6a1b      	ldr	r3, [r3, #32]
 8005928:	4a5d      	ldr	r2, [pc, #372]	@ (8005aa0 <HAL_RCC_OscConfig+0x4c4>)
 800592a:	f043 0301 	orr.w	r3, r3, #1
 800592e:	6213      	str	r3, [r2, #32]
 8005930:	e00b      	b.n	800594a <HAL_RCC_OscConfig+0x36e>
 8005932:	4b5b      	ldr	r3, [pc, #364]	@ (8005aa0 <HAL_RCC_OscConfig+0x4c4>)
 8005934:	6a1b      	ldr	r3, [r3, #32]
 8005936:	4a5a      	ldr	r2, [pc, #360]	@ (8005aa0 <HAL_RCC_OscConfig+0x4c4>)
 8005938:	f023 0301 	bic.w	r3, r3, #1
 800593c:	6213      	str	r3, [r2, #32]
 800593e:	4b58      	ldr	r3, [pc, #352]	@ (8005aa0 <HAL_RCC_OscConfig+0x4c4>)
 8005940:	6a1b      	ldr	r3, [r3, #32]
 8005942:	4a57      	ldr	r2, [pc, #348]	@ (8005aa0 <HAL_RCC_OscConfig+0x4c4>)
 8005944:	f023 0304 	bic.w	r3, r3, #4
 8005948:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d015      	beq.n	800597e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005952:	f7fe f863 	bl	8003a1c <HAL_GetTick>
 8005956:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005958:	e00a      	b.n	8005970 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800595a:	f7fe f85f 	bl	8003a1c <HAL_GetTick>
 800595e:	4602      	mov	r2, r0
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	1ad3      	subs	r3, r2, r3
 8005964:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005968:	4293      	cmp	r3, r2
 800596a:	d901      	bls.n	8005970 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800596c:	2303      	movs	r3, #3
 800596e:	e0b1      	b.n	8005ad4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005970:	4b4b      	ldr	r3, [pc, #300]	@ (8005aa0 <HAL_RCC_OscConfig+0x4c4>)
 8005972:	6a1b      	ldr	r3, [r3, #32]
 8005974:	f003 0302 	and.w	r3, r3, #2
 8005978:	2b00      	cmp	r3, #0
 800597a:	d0ee      	beq.n	800595a <HAL_RCC_OscConfig+0x37e>
 800597c:	e014      	b.n	80059a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800597e:	f7fe f84d 	bl	8003a1c <HAL_GetTick>
 8005982:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005984:	e00a      	b.n	800599c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005986:	f7fe f849 	bl	8003a1c <HAL_GetTick>
 800598a:	4602      	mov	r2, r0
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	1ad3      	subs	r3, r2, r3
 8005990:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005994:	4293      	cmp	r3, r2
 8005996:	d901      	bls.n	800599c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005998:	2303      	movs	r3, #3
 800599a:	e09b      	b.n	8005ad4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800599c:	4b40      	ldr	r3, [pc, #256]	@ (8005aa0 <HAL_RCC_OscConfig+0x4c4>)
 800599e:	6a1b      	ldr	r3, [r3, #32]
 80059a0:	f003 0302 	and.w	r3, r3, #2
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d1ee      	bne.n	8005986 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80059a8:	7dfb      	ldrb	r3, [r7, #23]
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d105      	bne.n	80059ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059ae:	4b3c      	ldr	r3, [pc, #240]	@ (8005aa0 <HAL_RCC_OscConfig+0x4c4>)
 80059b0:	69db      	ldr	r3, [r3, #28]
 80059b2:	4a3b      	ldr	r2, [pc, #236]	@ (8005aa0 <HAL_RCC_OscConfig+0x4c4>)
 80059b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80059b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	69db      	ldr	r3, [r3, #28]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	f000 8087 	beq.w	8005ad2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80059c4:	4b36      	ldr	r3, [pc, #216]	@ (8005aa0 <HAL_RCC_OscConfig+0x4c4>)
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	f003 030c 	and.w	r3, r3, #12
 80059cc:	2b08      	cmp	r3, #8
 80059ce:	d061      	beq.n	8005a94 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	69db      	ldr	r3, [r3, #28]
 80059d4:	2b02      	cmp	r3, #2
 80059d6:	d146      	bne.n	8005a66 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059d8:	4b33      	ldr	r3, [pc, #204]	@ (8005aa8 <HAL_RCC_OscConfig+0x4cc>)
 80059da:	2200      	movs	r2, #0
 80059dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059de:	f7fe f81d 	bl	8003a1c <HAL_GetTick>
 80059e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059e4:	e008      	b.n	80059f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059e6:	f7fe f819 	bl	8003a1c <HAL_GetTick>
 80059ea:	4602      	mov	r2, r0
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	1ad3      	subs	r3, r2, r3
 80059f0:	2b02      	cmp	r3, #2
 80059f2:	d901      	bls.n	80059f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80059f4:	2303      	movs	r3, #3
 80059f6:	e06d      	b.n	8005ad4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059f8:	4b29      	ldr	r3, [pc, #164]	@ (8005aa0 <HAL_RCC_OscConfig+0x4c4>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d1f0      	bne.n	80059e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6a1b      	ldr	r3, [r3, #32]
 8005a08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a0c:	d108      	bne.n	8005a20 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005a0e:	4b24      	ldr	r3, [pc, #144]	@ (8005aa0 <HAL_RCC_OscConfig+0x4c4>)
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	4921      	ldr	r1, [pc, #132]	@ (8005aa0 <HAL_RCC_OscConfig+0x4c4>)
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a20:	4b1f      	ldr	r3, [pc, #124]	@ (8005aa0 <HAL_RCC_OscConfig+0x4c4>)
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6a19      	ldr	r1, [r3, #32]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a30:	430b      	orrs	r3, r1
 8005a32:	491b      	ldr	r1, [pc, #108]	@ (8005aa0 <HAL_RCC_OscConfig+0x4c4>)
 8005a34:	4313      	orrs	r3, r2
 8005a36:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a38:	4b1b      	ldr	r3, [pc, #108]	@ (8005aa8 <HAL_RCC_OscConfig+0x4cc>)
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a3e:	f7fd ffed 	bl	8003a1c <HAL_GetTick>
 8005a42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005a44:	e008      	b.n	8005a58 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a46:	f7fd ffe9 	bl	8003a1c <HAL_GetTick>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	1ad3      	subs	r3, r2, r3
 8005a50:	2b02      	cmp	r3, #2
 8005a52:	d901      	bls.n	8005a58 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005a54:	2303      	movs	r3, #3
 8005a56:	e03d      	b.n	8005ad4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005a58:	4b11      	ldr	r3, [pc, #68]	@ (8005aa0 <HAL_RCC_OscConfig+0x4c4>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d0f0      	beq.n	8005a46 <HAL_RCC_OscConfig+0x46a>
 8005a64:	e035      	b.n	8005ad2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a66:	4b10      	ldr	r3, [pc, #64]	@ (8005aa8 <HAL_RCC_OscConfig+0x4cc>)
 8005a68:	2200      	movs	r2, #0
 8005a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a6c:	f7fd ffd6 	bl	8003a1c <HAL_GetTick>
 8005a70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a72:	e008      	b.n	8005a86 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a74:	f7fd ffd2 	bl	8003a1c <HAL_GetTick>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	1ad3      	subs	r3, r2, r3
 8005a7e:	2b02      	cmp	r3, #2
 8005a80:	d901      	bls.n	8005a86 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005a82:	2303      	movs	r3, #3
 8005a84:	e026      	b.n	8005ad4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a86:	4b06      	ldr	r3, [pc, #24]	@ (8005aa0 <HAL_RCC_OscConfig+0x4c4>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d1f0      	bne.n	8005a74 <HAL_RCC_OscConfig+0x498>
 8005a92:	e01e      	b.n	8005ad2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	69db      	ldr	r3, [r3, #28]
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d107      	bne.n	8005aac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e019      	b.n	8005ad4 <HAL_RCC_OscConfig+0x4f8>
 8005aa0:	40021000 	.word	0x40021000
 8005aa4:	40007000 	.word	0x40007000
 8005aa8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005aac:	4b0b      	ldr	r3, [pc, #44]	@ (8005adc <HAL_RCC_OscConfig+0x500>)
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6a1b      	ldr	r3, [r3, #32]
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d106      	bne.n	8005ace <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d001      	beq.n	8005ad2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e000      	b.n	8005ad4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005ad2:	2300      	movs	r3, #0
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3718      	adds	r7, #24
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}
 8005adc:	40021000 	.word	0x40021000

08005ae0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d101      	bne.n	8005af4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	e0d0      	b.n	8005c96 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005af4:	4b6a      	ldr	r3, [pc, #424]	@ (8005ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 0307 	and.w	r3, r3, #7
 8005afc:	683a      	ldr	r2, [r7, #0]
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d910      	bls.n	8005b24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b02:	4b67      	ldr	r3, [pc, #412]	@ (8005ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f023 0207 	bic.w	r2, r3, #7
 8005b0a:	4965      	ldr	r1, [pc, #404]	@ (8005ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b12:	4b63      	ldr	r3, [pc, #396]	@ (8005ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 0307 	and.w	r3, r3, #7
 8005b1a:	683a      	ldr	r2, [r7, #0]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d001      	beq.n	8005b24 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e0b8      	b.n	8005c96 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 0302 	and.w	r3, r3, #2
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d020      	beq.n	8005b72 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 0304 	and.w	r3, r3, #4
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d005      	beq.n	8005b48 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b3c:	4b59      	ldr	r3, [pc, #356]	@ (8005ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	4a58      	ldr	r2, [pc, #352]	@ (8005ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8005b42:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005b46:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 0308 	and.w	r3, r3, #8
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d005      	beq.n	8005b60 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b54:	4b53      	ldr	r3, [pc, #332]	@ (8005ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	4a52      	ldr	r2, [pc, #328]	@ (8005ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8005b5a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8005b5e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b60:	4b50      	ldr	r3, [pc, #320]	@ (8005ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	494d      	ldr	r1, [pc, #308]	@ (8005ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 0301 	and.w	r3, r3, #1
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d040      	beq.n	8005c00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d107      	bne.n	8005b96 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b86:	4b47      	ldr	r3, [pc, #284]	@ (8005ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d115      	bne.n	8005bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e07f      	b.n	8005c96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d107      	bne.n	8005bae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b9e:	4b41      	ldr	r3, [pc, #260]	@ (8005ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d109      	bne.n	8005bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e073      	b.n	8005c96 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bae:	4b3d      	ldr	r3, [pc, #244]	@ (8005ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 0302 	and.w	r3, r3, #2
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d101      	bne.n	8005bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e06b      	b.n	8005c96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005bbe:	4b39      	ldr	r3, [pc, #228]	@ (8005ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	f023 0203 	bic.w	r2, r3, #3
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	4936      	ldr	r1, [pc, #216]	@ (8005ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005bd0:	f7fd ff24 	bl	8003a1c <HAL_GetTick>
 8005bd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bd6:	e00a      	b.n	8005bee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bd8:	f7fd ff20 	bl	8003a1c <HAL_GetTick>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	1ad3      	subs	r3, r2, r3
 8005be2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d901      	bls.n	8005bee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005bea:	2303      	movs	r3, #3
 8005bec:	e053      	b.n	8005c96 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bee:	4b2d      	ldr	r3, [pc, #180]	@ (8005ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	f003 020c 	and.w	r2, r3, #12
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d1eb      	bne.n	8005bd8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c00:	4b27      	ldr	r3, [pc, #156]	@ (8005ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 0307 	and.w	r3, r3, #7
 8005c08:	683a      	ldr	r2, [r7, #0]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d210      	bcs.n	8005c30 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c0e:	4b24      	ldr	r3, [pc, #144]	@ (8005ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f023 0207 	bic.w	r2, r3, #7
 8005c16:	4922      	ldr	r1, [pc, #136]	@ (8005ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c1e:	4b20      	ldr	r3, [pc, #128]	@ (8005ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f003 0307 	and.w	r3, r3, #7
 8005c26:	683a      	ldr	r2, [r7, #0]
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d001      	beq.n	8005c30 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e032      	b.n	8005c96 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 0304 	and.w	r3, r3, #4
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d008      	beq.n	8005c4e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c3c:	4b19      	ldr	r3, [pc, #100]	@ (8005ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	4916      	ldr	r1, [pc, #88]	@ (8005ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 0308 	and.w	r3, r3, #8
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d009      	beq.n	8005c6e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005c5a:	4b12      	ldr	r3, [pc, #72]	@ (8005ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	00db      	lsls	r3, r3, #3
 8005c68:	490e      	ldr	r1, [pc, #56]	@ (8005ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005c6e:	f000 f821 	bl	8005cb4 <HAL_RCC_GetSysClockFreq>
 8005c72:	4602      	mov	r2, r0
 8005c74:	4b0b      	ldr	r3, [pc, #44]	@ (8005ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	091b      	lsrs	r3, r3, #4
 8005c7a:	f003 030f 	and.w	r3, r3, #15
 8005c7e:	490a      	ldr	r1, [pc, #40]	@ (8005ca8 <HAL_RCC_ClockConfig+0x1c8>)
 8005c80:	5ccb      	ldrb	r3, [r1, r3]
 8005c82:	fa22 f303 	lsr.w	r3, r2, r3
 8005c86:	4a09      	ldr	r2, [pc, #36]	@ (8005cac <HAL_RCC_ClockConfig+0x1cc>)
 8005c88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005c8a:	4b09      	ldr	r3, [pc, #36]	@ (8005cb0 <HAL_RCC_ClockConfig+0x1d0>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f7fd fe82 	bl	8003998 <HAL_InitTick>

  return HAL_OK;
 8005c94:	2300      	movs	r3, #0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3710      	adds	r7, #16
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	bf00      	nop
 8005ca0:	40022000 	.word	0x40022000
 8005ca4:	40021000 	.word	0x40021000
 8005ca8:	0800c43c 	.word	0x0800c43c
 8005cac:	2000000c 	.word	0x2000000c
 8005cb0:	20000010 	.word	0x20000010

08005cb4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b087      	sub	sp, #28
 8005cb8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	60fb      	str	r3, [r7, #12]
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	60bb      	str	r3, [r7, #8]
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	617b      	str	r3, [r7, #20]
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005cce:	4b1e      	ldr	r3, [pc, #120]	@ (8005d48 <HAL_RCC_GetSysClockFreq+0x94>)
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f003 030c 	and.w	r3, r3, #12
 8005cda:	2b04      	cmp	r3, #4
 8005cdc:	d002      	beq.n	8005ce4 <HAL_RCC_GetSysClockFreq+0x30>
 8005cde:	2b08      	cmp	r3, #8
 8005ce0:	d003      	beq.n	8005cea <HAL_RCC_GetSysClockFreq+0x36>
 8005ce2:	e027      	b.n	8005d34 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005ce4:	4b19      	ldr	r3, [pc, #100]	@ (8005d4c <HAL_RCC_GetSysClockFreq+0x98>)
 8005ce6:	613b      	str	r3, [r7, #16]
      break;
 8005ce8:	e027      	b.n	8005d3a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	0c9b      	lsrs	r3, r3, #18
 8005cee:	f003 030f 	and.w	r3, r3, #15
 8005cf2:	4a17      	ldr	r2, [pc, #92]	@ (8005d50 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005cf4:	5cd3      	ldrb	r3, [r2, r3]
 8005cf6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d010      	beq.n	8005d24 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005d02:	4b11      	ldr	r3, [pc, #68]	@ (8005d48 <HAL_RCC_GetSysClockFreq+0x94>)
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	0c5b      	lsrs	r3, r3, #17
 8005d08:	f003 0301 	and.w	r3, r3, #1
 8005d0c:	4a11      	ldr	r2, [pc, #68]	@ (8005d54 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005d0e:	5cd3      	ldrb	r3, [r2, r3]
 8005d10:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4a0d      	ldr	r2, [pc, #52]	@ (8005d4c <HAL_RCC_GetSysClockFreq+0x98>)
 8005d16:	fb03 f202 	mul.w	r2, r3, r2
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d20:	617b      	str	r3, [r7, #20]
 8005d22:	e004      	b.n	8005d2e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	4a0c      	ldr	r2, [pc, #48]	@ (8005d58 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005d28:	fb02 f303 	mul.w	r3, r2, r3
 8005d2c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	613b      	str	r3, [r7, #16]
      break;
 8005d32:	e002      	b.n	8005d3a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005d34:	4b05      	ldr	r3, [pc, #20]	@ (8005d4c <HAL_RCC_GetSysClockFreq+0x98>)
 8005d36:	613b      	str	r3, [r7, #16]
      break;
 8005d38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d3a:	693b      	ldr	r3, [r7, #16]
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	371c      	adds	r7, #28
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bc80      	pop	{r7}
 8005d44:	4770      	bx	lr
 8005d46:	bf00      	nop
 8005d48:	40021000 	.word	0x40021000
 8005d4c:	007a1200 	.word	0x007a1200
 8005d50:	0800c454 	.word	0x0800c454
 8005d54:	0800c464 	.word	0x0800c464
 8005d58:	003d0900 	.word	0x003d0900

08005d5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d60:	4b02      	ldr	r3, [pc, #8]	@ (8005d6c <HAL_RCC_GetHCLKFreq+0x10>)
 8005d62:	681b      	ldr	r3, [r3, #0]
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bc80      	pop	{r7}
 8005d6a:	4770      	bx	lr
 8005d6c:	2000000c 	.word	0x2000000c

08005d70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005d74:	f7ff fff2 	bl	8005d5c <HAL_RCC_GetHCLKFreq>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	4b05      	ldr	r3, [pc, #20]	@ (8005d90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	0a1b      	lsrs	r3, r3, #8
 8005d80:	f003 0307 	and.w	r3, r3, #7
 8005d84:	4903      	ldr	r1, [pc, #12]	@ (8005d94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d86:	5ccb      	ldrb	r3, [r1, r3]
 8005d88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	40021000 	.word	0x40021000
 8005d94:	0800c44c 	.word	0x0800c44c

08005d98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005d9c:	f7ff ffde 	bl	8005d5c <HAL_RCC_GetHCLKFreq>
 8005da0:	4602      	mov	r2, r0
 8005da2:	4b05      	ldr	r3, [pc, #20]	@ (8005db8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	0adb      	lsrs	r3, r3, #11
 8005da8:	f003 0307 	and.w	r3, r3, #7
 8005dac:	4903      	ldr	r1, [pc, #12]	@ (8005dbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005dae:	5ccb      	ldrb	r3, [r1, r3]
 8005db0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	40021000 	.word	0x40021000
 8005dbc:	0800c44c 	.word	0x0800c44c

08005dc0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b085      	sub	sp, #20
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005dc8:	4b0a      	ldr	r3, [pc, #40]	@ (8005df4 <RCC_Delay+0x34>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a0a      	ldr	r2, [pc, #40]	@ (8005df8 <RCC_Delay+0x38>)
 8005dce:	fba2 2303 	umull	r2, r3, r2, r3
 8005dd2:	0a5b      	lsrs	r3, r3, #9
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	fb02 f303 	mul.w	r3, r2, r3
 8005dda:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005ddc:	bf00      	nop
  }
  while (Delay --);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	1e5a      	subs	r2, r3, #1
 8005de2:	60fa      	str	r2, [r7, #12]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d1f9      	bne.n	8005ddc <RCC_Delay+0x1c>
}
 8005de8:	bf00      	nop
 8005dea:	bf00      	nop
 8005dec:	3714      	adds	r7, #20
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bc80      	pop	{r7}
 8005df2:	4770      	bx	lr
 8005df4:	2000000c 	.word	0x2000000c
 8005df8:	10624dd3 	.word	0x10624dd3

08005dfc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b086      	sub	sp, #24
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d101      	bne.n	8005e10 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e093      	b.n	8005f38 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d106      	bne.n	8005e2a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f7fd fbf9 	bl	800361c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2202      	movs	r2, #2
 8005e2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	6812      	ldr	r2, [r2, #0]
 8005e3c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e40:	f023 0307 	bic.w	r3, r3, #7
 8005e44:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	3304      	adds	r3, #4
 8005e4e:	4619      	mov	r1, r3
 8005e50:	4610      	mov	r0, r2
 8005e52:	f000 fa21 	bl	8006298 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	699b      	ldr	r3, [r3, #24]
 8005e64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	6a1b      	ldr	r3, [r3, #32]
 8005e6c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	697a      	ldr	r2, [r7, #20]
 8005e74:	4313      	orrs	r3, r2
 8005e76:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e7e:	f023 0303 	bic.w	r3, r3, #3
 8005e82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	689a      	ldr	r2, [r3, #8]
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	699b      	ldr	r3, [r3, #24]
 8005e8c:	021b      	lsls	r3, r3, #8
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	693a      	ldr	r2, [r7, #16]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005e9c:	f023 030c 	bic.w	r3, r3, #12
 8005ea0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005ea8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005eac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	68da      	ldr	r2, [r3, #12]
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	69db      	ldr	r3, [r3, #28]
 8005eb6:	021b      	lsls	r3, r3, #8
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	693a      	ldr	r2, [r7, #16]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	691b      	ldr	r3, [r3, #16]
 8005ec4:	011a      	lsls	r2, r3, #4
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	6a1b      	ldr	r3, [r3, #32]
 8005eca:	031b      	lsls	r3, r3, #12
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	693a      	ldr	r2, [r7, #16]
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005eda:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	685a      	ldr	r2, [r3, #4]
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	695b      	ldr	r3, [r3, #20]
 8005ee4:	011b      	lsls	r3, r3, #4
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	68fa      	ldr	r2, [r7, #12]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	697a      	ldr	r2, [r7, #20]
 8005ef4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	693a      	ldr	r2, [r7, #16]
 8005efc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68fa      	ldr	r2, [r7, #12]
 8005f04:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2201      	movs	r2, #1
 8005f12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2201      	movs	r2, #1
 8005f22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2201      	movs	r2, #1
 8005f2a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2201      	movs	r2, #1
 8005f32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f36:	2300      	movs	r3, #0
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3718      	adds	r7, #24
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b084      	sub	sp, #16
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005f50:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005f58:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f60:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005f68:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d110      	bne.n	8005f92 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f70:	7bfb      	ldrb	r3, [r7, #15]
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d102      	bne.n	8005f7c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005f76:	7b7b      	ldrb	r3, [r7, #13]
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d001      	beq.n	8005f80 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e069      	b.n	8006054 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2202      	movs	r2, #2
 8005f84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2202      	movs	r2, #2
 8005f8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f90:	e031      	b.n	8005ff6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	2b04      	cmp	r3, #4
 8005f96:	d110      	bne.n	8005fba <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f98:	7bbb      	ldrb	r3, [r7, #14]
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d102      	bne.n	8005fa4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005f9e:	7b3b      	ldrb	r3, [r7, #12]
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d001      	beq.n	8005fa8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e055      	b.n	8006054 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2202      	movs	r2, #2
 8005fac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2202      	movs	r2, #2
 8005fb4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005fb8:	e01d      	b.n	8005ff6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005fba:	7bfb      	ldrb	r3, [r7, #15]
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d108      	bne.n	8005fd2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005fc0:	7bbb      	ldrb	r3, [r7, #14]
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d105      	bne.n	8005fd2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005fc6:	7b7b      	ldrb	r3, [r7, #13]
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d102      	bne.n	8005fd2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005fcc:	7b3b      	ldrb	r3, [r7, #12]
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d001      	beq.n	8005fd6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e03e      	b.n	8006054 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2202      	movs	r2, #2
 8005fda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2202      	movs	r2, #2
 8005fe2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2202      	movs	r2, #2
 8005fea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2202      	movs	r2, #2
 8005ff2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d003      	beq.n	8006004 <HAL_TIM_Encoder_Start+0xc4>
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	2b04      	cmp	r3, #4
 8006000:	d008      	beq.n	8006014 <HAL_TIM_Encoder_Start+0xd4>
 8006002:	e00f      	b.n	8006024 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2201      	movs	r2, #1
 800600a:	2100      	movs	r1, #0
 800600c:	4618      	mov	r0, r3
 800600e:	f000 f9b1 	bl	8006374 <TIM_CCxChannelCmd>
      break;
 8006012:	e016      	b.n	8006042 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	2201      	movs	r2, #1
 800601a:	2104      	movs	r1, #4
 800601c:	4618      	mov	r0, r3
 800601e:	f000 f9a9 	bl	8006374 <TIM_CCxChannelCmd>
      break;
 8006022:	e00e      	b.n	8006042 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	2201      	movs	r2, #1
 800602a:	2100      	movs	r1, #0
 800602c:	4618      	mov	r0, r3
 800602e:	f000 f9a1 	bl	8006374 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	2201      	movs	r2, #1
 8006038:	2104      	movs	r1, #4
 800603a:	4618      	mov	r0, r3
 800603c:	f000 f99a 	bl	8006374 <TIM_CCxChannelCmd>
      break;
 8006040:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f042 0201 	orr.w	r2, r2, #1
 8006050:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006052:	2300      	movs	r3, #0
}
 8006054:	4618      	mov	r0, r3
 8006056:	3710      	adds	r7, #16
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	f003 0302 	and.w	r3, r3, #2
 800607a:	2b00      	cmp	r3, #0
 800607c:	d020      	beq.n	80060c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f003 0302 	and.w	r3, r3, #2
 8006084:	2b00      	cmp	r3, #0
 8006086:	d01b      	beq.n	80060c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f06f 0202 	mvn.w	r2, #2
 8006090:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2201      	movs	r2, #1
 8006096:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	699b      	ldr	r3, [r3, #24]
 800609e:	f003 0303 	and.w	r3, r3, #3
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d003      	beq.n	80060ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 f8da 	bl	8006260 <HAL_TIM_IC_CaptureCallback>
 80060ac:	e005      	b.n	80060ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 f8cd 	bl	800624e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f000 f8dc 	bl	8006272 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	f003 0304 	and.w	r3, r3, #4
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d020      	beq.n	800610c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f003 0304 	and.w	r3, r3, #4
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d01b      	beq.n	800610c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f06f 0204 	mvn.w	r2, #4
 80060dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2202      	movs	r2, #2
 80060e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	699b      	ldr	r3, [r3, #24]
 80060ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d003      	beq.n	80060fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 f8b4 	bl	8006260 <HAL_TIM_IC_CaptureCallback>
 80060f8:	e005      	b.n	8006106 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 f8a7 	bl	800624e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f000 f8b6 	bl	8006272 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2200      	movs	r2, #0
 800610a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	f003 0308 	and.w	r3, r3, #8
 8006112:	2b00      	cmp	r3, #0
 8006114:	d020      	beq.n	8006158 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	f003 0308 	and.w	r3, r3, #8
 800611c:	2b00      	cmp	r3, #0
 800611e:	d01b      	beq.n	8006158 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f06f 0208 	mvn.w	r2, #8
 8006128:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2204      	movs	r2, #4
 800612e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	69db      	ldr	r3, [r3, #28]
 8006136:	f003 0303 	and.w	r3, r3, #3
 800613a:	2b00      	cmp	r3, #0
 800613c:	d003      	beq.n	8006146 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 f88e 	bl	8006260 <HAL_TIM_IC_CaptureCallback>
 8006144:	e005      	b.n	8006152 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 f881 	bl	800624e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f000 f890 	bl	8006272 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2200      	movs	r2, #0
 8006156:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	f003 0310 	and.w	r3, r3, #16
 800615e:	2b00      	cmp	r3, #0
 8006160:	d020      	beq.n	80061a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f003 0310 	and.w	r3, r3, #16
 8006168:	2b00      	cmp	r3, #0
 800616a:	d01b      	beq.n	80061a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f06f 0210 	mvn.w	r2, #16
 8006174:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2208      	movs	r2, #8
 800617a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	69db      	ldr	r3, [r3, #28]
 8006182:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006186:	2b00      	cmp	r3, #0
 8006188:	d003      	beq.n	8006192 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f000 f868 	bl	8006260 <HAL_TIM_IC_CaptureCallback>
 8006190:	e005      	b.n	800619e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 f85b 	bl	800624e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f000 f86a 	bl	8006272 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	f003 0301 	and.w	r3, r3, #1
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00c      	beq.n	80061c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f003 0301 	and.w	r3, r3, #1
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d007      	beq.n	80061c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f06f 0201 	mvn.w	r2, #1
 80061c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 f83a 	bl	800623c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d00c      	beq.n	80061ec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d007      	beq.n	80061ec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80061e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 f94f 	bl	800648a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d00c      	beq.n	8006210 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d007      	beq.n	8006210 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 f83a 	bl	8006284 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	f003 0320 	and.w	r3, r3, #32
 8006216:	2b00      	cmp	r3, #0
 8006218:	d00c      	beq.n	8006234 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f003 0320 	and.w	r3, r3, #32
 8006220:	2b00      	cmp	r3, #0
 8006222:	d007      	beq.n	8006234 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f06f 0220 	mvn.w	r2, #32
 800622c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 f922 	bl	8006478 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006234:	bf00      	nop
 8006236:	3710      	adds	r7, #16
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}

0800623c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800623c:	b480      	push	{r7}
 800623e:	b083      	sub	sp, #12
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006244:	bf00      	nop
 8006246:	370c      	adds	r7, #12
 8006248:	46bd      	mov	sp, r7
 800624a:	bc80      	pop	{r7}
 800624c:	4770      	bx	lr

0800624e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800624e:	b480      	push	{r7}
 8006250:	b083      	sub	sp, #12
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006256:	bf00      	nop
 8006258:	370c      	adds	r7, #12
 800625a:	46bd      	mov	sp, r7
 800625c:	bc80      	pop	{r7}
 800625e:	4770      	bx	lr

08006260 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006268:	bf00      	nop
 800626a:	370c      	adds	r7, #12
 800626c:	46bd      	mov	sp, r7
 800626e:	bc80      	pop	{r7}
 8006270:	4770      	bx	lr

08006272 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006272:	b480      	push	{r7}
 8006274:	b083      	sub	sp, #12
 8006276:	af00      	add	r7, sp, #0
 8006278:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800627a:	bf00      	nop
 800627c:	370c      	adds	r7, #12
 800627e:	46bd      	mov	sp, r7
 8006280:	bc80      	pop	{r7}
 8006282:	4770      	bx	lr

08006284 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800628c:	bf00      	nop
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	bc80      	pop	{r7}
 8006294:	4770      	bx	lr
	...

08006298 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006298:	b480      	push	{r7}
 800629a:	b085      	sub	sp, #20
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	4a2f      	ldr	r2, [pc, #188]	@ (8006368 <TIM_Base_SetConfig+0xd0>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d00b      	beq.n	80062c8 <TIM_Base_SetConfig+0x30>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062b6:	d007      	beq.n	80062c8 <TIM_Base_SetConfig+0x30>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	4a2c      	ldr	r2, [pc, #176]	@ (800636c <TIM_Base_SetConfig+0xd4>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d003      	beq.n	80062c8 <TIM_Base_SetConfig+0x30>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	4a2b      	ldr	r2, [pc, #172]	@ (8006370 <TIM_Base_SetConfig+0xd8>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d108      	bne.n	80062da <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	68fa      	ldr	r2, [r7, #12]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	4a22      	ldr	r2, [pc, #136]	@ (8006368 <TIM_Base_SetConfig+0xd0>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d00b      	beq.n	80062fa <TIM_Base_SetConfig+0x62>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062e8:	d007      	beq.n	80062fa <TIM_Base_SetConfig+0x62>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	4a1f      	ldr	r2, [pc, #124]	@ (800636c <TIM_Base_SetConfig+0xd4>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d003      	beq.n	80062fa <TIM_Base_SetConfig+0x62>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	4a1e      	ldr	r2, [pc, #120]	@ (8006370 <TIM_Base_SetConfig+0xd8>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d108      	bne.n	800630c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006300:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	68fa      	ldr	r2, [r7, #12]
 8006308:	4313      	orrs	r3, r2
 800630a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	695b      	ldr	r3, [r3, #20]
 8006316:	4313      	orrs	r3, r2
 8006318:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	68fa      	ldr	r2, [r7, #12]
 800631e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	689a      	ldr	r2, [r3, #8]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	4a0d      	ldr	r2, [pc, #52]	@ (8006368 <TIM_Base_SetConfig+0xd0>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d103      	bne.n	8006340 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	691a      	ldr	r2, [r3, #16]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	f003 0301 	and.w	r3, r3, #1
 800634e:	2b00      	cmp	r3, #0
 8006350:	d005      	beq.n	800635e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	f023 0201 	bic.w	r2, r3, #1
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	611a      	str	r2, [r3, #16]
  }
}
 800635e:	bf00      	nop
 8006360:	3714      	adds	r7, #20
 8006362:	46bd      	mov	sp, r7
 8006364:	bc80      	pop	{r7}
 8006366:	4770      	bx	lr
 8006368:	40012c00 	.word	0x40012c00
 800636c:	40000400 	.word	0x40000400
 8006370:	40000800 	.word	0x40000800

08006374 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006374:	b480      	push	{r7}
 8006376:	b087      	sub	sp, #28
 8006378:	af00      	add	r7, sp, #0
 800637a:	60f8      	str	r0, [r7, #12]
 800637c:	60b9      	str	r1, [r7, #8]
 800637e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	f003 031f 	and.w	r3, r3, #31
 8006386:	2201      	movs	r2, #1
 8006388:	fa02 f303 	lsl.w	r3, r2, r3
 800638c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	6a1a      	ldr	r2, [r3, #32]
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	43db      	mvns	r3, r3
 8006396:	401a      	ands	r2, r3
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6a1a      	ldr	r2, [r3, #32]
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	f003 031f 	and.w	r3, r3, #31
 80063a6:	6879      	ldr	r1, [r7, #4]
 80063a8:	fa01 f303 	lsl.w	r3, r1, r3
 80063ac:	431a      	orrs	r2, r3
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	621a      	str	r2, [r3, #32]
}
 80063b2:	bf00      	nop
 80063b4:	371c      	adds	r7, #28
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bc80      	pop	{r7}
 80063ba:	4770      	bx	lr

080063bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063bc:	b480      	push	{r7}
 80063be:	b085      	sub	sp, #20
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d101      	bne.n	80063d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063d0:	2302      	movs	r3, #2
 80063d2:	e046      	b.n	8006462 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2202      	movs	r2, #2
 80063e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	68fa      	ldr	r2, [r7, #12]
 8006402:	4313      	orrs	r3, r2
 8006404:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	68fa      	ldr	r2, [r7, #12]
 800640c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a16      	ldr	r2, [pc, #88]	@ (800646c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d00e      	beq.n	8006436 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006420:	d009      	beq.n	8006436 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a12      	ldr	r2, [pc, #72]	@ (8006470 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d004      	beq.n	8006436 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a10      	ldr	r2, [pc, #64]	@ (8006474 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d10c      	bne.n	8006450 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800643c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	68ba      	ldr	r2, [r7, #8]
 8006444:	4313      	orrs	r3, r2
 8006446:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	68ba      	ldr	r2, [r7, #8]
 800644e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006460:	2300      	movs	r3, #0
}
 8006462:	4618      	mov	r0, r3
 8006464:	3714      	adds	r7, #20
 8006466:	46bd      	mov	sp, r7
 8006468:	bc80      	pop	{r7}
 800646a:	4770      	bx	lr
 800646c:	40012c00 	.word	0x40012c00
 8006470:	40000400 	.word	0x40000400
 8006474:	40000800 	.word	0x40000800

08006478 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006480:	bf00      	nop
 8006482:	370c      	adds	r7, #12
 8006484:	46bd      	mov	sp, r7
 8006486:	bc80      	pop	{r7}
 8006488:	4770      	bx	lr

0800648a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800648a:	b480      	push	{r7}
 800648c:	b083      	sub	sp, #12
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006492:	bf00      	nop
 8006494:	370c      	adds	r7, #12
 8006496:	46bd      	mov	sp, r7
 8006498:	bc80      	pop	{r7}
 800649a:	4770      	bx	lr

0800649c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b082      	sub	sp, #8
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d101      	bne.n	80064ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	e042      	b.n	8006534 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d106      	bne.n	80064c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f7fd f944 	bl	8003750 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2224      	movs	r2, #36	@ 0x24
 80064cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	68da      	ldr	r2, [r3, #12]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80064de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f000 ff4f 	bl	8007384 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	691a      	ldr	r2, [r3, #16]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80064f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	695a      	ldr	r2, [r3, #20]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006504:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	68da      	ldr	r2, [r3, #12]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006514:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2220      	movs	r2, #32
 8006520:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2220      	movs	r2, #32
 8006528:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006532:	2300      	movs	r3, #0
}
 8006534:	4618      	mov	r0, r3
 8006536:	3708      	adds	r7, #8
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b08a      	sub	sp, #40	@ 0x28
 8006540:	af02      	add	r7, sp, #8
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	60b9      	str	r1, [r7, #8]
 8006546:	603b      	str	r3, [r7, #0]
 8006548:	4613      	mov	r3, r2
 800654a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800654c:	2300      	movs	r3, #0
 800654e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006556:	b2db      	uxtb	r3, r3
 8006558:	2b20      	cmp	r3, #32
 800655a:	d175      	bne.n	8006648 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d002      	beq.n	8006568 <HAL_UART_Transmit+0x2c>
 8006562:	88fb      	ldrh	r3, [r7, #6]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d101      	bne.n	800656c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	e06e      	b.n	800664a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2200      	movs	r2, #0
 8006570:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2221      	movs	r2, #33	@ 0x21
 8006576:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800657a:	f7fd fa4f 	bl	8003a1c <HAL_GetTick>
 800657e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	88fa      	ldrh	r2, [r7, #6]
 8006584:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	88fa      	ldrh	r2, [r7, #6]
 800658a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006594:	d108      	bne.n	80065a8 <HAL_UART_Transmit+0x6c>
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	691b      	ldr	r3, [r3, #16]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d104      	bne.n	80065a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800659e:	2300      	movs	r3, #0
 80065a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	61bb      	str	r3, [r7, #24]
 80065a6:	e003      	b.n	80065b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80065ac:	2300      	movs	r3, #0
 80065ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80065b0:	e02e      	b.n	8006610 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	9300      	str	r3, [sp, #0]
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	2200      	movs	r2, #0
 80065ba:	2180      	movs	r1, #128	@ 0x80
 80065bc:	68f8      	ldr	r0, [r7, #12]
 80065be:	f000 fc2c 	bl	8006e1a <UART_WaitOnFlagUntilTimeout>
 80065c2:	4603      	mov	r3, r0
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d005      	beq.n	80065d4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2220      	movs	r2, #32
 80065cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80065d0:	2303      	movs	r3, #3
 80065d2:	e03a      	b.n	800664a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80065d4:	69fb      	ldr	r3, [r7, #28]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d10b      	bne.n	80065f2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80065da:	69bb      	ldr	r3, [r7, #24]
 80065dc:	881b      	ldrh	r3, [r3, #0]
 80065de:	461a      	mov	r2, r3
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80065ea:	69bb      	ldr	r3, [r7, #24]
 80065ec:	3302      	adds	r3, #2
 80065ee:	61bb      	str	r3, [r7, #24]
 80065f0:	e007      	b.n	8006602 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80065f2:	69fb      	ldr	r3, [r7, #28]
 80065f4:	781a      	ldrb	r2, [r3, #0]
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80065fc:	69fb      	ldr	r3, [r7, #28]
 80065fe:	3301      	adds	r3, #1
 8006600:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006606:	b29b      	uxth	r3, r3
 8006608:	3b01      	subs	r3, #1
 800660a:	b29a      	uxth	r2, r3
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006614:	b29b      	uxth	r3, r3
 8006616:	2b00      	cmp	r3, #0
 8006618:	d1cb      	bne.n	80065b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	9300      	str	r3, [sp, #0]
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	2200      	movs	r2, #0
 8006622:	2140      	movs	r1, #64	@ 0x40
 8006624:	68f8      	ldr	r0, [r7, #12]
 8006626:	f000 fbf8 	bl	8006e1a <UART_WaitOnFlagUntilTimeout>
 800662a:	4603      	mov	r3, r0
 800662c:	2b00      	cmp	r3, #0
 800662e:	d005      	beq.n	800663c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2220      	movs	r2, #32
 8006634:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006638:	2303      	movs	r3, #3
 800663a:	e006      	b.n	800664a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2220      	movs	r2, #32
 8006640:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006644:	2300      	movs	r3, #0
 8006646:	e000      	b.n	800664a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006648:	2302      	movs	r3, #2
  }
}
 800664a:	4618      	mov	r0, r3
 800664c:	3720      	adds	r7, #32
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}

08006652 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006652:	b580      	push	{r7, lr}
 8006654:	b084      	sub	sp, #16
 8006656:	af00      	add	r7, sp, #0
 8006658:	60f8      	str	r0, [r7, #12]
 800665a:	60b9      	str	r1, [r7, #8]
 800665c:	4613      	mov	r3, r2
 800665e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006666:	b2db      	uxtb	r3, r3
 8006668:	2b20      	cmp	r3, #32
 800666a:	d112      	bne.n	8006692 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d002      	beq.n	8006678 <HAL_UART_Receive_DMA+0x26>
 8006672:	88fb      	ldrh	r3, [r7, #6]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d101      	bne.n	800667c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	e00b      	b.n	8006694 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2200      	movs	r2, #0
 8006680:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006682:	88fb      	ldrh	r3, [r7, #6]
 8006684:	461a      	mov	r2, r3
 8006686:	68b9      	ldr	r1, [r7, #8]
 8006688:	68f8      	ldr	r0, [r7, #12]
 800668a:	f000 fc1f 	bl	8006ecc <UART_Start_Receive_DMA>
 800668e:	4603      	mov	r3, r0
 8006690:	e000      	b.n	8006694 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006692:	2302      	movs	r3, #2
  }
}
 8006694:	4618      	mov	r0, r3
 8006696:	3710      	adds	r7, #16
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b0ba      	sub	sp, #232	@ 0xe8
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	695b      	ldr	r3, [r3, #20]
 80066be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80066c2:	2300      	movs	r3, #0
 80066c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80066c8:	2300      	movs	r3, #0
 80066ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80066ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066d2:	f003 030f 	and.w	r3, r3, #15
 80066d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80066da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d10f      	bne.n	8006702 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80066e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066e6:	f003 0320 	and.w	r3, r3, #32
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d009      	beq.n	8006702 <HAL_UART_IRQHandler+0x66>
 80066ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066f2:	f003 0320 	and.w	r3, r3, #32
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d003      	beq.n	8006702 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 fd84 	bl	8007208 <UART_Receive_IT>
      return;
 8006700:	e25b      	b.n	8006bba <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006702:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006706:	2b00      	cmp	r3, #0
 8006708:	f000 80de 	beq.w	80068c8 <HAL_UART_IRQHandler+0x22c>
 800670c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006710:	f003 0301 	and.w	r3, r3, #1
 8006714:	2b00      	cmp	r3, #0
 8006716:	d106      	bne.n	8006726 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006718:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800671c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006720:	2b00      	cmp	r3, #0
 8006722:	f000 80d1 	beq.w	80068c8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800672a:	f003 0301 	and.w	r3, r3, #1
 800672e:	2b00      	cmp	r3, #0
 8006730:	d00b      	beq.n	800674a <HAL_UART_IRQHandler+0xae>
 8006732:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006736:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800673a:	2b00      	cmp	r3, #0
 800673c:	d005      	beq.n	800674a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006742:	f043 0201 	orr.w	r2, r3, #1
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800674a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800674e:	f003 0304 	and.w	r3, r3, #4
 8006752:	2b00      	cmp	r3, #0
 8006754:	d00b      	beq.n	800676e <HAL_UART_IRQHandler+0xd2>
 8006756:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800675a:	f003 0301 	and.w	r3, r3, #1
 800675e:	2b00      	cmp	r3, #0
 8006760:	d005      	beq.n	800676e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006766:	f043 0202 	orr.w	r2, r3, #2
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800676e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006772:	f003 0302 	and.w	r3, r3, #2
 8006776:	2b00      	cmp	r3, #0
 8006778:	d00b      	beq.n	8006792 <HAL_UART_IRQHandler+0xf6>
 800677a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800677e:	f003 0301 	and.w	r3, r3, #1
 8006782:	2b00      	cmp	r3, #0
 8006784:	d005      	beq.n	8006792 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800678a:	f043 0204 	orr.w	r2, r3, #4
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006796:	f003 0308 	and.w	r3, r3, #8
 800679a:	2b00      	cmp	r3, #0
 800679c:	d011      	beq.n	80067c2 <HAL_UART_IRQHandler+0x126>
 800679e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067a2:	f003 0320 	and.w	r3, r3, #32
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d105      	bne.n	80067b6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80067aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80067ae:	f003 0301 	and.w	r3, r3, #1
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d005      	beq.n	80067c2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067ba:	f043 0208 	orr.w	r2, r3, #8
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	f000 81f2 	beq.w	8006bb0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80067cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067d0:	f003 0320 	and.w	r3, r3, #32
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d008      	beq.n	80067ea <HAL_UART_IRQHandler+0x14e>
 80067d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067dc:	f003 0320 	and.w	r3, r3, #32
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d002      	beq.n	80067ea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 fd0f 	bl	8007208 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	695b      	ldr	r3, [r3, #20]
 80067f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	bf14      	ite	ne
 80067f8:	2301      	movne	r3, #1
 80067fa:	2300      	moveq	r3, #0
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006806:	f003 0308 	and.w	r3, r3, #8
 800680a:	2b00      	cmp	r3, #0
 800680c:	d103      	bne.n	8006816 <HAL_UART_IRQHandler+0x17a>
 800680e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006812:	2b00      	cmp	r3, #0
 8006814:	d04f      	beq.n	80068b6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 fc19 	bl	800704e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	695b      	ldr	r3, [r3, #20]
 8006822:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006826:	2b00      	cmp	r3, #0
 8006828:	d041      	beq.n	80068ae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	3314      	adds	r3, #20
 8006830:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006834:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006838:	e853 3f00 	ldrex	r3, [r3]
 800683c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006840:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006844:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006848:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	3314      	adds	r3, #20
 8006852:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006856:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800685a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800685e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006862:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006866:	e841 2300 	strex	r3, r2, [r1]
 800686a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800686e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006872:	2b00      	cmp	r3, #0
 8006874:	d1d9      	bne.n	800682a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800687a:	2b00      	cmp	r3, #0
 800687c:	d013      	beq.n	80068a6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006882:	4a7e      	ldr	r2, [pc, #504]	@ (8006a7c <HAL_UART_IRQHandler+0x3e0>)
 8006884:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800688a:	4618      	mov	r0, r3
 800688c:	f7fd faf8 	bl	8003e80 <HAL_DMA_Abort_IT>
 8006890:	4603      	mov	r3, r0
 8006892:	2b00      	cmp	r3, #0
 8006894:	d016      	beq.n	80068c4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800689a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80068a0:	4610      	mov	r0, r2
 80068a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068a4:	e00e      	b.n	80068c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 f9a5 	bl	8006bf6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068ac:	e00a      	b.n	80068c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 f9a1 	bl	8006bf6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068b4:	e006      	b.n	80068c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 f99d 	bl	8006bf6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80068c2:	e175      	b.n	8006bb0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068c4:	bf00      	nop
    return;
 80068c6:	e173      	b.n	8006bb0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	f040 814f 	bne.w	8006b70 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80068d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068d6:	f003 0310 	and.w	r3, r3, #16
 80068da:	2b00      	cmp	r3, #0
 80068dc:	f000 8148 	beq.w	8006b70 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80068e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068e4:	f003 0310 	and.w	r3, r3, #16
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	f000 8141 	beq.w	8006b70 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80068ee:	2300      	movs	r3, #0
 80068f0:	60bb      	str	r3, [r7, #8]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	60bb      	str	r3, [r7, #8]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	60bb      	str	r3, [r7, #8]
 8006902:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	695b      	ldr	r3, [r3, #20]
 800690a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800690e:	2b00      	cmp	r3, #0
 8006910:	f000 80b6 	beq.w	8006a80 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006920:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006924:	2b00      	cmp	r3, #0
 8006926:	f000 8145 	beq.w	8006bb4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800692e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006932:	429a      	cmp	r2, r3
 8006934:	f080 813e 	bcs.w	8006bb4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800693e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006944:	699b      	ldr	r3, [r3, #24]
 8006946:	2b20      	cmp	r3, #32
 8006948:	f000 8088 	beq.w	8006a5c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	330c      	adds	r3, #12
 8006952:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006956:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800695a:	e853 3f00 	ldrex	r3, [r3]
 800695e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006962:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006966:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800696a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	330c      	adds	r3, #12
 8006974:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006978:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800697c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006980:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006984:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006988:	e841 2300 	strex	r3, r2, [r1]
 800698c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006990:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006994:	2b00      	cmp	r3, #0
 8006996:	d1d9      	bne.n	800694c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	3314      	adds	r3, #20
 800699e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80069a2:	e853 3f00 	ldrex	r3, [r3]
 80069a6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80069a8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80069aa:	f023 0301 	bic.w	r3, r3, #1
 80069ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	3314      	adds	r3, #20
 80069b8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80069bc:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80069c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80069c4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80069c8:	e841 2300 	strex	r3, r2, [r1]
 80069cc:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80069ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d1e1      	bne.n	8006998 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	3314      	adds	r3, #20
 80069da:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80069de:	e853 3f00 	ldrex	r3, [r3]
 80069e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80069e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80069e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	3314      	adds	r3, #20
 80069f4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80069f8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80069fa:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069fc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80069fe:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006a00:	e841 2300 	strex	r3, r2, [r1]
 8006a04:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006a06:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d1e3      	bne.n	80069d4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2220      	movs	r2, #32
 8006a10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2200      	movs	r2, #0
 8006a18:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	330c      	adds	r3, #12
 8006a20:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a24:	e853 3f00 	ldrex	r3, [r3]
 8006a28:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006a2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a2c:	f023 0310 	bic.w	r3, r3, #16
 8006a30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	330c      	adds	r3, #12
 8006a3a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006a3e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006a40:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a42:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006a44:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006a46:	e841 2300 	strex	r3, r2, [r1]
 8006a4a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006a4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d1e3      	bne.n	8006a1a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a56:	4618      	mov	r0, r3
 8006a58:	f7fd f9d6 	bl	8003e08 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2202      	movs	r2, #2
 8006a60:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	1ad3      	subs	r3, r2, r3
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	4619      	mov	r1, r3
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 f8c8 	bl	8006c08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006a78:	e09c      	b.n	8006bb4 <HAL_UART_IRQHandler+0x518>
 8006a7a:	bf00      	nop
 8006a7c:	08007113 	.word	0x08007113
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	1ad3      	subs	r3, r2, r3
 8006a8c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	f000 808e 	beq.w	8006bb8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006a9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	f000 8089 	beq.w	8006bb8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	330c      	adds	r3, #12
 8006aac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ab0:	e853 3f00 	ldrex	r3, [r3]
 8006ab4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006ab6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ab8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006abc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	330c      	adds	r3, #12
 8006ac6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006aca:	647a      	str	r2, [r7, #68]	@ 0x44
 8006acc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ace:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006ad0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ad2:	e841 2300 	strex	r3, r2, [r1]
 8006ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006ad8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d1e3      	bne.n	8006aa6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	3314      	adds	r3, #20
 8006ae4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae8:	e853 3f00 	ldrex	r3, [r3]
 8006aec:	623b      	str	r3, [r7, #32]
   return(result);
 8006aee:	6a3b      	ldr	r3, [r7, #32]
 8006af0:	f023 0301 	bic.w	r3, r3, #1
 8006af4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	3314      	adds	r3, #20
 8006afe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006b02:	633a      	str	r2, [r7, #48]	@ 0x30
 8006b04:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b0a:	e841 2300 	strex	r3, r2, [r1]
 8006b0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d1e3      	bne.n	8006ade <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2220      	movs	r2, #32
 8006b1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	330c      	adds	r3, #12
 8006b2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	e853 3f00 	ldrex	r3, [r3]
 8006b32:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f023 0310 	bic.w	r3, r3, #16
 8006b3a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	330c      	adds	r3, #12
 8006b44:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006b48:	61fa      	str	r2, [r7, #28]
 8006b4a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b4c:	69b9      	ldr	r1, [r7, #24]
 8006b4e:	69fa      	ldr	r2, [r7, #28]
 8006b50:	e841 2300 	strex	r3, r2, [r1]
 8006b54:	617b      	str	r3, [r7, #20]
   return(result);
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d1e3      	bne.n	8006b24 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2202      	movs	r2, #2
 8006b60:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006b62:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006b66:	4619      	mov	r1, r3
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f000 f84d 	bl	8006c08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006b6e:	e023      	b.n	8006bb8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006b70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d009      	beq.n	8006b90 <HAL_UART_IRQHandler+0x4f4>
 8006b7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d003      	beq.n	8006b90 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f000 fad6 	bl	800713a <UART_Transmit_IT>
    return;
 8006b8e:	e014      	b.n	8006bba <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006b90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d00e      	beq.n	8006bba <HAL_UART_IRQHandler+0x51e>
 8006b9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ba0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d008      	beq.n	8006bba <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f000 fb15 	bl	80071d8 <UART_EndTransmit_IT>
    return;
 8006bae:	e004      	b.n	8006bba <HAL_UART_IRQHandler+0x51e>
    return;
 8006bb0:	bf00      	nop
 8006bb2:	e002      	b.n	8006bba <HAL_UART_IRQHandler+0x51e>
      return;
 8006bb4:	bf00      	nop
 8006bb6:	e000      	b.n	8006bba <HAL_UART_IRQHandler+0x51e>
      return;
 8006bb8:	bf00      	nop
  }
}
 8006bba:	37e8      	adds	r7, #232	@ 0xe8
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}

08006bc0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006bc8:	bf00      	nop
 8006bca:	370c      	adds	r7, #12
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bc80      	pop	{r7}
 8006bd0:	4770      	bx	lr

08006bd2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006bd2:	b480      	push	{r7}
 8006bd4:	b083      	sub	sp, #12
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006bda:	bf00      	nop
 8006bdc:	370c      	adds	r7, #12
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bc80      	pop	{r7}
 8006be2:	4770      	bx	lr

08006be4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006bec:	bf00      	nop
 8006bee:	370c      	adds	r7, #12
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bc80      	pop	{r7}
 8006bf4:	4770      	bx	lr

08006bf6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006bf6:	b480      	push	{r7}
 8006bf8:	b083      	sub	sp, #12
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006bfe:	bf00      	nop
 8006c00:	370c      	adds	r7, #12
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bc80      	pop	{r7}
 8006c06:	4770      	bx	lr

08006c08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	460b      	mov	r3, r1
 8006c12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006c14:	bf00      	nop
 8006c16:	370c      	adds	r7, #12
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bc80      	pop	{r7}
 8006c1c:	4770      	bx	lr

08006c1e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006c1e:	b580      	push	{r7, lr}
 8006c20:	b09c      	sub	sp, #112	@ 0x70
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c2a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f003 0320 	and.w	r3, r3, #32
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d172      	bne.n	8006d20 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006c3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	330c      	adds	r3, #12
 8006c46:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c4a:	e853 3f00 	ldrex	r3, [r3]
 8006c4e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006c50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c52:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c56:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006c58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	330c      	adds	r3, #12
 8006c5e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006c60:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006c62:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c64:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006c66:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006c68:	e841 2300 	strex	r3, r2, [r1]
 8006c6c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006c6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d1e5      	bne.n	8006c40 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	3314      	adds	r3, #20
 8006c7a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c7e:	e853 3f00 	ldrex	r3, [r3]
 8006c82:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006c84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c86:	f023 0301 	bic.w	r3, r3, #1
 8006c8a:	667b      	str	r3, [r7, #100]	@ 0x64
 8006c8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	3314      	adds	r3, #20
 8006c92:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006c94:	647a      	str	r2, [r7, #68]	@ 0x44
 8006c96:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c98:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006c9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c9c:	e841 2300 	strex	r3, r2, [r1]
 8006ca0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006ca2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d1e5      	bne.n	8006c74 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ca8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	3314      	adds	r3, #20
 8006cae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cb2:	e853 3f00 	ldrex	r3, [r3]
 8006cb6:	623b      	str	r3, [r7, #32]
   return(result);
 8006cb8:	6a3b      	ldr	r3, [r7, #32]
 8006cba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006cbe:	663b      	str	r3, [r7, #96]	@ 0x60
 8006cc0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	3314      	adds	r3, #20
 8006cc6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006cc8:	633a      	str	r2, [r7, #48]	@ 0x30
 8006cca:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ccc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006cce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cd0:	e841 2300 	strex	r3, r2, [r1]
 8006cd4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d1e5      	bne.n	8006ca8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006cdc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006cde:	2220      	movs	r2, #32
 8006ce0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ce4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d119      	bne.n	8006d20 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	330c      	adds	r3, #12
 8006cf2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	e853 3f00 	ldrex	r3, [r3]
 8006cfa:	60fb      	str	r3, [r7, #12]
   return(result);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f023 0310 	bic.w	r3, r3, #16
 8006d02:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006d04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	330c      	adds	r3, #12
 8006d0a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006d0c:	61fa      	str	r2, [r7, #28]
 8006d0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d10:	69b9      	ldr	r1, [r7, #24]
 8006d12:	69fa      	ldr	r2, [r7, #28]
 8006d14:	e841 2300 	strex	r3, r2, [r1]
 8006d18:	617b      	str	r3, [r7, #20]
   return(result);
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d1e5      	bne.n	8006cec <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d22:	2200      	movs	r2, #0
 8006d24:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d106      	bne.n	8006d3c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d30:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006d32:	4619      	mov	r1, r3
 8006d34:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006d36:	f7ff ff67 	bl	8006c08 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006d3a:	e002      	b.n	8006d42 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006d3c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006d3e:	f7ff ff48 	bl	8006bd2 <HAL_UART_RxCpltCallback>
}
 8006d42:	bf00      	nop
 8006d44:	3770      	adds	r7, #112	@ 0x70
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}

08006d4a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006d4a:	b580      	push	{r7, lr}
 8006d4c:	b084      	sub	sp, #16
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d56:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	d108      	bne.n	8006d78 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006d6a:	085b      	lsrs	r3, r3, #1
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	4619      	mov	r1, r3
 8006d70:	68f8      	ldr	r0, [r7, #12]
 8006d72:	f7ff ff49 	bl	8006c08 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006d76:	e002      	b.n	8006d7e <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006d78:	68f8      	ldr	r0, [r7, #12]
 8006d7a:	f7ff ff33 	bl	8006be4 <HAL_UART_RxHalfCpltCallback>
}
 8006d7e:	bf00      	nop
 8006d80:	3710      	adds	r7, #16
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}

08006d86 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006d86:	b580      	push	{r7, lr}
 8006d88:	b084      	sub	sp, #16
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d96:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	695b      	ldr	r3, [r3, #20]
 8006d9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	bf14      	ite	ne
 8006da6:	2301      	movne	r3, #1
 8006da8:	2300      	moveq	r3, #0
 8006daa:	b2db      	uxtb	r3, r3
 8006dac:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	2b21      	cmp	r3, #33	@ 0x21
 8006db8:	d108      	bne.n	8006dcc <UART_DMAError+0x46>
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d005      	beq.n	8006dcc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006dc6:	68b8      	ldr	r0, [r7, #8]
 8006dc8:	f000 f91a 	bl	8007000 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	695b      	ldr	r3, [r3, #20]
 8006dd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	bf14      	ite	ne
 8006dda:	2301      	movne	r3, #1
 8006ddc:	2300      	moveq	r3, #0
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	2b22      	cmp	r3, #34	@ 0x22
 8006dec:	d108      	bne.n	8006e00 <UART_DMAError+0x7a>
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d005      	beq.n	8006e00 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	2200      	movs	r2, #0
 8006df8:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006dfa:	68b8      	ldr	r0, [r7, #8]
 8006dfc:	f000 f927 	bl	800704e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e04:	f043 0210 	orr.w	r2, r3, #16
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e0c:	68b8      	ldr	r0, [r7, #8]
 8006e0e:	f7ff fef2 	bl	8006bf6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e12:	bf00      	nop
 8006e14:	3710      	adds	r7, #16
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}

08006e1a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006e1a:	b580      	push	{r7, lr}
 8006e1c:	b086      	sub	sp, #24
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	60f8      	str	r0, [r7, #12]
 8006e22:	60b9      	str	r1, [r7, #8]
 8006e24:	603b      	str	r3, [r7, #0]
 8006e26:	4613      	mov	r3, r2
 8006e28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e2a:	e03b      	b.n	8006ea4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e2c:	6a3b      	ldr	r3, [r7, #32]
 8006e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e32:	d037      	beq.n	8006ea4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e34:	f7fc fdf2 	bl	8003a1c <HAL_GetTick>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	1ad3      	subs	r3, r2, r3
 8006e3e:	6a3a      	ldr	r2, [r7, #32]
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d302      	bcc.n	8006e4a <UART_WaitOnFlagUntilTimeout+0x30>
 8006e44:	6a3b      	ldr	r3, [r7, #32]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d101      	bne.n	8006e4e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006e4a:	2303      	movs	r3, #3
 8006e4c:	e03a      	b.n	8006ec4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	f003 0304 	and.w	r3, r3, #4
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d023      	beq.n	8006ea4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	2b80      	cmp	r3, #128	@ 0x80
 8006e60:	d020      	beq.n	8006ea4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	2b40      	cmp	r3, #64	@ 0x40
 8006e66:	d01d      	beq.n	8006ea4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f003 0308 	and.w	r3, r3, #8
 8006e72:	2b08      	cmp	r3, #8
 8006e74:	d116      	bne.n	8006ea4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006e76:	2300      	movs	r3, #0
 8006e78:	617b      	str	r3, [r7, #20]
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	617b      	str	r3, [r7, #20]
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	617b      	str	r3, [r7, #20]
 8006e8a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e8c:	68f8      	ldr	r0, [r7, #12]
 8006e8e:	f000 f8de 	bl	800704e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2208      	movs	r2, #8
 8006e96:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	e00f      	b.n	8006ec4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	4013      	ands	r3, r2
 8006eae:	68ba      	ldr	r2, [r7, #8]
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	bf0c      	ite	eq
 8006eb4:	2301      	moveq	r3, #1
 8006eb6:	2300      	movne	r3, #0
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	461a      	mov	r2, r3
 8006ebc:	79fb      	ldrb	r3, [r7, #7]
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	d0b4      	beq.n	8006e2c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ec2:	2300      	movs	r3, #0
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3718      	adds	r7, #24
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b098      	sub	sp, #96	@ 0x60
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	60f8      	str	r0, [r7, #12]
 8006ed4:	60b9      	str	r1, [r7, #8]
 8006ed6:	4613      	mov	r3, r2
 8006ed8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006eda:	68ba      	ldr	r2, [r7, #8]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	88fa      	ldrh	r2, [r7, #6]
 8006ee4:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2222      	movs	r2, #34	@ 0x22
 8006ef0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ef8:	4a3e      	ldr	r2, [pc, #248]	@ (8006ff4 <UART_Start_Receive_DMA+0x128>)
 8006efa:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f00:	4a3d      	ldr	r2, [pc, #244]	@ (8006ff8 <UART_Start_Receive_DMA+0x12c>)
 8006f02:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f08:	4a3c      	ldr	r2, [pc, #240]	@ (8006ffc <UART_Start_Receive_DMA+0x130>)
 8006f0a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f10:	2200      	movs	r2, #0
 8006f12:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006f14:	f107 0308 	add.w	r3, r7, #8
 8006f18:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	3304      	adds	r3, #4
 8006f24:	4619      	mov	r1, r3
 8006f26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	88fb      	ldrh	r3, [r7, #6]
 8006f2c:	f7fc ff0c 	bl	8003d48 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006f30:	2300      	movs	r3, #0
 8006f32:	613b      	str	r3, [r7, #16]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	613b      	str	r3, [r7, #16]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	613b      	str	r3, [r7, #16]
 8006f44:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	691b      	ldr	r3, [r3, #16]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d019      	beq.n	8006f82 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	330c      	adds	r3, #12
 8006f54:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f58:	e853 3f00 	ldrex	r3, [r3]
 8006f5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006f5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f64:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	330c      	adds	r3, #12
 8006f6c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006f6e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006f70:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f72:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006f74:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006f76:	e841 2300 	strex	r3, r2, [r1]
 8006f7a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006f7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d1e5      	bne.n	8006f4e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	3314      	adds	r3, #20
 8006f88:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f8c:	e853 3f00 	ldrex	r3, [r3]
 8006f90:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f94:	f043 0301 	orr.w	r3, r3, #1
 8006f98:	657b      	str	r3, [r7, #84]	@ 0x54
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	3314      	adds	r3, #20
 8006fa0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006fa2:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006fa4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006fa8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006faa:	e841 2300 	strex	r3, r2, [r1]
 8006fae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d1e5      	bne.n	8006f82 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	3314      	adds	r3, #20
 8006fbc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fbe:	69bb      	ldr	r3, [r7, #24]
 8006fc0:	e853 3f00 	ldrex	r3, [r3]
 8006fc4:	617b      	str	r3, [r7, #20]
   return(result);
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006fcc:	653b      	str	r3, [r7, #80]	@ 0x50
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	3314      	adds	r3, #20
 8006fd4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006fd6:	627a      	str	r2, [r7, #36]	@ 0x24
 8006fd8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fda:	6a39      	ldr	r1, [r7, #32]
 8006fdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fde:	e841 2300 	strex	r3, r2, [r1]
 8006fe2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006fe4:	69fb      	ldr	r3, [r7, #28]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d1e5      	bne.n	8006fb6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006fea:	2300      	movs	r3, #0
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3760      	adds	r7, #96	@ 0x60
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}
 8006ff4:	08006c1f 	.word	0x08006c1f
 8006ff8:	08006d4b 	.word	0x08006d4b
 8006ffc:	08006d87 	.word	0x08006d87

08007000 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007000:	b480      	push	{r7}
 8007002:	b089      	sub	sp, #36	@ 0x24
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	330c      	adds	r3, #12
 800700e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	e853 3f00 	ldrex	r3, [r3]
 8007016:	60bb      	str	r3, [r7, #8]
   return(result);
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800701e:	61fb      	str	r3, [r7, #28]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	330c      	adds	r3, #12
 8007026:	69fa      	ldr	r2, [r7, #28]
 8007028:	61ba      	str	r2, [r7, #24]
 800702a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800702c:	6979      	ldr	r1, [r7, #20]
 800702e:	69ba      	ldr	r2, [r7, #24]
 8007030:	e841 2300 	strex	r3, r2, [r1]
 8007034:	613b      	str	r3, [r7, #16]
   return(result);
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d1e5      	bne.n	8007008 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2220      	movs	r2, #32
 8007040:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8007044:	bf00      	nop
 8007046:	3724      	adds	r7, #36	@ 0x24
 8007048:	46bd      	mov	sp, r7
 800704a:	bc80      	pop	{r7}
 800704c:	4770      	bx	lr

0800704e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800704e:	b480      	push	{r7}
 8007050:	b095      	sub	sp, #84	@ 0x54
 8007052:	af00      	add	r7, sp, #0
 8007054:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	330c      	adds	r3, #12
 800705c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800705e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007060:	e853 3f00 	ldrex	r3, [r3]
 8007064:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007068:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800706c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	330c      	adds	r3, #12
 8007074:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007076:	643a      	str	r2, [r7, #64]	@ 0x40
 8007078:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800707a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800707c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800707e:	e841 2300 	strex	r3, r2, [r1]
 8007082:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007086:	2b00      	cmp	r3, #0
 8007088:	d1e5      	bne.n	8007056 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	3314      	adds	r3, #20
 8007090:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007092:	6a3b      	ldr	r3, [r7, #32]
 8007094:	e853 3f00 	ldrex	r3, [r3]
 8007098:	61fb      	str	r3, [r7, #28]
   return(result);
 800709a:	69fb      	ldr	r3, [r7, #28]
 800709c:	f023 0301 	bic.w	r3, r3, #1
 80070a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	3314      	adds	r3, #20
 80070a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80070aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80070ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80070b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070b2:	e841 2300 	strex	r3, r2, [r1]
 80070b6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80070b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d1e5      	bne.n	800708a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070c2:	2b01      	cmp	r3, #1
 80070c4:	d119      	bne.n	80070fa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	330c      	adds	r3, #12
 80070cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	e853 3f00 	ldrex	r3, [r3]
 80070d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	f023 0310 	bic.w	r3, r3, #16
 80070dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	330c      	adds	r3, #12
 80070e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80070e6:	61ba      	str	r2, [r7, #24]
 80070e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ea:	6979      	ldr	r1, [r7, #20]
 80070ec:	69ba      	ldr	r2, [r7, #24]
 80070ee:	e841 2300 	strex	r3, r2, [r1]
 80070f2:	613b      	str	r3, [r7, #16]
   return(result);
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d1e5      	bne.n	80070c6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2220      	movs	r2, #32
 80070fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2200      	movs	r2, #0
 8007106:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007108:	bf00      	nop
 800710a:	3754      	adds	r7, #84	@ 0x54
 800710c:	46bd      	mov	sp, r7
 800710e:	bc80      	pop	{r7}
 8007110:	4770      	bx	lr

08007112 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007112:	b580      	push	{r7, lr}
 8007114:	b084      	sub	sp, #16
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800711e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2200      	movs	r2, #0
 8007124:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2200      	movs	r2, #0
 800712a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800712c:	68f8      	ldr	r0, [r7, #12]
 800712e:	f7ff fd62 	bl	8006bf6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007132:	bf00      	nop
 8007134:	3710      	adds	r7, #16
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}

0800713a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800713a:	b480      	push	{r7}
 800713c:	b085      	sub	sp, #20
 800713e:	af00      	add	r7, sp, #0
 8007140:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007148:	b2db      	uxtb	r3, r3
 800714a:	2b21      	cmp	r3, #33	@ 0x21
 800714c:	d13e      	bne.n	80071cc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007156:	d114      	bne.n	8007182 <UART_Transmit_IT+0x48>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	691b      	ldr	r3, [r3, #16]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d110      	bne.n	8007182 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6a1b      	ldr	r3, [r3, #32]
 8007164:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	881b      	ldrh	r3, [r3, #0]
 800716a:	461a      	mov	r2, r3
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007174:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6a1b      	ldr	r3, [r3, #32]
 800717a:	1c9a      	adds	r2, r3, #2
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	621a      	str	r2, [r3, #32]
 8007180:	e008      	b.n	8007194 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6a1b      	ldr	r3, [r3, #32]
 8007186:	1c59      	adds	r1, r3, #1
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	6211      	str	r1, [r2, #32]
 800718c:	781a      	ldrb	r2, [r3, #0]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007198:	b29b      	uxth	r3, r3
 800719a:	3b01      	subs	r3, #1
 800719c:	b29b      	uxth	r3, r3
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	4619      	mov	r1, r3
 80071a2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d10f      	bne.n	80071c8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	68da      	ldr	r2, [r3, #12]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80071b6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	68da      	ldr	r2, [r3, #12]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80071c6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80071c8:	2300      	movs	r3, #0
 80071ca:	e000      	b.n	80071ce <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80071cc:	2302      	movs	r3, #2
  }
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3714      	adds	r7, #20
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bc80      	pop	{r7}
 80071d6:	4770      	bx	lr

080071d8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b082      	sub	sp, #8
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	68da      	ldr	r2, [r3, #12]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80071ee:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2220      	movs	r2, #32
 80071f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f7ff fce1 	bl	8006bc0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80071fe:	2300      	movs	r3, #0
}
 8007200:	4618      	mov	r0, r3
 8007202:	3708      	adds	r7, #8
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b08c      	sub	sp, #48	@ 0x30
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007216:	b2db      	uxtb	r3, r3
 8007218:	2b22      	cmp	r3, #34	@ 0x22
 800721a:	f040 80ae 	bne.w	800737a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007226:	d117      	bne.n	8007258 <UART_Receive_IT+0x50>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	691b      	ldr	r3, [r3, #16]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d113      	bne.n	8007258 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007230:	2300      	movs	r3, #0
 8007232:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007238:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	b29b      	uxth	r3, r3
 8007242:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007246:	b29a      	uxth	r2, r3
 8007248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800724a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007250:	1c9a      	adds	r2, r3, #2
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	629a      	str	r2, [r3, #40]	@ 0x28
 8007256:	e026      	b.n	80072a6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800725c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800725e:	2300      	movs	r3, #0
 8007260:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800726a:	d007      	beq.n	800727c <UART_Receive_IT+0x74>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d10a      	bne.n	800728a <UART_Receive_IT+0x82>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	691b      	ldr	r3, [r3, #16]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d106      	bne.n	800728a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	b2da      	uxtb	r2, r3
 8007284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007286:	701a      	strb	r2, [r3, #0]
 8007288:	e008      	b.n	800729c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	b2db      	uxtb	r3, r3
 8007292:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007296:	b2da      	uxtb	r2, r3
 8007298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800729a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072a0:	1c5a      	adds	r2, r3, #1
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	3b01      	subs	r3, #1
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	687a      	ldr	r2, [r7, #4]
 80072b2:	4619      	mov	r1, r3
 80072b4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d15d      	bne.n	8007376 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	68da      	ldr	r2, [r3, #12]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f022 0220 	bic.w	r2, r2, #32
 80072c8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	68da      	ldr	r2, [r3, #12]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80072d8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	695a      	ldr	r2, [r3, #20]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f022 0201 	bic.w	r2, r2, #1
 80072e8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2220      	movs	r2, #32
 80072ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2200      	movs	r2, #0
 80072f6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d135      	bne.n	800736c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2200      	movs	r2, #0
 8007304:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	330c      	adds	r3, #12
 800730c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	e853 3f00 	ldrex	r3, [r3]
 8007314:	613b      	str	r3, [r7, #16]
   return(result);
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	f023 0310 	bic.w	r3, r3, #16
 800731c:	627b      	str	r3, [r7, #36]	@ 0x24
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	330c      	adds	r3, #12
 8007324:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007326:	623a      	str	r2, [r7, #32]
 8007328:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800732a:	69f9      	ldr	r1, [r7, #28]
 800732c:	6a3a      	ldr	r2, [r7, #32]
 800732e:	e841 2300 	strex	r3, r2, [r1]
 8007332:	61bb      	str	r3, [r7, #24]
   return(result);
 8007334:	69bb      	ldr	r3, [r7, #24]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d1e5      	bne.n	8007306 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f003 0310 	and.w	r3, r3, #16
 8007344:	2b10      	cmp	r3, #16
 8007346:	d10a      	bne.n	800735e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007348:	2300      	movs	r3, #0
 800734a:	60fb      	str	r3, [r7, #12]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	60fb      	str	r3, [r7, #12]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	60fb      	str	r3, [r7, #12]
 800735c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007362:	4619      	mov	r1, r3
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f7ff fc4f 	bl	8006c08 <HAL_UARTEx_RxEventCallback>
 800736a:	e002      	b.n	8007372 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f7ff fc30 	bl	8006bd2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007372:	2300      	movs	r3, #0
 8007374:	e002      	b.n	800737c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007376:	2300      	movs	r3, #0
 8007378:	e000      	b.n	800737c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800737a:	2302      	movs	r3, #2
  }
}
 800737c:	4618      	mov	r0, r3
 800737e:	3730      	adds	r7, #48	@ 0x30
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b084      	sub	sp, #16
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	691b      	ldr	r3, [r3, #16]
 8007392:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	68da      	ldr	r2, [r3, #12]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	430a      	orrs	r2, r1
 80073a0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	689a      	ldr	r2, [r3, #8]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	691b      	ldr	r3, [r3, #16]
 80073aa:	431a      	orrs	r2, r3
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	695b      	ldr	r3, [r3, #20]
 80073b0:	4313      	orrs	r3, r2
 80073b2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	68db      	ldr	r3, [r3, #12]
 80073ba:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80073be:	f023 030c 	bic.w	r3, r3, #12
 80073c2:	687a      	ldr	r2, [r7, #4]
 80073c4:	6812      	ldr	r2, [r2, #0]
 80073c6:	68b9      	ldr	r1, [r7, #8]
 80073c8:	430b      	orrs	r3, r1
 80073ca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	695b      	ldr	r3, [r3, #20]
 80073d2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	699a      	ldr	r2, [r3, #24]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	430a      	orrs	r2, r1
 80073e0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a2c      	ldr	r2, [pc, #176]	@ (8007498 <UART_SetConfig+0x114>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d103      	bne.n	80073f4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80073ec:	f7fe fcd4 	bl	8005d98 <HAL_RCC_GetPCLK2Freq>
 80073f0:	60f8      	str	r0, [r7, #12]
 80073f2:	e002      	b.n	80073fa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80073f4:	f7fe fcbc 	bl	8005d70 <HAL_RCC_GetPCLK1Freq>
 80073f8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80073fa:	68fa      	ldr	r2, [r7, #12]
 80073fc:	4613      	mov	r3, r2
 80073fe:	009b      	lsls	r3, r3, #2
 8007400:	4413      	add	r3, r2
 8007402:	009a      	lsls	r2, r3, #2
 8007404:	441a      	add	r2, r3
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	009b      	lsls	r3, r3, #2
 800740c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007410:	4a22      	ldr	r2, [pc, #136]	@ (800749c <UART_SetConfig+0x118>)
 8007412:	fba2 2303 	umull	r2, r3, r2, r3
 8007416:	095b      	lsrs	r3, r3, #5
 8007418:	0119      	lsls	r1, r3, #4
 800741a:	68fa      	ldr	r2, [r7, #12]
 800741c:	4613      	mov	r3, r2
 800741e:	009b      	lsls	r3, r3, #2
 8007420:	4413      	add	r3, r2
 8007422:	009a      	lsls	r2, r3, #2
 8007424:	441a      	add	r2, r3
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	009b      	lsls	r3, r3, #2
 800742c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007430:	4b1a      	ldr	r3, [pc, #104]	@ (800749c <UART_SetConfig+0x118>)
 8007432:	fba3 0302 	umull	r0, r3, r3, r2
 8007436:	095b      	lsrs	r3, r3, #5
 8007438:	2064      	movs	r0, #100	@ 0x64
 800743a:	fb00 f303 	mul.w	r3, r0, r3
 800743e:	1ad3      	subs	r3, r2, r3
 8007440:	011b      	lsls	r3, r3, #4
 8007442:	3332      	adds	r3, #50	@ 0x32
 8007444:	4a15      	ldr	r2, [pc, #84]	@ (800749c <UART_SetConfig+0x118>)
 8007446:	fba2 2303 	umull	r2, r3, r2, r3
 800744a:	095b      	lsrs	r3, r3, #5
 800744c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007450:	4419      	add	r1, r3
 8007452:	68fa      	ldr	r2, [r7, #12]
 8007454:	4613      	mov	r3, r2
 8007456:	009b      	lsls	r3, r3, #2
 8007458:	4413      	add	r3, r2
 800745a:	009a      	lsls	r2, r3, #2
 800745c:	441a      	add	r2, r3
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	fbb2 f2f3 	udiv	r2, r2, r3
 8007468:	4b0c      	ldr	r3, [pc, #48]	@ (800749c <UART_SetConfig+0x118>)
 800746a:	fba3 0302 	umull	r0, r3, r3, r2
 800746e:	095b      	lsrs	r3, r3, #5
 8007470:	2064      	movs	r0, #100	@ 0x64
 8007472:	fb00 f303 	mul.w	r3, r0, r3
 8007476:	1ad3      	subs	r3, r2, r3
 8007478:	011b      	lsls	r3, r3, #4
 800747a:	3332      	adds	r3, #50	@ 0x32
 800747c:	4a07      	ldr	r2, [pc, #28]	@ (800749c <UART_SetConfig+0x118>)
 800747e:	fba2 2303 	umull	r2, r3, r2, r3
 8007482:	095b      	lsrs	r3, r3, #5
 8007484:	f003 020f 	and.w	r2, r3, #15
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	440a      	add	r2, r1
 800748e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007490:	bf00      	nop
 8007492:	3710      	adds	r7, #16
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}
 8007498:	40013800 	.word	0x40013800
 800749c:	51eb851f 	.word	0x51eb851f

080074a0 <sulp>:
 80074a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074a4:	460f      	mov	r7, r1
 80074a6:	4690      	mov	r8, r2
 80074a8:	f003 fd8e 	bl	800afc8 <__ulp>
 80074ac:	4604      	mov	r4, r0
 80074ae:	460d      	mov	r5, r1
 80074b0:	f1b8 0f00 	cmp.w	r8, #0
 80074b4:	d011      	beq.n	80074da <sulp+0x3a>
 80074b6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80074ba:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80074be:	2b00      	cmp	r3, #0
 80074c0:	dd0b      	ble.n	80074da <sulp+0x3a>
 80074c2:	2400      	movs	r4, #0
 80074c4:	051b      	lsls	r3, r3, #20
 80074c6:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80074ca:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80074ce:	4622      	mov	r2, r4
 80074d0:	462b      	mov	r3, r5
 80074d2:	f7f9 f80b 	bl	80004ec <__aeabi_dmul>
 80074d6:	4604      	mov	r4, r0
 80074d8:	460d      	mov	r5, r1
 80074da:	4620      	mov	r0, r4
 80074dc:	4629      	mov	r1, r5
 80074de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074e2:	0000      	movs	r0, r0
 80074e4:	0000      	movs	r0, r0
	...

080074e8 <_strtod_l>:
 80074e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074ec:	b09f      	sub	sp, #124	@ 0x7c
 80074ee:	9217      	str	r2, [sp, #92]	@ 0x5c
 80074f0:	2200      	movs	r2, #0
 80074f2:	460c      	mov	r4, r1
 80074f4:	921a      	str	r2, [sp, #104]	@ 0x68
 80074f6:	f04f 0a00 	mov.w	sl, #0
 80074fa:	f04f 0b00 	mov.w	fp, #0
 80074fe:	460a      	mov	r2, r1
 8007500:	9005      	str	r0, [sp, #20]
 8007502:	9219      	str	r2, [sp, #100]	@ 0x64
 8007504:	7811      	ldrb	r1, [r2, #0]
 8007506:	292b      	cmp	r1, #43	@ 0x2b
 8007508:	d048      	beq.n	800759c <_strtod_l+0xb4>
 800750a:	d836      	bhi.n	800757a <_strtod_l+0x92>
 800750c:	290d      	cmp	r1, #13
 800750e:	d830      	bhi.n	8007572 <_strtod_l+0x8a>
 8007510:	2908      	cmp	r1, #8
 8007512:	d830      	bhi.n	8007576 <_strtod_l+0x8e>
 8007514:	2900      	cmp	r1, #0
 8007516:	d039      	beq.n	800758c <_strtod_l+0xa4>
 8007518:	2200      	movs	r2, #0
 800751a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800751c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800751e:	782a      	ldrb	r2, [r5, #0]
 8007520:	2a30      	cmp	r2, #48	@ 0x30
 8007522:	f040 80b1 	bne.w	8007688 <_strtod_l+0x1a0>
 8007526:	786a      	ldrb	r2, [r5, #1]
 8007528:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800752c:	2a58      	cmp	r2, #88	@ 0x58
 800752e:	d16c      	bne.n	800760a <_strtod_l+0x122>
 8007530:	9302      	str	r3, [sp, #8]
 8007532:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007534:	4a8e      	ldr	r2, [pc, #568]	@ (8007770 <_strtod_l+0x288>)
 8007536:	9301      	str	r3, [sp, #4]
 8007538:	ab1a      	add	r3, sp, #104	@ 0x68
 800753a:	9300      	str	r3, [sp, #0]
 800753c:	9805      	ldr	r0, [sp, #20]
 800753e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007540:	a919      	add	r1, sp, #100	@ 0x64
 8007542:	f002 fe35 	bl	800a1b0 <__gethex>
 8007546:	f010 060f 	ands.w	r6, r0, #15
 800754a:	4604      	mov	r4, r0
 800754c:	d005      	beq.n	800755a <_strtod_l+0x72>
 800754e:	2e06      	cmp	r6, #6
 8007550:	d126      	bne.n	80075a0 <_strtod_l+0xb8>
 8007552:	2300      	movs	r3, #0
 8007554:	3501      	adds	r5, #1
 8007556:	9519      	str	r5, [sp, #100]	@ 0x64
 8007558:	930b      	str	r3, [sp, #44]	@ 0x2c
 800755a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800755c:	2b00      	cmp	r3, #0
 800755e:	f040 8584 	bne.w	800806a <_strtod_l+0xb82>
 8007562:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007564:	b1bb      	cbz	r3, 8007596 <_strtod_l+0xae>
 8007566:	4650      	mov	r0, sl
 8007568:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800756c:	b01f      	add	sp, #124	@ 0x7c
 800756e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007572:	2920      	cmp	r1, #32
 8007574:	d1d0      	bne.n	8007518 <_strtod_l+0x30>
 8007576:	3201      	adds	r2, #1
 8007578:	e7c3      	b.n	8007502 <_strtod_l+0x1a>
 800757a:	292d      	cmp	r1, #45	@ 0x2d
 800757c:	d1cc      	bne.n	8007518 <_strtod_l+0x30>
 800757e:	2101      	movs	r1, #1
 8007580:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007582:	1c51      	adds	r1, r2, #1
 8007584:	9119      	str	r1, [sp, #100]	@ 0x64
 8007586:	7852      	ldrb	r2, [r2, #1]
 8007588:	2a00      	cmp	r2, #0
 800758a:	d1c7      	bne.n	800751c <_strtod_l+0x34>
 800758c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800758e:	9419      	str	r4, [sp, #100]	@ 0x64
 8007590:	2b00      	cmp	r3, #0
 8007592:	f040 8568 	bne.w	8008066 <_strtod_l+0xb7e>
 8007596:	4650      	mov	r0, sl
 8007598:	4659      	mov	r1, fp
 800759a:	e7e7      	b.n	800756c <_strtod_l+0x84>
 800759c:	2100      	movs	r1, #0
 800759e:	e7ef      	b.n	8007580 <_strtod_l+0x98>
 80075a0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80075a2:	b13a      	cbz	r2, 80075b4 <_strtod_l+0xcc>
 80075a4:	2135      	movs	r1, #53	@ 0x35
 80075a6:	a81c      	add	r0, sp, #112	@ 0x70
 80075a8:	f003 fdfe 	bl	800b1a8 <__copybits>
 80075ac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80075ae:	9805      	ldr	r0, [sp, #20]
 80075b0:	f003 f9d8 	bl	800a964 <_Bfree>
 80075b4:	3e01      	subs	r6, #1
 80075b6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80075b8:	2e04      	cmp	r6, #4
 80075ba:	d806      	bhi.n	80075ca <_strtod_l+0xe2>
 80075bc:	e8df f006 	tbb	[pc, r6]
 80075c0:	201d0314 	.word	0x201d0314
 80075c4:	14          	.byte	0x14
 80075c5:	00          	.byte	0x00
 80075c6:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80075ca:	05e1      	lsls	r1, r4, #23
 80075cc:	bf48      	it	mi
 80075ce:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80075d2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80075d6:	0d1b      	lsrs	r3, r3, #20
 80075d8:	051b      	lsls	r3, r3, #20
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d1bd      	bne.n	800755a <_strtod_l+0x72>
 80075de:	f001 fe8b 	bl	80092f8 <__errno>
 80075e2:	2322      	movs	r3, #34	@ 0x22
 80075e4:	6003      	str	r3, [r0, #0]
 80075e6:	e7b8      	b.n	800755a <_strtod_l+0x72>
 80075e8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80075ec:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80075f0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80075f4:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80075f8:	e7e7      	b.n	80075ca <_strtod_l+0xe2>
 80075fa:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8007774 <_strtod_l+0x28c>
 80075fe:	e7e4      	b.n	80075ca <_strtod_l+0xe2>
 8007600:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007604:	f04f 3aff 	mov.w	sl, #4294967295
 8007608:	e7df      	b.n	80075ca <_strtod_l+0xe2>
 800760a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800760c:	1c5a      	adds	r2, r3, #1
 800760e:	9219      	str	r2, [sp, #100]	@ 0x64
 8007610:	785b      	ldrb	r3, [r3, #1]
 8007612:	2b30      	cmp	r3, #48	@ 0x30
 8007614:	d0f9      	beq.n	800760a <_strtod_l+0x122>
 8007616:	2b00      	cmp	r3, #0
 8007618:	d09f      	beq.n	800755a <_strtod_l+0x72>
 800761a:	2301      	movs	r3, #1
 800761c:	9309      	str	r3, [sp, #36]	@ 0x24
 800761e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007620:	220a      	movs	r2, #10
 8007622:	930c      	str	r3, [sp, #48]	@ 0x30
 8007624:	2300      	movs	r3, #0
 8007626:	461f      	mov	r7, r3
 8007628:	9308      	str	r3, [sp, #32]
 800762a:	930a      	str	r3, [sp, #40]	@ 0x28
 800762c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800762e:	7805      	ldrb	r5, [r0, #0]
 8007630:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007634:	b2d9      	uxtb	r1, r3
 8007636:	2909      	cmp	r1, #9
 8007638:	d928      	bls.n	800768c <_strtod_l+0x1a4>
 800763a:	2201      	movs	r2, #1
 800763c:	494e      	ldr	r1, [pc, #312]	@ (8007778 <_strtod_l+0x290>)
 800763e:	f001 fdd3 	bl	80091e8 <strncmp>
 8007642:	2800      	cmp	r0, #0
 8007644:	d032      	beq.n	80076ac <_strtod_l+0x1c4>
 8007646:	2000      	movs	r0, #0
 8007648:	462a      	mov	r2, r5
 800764a:	4681      	mov	r9, r0
 800764c:	463d      	mov	r5, r7
 800764e:	4603      	mov	r3, r0
 8007650:	2a65      	cmp	r2, #101	@ 0x65
 8007652:	d001      	beq.n	8007658 <_strtod_l+0x170>
 8007654:	2a45      	cmp	r2, #69	@ 0x45
 8007656:	d114      	bne.n	8007682 <_strtod_l+0x19a>
 8007658:	b91d      	cbnz	r5, 8007662 <_strtod_l+0x17a>
 800765a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800765c:	4302      	orrs	r2, r0
 800765e:	d095      	beq.n	800758c <_strtod_l+0xa4>
 8007660:	2500      	movs	r5, #0
 8007662:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007664:	1c62      	adds	r2, r4, #1
 8007666:	9219      	str	r2, [sp, #100]	@ 0x64
 8007668:	7862      	ldrb	r2, [r4, #1]
 800766a:	2a2b      	cmp	r2, #43	@ 0x2b
 800766c:	d077      	beq.n	800775e <_strtod_l+0x276>
 800766e:	2a2d      	cmp	r2, #45	@ 0x2d
 8007670:	d07b      	beq.n	800776a <_strtod_l+0x282>
 8007672:	f04f 0c00 	mov.w	ip, #0
 8007676:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800767a:	2909      	cmp	r1, #9
 800767c:	f240 8082 	bls.w	8007784 <_strtod_l+0x29c>
 8007680:	9419      	str	r4, [sp, #100]	@ 0x64
 8007682:	f04f 0800 	mov.w	r8, #0
 8007686:	e0a2      	b.n	80077ce <_strtod_l+0x2e6>
 8007688:	2300      	movs	r3, #0
 800768a:	e7c7      	b.n	800761c <_strtod_l+0x134>
 800768c:	2f08      	cmp	r7, #8
 800768e:	bfd5      	itete	le
 8007690:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8007692:	9908      	ldrgt	r1, [sp, #32]
 8007694:	fb02 3301 	mlale	r3, r2, r1, r3
 8007698:	fb02 3301 	mlagt	r3, r2, r1, r3
 800769c:	f100 0001 	add.w	r0, r0, #1
 80076a0:	bfd4      	ite	le
 80076a2:	930a      	strle	r3, [sp, #40]	@ 0x28
 80076a4:	9308      	strgt	r3, [sp, #32]
 80076a6:	3701      	adds	r7, #1
 80076a8:	9019      	str	r0, [sp, #100]	@ 0x64
 80076aa:	e7bf      	b.n	800762c <_strtod_l+0x144>
 80076ac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80076ae:	1c5a      	adds	r2, r3, #1
 80076b0:	9219      	str	r2, [sp, #100]	@ 0x64
 80076b2:	785a      	ldrb	r2, [r3, #1]
 80076b4:	b37f      	cbz	r7, 8007716 <_strtod_l+0x22e>
 80076b6:	4681      	mov	r9, r0
 80076b8:	463d      	mov	r5, r7
 80076ba:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80076be:	2b09      	cmp	r3, #9
 80076c0:	d912      	bls.n	80076e8 <_strtod_l+0x200>
 80076c2:	2301      	movs	r3, #1
 80076c4:	e7c4      	b.n	8007650 <_strtod_l+0x168>
 80076c6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80076c8:	3001      	adds	r0, #1
 80076ca:	1c5a      	adds	r2, r3, #1
 80076cc:	9219      	str	r2, [sp, #100]	@ 0x64
 80076ce:	785a      	ldrb	r2, [r3, #1]
 80076d0:	2a30      	cmp	r2, #48	@ 0x30
 80076d2:	d0f8      	beq.n	80076c6 <_strtod_l+0x1de>
 80076d4:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80076d8:	2b08      	cmp	r3, #8
 80076da:	f200 84cb 	bhi.w	8008074 <_strtod_l+0xb8c>
 80076de:	4681      	mov	r9, r0
 80076e0:	2000      	movs	r0, #0
 80076e2:	4605      	mov	r5, r0
 80076e4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80076e6:	930c      	str	r3, [sp, #48]	@ 0x30
 80076e8:	3a30      	subs	r2, #48	@ 0x30
 80076ea:	f100 0301 	add.w	r3, r0, #1
 80076ee:	d02a      	beq.n	8007746 <_strtod_l+0x25e>
 80076f0:	4499      	add	r9, r3
 80076f2:	210a      	movs	r1, #10
 80076f4:	462b      	mov	r3, r5
 80076f6:	eb00 0c05 	add.w	ip, r0, r5
 80076fa:	4563      	cmp	r3, ip
 80076fc:	d10d      	bne.n	800771a <_strtod_l+0x232>
 80076fe:	1c69      	adds	r1, r5, #1
 8007700:	4401      	add	r1, r0
 8007702:	4428      	add	r0, r5
 8007704:	2808      	cmp	r0, #8
 8007706:	dc16      	bgt.n	8007736 <_strtod_l+0x24e>
 8007708:	230a      	movs	r3, #10
 800770a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800770c:	fb03 2300 	mla	r3, r3, r0, r2
 8007710:	930a      	str	r3, [sp, #40]	@ 0x28
 8007712:	2300      	movs	r3, #0
 8007714:	e018      	b.n	8007748 <_strtod_l+0x260>
 8007716:	4638      	mov	r0, r7
 8007718:	e7da      	b.n	80076d0 <_strtod_l+0x1e8>
 800771a:	2b08      	cmp	r3, #8
 800771c:	f103 0301 	add.w	r3, r3, #1
 8007720:	dc03      	bgt.n	800772a <_strtod_l+0x242>
 8007722:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007724:	434e      	muls	r6, r1
 8007726:	960a      	str	r6, [sp, #40]	@ 0x28
 8007728:	e7e7      	b.n	80076fa <_strtod_l+0x212>
 800772a:	2b10      	cmp	r3, #16
 800772c:	bfde      	ittt	le
 800772e:	9e08      	ldrle	r6, [sp, #32]
 8007730:	434e      	mulle	r6, r1
 8007732:	9608      	strle	r6, [sp, #32]
 8007734:	e7e1      	b.n	80076fa <_strtod_l+0x212>
 8007736:	280f      	cmp	r0, #15
 8007738:	dceb      	bgt.n	8007712 <_strtod_l+0x22a>
 800773a:	230a      	movs	r3, #10
 800773c:	9808      	ldr	r0, [sp, #32]
 800773e:	fb03 2300 	mla	r3, r3, r0, r2
 8007742:	9308      	str	r3, [sp, #32]
 8007744:	e7e5      	b.n	8007712 <_strtod_l+0x22a>
 8007746:	4629      	mov	r1, r5
 8007748:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800774a:	460d      	mov	r5, r1
 800774c:	1c50      	adds	r0, r2, #1
 800774e:	9019      	str	r0, [sp, #100]	@ 0x64
 8007750:	7852      	ldrb	r2, [r2, #1]
 8007752:	4618      	mov	r0, r3
 8007754:	e7b1      	b.n	80076ba <_strtod_l+0x1d2>
 8007756:	f04f 0900 	mov.w	r9, #0
 800775a:	2301      	movs	r3, #1
 800775c:	e77d      	b.n	800765a <_strtod_l+0x172>
 800775e:	f04f 0c00 	mov.w	ip, #0
 8007762:	1ca2      	adds	r2, r4, #2
 8007764:	9219      	str	r2, [sp, #100]	@ 0x64
 8007766:	78a2      	ldrb	r2, [r4, #2]
 8007768:	e785      	b.n	8007676 <_strtod_l+0x18e>
 800776a:	f04f 0c01 	mov.w	ip, #1
 800776e:	e7f8      	b.n	8007762 <_strtod_l+0x27a>
 8007770:	0800c47c 	.word	0x0800c47c
 8007774:	7ff00000 	.word	0x7ff00000
 8007778:	0800c466 	.word	0x0800c466
 800777c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800777e:	1c51      	adds	r1, r2, #1
 8007780:	9119      	str	r1, [sp, #100]	@ 0x64
 8007782:	7852      	ldrb	r2, [r2, #1]
 8007784:	2a30      	cmp	r2, #48	@ 0x30
 8007786:	d0f9      	beq.n	800777c <_strtod_l+0x294>
 8007788:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800778c:	2908      	cmp	r1, #8
 800778e:	f63f af78 	bhi.w	8007682 <_strtod_l+0x19a>
 8007792:	f04f 080a 	mov.w	r8, #10
 8007796:	3a30      	subs	r2, #48	@ 0x30
 8007798:	920e      	str	r2, [sp, #56]	@ 0x38
 800779a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800779c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800779e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80077a0:	1c56      	adds	r6, r2, #1
 80077a2:	9619      	str	r6, [sp, #100]	@ 0x64
 80077a4:	7852      	ldrb	r2, [r2, #1]
 80077a6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80077aa:	f1be 0f09 	cmp.w	lr, #9
 80077ae:	d939      	bls.n	8007824 <_strtod_l+0x33c>
 80077b0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80077b2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80077b6:	1a76      	subs	r6, r6, r1
 80077b8:	2e08      	cmp	r6, #8
 80077ba:	dc03      	bgt.n	80077c4 <_strtod_l+0x2dc>
 80077bc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80077be:	4588      	cmp	r8, r1
 80077c0:	bfa8      	it	ge
 80077c2:	4688      	movge	r8, r1
 80077c4:	f1bc 0f00 	cmp.w	ip, #0
 80077c8:	d001      	beq.n	80077ce <_strtod_l+0x2e6>
 80077ca:	f1c8 0800 	rsb	r8, r8, #0
 80077ce:	2d00      	cmp	r5, #0
 80077d0:	d14e      	bne.n	8007870 <_strtod_l+0x388>
 80077d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80077d4:	4308      	orrs	r0, r1
 80077d6:	f47f aec0 	bne.w	800755a <_strtod_l+0x72>
 80077da:	2b00      	cmp	r3, #0
 80077dc:	f47f aed6 	bne.w	800758c <_strtod_l+0xa4>
 80077e0:	2a69      	cmp	r2, #105	@ 0x69
 80077e2:	d028      	beq.n	8007836 <_strtod_l+0x34e>
 80077e4:	dc25      	bgt.n	8007832 <_strtod_l+0x34a>
 80077e6:	2a49      	cmp	r2, #73	@ 0x49
 80077e8:	d025      	beq.n	8007836 <_strtod_l+0x34e>
 80077ea:	2a4e      	cmp	r2, #78	@ 0x4e
 80077ec:	f47f aece 	bne.w	800758c <_strtod_l+0xa4>
 80077f0:	499a      	ldr	r1, [pc, #616]	@ (8007a5c <_strtod_l+0x574>)
 80077f2:	a819      	add	r0, sp, #100	@ 0x64
 80077f4:	f002 fefe 	bl	800a5f4 <__match>
 80077f8:	2800      	cmp	r0, #0
 80077fa:	f43f aec7 	beq.w	800758c <_strtod_l+0xa4>
 80077fe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007800:	781b      	ldrb	r3, [r3, #0]
 8007802:	2b28      	cmp	r3, #40	@ 0x28
 8007804:	d12e      	bne.n	8007864 <_strtod_l+0x37c>
 8007806:	4996      	ldr	r1, [pc, #600]	@ (8007a60 <_strtod_l+0x578>)
 8007808:	aa1c      	add	r2, sp, #112	@ 0x70
 800780a:	a819      	add	r0, sp, #100	@ 0x64
 800780c:	f002 ff06 	bl	800a61c <__hexnan>
 8007810:	2805      	cmp	r0, #5
 8007812:	d127      	bne.n	8007864 <_strtod_l+0x37c>
 8007814:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007816:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800781a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800781e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007822:	e69a      	b.n	800755a <_strtod_l+0x72>
 8007824:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007826:	fb08 2101 	mla	r1, r8, r1, r2
 800782a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800782e:	920e      	str	r2, [sp, #56]	@ 0x38
 8007830:	e7b5      	b.n	800779e <_strtod_l+0x2b6>
 8007832:	2a6e      	cmp	r2, #110	@ 0x6e
 8007834:	e7da      	b.n	80077ec <_strtod_l+0x304>
 8007836:	498b      	ldr	r1, [pc, #556]	@ (8007a64 <_strtod_l+0x57c>)
 8007838:	a819      	add	r0, sp, #100	@ 0x64
 800783a:	f002 fedb 	bl	800a5f4 <__match>
 800783e:	2800      	cmp	r0, #0
 8007840:	f43f aea4 	beq.w	800758c <_strtod_l+0xa4>
 8007844:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007846:	4988      	ldr	r1, [pc, #544]	@ (8007a68 <_strtod_l+0x580>)
 8007848:	3b01      	subs	r3, #1
 800784a:	a819      	add	r0, sp, #100	@ 0x64
 800784c:	9319      	str	r3, [sp, #100]	@ 0x64
 800784e:	f002 fed1 	bl	800a5f4 <__match>
 8007852:	b910      	cbnz	r0, 800785a <_strtod_l+0x372>
 8007854:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007856:	3301      	adds	r3, #1
 8007858:	9319      	str	r3, [sp, #100]	@ 0x64
 800785a:	f04f 0a00 	mov.w	sl, #0
 800785e:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8007a6c <_strtod_l+0x584>
 8007862:	e67a      	b.n	800755a <_strtod_l+0x72>
 8007864:	4882      	ldr	r0, [pc, #520]	@ (8007a70 <_strtod_l+0x588>)
 8007866:	f001 fd99 	bl	800939c <nan>
 800786a:	4682      	mov	sl, r0
 800786c:	468b      	mov	fp, r1
 800786e:	e674      	b.n	800755a <_strtod_l+0x72>
 8007870:	eba8 0309 	sub.w	r3, r8, r9
 8007874:	2f00      	cmp	r7, #0
 8007876:	bf08      	it	eq
 8007878:	462f      	moveq	r7, r5
 800787a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800787c:	2d10      	cmp	r5, #16
 800787e:	462c      	mov	r4, r5
 8007880:	9309      	str	r3, [sp, #36]	@ 0x24
 8007882:	bfa8      	it	ge
 8007884:	2410      	movge	r4, #16
 8007886:	f7f8 fdb7 	bl	80003f8 <__aeabi_ui2d>
 800788a:	2d09      	cmp	r5, #9
 800788c:	4682      	mov	sl, r0
 800788e:	468b      	mov	fp, r1
 8007890:	dc11      	bgt.n	80078b6 <_strtod_l+0x3ce>
 8007892:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007894:	2b00      	cmp	r3, #0
 8007896:	f43f ae60 	beq.w	800755a <_strtod_l+0x72>
 800789a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800789c:	dd76      	ble.n	800798c <_strtod_l+0x4a4>
 800789e:	2b16      	cmp	r3, #22
 80078a0:	dc5d      	bgt.n	800795e <_strtod_l+0x476>
 80078a2:	4974      	ldr	r1, [pc, #464]	@ (8007a74 <_strtod_l+0x58c>)
 80078a4:	4652      	mov	r2, sl
 80078a6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80078aa:	465b      	mov	r3, fp
 80078ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078b0:	f7f8 fe1c 	bl	80004ec <__aeabi_dmul>
 80078b4:	e7d9      	b.n	800786a <_strtod_l+0x382>
 80078b6:	4b6f      	ldr	r3, [pc, #444]	@ (8007a74 <_strtod_l+0x58c>)
 80078b8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80078bc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80078c0:	f7f8 fe14 	bl	80004ec <__aeabi_dmul>
 80078c4:	4682      	mov	sl, r0
 80078c6:	9808      	ldr	r0, [sp, #32]
 80078c8:	468b      	mov	fp, r1
 80078ca:	f7f8 fd95 	bl	80003f8 <__aeabi_ui2d>
 80078ce:	4602      	mov	r2, r0
 80078d0:	460b      	mov	r3, r1
 80078d2:	4650      	mov	r0, sl
 80078d4:	4659      	mov	r1, fp
 80078d6:	f7f8 fc53 	bl	8000180 <__adddf3>
 80078da:	2d0f      	cmp	r5, #15
 80078dc:	4682      	mov	sl, r0
 80078de:	468b      	mov	fp, r1
 80078e0:	ddd7      	ble.n	8007892 <_strtod_l+0x3aa>
 80078e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078e4:	1b2c      	subs	r4, r5, r4
 80078e6:	441c      	add	r4, r3
 80078e8:	2c00      	cmp	r4, #0
 80078ea:	f340 8096 	ble.w	8007a1a <_strtod_l+0x532>
 80078ee:	f014 030f 	ands.w	r3, r4, #15
 80078f2:	d00a      	beq.n	800790a <_strtod_l+0x422>
 80078f4:	495f      	ldr	r1, [pc, #380]	@ (8007a74 <_strtod_l+0x58c>)
 80078f6:	4652      	mov	r2, sl
 80078f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80078fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007900:	465b      	mov	r3, fp
 8007902:	f7f8 fdf3 	bl	80004ec <__aeabi_dmul>
 8007906:	4682      	mov	sl, r0
 8007908:	468b      	mov	fp, r1
 800790a:	f034 040f 	bics.w	r4, r4, #15
 800790e:	d073      	beq.n	80079f8 <_strtod_l+0x510>
 8007910:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007914:	dd48      	ble.n	80079a8 <_strtod_l+0x4c0>
 8007916:	2400      	movs	r4, #0
 8007918:	46a0      	mov	r8, r4
 800791a:	46a1      	mov	r9, r4
 800791c:	940a      	str	r4, [sp, #40]	@ 0x28
 800791e:	2322      	movs	r3, #34	@ 0x22
 8007920:	f04f 0a00 	mov.w	sl, #0
 8007924:	9a05      	ldr	r2, [sp, #20]
 8007926:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8007a6c <_strtod_l+0x584>
 800792a:	6013      	str	r3, [r2, #0]
 800792c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800792e:	2b00      	cmp	r3, #0
 8007930:	f43f ae13 	beq.w	800755a <_strtod_l+0x72>
 8007934:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007936:	9805      	ldr	r0, [sp, #20]
 8007938:	f003 f814 	bl	800a964 <_Bfree>
 800793c:	4649      	mov	r1, r9
 800793e:	9805      	ldr	r0, [sp, #20]
 8007940:	f003 f810 	bl	800a964 <_Bfree>
 8007944:	4641      	mov	r1, r8
 8007946:	9805      	ldr	r0, [sp, #20]
 8007948:	f003 f80c 	bl	800a964 <_Bfree>
 800794c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800794e:	9805      	ldr	r0, [sp, #20]
 8007950:	f003 f808 	bl	800a964 <_Bfree>
 8007954:	4621      	mov	r1, r4
 8007956:	9805      	ldr	r0, [sp, #20]
 8007958:	f003 f804 	bl	800a964 <_Bfree>
 800795c:	e5fd      	b.n	800755a <_strtod_l+0x72>
 800795e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007960:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007964:	4293      	cmp	r3, r2
 8007966:	dbbc      	blt.n	80078e2 <_strtod_l+0x3fa>
 8007968:	4c42      	ldr	r4, [pc, #264]	@ (8007a74 <_strtod_l+0x58c>)
 800796a:	f1c5 050f 	rsb	r5, r5, #15
 800796e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007972:	4652      	mov	r2, sl
 8007974:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007978:	465b      	mov	r3, fp
 800797a:	f7f8 fdb7 	bl	80004ec <__aeabi_dmul>
 800797e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007980:	1b5d      	subs	r5, r3, r5
 8007982:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007986:	e9d4 2300 	ldrd	r2, r3, [r4]
 800798a:	e791      	b.n	80078b0 <_strtod_l+0x3c8>
 800798c:	3316      	adds	r3, #22
 800798e:	dba8      	blt.n	80078e2 <_strtod_l+0x3fa>
 8007990:	4b38      	ldr	r3, [pc, #224]	@ (8007a74 <_strtod_l+0x58c>)
 8007992:	eba9 0808 	sub.w	r8, r9, r8
 8007996:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800799a:	4650      	mov	r0, sl
 800799c:	e9d8 2300 	ldrd	r2, r3, [r8]
 80079a0:	4659      	mov	r1, fp
 80079a2:	f7f8 fecd 	bl	8000740 <__aeabi_ddiv>
 80079a6:	e760      	b.n	800786a <_strtod_l+0x382>
 80079a8:	4b33      	ldr	r3, [pc, #204]	@ (8007a78 <_strtod_l+0x590>)
 80079aa:	4650      	mov	r0, sl
 80079ac:	9308      	str	r3, [sp, #32]
 80079ae:	2300      	movs	r3, #0
 80079b0:	4659      	mov	r1, fp
 80079b2:	461e      	mov	r6, r3
 80079b4:	1124      	asrs	r4, r4, #4
 80079b6:	2c01      	cmp	r4, #1
 80079b8:	dc21      	bgt.n	80079fe <_strtod_l+0x516>
 80079ba:	b10b      	cbz	r3, 80079c0 <_strtod_l+0x4d8>
 80079bc:	4682      	mov	sl, r0
 80079be:	468b      	mov	fp, r1
 80079c0:	492d      	ldr	r1, [pc, #180]	@ (8007a78 <_strtod_l+0x590>)
 80079c2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80079c6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80079ca:	4652      	mov	r2, sl
 80079cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079d0:	465b      	mov	r3, fp
 80079d2:	f7f8 fd8b 	bl	80004ec <__aeabi_dmul>
 80079d6:	4b25      	ldr	r3, [pc, #148]	@ (8007a6c <_strtod_l+0x584>)
 80079d8:	460a      	mov	r2, r1
 80079da:	400b      	ands	r3, r1
 80079dc:	4927      	ldr	r1, [pc, #156]	@ (8007a7c <_strtod_l+0x594>)
 80079de:	4682      	mov	sl, r0
 80079e0:	428b      	cmp	r3, r1
 80079e2:	d898      	bhi.n	8007916 <_strtod_l+0x42e>
 80079e4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80079e8:	428b      	cmp	r3, r1
 80079ea:	bf86      	itte	hi
 80079ec:	f04f 3aff 	movhi.w	sl, #4294967295
 80079f0:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8007a80 <_strtod_l+0x598>
 80079f4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80079f8:	2300      	movs	r3, #0
 80079fa:	9308      	str	r3, [sp, #32]
 80079fc:	e07a      	b.n	8007af4 <_strtod_l+0x60c>
 80079fe:	07e2      	lsls	r2, r4, #31
 8007a00:	d505      	bpl.n	8007a0e <_strtod_l+0x526>
 8007a02:	9b08      	ldr	r3, [sp, #32]
 8007a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a08:	f7f8 fd70 	bl	80004ec <__aeabi_dmul>
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	9a08      	ldr	r2, [sp, #32]
 8007a10:	3601      	adds	r6, #1
 8007a12:	3208      	adds	r2, #8
 8007a14:	1064      	asrs	r4, r4, #1
 8007a16:	9208      	str	r2, [sp, #32]
 8007a18:	e7cd      	b.n	80079b6 <_strtod_l+0x4ce>
 8007a1a:	d0ed      	beq.n	80079f8 <_strtod_l+0x510>
 8007a1c:	4264      	negs	r4, r4
 8007a1e:	f014 020f 	ands.w	r2, r4, #15
 8007a22:	d00a      	beq.n	8007a3a <_strtod_l+0x552>
 8007a24:	4b13      	ldr	r3, [pc, #76]	@ (8007a74 <_strtod_l+0x58c>)
 8007a26:	4650      	mov	r0, sl
 8007a28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a2c:	4659      	mov	r1, fp
 8007a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a32:	f7f8 fe85 	bl	8000740 <__aeabi_ddiv>
 8007a36:	4682      	mov	sl, r0
 8007a38:	468b      	mov	fp, r1
 8007a3a:	1124      	asrs	r4, r4, #4
 8007a3c:	d0dc      	beq.n	80079f8 <_strtod_l+0x510>
 8007a3e:	2c1f      	cmp	r4, #31
 8007a40:	dd20      	ble.n	8007a84 <_strtod_l+0x59c>
 8007a42:	2400      	movs	r4, #0
 8007a44:	46a0      	mov	r8, r4
 8007a46:	46a1      	mov	r9, r4
 8007a48:	940a      	str	r4, [sp, #40]	@ 0x28
 8007a4a:	2322      	movs	r3, #34	@ 0x22
 8007a4c:	9a05      	ldr	r2, [sp, #20]
 8007a4e:	f04f 0a00 	mov.w	sl, #0
 8007a52:	f04f 0b00 	mov.w	fp, #0
 8007a56:	6013      	str	r3, [r2, #0]
 8007a58:	e768      	b.n	800792c <_strtod_l+0x444>
 8007a5a:	bf00      	nop
 8007a5c:	0800c5c6 	.word	0x0800c5c6
 8007a60:	0800c468 	.word	0x0800c468
 8007a64:	0800c5be 	.word	0x0800c5be
 8007a68:	0800c5fd 	.word	0x0800c5fd
 8007a6c:	7ff00000 	.word	0x7ff00000
 8007a70:	0800c88c 	.word	0x0800c88c
 8007a74:	0800c778 	.word	0x0800c778
 8007a78:	0800c750 	.word	0x0800c750
 8007a7c:	7ca00000 	.word	0x7ca00000
 8007a80:	7fefffff 	.word	0x7fefffff
 8007a84:	f014 0310 	ands.w	r3, r4, #16
 8007a88:	bf18      	it	ne
 8007a8a:	236a      	movne	r3, #106	@ 0x6a
 8007a8c:	4650      	mov	r0, sl
 8007a8e:	9308      	str	r3, [sp, #32]
 8007a90:	4659      	mov	r1, fp
 8007a92:	2300      	movs	r3, #0
 8007a94:	4ea9      	ldr	r6, [pc, #676]	@ (8007d3c <_strtod_l+0x854>)
 8007a96:	07e2      	lsls	r2, r4, #31
 8007a98:	d504      	bpl.n	8007aa4 <_strtod_l+0x5bc>
 8007a9a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007a9e:	f7f8 fd25 	bl	80004ec <__aeabi_dmul>
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	1064      	asrs	r4, r4, #1
 8007aa6:	f106 0608 	add.w	r6, r6, #8
 8007aaa:	d1f4      	bne.n	8007a96 <_strtod_l+0x5ae>
 8007aac:	b10b      	cbz	r3, 8007ab2 <_strtod_l+0x5ca>
 8007aae:	4682      	mov	sl, r0
 8007ab0:	468b      	mov	fp, r1
 8007ab2:	9b08      	ldr	r3, [sp, #32]
 8007ab4:	b1b3      	cbz	r3, 8007ae4 <_strtod_l+0x5fc>
 8007ab6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007aba:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	4659      	mov	r1, fp
 8007ac2:	dd0f      	ble.n	8007ae4 <_strtod_l+0x5fc>
 8007ac4:	2b1f      	cmp	r3, #31
 8007ac6:	dd57      	ble.n	8007b78 <_strtod_l+0x690>
 8007ac8:	2b34      	cmp	r3, #52	@ 0x34
 8007aca:	bfd8      	it	le
 8007acc:	f04f 33ff 	movle.w	r3, #4294967295
 8007ad0:	f04f 0a00 	mov.w	sl, #0
 8007ad4:	bfcf      	iteee	gt
 8007ad6:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007ada:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007ade:	4093      	lslle	r3, r2
 8007ae0:	ea03 0b01 	andle.w	fp, r3, r1
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	4650      	mov	r0, sl
 8007aea:	4659      	mov	r1, fp
 8007aec:	f7f8 ff66 	bl	80009bc <__aeabi_dcmpeq>
 8007af0:	2800      	cmp	r0, #0
 8007af2:	d1a6      	bne.n	8007a42 <_strtod_l+0x55a>
 8007af4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007af6:	463a      	mov	r2, r7
 8007af8:	9300      	str	r3, [sp, #0]
 8007afa:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007afc:	462b      	mov	r3, r5
 8007afe:	9805      	ldr	r0, [sp, #20]
 8007b00:	f002 ff98 	bl	800aa34 <__s2b>
 8007b04:	900a      	str	r0, [sp, #40]	@ 0x28
 8007b06:	2800      	cmp	r0, #0
 8007b08:	f43f af05 	beq.w	8007916 <_strtod_l+0x42e>
 8007b0c:	2400      	movs	r4, #0
 8007b0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007b10:	eba9 0308 	sub.w	r3, r9, r8
 8007b14:	2a00      	cmp	r2, #0
 8007b16:	bfa8      	it	ge
 8007b18:	2300      	movge	r3, #0
 8007b1a:	46a0      	mov	r8, r4
 8007b1c:	9312      	str	r3, [sp, #72]	@ 0x48
 8007b1e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007b22:	9316      	str	r3, [sp, #88]	@ 0x58
 8007b24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b26:	9805      	ldr	r0, [sp, #20]
 8007b28:	6859      	ldr	r1, [r3, #4]
 8007b2a:	f002 fedb 	bl	800a8e4 <_Balloc>
 8007b2e:	4681      	mov	r9, r0
 8007b30:	2800      	cmp	r0, #0
 8007b32:	f43f aef4 	beq.w	800791e <_strtod_l+0x436>
 8007b36:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b38:	300c      	adds	r0, #12
 8007b3a:	691a      	ldr	r2, [r3, #16]
 8007b3c:	f103 010c 	add.w	r1, r3, #12
 8007b40:	3202      	adds	r2, #2
 8007b42:	0092      	lsls	r2, r2, #2
 8007b44:	f001 fc1b 	bl	800937e <memcpy>
 8007b48:	ab1c      	add	r3, sp, #112	@ 0x70
 8007b4a:	9301      	str	r3, [sp, #4]
 8007b4c:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007b4e:	9300      	str	r3, [sp, #0]
 8007b50:	4652      	mov	r2, sl
 8007b52:	465b      	mov	r3, fp
 8007b54:	9805      	ldr	r0, [sp, #20]
 8007b56:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007b5a:	f003 fa9d 	bl	800b098 <__d2b>
 8007b5e:	901a      	str	r0, [sp, #104]	@ 0x68
 8007b60:	2800      	cmp	r0, #0
 8007b62:	f43f aedc 	beq.w	800791e <_strtod_l+0x436>
 8007b66:	2101      	movs	r1, #1
 8007b68:	9805      	ldr	r0, [sp, #20]
 8007b6a:	f002 fff9 	bl	800ab60 <__i2b>
 8007b6e:	4680      	mov	r8, r0
 8007b70:	b948      	cbnz	r0, 8007b86 <_strtod_l+0x69e>
 8007b72:	f04f 0800 	mov.w	r8, #0
 8007b76:	e6d2      	b.n	800791e <_strtod_l+0x436>
 8007b78:	f04f 32ff 	mov.w	r2, #4294967295
 8007b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8007b80:	ea03 0a0a 	and.w	sl, r3, sl
 8007b84:	e7ae      	b.n	8007ae4 <_strtod_l+0x5fc>
 8007b86:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007b88:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007b8a:	2d00      	cmp	r5, #0
 8007b8c:	bfab      	itete	ge
 8007b8e:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007b90:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007b92:	18ef      	addge	r7, r5, r3
 8007b94:	1b5e      	sublt	r6, r3, r5
 8007b96:	9b08      	ldr	r3, [sp, #32]
 8007b98:	bfa8      	it	ge
 8007b9a:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007b9c:	eba5 0503 	sub.w	r5, r5, r3
 8007ba0:	4415      	add	r5, r2
 8007ba2:	4b67      	ldr	r3, [pc, #412]	@ (8007d40 <_strtod_l+0x858>)
 8007ba4:	f105 35ff 	add.w	r5, r5, #4294967295
 8007ba8:	bfb8      	it	lt
 8007baa:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007bac:	429d      	cmp	r5, r3
 8007bae:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007bb2:	da50      	bge.n	8007c56 <_strtod_l+0x76e>
 8007bb4:	1b5b      	subs	r3, r3, r5
 8007bb6:	2b1f      	cmp	r3, #31
 8007bb8:	f04f 0101 	mov.w	r1, #1
 8007bbc:	eba2 0203 	sub.w	r2, r2, r3
 8007bc0:	dc3d      	bgt.n	8007c3e <_strtod_l+0x756>
 8007bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8007bc6:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007bc8:	2300      	movs	r3, #0
 8007bca:	9310      	str	r3, [sp, #64]	@ 0x40
 8007bcc:	18bd      	adds	r5, r7, r2
 8007bce:	9b08      	ldr	r3, [sp, #32]
 8007bd0:	42af      	cmp	r7, r5
 8007bd2:	4416      	add	r6, r2
 8007bd4:	441e      	add	r6, r3
 8007bd6:	463b      	mov	r3, r7
 8007bd8:	bfa8      	it	ge
 8007bda:	462b      	movge	r3, r5
 8007bdc:	42b3      	cmp	r3, r6
 8007bde:	bfa8      	it	ge
 8007be0:	4633      	movge	r3, r6
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	bfc2      	ittt	gt
 8007be6:	1aed      	subgt	r5, r5, r3
 8007be8:	1af6      	subgt	r6, r6, r3
 8007bea:	1aff      	subgt	r7, r7, r3
 8007bec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	dd16      	ble.n	8007c20 <_strtod_l+0x738>
 8007bf2:	4641      	mov	r1, r8
 8007bf4:	461a      	mov	r2, r3
 8007bf6:	9805      	ldr	r0, [sp, #20]
 8007bf8:	f003 f870 	bl	800acdc <__pow5mult>
 8007bfc:	4680      	mov	r8, r0
 8007bfe:	2800      	cmp	r0, #0
 8007c00:	d0b7      	beq.n	8007b72 <_strtod_l+0x68a>
 8007c02:	4601      	mov	r1, r0
 8007c04:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007c06:	9805      	ldr	r0, [sp, #20]
 8007c08:	f002 ffc0 	bl	800ab8c <__multiply>
 8007c0c:	900e      	str	r0, [sp, #56]	@ 0x38
 8007c0e:	2800      	cmp	r0, #0
 8007c10:	f43f ae85 	beq.w	800791e <_strtod_l+0x436>
 8007c14:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007c16:	9805      	ldr	r0, [sp, #20]
 8007c18:	f002 fea4 	bl	800a964 <_Bfree>
 8007c1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007c1e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007c20:	2d00      	cmp	r5, #0
 8007c22:	dc1d      	bgt.n	8007c60 <_strtod_l+0x778>
 8007c24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	dd23      	ble.n	8007c72 <_strtod_l+0x78a>
 8007c2a:	4649      	mov	r1, r9
 8007c2c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007c2e:	9805      	ldr	r0, [sp, #20]
 8007c30:	f003 f854 	bl	800acdc <__pow5mult>
 8007c34:	4681      	mov	r9, r0
 8007c36:	b9e0      	cbnz	r0, 8007c72 <_strtod_l+0x78a>
 8007c38:	f04f 0900 	mov.w	r9, #0
 8007c3c:	e66f      	b.n	800791e <_strtod_l+0x436>
 8007c3e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007c42:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007c46:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007c4a:	35e2      	adds	r5, #226	@ 0xe2
 8007c4c:	fa01 f305 	lsl.w	r3, r1, r5
 8007c50:	9310      	str	r3, [sp, #64]	@ 0x40
 8007c52:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007c54:	e7ba      	b.n	8007bcc <_strtod_l+0x6e4>
 8007c56:	2300      	movs	r3, #0
 8007c58:	9310      	str	r3, [sp, #64]	@ 0x40
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007c5e:	e7b5      	b.n	8007bcc <_strtod_l+0x6e4>
 8007c60:	462a      	mov	r2, r5
 8007c62:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007c64:	9805      	ldr	r0, [sp, #20]
 8007c66:	f003 f893 	bl	800ad90 <__lshift>
 8007c6a:	901a      	str	r0, [sp, #104]	@ 0x68
 8007c6c:	2800      	cmp	r0, #0
 8007c6e:	d1d9      	bne.n	8007c24 <_strtod_l+0x73c>
 8007c70:	e655      	b.n	800791e <_strtod_l+0x436>
 8007c72:	2e00      	cmp	r6, #0
 8007c74:	dd07      	ble.n	8007c86 <_strtod_l+0x79e>
 8007c76:	4649      	mov	r1, r9
 8007c78:	4632      	mov	r2, r6
 8007c7a:	9805      	ldr	r0, [sp, #20]
 8007c7c:	f003 f888 	bl	800ad90 <__lshift>
 8007c80:	4681      	mov	r9, r0
 8007c82:	2800      	cmp	r0, #0
 8007c84:	d0d8      	beq.n	8007c38 <_strtod_l+0x750>
 8007c86:	2f00      	cmp	r7, #0
 8007c88:	dd08      	ble.n	8007c9c <_strtod_l+0x7b4>
 8007c8a:	4641      	mov	r1, r8
 8007c8c:	463a      	mov	r2, r7
 8007c8e:	9805      	ldr	r0, [sp, #20]
 8007c90:	f003 f87e 	bl	800ad90 <__lshift>
 8007c94:	4680      	mov	r8, r0
 8007c96:	2800      	cmp	r0, #0
 8007c98:	f43f ae41 	beq.w	800791e <_strtod_l+0x436>
 8007c9c:	464a      	mov	r2, r9
 8007c9e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007ca0:	9805      	ldr	r0, [sp, #20]
 8007ca2:	f003 f8fd 	bl	800aea0 <__mdiff>
 8007ca6:	4604      	mov	r4, r0
 8007ca8:	2800      	cmp	r0, #0
 8007caa:	f43f ae38 	beq.w	800791e <_strtod_l+0x436>
 8007cae:	68c3      	ldr	r3, [r0, #12]
 8007cb0:	4641      	mov	r1, r8
 8007cb2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	60c3      	str	r3, [r0, #12]
 8007cb8:	f003 f8d6 	bl	800ae68 <__mcmp>
 8007cbc:	2800      	cmp	r0, #0
 8007cbe:	da45      	bge.n	8007d4c <_strtod_l+0x864>
 8007cc0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007cc2:	ea53 030a 	orrs.w	r3, r3, sl
 8007cc6:	d16b      	bne.n	8007da0 <_strtod_l+0x8b8>
 8007cc8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d167      	bne.n	8007da0 <_strtod_l+0x8b8>
 8007cd0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007cd4:	0d1b      	lsrs	r3, r3, #20
 8007cd6:	051b      	lsls	r3, r3, #20
 8007cd8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007cdc:	d960      	bls.n	8007da0 <_strtod_l+0x8b8>
 8007cde:	6963      	ldr	r3, [r4, #20]
 8007ce0:	b913      	cbnz	r3, 8007ce8 <_strtod_l+0x800>
 8007ce2:	6923      	ldr	r3, [r4, #16]
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	dd5b      	ble.n	8007da0 <_strtod_l+0x8b8>
 8007ce8:	4621      	mov	r1, r4
 8007cea:	2201      	movs	r2, #1
 8007cec:	9805      	ldr	r0, [sp, #20]
 8007cee:	f003 f84f 	bl	800ad90 <__lshift>
 8007cf2:	4641      	mov	r1, r8
 8007cf4:	4604      	mov	r4, r0
 8007cf6:	f003 f8b7 	bl	800ae68 <__mcmp>
 8007cfa:	2800      	cmp	r0, #0
 8007cfc:	dd50      	ble.n	8007da0 <_strtod_l+0x8b8>
 8007cfe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007d02:	9a08      	ldr	r2, [sp, #32]
 8007d04:	0d1b      	lsrs	r3, r3, #20
 8007d06:	051b      	lsls	r3, r3, #20
 8007d08:	2a00      	cmp	r2, #0
 8007d0a:	d06a      	beq.n	8007de2 <_strtod_l+0x8fa>
 8007d0c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007d10:	d867      	bhi.n	8007de2 <_strtod_l+0x8fa>
 8007d12:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007d16:	f67f ae98 	bls.w	8007a4a <_strtod_l+0x562>
 8007d1a:	4650      	mov	r0, sl
 8007d1c:	4659      	mov	r1, fp
 8007d1e:	4b09      	ldr	r3, [pc, #36]	@ (8007d44 <_strtod_l+0x85c>)
 8007d20:	2200      	movs	r2, #0
 8007d22:	f7f8 fbe3 	bl	80004ec <__aeabi_dmul>
 8007d26:	4b08      	ldr	r3, [pc, #32]	@ (8007d48 <_strtod_l+0x860>)
 8007d28:	4682      	mov	sl, r0
 8007d2a:	400b      	ands	r3, r1
 8007d2c:	468b      	mov	fp, r1
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	f47f ae00 	bne.w	8007934 <_strtod_l+0x44c>
 8007d34:	2322      	movs	r3, #34	@ 0x22
 8007d36:	9a05      	ldr	r2, [sp, #20]
 8007d38:	6013      	str	r3, [r2, #0]
 8007d3a:	e5fb      	b.n	8007934 <_strtod_l+0x44c>
 8007d3c:	0800c490 	.word	0x0800c490
 8007d40:	fffffc02 	.word	0xfffffc02
 8007d44:	39500000 	.word	0x39500000
 8007d48:	7ff00000 	.word	0x7ff00000
 8007d4c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007d50:	d165      	bne.n	8007e1e <_strtod_l+0x936>
 8007d52:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007d54:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007d58:	b35a      	cbz	r2, 8007db2 <_strtod_l+0x8ca>
 8007d5a:	4a99      	ldr	r2, [pc, #612]	@ (8007fc0 <_strtod_l+0xad8>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d12b      	bne.n	8007db8 <_strtod_l+0x8d0>
 8007d60:	9b08      	ldr	r3, [sp, #32]
 8007d62:	4651      	mov	r1, sl
 8007d64:	b303      	cbz	r3, 8007da8 <_strtod_l+0x8c0>
 8007d66:	465a      	mov	r2, fp
 8007d68:	4b96      	ldr	r3, [pc, #600]	@ (8007fc4 <_strtod_l+0xadc>)
 8007d6a:	4013      	ands	r3, r2
 8007d6c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007d70:	f04f 32ff 	mov.w	r2, #4294967295
 8007d74:	d81b      	bhi.n	8007dae <_strtod_l+0x8c6>
 8007d76:	0d1b      	lsrs	r3, r3, #20
 8007d78:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d80:	4299      	cmp	r1, r3
 8007d82:	d119      	bne.n	8007db8 <_strtod_l+0x8d0>
 8007d84:	4b90      	ldr	r3, [pc, #576]	@ (8007fc8 <_strtod_l+0xae0>)
 8007d86:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d102      	bne.n	8007d92 <_strtod_l+0x8aa>
 8007d8c:	3101      	adds	r1, #1
 8007d8e:	f43f adc6 	beq.w	800791e <_strtod_l+0x436>
 8007d92:	f04f 0a00 	mov.w	sl, #0
 8007d96:	4b8b      	ldr	r3, [pc, #556]	@ (8007fc4 <_strtod_l+0xadc>)
 8007d98:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007d9a:	401a      	ands	r2, r3
 8007d9c:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007da0:	9b08      	ldr	r3, [sp, #32]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d1b9      	bne.n	8007d1a <_strtod_l+0x832>
 8007da6:	e5c5      	b.n	8007934 <_strtod_l+0x44c>
 8007da8:	f04f 33ff 	mov.w	r3, #4294967295
 8007dac:	e7e8      	b.n	8007d80 <_strtod_l+0x898>
 8007dae:	4613      	mov	r3, r2
 8007db0:	e7e6      	b.n	8007d80 <_strtod_l+0x898>
 8007db2:	ea53 030a 	orrs.w	r3, r3, sl
 8007db6:	d0a2      	beq.n	8007cfe <_strtod_l+0x816>
 8007db8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007dba:	b1db      	cbz	r3, 8007df4 <_strtod_l+0x90c>
 8007dbc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007dbe:	4213      	tst	r3, r2
 8007dc0:	d0ee      	beq.n	8007da0 <_strtod_l+0x8b8>
 8007dc2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007dc4:	4650      	mov	r0, sl
 8007dc6:	4659      	mov	r1, fp
 8007dc8:	9a08      	ldr	r2, [sp, #32]
 8007dca:	b1bb      	cbz	r3, 8007dfc <_strtod_l+0x914>
 8007dcc:	f7ff fb68 	bl	80074a0 <sulp>
 8007dd0:	4602      	mov	r2, r0
 8007dd2:	460b      	mov	r3, r1
 8007dd4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007dd8:	f7f8 f9d2 	bl	8000180 <__adddf3>
 8007ddc:	4682      	mov	sl, r0
 8007dde:	468b      	mov	fp, r1
 8007de0:	e7de      	b.n	8007da0 <_strtod_l+0x8b8>
 8007de2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007de6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007dea:	f04f 3aff 	mov.w	sl, #4294967295
 8007dee:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007df2:	e7d5      	b.n	8007da0 <_strtod_l+0x8b8>
 8007df4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007df6:	ea13 0f0a 	tst.w	r3, sl
 8007dfa:	e7e1      	b.n	8007dc0 <_strtod_l+0x8d8>
 8007dfc:	f7ff fb50 	bl	80074a0 <sulp>
 8007e00:	4602      	mov	r2, r0
 8007e02:	460b      	mov	r3, r1
 8007e04:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e08:	f7f8 f9b8 	bl	800017c <__aeabi_dsub>
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	2300      	movs	r3, #0
 8007e10:	4682      	mov	sl, r0
 8007e12:	468b      	mov	fp, r1
 8007e14:	f7f8 fdd2 	bl	80009bc <__aeabi_dcmpeq>
 8007e18:	2800      	cmp	r0, #0
 8007e1a:	d0c1      	beq.n	8007da0 <_strtod_l+0x8b8>
 8007e1c:	e615      	b.n	8007a4a <_strtod_l+0x562>
 8007e1e:	4641      	mov	r1, r8
 8007e20:	4620      	mov	r0, r4
 8007e22:	f003 f991 	bl	800b148 <__ratio>
 8007e26:	2200      	movs	r2, #0
 8007e28:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007e2c:	4606      	mov	r6, r0
 8007e2e:	460f      	mov	r7, r1
 8007e30:	f7f8 fdd8 	bl	80009e4 <__aeabi_dcmple>
 8007e34:	2800      	cmp	r0, #0
 8007e36:	d06d      	beq.n	8007f14 <_strtod_l+0xa2c>
 8007e38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d178      	bne.n	8007f30 <_strtod_l+0xa48>
 8007e3e:	f1ba 0f00 	cmp.w	sl, #0
 8007e42:	d156      	bne.n	8007ef2 <_strtod_l+0xa0a>
 8007e44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d158      	bne.n	8007f00 <_strtod_l+0xa18>
 8007e4e:	2200      	movs	r2, #0
 8007e50:	4630      	mov	r0, r6
 8007e52:	4639      	mov	r1, r7
 8007e54:	4b5d      	ldr	r3, [pc, #372]	@ (8007fcc <_strtod_l+0xae4>)
 8007e56:	f7f8 fdbb 	bl	80009d0 <__aeabi_dcmplt>
 8007e5a:	2800      	cmp	r0, #0
 8007e5c:	d157      	bne.n	8007f0e <_strtod_l+0xa26>
 8007e5e:	4630      	mov	r0, r6
 8007e60:	4639      	mov	r1, r7
 8007e62:	2200      	movs	r2, #0
 8007e64:	4b5a      	ldr	r3, [pc, #360]	@ (8007fd0 <_strtod_l+0xae8>)
 8007e66:	f7f8 fb41 	bl	80004ec <__aeabi_dmul>
 8007e6a:	4606      	mov	r6, r0
 8007e6c:	460f      	mov	r7, r1
 8007e6e:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007e72:	9606      	str	r6, [sp, #24]
 8007e74:	9307      	str	r3, [sp, #28]
 8007e76:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007e7a:	4d52      	ldr	r5, [pc, #328]	@ (8007fc4 <_strtod_l+0xadc>)
 8007e7c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007e80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e82:	401d      	ands	r5, r3
 8007e84:	4b53      	ldr	r3, [pc, #332]	@ (8007fd4 <_strtod_l+0xaec>)
 8007e86:	429d      	cmp	r5, r3
 8007e88:	f040 80aa 	bne.w	8007fe0 <_strtod_l+0xaf8>
 8007e8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e8e:	4650      	mov	r0, sl
 8007e90:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007e94:	4659      	mov	r1, fp
 8007e96:	f003 f897 	bl	800afc8 <__ulp>
 8007e9a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007e9e:	f7f8 fb25 	bl	80004ec <__aeabi_dmul>
 8007ea2:	4652      	mov	r2, sl
 8007ea4:	465b      	mov	r3, fp
 8007ea6:	f7f8 f96b 	bl	8000180 <__adddf3>
 8007eaa:	460b      	mov	r3, r1
 8007eac:	4945      	ldr	r1, [pc, #276]	@ (8007fc4 <_strtod_l+0xadc>)
 8007eae:	4a4a      	ldr	r2, [pc, #296]	@ (8007fd8 <_strtod_l+0xaf0>)
 8007eb0:	4019      	ands	r1, r3
 8007eb2:	4291      	cmp	r1, r2
 8007eb4:	4682      	mov	sl, r0
 8007eb6:	d942      	bls.n	8007f3e <_strtod_l+0xa56>
 8007eb8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007eba:	4b43      	ldr	r3, [pc, #268]	@ (8007fc8 <_strtod_l+0xae0>)
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d103      	bne.n	8007ec8 <_strtod_l+0x9e0>
 8007ec0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	f43f ad2b 	beq.w	800791e <_strtod_l+0x436>
 8007ec8:	f04f 3aff 	mov.w	sl, #4294967295
 8007ecc:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8007fc8 <_strtod_l+0xae0>
 8007ed0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007ed2:	9805      	ldr	r0, [sp, #20]
 8007ed4:	f002 fd46 	bl	800a964 <_Bfree>
 8007ed8:	4649      	mov	r1, r9
 8007eda:	9805      	ldr	r0, [sp, #20]
 8007edc:	f002 fd42 	bl	800a964 <_Bfree>
 8007ee0:	4641      	mov	r1, r8
 8007ee2:	9805      	ldr	r0, [sp, #20]
 8007ee4:	f002 fd3e 	bl	800a964 <_Bfree>
 8007ee8:	4621      	mov	r1, r4
 8007eea:	9805      	ldr	r0, [sp, #20]
 8007eec:	f002 fd3a 	bl	800a964 <_Bfree>
 8007ef0:	e618      	b.n	8007b24 <_strtod_l+0x63c>
 8007ef2:	f1ba 0f01 	cmp.w	sl, #1
 8007ef6:	d103      	bne.n	8007f00 <_strtod_l+0xa18>
 8007ef8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	f43f ada5 	beq.w	8007a4a <_strtod_l+0x562>
 8007f00:	2200      	movs	r2, #0
 8007f02:	4b36      	ldr	r3, [pc, #216]	@ (8007fdc <_strtod_l+0xaf4>)
 8007f04:	2600      	movs	r6, #0
 8007f06:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007f0a:	4f30      	ldr	r7, [pc, #192]	@ (8007fcc <_strtod_l+0xae4>)
 8007f0c:	e7b3      	b.n	8007e76 <_strtod_l+0x98e>
 8007f0e:	2600      	movs	r6, #0
 8007f10:	4f2f      	ldr	r7, [pc, #188]	@ (8007fd0 <_strtod_l+0xae8>)
 8007f12:	e7ac      	b.n	8007e6e <_strtod_l+0x986>
 8007f14:	4630      	mov	r0, r6
 8007f16:	4639      	mov	r1, r7
 8007f18:	4b2d      	ldr	r3, [pc, #180]	@ (8007fd0 <_strtod_l+0xae8>)
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	f7f8 fae6 	bl	80004ec <__aeabi_dmul>
 8007f20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f22:	4606      	mov	r6, r0
 8007f24:	460f      	mov	r7, r1
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d0a1      	beq.n	8007e6e <_strtod_l+0x986>
 8007f2a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007f2e:	e7a2      	b.n	8007e76 <_strtod_l+0x98e>
 8007f30:	2200      	movs	r2, #0
 8007f32:	4b26      	ldr	r3, [pc, #152]	@ (8007fcc <_strtod_l+0xae4>)
 8007f34:	4616      	mov	r6, r2
 8007f36:	461f      	mov	r7, r3
 8007f38:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007f3c:	e79b      	b.n	8007e76 <_strtod_l+0x98e>
 8007f3e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007f42:	9b08      	ldr	r3, [sp, #32]
 8007f44:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d1c1      	bne.n	8007ed0 <_strtod_l+0x9e8>
 8007f4c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007f50:	0d1b      	lsrs	r3, r3, #20
 8007f52:	051b      	lsls	r3, r3, #20
 8007f54:	429d      	cmp	r5, r3
 8007f56:	d1bb      	bne.n	8007ed0 <_strtod_l+0x9e8>
 8007f58:	4630      	mov	r0, r6
 8007f5a:	4639      	mov	r1, r7
 8007f5c:	f7f9 f91e 	bl	800119c <__aeabi_d2lz>
 8007f60:	f7f8 fa96 	bl	8000490 <__aeabi_l2d>
 8007f64:	4602      	mov	r2, r0
 8007f66:	460b      	mov	r3, r1
 8007f68:	4630      	mov	r0, r6
 8007f6a:	4639      	mov	r1, r7
 8007f6c:	f7f8 f906 	bl	800017c <__aeabi_dsub>
 8007f70:	460b      	mov	r3, r1
 8007f72:	4602      	mov	r2, r0
 8007f74:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007f78:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007f7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f7e:	ea46 060a 	orr.w	r6, r6, sl
 8007f82:	431e      	orrs	r6, r3
 8007f84:	d069      	beq.n	800805a <_strtod_l+0xb72>
 8007f86:	a30a      	add	r3, pc, #40	@ (adr r3, 8007fb0 <_strtod_l+0xac8>)
 8007f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f8c:	f7f8 fd20 	bl	80009d0 <__aeabi_dcmplt>
 8007f90:	2800      	cmp	r0, #0
 8007f92:	f47f accf 	bne.w	8007934 <_strtod_l+0x44c>
 8007f96:	a308      	add	r3, pc, #32	@ (adr r3, 8007fb8 <_strtod_l+0xad0>)
 8007f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f9c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007fa0:	f7f8 fd34 	bl	8000a0c <__aeabi_dcmpgt>
 8007fa4:	2800      	cmp	r0, #0
 8007fa6:	d093      	beq.n	8007ed0 <_strtod_l+0x9e8>
 8007fa8:	e4c4      	b.n	8007934 <_strtod_l+0x44c>
 8007faa:	bf00      	nop
 8007fac:	f3af 8000 	nop.w
 8007fb0:	94a03595 	.word	0x94a03595
 8007fb4:	3fdfffff 	.word	0x3fdfffff
 8007fb8:	35afe535 	.word	0x35afe535
 8007fbc:	3fe00000 	.word	0x3fe00000
 8007fc0:	000fffff 	.word	0x000fffff
 8007fc4:	7ff00000 	.word	0x7ff00000
 8007fc8:	7fefffff 	.word	0x7fefffff
 8007fcc:	3ff00000 	.word	0x3ff00000
 8007fd0:	3fe00000 	.word	0x3fe00000
 8007fd4:	7fe00000 	.word	0x7fe00000
 8007fd8:	7c9fffff 	.word	0x7c9fffff
 8007fdc:	bff00000 	.word	0xbff00000
 8007fe0:	9b08      	ldr	r3, [sp, #32]
 8007fe2:	b323      	cbz	r3, 800802e <_strtod_l+0xb46>
 8007fe4:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007fe8:	d821      	bhi.n	800802e <_strtod_l+0xb46>
 8007fea:	a327      	add	r3, pc, #156	@ (adr r3, 8008088 <_strtod_l+0xba0>)
 8007fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff0:	4630      	mov	r0, r6
 8007ff2:	4639      	mov	r1, r7
 8007ff4:	f7f8 fcf6 	bl	80009e4 <__aeabi_dcmple>
 8007ff8:	b1a0      	cbz	r0, 8008024 <_strtod_l+0xb3c>
 8007ffa:	4639      	mov	r1, r7
 8007ffc:	4630      	mov	r0, r6
 8007ffe:	f7f8 fd4d 	bl	8000a9c <__aeabi_d2uiz>
 8008002:	2801      	cmp	r0, #1
 8008004:	bf38      	it	cc
 8008006:	2001      	movcc	r0, #1
 8008008:	f7f8 f9f6 	bl	80003f8 <__aeabi_ui2d>
 800800c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800800e:	4606      	mov	r6, r0
 8008010:	460f      	mov	r7, r1
 8008012:	b9fb      	cbnz	r3, 8008054 <_strtod_l+0xb6c>
 8008014:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008018:	9014      	str	r0, [sp, #80]	@ 0x50
 800801a:	9315      	str	r3, [sp, #84]	@ 0x54
 800801c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008020:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008024:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008026:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800802a:	1b5b      	subs	r3, r3, r5
 800802c:	9311      	str	r3, [sp, #68]	@ 0x44
 800802e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008032:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008036:	f002 ffc7 	bl	800afc8 <__ulp>
 800803a:	4602      	mov	r2, r0
 800803c:	460b      	mov	r3, r1
 800803e:	4650      	mov	r0, sl
 8008040:	4659      	mov	r1, fp
 8008042:	f7f8 fa53 	bl	80004ec <__aeabi_dmul>
 8008046:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800804a:	f7f8 f899 	bl	8000180 <__adddf3>
 800804e:	4682      	mov	sl, r0
 8008050:	468b      	mov	fp, r1
 8008052:	e776      	b.n	8007f42 <_strtod_l+0xa5a>
 8008054:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008058:	e7e0      	b.n	800801c <_strtod_l+0xb34>
 800805a:	a30d      	add	r3, pc, #52	@ (adr r3, 8008090 <_strtod_l+0xba8>)
 800805c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008060:	f7f8 fcb6 	bl	80009d0 <__aeabi_dcmplt>
 8008064:	e79e      	b.n	8007fa4 <_strtod_l+0xabc>
 8008066:	2300      	movs	r3, #0
 8008068:	930b      	str	r3, [sp, #44]	@ 0x2c
 800806a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800806c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800806e:	6013      	str	r3, [r2, #0]
 8008070:	f7ff ba77 	b.w	8007562 <_strtod_l+0x7a>
 8008074:	2a65      	cmp	r2, #101	@ 0x65
 8008076:	f43f ab6e 	beq.w	8007756 <_strtod_l+0x26e>
 800807a:	2a45      	cmp	r2, #69	@ 0x45
 800807c:	f43f ab6b 	beq.w	8007756 <_strtod_l+0x26e>
 8008080:	2301      	movs	r3, #1
 8008082:	f7ff bba6 	b.w	80077d2 <_strtod_l+0x2ea>
 8008086:	bf00      	nop
 8008088:	ffc00000 	.word	0xffc00000
 800808c:	41dfffff 	.word	0x41dfffff
 8008090:	94a03595 	.word	0x94a03595
 8008094:	3fcfffff 	.word	0x3fcfffff

08008098 <_strtod_r>:
 8008098:	4b01      	ldr	r3, [pc, #4]	@ (80080a0 <_strtod_r+0x8>)
 800809a:	f7ff ba25 	b.w	80074e8 <_strtod_l>
 800809e:	bf00      	nop
 80080a0:	20000024 	.word	0x20000024

080080a4 <strtof>:
 80080a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080a8:	4d24      	ldr	r5, [pc, #144]	@ (800813c <strtof+0x98>)
 80080aa:	460a      	mov	r2, r1
 80080ac:	4b24      	ldr	r3, [pc, #144]	@ (8008140 <strtof+0x9c>)
 80080ae:	4601      	mov	r1, r0
 80080b0:	6828      	ldr	r0, [r5, #0]
 80080b2:	f7ff fa19 	bl	80074e8 <_strtod_l>
 80080b6:	4602      	mov	r2, r0
 80080b8:	460b      	mov	r3, r1
 80080ba:	4606      	mov	r6, r0
 80080bc:	460f      	mov	r7, r1
 80080be:	f7f8 fcaf 	bl	8000a20 <__aeabi_dcmpun>
 80080c2:	b168      	cbz	r0, 80080e0 <strtof+0x3c>
 80080c4:	2f00      	cmp	r7, #0
 80080c6:	481f      	ldr	r0, [pc, #124]	@ (8008144 <strtof+0xa0>)
 80080c8:	da06      	bge.n	80080d8 <strtof+0x34>
 80080ca:	f001 f96d 	bl	80093a8 <nanf>
 80080ce:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 80080d2:	4620      	mov	r0, r4
 80080d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080d8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080dc:	f001 b964 	b.w	80093a8 <nanf>
 80080e0:	4639      	mov	r1, r7
 80080e2:	4630      	mov	r0, r6
 80080e4:	f7f8 fcfa 	bl	8000adc <__aeabi_d2f>
 80080e8:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 80080ec:	4604      	mov	r4, r0
 80080ee:	4916      	ldr	r1, [pc, #88]	@ (8008148 <strtof+0xa4>)
 80080f0:	4640      	mov	r0, r8
 80080f2:	f7f9 f817 	bl	8001124 <__aeabi_fcmpun>
 80080f6:	b9b0      	cbnz	r0, 8008126 <strtof+0x82>
 80080f8:	4640      	mov	r0, r8
 80080fa:	4913      	ldr	r1, [pc, #76]	@ (8008148 <strtof+0xa4>)
 80080fc:	f7f8 fff4 	bl	80010e8 <__aeabi_fcmple>
 8008100:	b988      	cbnz	r0, 8008126 <strtof+0x82>
 8008102:	f027 4900 	bic.w	r9, r7, #2147483648	@ 0x80000000
 8008106:	f04f 32ff 	mov.w	r2, #4294967295
 800810a:	4630      	mov	r0, r6
 800810c:	4649      	mov	r1, r9
 800810e:	4b0f      	ldr	r3, [pc, #60]	@ (800814c <strtof+0xa8>)
 8008110:	f7f8 fc86 	bl	8000a20 <__aeabi_dcmpun>
 8008114:	b970      	cbnz	r0, 8008134 <strtof+0x90>
 8008116:	f04f 32ff 	mov.w	r2, #4294967295
 800811a:	4630      	mov	r0, r6
 800811c:	4649      	mov	r1, r9
 800811e:	4b0b      	ldr	r3, [pc, #44]	@ (800814c <strtof+0xa8>)
 8008120:	f7f8 fc60 	bl	80009e4 <__aeabi_dcmple>
 8008124:	b930      	cbnz	r0, 8008134 <strtof+0x90>
 8008126:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 800812a:	d1d2      	bne.n	80080d2 <strtof+0x2e>
 800812c:	4b08      	ldr	r3, [pc, #32]	@ (8008150 <strtof+0xac>)
 800812e:	403b      	ands	r3, r7
 8008130:	2b00      	cmp	r3, #0
 8008132:	d0ce      	beq.n	80080d2 <strtof+0x2e>
 8008134:	2222      	movs	r2, #34	@ 0x22
 8008136:	682b      	ldr	r3, [r5, #0]
 8008138:	601a      	str	r2, [r3, #0]
 800813a:	e7ca      	b.n	80080d2 <strtof+0x2e>
 800813c:	20000190 	.word	0x20000190
 8008140:	20000024 	.word	0x20000024
 8008144:	0800c88c 	.word	0x0800c88c
 8008148:	7f7fffff 	.word	0x7f7fffff
 800814c:	7fefffff 	.word	0x7fefffff
 8008150:	7ff00000 	.word	0x7ff00000

08008154 <_strtoul_l.constprop.0>:
 8008154:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008158:	4686      	mov	lr, r0
 800815a:	460d      	mov	r5, r1
 800815c:	4e33      	ldr	r6, [pc, #204]	@ (800822c <_strtoul_l.constprop.0+0xd8>)
 800815e:	4628      	mov	r0, r5
 8008160:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008164:	5d37      	ldrb	r7, [r6, r4]
 8008166:	f017 0708 	ands.w	r7, r7, #8
 800816a:	d1f8      	bne.n	800815e <_strtoul_l.constprop.0+0xa>
 800816c:	2c2d      	cmp	r4, #45	@ 0x2d
 800816e:	d12f      	bne.n	80081d0 <_strtoul_l.constprop.0+0x7c>
 8008170:	2701      	movs	r7, #1
 8008172:	782c      	ldrb	r4, [r5, #0]
 8008174:	1c85      	adds	r5, r0, #2
 8008176:	f033 0010 	bics.w	r0, r3, #16
 800817a:	d109      	bne.n	8008190 <_strtoul_l.constprop.0+0x3c>
 800817c:	2c30      	cmp	r4, #48	@ 0x30
 800817e:	d12c      	bne.n	80081da <_strtoul_l.constprop.0+0x86>
 8008180:	7828      	ldrb	r0, [r5, #0]
 8008182:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8008186:	2858      	cmp	r0, #88	@ 0x58
 8008188:	d127      	bne.n	80081da <_strtoul_l.constprop.0+0x86>
 800818a:	2310      	movs	r3, #16
 800818c:	786c      	ldrb	r4, [r5, #1]
 800818e:	3502      	adds	r5, #2
 8008190:	f04f 38ff 	mov.w	r8, #4294967295
 8008194:	fbb8 f8f3 	udiv	r8, r8, r3
 8008198:	2600      	movs	r6, #0
 800819a:	fb03 f908 	mul.w	r9, r3, r8
 800819e:	4630      	mov	r0, r6
 80081a0:	ea6f 0909 	mvn.w	r9, r9
 80081a4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80081a8:	f1bc 0f09 	cmp.w	ip, #9
 80081ac:	d81c      	bhi.n	80081e8 <_strtoul_l.constprop.0+0x94>
 80081ae:	4664      	mov	r4, ip
 80081b0:	42a3      	cmp	r3, r4
 80081b2:	dd2a      	ble.n	800820a <_strtoul_l.constprop.0+0xb6>
 80081b4:	f1b6 3fff 	cmp.w	r6, #4294967295
 80081b8:	d007      	beq.n	80081ca <_strtoul_l.constprop.0+0x76>
 80081ba:	4580      	cmp	r8, r0
 80081bc:	d322      	bcc.n	8008204 <_strtoul_l.constprop.0+0xb0>
 80081be:	d101      	bne.n	80081c4 <_strtoul_l.constprop.0+0x70>
 80081c0:	45a1      	cmp	r9, r4
 80081c2:	db1f      	blt.n	8008204 <_strtoul_l.constprop.0+0xb0>
 80081c4:	2601      	movs	r6, #1
 80081c6:	fb00 4003 	mla	r0, r0, r3, r4
 80081ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 80081ce:	e7e9      	b.n	80081a4 <_strtoul_l.constprop.0+0x50>
 80081d0:	2c2b      	cmp	r4, #43	@ 0x2b
 80081d2:	bf04      	itt	eq
 80081d4:	782c      	ldrbeq	r4, [r5, #0]
 80081d6:	1c85      	addeq	r5, r0, #2
 80081d8:	e7cd      	b.n	8008176 <_strtoul_l.constprop.0+0x22>
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d1d8      	bne.n	8008190 <_strtoul_l.constprop.0+0x3c>
 80081de:	2c30      	cmp	r4, #48	@ 0x30
 80081e0:	bf0c      	ite	eq
 80081e2:	2308      	moveq	r3, #8
 80081e4:	230a      	movne	r3, #10
 80081e6:	e7d3      	b.n	8008190 <_strtoul_l.constprop.0+0x3c>
 80081e8:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80081ec:	f1bc 0f19 	cmp.w	ip, #25
 80081f0:	d801      	bhi.n	80081f6 <_strtoul_l.constprop.0+0xa2>
 80081f2:	3c37      	subs	r4, #55	@ 0x37
 80081f4:	e7dc      	b.n	80081b0 <_strtoul_l.constprop.0+0x5c>
 80081f6:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80081fa:	f1bc 0f19 	cmp.w	ip, #25
 80081fe:	d804      	bhi.n	800820a <_strtoul_l.constprop.0+0xb6>
 8008200:	3c57      	subs	r4, #87	@ 0x57
 8008202:	e7d5      	b.n	80081b0 <_strtoul_l.constprop.0+0x5c>
 8008204:	f04f 36ff 	mov.w	r6, #4294967295
 8008208:	e7df      	b.n	80081ca <_strtoul_l.constprop.0+0x76>
 800820a:	1c73      	adds	r3, r6, #1
 800820c:	d106      	bne.n	800821c <_strtoul_l.constprop.0+0xc8>
 800820e:	2322      	movs	r3, #34	@ 0x22
 8008210:	4630      	mov	r0, r6
 8008212:	f8ce 3000 	str.w	r3, [lr]
 8008216:	b932      	cbnz	r2, 8008226 <_strtoul_l.constprop.0+0xd2>
 8008218:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800821c:	b107      	cbz	r7, 8008220 <_strtoul_l.constprop.0+0xcc>
 800821e:	4240      	negs	r0, r0
 8008220:	2a00      	cmp	r2, #0
 8008222:	d0f9      	beq.n	8008218 <_strtoul_l.constprop.0+0xc4>
 8008224:	b106      	cbz	r6, 8008228 <_strtoul_l.constprop.0+0xd4>
 8008226:	1e69      	subs	r1, r5, #1
 8008228:	6011      	str	r1, [r2, #0]
 800822a:	e7f5      	b.n	8008218 <_strtoul_l.constprop.0+0xc4>
 800822c:	0800c4b9 	.word	0x0800c4b9

08008230 <strtoul>:
 8008230:	4613      	mov	r3, r2
 8008232:	460a      	mov	r2, r1
 8008234:	4601      	mov	r1, r0
 8008236:	4802      	ldr	r0, [pc, #8]	@ (8008240 <strtoul+0x10>)
 8008238:	6800      	ldr	r0, [r0, #0]
 800823a:	f7ff bf8b 	b.w	8008154 <_strtoul_l.constprop.0>
 800823e:	bf00      	nop
 8008240:	20000190 	.word	0x20000190

08008244 <__cvt>:
 8008244:	2b00      	cmp	r3, #0
 8008246:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800824a:	461d      	mov	r5, r3
 800824c:	bfbb      	ittet	lt
 800824e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8008252:	461d      	movlt	r5, r3
 8008254:	2300      	movge	r3, #0
 8008256:	232d      	movlt	r3, #45	@ 0x2d
 8008258:	b088      	sub	sp, #32
 800825a:	4614      	mov	r4, r2
 800825c:	bfb8      	it	lt
 800825e:	4614      	movlt	r4, r2
 8008260:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008262:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8008264:	7013      	strb	r3, [r2, #0]
 8008266:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008268:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800826c:	f023 0820 	bic.w	r8, r3, #32
 8008270:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008274:	d005      	beq.n	8008282 <__cvt+0x3e>
 8008276:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800827a:	d100      	bne.n	800827e <__cvt+0x3a>
 800827c:	3601      	adds	r6, #1
 800827e:	2302      	movs	r3, #2
 8008280:	e000      	b.n	8008284 <__cvt+0x40>
 8008282:	2303      	movs	r3, #3
 8008284:	aa07      	add	r2, sp, #28
 8008286:	9204      	str	r2, [sp, #16]
 8008288:	aa06      	add	r2, sp, #24
 800828a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800828e:	e9cd 3600 	strd	r3, r6, [sp]
 8008292:	4622      	mov	r2, r4
 8008294:	462b      	mov	r3, r5
 8008296:	f001 f913 	bl	80094c0 <_dtoa_r>
 800829a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800829e:	4607      	mov	r7, r0
 80082a0:	d119      	bne.n	80082d6 <__cvt+0x92>
 80082a2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80082a4:	07db      	lsls	r3, r3, #31
 80082a6:	d50e      	bpl.n	80082c6 <__cvt+0x82>
 80082a8:	eb00 0906 	add.w	r9, r0, r6
 80082ac:	2200      	movs	r2, #0
 80082ae:	2300      	movs	r3, #0
 80082b0:	4620      	mov	r0, r4
 80082b2:	4629      	mov	r1, r5
 80082b4:	f7f8 fb82 	bl	80009bc <__aeabi_dcmpeq>
 80082b8:	b108      	cbz	r0, 80082be <__cvt+0x7a>
 80082ba:	f8cd 901c 	str.w	r9, [sp, #28]
 80082be:	2230      	movs	r2, #48	@ 0x30
 80082c0:	9b07      	ldr	r3, [sp, #28]
 80082c2:	454b      	cmp	r3, r9
 80082c4:	d31e      	bcc.n	8008304 <__cvt+0xc0>
 80082c6:	4638      	mov	r0, r7
 80082c8:	9b07      	ldr	r3, [sp, #28]
 80082ca:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80082cc:	1bdb      	subs	r3, r3, r7
 80082ce:	6013      	str	r3, [r2, #0]
 80082d0:	b008      	add	sp, #32
 80082d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082d6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80082da:	eb00 0906 	add.w	r9, r0, r6
 80082de:	d1e5      	bne.n	80082ac <__cvt+0x68>
 80082e0:	7803      	ldrb	r3, [r0, #0]
 80082e2:	2b30      	cmp	r3, #48	@ 0x30
 80082e4:	d10a      	bne.n	80082fc <__cvt+0xb8>
 80082e6:	2200      	movs	r2, #0
 80082e8:	2300      	movs	r3, #0
 80082ea:	4620      	mov	r0, r4
 80082ec:	4629      	mov	r1, r5
 80082ee:	f7f8 fb65 	bl	80009bc <__aeabi_dcmpeq>
 80082f2:	b918      	cbnz	r0, 80082fc <__cvt+0xb8>
 80082f4:	f1c6 0601 	rsb	r6, r6, #1
 80082f8:	f8ca 6000 	str.w	r6, [sl]
 80082fc:	f8da 3000 	ldr.w	r3, [sl]
 8008300:	4499      	add	r9, r3
 8008302:	e7d3      	b.n	80082ac <__cvt+0x68>
 8008304:	1c59      	adds	r1, r3, #1
 8008306:	9107      	str	r1, [sp, #28]
 8008308:	701a      	strb	r2, [r3, #0]
 800830a:	e7d9      	b.n	80082c0 <__cvt+0x7c>

0800830c <__exponent>:
 800830c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800830e:	2900      	cmp	r1, #0
 8008310:	bfb6      	itet	lt
 8008312:	232d      	movlt	r3, #45	@ 0x2d
 8008314:	232b      	movge	r3, #43	@ 0x2b
 8008316:	4249      	neglt	r1, r1
 8008318:	2909      	cmp	r1, #9
 800831a:	7002      	strb	r2, [r0, #0]
 800831c:	7043      	strb	r3, [r0, #1]
 800831e:	dd29      	ble.n	8008374 <__exponent+0x68>
 8008320:	f10d 0307 	add.w	r3, sp, #7
 8008324:	461d      	mov	r5, r3
 8008326:	270a      	movs	r7, #10
 8008328:	fbb1 f6f7 	udiv	r6, r1, r7
 800832c:	461a      	mov	r2, r3
 800832e:	fb07 1416 	mls	r4, r7, r6, r1
 8008332:	3430      	adds	r4, #48	@ 0x30
 8008334:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008338:	460c      	mov	r4, r1
 800833a:	2c63      	cmp	r4, #99	@ 0x63
 800833c:	4631      	mov	r1, r6
 800833e:	f103 33ff 	add.w	r3, r3, #4294967295
 8008342:	dcf1      	bgt.n	8008328 <__exponent+0x1c>
 8008344:	3130      	adds	r1, #48	@ 0x30
 8008346:	1e94      	subs	r4, r2, #2
 8008348:	f803 1c01 	strb.w	r1, [r3, #-1]
 800834c:	4623      	mov	r3, r4
 800834e:	1c41      	adds	r1, r0, #1
 8008350:	42ab      	cmp	r3, r5
 8008352:	d30a      	bcc.n	800836a <__exponent+0x5e>
 8008354:	f10d 0309 	add.w	r3, sp, #9
 8008358:	1a9b      	subs	r3, r3, r2
 800835a:	42ac      	cmp	r4, r5
 800835c:	bf88      	it	hi
 800835e:	2300      	movhi	r3, #0
 8008360:	3302      	adds	r3, #2
 8008362:	4403      	add	r3, r0
 8008364:	1a18      	subs	r0, r3, r0
 8008366:	b003      	add	sp, #12
 8008368:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800836a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800836e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008372:	e7ed      	b.n	8008350 <__exponent+0x44>
 8008374:	2330      	movs	r3, #48	@ 0x30
 8008376:	3130      	adds	r1, #48	@ 0x30
 8008378:	7083      	strb	r3, [r0, #2]
 800837a:	70c1      	strb	r1, [r0, #3]
 800837c:	1d03      	adds	r3, r0, #4
 800837e:	e7f1      	b.n	8008364 <__exponent+0x58>

08008380 <_printf_float>:
 8008380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008384:	b091      	sub	sp, #68	@ 0x44
 8008386:	460c      	mov	r4, r1
 8008388:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800838c:	4616      	mov	r6, r2
 800838e:	461f      	mov	r7, r3
 8008390:	4605      	mov	r5, r0
 8008392:	f000 ff67 	bl	8009264 <_localeconv_r>
 8008396:	6803      	ldr	r3, [r0, #0]
 8008398:	4618      	mov	r0, r3
 800839a:	9308      	str	r3, [sp, #32]
 800839c:	f7f7 fee2 	bl	8000164 <strlen>
 80083a0:	2300      	movs	r3, #0
 80083a2:	930e      	str	r3, [sp, #56]	@ 0x38
 80083a4:	f8d8 3000 	ldr.w	r3, [r8]
 80083a8:	9009      	str	r0, [sp, #36]	@ 0x24
 80083aa:	3307      	adds	r3, #7
 80083ac:	f023 0307 	bic.w	r3, r3, #7
 80083b0:	f103 0208 	add.w	r2, r3, #8
 80083b4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80083b8:	f8d4 b000 	ldr.w	fp, [r4]
 80083bc:	f8c8 2000 	str.w	r2, [r8]
 80083c0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80083c4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80083c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80083ca:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80083ce:	f04f 32ff 	mov.w	r2, #4294967295
 80083d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80083d6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80083da:	4b9c      	ldr	r3, [pc, #624]	@ (800864c <_printf_float+0x2cc>)
 80083dc:	f7f8 fb20 	bl	8000a20 <__aeabi_dcmpun>
 80083e0:	bb70      	cbnz	r0, 8008440 <_printf_float+0xc0>
 80083e2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80083e6:	f04f 32ff 	mov.w	r2, #4294967295
 80083ea:	4b98      	ldr	r3, [pc, #608]	@ (800864c <_printf_float+0x2cc>)
 80083ec:	f7f8 fafa 	bl	80009e4 <__aeabi_dcmple>
 80083f0:	bb30      	cbnz	r0, 8008440 <_printf_float+0xc0>
 80083f2:	2200      	movs	r2, #0
 80083f4:	2300      	movs	r3, #0
 80083f6:	4640      	mov	r0, r8
 80083f8:	4649      	mov	r1, r9
 80083fa:	f7f8 fae9 	bl	80009d0 <__aeabi_dcmplt>
 80083fe:	b110      	cbz	r0, 8008406 <_printf_float+0x86>
 8008400:	232d      	movs	r3, #45	@ 0x2d
 8008402:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008406:	4a92      	ldr	r2, [pc, #584]	@ (8008650 <_printf_float+0x2d0>)
 8008408:	4b92      	ldr	r3, [pc, #584]	@ (8008654 <_printf_float+0x2d4>)
 800840a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800840e:	bf94      	ite	ls
 8008410:	4690      	movls	r8, r2
 8008412:	4698      	movhi	r8, r3
 8008414:	2303      	movs	r3, #3
 8008416:	f04f 0900 	mov.w	r9, #0
 800841a:	6123      	str	r3, [r4, #16]
 800841c:	f02b 0304 	bic.w	r3, fp, #4
 8008420:	6023      	str	r3, [r4, #0]
 8008422:	4633      	mov	r3, r6
 8008424:	4621      	mov	r1, r4
 8008426:	4628      	mov	r0, r5
 8008428:	9700      	str	r7, [sp, #0]
 800842a:	aa0f      	add	r2, sp, #60	@ 0x3c
 800842c:	f000 f9d4 	bl	80087d8 <_printf_common>
 8008430:	3001      	adds	r0, #1
 8008432:	f040 8090 	bne.w	8008556 <_printf_float+0x1d6>
 8008436:	f04f 30ff 	mov.w	r0, #4294967295
 800843a:	b011      	add	sp, #68	@ 0x44
 800843c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008440:	4642      	mov	r2, r8
 8008442:	464b      	mov	r3, r9
 8008444:	4640      	mov	r0, r8
 8008446:	4649      	mov	r1, r9
 8008448:	f7f8 faea 	bl	8000a20 <__aeabi_dcmpun>
 800844c:	b148      	cbz	r0, 8008462 <_printf_float+0xe2>
 800844e:	464b      	mov	r3, r9
 8008450:	2b00      	cmp	r3, #0
 8008452:	bfb8      	it	lt
 8008454:	232d      	movlt	r3, #45	@ 0x2d
 8008456:	4a80      	ldr	r2, [pc, #512]	@ (8008658 <_printf_float+0x2d8>)
 8008458:	bfb8      	it	lt
 800845a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800845e:	4b7f      	ldr	r3, [pc, #508]	@ (800865c <_printf_float+0x2dc>)
 8008460:	e7d3      	b.n	800840a <_printf_float+0x8a>
 8008462:	6863      	ldr	r3, [r4, #4]
 8008464:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8008468:	1c5a      	adds	r2, r3, #1
 800846a:	d13f      	bne.n	80084ec <_printf_float+0x16c>
 800846c:	2306      	movs	r3, #6
 800846e:	6063      	str	r3, [r4, #4]
 8008470:	2200      	movs	r2, #0
 8008472:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8008476:	6023      	str	r3, [r4, #0]
 8008478:	9206      	str	r2, [sp, #24]
 800847a:	aa0e      	add	r2, sp, #56	@ 0x38
 800847c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8008480:	aa0d      	add	r2, sp, #52	@ 0x34
 8008482:	9203      	str	r2, [sp, #12]
 8008484:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8008488:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800848c:	6863      	ldr	r3, [r4, #4]
 800848e:	4642      	mov	r2, r8
 8008490:	9300      	str	r3, [sp, #0]
 8008492:	4628      	mov	r0, r5
 8008494:	464b      	mov	r3, r9
 8008496:	910a      	str	r1, [sp, #40]	@ 0x28
 8008498:	f7ff fed4 	bl	8008244 <__cvt>
 800849c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800849e:	4680      	mov	r8, r0
 80084a0:	2947      	cmp	r1, #71	@ 0x47
 80084a2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80084a4:	d128      	bne.n	80084f8 <_printf_float+0x178>
 80084a6:	1cc8      	adds	r0, r1, #3
 80084a8:	db02      	blt.n	80084b0 <_printf_float+0x130>
 80084aa:	6863      	ldr	r3, [r4, #4]
 80084ac:	4299      	cmp	r1, r3
 80084ae:	dd40      	ble.n	8008532 <_printf_float+0x1b2>
 80084b0:	f1aa 0a02 	sub.w	sl, sl, #2
 80084b4:	fa5f fa8a 	uxtb.w	sl, sl
 80084b8:	4652      	mov	r2, sl
 80084ba:	3901      	subs	r1, #1
 80084bc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80084c0:	910d      	str	r1, [sp, #52]	@ 0x34
 80084c2:	f7ff ff23 	bl	800830c <__exponent>
 80084c6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80084c8:	4681      	mov	r9, r0
 80084ca:	1813      	adds	r3, r2, r0
 80084cc:	2a01      	cmp	r2, #1
 80084ce:	6123      	str	r3, [r4, #16]
 80084d0:	dc02      	bgt.n	80084d8 <_printf_float+0x158>
 80084d2:	6822      	ldr	r2, [r4, #0]
 80084d4:	07d2      	lsls	r2, r2, #31
 80084d6:	d501      	bpl.n	80084dc <_printf_float+0x15c>
 80084d8:	3301      	adds	r3, #1
 80084da:	6123      	str	r3, [r4, #16]
 80084dc:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d09e      	beq.n	8008422 <_printf_float+0xa2>
 80084e4:	232d      	movs	r3, #45	@ 0x2d
 80084e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80084ea:	e79a      	b.n	8008422 <_printf_float+0xa2>
 80084ec:	2947      	cmp	r1, #71	@ 0x47
 80084ee:	d1bf      	bne.n	8008470 <_printf_float+0xf0>
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d1bd      	bne.n	8008470 <_printf_float+0xf0>
 80084f4:	2301      	movs	r3, #1
 80084f6:	e7ba      	b.n	800846e <_printf_float+0xee>
 80084f8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80084fc:	d9dc      	bls.n	80084b8 <_printf_float+0x138>
 80084fe:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008502:	d118      	bne.n	8008536 <_printf_float+0x1b6>
 8008504:	2900      	cmp	r1, #0
 8008506:	6863      	ldr	r3, [r4, #4]
 8008508:	dd0b      	ble.n	8008522 <_printf_float+0x1a2>
 800850a:	6121      	str	r1, [r4, #16]
 800850c:	b913      	cbnz	r3, 8008514 <_printf_float+0x194>
 800850e:	6822      	ldr	r2, [r4, #0]
 8008510:	07d0      	lsls	r0, r2, #31
 8008512:	d502      	bpl.n	800851a <_printf_float+0x19a>
 8008514:	3301      	adds	r3, #1
 8008516:	440b      	add	r3, r1
 8008518:	6123      	str	r3, [r4, #16]
 800851a:	f04f 0900 	mov.w	r9, #0
 800851e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008520:	e7dc      	b.n	80084dc <_printf_float+0x15c>
 8008522:	b913      	cbnz	r3, 800852a <_printf_float+0x1aa>
 8008524:	6822      	ldr	r2, [r4, #0]
 8008526:	07d2      	lsls	r2, r2, #31
 8008528:	d501      	bpl.n	800852e <_printf_float+0x1ae>
 800852a:	3302      	adds	r3, #2
 800852c:	e7f4      	b.n	8008518 <_printf_float+0x198>
 800852e:	2301      	movs	r3, #1
 8008530:	e7f2      	b.n	8008518 <_printf_float+0x198>
 8008532:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008536:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008538:	4299      	cmp	r1, r3
 800853a:	db05      	blt.n	8008548 <_printf_float+0x1c8>
 800853c:	6823      	ldr	r3, [r4, #0]
 800853e:	6121      	str	r1, [r4, #16]
 8008540:	07d8      	lsls	r0, r3, #31
 8008542:	d5ea      	bpl.n	800851a <_printf_float+0x19a>
 8008544:	1c4b      	adds	r3, r1, #1
 8008546:	e7e7      	b.n	8008518 <_printf_float+0x198>
 8008548:	2900      	cmp	r1, #0
 800854a:	bfcc      	ite	gt
 800854c:	2201      	movgt	r2, #1
 800854e:	f1c1 0202 	rsble	r2, r1, #2
 8008552:	4413      	add	r3, r2
 8008554:	e7e0      	b.n	8008518 <_printf_float+0x198>
 8008556:	6823      	ldr	r3, [r4, #0]
 8008558:	055a      	lsls	r2, r3, #21
 800855a:	d407      	bmi.n	800856c <_printf_float+0x1ec>
 800855c:	6923      	ldr	r3, [r4, #16]
 800855e:	4642      	mov	r2, r8
 8008560:	4631      	mov	r1, r6
 8008562:	4628      	mov	r0, r5
 8008564:	47b8      	blx	r7
 8008566:	3001      	adds	r0, #1
 8008568:	d12b      	bne.n	80085c2 <_printf_float+0x242>
 800856a:	e764      	b.n	8008436 <_printf_float+0xb6>
 800856c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008570:	f240 80dc 	bls.w	800872c <_printf_float+0x3ac>
 8008574:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008578:	2200      	movs	r2, #0
 800857a:	2300      	movs	r3, #0
 800857c:	f7f8 fa1e 	bl	80009bc <__aeabi_dcmpeq>
 8008580:	2800      	cmp	r0, #0
 8008582:	d033      	beq.n	80085ec <_printf_float+0x26c>
 8008584:	2301      	movs	r3, #1
 8008586:	4631      	mov	r1, r6
 8008588:	4628      	mov	r0, r5
 800858a:	4a35      	ldr	r2, [pc, #212]	@ (8008660 <_printf_float+0x2e0>)
 800858c:	47b8      	blx	r7
 800858e:	3001      	adds	r0, #1
 8008590:	f43f af51 	beq.w	8008436 <_printf_float+0xb6>
 8008594:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8008598:	4543      	cmp	r3, r8
 800859a:	db02      	blt.n	80085a2 <_printf_float+0x222>
 800859c:	6823      	ldr	r3, [r4, #0]
 800859e:	07d8      	lsls	r0, r3, #31
 80085a0:	d50f      	bpl.n	80085c2 <_printf_float+0x242>
 80085a2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80085a6:	4631      	mov	r1, r6
 80085a8:	4628      	mov	r0, r5
 80085aa:	47b8      	blx	r7
 80085ac:	3001      	adds	r0, #1
 80085ae:	f43f af42 	beq.w	8008436 <_printf_float+0xb6>
 80085b2:	f04f 0900 	mov.w	r9, #0
 80085b6:	f108 38ff 	add.w	r8, r8, #4294967295
 80085ba:	f104 0a1a 	add.w	sl, r4, #26
 80085be:	45c8      	cmp	r8, r9
 80085c0:	dc09      	bgt.n	80085d6 <_printf_float+0x256>
 80085c2:	6823      	ldr	r3, [r4, #0]
 80085c4:	079b      	lsls	r3, r3, #30
 80085c6:	f100 8102 	bmi.w	80087ce <_printf_float+0x44e>
 80085ca:	68e0      	ldr	r0, [r4, #12]
 80085cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80085ce:	4298      	cmp	r0, r3
 80085d0:	bfb8      	it	lt
 80085d2:	4618      	movlt	r0, r3
 80085d4:	e731      	b.n	800843a <_printf_float+0xba>
 80085d6:	2301      	movs	r3, #1
 80085d8:	4652      	mov	r2, sl
 80085da:	4631      	mov	r1, r6
 80085dc:	4628      	mov	r0, r5
 80085de:	47b8      	blx	r7
 80085e0:	3001      	adds	r0, #1
 80085e2:	f43f af28 	beq.w	8008436 <_printf_float+0xb6>
 80085e6:	f109 0901 	add.w	r9, r9, #1
 80085ea:	e7e8      	b.n	80085be <_printf_float+0x23e>
 80085ec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	dc38      	bgt.n	8008664 <_printf_float+0x2e4>
 80085f2:	2301      	movs	r3, #1
 80085f4:	4631      	mov	r1, r6
 80085f6:	4628      	mov	r0, r5
 80085f8:	4a19      	ldr	r2, [pc, #100]	@ (8008660 <_printf_float+0x2e0>)
 80085fa:	47b8      	blx	r7
 80085fc:	3001      	adds	r0, #1
 80085fe:	f43f af1a 	beq.w	8008436 <_printf_float+0xb6>
 8008602:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8008606:	ea59 0303 	orrs.w	r3, r9, r3
 800860a:	d102      	bne.n	8008612 <_printf_float+0x292>
 800860c:	6823      	ldr	r3, [r4, #0]
 800860e:	07d9      	lsls	r1, r3, #31
 8008610:	d5d7      	bpl.n	80085c2 <_printf_float+0x242>
 8008612:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008616:	4631      	mov	r1, r6
 8008618:	4628      	mov	r0, r5
 800861a:	47b8      	blx	r7
 800861c:	3001      	adds	r0, #1
 800861e:	f43f af0a 	beq.w	8008436 <_printf_float+0xb6>
 8008622:	f04f 0a00 	mov.w	sl, #0
 8008626:	f104 0b1a 	add.w	fp, r4, #26
 800862a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800862c:	425b      	negs	r3, r3
 800862e:	4553      	cmp	r3, sl
 8008630:	dc01      	bgt.n	8008636 <_printf_float+0x2b6>
 8008632:	464b      	mov	r3, r9
 8008634:	e793      	b.n	800855e <_printf_float+0x1de>
 8008636:	2301      	movs	r3, #1
 8008638:	465a      	mov	r2, fp
 800863a:	4631      	mov	r1, r6
 800863c:	4628      	mov	r0, r5
 800863e:	47b8      	blx	r7
 8008640:	3001      	adds	r0, #1
 8008642:	f43f aef8 	beq.w	8008436 <_printf_float+0xb6>
 8008646:	f10a 0a01 	add.w	sl, sl, #1
 800864a:	e7ee      	b.n	800862a <_printf_float+0x2aa>
 800864c:	7fefffff 	.word	0x7fefffff
 8008650:	0800c5b9 	.word	0x0800c5b9
 8008654:	0800c5bd 	.word	0x0800c5bd
 8008658:	0800c5c1 	.word	0x0800c5c1
 800865c:	0800c5c5 	.word	0x0800c5c5
 8008660:	0800c5c9 	.word	0x0800c5c9
 8008664:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008666:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800866a:	4553      	cmp	r3, sl
 800866c:	bfa8      	it	ge
 800866e:	4653      	movge	r3, sl
 8008670:	2b00      	cmp	r3, #0
 8008672:	4699      	mov	r9, r3
 8008674:	dc36      	bgt.n	80086e4 <_printf_float+0x364>
 8008676:	f04f 0b00 	mov.w	fp, #0
 800867a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800867e:	f104 021a 	add.w	r2, r4, #26
 8008682:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008684:	930a      	str	r3, [sp, #40]	@ 0x28
 8008686:	eba3 0309 	sub.w	r3, r3, r9
 800868a:	455b      	cmp	r3, fp
 800868c:	dc31      	bgt.n	80086f2 <_printf_float+0x372>
 800868e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008690:	459a      	cmp	sl, r3
 8008692:	dc3a      	bgt.n	800870a <_printf_float+0x38a>
 8008694:	6823      	ldr	r3, [r4, #0]
 8008696:	07da      	lsls	r2, r3, #31
 8008698:	d437      	bmi.n	800870a <_printf_float+0x38a>
 800869a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800869c:	ebaa 0903 	sub.w	r9, sl, r3
 80086a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80086a2:	ebaa 0303 	sub.w	r3, sl, r3
 80086a6:	4599      	cmp	r9, r3
 80086a8:	bfa8      	it	ge
 80086aa:	4699      	movge	r9, r3
 80086ac:	f1b9 0f00 	cmp.w	r9, #0
 80086b0:	dc33      	bgt.n	800871a <_printf_float+0x39a>
 80086b2:	f04f 0800 	mov.w	r8, #0
 80086b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80086ba:	f104 0b1a 	add.w	fp, r4, #26
 80086be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80086c0:	ebaa 0303 	sub.w	r3, sl, r3
 80086c4:	eba3 0309 	sub.w	r3, r3, r9
 80086c8:	4543      	cmp	r3, r8
 80086ca:	f77f af7a 	ble.w	80085c2 <_printf_float+0x242>
 80086ce:	2301      	movs	r3, #1
 80086d0:	465a      	mov	r2, fp
 80086d2:	4631      	mov	r1, r6
 80086d4:	4628      	mov	r0, r5
 80086d6:	47b8      	blx	r7
 80086d8:	3001      	adds	r0, #1
 80086da:	f43f aeac 	beq.w	8008436 <_printf_float+0xb6>
 80086de:	f108 0801 	add.w	r8, r8, #1
 80086e2:	e7ec      	b.n	80086be <_printf_float+0x33e>
 80086e4:	4642      	mov	r2, r8
 80086e6:	4631      	mov	r1, r6
 80086e8:	4628      	mov	r0, r5
 80086ea:	47b8      	blx	r7
 80086ec:	3001      	adds	r0, #1
 80086ee:	d1c2      	bne.n	8008676 <_printf_float+0x2f6>
 80086f0:	e6a1      	b.n	8008436 <_printf_float+0xb6>
 80086f2:	2301      	movs	r3, #1
 80086f4:	4631      	mov	r1, r6
 80086f6:	4628      	mov	r0, r5
 80086f8:	920a      	str	r2, [sp, #40]	@ 0x28
 80086fa:	47b8      	blx	r7
 80086fc:	3001      	adds	r0, #1
 80086fe:	f43f ae9a 	beq.w	8008436 <_printf_float+0xb6>
 8008702:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008704:	f10b 0b01 	add.w	fp, fp, #1
 8008708:	e7bb      	b.n	8008682 <_printf_float+0x302>
 800870a:	4631      	mov	r1, r6
 800870c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008710:	4628      	mov	r0, r5
 8008712:	47b8      	blx	r7
 8008714:	3001      	adds	r0, #1
 8008716:	d1c0      	bne.n	800869a <_printf_float+0x31a>
 8008718:	e68d      	b.n	8008436 <_printf_float+0xb6>
 800871a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800871c:	464b      	mov	r3, r9
 800871e:	4631      	mov	r1, r6
 8008720:	4628      	mov	r0, r5
 8008722:	4442      	add	r2, r8
 8008724:	47b8      	blx	r7
 8008726:	3001      	adds	r0, #1
 8008728:	d1c3      	bne.n	80086b2 <_printf_float+0x332>
 800872a:	e684      	b.n	8008436 <_printf_float+0xb6>
 800872c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8008730:	f1ba 0f01 	cmp.w	sl, #1
 8008734:	dc01      	bgt.n	800873a <_printf_float+0x3ba>
 8008736:	07db      	lsls	r3, r3, #31
 8008738:	d536      	bpl.n	80087a8 <_printf_float+0x428>
 800873a:	2301      	movs	r3, #1
 800873c:	4642      	mov	r2, r8
 800873e:	4631      	mov	r1, r6
 8008740:	4628      	mov	r0, r5
 8008742:	47b8      	blx	r7
 8008744:	3001      	adds	r0, #1
 8008746:	f43f ae76 	beq.w	8008436 <_printf_float+0xb6>
 800874a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800874e:	4631      	mov	r1, r6
 8008750:	4628      	mov	r0, r5
 8008752:	47b8      	blx	r7
 8008754:	3001      	adds	r0, #1
 8008756:	f43f ae6e 	beq.w	8008436 <_printf_float+0xb6>
 800875a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800875e:	2200      	movs	r2, #0
 8008760:	2300      	movs	r3, #0
 8008762:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008766:	f7f8 f929 	bl	80009bc <__aeabi_dcmpeq>
 800876a:	b9c0      	cbnz	r0, 800879e <_printf_float+0x41e>
 800876c:	4653      	mov	r3, sl
 800876e:	f108 0201 	add.w	r2, r8, #1
 8008772:	4631      	mov	r1, r6
 8008774:	4628      	mov	r0, r5
 8008776:	47b8      	blx	r7
 8008778:	3001      	adds	r0, #1
 800877a:	d10c      	bne.n	8008796 <_printf_float+0x416>
 800877c:	e65b      	b.n	8008436 <_printf_float+0xb6>
 800877e:	2301      	movs	r3, #1
 8008780:	465a      	mov	r2, fp
 8008782:	4631      	mov	r1, r6
 8008784:	4628      	mov	r0, r5
 8008786:	47b8      	blx	r7
 8008788:	3001      	adds	r0, #1
 800878a:	f43f ae54 	beq.w	8008436 <_printf_float+0xb6>
 800878e:	f108 0801 	add.w	r8, r8, #1
 8008792:	45d0      	cmp	r8, sl
 8008794:	dbf3      	blt.n	800877e <_printf_float+0x3fe>
 8008796:	464b      	mov	r3, r9
 8008798:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800879c:	e6e0      	b.n	8008560 <_printf_float+0x1e0>
 800879e:	f04f 0800 	mov.w	r8, #0
 80087a2:	f104 0b1a 	add.w	fp, r4, #26
 80087a6:	e7f4      	b.n	8008792 <_printf_float+0x412>
 80087a8:	2301      	movs	r3, #1
 80087aa:	4642      	mov	r2, r8
 80087ac:	e7e1      	b.n	8008772 <_printf_float+0x3f2>
 80087ae:	2301      	movs	r3, #1
 80087b0:	464a      	mov	r2, r9
 80087b2:	4631      	mov	r1, r6
 80087b4:	4628      	mov	r0, r5
 80087b6:	47b8      	blx	r7
 80087b8:	3001      	adds	r0, #1
 80087ba:	f43f ae3c 	beq.w	8008436 <_printf_float+0xb6>
 80087be:	f108 0801 	add.w	r8, r8, #1
 80087c2:	68e3      	ldr	r3, [r4, #12]
 80087c4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80087c6:	1a5b      	subs	r3, r3, r1
 80087c8:	4543      	cmp	r3, r8
 80087ca:	dcf0      	bgt.n	80087ae <_printf_float+0x42e>
 80087cc:	e6fd      	b.n	80085ca <_printf_float+0x24a>
 80087ce:	f04f 0800 	mov.w	r8, #0
 80087d2:	f104 0919 	add.w	r9, r4, #25
 80087d6:	e7f4      	b.n	80087c2 <_printf_float+0x442>

080087d8 <_printf_common>:
 80087d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087dc:	4616      	mov	r6, r2
 80087de:	4698      	mov	r8, r3
 80087e0:	688a      	ldr	r2, [r1, #8]
 80087e2:	690b      	ldr	r3, [r1, #16]
 80087e4:	4607      	mov	r7, r0
 80087e6:	4293      	cmp	r3, r2
 80087e8:	bfb8      	it	lt
 80087ea:	4613      	movlt	r3, r2
 80087ec:	6033      	str	r3, [r6, #0]
 80087ee:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80087f2:	460c      	mov	r4, r1
 80087f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80087f8:	b10a      	cbz	r2, 80087fe <_printf_common+0x26>
 80087fa:	3301      	adds	r3, #1
 80087fc:	6033      	str	r3, [r6, #0]
 80087fe:	6823      	ldr	r3, [r4, #0]
 8008800:	0699      	lsls	r1, r3, #26
 8008802:	bf42      	ittt	mi
 8008804:	6833      	ldrmi	r3, [r6, #0]
 8008806:	3302      	addmi	r3, #2
 8008808:	6033      	strmi	r3, [r6, #0]
 800880a:	6825      	ldr	r5, [r4, #0]
 800880c:	f015 0506 	ands.w	r5, r5, #6
 8008810:	d106      	bne.n	8008820 <_printf_common+0x48>
 8008812:	f104 0a19 	add.w	sl, r4, #25
 8008816:	68e3      	ldr	r3, [r4, #12]
 8008818:	6832      	ldr	r2, [r6, #0]
 800881a:	1a9b      	subs	r3, r3, r2
 800881c:	42ab      	cmp	r3, r5
 800881e:	dc2b      	bgt.n	8008878 <_printf_common+0xa0>
 8008820:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008824:	6822      	ldr	r2, [r4, #0]
 8008826:	3b00      	subs	r3, #0
 8008828:	bf18      	it	ne
 800882a:	2301      	movne	r3, #1
 800882c:	0692      	lsls	r2, r2, #26
 800882e:	d430      	bmi.n	8008892 <_printf_common+0xba>
 8008830:	4641      	mov	r1, r8
 8008832:	4638      	mov	r0, r7
 8008834:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008838:	47c8      	blx	r9
 800883a:	3001      	adds	r0, #1
 800883c:	d023      	beq.n	8008886 <_printf_common+0xae>
 800883e:	6823      	ldr	r3, [r4, #0]
 8008840:	6922      	ldr	r2, [r4, #16]
 8008842:	f003 0306 	and.w	r3, r3, #6
 8008846:	2b04      	cmp	r3, #4
 8008848:	bf14      	ite	ne
 800884a:	2500      	movne	r5, #0
 800884c:	6833      	ldreq	r3, [r6, #0]
 800884e:	f04f 0600 	mov.w	r6, #0
 8008852:	bf08      	it	eq
 8008854:	68e5      	ldreq	r5, [r4, #12]
 8008856:	f104 041a 	add.w	r4, r4, #26
 800885a:	bf08      	it	eq
 800885c:	1aed      	subeq	r5, r5, r3
 800885e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008862:	bf08      	it	eq
 8008864:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008868:	4293      	cmp	r3, r2
 800886a:	bfc4      	itt	gt
 800886c:	1a9b      	subgt	r3, r3, r2
 800886e:	18ed      	addgt	r5, r5, r3
 8008870:	42b5      	cmp	r5, r6
 8008872:	d11a      	bne.n	80088aa <_printf_common+0xd2>
 8008874:	2000      	movs	r0, #0
 8008876:	e008      	b.n	800888a <_printf_common+0xb2>
 8008878:	2301      	movs	r3, #1
 800887a:	4652      	mov	r2, sl
 800887c:	4641      	mov	r1, r8
 800887e:	4638      	mov	r0, r7
 8008880:	47c8      	blx	r9
 8008882:	3001      	adds	r0, #1
 8008884:	d103      	bne.n	800888e <_printf_common+0xb6>
 8008886:	f04f 30ff 	mov.w	r0, #4294967295
 800888a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800888e:	3501      	adds	r5, #1
 8008890:	e7c1      	b.n	8008816 <_printf_common+0x3e>
 8008892:	2030      	movs	r0, #48	@ 0x30
 8008894:	18e1      	adds	r1, r4, r3
 8008896:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800889a:	1c5a      	adds	r2, r3, #1
 800889c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80088a0:	4422      	add	r2, r4
 80088a2:	3302      	adds	r3, #2
 80088a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80088a8:	e7c2      	b.n	8008830 <_printf_common+0x58>
 80088aa:	2301      	movs	r3, #1
 80088ac:	4622      	mov	r2, r4
 80088ae:	4641      	mov	r1, r8
 80088b0:	4638      	mov	r0, r7
 80088b2:	47c8      	blx	r9
 80088b4:	3001      	adds	r0, #1
 80088b6:	d0e6      	beq.n	8008886 <_printf_common+0xae>
 80088b8:	3601      	adds	r6, #1
 80088ba:	e7d9      	b.n	8008870 <_printf_common+0x98>

080088bc <_printf_i>:
 80088bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80088c0:	7e0f      	ldrb	r7, [r1, #24]
 80088c2:	4691      	mov	r9, r2
 80088c4:	2f78      	cmp	r7, #120	@ 0x78
 80088c6:	4680      	mov	r8, r0
 80088c8:	460c      	mov	r4, r1
 80088ca:	469a      	mov	sl, r3
 80088cc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80088ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80088d2:	d807      	bhi.n	80088e4 <_printf_i+0x28>
 80088d4:	2f62      	cmp	r7, #98	@ 0x62
 80088d6:	d80a      	bhi.n	80088ee <_printf_i+0x32>
 80088d8:	2f00      	cmp	r7, #0
 80088da:	f000 80d3 	beq.w	8008a84 <_printf_i+0x1c8>
 80088de:	2f58      	cmp	r7, #88	@ 0x58
 80088e0:	f000 80ba 	beq.w	8008a58 <_printf_i+0x19c>
 80088e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80088e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80088ec:	e03a      	b.n	8008964 <_printf_i+0xa8>
 80088ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80088f2:	2b15      	cmp	r3, #21
 80088f4:	d8f6      	bhi.n	80088e4 <_printf_i+0x28>
 80088f6:	a101      	add	r1, pc, #4	@ (adr r1, 80088fc <_printf_i+0x40>)
 80088f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80088fc:	08008955 	.word	0x08008955
 8008900:	08008969 	.word	0x08008969
 8008904:	080088e5 	.word	0x080088e5
 8008908:	080088e5 	.word	0x080088e5
 800890c:	080088e5 	.word	0x080088e5
 8008910:	080088e5 	.word	0x080088e5
 8008914:	08008969 	.word	0x08008969
 8008918:	080088e5 	.word	0x080088e5
 800891c:	080088e5 	.word	0x080088e5
 8008920:	080088e5 	.word	0x080088e5
 8008924:	080088e5 	.word	0x080088e5
 8008928:	08008a6b 	.word	0x08008a6b
 800892c:	08008993 	.word	0x08008993
 8008930:	08008a25 	.word	0x08008a25
 8008934:	080088e5 	.word	0x080088e5
 8008938:	080088e5 	.word	0x080088e5
 800893c:	08008a8d 	.word	0x08008a8d
 8008940:	080088e5 	.word	0x080088e5
 8008944:	08008993 	.word	0x08008993
 8008948:	080088e5 	.word	0x080088e5
 800894c:	080088e5 	.word	0x080088e5
 8008950:	08008a2d 	.word	0x08008a2d
 8008954:	6833      	ldr	r3, [r6, #0]
 8008956:	1d1a      	adds	r2, r3, #4
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	6032      	str	r2, [r6, #0]
 800895c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008960:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008964:	2301      	movs	r3, #1
 8008966:	e09e      	b.n	8008aa6 <_printf_i+0x1ea>
 8008968:	6833      	ldr	r3, [r6, #0]
 800896a:	6820      	ldr	r0, [r4, #0]
 800896c:	1d19      	adds	r1, r3, #4
 800896e:	6031      	str	r1, [r6, #0]
 8008970:	0606      	lsls	r6, r0, #24
 8008972:	d501      	bpl.n	8008978 <_printf_i+0xbc>
 8008974:	681d      	ldr	r5, [r3, #0]
 8008976:	e003      	b.n	8008980 <_printf_i+0xc4>
 8008978:	0645      	lsls	r5, r0, #25
 800897a:	d5fb      	bpl.n	8008974 <_printf_i+0xb8>
 800897c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008980:	2d00      	cmp	r5, #0
 8008982:	da03      	bge.n	800898c <_printf_i+0xd0>
 8008984:	232d      	movs	r3, #45	@ 0x2d
 8008986:	426d      	negs	r5, r5
 8008988:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800898c:	230a      	movs	r3, #10
 800898e:	4859      	ldr	r0, [pc, #356]	@ (8008af4 <_printf_i+0x238>)
 8008990:	e011      	b.n	80089b6 <_printf_i+0xfa>
 8008992:	6821      	ldr	r1, [r4, #0]
 8008994:	6833      	ldr	r3, [r6, #0]
 8008996:	0608      	lsls	r0, r1, #24
 8008998:	f853 5b04 	ldr.w	r5, [r3], #4
 800899c:	d402      	bmi.n	80089a4 <_printf_i+0xe8>
 800899e:	0649      	lsls	r1, r1, #25
 80089a0:	bf48      	it	mi
 80089a2:	b2ad      	uxthmi	r5, r5
 80089a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80089a6:	6033      	str	r3, [r6, #0]
 80089a8:	bf14      	ite	ne
 80089aa:	230a      	movne	r3, #10
 80089ac:	2308      	moveq	r3, #8
 80089ae:	4851      	ldr	r0, [pc, #324]	@ (8008af4 <_printf_i+0x238>)
 80089b0:	2100      	movs	r1, #0
 80089b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80089b6:	6866      	ldr	r6, [r4, #4]
 80089b8:	2e00      	cmp	r6, #0
 80089ba:	bfa8      	it	ge
 80089bc:	6821      	ldrge	r1, [r4, #0]
 80089be:	60a6      	str	r6, [r4, #8]
 80089c0:	bfa4      	itt	ge
 80089c2:	f021 0104 	bicge.w	r1, r1, #4
 80089c6:	6021      	strge	r1, [r4, #0]
 80089c8:	b90d      	cbnz	r5, 80089ce <_printf_i+0x112>
 80089ca:	2e00      	cmp	r6, #0
 80089cc:	d04b      	beq.n	8008a66 <_printf_i+0x1aa>
 80089ce:	4616      	mov	r6, r2
 80089d0:	fbb5 f1f3 	udiv	r1, r5, r3
 80089d4:	fb03 5711 	mls	r7, r3, r1, r5
 80089d8:	5dc7      	ldrb	r7, [r0, r7]
 80089da:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80089de:	462f      	mov	r7, r5
 80089e0:	42bb      	cmp	r3, r7
 80089e2:	460d      	mov	r5, r1
 80089e4:	d9f4      	bls.n	80089d0 <_printf_i+0x114>
 80089e6:	2b08      	cmp	r3, #8
 80089e8:	d10b      	bne.n	8008a02 <_printf_i+0x146>
 80089ea:	6823      	ldr	r3, [r4, #0]
 80089ec:	07df      	lsls	r7, r3, #31
 80089ee:	d508      	bpl.n	8008a02 <_printf_i+0x146>
 80089f0:	6923      	ldr	r3, [r4, #16]
 80089f2:	6861      	ldr	r1, [r4, #4]
 80089f4:	4299      	cmp	r1, r3
 80089f6:	bfde      	ittt	le
 80089f8:	2330      	movle	r3, #48	@ 0x30
 80089fa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80089fe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008a02:	1b92      	subs	r2, r2, r6
 8008a04:	6122      	str	r2, [r4, #16]
 8008a06:	464b      	mov	r3, r9
 8008a08:	4621      	mov	r1, r4
 8008a0a:	4640      	mov	r0, r8
 8008a0c:	f8cd a000 	str.w	sl, [sp]
 8008a10:	aa03      	add	r2, sp, #12
 8008a12:	f7ff fee1 	bl	80087d8 <_printf_common>
 8008a16:	3001      	adds	r0, #1
 8008a18:	d14a      	bne.n	8008ab0 <_printf_i+0x1f4>
 8008a1a:	f04f 30ff 	mov.w	r0, #4294967295
 8008a1e:	b004      	add	sp, #16
 8008a20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a24:	6823      	ldr	r3, [r4, #0]
 8008a26:	f043 0320 	orr.w	r3, r3, #32
 8008a2a:	6023      	str	r3, [r4, #0]
 8008a2c:	2778      	movs	r7, #120	@ 0x78
 8008a2e:	4832      	ldr	r0, [pc, #200]	@ (8008af8 <_printf_i+0x23c>)
 8008a30:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008a34:	6823      	ldr	r3, [r4, #0]
 8008a36:	6831      	ldr	r1, [r6, #0]
 8008a38:	061f      	lsls	r7, r3, #24
 8008a3a:	f851 5b04 	ldr.w	r5, [r1], #4
 8008a3e:	d402      	bmi.n	8008a46 <_printf_i+0x18a>
 8008a40:	065f      	lsls	r7, r3, #25
 8008a42:	bf48      	it	mi
 8008a44:	b2ad      	uxthmi	r5, r5
 8008a46:	6031      	str	r1, [r6, #0]
 8008a48:	07d9      	lsls	r1, r3, #31
 8008a4a:	bf44      	itt	mi
 8008a4c:	f043 0320 	orrmi.w	r3, r3, #32
 8008a50:	6023      	strmi	r3, [r4, #0]
 8008a52:	b11d      	cbz	r5, 8008a5c <_printf_i+0x1a0>
 8008a54:	2310      	movs	r3, #16
 8008a56:	e7ab      	b.n	80089b0 <_printf_i+0xf4>
 8008a58:	4826      	ldr	r0, [pc, #152]	@ (8008af4 <_printf_i+0x238>)
 8008a5a:	e7e9      	b.n	8008a30 <_printf_i+0x174>
 8008a5c:	6823      	ldr	r3, [r4, #0]
 8008a5e:	f023 0320 	bic.w	r3, r3, #32
 8008a62:	6023      	str	r3, [r4, #0]
 8008a64:	e7f6      	b.n	8008a54 <_printf_i+0x198>
 8008a66:	4616      	mov	r6, r2
 8008a68:	e7bd      	b.n	80089e6 <_printf_i+0x12a>
 8008a6a:	6833      	ldr	r3, [r6, #0]
 8008a6c:	6825      	ldr	r5, [r4, #0]
 8008a6e:	1d18      	adds	r0, r3, #4
 8008a70:	6961      	ldr	r1, [r4, #20]
 8008a72:	6030      	str	r0, [r6, #0]
 8008a74:	062e      	lsls	r6, r5, #24
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	d501      	bpl.n	8008a7e <_printf_i+0x1c2>
 8008a7a:	6019      	str	r1, [r3, #0]
 8008a7c:	e002      	b.n	8008a84 <_printf_i+0x1c8>
 8008a7e:	0668      	lsls	r0, r5, #25
 8008a80:	d5fb      	bpl.n	8008a7a <_printf_i+0x1be>
 8008a82:	8019      	strh	r1, [r3, #0]
 8008a84:	2300      	movs	r3, #0
 8008a86:	4616      	mov	r6, r2
 8008a88:	6123      	str	r3, [r4, #16]
 8008a8a:	e7bc      	b.n	8008a06 <_printf_i+0x14a>
 8008a8c:	6833      	ldr	r3, [r6, #0]
 8008a8e:	2100      	movs	r1, #0
 8008a90:	1d1a      	adds	r2, r3, #4
 8008a92:	6032      	str	r2, [r6, #0]
 8008a94:	681e      	ldr	r6, [r3, #0]
 8008a96:	6862      	ldr	r2, [r4, #4]
 8008a98:	4630      	mov	r0, r6
 8008a9a:	f000 fc62 	bl	8009362 <memchr>
 8008a9e:	b108      	cbz	r0, 8008aa4 <_printf_i+0x1e8>
 8008aa0:	1b80      	subs	r0, r0, r6
 8008aa2:	6060      	str	r0, [r4, #4]
 8008aa4:	6863      	ldr	r3, [r4, #4]
 8008aa6:	6123      	str	r3, [r4, #16]
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008aae:	e7aa      	b.n	8008a06 <_printf_i+0x14a>
 8008ab0:	4632      	mov	r2, r6
 8008ab2:	4649      	mov	r1, r9
 8008ab4:	4640      	mov	r0, r8
 8008ab6:	6923      	ldr	r3, [r4, #16]
 8008ab8:	47d0      	blx	sl
 8008aba:	3001      	adds	r0, #1
 8008abc:	d0ad      	beq.n	8008a1a <_printf_i+0x15e>
 8008abe:	6823      	ldr	r3, [r4, #0]
 8008ac0:	079b      	lsls	r3, r3, #30
 8008ac2:	d413      	bmi.n	8008aec <_printf_i+0x230>
 8008ac4:	68e0      	ldr	r0, [r4, #12]
 8008ac6:	9b03      	ldr	r3, [sp, #12]
 8008ac8:	4298      	cmp	r0, r3
 8008aca:	bfb8      	it	lt
 8008acc:	4618      	movlt	r0, r3
 8008ace:	e7a6      	b.n	8008a1e <_printf_i+0x162>
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	4632      	mov	r2, r6
 8008ad4:	4649      	mov	r1, r9
 8008ad6:	4640      	mov	r0, r8
 8008ad8:	47d0      	blx	sl
 8008ada:	3001      	adds	r0, #1
 8008adc:	d09d      	beq.n	8008a1a <_printf_i+0x15e>
 8008ade:	3501      	adds	r5, #1
 8008ae0:	68e3      	ldr	r3, [r4, #12]
 8008ae2:	9903      	ldr	r1, [sp, #12]
 8008ae4:	1a5b      	subs	r3, r3, r1
 8008ae6:	42ab      	cmp	r3, r5
 8008ae8:	dcf2      	bgt.n	8008ad0 <_printf_i+0x214>
 8008aea:	e7eb      	b.n	8008ac4 <_printf_i+0x208>
 8008aec:	2500      	movs	r5, #0
 8008aee:	f104 0619 	add.w	r6, r4, #25
 8008af2:	e7f5      	b.n	8008ae0 <_printf_i+0x224>
 8008af4:	0800c5cb 	.word	0x0800c5cb
 8008af8:	0800c5dc 	.word	0x0800c5dc

08008afc <_scanf_float>:
 8008afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b00:	b087      	sub	sp, #28
 8008b02:	9303      	str	r3, [sp, #12]
 8008b04:	688b      	ldr	r3, [r1, #8]
 8008b06:	4617      	mov	r7, r2
 8008b08:	1e5a      	subs	r2, r3, #1
 8008b0a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008b0e:	bf82      	ittt	hi
 8008b10:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008b14:	eb03 0b05 	addhi.w	fp, r3, r5
 8008b18:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008b1c:	460a      	mov	r2, r1
 8008b1e:	f04f 0500 	mov.w	r5, #0
 8008b22:	bf88      	it	hi
 8008b24:	608b      	strhi	r3, [r1, #8]
 8008b26:	680b      	ldr	r3, [r1, #0]
 8008b28:	4680      	mov	r8, r0
 8008b2a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008b2e:	f842 3b1c 	str.w	r3, [r2], #28
 8008b32:	460c      	mov	r4, r1
 8008b34:	bf98      	it	ls
 8008b36:	f04f 0b00 	movls.w	fp, #0
 8008b3a:	4616      	mov	r6, r2
 8008b3c:	46aa      	mov	sl, r5
 8008b3e:	46a9      	mov	r9, r5
 8008b40:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008b44:	9201      	str	r2, [sp, #4]
 8008b46:	9502      	str	r5, [sp, #8]
 8008b48:	68a2      	ldr	r2, [r4, #8]
 8008b4a:	b152      	cbz	r2, 8008b62 <_scanf_float+0x66>
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	781b      	ldrb	r3, [r3, #0]
 8008b50:	2b4e      	cmp	r3, #78	@ 0x4e
 8008b52:	d865      	bhi.n	8008c20 <_scanf_float+0x124>
 8008b54:	2b40      	cmp	r3, #64	@ 0x40
 8008b56:	d83d      	bhi.n	8008bd4 <_scanf_float+0xd8>
 8008b58:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008b5c:	b2c8      	uxtb	r0, r1
 8008b5e:	280e      	cmp	r0, #14
 8008b60:	d93b      	bls.n	8008bda <_scanf_float+0xde>
 8008b62:	f1b9 0f00 	cmp.w	r9, #0
 8008b66:	d003      	beq.n	8008b70 <_scanf_float+0x74>
 8008b68:	6823      	ldr	r3, [r4, #0]
 8008b6a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008b6e:	6023      	str	r3, [r4, #0]
 8008b70:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008b74:	f1ba 0f01 	cmp.w	sl, #1
 8008b78:	f200 8118 	bhi.w	8008dac <_scanf_float+0x2b0>
 8008b7c:	9b01      	ldr	r3, [sp, #4]
 8008b7e:	429e      	cmp	r6, r3
 8008b80:	f200 8109 	bhi.w	8008d96 <_scanf_float+0x29a>
 8008b84:	2001      	movs	r0, #1
 8008b86:	b007      	add	sp, #28
 8008b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b8c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008b90:	2a0d      	cmp	r2, #13
 8008b92:	d8e6      	bhi.n	8008b62 <_scanf_float+0x66>
 8008b94:	a101      	add	r1, pc, #4	@ (adr r1, 8008b9c <_scanf_float+0xa0>)
 8008b96:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008b9a:	bf00      	nop
 8008b9c:	08008ce3 	.word	0x08008ce3
 8008ba0:	08008b63 	.word	0x08008b63
 8008ba4:	08008b63 	.word	0x08008b63
 8008ba8:	08008b63 	.word	0x08008b63
 8008bac:	08008d43 	.word	0x08008d43
 8008bb0:	08008d1b 	.word	0x08008d1b
 8008bb4:	08008b63 	.word	0x08008b63
 8008bb8:	08008b63 	.word	0x08008b63
 8008bbc:	08008cf1 	.word	0x08008cf1
 8008bc0:	08008b63 	.word	0x08008b63
 8008bc4:	08008b63 	.word	0x08008b63
 8008bc8:	08008b63 	.word	0x08008b63
 8008bcc:	08008b63 	.word	0x08008b63
 8008bd0:	08008ca9 	.word	0x08008ca9
 8008bd4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008bd8:	e7da      	b.n	8008b90 <_scanf_float+0x94>
 8008bda:	290e      	cmp	r1, #14
 8008bdc:	d8c1      	bhi.n	8008b62 <_scanf_float+0x66>
 8008bde:	a001      	add	r0, pc, #4	@ (adr r0, 8008be4 <_scanf_float+0xe8>)
 8008be0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008be4:	08008c99 	.word	0x08008c99
 8008be8:	08008b63 	.word	0x08008b63
 8008bec:	08008c99 	.word	0x08008c99
 8008bf0:	08008d2f 	.word	0x08008d2f
 8008bf4:	08008b63 	.word	0x08008b63
 8008bf8:	08008c41 	.word	0x08008c41
 8008bfc:	08008c7f 	.word	0x08008c7f
 8008c00:	08008c7f 	.word	0x08008c7f
 8008c04:	08008c7f 	.word	0x08008c7f
 8008c08:	08008c7f 	.word	0x08008c7f
 8008c0c:	08008c7f 	.word	0x08008c7f
 8008c10:	08008c7f 	.word	0x08008c7f
 8008c14:	08008c7f 	.word	0x08008c7f
 8008c18:	08008c7f 	.word	0x08008c7f
 8008c1c:	08008c7f 	.word	0x08008c7f
 8008c20:	2b6e      	cmp	r3, #110	@ 0x6e
 8008c22:	d809      	bhi.n	8008c38 <_scanf_float+0x13c>
 8008c24:	2b60      	cmp	r3, #96	@ 0x60
 8008c26:	d8b1      	bhi.n	8008b8c <_scanf_float+0x90>
 8008c28:	2b54      	cmp	r3, #84	@ 0x54
 8008c2a:	d07b      	beq.n	8008d24 <_scanf_float+0x228>
 8008c2c:	2b59      	cmp	r3, #89	@ 0x59
 8008c2e:	d198      	bne.n	8008b62 <_scanf_float+0x66>
 8008c30:	2d07      	cmp	r5, #7
 8008c32:	d196      	bne.n	8008b62 <_scanf_float+0x66>
 8008c34:	2508      	movs	r5, #8
 8008c36:	e02c      	b.n	8008c92 <_scanf_float+0x196>
 8008c38:	2b74      	cmp	r3, #116	@ 0x74
 8008c3a:	d073      	beq.n	8008d24 <_scanf_float+0x228>
 8008c3c:	2b79      	cmp	r3, #121	@ 0x79
 8008c3e:	e7f6      	b.n	8008c2e <_scanf_float+0x132>
 8008c40:	6821      	ldr	r1, [r4, #0]
 8008c42:	05c8      	lsls	r0, r1, #23
 8008c44:	d51b      	bpl.n	8008c7e <_scanf_float+0x182>
 8008c46:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8008c4a:	6021      	str	r1, [r4, #0]
 8008c4c:	f109 0901 	add.w	r9, r9, #1
 8008c50:	f1bb 0f00 	cmp.w	fp, #0
 8008c54:	d003      	beq.n	8008c5e <_scanf_float+0x162>
 8008c56:	3201      	adds	r2, #1
 8008c58:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008c5c:	60a2      	str	r2, [r4, #8]
 8008c5e:	68a3      	ldr	r3, [r4, #8]
 8008c60:	3b01      	subs	r3, #1
 8008c62:	60a3      	str	r3, [r4, #8]
 8008c64:	6923      	ldr	r3, [r4, #16]
 8008c66:	3301      	adds	r3, #1
 8008c68:	6123      	str	r3, [r4, #16]
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	3b01      	subs	r3, #1
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	607b      	str	r3, [r7, #4]
 8008c72:	f340 8087 	ble.w	8008d84 <_scanf_float+0x288>
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	3301      	adds	r3, #1
 8008c7a:	603b      	str	r3, [r7, #0]
 8008c7c:	e764      	b.n	8008b48 <_scanf_float+0x4c>
 8008c7e:	eb1a 0105 	adds.w	r1, sl, r5
 8008c82:	f47f af6e 	bne.w	8008b62 <_scanf_float+0x66>
 8008c86:	460d      	mov	r5, r1
 8008c88:	468a      	mov	sl, r1
 8008c8a:	6822      	ldr	r2, [r4, #0]
 8008c8c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008c90:	6022      	str	r2, [r4, #0]
 8008c92:	f806 3b01 	strb.w	r3, [r6], #1
 8008c96:	e7e2      	b.n	8008c5e <_scanf_float+0x162>
 8008c98:	6822      	ldr	r2, [r4, #0]
 8008c9a:	0610      	lsls	r0, r2, #24
 8008c9c:	f57f af61 	bpl.w	8008b62 <_scanf_float+0x66>
 8008ca0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008ca4:	6022      	str	r2, [r4, #0]
 8008ca6:	e7f4      	b.n	8008c92 <_scanf_float+0x196>
 8008ca8:	f1ba 0f00 	cmp.w	sl, #0
 8008cac:	d10e      	bne.n	8008ccc <_scanf_float+0x1d0>
 8008cae:	f1b9 0f00 	cmp.w	r9, #0
 8008cb2:	d10e      	bne.n	8008cd2 <_scanf_float+0x1d6>
 8008cb4:	6822      	ldr	r2, [r4, #0]
 8008cb6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008cba:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008cbe:	d108      	bne.n	8008cd2 <_scanf_float+0x1d6>
 8008cc0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008cc4:	f04f 0a01 	mov.w	sl, #1
 8008cc8:	6022      	str	r2, [r4, #0]
 8008cca:	e7e2      	b.n	8008c92 <_scanf_float+0x196>
 8008ccc:	f1ba 0f02 	cmp.w	sl, #2
 8008cd0:	d055      	beq.n	8008d7e <_scanf_float+0x282>
 8008cd2:	2d01      	cmp	r5, #1
 8008cd4:	d002      	beq.n	8008cdc <_scanf_float+0x1e0>
 8008cd6:	2d04      	cmp	r5, #4
 8008cd8:	f47f af43 	bne.w	8008b62 <_scanf_float+0x66>
 8008cdc:	3501      	adds	r5, #1
 8008cde:	b2ed      	uxtb	r5, r5
 8008ce0:	e7d7      	b.n	8008c92 <_scanf_float+0x196>
 8008ce2:	f1ba 0f01 	cmp.w	sl, #1
 8008ce6:	f47f af3c 	bne.w	8008b62 <_scanf_float+0x66>
 8008cea:	f04f 0a02 	mov.w	sl, #2
 8008cee:	e7d0      	b.n	8008c92 <_scanf_float+0x196>
 8008cf0:	b97d      	cbnz	r5, 8008d12 <_scanf_float+0x216>
 8008cf2:	f1b9 0f00 	cmp.w	r9, #0
 8008cf6:	f47f af37 	bne.w	8008b68 <_scanf_float+0x6c>
 8008cfa:	6822      	ldr	r2, [r4, #0]
 8008cfc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008d00:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008d04:	f040 8103 	bne.w	8008f0e <_scanf_float+0x412>
 8008d08:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008d0c:	2501      	movs	r5, #1
 8008d0e:	6022      	str	r2, [r4, #0]
 8008d10:	e7bf      	b.n	8008c92 <_scanf_float+0x196>
 8008d12:	2d03      	cmp	r5, #3
 8008d14:	d0e2      	beq.n	8008cdc <_scanf_float+0x1e0>
 8008d16:	2d05      	cmp	r5, #5
 8008d18:	e7de      	b.n	8008cd8 <_scanf_float+0x1dc>
 8008d1a:	2d02      	cmp	r5, #2
 8008d1c:	f47f af21 	bne.w	8008b62 <_scanf_float+0x66>
 8008d20:	2503      	movs	r5, #3
 8008d22:	e7b6      	b.n	8008c92 <_scanf_float+0x196>
 8008d24:	2d06      	cmp	r5, #6
 8008d26:	f47f af1c 	bne.w	8008b62 <_scanf_float+0x66>
 8008d2a:	2507      	movs	r5, #7
 8008d2c:	e7b1      	b.n	8008c92 <_scanf_float+0x196>
 8008d2e:	6822      	ldr	r2, [r4, #0]
 8008d30:	0591      	lsls	r1, r2, #22
 8008d32:	f57f af16 	bpl.w	8008b62 <_scanf_float+0x66>
 8008d36:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8008d3a:	6022      	str	r2, [r4, #0]
 8008d3c:	f8cd 9008 	str.w	r9, [sp, #8]
 8008d40:	e7a7      	b.n	8008c92 <_scanf_float+0x196>
 8008d42:	6822      	ldr	r2, [r4, #0]
 8008d44:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008d48:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008d4c:	d006      	beq.n	8008d5c <_scanf_float+0x260>
 8008d4e:	0550      	lsls	r0, r2, #21
 8008d50:	f57f af07 	bpl.w	8008b62 <_scanf_float+0x66>
 8008d54:	f1b9 0f00 	cmp.w	r9, #0
 8008d58:	f000 80d9 	beq.w	8008f0e <_scanf_float+0x412>
 8008d5c:	0591      	lsls	r1, r2, #22
 8008d5e:	bf58      	it	pl
 8008d60:	9902      	ldrpl	r1, [sp, #8]
 8008d62:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008d66:	bf58      	it	pl
 8008d68:	eba9 0101 	subpl.w	r1, r9, r1
 8008d6c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008d70:	f04f 0900 	mov.w	r9, #0
 8008d74:	bf58      	it	pl
 8008d76:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008d7a:	6022      	str	r2, [r4, #0]
 8008d7c:	e789      	b.n	8008c92 <_scanf_float+0x196>
 8008d7e:	f04f 0a03 	mov.w	sl, #3
 8008d82:	e786      	b.n	8008c92 <_scanf_float+0x196>
 8008d84:	4639      	mov	r1, r7
 8008d86:	4640      	mov	r0, r8
 8008d88:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008d8c:	4798      	blx	r3
 8008d8e:	2800      	cmp	r0, #0
 8008d90:	f43f aeda 	beq.w	8008b48 <_scanf_float+0x4c>
 8008d94:	e6e5      	b.n	8008b62 <_scanf_float+0x66>
 8008d96:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008d9a:	463a      	mov	r2, r7
 8008d9c:	4640      	mov	r0, r8
 8008d9e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008da2:	4798      	blx	r3
 8008da4:	6923      	ldr	r3, [r4, #16]
 8008da6:	3b01      	subs	r3, #1
 8008da8:	6123      	str	r3, [r4, #16]
 8008daa:	e6e7      	b.n	8008b7c <_scanf_float+0x80>
 8008dac:	1e6b      	subs	r3, r5, #1
 8008dae:	2b06      	cmp	r3, #6
 8008db0:	d824      	bhi.n	8008dfc <_scanf_float+0x300>
 8008db2:	2d02      	cmp	r5, #2
 8008db4:	d836      	bhi.n	8008e24 <_scanf_float+0x328>
 8008db6:	9b01      	ldr	r3, [sp, #4]
 8008db8:	429e      	cmp	r6, r3
 8008dba:	f67f aee3 	bls.w	8008b84 <_scanf_float+0x88>
 8008dbe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008dc2:	463a      	mov	r2, r7
 8008dc4:	4640      	mov	r0, r8
 8008dc6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008dca:	4798      	blx	r3
 8008dcc:	6923      	ldr	r3, [r4, #16]
 8008dce:	3b01      	subs	r3, #1
 8008dd0:	6123      	str	r3, [r4, #16]
 8008dd2:	e7f0      	b.n	8008db6 <_scanf_float+0x2ba>
 8008dd4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008dd8:	463a      	mov	r2, r7
 8008dda:	4640      	mov	r0, r8
 8008ddc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008de0:	4798      	blx	r3
 8008de2:	6923      	ldr	r3, [r4, #16]
 8008de4:	3b01      	subs	r3, #1
 8008de6:	6123      	str	r3, [r4, #16]
 8008de8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008dec:	fa5f fa8a 	uxtb.w	sl, sl
 8008df0:	f1ba 0f02 	cmp.w	sl, #2
 8008df4:	d1ee      	bne.n	8008dd4 <_scanf_float+0x2d8>
 8008df6:	3d03      	subs	r5, #3
 8008df8:	b2ed      	uxtb	r5, r5
 8008dfa:	1b76      	subs	r6, r6, r5
 8008dfc:	6823      	ldr	r3, [r4, #0]
 8008dfe:	05da      	lsls	r2, r3, #23
 8008e00:	d530      	bpl.n	8008e64 <_scanf_float+0x368>
 8008e02:	055b      	lsls	r3, r3, #21
 8008e04:	d511      	bpl.n	8008e2a <_scanf_float+0x32e>
 8008e06:	9b01      	ldr	r3, [sp, #4]
 8008e08:	429e      	cmp	r6, r3
 8008e0a:	f67f aebb 	bls.w	8008b84 <_scanf_float+0x88>
 8008e0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008e12:	463a      	mov	r2, r7
 8008e14:	4640      	mov	r0, r8
 8008e16:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008e1a:	4798      	blx	r3
 8008e1c:	6923      	ldr	r3, [r4, #16]
 8008e1e:	3b01      	subs	r3, #1
 8008e20:	6123      	str	r3, [r4, #16]
 8008e22:	e7f0      	b.n	8008e06 <_scanf_float+0x30a>
 8008e24:	46aa      	mov	sl, r5
 8008e26:	46b3      	mov	fp, r6
 8008e28:	e7de      	b.n	8008de8 <_scanf_float+0x2ec>
 8008e2a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008e2e:	6923      	ldr	r3, [r4, #16]
 8008e30:	2965      	cmp	r1, #101	@ 0x65
 8008e32:	f103 33ff 	add.w	r3, r3, #4294967295
 8008e36:	f106 35ff 	add.w	r5, r6, #4294967295
 8008e3a:	6123      	str	r3, [r4, #16]
 8008e3c:	d00c      	beq.n	8008e58 <_scanf_float+0x35c>
 8008e3e:	2945      	cmp	r1, #69	@ 0x45
 8008e40:	d00a      	beq.n	8008e58 <_scanf_float+0x35c>
 8008e42:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008e46:	463a      	mov	r2, r7
 8008e48:	4640      	mov	r0, r8
 8008e4a:	4798      	blx	r3
 8008e4c:	6923      	ldr	r3, [r4, #16]
 8008e4e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008e52:	3b01      	subs	r3, #1
 8008e54:	1eb5      	subs	r5, r6, #2
 8008e56:	6123      	str	r3, [r4, #16]
 8008e58:	463a      	mov	r2, r7
 8008e5a:	4640      	mov	r0, r8
 8008e5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008e60:	4798      	blx	r3
 8008e62:	462e      	mov	r6, r5
 8008e64:	6822      	ldr	r2, [r4, #0]
 8008e66:	f012 0210 	ands.w	r2, r2, #16
 8008e6a:	d001      	beq.n	8008e70 <_scanf_float+0x374>
 8008e6c:	2000      	movs	r0, #0
 8008e6e:	e68a      	b.n	8008b86 <_scanf_float+0x8a>
 8008e70:	7032      	strb	r2, [r6, #0]
 8008e72:	6823      	ldr	r3, [r4, #0]
 8008e74:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008e78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e7c:	d11c      	bne.n	8008eb8 <_scanf_float+0x3bc>
 8008e7e:	9b02      	ldr	r3, [sp, #8]
 8008e80:	454b      	cmp	r3, r9
 8008e82:	eba3 0209 	sub.w	r2, r3, r9
 8008e86:	d123      	bne.n	8008ed0 <_scanf_float+0x3d4>
 8008e88:	2200      	movs	r2, #0
 8008e8a:	4640      	mov	r0, r8
 8008e8c:	9901      	ldr	r1, [sp, #4]
 8008e8e:	f7ff f903 	bl	8008098 <_strtod_r>
 8008e92:	9b03      	ldr	r3, [sp, #12]
 8008e94:	6825      	ldr	r5, [r4, #0]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f015 0f02 	tst.w	r5, #2
 8008e9c:	4606      	mov	r6, r0
 8008e9e:	460f      	mov	r7, r1
 8008ea0:	f103 0204 	add.w	r2, r3, #4
 8008ea4:	d01f      	beq.n	8008ee6 <_scanf_float+0x3ea>
 8008ea6:	9903      	ldr	r1, [sp, #12]
 8008ea8:	600a      	str	r2, [r1, #0]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	e9c3 6700 	strd	r6, r7, [r3]
 8008eb0:	68e3      	ldr	r3, [r4, #12]
 8008eb2:	3301      	adds	r3, #1
 8008eb4:	60e3      	str	r3, [r4, #12]
 8008eb6:	e7d9      	b.n	8008e6c <_scanf_float+0x370>
 8008eb8:	9b04      	ldr	r3, [sp, #16]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d0e4      	beq.n	8008e88 <_scanf_float+0x38c>
 8008ebe:	9905      	ldr	r1, [sp, #20]
 8008ec0:	230a      	movs	r3, #10
 8008ec2:	4640      	mov	r0, r8
 8008ec4:	3101      	adds	r1, #1
 8008ec6:	f002 fa2d 	bl	800b324 <_strtol_r>
 8008eca:	9b04      	ldr	r3, [sp, #16]
 8008ecc:	9e05      	ldr	r6, [sp, #20]
 8008ece:	1ac2      	subs	r2, r0, r3
 8008ed0:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008ed4:	429e      	cmp	r6, r3
 8008ed6:	bf28      	it	cs
 8008ed8:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008edc:	4630      	mov	r0, r6
 8008ede:	490d      	ldr	r1, [pc, #52]	@ (8008f14 <_scanf_float+0x418>)
 8008ee0:	f000 f8de 	bl	80090a0 <siprintf>
 8008ee4:	e7d0      	b.n	8008e88 <_scanf_float+0x38c>
 8008ee6:	076d      	lsls	r5, r5, #29
 8008ee8:	d4dd      	bmi.n	8008ea6 <_scanf_float+0x3aa>
 8008eea:	9d03      	ldr	r5, [sp, #12]
 8008eec:	602a      	str	r2, [r5, #0]
 8008eee:	681d      	ldr	r5, [r3, #0]
 8008ef0:	4602      	mov	r2, r0
 8008ef2:	460b      	mov	r3, r1
 8008ef4:	f7f7 fd94 	bl	8000a20 <__aeabi_dcmpun>
 8008ef8:	b120      	cbz	r0, 8008f04 <_scanf_float+0x408>
 8008efa:	4807      	ldr	r0, [pc, #28]	@ (8008f18 <_scanf_float+0x41c>)
 8008efc:	f000 fa54 	bl	80093a8 <nanf>
 8008f00:	6028      	str	r0, [r5, #0]
 8008f02:	e7d5      	b.n	8008eb0 <_scanf_float+0x3b4>
 8008f04:	4630      	mov	r0, r6
 8008f06:	4639      	mov	r1, r7
 8008f08:	f7f7 fde8 	bl	8000adc <__aeabi_d2f>
 8008f0c:	e7f8      	b.n	8008f00 <_scanf_float+0x404>
 8008f0e:	f04f 0900 	mov.w	r9, #0
 8008f12:	e62d      	b.n	8008b70 <_scanf_float+0x74>
 8008f14:	0800c5ed 	.word	0x0800c5ed
 8008f18:	0800c88c 	.word	0x0800c88c

08008f1c <std>:
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	b510      	push	{r4, lr}
 8008f20:	4604      	mov	r4, r0
 8008f22:	e9c0 3300 	strd	r3, r3, [r0]
 8008f26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008f2a:	6083      	str	r3, [r0, #8]
 8008f2c:	8181      	strh	r1, [r0, #12]
 8008f2e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008f30:	81c2      	strh	r2, [r0, #14]
 8008f32:	6183      	str	r3, [r0, #24]
 8008f34:	4619      	mov	r1, r3
 8008f36:	2208      	movs	r2, #8
 8008f38:	305c      	adds	r0, #92	@ 0x5c
 8008f3a:	f000 f94d 	bl	80091d8 <memset>
 8008f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8008f74 <std+0x58>)
 8008f40:	6224      	str	r4, [r4, #32]
 8008f42:	6263      	str	r3, [r4, #36]	@ 0x24
 8008f44:	4b0c      	ldr	r3, [pc, #48]	@ (8008f78 <std+0x5c>)
 8008f46:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008f48:	4b0c      	ldr	r3, [pc, #48]	@ (8008f7c <std+0x60>)
 8008f4a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008f4c:	4b0c      	ldr	r3, [pc, #48]	@ (8008f80 <std+0x64>)
 8008f4e:	6323      	str	r3, [r4, #48]	@ 0x30
 8008f50:	4b0c      	ldr	r3, [pc, #48]	@ (8008f84 <std+0x68>)
 8008f52:	429c      	cmp	r4, r3
 8008f54:	d006      	beq.n	8008f64 <std+0x48>
 8008f56:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008f5a:	4294      	cmp	r4, r2
 8008f5c:	d002      	beq.n	8008f64 <std+0x48>
 8008f5e:	33d0      	adds	r3, #208	@ 0xd0
 8008f60:	429c      	cmp	r4, r3
 8008f62:	d105      	bne.n	8008f70 <std+0x54>
 8008f64:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008f68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f6c:	f000 b9ee 	b.w	800934c <__retarget_lock_init_recursive>
 8008f70:	bd10      	pop	{r4, pc}
 8008f72:	bf00      	nop
 8008f74:	080090e1 	.word	0x080090e1
 8008f78:	08009103 	.word	0x08009103
 8008f7c:	0800913b 	.word	0x0800913b
 8008f80:	0800915f 	.word	0x0800915f
 8008f84:	2000096c 	.word	0x2000096c

08008f88 <stdio_exit_handler>:
 8008f88:	4a02      	ldr	r2, [pc, #8]	@ (8008f94 <stdio_exit_handler+0xc>)
 8008f8a:	4903      	ldr	r1, [pc, #12]	@ (8008f98 <stdio_exit_handler+0x10>)
 8008f8c:	4803      	ldr	r0, [pc, #12]	@ (8008f9c <stdio_exit_handler+0x14>)
 8008f8e:	f000 b869 	b.w	8009064 <_fwalk_sglue>
 8008f92:	bf00      	nop
 8008f94:	20000018 	.word	0x20000018
 8008f98:	0800b6f1 	.word	0x0800b6f1
 8008f9c:	20000194 	.word	0x20000194

08008fa0 <cleanup_stdio>:
 8008fa0:	6841      	ldr	r1, [r0, #4]
 8008fa2:	4b0c      	ldr	r3, [pc, #48]	@ (8008fd4 <cleanup_stdio+0x34>)
 8008fa4:	b510      	push	{r4, lr}
 8008fa6:	4299      	cmp	r1, r3
 8008fa8:	4604      	mov	r4, r0
 8008faa:	d001      	beq.n	8008fb0 <cleanup_stdio+0x10>
 8008fac:	f002 fba0 	bl	800b6f0 <_fflush_r>
 8008fb0:	68a1      	ldr	r1, [r4, #8]
 8008fb2:	4b09      	ldr	r3, [pc, #36]	@ (8008fd8 <cleanup_stdio+0x38>)
 8008fb4:	4299      	cmp	r1, r3
 8008fb6:	d002      	beq.n	8008fbe <cleanup_stdio+0x1e>
 8008fb8:	4620      	mov	r0, r4
 8008fba:	f002 fb99 	bl	800b6f0 <_fflush_r>
 8008fbe:	68e1      	ldr	r1, [r4, #12]
 8008fc0:	4b06      	ldr	r3, [pc, #24]	@ (8008fdc <cleanup_stdio+0x3c>)
 8008fc2:	4299      	cmp	r1, r3
 8008fc4:	d004      	beq.n	8008fd0 <cleanup_stdio+0x30>
 8008fc6:	4620      	mov	r0, r4
 8008fc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fcc:	f002 bb90 	b.w	800b6f0 <_fflush_r>
 8008fd0:	bd10      	pop	{r4, pc}
 8008fd2:	bf00      	nop
 8008fd4:	2000096c 	.word	0x2000096c
 8008fd8:	200009d4 	.word	0x200009d4
 8008fdc:	20000a3c 	.word	0x20000a3c

08008fe0 <global_stdio_init.part.0>:
 8008fe0:	b510      	push	{r4, lr}
 8008fe2:	4b0b      	ldr	r3, [pc, #44]	@ (8009010 <global_stdio_init.part.0+0x30>)
 8008fe4:	4c0b      	ldr	r4, [pc, #44]	@ (8009014 <global_stdio_init.part.0+0x34>)
 8008fe6:	4a0c      	ldr	r2, [pc, #48]	@ (8009018 <global_stdio_init.part.0+0x38>)
 8008fe8:	4620      	mov	r0, r4
 8008fea:	601a      	str	r2, [r3, #0]
 8008fec:	2104      	movs	r1, #4
 8008fee:	2200      	movs	r2, #0
 8008ff0:	f7ff ff94 	bl	8008f1c <std>
 8008ff4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008ff8:	2201      	movs	r2, #1
 8008ffa:	2109      	movs	r1, #9
 8008ffc:	f7ff ff8e 	bl	8008f1c <std>
 8009000:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009004:	2202      	movs	r2, #2
 8009006:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800900a:	2112      	movs	r1, #18
 800900c:	f7ff bf86 	b.w	8008f1c <std>
 8009010:	20000aa4 	.word	0x20000aa4
 8009014:	2000096c 	.word	0x2000096c
 8009018:	08008f89 	.word	0x08008f89

0800901c <__sfp_lock_acquire>:
 800901c:	4801      	ldr	r0, [pc, #4]	@ (8009024 <__sfp_lock_acquire+0x8>)
 800901e:	f000 b996 	b.w	800934e <__retarget_lock_acquire_recursive>
 8009022:	bf00      	nop
 8009024:	20000aad 	.word	0x20000aad

08009028 <__sfp_lock_release>:
 8009028:	4801      	ldr	r0, [pc, #4]	@ (8009030 <__sfp_lock_release+0x8>)
 800902a:	f000 b991 	b.w	8009350 <__retarget_lock_release_recursive>
 800902e:	bf00      	nop
 8009030:	20000aad 	.word	0x20000aad

08009034 <__sinit>:
 8009034:	b510      	push	{r4, lr}
 8009036:	4604      	mov	r4, r0
 8009038:	f7ff fff0 	bl	800901c <__sfp_lock_acquire>
 800903c:	6a23      	ldr	r3, [r4, #32]
 800903e:	b11b      	cbz	r3, 8009048 <__sinit+0x14>
 8009040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009044:	f7ff bff0 	b.w	8009028 <__sfp_lock_release>
 8009048:	4b04      	ldr	r3, [pc, #16]	@ (800905c <__sinit+0x28>)
 800904a:	6223      	str	r3, [r4, #32]
 800904c:	4b04      	ldr	r3, [pc, #16]	@ (8009060 <__sinit+0x2c>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d1f5      	bne.n	8009040 <__sinit+0xc>
 8009054:	f7ff ffc4 	bl	8008fe0 <global_stdio_init.part.0>
 8009058:	e7f2      	b.n	8009040 <__sinit+0xc>
 800905a:	bf00      	nop
 800905c:	08008fa1 	.word	0x08008fa1
 8009060:	20000aa4 	.word	0x20000aa4

08009064 <_fwalk_sglue>:
 8009064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009068:	4607      	mov	r7, r0
 800906a:	4688      	mov	r8, r1
 800906c:	4614      	mov	r4, r2
 800906e:	2600      	movs	r6, #0
 8009070:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009074:	f1b9 0901 	subs.w	r9, r9, #1
 8009078:	d505      	bpl.n	8009086 <_fwalk_sglue+0x22>
 800907a:	6824      	ldr	r4, [r4, #0]
 800907c:	2c00      	cmp	r4, #0
 800907e:	d1f7      	bne.n	8009070 <_fwalk_sglue+0xc>
 8009080:	4630      	mov	r0, r6
 8009082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009086:	89ab      	ldrh	r3, [r5, #12]
 8009088:	2b01      	cmp	r3, #1
 800908a:	d907      	bls.n	800909c <_fwalk_sglue+0x38>
 800908c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009090:	3301      	adds	r3, #1
 8009092:	d003      	beq.n	800909c <_fwalk_sglue+0x38>
 8009094:	4629      	mov	r1, r5
 8009096:	4638      	mov	r0, r7
 8009098:	47c0      	blx	r8
 800909a:	4306      	orrs	r6, r0
 800909c:	3568      	adds	r5, #104	@ 0x68
 800909e:	e7e9      	b.n	8009074 <_fwalk_sglue+0x10>

080090a0 <siprintf>:
 80090a0:	b40e      	push	{r1, r2, r3}
 80090a2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80090a6:	b500      	push	{lr}
 80090a8:	b09c      	sub	sp, #112	@ 0x70
 80090aa:	ab1d      	add	r3, sp, #116	@ 0x74
 80090ac:	9002      	str	r0, [sp, #8]
 80090ae:	9006      	str	r0, [sp, #24]
 80090b0:	9107      	str	r1, [sp, #28]
 80090b2:	9104      	str	r1, [sp, #16]
 80090b4:	4808      	ldr	r0, [pc, #32]	@ (80090d8 <siprintf+0x38>)
 80090b6:	4909      	ldr	r1, [pc, #36]	@ (80090dc <siprintf+0x3c>)
 80090b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80090bc:	9105      	str	r1, [sp, #20]
 80090be:	6800      	ldr	r0, [r0, #0]
 80090c0:	a902      	add	r1, sp, #8
 80090c2:	9301      	str	r3, [sp, #4]
 80090c4:	f002 f998 	bl	800b3f8 <_svfiprintf_r>
 80090c8:	2200      	movs	r2, #0
 80090ca:	9b02      	ldr	r3, [sp, #8]
 80090cc:	701a      	strb	r2, [r3, #0]
 80090ce:	b01c      	add	sp, #112	@ 0x70
 80090d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80090d4:	b003      	add	sp, #12
 80090d6:	4770      	bx	lr
 80090d8:	20000190 	.word	0x20000190
 80090dc:	ffff0208 	.word	0xffff0208

080090e0 <__sread>:
 80090e0:	b510      	push	{r4, lr}
 80090e2:	460c      	mov	r4, r1
 80090e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090e8:	f000 f8e2 	bl	80092b0 <_read_r>
 80090ec:	2800      	cmp	r0, #0
 80090ee:	bfab      	itete	ge
 80090f0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80090f2:	89a3      	ldrhlt	r3, [r4, #12]
 80090f4:	181b      	addge	r3, r3, r0
 80090f6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80090fa:	bfac      	ite	ge
 80090fc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80090fe:	81a3      	strhlt	r3, [r4, #12]
 8009100:	bd10      	pop	{r4, pc}

08009102 <__swrite>:
 8009102:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009106:	461f      	mov	r7, r3
 8009108:	898b      	ldrh	r3, [r1, #12]
 800910a:	4605      	mov	r5, r0
 800910c:	05db      	lsls	r3, r3, #23
 800910e:	460c      	mov	r4, r1
 8009110:	4616      	mov	r6, r2
 8009112:	d505      	bpl.n	8009120 <__swrite+0x1e>
 8009114:	2302      	movs	r3, #2
 8009116:	2200      	movs	r2, #0
 8009118:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800911c:	f000 f8b6 	bl	800928c <_lseek_r>
 8009120:	89a3      	ldrh	r3, [r4, #12]
 8009122:	4632      	mov	r2, r6
 8009124:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009128:	81a3      	strh	r3, [r4, #12]
 800912a:	4628      	mov	r0, r5
 800912c:	463b      	mov	r3, r7
 800912e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009132:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009136:	f000 b8cd 	b.w	80092d4 <_write_r>

0800913a <__sseek>:
 800913a:	b510      	push	{r4, lr}
 800913c:	460c      	mov	r4, r1
 800913e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009142:	f000 f8a3 	bl	800928c <_lseek_r>
 8009146:	1c43      	adds	r3, r0, #1
 8009148:	89a3      	ldrh	r3, [r4, #12]
 800914a:	bf15      	itete	ne
 800914c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800914e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009152:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009156:	81a3      	strheq	r3, [r4, #12]
 8009158:	bf18      	it	ne
 800915a:	81a3      	strhne	r3, [r4, #12]
 800915c:	bd10      	pop	{r4, pc}

0800915e <__sclose>:
 800915e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009162:	f000 b883 	b.w	800926c <_close_r>

08009166 <_vsniprintf_r>:
 8009166:	b530      	push	{r4, r5, lr}
 8009168:	4614      	mov	r4, r2
 800916a:	2c00      	cmp	r4, #0
 800916c:	4605      	mov	r5, r0
 800916e:	461a      	mov	r2, r3
 8009170:	b09b      	sub	sp, #108	@ 0x6c
 8009172:	da05      	bge.n	8009180 <_vsniprintf_r+0x1a>
 8009174:	238b      	movs	r3, #139	@ 0x8b
 8009176:	6003      	str	r3, [r0, #0]
 8009178:	f04f 30ff 	mov.w	r0, #4294967295
 800917c:	b01b      	add	sp, #108	@ 0x6c
 800917e:	bd30      	pop	{r4, r5, pc}
 8009180:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009184:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009188:	bf0c      	ite	eq
 800918a:	4623      	moveq	r3, r4
 800918c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009190:	9302      	str	r3, [sp, #8]
 8009192:	9305      	str	r3, [sp, #20]
 8009194:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009198:	9100      	str	r1, [sp, #0]
 800919a:	9104      	str	r1, [sp, #16]
 800919c:	f8ad 300e 	strh.w	r3, [sp, #14]
 80091a0:	4669      	mov	r1, sp
 80091a2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80091a4:	f002 f928 	bl	800b3f8 <_svfiprintf_r>
 80091a8:	1c43      	adds	r3, r0, #1
 80091aa:	bfbc      	itt	lt
 80091ac:	238b      	movlt	r3, #139	@ 0x8b
 80091ae:	602b      	strlt	r3, [r5, #0]
 80091b0:	2c00      	cmp	r4, #0
 80091b2:	d0e3      	beq.n	800917c <_vsniprintf_r+0x16>
 80091b4:	2200      	movs	r2, #0
 80091b6:	9b00      	ldr	r3, [sp, #0]
 80091b8:	701a      	strb	r2, [r3, #0]
 80091ba:	e7df      	b.n	800917c <_vsniprintf_r+0x16>

080091bc <vsniprintf>:
 80091bc:	b507      	push	{r0, r1, r2, lr}
 80091be:	9300      	str	r3, [sp, #0]
 80091c0:	4613      	mov	r3, r2
 80091c2:	460a      	mov	r2, r1
 80091c4:	4601      	mov	r1, r0
 80091c6:	4803      	ldr	r0, [pc, #12]	@ (80091d4 <vsniprintf+0x18>)
 80091c8:	6800      	ldr	r0, [r0, #0]
 80091ca:	f7ff ffcc 	bl	8009166 <_vsniprintf_r>
 80091ce:	b003      	add	sp, #12
 80091d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80091d4:	20000190 	.word	0x20000190

080091d8 <memset>:
 80091d8:	4603      	mov	r3, r0
 80091da:	4402      	add	r2, r0
 80091dc:	4293      	cmp	r3, r2
 80091de:	d100      	bne.n	80091e2 <memset+0xa>
 80091e0:	4770      	bx	lr
 80091e2:	f803 1b01 	strb.w	r1, [r3], #1
 80091e6:	e7f9      	b.n	80091dc <memset+0x4>

080091e8 <strncmp>:
 80091e8:	b510      	push	{r4, lr}
 80091ea:	b16a      	cbz	r2, 8009208 <strncmp+0x20>
 80091ec:	3901      	subs	r1, #1
 80091ee:	1884      	adds	r4, r0, r2
 80091f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091f4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80091f8:	429a      	cmp	r2, r3
 80091fa:	d103      	bne.n	8009204 <strncmp+0x1c>
 80091fc:	42a0      	cmp	r0, r4
 80091fe:	d001      	beq.n	8009204 <strncmp+0x1c>
 8009200:	2a00      	cmp	r2, #0
 8009202:	d1f5      	bne.n	80091f0 <strncmp+0x8>
 8009204:	1ad0      	subs	r0, r2, r3
 8009206:	bd10      	pop	{r4, pc}
 8009208:	4610      	mov	r0, r2
 800920a:	e7fc      	b.n	8009206 <strncmp+0x1e>

0800920c <__strtok_r>:
 800920c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800920e:	4604      	mov	r4, r0
 8009210:	b908      	cbnz	r0, 8009216 <__strtok_r+0xa>
 8009212:	6814      	ldr	r4, [r2, #0]
 8009214:	b144      	cbz	r4, 8009228 <__strtok_r+0x1c>
 8009216:	460f      	mov	r7, r1
 8009218:	4620      	mov	r0, r4
 800921a:	f814 5b01 	ldrb.w	r5, [r4], #1
 800921e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009222:	b91e      	cbnz	r6, 800922c <__strtok_r+0x20>
 8009224:	b965      	cbnz	r5, 8009240 <__strtok_r+0x34>
 8009226:	6015      	str	r5, [r2, #0]
 8009228:	2000      	movs	r0, #0
 800922a:	e005      	b.n	8009238 <__strtok_r+0x2c>
 800922c:	42b5      	cmp	r5, r6
 800922e:	d1f6      	bne.n	800921e <__strtok_r+0x12>
 8009230:	2b00      	cmp	r3, #0
 8009232:	d1f0      	bne.n	8009216 <__strtok_r+0xa>
 8009234:	6014      	str	r4, [r2, #0]
 8009236:	7003      	strb	r3, [r0, #0]
 8009238:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800923a:	461c      	mov	r4, r3
 800923c:	e00c      	b.n	8009258 <__strtok_r+0x4c>
 800923e:	b915      	cbnz	r5, 8009246 <__strtok_r+0x3a>
 8009240:	460e      	mov	r6, r1
 8009242:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009246:	f816 5b01 	ldrb.w	r5, [r6], #1
 800924a:	42ab      	cmp	r3, r5
 800924c:	d1f7      	bne.n	800923e <__strtok_r+0x32>
 800924e:	2b00      	cmp	r3, #0
 8009250:	d0f3      	beq.n	800923a <__strtok_r+0x2e>
 8009252:	2300      	movs	r3, #0
 8009254:	f804 3c01 	strb.w	r3, [r4, #-1]
 8009258:	6014      	str	r4, [r2, #0]
 800925a:	e7ed      	b.n	8009238 <__strtok_r+0x2c>

0800925c <strtok_r>:
 800925c:	2301      	movs	r3, #1
 800925e:	f7ff bfd5 	b.w	800920c <__strtok_r>
	...

08009264 <_localeconv_r>:
 8009264:	4800      	ldr	r0, [pc, #0]	@ (8009268 <_localeconv_r+0x4>)
 8009266:	4770      	bx	lr
 8009268:	20000114 	.word	0x20000114

0800926c <_close_r>:
 800926c:	b538      	push	{r3, r4, r5, lr}
 800926e:	2300      	movs	r3, #0
 8009270:	4d05      	ldr	r5, [pc, #20]	@ (8009288 <_close_r+0x1c>)
 8009272:	4604      	mov	r4, r0
 8009274:	4608      	mov	r0, r1
 8009276:	602b      	str	r3, [r5, #0]
 8009278:	f7fa f90f 	bl	800349a <_close>
 800927c:	1c43      	adds	r3, r0, #1
 800927e:	d102      	bne.n	8009286 <_close_r+0x1a>
 8009280:	682b      	ldr	r3, [r5, #0]
 8009282:	b103      	cbz	r3, 8009286 <_close_r+0x1a>
 8009284:	6023      	str	r3, [r4, #0]
 8009286:	bd38      	pop	{r3, r4, r5, pc}
 8009288:	20000aa8 	.word	0x20000aa8

0800928c <_lseek_r>:
 800928c:	b538      	push	{r3, r4, r5, lr}
 800928e:	4604      	mov	r4, r0
 8009290:	4608      	mov	r0, r1
 8009292:	4611      	mov	r1, r2
 8009294:	2200      	movs	r2, #0
 8009296:	4d05      	ldr	r5, [pc, #20]	@ (80092ac <_lseek_r+0x20>)
 8009298:	602a      	str	r2, [r5, #0]
 800929a:	461a      	mov	r2, r3
 800929c:	f7fa f921 	bl	80034e2 <_lseek>
 80092a0:	1c43      	adds	r3, r0, #1
 80092a2:	d102      	bne.n	80092aa <_lseek_r+0x1e>
 80092a4:	682b      	ldr	r3, [r5, #0]
 80092a6:	b103      	cbz	r3, 80092aa <_lseek_r+0x1e>
 80092a8:	6023      	str	r3, [r4, #0]
 80092aa:	bd38      	pop	{r3, r4, r5, pc}
 80092ac:	20000aa8 	.word	0x20000aa8

080092b0 <_read_r>:
 80092b0:	b538      	push	{r3, r4, r5, lr}
 80092b2:	4604      	mov	r4, r0
 80092b4:	4608      	mov	r0, r1
 80092b6:	4611      	mov	r1, r2
 80092b8:	2200      	movs	r2, #0
 80092ba:	4d05      	ldr	r5, [pc, #20]	@ (80092d0 <_read_r+0x20>)
 80092bc:	602a      	str	r2, [r5, #0]
 80092be:	461a      	mov	r2, r3
 80092c0:	f7fa f8b2 	bl	8003428 <_read>
 80092c4:	1c43      	adds	r3, r0, #1
 80092c6:	d102      	bne.n	80092ce <_read_r+0x1e>
 80092c8:	682b      	ldr	r3, [r5, #0]
 80092ca:	b103      	cbz	r3, 80092ce <_read_r+0x1e>
 80092cc:	6023      	str	r3, [r4, #0]
 80092ce:	bd38      	pop	{r3, r4, r5, pc}
 80092d0:	20000aa8 	.word	0x20000aa8

080092d4 <_write_r>:
 80092d4:	b538      	push	{r3, r4, r5, lr}
 80092d6:	4604      	mov	r4, r0
 80092d8:	4608      	mov	r0, r1
 80092da:	4611      	mov	r1, r2
 80092dc:	2200      	movs	r2, #0
 80092de:	4d05      	ldr	r5, [pc, #20]	@ (80092f4 <_write_r+0x20>)
 80092e0:	602a      	str	r2, [r5, #0]
 80092e2:	461a      	mov	r2, r3
 80092e4:	f7fa f8bd 	bl	8003462 <_write>
 80092e8:	1c43      	adds	r3, r0, #1
 80092ea:	d102      	bne.n	80092f2 <_write_r+0x1e>
 80092ec:	682b      	ldr	r3, [r5, #0]
 80092ee:	b103      	cbz	r3, 80092f2 <_write_r+0x1e>
 80092f0:	6023      	str	r3, [r4, #0]
 80092f2:	bd38      	pop	{r3, r4, r5, pc}
 80092f4:	20000aa8 	.word	0x20000aa8

080092f8 <__errno>:
 80092f8:	4b01      	ldr	r3, [pc, #4]	@ (8009300 <__errno+0x8>)
 80092fa:	6818      	ldr	r0, [r3, #0]
 80092fc:	4770      	bx	lr
 80092fe:	bf00      	nop
 8009300:	20000190 	.word	0x20000190

08009304 <__libc_init_array>:
 8009304:	b570      	push	{r4, r5, r6, lr}
 8009306:	2600      	movs	r6, #0
 8009308:	4d0c      	ldr	r5, [pc, #48]	@ (800933c <__libc_init_array+0x38>)
 800930a:	4c0d      	ldr	r4, [pc, #52]	@ (8009340 <__libc_init_array+0x3c>)
 800930c:	1b64      	subs	r4, r4, r5
 800930e:	10a4      	asrs	r4, r4, #2
 8009310:	42a6      	cmp	r6, r4
 8009312:	d109      	bne.n	8009328 <__libc_init_array+0x24>
 8009314:	f002 ff7e 	bl	800c214 <_init>
 8009318:	2600      	movs	r6, #0
 800931a:	4d0a      	ldr	r5, [pc, #40]	@ (8009344 <__libc_init_array+0x40>)
 800931c:	4c0a      	ldr	r4, [pc, #40]	@ (8009348 <__libc_init_array+0x44>)
 800931e:	1b64      	subs	r4, r4, r5
 8009320:	10a4      	asrs	r4, r4, #2
 8009322:	42a6      	cmp	r6, r4
 8009324:	d105      	bne.n	8009332 <__libc_init_array+0x2e>
 8009326:	bd70      	pop	{r4, r5, r6, pc}
 8009328:	f855 3b04 	ldr.w	r3, [r5], #4
 800932c:	4798      	blx	r3
 800932e:	3601      	adds	r6, #1
 8009330:	e7ee      	b.n	8009310 <__libc_init_array+0xc>
 8009332:	f855 3b04 	ldr.w	r3, [r5], #4
 8009336:	4798      	blx	r3
 8009338:	3601      	adds	r6, #1
 800933a:	e7f2      	b.n	8009322 <__libc_init_array+0x1e>
 800933c:	0800c8d0 	.word	0x0800c8d0
 8009340:	0800c8d0 	.word	0x0800c8d0
 8009344:	0800c8d0 	.word	0x0800c8d0
 8009348:	0800c8d4 	.word	0x0800c8d4

0800934c <__retarget_lock_init_recursive>:
 800934c:	4770      	bx	lr

0800934e <__retarget_lock_acquire_recursive>:
 800934e:	4770      	bx	lr

08009350 <__retarget_lock_release_recursive>:
 8009350:	4770      	bx	lr

08009352 <strcpy>:
 8009352:	4603      	mov	r3, r0
 8009354:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009358:	f803 2b01 	strb.w	r2, [r3], #1
 800935c:	2a00      	cmp	r2, #0
 800935e:	d1f9      	bne.n	8009354 <strcpy+0x2>
 8009360:	4770      	bx	lr

08009362 <memchr>:
 8009362:	4603      	mov	r3, r0
 8009364:	b510      	push	{r4, lr}
 8009366:	b2c9      	uxtb	r1, r1
 8009368:	4402      	add	r2, r0
 800936a:	4293      	cmp	r3, r2
 800936c:	4618      	mov	r0, r3
 800936e:	d101      	bne.n	8009374 <memchr+0x12>
 8009370:	2000      	movs	r0, #0
 8009372:	e003      	b.n	800937c <memchr+0x1a>
 8009374:	7804      	ldrb	r4, [r0, #0]
 8009376:	3301      	adds	r3, #1
 8009378:	428c      	cmp	r4, r1
 800937a:	d1f6      	bne.n	800936a <memchr+0x8>
 800937c:	bd10      	pop	{r4, pc}

0800937e <memcpy>:
 800937e:	440a      	add	r2, r1
 8009380:	4291      	cmp	r1, r2
 8009382:	f100 33ff 	add.w	r3, r0, #4294967295
 8009386:	d100      	bne.n	800938a <memcpy+0xc>
 8009388:	4770      	bx	lr
 800938a:	b510      	push	{r4, lr}
 800938c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009390:	4291      	cmp	r1, r2
 8009392:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009396:	d1f9      	bne.n	800938c <memcpy+0xe>
 8009398:	bd10      	pop	{r4, pc}
	...

0800939c <nan>:
 800939c:	2000      	movs	r0, #0
 800939e:	4901      	ldr	r1, [pc, #4]	@ (80093a4 <nan+0x8>)
 80093a0:	4770      	bx	lr
 80093a2:	bf00      	nop
 80093a4:	7ff80000 	.word	0x7ff80000

080093a8 <nanf>:
 80093a8:	4800      	ldr	r0, [pc, #0]	@ (80093ac <nanf+0x4>)
 80093aa:	4770      	bx	lr
 80093ac:	7fc00000 	.word	0x7fc00000

080093b0 <quorem>:
 80093b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093b4:	6903      	ldr	r3, [r0, #16]
 80093b6:	690c      	ldr	r4, [r1, #16]
 80093b8:	4607      	mov	r7, r0
 80093ba:	42a3      	cmp	r3, r4
 80093bc:	db7e      	blt.n	80094bc <quorem+0x10c>
 80093be:	3c01      	subs	r4, #1
 80093c0:	00a3      	lsls	r3, r4, #2
 80093c2:	f100 0514 	add.w	r5, r0, #20
 80093c6:	f101 0814 	add.w	r8, r1, #20
 80093ca:	9300      	str	r3, [sp, #0]
 80093cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80093d0:	9301      	str	r3, [sp, #4]
 80093d2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80093d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80093da:	3301      	adds	r3, #1
 80093dc:	429a      	cmp	r2, r3
 80093de:	fbb2 f6f3 	udiv	r6, r2, r3
 80093e2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80093e6:	d32e      	bcc.n	8009446 <quorem+0x96>
 80093e8:	f04f 0a00 	mov.w	sl, #0
 80093ec:	46c4      	mov	ip, r8
 80093ee:	46ae      	mov	lr, r5
 80093f0:	46d3      	mov	fp, sl
 80093f2:	f85c 3b04 	ldr.w	r3, [ip], #4
 80093f6:	b298      	uxth	r0, r3
 80093f8:	fb06 a000 	mla	r0, r6, r0, sl
 80093fc:	0c1b      	lsrs	r3, r3, #16
 80093fe:	0c02      	lsrs	r2, r0, #16
 8009400:	fb06 2303 	mla	r3, r6, r3, r2
 8009404:	f8de 2000 	ldr.w	r2, [lr]
 8009408:	b280      	uxth	r0, r0
 800940a:	b292      	uxth	r2, r2
 800940c:	1a12      	subs	r2, r2, r0
 800940e:	445a      	add	r2, fp
 8009410:	f8de 0000 	ldr.w	r0, [lr]
 8009414:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009418:	b29b      	uxth	r3, r3
 800941a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800941e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009422:	b292      	uxth	r2, r2
 8009424:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009428:	45e1      	cmp	r9, ip
 800942a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800942e:	f84e 2b04 	str.w	r2, [lr], #4
 8009432:	d2de      	bcs.n	80093f2 <quorem+0x42>
 8009434:	9b00      	ldr	r3, [sp, #0]
 8009436:	58eb      	ldr	r3, [r5, r3]
 8009438:	b92b      	cbnz	r3, 8009446 <quorem+0x96>
 800943a:	9b01      	ldr	r3, [sp, #4]
 800943c:	3b04      	subs	r3, #4
 800943e:	429d      	cmp	r5, r3
 8009440:	461a      	mov	r2, r3
 8009442:	d32f      	bcc.n	80094a4 <quorem+0xf4>
 8009444:	613c      	str	r4, [r7, #16]
 8009446:	4638      	mov	r0, r7
 8009448:	f001 fd0e 	bl	800ae68 <__mcmp>
 800944c:	2800      	cmp	r0, #0
 800944e:	db25      	blt.n	800949c <quorem+0xec>
 8009450:	4629      	mov	r1, r5
 8009452:	2000      	movs	r0, #0
 8009454:	f858 2b04 	ldr.w	r2, [r8], #4
 8009458:	f8d1 c000 	ldr.w	ip, [r1]
 800945c:	fa1f fe82 	uxth.w	lr, r2
 8009460:	fa1f f38c 	uxth.w	r3, ip
 8009464:	eba3 030e 	sub.w	r3, r3, lr
 8009468:	4403      	add	r3, r0
 800946a:	0c12      	lsrs	r2, r2, #16
 800946c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009470:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009474:	b29b      	uxth	r3, r3
 8009476:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800947a:	45c1      	cmp	r9, r8
 800947c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009480:	f841 3b04 	str.w	r3, [r1], #4
 8009484:	d2e6      	bcs.n	8009454 <quorem+0xa4>
 8009486:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800948a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800948e:	b922      	cbnz	r2, 800949a <quorem+0xea>
 8009490:	3b04      	subs	r3, #4
 8009492:	429d      	cmp	r5, r3
 8009494:	461a      	mov	r2, r3
 8009496:	d30b      	bcc.n	80094b0 <quorem+0x100>
 8009498:	613c      	str	r4, [r7, #16]
 800949a:	3601      	adds	r6, #1
 800949c:	4630      	mov	r0, r6
 800949e:	b003      	add	sp, #12
 80094a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094a4:	6812      	ldr	r2, [r2, #0]
 80094a6:	3b04      	subs	r3, #4
 80094a8:	2a00      	cmp	r2, #0
 80094aa:	d1cb      	bne.n	8009444 <quorem+0x94>
 80094ac:	3c01      	subs	r4, #1
 80094ae:	e7c6      	b.n	800943e <quorem+0x8e>
 80094b0:	6812      	ldr	r2, [r2, #0]
 80094b2:	3b04      	subs	r3, #4
 80094b4:	2a00      	cmp	r2, #0
 80094b6:	d1ef      	bne.n	8009498 <quorem+0xe8>
 80094b8:	3c01      	subs	r4, #1
 80094ba:	e7ea      	b.n	8009492 <quorem+0xe2>
 80094bc:	2000      	movs	r0, #0
 80094be:	e7ee      	b.n	800949e <quorem+0xee>

080094c0 <_dtoa_r>:
 80094c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094c4:	4614      	mov	r4, r2
 80094c6:	461d      	mov	r5, r3
 80094c8:	69c7      	ldr	r7, [r0, #28]
 80094ca:	b097      	sub	sp, #92	@ 0x5c
 80094cc:	4683      	mov	fp, r0
 80094ce:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80094d2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80094d4:	b97f      	cbnz	r7, 80094f6 <_dtoa_r+0x36>
 80094d6:	2010      	movs	r0, #16
 80094d8:	f001 f93c 	bl	800a754 <malloc>
 80094dc:	4602      	mov	r2, r0
 80094de:	f8cb 001c 	str.w	r0, [fp, #28]
 80094e2:	b920      	cbnz	r0, 80094ee <_dtoa_r+0x2e>
 80094e4:	21ef      	movs	r1, #239	@ 0xef
 80094e6:	4ba8      	ldr	r3, [pc, #672]	@ (8009788 <_dtoa_r+0x2c8>)
 80094e8:	48a8      	ldr	r0, [pc, #672]	@ (800978c <_dtoa_r+0x2cc>)
 80094ea:	f002 f953 	bl	800b794 <__assert_func>
 80094ee:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80094f2:	6007      	str	r7, [r0, #0]
 80094f4:	60c7      	str	r7, [r0, #12]
 80094f6:	f8db 301c 	ldr.w	r3, [fp, #28]
 80094fa:	6819      	ldr	r1, [r3, #0]
 80094fc:	b159      	cbz	r1, 8009516 <_dtoa_r+0x56>
 80094fe:	685a      	ldr	r2, [r3, #4]
 8009500:	2301      	movs	r3, #1
 8009502:	4093      	lsls	r3, r2
 8009504:	604a      	str	r2, [r1, #4]
 8009506:	608b      	str	r3, [r1, #8]
 8009508:	4658      	mov	r0, fp
 800950a:	f001 fa2b 	bl	800a964 <_Bfree>
 800950e:	2200      	movs	r2, #0
 8009510:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009514:	601a      	str	r2, [r3, #0]
 8009516:	1e2b      	subs	r3, r5, #0
 8009518:	bfaf      	iteee	ge
 800951a:	2300      	movge	r3, #0
 800951c:	2201      	movlt	r2, #1
 800951e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009522:	9303      	strlt	r3, [sp, #12]
 8009524:	bfa8      	it	ge
 8009526:	6033      	strge	r3, [r6, #0]
 8009528:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800952c:	4b98      	ldr	r3, [pc, #608]	@ (8009790 <_dtoa_r+0x2d0>)
 800952e:	bfb8      	it	lt
 8009530:	6032      	strlt	r2, [r6, #0]
 8009532:	ea33 0308 	bics.w	r3, r3, r8
 8009536:	d112      	bne.n	800955e <_dtoa_r+0x9e>
 8009538:	f242 730f 	movw	r3, #9999	@ 0x270f
 800953c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800953e:	6013      	str	r3, [r2, #0]
 8009540:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009544:	4323      	orrs	r3, r4
 8009546:	f000 8550 	beq.w	8009fea <_dtoa_r+0xb2a>
 800954a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800954c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8009794 <_dtoa_r+0x2d4>
 8009550:	2b00      	cmp	r3, #0
 8009552:	f000 8552 	beq.w	8009ffa <_dtoa_r+0xb3a>
 8009556:	f10a 0303 	add.w	r3, sl, #3
 800955a:	f000 bd4c 	b.w	8009ff6 <_dtoa_r+0xb36>
 800955e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009562:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009566:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800956a:	2200      	movs	r2, #0
 800956c:	2300      	movs	r3, #0
 800956e:	f7f7 fa25 	bl	80009bc <__aeabi_dcmpeq>
 8009572:	4607      	mov	r7, r0
 8009574:	b158      	cbz	r0, 800958e <_dtoa_r+0xce>
 8009576:	2301      	movs	r3, #1
 8009578:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800957a:	6013      	str	r3, [r2, #0]
 800957c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800957e:	b113      	cbz	r3, 8009586 <_dtoa_r+0xc6>
 8009580:	4b85      	ldr	r3, [pc, #532]	@ (8009798 <_dtoa_r+0x2d8>)
 8009582:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009584:	6013      	str	r3, [r2, #0]
 8009586:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800979c <_dtoa_r+0x2dc>
 800958a:	f000 bd36 	b.w	8009ffa <_dtoa_r+0xb3a>
 800958e:	ab14      	add	r3, sp, #80	@ 0x50
 8009590:	9301      	str	r3, [sp, #4]
 8009592:	ab15      	add	r3, sp, #84	@ 0x54
 8009594:	9300      	str	r3, [sp, #0]
 8009596:	4658      	mov	r0, fp
 8009598:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800959c:	f001 fd7c 	bl	800b098 <__d2b>
 80095a0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80095a4:	4681      	mov	r9, r0
 80095a6:	2e00      	cmp	r6, #0
 80095a8:	d077      	beq.n	800969a <_dtoa_r+0x1da>
 80095aa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80095ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80095b0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80095b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80095b8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80095bc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80095c0:	9712      	str	r7, [sp, #72]	@ 0x48
 80095c2:	4619      	mov	r1, r3
 80095c4:	2200      	movs	r2, #0
 80095c6:	4b76      	ldr	r3, [pc, #472]	@ (80097a0 <_dtoa_r+0x2e0>)
 80095c8:	f7f6 fdd8 	bl	800017c <__aeabi_dsub>
 80095cc:	a368      	add	r3, pc, #416	@ (adr r3, 8009770 <_dtoa_r+0x2b0>)
 80095ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095d2:	f7f6 ff8b 	bl	80004ec <__aeabi_dmul>
 80095d6:	a368      	add	r3, pc, #416	@ (adr r3, 8009778 <_dtoa_r+0x2b8>)
 80095d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095dc:	f7f6 fdd0 	bl	8000180 <__adddf3>
 80095e0:	4604      	mov	r4, r0
 80095e2:	4630      	mov	r0, r6
 80095e4:	460d      	mov	r5, r1
 80095e6:	f7f6 ff17 	bl	8000418 <__aeabi_i2d>
 80095ea:	a365      	add	r3, pc, #404	@ (adr r3, 8009780 <_dtoa_r+0x2c0>)
 80095ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f0:	f7f6 ff7c 	bl	80004ec <__aeabi_dmul>
 80095f4:	4602      	mov	r2, r0
 80095f6:	460b      	mov	r3, r1
 80095f8:	4620      	mov	r0, r4
 80095fa:	4629      	mov	r1, r5
 80095fc:	f7f6 fdc0 	bl	8000180 <__adddf3>
 8009600:	4604      	mov	r4, r0
 8009602:	460d      	mov	r5, r1
 8009604:	f7f7 fa22 	bl	8000a4c <__aeabi_d2iz>
 8009608:	2200      	movs	r2, #0
 800960a:	4607      	mov	r7, r0
 800960c:	2300      	movs	r3, #0
 800960e:	4620      	mov	r0, r4
 8009610:	4629      	mov	r1, r5
 8009612:	f7f7 f9dd 	bl	80009d0 <__aeabi_dcmplt>
 8009616:	b140      	cbz	r0, 800962a <_dtoa_r+0x16a>
 8009618:	4638      	mov	r0, r7
 800961a:	f7f6 fefd 	bl	8000418 <__aeabi_i2d>
 800961e:	4622      	mov	r2, r4
 8009620:	462b      	mov	r3, r5
 8009622:	f7f7 f9cb 	bl	80009bc <__aeabi_dcmpeq>
 8009626:	b900      	cbnz	r0, 800962a <_dtoa_r+0x16a>
 8009628:	3f01      	subs	r7, #1
 800962a:	2f16      	cmp	r7, #22
 800962c:	d853      	bhi.n	80096d6 <_dtoa_r+0x216>
 800962e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009632:	4b5c      	ldr	r3, [pc, #368]	@ (80097a4 <_dtoa_r+0x2e4>)
 8009634:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800963c:	f7f7 f9c8 	bl	80009d0 <__aeabi_dcmplt>
 8009640:	2800      	cmp	r0, #0
 8009642:	d04a      	beq.n	80096da <_dtoa_r+0x21a>
 8009644:	2300      	movs	r3, #0
 8009646:	3f01      	subs	r7, #1
 8009648:	930f      	str	r3, [sp, #60]	@ 0x3c
 800964a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800964c:	1b9b      	subs	r3, r3, r6
 800964e:	1e5a      	subs	r2, r3, #1
 8009650:	bf46      	itte	mi
 8009652:	f1c3 0801 	rsbmi	r8, r3, #1
 8009656:	2300      	movmi	r3, #0
 8009658:	f04f 0800 	movpl.w	r8, #0
 800965c:	9209      	str	r2, [sp, #36]	@ 0x24
 800965e:	bf48      	it	mi
 8009660:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8009662:	2f00      	cmp	r7, #0
 8009664:	db3b      	blt.n	80096de <_dtoa_r+0x21e>
 8009666:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009668:	970e      	str	r7, [sp, #56]	@ 0x38
 800966a:	443b      	add	r3, r7
 800966c:	9309      	str	r3, [sp, #36]	@ 0x24
 800966e:	2300      	movs	r3, #0
 8009670:	930a      	str	r3, [sp, #40]	@ 0x28
 8009672:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009674:	2b09      	cmp	r3, #9
 8009676:	d866      	bhi.n	8009746 <_dtoa_r+0x286>
 8009678:	2b05      	cmp	r3, #5
 800967a:	bfc4      	itt	gt
 800967c:	3b04      	subgt	r3, #4
 800967e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8009680:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009682:	bfc8      	it	gt
 8009684:	2400      	movgt	r4, #0
 8009686:	f1a3 0302 	sub.w	r3, r3, #2
 800968a:	bfd8      	it	le
 800968c:	2401      	movle	r4, #1
 800968e:	2b03      	cmp	r3, #3
 8009690:	d864      	bhi.n	800975c <_dtoa_r+0x29c>
 8009692:	e8df f003 	tbb	[pc, r3]
 8009696:	382b      	.short	0x382b
 8009698:	5636      	.short	0x5636
 800969a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800969e:	441e      	add	r6, r3
 80096a0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80096a4:	2b20      	cmp	r3, #32
 80096a6:	bfc1      	itttt	gt
 80096a8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80096ac:	fa08 f803 	lslgt.w	r8, r8, r3
 80096b0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80096b4:	fa24 f303 	lsrgt.w	r3, r4, r3
 80096b8:	bfd6      	itet	le
 80096ba:	f1c3 0320 	rsble	r3, r3, #32
 80096be:	ea48 0003 	orrgt.w	r0, r8, r3
 80096c2:	fa04 f003 	lslle.w	r0, r4, r3
 80096c6:	f7f6 fe97 	bl	80003f8 <__aeabi_ui2d>
 80096ca:	2201      	movs	r2, #1
 80096cc:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80096d0:	3e01      	subs	r6, #1
 80096d2:	9212      	str	r2, [sp, #72]	@ 0x48
 80096d4:	e775      	b.n	80095c2 <_dtoa_r+0x102>
 80096d6:	2301      	movs	r3, #1
 80096d8:	e7b6      	b.n	8009648 <_dtoa_r+0x188>
 80096da:	900f      	str	r0, [sp, #60]	@ 0x3c
 80096dc:	e7b5      	b.n	800964a <_dtoa_r+0x18a>
 80096de:	427b      	negs	r3, r7
 80096e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80096e2:	2300      	movs	r3, #0
 80096e4:	eba8 0807 	sub.w	r8, r8, r7
 80096e8:	930e      	str	r3, [sp, #56]	@ 0x38
 80096ea:	e7c2      	b.n	8009672 <_dtoa_r+0x1b2>
 80096ec:	2300      	movs	r3, #0
 80096ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 80096f0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	dc35      	bgt.n	8009762 <_dtoa_r+0x2a2>
 80096f6:	2301      	movs	r3, #1
 80096f8:	461a      	mov	r2, r3
 80096fa:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80096fe:	9221      	str	r2, [sp, #132]	@ 0x84
 8009700:	e00b      	b.n	800971a <_dtoa_r+0x25a>
 8009702:	2301      	movs	r3, #1
 8009704:	e7f3      	b.n	80096ee <_dtoa_r+0x22e>
 8009706:	2300      	movs	r3, #0
 8009708:	930b      	str	r3, [sp, #44]	@ 0x2c
 800970a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800970c:	18fb      	adds	r3, r7, r3
 800970e:	9308      	str	r3, [sp, #32]
 8009710:	3301      	adds	r3, #1
 8009712:	2b01      	cmp	r3, #1
 8009714:	9307      	str	r3, [sp, #28]
 8009716:	bfb8      	it	lt
 8009718:	2301      	movlt	r3, #1
 800971a:	2100      	movs	r1, #0
 800971c:	2204      	movs	r2, #4
 800971e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009722:	f102 0514 	add.w	r5, r2, #20
 8009726:	429d      	cmp	r5, r3
 8009728:	d91f      	bls.n	800976a <_dtoa_r+0x2aa>
 800972a:	6041      	str	r1, [r0, #4]
 800972c:	4658      	mov	r0, fp
 800972e:	f001 f8d9 	bl	800a8e4 <_Balloc>
 8009732:	4682      	mov	sl, r0
 8009734:	2800      	cmp	r0, #0
 8009736:	d139      	bne.n	80097ac <_dtoa_r+0x2ec>
 8009738:	4602      	mov	r2, r0
 800973a:	f240 11af 	movw	r1, #431	@ 0x1af
 800973e:	4b1a      	ldr	r3, [pc, #104]	@ (80097a8 <_dtoa_r+0x2e8>)
 8009740:	e6d2      	b.n	80094e8 <_dtoa_r+0x28>
 8009742:	2301      	movs	r3, #1
 8009744:	e7e0      	b.n	8009708 <_dtoa_r+0x248>
 8009746:	2401      	movs	r4, #1
 8009748:	2300      	movs	r3, #0
 800974a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800974c:	9320      	str	r3, [sp, #128]	@ 0x80
 800974e:	f04f 33ff 	mov.w	r3, #4294967295
 8009752:	2200      	movs	r2, #0
 8009754:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8009758:	2312      	movs	r3, #18
 800975a:	e7d0      	b.n	80096fe <_dtoa_r+0x23e>
 800975c:	2301      	movs	r3, #1
 800975e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009760:	e7f5      	b.n	800974e <_dtoa_r+0x28e>
 8009762:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009764:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8009768:	e7d7      	b.n	800971a <_dtoa_r+0x25a>
 800976a:	3101      	adds	r1, #1
 800976c:	0052      	lsls	r2, r2, #1
 800976e:	e7d8      	b.n	8009722 <_dtoa_r+0x262>
 8009770:	636f4361 	.word	0x636f4361
 8009774:	3fd287a7 	.word	0x3fd287a7
 8009778:	8b60c8b3 	.word	0x8b60c8b3
 800977c:	3fc68a28 	.word	0x3fc68a28
 8009780:	509f79fb 	.word	0x509f79fb
 8009784:	3fd34413 	.word	0x3fd34413
 8009788:	0800c607 	.word	0x0800c607
 800978c:	0800c61e 	.word	0x0800c61e
 8009790:	7ff00000 	.word	0x7ff00000
 8009794:	0800c603 	.word	0x0800c603
 8009798:	0800c5ca 	.word	0x0800c5ca
 800979c:	0800c5c9 	.word	0x0800c5c9
 80097a0:	3ff80000 	.word	0x3ff80000
 80097a4:	0800c778 	.word	0x0800c778
 80097a8:	0800c676 	.word	0x0800c676
 80097ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 80097b0:	6018      	str	r0, [r3, #0]
 80097b2:	9b07      	ldr	r3, [sp, #28]
 80097b4:	2b0e      	cmp	r3, #14
 80097b6:	f200 80a4 	bhi.w	8009902 <_dtoa_r+0x442>
 80097ba:	2c00      	cmp	r4, #0
 80097bc:	f000 80a1 	beq.w	8009902 <_dtoa_r+0x442>
 80097c0:	2f00      	cmp	r7, #0
 80097c2:	dd33      	ble.n	800982c <_dtoa_r+0x36c>
 80097c4:	4b86      	ldr	r3, [pc, #536]	@ (80099e0 <_dtoa_r+0x520>)
 80097c6:	f007 020f 	and.w	r2, r7, #15
 80097ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80097ce:	05f8      	lsls	r0, r7, #23
 80097d0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80097d4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80097d8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80097dc:	d516      	bpl.n	800980c <_dtoa_r+0x34c>
 80097de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80097e2:	4b80      	ldr	r3, [pc, #512]	@ (80099e4 <_dtoa_r+0x524>)
 80097e4:	2603      	movs	r6, #3
 80097e6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80097ea:	f7f6 ffa9 	bl	8000740 <__aeabi_ddiv>
 80097ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097f2:	f004 040f 	and.w	r4, r4, #15
 80097f6:	4d7b      	ldr	r5, [pc, #492]	@ (80099e4 <_dtoa_r+0x524>)
 80097f8:	b954      	cbnz	r4, 8009810 <_dtoa_r+0x350>
 80097fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80097fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009802:	f7f6 ff9d 	bl	8000740 <__aeabi_ddiv>
 8009806:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800980a:	e028      	b.n	800985e <_dtoa_r+0x39e>
 800980c:	2602      	movs	r6, #2
 800980e:	e7f2      	b.n	80097f6 <_dtoa_r+0x336>
 8009810:	07e1      	lsls	r1, r4, #31
 8009812:	d508      	bpl.n	8009826 <_dtoa_r+0x366>
 8009814:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009818:	e9d5 2300 	ldrd	r2, r3, [r5]
 800981c:	f7f6 fe66 	bl	80004ec <__aeabi_dmul>
 8009820:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009824:	3601      	adds	r6, #1
 8009826:	1064      	asrs	r4, r4, #1
 8009828:	3508      	adds	r5, #8
 800982a:	e7e5      	b.n	80097f8 <_dtoa_r+0x338>
 800982c:	f000 80d2 	beq.w	80099d4 <_dtoa_r+0x514>
 8009830:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009834:	427c      	negs	r4, r7
 8009836:	4b6a      	ldr	r3, [pc, #424]	@ (80099e0 <_dtoa_r+0x520>)
 8009838:	f004 020f 	and.w	r2, r4, #15
 800983c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009844:	f7f6 fe52 	bl	80004ec <__aeabi_dmul>
 8009848:	2602      	movs	r6, #2
 800984a:	2300      	movs	r3, #0
 800984c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009850:	4d64      	ldr	r5, [pc, #400]	@ (80099e4 <_dtoa_r+0x524>)
 8009852:	1124      	asrs	r4, r4, #4
 8009854:	2c00      	cmp	r4, #0
 8009856:	f040 80b2 	bne.w	80099be <_dtoa_r+0x4fe>
 800985a:	2b00      	cmp	r3, #0
 800985c:	d1d3      	bne.n	8009806 <_dtoa_r+0x346>
 800985e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009862:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009864:	2b00      	cmp	r3, #0
 8009866:	f000 80b7 	beq.w	80099d8 <_dtoa_r+0x518>
 800986a:	2200      	movs	r2, #0
 800986c:	4620      	mov	r0, r4
 800986e:	4629      	mov	r1, r5
 8009870:	4b5d      	ldr	r3, [pc, #372]	@ (80099e8 <_dtoa_r+0x528>)
 8009872:	f7f7 f8ad 	bl	80009d0 <__aeabi_dcmplt>
 8009876:	2800      	cmp	r0, #0
 8009878:	f000 80ae 	beq.w	80099d8 <_dtoa_r+0x518>
 800987c:	9b07      	ldr	r3, [sp, #28]
 800987e:	2b00      	cmp	r3, #0
 8009880:	f000 80aa 	beq.w	80099d8 <_dtoa_r+0x518>
 8009884:	9b08      	ldr	r3, [sp, #32]
 8009886:	2b00      	cmp	r3, #0
 8009888:	dd37      	ble.n	80098fa <_dtoa_r+0x43a>
 800988a:	1e7b      	subs	r3, r7, #1
 800988c:	4620      	mov	r0, r4
 800988e:	9304      	str	r3, [sp, #16]
 8009890:	2200      	movs	r2, #0
 8009892:	4629      	mov	r1, r5
 8009894:	4b55      	ldr	r3, [pc, #340]	@ (80099ec <_dtoa_r+0x52c>)
 8009896:	f7f6 fe29 	bl	80004ec <__aeabi_dmul>
 800989a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800989e:	9c08      	ldr	r4, [sp, #32]
 80098a0:	3601      	adds	r6, #1
 80098a2:	4630      	mov	r0, r6
 80098a4:	f7f6 fdb8 	bl	8000418 <__aeabi_i2d>
 80098a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80098ac:	f7f6 fe1e 	bl	80004ec <__aeabi_dmul>
 80098b0:	2200      	movs	r2, #0
 80098b2:	4b4f      	ldr	r3, [pc, #316]	@ (80099f0 <_dtoa_r+0x530>)
 80098b4:	f7f6 fc64 	bl	8000180 <__adddf3>
 80098b8:	4605      	mov	r5, r0
 80098ba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80098be:	2c00      	cmp	r4, #0
 80098c0:	f040 809a 	bne.w	80099f8 <_dtoa_r+0x538>
 80098c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098c8:	2200      	movs	r2, #0
 80098ca:	4b4a      	ldr	r3, [pc, #296]	@ (80099f4 <_dtoa_r+0x534>)
 80098cc:	f7f6 fc56 	bl	800017c <__aeabi_dsub>
 80098d0:	4602      	mov	r2, r0
 80098d2:	460b      	mov	r3, r1
 80098d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80098d8:	462a      	mov	r2, r5
 80098da:	4633      	mov	r3, r6
 80098dc:	f7f7 f896 	bl	8000a0c <__aeabi_dcmpgt>
 80098e0:	2800      	cmp	r0, #0
 80098e2:	f040 828e 	bne.w	8009e02 <_dtoa_r+0x942>
 80098e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098ea:	462a      	mov	r2, r5
 80098ec:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80098f0:	f7f7 f86e 	bl	80009d0 <__aeabi_dcmplt>
 80098f4:	2800      	cmp	r0, #0
 80098f6:	f040 8127 	bne.w	8009b48 <_dtoa_r+0x688>
 80098fa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80098fe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009902:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009904:	2b00      	cmp	r3, #0
 8009906:	f2c0 8163 	blt.w	8009bd0 <_dtoa_r+0x710>
 800990a:	2f0e      	cmp	r7, #14
 800990c:	f300 8160 	bgt.w	8009bd0 <_dtoa_r+0x710>
 8009910:	4b33      	ldr	r3, [pc, #204]	@ (80099e0 <_dtoa_r+0x520>)
 8009912:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009916:	e9d3 3400 	ldrd	r3, r4, [r3]
 800991a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800991e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009920:	2b00      	cmp	r3, #0
 8009922:	da03      	bge.n	800992c <_dtoa_r+0x46c>
 8009924:	9b07      	ldr	r3, [sp, #28]
 8009926:	2b00      	cmp	r3, #0
 8009928:	f340 8100 	ble.w	8009b2c <_dtoa_r+0x66c>
 800992c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009930:	4656      	mov	r6, sl
 8009932:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009936:	4620      	mov	r0, r4
 8009938:	4629      	mov	r1, r5
 800993a:	f7f6 ff01 	bl	8000740 <__aeabi_ddiv>
 800993e:	f7f7 f885 	bl	8000a4c <__aeabi_d2iz>
 8009942:	4680      	mov	r8, r0
 8009944:	f7f6 fd68 	bl	8000418 <__aeabi_i2d>
 8009948:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800994c:	f7f6 fdce 	bl	80004ec <__aeabi_dmul>
 8009950:	4602      	mov	r2, r0
 8009952:	460b      	mov	r3, r1
 8009954:	4620      	mov	r0, r4
 8009956:	4629      	mov	r1, r5
 8009958:	f7f6 fc10 	bl	800017c <__aeabi_dsub>
 800995c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009960:	9d07      	ldr	r5, [sp, #28]
 8009962:	f806 4b01 	strb.w	r4, [r6], #1
 8009966:	eba6 040a 	sub.w	r4, r6, sl
 800996a:	42a5      	cmp	r5, r4
 800996c:	4602      	mov	r2, r0
 800996e:	460b      	mov	r3, r1
 8009970:	f040 8116 	bne.w	8009ba0 <_dtoa_r+0x6e0>
 8009974:	f7f6 fc04 	bl	8000180 <__adddf3>
 8009978:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800997c:	4604      	mov	r4, r0
 800997e:	460d      	mov	r5, r1
 8009980:	f7f7 f844 	bl	8000a0c <__aeabi_dcmpgt>
 8009984:	2800      	cmp	r0, #0
 8009986:	f040 80f8 	bne.w	8009b7a <_dtoa_r+0x6ba>
 800998a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800998e:	4620      	mov	r0, r4
 8009990:	4629      	mov	r1, r5
 8009992:	f7f7 f813 	bl	80009bc <__aeabi_dcmpeq>
 8009996:	b118      	cbz	r0, 80099a0 <_dtoa_r+0x4e0>
 8009998:	f018 0f01 	tst.w	r8, #1
 800999c:	f040 80ed 	bne.w	8009b7a <_dtoa_r+0x6ba>
 80099a0:	4649      	mov	r1, r9
 80099a2:	4658      	mov	r0, fp
 80099a4:	f000 ffde 	bl	800a964 <_Bfree>
 80099a8:	2300      	movs	r3, #0
 80099aa:	7033      	strb	r3, [r6, #0]
 80099ac:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80099ae:	3701      	adds	r7, #1
 80099b0:	601f      	str	r7, [r3, #0]
 80099b2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	f000 8320 	beq.w	8009ffa <_dtoa_r+0xb3a>
 80099ba:	601e      	str	r6, [r3, #0]
 80099bc:	e31d      	b.n	8009ffa <_dtoa_r+0xb3a>
 80099be:	07e2      	lsls	r2, r4, #31
 80099c0:	d505      	bpl.n	80099ce <_dtoa_r+0x50e>
 80099c2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80099c6:	f7f6 fd91 	bl	80004ec <__aeabi_dmul>
 80099ca:	2301      	movs	r3, #1
 80099cc:	3601      	adds	r6, #1
 80099ce:	1064      	asrs	r4, r4, #1
 80099d0:	3508      	adds	r5, #8
 80099d2:	e73f      	b.n	8009854 <_dtoa_r+0x394>
 80099d4:	2602      	movs	r6, #2
 80099d6:	e742      	b.n	800985e <_dtoa_r+0x39e>
 80099d8:	9c07      	ldr	r4, [sp, #28]
 80099da:	9704      	str	r7, [sp, #16]
 80099dc:	e761      	b.n	80098a2 <_dtoa_r+0x3e2>
 80099de:	bf00      	nop
 80099e0:	0800c778 	.word	0x0800c778
 80099e4:	0800c750 	.word	0x0800c750
 80099e8:	3ff00000 	.word	0x3ff00000
 80099ec:	40240000 	.word	0x40240000
 80099f0:	401c0000 	.word	0x401c0000
 80099f4:	40140000 	.word	0x40140000
 80099f8:	4b70      	ldr	r3, [pc, #448]	@ (8009bbc <_dtoa_r+0x6fc>)
 80099fa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80099fc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009a00:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009a04:	4454      	add	r4, sl
 8009a06:	2900      	cmp	r1, #0
 8009a08:	d045      	beq.n	8009a96 <_dtoa_r+0x5d6>
 8009a0a:	2000      	movs	r0, #0
 8009a0c:	496c      	ldr	r1, [pc, #432]	@ (8009bc0 <_dtoa_r+0x700>)
 8009a0e:	f7f6 fe97 	bl	8000740 <__aeabi_ddiv>
 8009a12:	4633      	mov	r3, r6
 8009a14:	462a      	mov	r2, r5
 8009a16:	f7f6 fbb1 	bl	800017c <__aeabi_dsub>
 8009a1a:	4656      	mov	r6, sl
 8009a1c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009a20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a24:	f7f7 f812 	bl	8000a4c <__aeabi_d2iz>
 8009a28:	4605      	mov	r5, r0
 8009a2a:	f7f6 fcf5 	bl	8000418 <__aeabi_i2d>
 8009a2e:	4602      	mov	r2, r0
 8009a30:	460b      	mov	r3, r1
 8009a32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a36:	f7f6 fba1 	bl	800017c <__aeabi_dsub>
 8009a3a:	4602      	mov	r2, r0
 8009a3c:	460b      	mov	r3, r1
 8009a3e:	3530      	adds	r5, #48	@ 0x30
 8009a40:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009a44:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009a48:	f806 5b01 	strb.w	r5, [r6], #1
 8009a4c:	f7f6 ffc0 	bl	80009d0 <__aeabi_dcmplt>
 8009a50:	2800      	cmp	r0, #0
 8009a52:	d163      	bne.n	8009b1c <_dtoa_r+0x65c>
 8009a54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009a58:	2000      	movs	r0, #0
 8009a5a:	495a      	ldr	r1, [pc, #360]	@ (8009bc4 <_dtoa_r+0x704>)
 8009a5c:	f7f6 fb8e 	bl	800017c <__aeabi_dsub>
 8009a60:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009a64:	f7f6 ffb4 	bl	80009d0 <__aeabi_dcmplt>
 8009a68:	2800      	cmp	r0, #0
 8009a6a:	f040 8087 	bne.w	8009b7c <_dtoa_r+0x6bc>
 8009a6e:	42a6      	cmp	r6, r4
 8009a70:	f43f af43 	beq.w	80098fa <_dtoa_r+0x43a>
 8009a74:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009a78:	2200      	movs	r2, #0
 8009a7a:	4b53      	ldr	r3, [pc, #332]	@ (8009bc8 <_dtoa_r+0x708>)
 8009a7c:	f7f6 fd36 	bl	80004ec <__aeabi_dmul>
 8009a80:	2200      	movs	r2, #0
 8009a82:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009a86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a8a:	4b4f      	ldr	r3, [pc, #316]	@ (8009bc8 <_dtoa_r+0x708>)
 8009a8c:	f7f6 fd2e 	bl	80004ec <__aeabi_dmul>
 8009a90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a94:	e7c4      	b.n	8009a20 <_dtoa_r+0x560>
 8009a96:	4631      	mov	r1, r6
 8009a98:	4628      	mov	r0, r5
 8009a9a:	f7f6 fd27 	bl	80004ec <__aeabi_dmul>
 8009a9e:	4656      	mov	r6, sl
 8009aa0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009aa4:	9413      	str	r4, [sp, #76]	@ 0x4c
 8009aa6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009aaa:	f7f6 ffcf 	bl	8000a4c <__aeabi_d2iz>
 8009aae:	4605      	mov	r5, r0
 8009ab0:	f7f6 fcb2 	bl	8000418 <__aeabi_i2d>
 8009ab4:	4602      	mov	r2, r0
 8009ab6:	460b      	mov	r3, r1
 8009ab8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009abc:	f7f6 fb5e 	bl	800017c <__aeabi_dsub>
 8009ac0:	4602      	mov	r2, r0
 8009ac2:	460b      	mov	r3, r1
 8009ac4:	3530      	adds	r5, #48	@ 0x30
 8009ac6:	f806 5b01 	strb.w	r5, [r6], #1
 8009aca:	42a6      	cmp	r6, r4
 8009acc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009ad0:	f04f 0200 	mov.w	r2, #0
 8009ad4:	d124      	bne.n	8009b20 <_dtoa_r+0x660>
 8009ad6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009ada:	4b39      	ldr	r3, [pc, #228]	@ (8009bc0 <_dtoa_r+0x700>)
 8009adc:	f7f6 fb50 	bl	8000180 <__adddf3>
 8009ae0:	4602      	mov	r2, r0
 8009ae2:	460b      	mov	r3, r1
 8009ae4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ae8:	f7f6 ff90 	bl	8000a0c <__aeabi_dcmpgt>
 8009aec:	2800      	cmp	r0, #0
 8009aee:	d145      	bne.n	8009b7c <_dtoa_r+0x6bc>
 8009af0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009af4:	2000      	movs	r0, #0
 8009af6:	4932      	ldr	r1, [pc, #200]	@ (8009bc0 <_dtoa_r+0x700>)
 8009af8:	f7f6 fb40 	bl	800017c <__aeabi_dsub>
 8009afc:	4602      	mov	r2, r0
 8009afe:	460b      	mov	r3, r1
 8009b00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b04:	f7f6 ff64 	bl	80009d0 <__aeabi_dcmplt>
 8009b08:	2800      	cmp	r0, #0
 8009b0a:	f43f aef6 	beq.w	80098fa <_dtoa_r+0x43a>
 8009b0e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009b10:	1e73      	subs	r3, r6, #1
 8009b12:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009b14:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009b18:	2b30      	cmp	r3, #48	@ 0x30
 8009b1a:	d0f8      	beq.n	8009b0e <_dtoa_r+0x64e>
 8009b1c:	9f04      	ldr	r7, [sp, #16]
 8009b1e:	e73f      	b.n	80099a0 <_dtoa_r+0x4e0>
 8009b20:	4b29      	ldr	r3, [pc, #164]	@ (8009bc8 <_dtoa_r+0x708>)
 8009b22:	f7f6 fce3 	bl	80004ec <__aeabi_dmul>
 8009b26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b2a:	e7bc      	b.n	8009aa6 <_dtoa_r+0x5e6>
 8009b2c:	d10c      	bne.n	8009b48 <_dtoa_r+0x688>
 8009b2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b32:	2200      	movs	r2, #0
 8009b34:	4b25      	ldr	r3, [pc, #148]	@ (8009bcc <_dtoa_r+0x70c>)
 8009b36:	f7f6 fcd9 	bl	80004ec <__aeabi_dmul>
 8009b3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009b3e:	f7f6 ff5b 	bl	80009f8 <__aeabi_dcmpge>
 8009b42:	2800      	cmp	r0, #0
 8009b44:	f000 815b 	beq.w	8009dfe <_dtoa_r+0x93e>
 8009b48:	2400      	movs	r4, #0
 8009b4a:	4625      	mov	r5, r4
 8009b4c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009b4e:	4656      	mov	r6, sl
 8009b50:	43db      	mvns	r3, r3
 8009b52:	9304      	str	r3, [sp, #16]
 8009b54:	2700      	movs	r7, #0
 8009b56:	4621      	mov	r1, r4
 8009b58:	4658      	mov	r0, fp
 8009b5a:	f000 ff03 	bl	800a964 <_Bfree>
 8009b5e:	2d00      	cmp	r5, #0
 8009b60:	d0dc      	beq.n	8009b1c <_dtoa_r+0x65c>
 8009b62:	b12f      	cbz	r7, 8009b70 <_dtoa_r+0x6b0>
 8009b64:	42af      	cmp	r7, r5
 8009b66:	d003      	beq.n	8009b70 <_dtoa_r+0x6b0>
 8009b68:	4639      	mov	r1, r7
 8009b6a:	4658      	mov	r0, fp
 8009b6c:	f000 fefa 	bl	800a964 <_Bfree>
 8009b70:	4629      	mov	r1, r5
 8009b72:	4658      	mov	r0, fp
 8009b74:	f000 fef6 	bl	800a964 <_Bfree>
 8009b78:	e7d0      	b.n	8009b1c <_dtoa_r+0x65c>
 8009b7a:	9704      	str	r7, [sp, #16]
 8009b7c:	4633      	mov	r3, r6
 8009b7e:	461e      	mov	r6, r3
 8009b80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009b84:	2a39      	cmp	r2, #57	@ 0x39
 8009b86:	d107      	bne.n	8009b98 <_dtoa_r+0x6d8>
 8009b88:	459a      	cmp	sl, r3
 8009b8a:	d1f8      	bne.n	8009b7e <_dtoa_r+0x6be>
 8009b8c:	9a04      	ldr	r2, [sp, #16]
 8009b8e:	3201      	adds	r2, #1
 8009b90:	9204      	str	r2, [sp, #16]
 8009b92:	2230      	movs	r2, #48	@ 0x30
 8009b94:	f88a 2000 	strb.w	r2, [sl]
 8009b98:	781a      	ldrb	r2, [r3, #0]
 8009b9a:	3201      	adds	r2, #1
 8009b9c:	701a      	strb	r2, [r3, #0]
 8009b9e:	e7bd      	b.n	8009b1c <_dtoa_r+0x65c>
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	4b09      	ldr	r3, [pc, #36]	@ (8009bc8 <_dtoa_r+0x708>)
 8009ba4:	f7f6 fca2 	bl	80004ec <__aeabi_dmul>
 8009ba8:	2200      	movs	r2, #0
 8009baa:	2300      	movs	r3, #0
 8009bac:	4604      	mov	r4, r0
 8009bae:	460d      	mov	r5, r1
 8009bb0:	f7f6 ff04 	bl	80009bc <__aeabi_dcmpeq>
 8009bb4:	2800      	cmp	r0, #0
 8009bb6:	f43f aebc 	beq.w	8009932 <_dtoa_r+0x472>
 8009bba:	e6f1      	b.n	80099a0 <_dtoa_r+0x4e0>
 8009bbc:	0800c778 	.word	0x0800c778
 8009bc0:	3fe00000 	.word	0x3fe00000
 8009bc4:	3ff00000 	.word	0x3ff00000
 8009bc8:	40240000 	.word	0x40240000
 8009bcc:	40140000 	.word	0x40140000
 8009bd0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009bd2:	2a00      	cmp	r2, #0
 8009bd4:	f000 80db 	beq.w	8009d8e <_dtoa_r+0x8ce>
 8009bd8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009bda:	2a01      	cmp	r2, #1
 8009bdc:	f300 80bf 	bgt.w	8009d5e <_dtoa_r+0x89e>
 8009be0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009be2:	2a00      	cmp	r2, #0
 8009be4:	f000 80b7 	beq.w	8009d56 <_dtoa_r+0x896>
 8009be8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009bec:	4646      	mov	r6, r8
 8009bee:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009bf0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009bf2:	2101      	movs	r1, #1
 8009bf4:	441a      	add	r2, r3
 8009bf6:	4658      	mov	r0, fp
 8009bf8:	4498      	add	r8, r3
 8009bfa:	9209      	str	r2, [sp, #36]	@ 0x24
 8009bfc:	f000 ffb0 	bl	800ab60 <__i2b>
 8009c00:	4605      	mov	r5, r0
 8009c02:	b15e      	cbz	r6, 8009c1c <_dtoa_r+0x75c>
 8009c04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	dd08      	ble.n	8009c1c <_dtoa_r+0x75c>
 8009c0a:	42b3      	cmp	r3, r6
 8009c0c:	bfa8      	it	ge
 8009c0e:	4633      	movge	r3, r6
 8009c10:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c12:	eba8 0803 	sub.w	r8, r8, r3
 8009c16:	1af6      	subs	r6, r6, r3
 8009c18:	1ad3      	subs	r3, r2, r3
 8009c1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c1e:	b1f3      	cbz	r3, 8009c5e <_dtoa_r+0x79e>
 8009c20:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	f000 80b7 	beq.w	8009d96 <_dtoa_r+0x8d6>
 8009c28:	b18c      	cbz	r4, 8009c4e <_dtoa_r+0x78e>
 8009c2a:	4629      	mov	r1, r5
 8009c2c:	4622      	mov	r2, r4
 8009c2e:	4658      	mov	r0, fp
 8009c30:	f001 f854 	bl	800acdc <__pow5mult>
 8009c34:	464a      	mov	r2, r9
 8009c36:	4601      	mov	r1, r0
 8009c38:	4605      	mov	r5, r0
 8009c3a:	4658      	mov	r0, fp
 8009c3c:	f000 ffa6 	bl	800ab8c <__multiply>
 8009c40:	4649      	mov	r1, r9
 8009c42:	9004      	str	r0, [sp, #16]
 8009c44:	4658      	mov	r0, fp
 8009c46:	f000 fe8d 	bl	800a964 <_Bfree>
 8009c4a:	9b04      	ldr	r3, [sp, #16]
 8009c4c:	4699      	mov	r9, r3
 8009c4e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c50:	1b1a      	subs	r2, r3, r4
 8009c52:	d004      	beq.n	8009c5e <_dtoa_r+0x79e>
 8009c54:	4649      	mov	r1, r9
 8009c56:	4658      	mov	r0, fp
 8009c58:	f001 f840 	bl	800acdc <__pow5mult>
 8009c5c:	4681      	mov	r9, r0
 8009c5e:	2101      	movs	r1, #1
 8009c60:	4658      	mov	r0, fp
 8009c62:	f000 ff7d 	bl	800ab60 <__i2b>
 8009c66:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c68:	4604      	mov	r4, r0
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	f000 81c9 	beq.w	800a002 <_dtoa_r+0xb42>
 8009c70:	461a      	mov	r2, r3
 8009c72:	4601      	mov	r1, r0
 8009c74:	4658      	mov	r0, fp
 8009c76:	f001 f831 	bl	800acdc <__pow5mult>
 8009c7a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009c7c:	4604      	mov	r4, r0
 8009c7e:	2b01      	cmp	r3, #1
 8009c80:	f300 808f 	bgt.w	8009da2 <_dtoa_r+0x8e2>
 8009c84:	9b02      	ldr	r3, [sp, #8]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	f040 8087 	bne.w	8009d9a <_dtoa_r+0x8da>
 8009c8c:	9b03      	ldr	r3, [sp, #12]
 8009c8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	f040 8083 	bne.w	8009d9e <_dtoa_r+0x8de>
 8009c98:	9b03      	ldr	r3, [sp, #12]
 8009c9a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009c9e:	0d1b      	lsrs	r3, r3, #20
 8009ca0:	051b      	lsls	r3, r3, #20
 8009ca2:	b12b      	cbz	r3, 8009cb0 <_dtoa_r+0x7f0>
 8009ca4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ca6:	f108 0801 	add.w	r8, r8, #1
 8009caa:	3301      	adds	r3, #1
 8009cac:	9309      	str	r3, [sp, #36]	@ 0x24
 8009cae:	2301      	movs	r3, #1
 8009cb0:	930a      	str	r3, [sp, #40]	@ 0x28
 8009cb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	f000 81aa 	beq.w	800a00e <_dtoa_r+0xb4e>
 8009cba:	6923      	ldr	r3, [r4, #16]
 8009cbc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009cc0:	6918      	ldr	r0, [r3, #16]
 8009cc2:	f000 ff01 	bl	800aac8 <__hi0bits>
 8009cc6:	f1c0 0020 	rsb	r0, r0, #32
 8009cca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ccc:	4418      	add	r0, r3
 8009cce:	f010 001f 	ands.w	r0, r0, #31
 8009cd2:	d071      	beq.n	8009db8 <_dtoa_r+0x8f8>
 8009cd4:	f1c0 0320 	rsb	r3, r0, #32
 8009cd8:	2b04      	cmp	r3, #4
 8009cda:	dd65      	ble.n	8009da8 <_dtoa_r+0x8e8>
 8009cdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cde:	f1c0 001c 	rsb	r0, r0, #28
 8009ce2:	4403      	add	r3, r0
 8009ce4:	4480      	add	r8, r0
 8009ce6:	4406      	add	r6, r0
 8009ce8:	9309      	str	r3, [sp, #36]	@ 0x24
 8009cea:	f1b8 0f00 	cmp.w	r8, #0
 8009cee:	dd05      	ble.n	8009cfc <_dtoa_r+0x83c>
 8009cf0:	4649      	mov	r1, r9
 8009cf2:	4642      	mov	r2, r8
 8009cf4:	4658      	mov	r0, fp
 8009cf6:	f001 f84b 	bl	800ad90 <__lshift>
 8009cfa:	4681      	mov	r9, r0
 8009cfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	dd05      	ble.n	8009d0e <_dtoa_r+0x84e>
 8009d02:	4621      	mov	r1, r4
 8009d04:	461a      	mov	r2, r3
 8009d06:	4658      	mov	r0, fp
 8009d08:	f001 f842 	bl	800ad90 <__lshift>
 8009d0c:	4604      	mov	r4, r0
 8009d0e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d053      	beq.n	8009dbc <_dtoa_r+0x8fc>
 8009d14:	4621      	mov	r1, r4
 8009d16:	4648      	mov	r0, r9
 8009d18:	f001 f8a6 	bl	800ae68 <__mcmp>
 8009d1c:	2800      	cmp	r0, #0
 8009d1e:	da4d      	bge.n	8009dbc <_dtoa_r+0x8fc>
 8009d20:	1e7b      	subs	r3, r7, #1
 8009d22:	4649      	mov	r1, r9
 8009d24:	9304      	str	r3, [sp, #16]
 8009d26:	220a      	movs	r2, #10
 8009d28:	2300      	movs	r3, #0
 8009d2a:	4658      	mov	r0, fp
 8009d2c:	f000 fe3c 	bl	800a9a8 <__multadd>
 8009d30:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d32:	4681      	mov	r9, r0
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	f000 816c 	beq.w	800a012 <_dtoa_r+0xb52>
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	4629      	mov	r1, r5
 8009d3e:	220a      	movs	r2, #10
 8009d40:	4658      	mov	r0, fp
 8009d42:	f000 fe31 	bl	800a9a8 <__multadd>
 8009d46:	9b08      	ldr	r3, [sp, #32]
 8009d48:	4605      	mov	r5, r0
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	dc61      	bgt.n	8009e12 <_dtoa_r+0x952>
 8009d4e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009d50:	2b02      	cmp	r3, #2
 8009d52:	dc3b      	bgt.n	8009dcc <_dtoa_r+0x90c>
 8009d54:	e05d      	b.n	8009e12 <_dtoa_r+0x952>
 8009d56:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009d58:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009d5c:	e746      	b.n	8009bec <_dtoa_r+0x72c>
 8009d5e:	9b07      	ldr	r3, [sp, #28]
 8009d60:	1e5c      	subs	r4, r3, #1
 8009d62:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d64:	42a3      	cmp	r3, r4
 8009d66:	bfbf      	itttt	lt
 8009d68:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009d6a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8009d6c:	1ae3      	sublt	r3, r4, r3
 8009d6e:	18d2      	addlt	r2, r2, r3
 8009d70:	bfa8      	it	ge
 8009d72:	1b1c      	subge	r4, r3, r4
 8009d74:	9b07      	ldr	r3, [sp, #28]
 8009d76:	bfbe      	ittt	lt
 8009d78:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009d7a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8009d7c:	2400      	movlt	r4, #0
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	bfb5      	itete	lt
 8009d82:	eba8 0603 	sublt.w	r6, r8, r3
 8009d86:	4646      	movge	r6, r8
 8009d88:	2300      	movlt	r3, #0
 8009d8a:	9b07      	ldrge	r3, [sp, #28]
 8009d8c:	e730      	b.n	8009bf0 <_dtoa_r+0x730>
 8009d8e:	4646      	mov	r6, r8
 8009d90:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009d92:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009d94:	e735      	b.n	8009c02 <_dtoa_r+0x742>
 8009d96:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009d98:	e75c      	b.n	8009c54 <_dtoa_r+0x794>
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	e788      	b.n	8009cb0 <_dtoa_r+0x7f0>
 8009d9e:	9b02      	ldr	r3, [sp, #8]
 8009da0:	e786      	b.n	8009cb0 <_dtoa_r+0x7f0>
 8009da2:	2300      	movs	r3, #0
 8009da4:	930a      	str	r3, [sp, #40]	@ 0x28
 8009da6:	e788      	b.n	8009cba <_dtoa_r+0x7fa>
 8009da8:	d09f      	beq.n	8009cea <_dtoa_r+0x82a>
 8009daa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009dac:	331c      	adds	r3, #28
 8009dae:	441a      	add	r2, r3
 8009db0:	4498      	add	r8, r3
 8009db2:	441e      	add	r6, r3
 8009db4:	9209      	str	r2, [sp, #36]	@ 0x24
 8009db6:	e798      	b.n	8009cea <_dtoa_r+0x82a>
 8009db8:	4603      	mov	r3, r0
 8009dba:	e7f6      	b.n	8009daa <_dtoa_r+0x8ea>
 8009dbc:	9b07      	ldr	r3, [sp, #28]
 8009dbe:	9704      	str	r7, [sp, #16]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	dc20      	bgt.n	8009e06 <_dtoa_r+0x946>
 8009dc4:	9308      	str	r3, [sp, #32]
 8009dc6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009dc8:	2b02      	cmp	r3, #2
 8009dca:	dd1e      	ble.n	8009e0a <_dtoa_r+0x94a>
 8009dcc:	9b08      	ldr	r3, [sp, #32]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	f47f aebc 	bne.w	8009b4c <_dtoa_r+0x68c>
 8009dd4:	4621      	mov	r1, r4
 8009dd6:	2205      	movs	r2, #5
 8009dd8:	4658      	mov	r0, fp
 8009dda:	f000 fde5 	bl	800a9a8 <__multadd>
 8009dde:	4601      	mov	r1, r0
 8009de0:	4604      	mov	r4, r0
 8009de2:	4648      	mov	r0, r9
 8009de4:	f001 f840 	bl	800ae68 <__mcmp>
 8009de8:	2800      	cmp	r0, #0
 8009dea:	f77f aeaf 	ble.w	8009b4c <_dtoa_r+0x68c>
 8009dee:	2331      	movs	r3, #49	@ 0x31
 8009df0:	4656      	mov	r6, sl
 8009df2:	f806 3b01 	strb.w	r3, [r6], #1
 8009df6:	9b04      	ldr	r3, [sp, #16]
 8009df8:	3301      	adds	r3, #1
 8009dfa:	9304      	str	r3, [sp, #16]
 8009dfc:	e6aa      	b.n	8009b54 <_dtoa_r+0x694>
 8009dfe:	9c07      	ldr	r4, [sp, #28]
 8009e00:	9704      	str	r7, [sp, #16]
 8009e02:	4625      	mov	r5, r4
 8009e04:	e7f3      	b.n	8009dee <_dtoa_r+0x92e>
 8009e06:	9b07      	ldr	r3, [sp, #28]
 8009e08:	9308      	str	r3, [sp, #32]
 8009e0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	f000 8104 	beq.w	800a01a <_dtoa_r+0xb5a>
 8009e12:	2e00      	cmp	r6, #0
 8009e14:	dd05      	ble.n	8009e22 <_dtoa_r+0x962>
 8009e16:	4629      	mov	r1, r5
 8009e18:	4632      	mov	r2, r6
 8009e1a:	4658      	mov	r0, fp
 8009e1c:	f000 ffb8 	bl	800ad90 <__lshift>
 8009e20:	4605      	mov	r5, r0
 8009e22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d05a      	beq.n	8009ede <_dtoa_r+0xa1e>
 8009e28:	4658      	mov	r0, fp
 8009e2a:	6869      	ldr	r1, [r5, #4]
 8009e2c:	f000 fd5a 	bl	800a8e4 <_Balloc>
 8009e30:	4606      	mov	r6, r0
 8009e32:	b928      	cbnz	r0, 8009e40 <_dtoa_r+0x980>
 8009e34:	4602      	mov	r2, r0
 8009e36:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009e3a:	4b83      	ldr	r3, [pc, #524]	@ (800a048 <_dtoa_r+0xb88>)
 8009e3c:	f7ff bb54 	b.w	80094e8 <_dtoa_r+0x28>
 8009e40:	692a      	ldr	r2, [r5, #16]
 8009e42:	f105 010c 	add.w	r1, r5, #12
 8009e46:	3202      	adds	r2, #2
 8009e48:	0092      	lsls	r2, r2, #2
 8009e4a:	300c      	adds	r0, #12
 8009e4c:	f7ff fa97 	bl	800937e <memcpy>
 8009e50:	2201      	movs	r2, #1
 8009e52:	4631      	mov	r1, r6
 8009e54:	4658      	mov	r0, fp
 8009e56:	f000 ff9b 	bl	800ad90 <__lshift>
 8009e5a:	462f      	mov	r7, r5
 8009e5c:	4605      	mov	r5, r0
 8009e5e:	f10a 0301 	add.w	r3, sl, #1
 8009e62:	9307      	str	r3, [sp, #28]
 8009e64:	9b08      	ldr	r3, [sp, #32]
 8009e66:	4453      	add	r3, sl
 8009e68:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009e6a:	9b02      	ldr	r3, [sp, #8]
 8009e6c:	f003 0301 	and.w	r3, r3, #1
 8009e70:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e72:	9b07      	ldr	r3, [sp, #28]
 8009e74:	4621      	mov	r1, r4
 8009e76:	3b01      	subs	r3, #1
 8009e78:	4648      	mov	r0, r9
 8009e7a:	9302      	str	r3, [sp, #8]
 8009e7c:	f7ff fa98 	bl	80093b0 <quorem>
 8009e80:	4639      	mov	r1, r7
 8009e82:	9008      	str	r0, [sp, #32]
 8009e84:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009e88:	4648      	mov	r0, r9
 8009e8a:	f000 ffed 	bl	800ae68 <__mcmp>
 8009e8e:	462a      	mov	r2, r5
 8009e90:	9009      	str	r0, [sp, #36]	@ 0x24
 8009e92:	4621      	mov	r1, r4
 8009e94:	4658      	mov	r0, fp
 8009e96:	f001 f803 	bl	800aea0 <__mdiff>
 8009e9a:	68c2      	ldr	r2, [r0, #12]
 8009e9c:	4606      	mov	r6, r0
 8009e9e:	bb02      	cbnz	r2, 8009ee2 <_dtoa_r+0xa22>
 8009ea0:	4601      	mov	r1, r0
 8009ea2:	4648      	mov	r0, r9
 8009ea4:	f000 ffe0 	bl	800ae68 <__mcmp>
 8009ea8:	4602      	mov	r2, r0
 8009eaa:	4631      	mov	r1, r6
 8009eac:	4658      	mov	r0, fp
 8009eae:	920c      	str	r2, [sp, #48]	@ 0x30
 8009eb0:	f000 fd58 	bl	800a964 <_Bfree>
 8009eb4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009eb6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009eb8:	9e07      	ldr	r6, [sp, #28]
 8009eba:	ea43 0102 	orr.w	r1, r3, r2
 8009ebe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ec0:	4319      	orrs	r1, r3
 8009ec2:	d110      	bne.n	8009ee6 <_dtoa_r+0xa26>
 8009ec4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009ec8:	d029      	beq.n	8009f1e <_dtoa_r+0xa5e>
 8009eca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	dd02      	ble.n	8009ed6 <_dtoa_r+0xa16>
 8009ed0:	9b08      	ldr	r3, [sp, #32]
 8009ed2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009ed6:	9b02      	ldr	r3, [sp, #8]
 8009ed8:	f883 8000 	strb.w	r8, [r3]
 8009edc:	e63b      	b.n	8009b56 <_dtoa_r+0x696>
 8009ede:	4628      	mov	r0, r5
 8009ee0:	e7bb      	b.n	8009e5a <_dtoa_r+0x99a>
 8009ee2:	2201      	movs	r2, #1
 8009ee4:	e7e1      	b.n	8009eaa <_dtoa_r+0x9ea>
 8009ee6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	db04      	blt.n	8009ef6 <_dtoa_r+0xa36>
 8009eec:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8009eee:	430b      	orrs	r3, r1
 8009ef0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009ef2:	430b      	orrs	r3, r1
 8009ef4:	d120      	bne.n	8009f38 <_dtoa_r+0xa78>
 8009ef6:	2a00      	cmp	r2, #0
 8009ef8:	dded      	ble.n	8009ed6 <_dtoa_r+0xa16>
 8009efa:	4649      	mov	r1, r9
 8009efc:	2201      	movs	r2, #1
 8009efe:	4658      	mov	r0, fp
 8009f00:	f000 ff46 	bl	800ad90 <__lshift>
 8009f04:	4621      	mov	r1, r4
 8009f06:	4681      	mov	r9, r0
 8009f08:	f000 ffae 	bl	800ae68 <__mcmp>
 8009f0c:	2800      	cmp	r0, #0
 8009f0e:	dc03      	bgt.n	8009f18 <_dtoa_r+0xa58>
 8009f10:	d1e1      	bne.n	8009ed6 <_dtoa_r+0xa16>
 8009f12:	f018 0f01 	tst.w	r8, #1
 8009f16:	d0de      	beq.n	8009ed6 <_dtoa_r+0xa16>
 8009f18:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009f1c:	d1d8      	bne.n	8009ed0 <_dtoa_r+0xa10>
 8009f1e:	2339      	movs	r3, #57	@ 0x39
 8009f20:	9a02      	ldr	r2, [sp, #8]
 8009f22:	7013      	strb	r3, [r2, #0]
 8009f24:	4633      	mov	r3, r6
 8009f26:	461e      	mov	r6, r3
 8009f28:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009f2c:	3b01      	subs	r3, #1
 8009f2e:	2a39      	cmp	r2, #57	@ 0x39
 8009f30:	d052      	beq.n	8009fd8 <_dtoa_r+0xb18>
 8009f32:	3201      	adds	r2, #1
 8009f34:	701a      	strb	r2, [r3, #0]
 8009f36:	e60e      	b.n	8009b56 <_dtoa_r+0x696>
 8009f38:	2a00      	cmp	r2, #0
 8009f3a:	dd07      	ble.n	8009f4c <_dtoa_r+0xa8c>
 8009f3c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009f40:	d0ed      	beq.n	8009f1e <_dtoa_r+0xa5e>
 8009f42:	9a02      	ldr	r2, [sp, #8]
 8009f44:	f108 0301 	add.w	r3, r8, #1
 8009f48:	7013      	strb	r3, [r2, #0]
 8009f4a:	e604      	b.n	8009b56 <_dtoa_r+0x696>
 8009f4c:	9b07      	ldr	r3, [sp, #28]
 8009f4e:	9a07      	ldr	r2, [sp, #28]
 8009f50:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009f54:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009f56:	4293      	cmp	r3, r2
 8009f58:	d028      	beq.n	8009fac <_dtoa_r+0xaec>
 8009f5a:	4649      	mov	r1, r9
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	220a      	movs	r2, #10
 8009f60:	4658      	mov	r0, fp
 8009f62:	f000 fd21 	bl	800a9a8 <__multadd>
 8009f66:	42af      	cmp	r7, r5
 8009f68:	4681      	mov	r9, r0
 8009f6a:	f04f 0300 	mov.w	r3, #0
 8009f6e:	f04f 020a 	mov.w	r2, #10
 8009f72:	4639      	mov	r1, r7
 8009f74:	4658      	mov	r0, fp
 8009f76:	d107      	bne.n	8009f88 <_dtoa_r+0xac8>
 8009f78:	f000 fd16 	bl	800a9a8 <__multadd>
 8009f7c:	4607      	mov	r7, r0
 8009f7e:	4605      	mov	r5, r0
 8009f80:	9b07      	ldr	r3, [sp, #28]
 8009f82:	3301      	adds	r3, #1
 8009f84:	9307      	str	r3, [sp, #28]
 8009f86:	e774      	b.n	8009e72 <_dtoa_r+0x9b2>
 8009f88:	f000 fd0e 	bl	800a9a8 <__multadd>
 8009f8c:	4629      	mov	r1, r5
 8009f8e:	4607      	mov	r7, r0
 8009f90:	2300      	movs	r3, #0
 8009f92:	220a      	movs	r2, #10
 8009f94:	4658      	mov	r0, fp
 8009f96:	f000 fd07 	bl	800a9a8 <__multadd>
 8009f9a:	4605      	mov	r5, r0
 8009f9c:	e7f0      	b.n	8009f80 <_dtoa_r+0xac0>
 8009f9e:	9b08      	ldr	r3, [sp, #32]
 8009fa0:	2700      	movs	r7, #0
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	bfcc      	ite	gt
 8009fa6:	461e      	movgt	r6, r3
 8009fa8:	2601      	movle	r6, #1
 8009faa:	4456      	add	r6, sl
 8009fac:	4649      	mov	r1, r9
 8009fae:	2201      	movs	r2, #1
 8009fb0:	4658      	mov	r0, fp
 8009fb2:	f000 feed 	bl	800ad90 <__lshift>
 8009fb6:	4621      	mov	r1, r4
 8009fb8:	4681      	mov	r9, r0
 8009fba:	f000 ff55 	bl	800ae68 <__mcmp>
 8009fbe:	2800      	cmp	r0, #0
 8009fc0:	dcb0      	bgt.n	8009f24 <_dtoa_r+0xa64>
 8009fc2:	d102      	bne.n	8009fca <_dtoa_r+0xb0a>
 8009fc4:	f018 0f01 	tst.w	r8, #1
 8009fc8:	d1ac      	bne.n	8009f24 <_dtoa_r+0xa64>
 8009fca:	4633      	mov	r3, r6
 8009fcc:	461e      	mov	r6, r3
 8009fce:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009fd2:	2a30      	cmp	r2, #48	@ 0x30
 8009fd4:	d0fa      	beq.n	8009fcc <_dtoa_r+0xb0c>
 8009fd6:	e5be      	b.n	8009b56 <_dtoa_r+0x696>
 8009fd8:	459a      	cmp	sl, r3
 8009fda:	d1a4      	bne.n	8009f26 <_dtoa_r+0xa66>
 8009fdc:	9b04      	ldr	r3, [sp, #16]
 8009fde:	3301      	adds	r3, #1
 8009fe0:	9304      	str	r3, [sp, #16]
 8009fe2:	2331      	movs	r3, #49	@ 0x31
 8009fe4:	f88a 3000 	strb.w	r3, [sl]
 8009fe8:	e5b5      	b.n	8009b56 <_dtoa_r+0x696>
 8009fea:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009fec:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a04c <_dtoa_r+0xb8c>
 8009ff0:	b11b      	cbz	r3, 8009ffa <_dtoa_r+0xb3a>
 8009ff2:	f10a 0308 	add.w	r3, sl, #8
 8009ff6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009ff8:	6013      	str	r3, [r2, #0]
 8009ffa:	4650      	mov	r0, sl
 8009ffc:	b017      	add	sp, #92	@ 0x5c
 8009ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a002:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a004:	2b01      	cmp	r3, #1
 800a006:	f77f ae3d 	ble.w	8009c84 <_dtoa_r+0x7c4>
 800a00a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a00c:	930a      	str	r3, [sp, #40]	@ 0x28
 800a00e:	2001      	movs	r0, #1
 800a010:	e65b      	b.n	8009cca <_dtoa_r+0x80a>
 800a012:	9b08      	ldr	r3, [sp, #32]
 800a014:	2b00      	cmp	r3, #0
 800a016:	f77f aed6 	ble.w	8009dc6 <_dtoa_r+0x906>
 800a01a:	4656      	mov	r6, sl
 800a01c:	4621      	mov	r1, r4
 800a01e:	4648      	mov	r0, r9
 800a020:	f7ff f9c6 	bl	80093b0 <quorem>
 800a024:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a028:	9b08      	ldr	r3, [sp, #32]
 800a02a:	f806 8b01 	strb.w	r8, [r6], #1
 800a02e:	eba6 020a 	sub.w	r2, r6, sl
 800a032:	4293      	cmp	r3, r2
 800a034:	ddb3      	ble.n	8009f9e <_dtoa_r+0xade>
 800a036:	4649      	mov	r1, r9
 800a038:	2300      	movs	r3, #0
 800a03a:	220a      	movs	r2, #10
 800a03c:	4658      	mov	r0, fp
 800a03e:	f000 fcb3 	bl	800a9a8 <__multadd>
 800a042:	4681      	mov	r9, r0
 800a044:	e7ea      	b.n	800a01c <_dtoa_r+0xb5c>
 800a046:	bf00      	nop
 800a048:	0800c676 	.word	0x0800c676
 800a04c:	0800c5fa 	.word	0x0800c5fa

0800a050 <_free_r>:
 800a050:	b538      	push	{r3, r4, r5, lr}
 800a052:	4605      	mov	r5, r0
 800a054:	2900      	cmp	r1, #0
 800a056:	d040      	beq.n	800a0da <_free_r+0x8a>
 800a058:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a05c:	1f0c      	subs	r4, r1, #4
 800a05e:	2b00      	cmp	r3, #0
 800a060:	bfb8      	it	lt
 800a062:	18e4      	addlt	r4, r4, r3
 800a064:	f000 fc32 	bl	800a8cc <__malloc_lock>
 800a068:	4a1c      	ldr	r2, [pc, #112]	@ (800a0dc <_free_r+0x8c>)
 800a06a:	6813      	ldr	r3, [r2, #0]
 800a06c:	b933      	cbnz	r3, 800a07c <_free_r+0x2c>
 800a06e:	6063      	str	r3, [r4, #4]
 800a070:	6014      	str	r4, [r2, #0]
 800a072:	4628      	mov	r0, r5
 800a074:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a078:	f000 bc2e 	b.w	800a8d8 <__malloc_unlock>
 800a07c:	42a3      	cmp	r3, r4
 800a07e:	d908      	bls.n	800a092 <_free_r+0x42>
 800a080:	6820      	ldr	r0, [r4, #0]
 800a082:	1821      	adds	r1, r4, r0
 800a084:	428b      	cmp	r3, r1
 800a086:	bf01      	itttt	eq
 800a088:	6819      	ldreq	r1, [r3, #0]
 800a08a:	685b      	ldreq	r3, [r3, #4]
 800a08c:	1809      	addeq	r1, r1, r0
 800a08e:	6021      	streq	r1, [r4, #0]
 800a090:	e7ed      	b.n	800a06e <_free_r+0x1e>
 800a092:	461a      	mov	r2, r3
 800a094:	685b      	ldr	r3, [r3, #4]
 800a096:	b10b      	cbz	r3, 800a09c <_free_r+0x4c>
 800a098:	42a3      	cmp	r3, r4
 800a09a:	d9fa      	bls.n	800a092 <_free_r+0x42>
 800a09c:	6811      	ldr	r1, [r2, #0]
 800a09e:	1850      	adds	r0, r2, r1
 800a0a0:	42a0      	cmp	r0, r4
 800a0a2:	d10b      	bne.n	800a0bc <_free_r+0x6c>
 800a0a4:	6820      	ldr	r0, [r4, #0]
 800a0a6:	4401      	add	r1, r0
 800a0a8:	1850      	adds	r0, r2, r1
 800a0aa:	4283      	cmp	r3, r0
 800a0ac:	6011      	str	r1, [r2, #0]
 800a0ae:	d1e0      	bne.n	800a072 <_free_r+0x22>
 800a0b0:	6818      	ldr	r0, [r3, #0]
 800a0b2:	685b      	ldr	r3, [r3, #4]
 800a0b4:	4408      	add	r0, r1
 800a0b6:	6010      	str	r0, [r2, #0]
 800a0b8:	6053      	str	r3, [r2, #4]
 800a0ba:	e7da      	b.n	800a072 <_free_r+0x22>
 800a0bc:	d902      	bls.n	800a0c4 <_free_r+0x74>
 800a0be:	230c      	movs	r3, #12
 800a0c0:	602b      	str	r3, [r5, #0]
 800a0c2:	e7d6      	b.n	800a072 <_free_r+0x22>
 800a0c4:	6820      	ldr	r0, [r4, #0]
 800a0c6:	1821      	adds	r1, r4, r0
 800a0c8:	428b      	cmp	r3, r1
 800a0ca:	bf01      	itttt	eq
 800a0cc:	6819      	ldreq	r1, [r3, #0]
 800a0ce:	685b      	ldreq	r3, [r3, #4]
 800a0d0:	1809      	addeq	r1, r1, r0
 800a0d2:	6021      	streq	r1, [r4, #0]
 800a0d4:	6063      	str	r3, [r4, #4]
 800a0d6:	6054      	str	r4, [r2, #4]
 800a0d8:	e7cb      	b.n	800a072 <_free_r+0x22>
 800a0da:	bd38      	pop	{r3, r4, r5, pc}
 800a0dc:	20000ab4 	.word	0x20000ab4

0800a0e0 <rshift>:
 800a0e0:	6903      	ldr	r3, [r0, #16]
 800a0e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a0e6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a0ea:	f100 0414 	add.w	r4, r0, #20
 800a0ee:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a0f2:	dd46      	ble.n	800a182 <rshift+0xa2>
 800a0f4:	f011 011f 	ands.w	r1, r1, #31
 800a0f8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a0fc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a100:	d10c      	bne.n	800a11c <rshift+0x3c>
 800a102:	4629      	mov	r1, r5
 800a104:	f100 0710 	add.w	r7, r0, #16
 800a108:	42b1      	cmp	r1, r6
 800a10a:	d335      	bcc.n	800a178 <rshift+0x98>
 800a10c:	1a9b      	subs	r3, r3, r2
 800a10e:	009b      	lsls	r3, r3, #2
 800a110:	1eea      	subs	r2, r5, #3
 800a112:	4296      	cmp	r6, r2
 800a114:	bf38      	it	cc
 800a116:	2300      	movcc	r3, #0
 800a118:	4423      	add	r3, r4
 800a11a:	e015      	b.n	800a148 <rshift+0x68>
 800a11c:	46a1      	mov	r9, r4
 800a11e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a122:	f1c1 0820 	rsb	r8, r1, #32
 800a126:	40cf      	lsrs	r7, r1
 800a128:	f105 0e04 	add.w	lr, r5, #4
 800a12c:	4576      	cmp	r6, lr
 800a12e:	46f4      	mov	ip, lr
 800a130:	d816      	bhi.n	800a160 <rshift+0x80>
 800a132:	1a9a      	subs	r2, r3, r2
 800a134:	0092      	lsls	r2, r2, #2
 800a136:	3a04      	subs	r2, #4
 800a138:	3501      	adds	r5, #1
 800a13a:	42ae      	cmp	r6, r5
 800a13c:	bf38      	it	cc
 800a13e:	2200      	movcc	r2, #0
 800a140:	18a3      	adds	r3, r4, r2
 800a142:	50a7      	str	r7, [r4, r2]
 800a144:	b107      	cbz	r7, 800a148 <rshift+0x68>
 800a146:	3304      	adds	r3, #4
 800a148:	42a3      	cmp	r3, r4
 800a14a:	eba3 0204 	sub.w	r2, r3, r4
 800a14e:	bf08      	it	eq
 800a150:	2300      	moveq	r3, #0
 800a152:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a156:	6102      	str	r2, [r0, #16]
 800a158:	bf08      	it	eq
 800a15a:	6143      	streq	r3, [r0, #20]
 800a15c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a160:	f8dc c000 	ldr.w	ip, [ip]
 800a164:	fa0c fc08 	lsl.w	ip, ip, r8
 800a168:	ea4c 0707 	orr.w	r7, ip, r7
 800a16c:	f849 7b04 	str.w	r7, [r9], #4
 800a170:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a174:	40cf      	lsrs	r7, r1
 800a176:	e7d9      	b.n	800a12c <rshift+0x4c>
 800a178:	f851 cb04 	ldr.w	ip, [r1], #4
 800a17c:	f847 cf04 	str.w	ip, [r7, #4]!
 800a180:	e7c2      	b.n	800a108 <rshift+0x28>
 800a182:	4623      	mov	r3, r4
 800a184:	e7e0      	b.n	800a148 <rshift+0x68>

0800a186 <__hexdig_fun>:
 800a186:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a18a:	2b09      	cmp	r3, #9
 800a18c:	d802      	bhi.n	800a194 <__hexdig_fun+0xe>
 800a18e:	3820      	subs	r0, #32
 800a190:	b2c0      	uxtb	r0, r0
 800a192:	4770      	bx	lr
 800a194:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a198:	2b05      	cmp	r3, #5
 800a19a:	d801      	bhi.n	800a1a0 <__hexdig_fun+0x1a>
 800a19c:	3847      	subs	r0, #71	@ 0x47
 800a19e:	e7f7      	b.n	800a190 <__hexdig_fun+0xa>
 800a1a0:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a1a4:	2b05      	cmp	r3, #5
 800a1a6:	d801      	bhi.n	800a1ac <__hexdig_fun+0x26>
 800a1a8:	3827      	subs	r0, #39	@ 0x27
 800a1aa:	e7f1      	b.n	800a190 <__hexdig_fun+0xa>
 800a1ac:	2000      	movs	r0, #0
 800a1ae:	4770      	bx	lr

0800a1b0 <__gethex>:
 800a1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1b4:	468a      	mov	sl, r1
 800a1b6:	4690      	mov	r8, r2
 800a1b8:	b085      	sub	sp, #20
 800a1ba:	9302      	str	r3, [sp, #8]
 800a1bc:	680b      	ldr	r3, [r1, #0]
 800a1be:	9001      	str	r0, [sp, #4]
 800a1c0:	1c9c      	adds	r4, r3, #2
 800a1c2:	46a1      	mov	r9, r4
 800a1c4:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a1c8:	2830      	cmp	r0, #48	@ 0x30
 800a1ca:	d0fa      	beq.n	800a1c2 <__gethex+0x12>
 800a1cc:	eba9 0303 	sub.w	r3, r9, r3
 800a1d0:	f1a3 0b02 	sub.w	fp, r3, #2
 800a1d4:	f7ff ffd7 	bl	800a186 <__hexdig_fun>
 800a1d8:	4605      	mov	r5, r0
 800a1da:	2800      	cmp	r0, #0
 800a1dc:	d168      	bne.n	800a2b0 <__gethex+0x100>
 800a1de:	2201      	movs	r2, #1
 800a1e0:	4648      	mov	r0, r9
 800a1e2:	499f      	ldr	r1, [pc, #636]	@ (800a460 <__gethex+0x2b0>)
 800a1e4:	f7ff f800 	bl	80091e8 <strncmp>
 800a1e8:	4607      	mov	r7, r0
 800a1ea:	2800      	cmp	r0, #0
 800a1ec:	d167      	bne.n	800a2be <__gethex+0x10e>
 800a1ee:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a1f2:	4626      	mov	r6, r4
 800a1f4:	f7ff ffc7 	bl	800a186 <__hexdig_fun>
 800a1f8:	2800      	cmp	r0, #0
 800a1fa:	d062      	beq.n	800a2c2 <__gethex+0x112>
 800a1fc:	4623      	mov	r3, r4
 800a1fe:	7818      	ldrb	r0, [r3, #0]
 800a200:	4699      	mov	r9, r3
 800a202:	2830      	cmp	r0, #48	@ 0x30
 800a204:	f103 0301 	add.w	r3, r3, #1
 800a208:	d0f9      	beq.n	800a1fe <__gethex+0x4e>
 800a20a:	f7ff ffbc 	bl	800a186 <__hexdig_fun>
 800a20e:	fab0 f580 	clz	r5, r0
 800a212:	f04f 0b01 	mov.w	fp, #1
 800a216:	096d      	lsrs	r5, r5, #5
 800a218:	464a      	mov	r2, r9
 800a21a:	4616      	mov	r6, r2
 800a21c:	7830      	ldrb	r0, [r6, #0]
 800a21e:	3201      	adds	r2, #1
 800a220:	f7ff ffb1 	bl	800a186 <__hexdig_fun>
 800a224:	2800      	cmp	r0, #0
 800a226:	d1f8      	bne.n	800a21a <__gethex+0x6a>
 800a228:	2201      	movs	r2, #1
 800a22a:	4630      	mov	r0, r6
 800a22c:	498c      	ldr	r1, [pc, #560]	@ (800a460 <__gethex+0x2b0>)
 800a22e:	f7fe ffdb 	bl	80091e8 <strncmp>
 800a232:	2800      	cmp	r0, #0
 800a234:	d13f      	bne.n	800a2b6 <__gethex+0x106>
 800a236:	b944      	cbnz	r4, 800a24a <__gethex+0x9a>
 800a238:	1c74      	adds	r4, r6, #1
 800a23a:	4622      	mov	r2, r4
 800a23c:	4616      	mov	r6, r2
 800a23e:	7830      	ldrb	r0, [r6, #0]
 800a240:	3201      	adds	r2, #1
 800a242:	f7ff ffa0 	bl	800a186 <__hexdig_fun>
 800a246:	2800      	cmp	r0, #0
 800a248:	d1f8      	bne.n	800a23c <__gethex+0x8c>
 800a24a:	1ba4      	subs	r4, r4, r6
 800a24c:	00a7      	lsls	r7, r4, #2
 800a24e:	7833      	ldrb	r3, [r6, #0]
 800a250:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a254:	2b50      	cmp	r3, #80	@ 0x50
 800a256:	d13e      	bne.n	800a2d6 <__gethex+0x126>
 800a258:	7873      	ldrb	r3, [r6, #1]
 800a25a:	2b2b      	cmp	r3, #43	@ 0x2b
 800a25c:	d033      	beq.n	800a2c6 <__gethex+0x116>
 800a25e:	2b2d      	cmp	r3, #45	@ 0x2d
 800a260:	d034      	beq.n	800a2cc <__gethex+0x11c>
 800a262:	2400      	movs	r4, #0
 800a264:	1c71      	adds	r1, r6, #1
 800a266:	7808      	ldrb	r0, [r1, #0]
 800a268:	f7ff ff8d 	bl	800a186 <__hexdig_fun>
 800a26c:	1e43      	subs	r3, r0, #1
 800a26e:	b2db      	uxtb	r3, r3
 800a270:	2b18      	cmp	r3, #24
 800a272:	d830      	bhi.n	800a2d6 <__gethex+0x126>
 800a274:	f1a0 0210 	sub.w	r2, r0, #16
 800a278:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a27c:	f7ff ff83 	bl	800a186 <__hexdig_fun>
 800a280:	f100 3cff 	add.w	ip, r0, #4294967295
 800a284:	fa5f fc8c 	uxtb.w	ip, ip
 800a288:	f1bc 0f18 	cmp.w	ip, #24
 800a28c:	f04f 030a 	mov.w	r3, #10
 800a290:	d91e      	bls.n	800a2d0 <__gethex+0x120>
 800a292:	b104      	cbz	r4, 800a296 <__gethex+0xe6>
 800a294:	4252      	negs	r2, r2
 800a296:	4417      	add	r7, r2
 800a298:	f8ca 1000 	str.w	r1, [sl]
 800a29c:	b1ed      	cbz	r5, 800a2da <__gethex+0x12a>
 800a29e:	f1bb 0f00 	cmp.w	fp, #0
 800a2a2:	bf0c      	ite	eq
 800a2a4:	2506      	moveq	r5, #6
 800a2a6:	2500      	movne	r5, #0
 800a2a8:	4628      	mov	r0, r5
 800a2aa:	b005      	add	sp, #20
 800a2ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2b0:	2500      	movs	r5, #0
 800a2b2:	462c      	mov	r4, r5
 800a2b4:	e7b0      	b.n	800a218 <__gethex+0x68>
 800a2b6:	2c00      	cmp	r4, #0
 800a2b8:	d1c7      	bne.n	800a24a <__gethex+0x9a>
 800a2ba:	4627      	mov	r7, r4
 800a2bc:	e7c7      	b.n	800a24e <__gethex+0x9e>
 800a2be:	464e      	mov	r6, r9
 800a2c0:	462f      	mov	r7, r5
 800a2c2:	2501      	movs	r5, #1
 800a2c4:	e7c3      	b.n	800a24e <__gethex+0x9e>
 800a2c6:	2400      	movs	r4, #0
 800a2c8:	1cb1      	adds	r1, r6, #2
 800a2ca:	e7cc      	b.n	800a266 <__gethex+0xb6>
 800a2cc:	2401      	movs	r4, #1
 800a2ce:	e7fb      	b.n	800a2c8 <__gethex+0x118>
 800a2d0:	fb03 0002 	mla	r0, r3, r2, r0
 800a2d4:	e7ce      	b.n	800a274 <__gethex+0xc4>
 800a2d6:	4631      	mov	r1, r6
 800a2d8:	e7de      	b.n	800a298 <__gethex+0xe8>
 800a2da:	4629      	mov	r1, r5
 800a2dc:	eba6 0309 	sub.w	r3, r6, r9
 800a2e0:	3b01      	subs	r3, #1
 800a2e2:	2b07      	cmp	r3, #7
 800a2e4:	dc0a      	bgt.n	800a2fc <__gethex+0x14c>
 800a2e6:	9801      	ldr	r0, [sp, #4]
 800a2e8:	f000 fafc 	bl	800a8e4 <_Balloc>
 800a2ec:	4604      	mov	r4, r0
 800a2ee:	b940      	cbnz	r0, 800a302 <__gethex+0x152>
 800a2f0:	4602      	mov	r2, r0
 800a2f2:	21e4      	movs	r1, #228	@ 0xe4
 800a2f4:	4b5b      	ldr	r3, [pc, #364]	@ (800a464 <__gethex+0x2b4>)
 800a2f6:	485c      	ldr	r0, [pc, #368]	@ (800a468 <__gethex+0x2b8>)
 800a2f8:	f001 fa4c 	bl	800b794 <__assert_func>
 800a2fc:	3101      	adds	r1, #1
 800a2fe:	105b      	asrs	r3, r3, #1
 800a300:	e7ef      	b.n	800a2e2 <__gethex+0x132>
 800a302:	2300      	movs	r3, #0
 800a304:	f100 0a14 	add.w	sl, r0, #20
 800a308:	4655      	mov	r5, sl
 800a30a:	469b      	mov	fp, r3
 800a30c:	45b1      	cmp	r9, r6
 800a30e:	d337      	bcc.n	800a380 <__gethex+0x1d0>
 800a310:	f845 bb04 	str.w	fp, [r5], #4
 800a314:	eba5 050a 	sub.w	r5, r5, sl
 800a318:	10ad      	asrs	r5, r5, #2
 800a31a:	6125      	str	r5, [r4, #16]
 800a31c:	4658      	mov	r0, fp
 800a31e:	f000 fbd3 	bl	800aac8 <__hi0bits>
 800a322:	016d      	lsls	r5, r5, #5
 800a324:	f8d8 6000 	ldr.w	r6, [r8]
 800a328:	1a2d      	subs	r5, r5, r0
 800a32a:	42b5      	cmp	r5, r6
 800a32c:	dd54      	ble.n	800a3d8 <__gethex+0x228>
 800a32e:	1bad      	subs	r5, r5, r6
 800a330:	4629      	mov	r1, r5
 800a332:	4620      	mov	r0, r4
 800a334:	f000 ff5b 	bl	800b1ee <__any_on>
 800a338:	4681      	mov	r9, r0
 800a33a:	b178      	cbz	r0, 800a35c <__gethex+0x1ac>
 800a33c:	f04f 0901 	mov.w	r9, #1
 800a340:	1e6b      	subs	r3, r5, #1
 800a342:	1159      	asrs	r1, r3, #5
 800a344:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a348:	f003 021f 	and.w	r2, r3, #31
 800a34c:	fa09 f202 	lsl.w	r2, r9, r2
 800a350:	420a      	tst	r2, r1
 800a352:	d003      	beq.n	800a35c <__gethex+0x1ac>
 800a354:	454b      	cmp	r3, r9
 800a356:	dc36      	bgt.n	800a3c6 <__gethex+0x216>
 800a358:	f04f 0902 	mov.w	r9, #2
 800a35c:	4629      	mov	r1, r5
 800a35e:	4620      	mov	r0, r4
 800a360:	f7ff febe 	bl	800a0e0 <rshift>
 800a364:	442f      	add	r7, r5
 800a366:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a36a:	42bb      	cmp	r3, r7
 800a36c:	da42      	bge.n	800a3f4 <__gethex+0x244>
 800a36e:	4621      	mov	r1, r4
 800a370:	9801      	ldr	r0, [sp, #4]
 800a372:	f000 faf7 	bl	800a964 <_Bfree>
 800a376:	2300      	movs	r3, #0
 800a378:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a37a:	25a3      	movs	r5, #163	@ 0xa3
 800a37c:	6013      	str	r3, [r2, #0]
 800a37e:	e793      	b.n	800a2a8 <__gethex+0xf8>
 800a380:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a384:	2a2e      	cmp	r2, #46	@ 0x2e
 800a386:	d012      	beq.n	800a3ae <__gethex+0x1fe>
 800a388:	2b20      	cmp	r3, #32
 800a38a:	d104      	bne.n	800a396 <__gethex+0x1e6>
 800a38c:	f845 bb04 	str.w	fp, [r5], #4
 800a390:	f04f 0b00 	mov.w	fp, #0
 800a394:	465b      	mov	r3, fp
 800a396:	7830      	ldrb	r0, [r6, #0]
 800a398:	9303      	str	r3, [sp, #12]
 800a39a:	f7ff fef4 	bl	800a186 <__hexdig_fun>
 800a39e:	9b03      	ldr	r3, [sp, #12]
 800a3a0:	f000 000f 	and.w	r0, r0, #15
 800a3a4:	4098      	lsls	r0, r3
 800a3a6:	ea4b 0b00 	orr.w	fp, fp, r0
 800a3aa:	3304      	adds	r3, #4
 800a3ac:	e7ae      	b.n	800a30c <__gethex+0x15c>
 800a3ae:	45b1      	cmp	r9, r6
 800a3b0:	d8ea      	bhi.n	800a388 <__gethex+0x1d8>
 800a3b2:	2201      	movs	r2, #1
 800a3b4:	4630      	mov	r0, r6
 800a3b6:	492a      	ldr	r1, [pc, #168]	@ (800a460 <__gethex+0x2b0>)
 800a3b8:	9303      	str	r3, [sp, #12]
 800a3ba:	f7fe ff15 	bl	80091e8 <strncmp>
 800a3be:	9b03      	ldr	r3, [sp, #12]
 800a3c0:	2800      	cmp	r0, #0
 800a3c2:	d1e1      	bne.n	800a388 <__gethex+0x1d8>
 800a3c4:	e7a2      	b.n	800a30c <__gethex+0x15c>
 800a3c6:	4620      	mov	r0, r4
 800a3c8:	1ea9      	subs	r1, r5, #2
 800a3ca:	f000 ff10 	bl	800b1ee <__any_on>
 800a3ce:	2800      	cmp	r0, #0
 800a3d0:	d0c2      	beq.n	800a358 <__gethex+0x1a8>
 800a3d2:	f04f 0903 	mov.w	r9, #3
 800a3d6:	e7c1      	b.n	800a35c <__gethex+0x1ac>
 800a3d8:	da09      	bge.n	800a3ee <__gethex+0x23e>
 800a3da:	1b75      	subs	r5, r6, r5
 800a3dc:	4621      	mov	r1, r4
 800a3de:	462a      	mov	r2, r5
 800a3e0:	9801      	ldr	r0, [sp, #4]
 800a3e2:	f000 fcd5 	bl	800ad90 <__lshift>
 800a3e6:	4604      	mov	r4, r0
 800a3e8:	1b7f      	subs	r7, r7, r5
 800a3ea:	f100 0a14 	add.w	sl, r0, #20
 800a3ee:	f04f 0900 	mov.w	r9, #0
 800a3f2:	e7b8      	b.n	800a366 <__gethex+0x1b6>
 800a3f4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a3f8:	42bd      	cmp	r5, r7
 800a3fa:	dd6f      	ble.n	800a4dc <__gethex+0x32c>
 800a3fc:	1bed      	subs	r5, r5, r7
 800a3fe:	42ae      	cmp	r6, r5
 800a400:	dc34      	bgt.n	800a46c <__gethex+0x2bc>
 800a402:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a406:	2b02      	cmp	r3, #2
 800a408:	d022      	beq.n	800a450 <__gethex+0x2a0>
 800a40a:	2b03      	cmp	r3, #3
 800a40c:	d024      	beq.n	800a458 <__gethex+0x2a8>
 800a40e:	2b01      	cmp	r3, #1
 800a410:	d115      	bne.n	800a43e <__gethex+0x28e>
 800a412:	42ae      	cmp	r6, r5
 800a414:	d113      	bne.n	800a43e <__gethex+0x28e>
 800a416:	2e01      	cmp	r6, #1
 800a418:	d10b      	bne.n	800a432 <__gethex+0x282>
 800a41a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a41e:	9a02      	ldr	r2, [sp, #8]
 800a420:	2562      	movs	r5, #98	@ 0x62
 800a422:	6013      	str	r3, [r2, #0]
 800a424:	2301      	movs	r3, #1
 800a426:	6123      	str	r3, [r4, #16]
 800a428:	f8ca 3000 	str.w	r3, [sl]
 800a42c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a42e:	601c      	str	r4, [r3, #0]
 800a430:	e73a      	b.n	800a2a8 <__gethex+0xf8>
 800a432:	4620      	mov	r0, r4
 800a434:	1e71      	subs	r1, r6, #1
 800a436:	f000 feda 	bl	800b1ee <__any_on>
 800a43a:	2800      	cmp	r0, #0
 800a43c:	d1ed      	bne.n	800a41a <__gethex+0x26a>
 800a43e:	4621      	mov	r1, r4
 800a440:	9801      	ldr	r0, [sp, #4]
 800a442:	f000 fa8f 	bl	800a964 <_Bfree>
 800a446:	2300      	movs	r3, #0
 800a448:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a44a:	2550      	movs	r5, #80	@ 0x50
 800a44c:	6013      	str	r3, [r2, #0]
 800a44e:	e72b      	b.n	800a2a8 <__gethex+0xf8>
 800a450:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a452:	2b00      	cmp	r3, #0
 800a454:	d1f3      	bne.n	800a43e <__gethex+0x28e>
 800a456:	e7e0      	b.n	800a41a <__gethex+0x26a>
 800a458:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d1dd      	bne.n	800a41a <__gethex+0x26a>
 800a45e:	e7ee      	b.n	800a43e <__gethex+0x28e>
 800a460:	0800c466 	.word	0x0800c466
 800a464:	0800c676 	.word	0x0800c676
 800a468:	0800c687 	.word	0x0800c687
 800a46c:	1e6f      	subs	r7, r5, #1
 800a46e:	f1b9 0f00 	cmp.w	r9, #0
 800a472:	d130      	bne.n	800a4d6 <__gethex+0x326>
 800a474:	b127      	cbz	r7, 800a480 <__gethex+0x2d0>
 800a476:	4639      	mov	r1, r7
 800a478:	4620      	mov	r0, r4
 800a47a:	f000 feb8 	bl	800b1ee <__any_on>
 800a47e:	4681      	mov	r9, r0
 800a480:	2301      	movs	r3, #1
 800a482:	4629      	mov	r1, r5
 800a484:	1b76      	subs	r6, r6, r5
 800a486:	2502      	movs	r5, #2
 800a488:	117a      	asrs	r2, r7, #5
 800a48a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a48e:	f007 071f 	and.w	r7, r7, #31
 800a492:	40bb      	lsls	r3, r7
 800a494:	4213      	tst	r3, r2
 800a496:	4620      	mov	r0, r4
 800a498:	bf18      	it	ne
 800a49a:	f049 0902 	orrne.w	r9, r9, #2
 800a49e:	f7ff fe1f 	bl	800a0e0 <rshift>
 800a4a2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a4a6:	f1b9 0f00 	cmp.w	r9, #0
 800a4aa:	d047      	beq.n	800a53c <__gethex+0x38c>
 800a4ac:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a4b0:	2b02      	cmp	r3, #2
 800a4b2:	d015      	beq.n	800a4e0 <__gethex+0x330>
 800a4b4:	2b03      	cmp	r3, #3
 800a4b6:	d017      	beq.n	800a4e8 <__gethex+0x338>
 800a4b8:	2b01      	cmp	r3, #1
 800a4ba:	d109      	bne.n	800a4d0 <__gethex+0x320>
 800a4bc:	f019 0f02 	tst.w	r9, #2
 800a4c0:	d006      	beq.n	800a4d0 <__gethex+0x320>
 800a4c2:	f8da 3000 	ldr.w	r3, [sl]
 800a4c6:	ea49 0903 	orr.w	r9, r9, r3
 800a4ca:	f019 0f01 	tst.w	r9, #1
 800a4ce:	d10e      	bne.n	800a4ee <__gethex+0x33e>
 800a4d0:	f045 0510 	orr.w	r5, r5, #16
 800a4d4:	e032      	b.n	800a53c <__gethex+0x38c>
 800a4d6:	f04f 0901 	mov.w	r9, #1
 800a4da:	e7d1      	b.n	800a480 <__gethex+0x2d0>
 800a4dc:	2501      	movs	r5, #1
 800a4de:	e7e2      	b.n	800a4a6 <__gethex+0x2f6>
 800a4e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a4e2:	f1c3 0301 	rsb	r3, r3, #1
 800a4e6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a4e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d0f0      	beq.n	800a4d0 <__gethex+0x320>
 800a4ee:	f04f 0c00 	mov.w	ip, #0
 800a4f2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a4f6:	f104 0314 	add.w	r3, r4, #20
 800a4fa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a4fe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a502:	4618      	mov	r0, r3
 800a504:	f853 2b04 	ldr.w	r2, [r3], #4
 800a508:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a50c:	d01b      	beq.n	800a546 <__gethex+0x396>
 800a50e:	3201      	adds	r2, #1
 800a510:	6002      	str	r2, [r0, #0]
 800a512:	2d02      	cmp	r5, #2
 800a514:	f104 0314 	add.w	r3, r4, #20
 800a518:	d13c      	bne.n	800a594 <__gethex+0x3e4>
 800a51a:	f8d8 2000 	ldr.w	r2, [r8]
 800a51e:	3a01      	subs	r2, #1
 800a520:	42b2      	cmp	r2, r6
 800a522:	d109      	bne.n	800a538 <__gethex+0x388>
 800a524:	2201      	movs	r2, #1
 800a526:	1171      	asrs	r1, r6, #5
 800a528:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a52c:	f006 061f 	and.w	r6, r6, #31
 800a530:	fa02 f606 	lsl.w	r6, r2, r6
 800a534:	421e      	tst	r6, r3
 800a536:	d13a      	bne.n	800a5ae <__gethex+0x3fe>
 800a538:	f045 0520 	orr.w	r5, r5, #32
 800a53c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a53e:	601c      	str	r4, [r3, #0]
 800a540:	9b02      	ldr	r3, [sp, #8]
 800a542:	601f      	str	r7, [r3, #0]
 800a544:	e6b0      	b.n	800a2a8 <__gethex+0xf8>
 800a546:	4299      	cmp	r1, r3
 800a548:	f843 cc04 	str.w	ip, [r3, #-4]
 800a54c:	d8d9      	bhi.n	800a502 <__gethex+0x352>
 800a54e:	68a3      	ldr	r3, [r4, #8]
 800a550:	459b      	cmp	fp, r3
 800a552:	db17      	blt.n	800a584 <__gethex+0x3d4>
 800a554:	6861      	ldr	r1, [r4, #4]
 800a556:	9801      	ldr	r0, [sp, #4]
 800a558:	3101      	adds	r1, #1
 800a55a:	f000 f9c3 	bl	800a8e4 <_Balloc>
 800a55e:	4681      	mov	r9, r0
 800a560:	b918      	cbnz	r0, 800a56a <__gethex+0x3ba>
 800a562:	4602      	mov	r2, r0
 800a564:	2184      	movs	r1, #132	@ 0x84
 800a566:	4b19      	ldr	r3, [pc, #100]	@ (800a5cc <__gethex+0x41c>)
 800a568:	e6c5      	b.n	800a2f6 <__gethex+0x146>
 800a56a:	6922      	ldr	r2, [r4, #16]
 800a56c:	f104 010c 	add.w	r1, r4, #12
 800a570:	3202      	adds	r2, #2
 800a572:	0092      	lsls	r2, r2, #2
 800a574:	300c      	adds	r0, #12
 800a576:	f7fe ff02 	bl	800937e <memcpy>
 800a57a:	4621      	mov	r1, r4
 800a57c:	9801      	ldr	r0, [sp, #4]
 800a57e:	f000 f9f1 	bl	800a964 <_Bfree>
 800a582:	464c      	mov	r4, r9
 800a584:	6923      	ldr	r3, [r4, #16]
 800a586:	1c5a      	adds	r2, r3, #1
 800a588:	6122      	str	r2, [r4, #16]
 800a58a:	2201      	movs	r2, #1
 800a58c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a590:	615a      	str	r2, [r3, #20]
 800a592:	e7be      	b.n	800a512 <__gethex+0x362>
 800a594:	6922      	ldr	r2, [r4, #16]
 800a596:	455a      	cmp	r2, fp
 800a598:	dd0b      	ble.n	800a5b2 <__gethex+0x402>
 800a59a:	2101      	movs	r1, #1
 800a59c:	4620      	mov	r0, r4
 800a59e:	f7ff fd9f 	bl	800a0e0 <rshift>
 800a5a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a5a6:	3701      	adds	r7, #1
 800a5a8:	42bb      	cmp	r3, r7
 800a5aa:	f6ff aee0 	blt.w	800a36e <__gethex+0x1be>
 800a5ae:	2501      	movs	r5, #1
 800a5b0:	e7c2      	b.n	800a538 <__gethex+0x388>
 800a5b2:	f016 061f 	ands.w	r6, r6, #31
 800a5b6:	d0fa      	beq.n	800a5ae <__gethex+0x3fe>
 800a5b8:	4453      	add	r3, sl
 800a5ba:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a5be:	f000 fa83 	bl	800aac8 <__hi0bits>
 800a5c2:	f1c6 0620 	rsb	r6, r6, #32
 800a5c6:	42b0      	cmp	r0, r6
 800a5c8:	dbe7      	blt.n	800a59a <__gethex+0x3ea>
 800a5ca:	e7f0      	b.n	800a5ae <__gethex+0x3fe>
 800a5cc:	0800c676 	.word	0x0800c676

0800a5d0 <L_shift>:
 800a5d0:	f1c2 0208 	rsb	r2, r2, #8
 800a5d4:	0092      	lsls	r2, r2, #2
 800a5d6:	b570      	push	{r4, r5, r6, lr}
 800a5d8:	f1c2 0620 	rsb	r6, r2, #32
 800a5dc:	6843      	ldr	r3, [r0, #4]
 800a5de:	6804      	ldr	r4, [r0, #0]
 800a5e0:	fa03 f506 	lsl.w	r5, r3, r6
 800a5e4:	432c      	orrs	r4, r5
 800a5e6:	40d3      	lsrs	r3, r2
 800a5e8:	6004      	str	r4, [r0, #0]
 800a5ea:	f840 3f04 	str.w	r3, [r0, #4]!
 800a5ee:	4288      	cmp	r0, r1
 800a5f0:	d3f4      	bcc.n	800a5dc <L_shift+0xc>
 800a5f2:	bd70      	pop	{r4, r5, r6, pc}

0800a5f4 <__match>:
 800a5f4:	b530      	push	{r4, r5, lr}
 800a5f6:	6803      	ldr	r3, [r0, #0]
 800a5f8:	3301      	adds	r3, #1
 800a5fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a5fe:	b914      	cbnz	r4, 800a606 <__match+0x12>
 800a600:	6003      	str	r3, [r0, #0]
 800a602:	2001      	movs	r0, #1
 800a604:	bd30      	pop	{r4, r5, pc}
 800a606:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a60a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a60e:	2d19      	cmp	r5, #25
 800a610:	bf98      	it	ls
 800a612:	3220      	addls	r2, #32
 800a614:	42a2      	cmp	r2, r4
 800a616:	d0f0      	beq.n	800a5fa <__match+0x6>
 800a618:	2000      	movs	r0, #0
 800a61a:	e7f3      	b.n	800a604 <__match+0x10>

0800a61c <__hexnan>:
 800a61c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a620:	2500      	movs	r5, #0
 800a622:	680b      	ldr	r3, [r1, #0]
 800a624:	4682      	mov	sl, r0
 800a626:	115e      	asrs	r6, r3, #5
 800a628:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a62c:	f013 031f 	ands.w	r3, r3, #31
 800a630:	bf18      	it	ne
 800a632:	3604      	addne	r6, #4
 800a634:	1f37      	subs	r7, r6, #4
 800a636:	4690      	mov	r8, r2
 800a638:	46b9      	mov	r9, r7
 800a63a:	463c      	mov	r4, r7
 800a63c:	46ab      	mov	fp, r5
 800a63e:	b087      	sub	sp, #28
 800a640:	6801      	ldr	r1, [r0, #0]
 800a642:	9301      	str	r3, [sp, #4]
 800a644:	f846 5c04 	str.w	r5, [r6, #-4]
 800a648:	9502      	str	r5, [sp, #8]
 800a64a:	784a      	ldrb	r2, [r1, #1]
 800a64c:	1c4b      	adds	r3, r1, #1
 800a64e:	9303      	str	r3, [sp, #12]
 800a650:	b342      	cbz	r2, 800a6a4 <__hexnan+0x88>
 800a652:	4610      	mov	r0, r2
 800a654:	9105      	str	r1, [sp, #20]
 800a656:	9204      	str	r2, [sp, #16]
 800a658:	f7ff fd95 	bl	800a186 <__hexdig_fun>
 800a65c:	2800      	cmp	r0, #0
 800a65e:	d151      	bne.n	800a704 <__hexnan+0xe8>
 800a660:	9a04      	ldr	r2, [sp, #16]
 800a662:	9905      	ldr	r1, [sp, #20]
 800a664:	2a20      	cmp	r2, #32
 800a666:	d818      	bhi.n	800a69a <__hexnan+0x7e>
 800a668:	9b02      	ldr	r3, [sp, #8]
 800a66a:	459b      	cmp	fp, r3
 800a66c:	dd13      	ble.n	800a696 <__hexnan+0x7a>
 800a66e:	454c      	cmp	r4, r9
 800a670:	d206      	bcs.n	800a680 <__hexnan+0x64>
 800a672:	2d07      	cmp	r5, #7
 800a674:	dc04      	bgt.n	800a680 <__hexnan+0x64>
 800a676:	462a      	mov	r2, r5
 800a678:	4649      	mov	r1, r9
 800a67a:	4620      	mov	r0, r4
 800a67c:	f7ff ffa8 	bl	800a5d0 <L_shift>
 800a680:	4544      	cmp	r4, r8
 800a682:	d952      	bls.n	800a72a <__hexnan+0x10e>
 800a684:	2300      	movs	r3, #0
 800a686:	f1a4 0904 	sub.w	r9, r4, #4
 800a68a:	f844 3c04 	str.w	r3, [r4, #-4]
 800a68e:	461d      	mov	r5, r3
 800a690:	464c      	mov	r4, r9
 800a692:	f8cd b008 	str.w	fp, [sp, #8]
 800a696:	9903      	ldr	r1, [sp, #12]
 800a698:	e7d7      	b.n	800a64a <__hexnan+0x2e>
 800a69a:	2a29      	cmp	r2, #41	@ 0x29
 800a69c:	d157      	bne.n	800a74e <__hexnan+0x132>
 800a69e:	3102      	adds	r1, #2
 800a6a0:	f8ca 1000 	str.w	r1, [sl]
 800a6a4:	f1bb 0f00 	cmp.w	fp, #0
 800a6a8:	d051      	beq.n	800a74e <__hexnan+0x132>
 800a6aa:	454c      	cmp	r4, r9
 800a6ac:	d206      	bcs.n	800a6bc <__hexnan+0xa0>
 800a6ae:	2d07      	cmp	r5, #7
 800a6b0:	dc04      	bgt.n	800a6bc <__hexnan+0xa0>
 800a6b2:	462a      	mov	r2, r5
 800a6b4:	4649      	mov	r1, r9
 800a6b6:	4620      	mov	r0, r4
 800a6b8:	f7ff ff8a 	bl	800a5d0 <L_shift>
 800a6bc:	4544      	cmp	r4, r8
 800a6be:	d936      	bls.n	800a72e <__hexnan+0x112>
 800a6c0:	4623      	mov	r3, r4
 800a6c2:	f1a8 0204 	sub.w	r2, r8, #4
 800a6c6:	f853 1b04 	ldr.w	r1, [r3], #4
 800a6ca:	429f      	cmp	r7, r3
 800a6cc:	f842 1f04 	str.w	r1, [r2, #4]!
 800a6d0:	d2f9      	bcs.n	800a6c6 <__hexnan+0xaa>
 800a6d2:	1b3b      	subs	r3, r7, r4
 800a6d4:	f023 0303 	bic.w	r3, r3, #3
 800a6d8:	3304      	adds	r3, #4
 800a6da:	3401      	adds	r4, #1
 800a6dc:	3e03      	subs	r6, #3
 800a6de:	42b4      	cmp	r4, r6
 800a6e0:	bf88      	it	hi
 800a6e2:	2304      	movhi	r3, #4
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	4443      	add	r3, r8
 800a6e8:	f843 2b04 	str.w	r2, [r3], #4
 800a6ec:	429f      	cmp	r7, r3
 800a6ee:	d2fb      	bcs.n	800a6e8 <__hexnan+0xcc>
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	b91b      	cbnz	r3, 800a6fc <__hexnan+0xe0>
 800a6f4:	4547      	cmp	r7, r8
 800a6f6:	d128      	bne.n	800a74a <__hexnan+0x12e>
 800a6f8:	2301      	movs	r3, #1
 800a6fa:	603b      	str	r3, [r7, #0]
 800a6fc:	2005      	movs	r0, #5
 800a6fe:	b007      	add	sp, #28
 800a700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a704:	3501      	adds	r5, #1
 800a706:	2d08      	cmp	r5, #8
 800a708:	f10b 0b01 	add.w	fp, fp, #1
 800a70c:	dd06      	ble.n	800a71c <__hexnan+0x100>
 800a70e:	4544      	cmp	r4, r8
 800a710:	d9c1      	bls.n	800a696 <__hexnan+0x7a>
 800a712:	2300      	movs	r3, #0
 800a714:	2501      	movs	r5, #1
 800a716:	f844 3c04 	str.w	r3, [r4, #-4]
 800a71a:	3c04      	subs	r4, #4
 800a71c:	6822      	ldr	r2, [r4, #0]
 800a71e:	f000 000f 	and.w	r0, r0, #15
 800a722:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a726:	6020      	str	r0, [r4, #0]
 800a728:	e7b5      	b.n	800a696 <__hexnan+0x7a>
 800a72a:	2508      	movs	r5, #8
 800a72c:	e7b3      	b.n	800a696 <__hexnan+0x7a>
 800a72e:	9b01      	ldr	r3, [sp, #4]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d0dd      	beq.n	800a6f0 <__hexnan+0xd4>
 800a734:	f04f 32ff 	mov.w	r2, #4294967295
 800a738:	f1c3 0320 	rsb	r3, r3, #32
 800a73c:	40da      	lsrs	r2, r3
 800a73e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a742:	4013      	ands	r3, r2
 800a744:	f846 3c04 	str.w	r3, [r6, #-4]
 800a748:	e7d2      	b.n	800a6f0 <__hexnan+0xd4>
 800a74a:	3f04      	subs	r7, #4
 800a74c:	e7d0      	b.n	800a6f0 <__hexnan+0xd4>
 800a74e:	2004      	movs	r0, #4
 800a750:	e7d5      	b.n	800a6fe <__hexnan+0xe2>
	...

0800a754 <malloc>:
 800a754:	4b02      	ldr	r3, [pc, #8]	@ (800a760 <malloc+0xc>)
 800a756:	4601      	mov	r1, r0
 800a758:	6818      	ldr	r0, [r3, #0]
 800a75a:	f000 b825 	b.w	800a7a8 <_malloc_r>
 800a75e:	bf00      	nop
 800a760:	20000190 	.word	0x20000190

0800a764 <sbrk_aligned>:
 800a764:	b570      	push	{r4, r5, r6, lr}
 800a766:	4e0f      	ldr	r6, [pc, #60]	@ (800a7a4 <sbrk_aligned+0x40>)
 800a768:	460c      	mov	r4, r1
 800a76a:	6831      	ldr	r1, [r6, #0]
 800a76c:	4605      	mov	r5, r0
 800a76e:	b911      	cbnz	r1, 800a776 <sbrk_aligned+0x12>
 800a770:	f001 f800 	bl	800b774 <_sbrk_r>
 800a774:	6030      	str	r0, [r6, #0]
 800a776:	4621      	mov	r1, r4
 800a778:	4628      	mov	r0, r5
 800a77a:	f000 fffb 	bl	800b774 <_sbrk_r>
 800a77e:	1c43      	adds	r3, r0, #1
 800a780:	d103      	bne.n	800a78a <sbrk_aligned+0x26>
 800a782:	f04f 34ff 	mov.w	r4, #4294967295
 800a786:	4620      	mov	r0, r4
 800a788:	bd70      	pop	{r4, r5, r6, pc}
 800a78a:	1cc4      	adds	r4, r0, #3
 800a78c:	f024 0403 	bic.w	r4, r4, #3
 800a790:	42a0      	cmp	r0, r4
 800a792:	d0f8      	beq.n	800a786 <sbrk_aligned+0x22>
 800a794:	1a21      	subs	r1, r4, r0
 800a796:	4628      	mov	r0, r5
 800a798:	f000 ffec 	bl	800b774 <_sbrk_r>
 800a79c:	3001      	adds	r0, #1
 800a79e:	d1f2      	bne.n	800a786 <sbrk_aligned+0x22>
 800a7a0:	e7ef      	b.n	800a782 <sbrk_aligned+0x1e>
 800a7a2:	bf00      	nop
 800a7a4:	20000ab0 	.word	0x20000ab0

0800a7a8 <_malloc_r>:
 800a7a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7ac:	1ccd      	adds	r5, r1, #3
 800a7ae:	f025 0503 	bic.w	r5, r5, #3
 800a7b2:	3508      	adds	r5, #8
 800a7b4:	2d0c      	cmp	r5, #12
 800a7b6:	bf38      	it	cc
 800a7b8:	250c      	movcc	r5, #12
 800a7ba:	2d00      	cmp	r5, #0
 800a7bc:	4606      	mov	r6, r0
 800a7be:	db01      	blt.n	800a7c4 <_malloc_r+0x1c>
 800a7c0:	42a9      	cmp	r1, r5
 800a7c2:	d904      	bls.n	800a7ce <_malloc_r+0x26>
 800a7c4:	230c      	movs	r3, #12
 800a7c6:	6033      	str	r3, [r6, #0]
 800a7c8:	2000      	movs	r0, #0
 800a7ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a8a4 <_malloc_r+0xfc>
 800a7d2:	f000 f87b 	bl	800a8cc <__malloc_lock>
 800a7d6:	f8d8 3000 	ldr.w	r3, [r8]
 800a7da:	461c      	mov	r4, r3
 800a7dc:	bb44      	cbnz	r4, 800a830 <_malloc_r+0x88>
 800a7de:	4629      	mov	r1, r5
 800a7e0:	4630      	mov	r0, r6
 800a7e2:	f7ff ffbf 	bl	800a764 <sbrk_aligned>
 800a7e6:	1c43      	adds	r3, r0, #1
 800a7e8:	4604      	mov	r4, r0
 800a7ea:	d158      	bne.n	800a89e <_malloc_r+0xf6>
 800a7ec:	f8d8 4000 	ldr.w	r4, [r8]
 800a7f0:	4627      	mov	r7, r4
 800a7f2:	2f00      	cmp	r7, #0
 800a7f4:	d143      	bne.n	800a87e <_malloc_r+0xd6>
 800a7f6:	2c00      	cmp	r4, #0
 800a7f8:	d04b      	beq.n	800a892 <_malloc_r+0xea>
 800a7fa:	6823      	ldr	r3, [r4, #0]
 800a7fc:	4639      	mov	r1, r7
 800a7fe:	4630      	mov	r0, r6
 800a800:	eb04 0903 	add.w	r9, r4, r3
 800a804:	f000 ffb6 	bl	800b774 <_sbrk_r>
 800a808:	4581      	cmp	r9, r0
 800a80a:	d142      	bne.n	800a892 <_malloc_r+0xea>
 800a80c:	6821      	ldr	r1, [r4, #0]
 800a80e:	4630      	mov	r0, r6
 800a810:	1a6d      	subs	r5, r5, r1
 800a812:	4629      	mov	r1, r5
 800a814:	f7ff ffa6 	bl	800a764 <sbrk_aligned>
 800a818:	3001      	adds	r0, #1
 800a81a:	d03a      	beq.n	800a892 <_malloc_r+0xea>
 800a81c:	6823      	ldr	r3, [r4, #0]
 800a81e:	442b      	add	r3, r5
 800a820:	6023      	str	r3, [r4, #0]
 800a822:	f8d8 3000 	ldr.w	r3, [r8]
 800a826:	685a      	ldr	r2, [r3, #4]
 800a828:	bb62      	cbnz	r2, 800a884 <_malloc_r+0xdc>
 800a82a:	f8c8 7000 	str.w	r7, [r8]
 800a82e:	e00f      	b.n	800a850 <_malloc_r+0xa8>
 800a830:	6822      	ldr	r2, [r4, #0]
 800a832:	1b52      	subs	r2, r2, r5
 800a834:	d420      	bmi.n	800a878 <_malloc_r+0xd0>
 800a836:	2a0b      	cmp	r2, #11
 800a838:	d917      	bls.n	800a86a <_malloc_r+0xc2>
 800a83a:	1961      	adds	r1, r4, r5
 800a83c:	42a3      	cmp	r3, r4
 800a83e:	6025      	str	r5, [r4, #0]
 800a840:	bf18      	it	ne
 800a842:	6059      	strne	r1, [r3, #4]
 800a844:	6863      	ldr	r3, [r4, #4]
 800a846:	bf08      	it	eq
 800a848:	f8c8 1000 	streq.w	r1, [r8]
 800a84c:	5162      	str	r2, [r4, r5]
 800a84e:	604b      	str	r3, [r1, #4]
 800a850:	4630      	mov	r0, r6
 800a852:	f000 f841 	bl	800a8d8 <__malloc_unlock>
 800a856:	f104 000b 	add.w	r0, r4, #11
 800a85a:	1d23      	adds	r3, r4, #4
 800a85c:	f020 0007 	bic.w	r0, r0, #7
 800a860:	1ac2      	subs	r2, r0, r3
 800a862:	bf1c      	itt	ne
 800a864:	1a1b      	subne	r3, r3, r0
 800a866:	50a3      	strne	r3, [r4, r2]
 800a868:	e7af      	b.n	800a7ca <_malloc_r+0x22>
 800a86a:	6862      	ldr	r2, [r4, #4]
 800a86c:	42a3      	cmp	r3, r4
 800a86e:	bf0c      	ite	eq
 800a870:	f8c8 2000 	streq.w	r2, [r8]
 800a874:	605a      	strne	r2, [r3, #4]
 800a876:	e7eb      	b.n	800a850 <_malloc_r+0xa8>
 800a878:	4623      	mov	r3, r4
 800a87a:	6864      	ldr	r4, [r4, #4]
 800a87c:	e7ae      	b.n	800a7dc <_malloc_r+0x34>
 800a87e:	463c      	mov	r4, r7
 800a880:	687f      	ldr	r7, [r7, #4]
 800a882:	e7b6      	b.n	800a7f2 <_malloc_r+0x4a>
 800a884:	461a      	mov	r2, r3
 800a886:	685b      	ldr	r3, [r3, #4]
 800a888:	42a3      	cmp	r3, r4
 800a88a:	d1fb      	bne.n	800a884 <_malloc_r+0xdc>
 800a88c:	2300      	movs	r3, #0
 800a88e:	6053      	str	r3, [r2, #4]
 800a890:	e7de      	b.n	800a850 <_malloc_r+0xa8>
 800a892:	230c      	movs	r3, #12
 800a894:	4630      	mov	r0, r6
 800a896:	6033      	str	r3, [r6, #0]
 800a898:	f000 f81e 	bl	800a8d8 <__malloc_unlock>
 800a89c:	e794      	b.n	800a7c8 <_malloc_r+0x20>
 800a89e:	6005      	str	r5, [r0, #0]
 800a8a0:	e7d6      	b.n	800a850 <_malloc_r+0xa8>
 800a8a2:	bf00      	nop
 800a8a4:	20000ab4 	.word	0x20000ab4

0800a8a8 <__ascii_mbtowc>:
 800a8a8:	b082      	sub	sp, #8
 800a8aa:	b901      	cbnz	r1, 800a8ae <__ascii_mbtowc+0x6>
 800a8ac:	a901      	add	r1, sp, #4
 800a8ae:	b142      	cbz	r2, 800a8c2 <__ascii_mbtowc+0x1a>
 800a8b0:	b14b      	cbz	r3, 800a8c6 <__ascii_mbtowc+0x1e>
 800a8b2:	7813      	ldrb	r3, [r2, #0]
 800a8b4:	600b      	str	r3, [r1, #0]
 800a8b6:	7812      	ldrb	r2, [r2, #0]
 800a8b8:	1e10      	subs	r0, r2, #0
 800a8ba:	bf18      	it	ne
 800a8bc:	2001      	movne	r0, #1
 800a8be:	b002      	add	sp, #8
 800a8c0:	4770      	bx	lr
 800a8c2:	4610      	mov	r0, r2
 800a8c4:	e7fb      	b.n	800a8be <__ascii_mbtowc+0x16>
 800a8c6:	f06f 0001 	mvn.w	r0, #1
 800a8ca:	e7f8      	b.n	800a8be <__ascii_mbtowc+0x16>

0800a8cc <__malloc_lock>:
 800a8cc:	4801      	ldr	r0, [pc, #4]	@ (800a8d4 <__malloc_lock+0x8>)
 800a8ce:	f7fe bd3e 	b.w	800934e <__retarget_lock_acquire_recursive>
 800a8d2:	bf00      	nop
 800a8d4:	20000aac 	.word	0x20000aac

0800a8d8 <__malloc_unlock>:
 800a8d8:	4801      	ldr	r0, [pc, #4]	@ (800a8e0 <__malloc_unlock+0x8>)
 800a8da:	f7fe bd39 	b.w	8009350 <__retarget_lock_release_recursive>
 800a8de:	bf00      	nop
 800a8e0:	20000aac 	.word	0x20000aac

0800a8e4 <_Balloc>:
 800a8e4:	b570      	push	{r4, r5, r6, lr}
 800a8e6:	69c6      	ldr	r6, [r0, #28]
 800a8e8:	4604      	mov	r4, r0
 800a8ea:	460d      	mov	r5, r1
 800a8ec:	b976      	cbnz	r6, 800a90c <_Balloc+0x28>
 800a8ee:	2010      	movs	r0, #16
 800a8f0:	f7ff ff30 	bl	800a754 <malloc>
 800a8f4:	4602      	mov	r2, r0
 800a8f6:	61e0      	str	r0, [r4, #28]
 800a8f8:	b920      	cbnz	r0, 800a904 <_Balloc+0x20>
 800a8fa:	216b      	movs	r1, #107	@ 0x6b
 800a8fc:	4b17      	ldr	r3, [pc, #92]	@ (800a95c <_Balloc+0x78>)
 800a8fe:	4818      	ldr	r0, [pc, #96]	@ (800a960 <_Balloc+0x7c>)
 800a900:	f000 ff48 	bl	800b794 <__assert_func>
 800a904:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a908:	6006      	str	r6, [r0, #0]
 800a90a:	60c6      	str	r6, [r0, #12]
 800a90c:	69e6      	ldr	r6, [r4, #28]
 800a90e:	68f3      	ldr	r3, [r6, #12]
 800a910:	b183      	cbz	r3, 800a934 <_Balloc+0x50>
 800a912:	69e3      	ldr	r3, [r4, #28]
 800a914:	68db      	ldr	r3, [r3, #12]
 800a916:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a91a:	b9b8      	cbnz	r0, 800a94c <_Balloc+0x68>
 800a91c:	2101      	movs	r1, #1
 800a91e:	fa01 f605 	lsl.w	r6, r1, r5
 800a922:	1d72      	adds	r2, r6, #5
 800a924:	4620      	mov	r0, r4
 800a926:	0092      	lsls	r2, r2, #2
 800a928:	f000 ff52 	bl	800b7d0 <_calloc_r>
 800a92c:	b160      	cbz	r0, 800a948 <_Balloc+0x64>
 800a92e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a932:	e00e      	b.n	800a952 <_Balloc+0x6e>
 800a934:	2221      	movs	r2, #33	@ 0x21
 800a936:	2104      	movs	r1, #4
 800a938:	4620      	mov	r0, r4
 800a93a:	f000 ff49 	bl	800b7d0 <_calloc_r>
 800a93e:	69e3      	ldr	r3, [r4, #28]
 800a940:	60f0      	str	r0, [r6, #12]
 800a942:	68db      	ldr	r3, [r3, #12]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d1e4      	bne.n	800a912 <_Balloc+0x2e>
 800a948:	2000      	movs	r0, #0
 800a94a:	bd70      	pop	{r4, r5, r6, pc}
 800a94c:	6802      	ldr	r2, [r0, #0]
 800a94e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a952:	2300      	movs	r3, #0
 800a954:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a958:	e7f7      	b.n	800a94a <_Balloc+0x66>
 800a95a:	bf00      	nop
 800a95c:	0800c607 	.word	0x0800c607
 800a960:	0800c6e7 	.word	0x0800c6e7

0800a964 <_Bfree>:
 800a964:	b570      	push	{r4, r5, r6, lr}
 800a966:	69c6      	ldr	r6, [r0, #28]
 800a968:	4605      	mov	r5, r0
 800a96a:	460c      	mov	r4, r1
 800a96c:	b976      	cbnz	r6, 800a98c <_Bfree+0x28>
 800a96e:	2010      	movs	r0, #16
 800a970:	f7ff fef0 	bl	800a754 <malloc>
 800a974:	4602      	mov	r2, r0
 800a976:	61e8      	str	r0, [r5, #28]
 800a978:	b920      	cbnz	r0, 800a984 <_Bfree+0x20>
 800a97a:	218f      	movs	r1, #143	@ 0x8f
 800a97c:	4b08      	ldr	r3, [pc, #32]	@ (800a9a0 <_Bfree+0x3c>)
 800a97e:	4809      	ldr	r0, [pc, #36]	@ (800a9a4 <_Bfree+0x40>)
 800a980:	f000 ff08 	bl	800b794 <__assert_func>
 800a984:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a988:	6006      	str	r6, [r0, #0]
 800a98a:	60c6      	str	r6, [r0, #12]
 800a98c:	b13c      	cbz	r4, 800a99e <_Bfree+0x3a>
 800a98e:	69eb      	ldr	r3, [r5, #28]
 800a990:	6862      	ldr	r2, [r4, #4]
 800a992:	68db      	ldr	r3, [r3, #12]
 800a994:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a998:	6021      	str	r1, [r4, #0]
 800a99a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a99e:	bd70      	pop	{r4, r5, r6, pc}
 800a9a0:	0800c607 	.word	0x0800c607
 800a9a4:	0800c6e7 	.word	0x0800c6e7

0800a9a8 <__multadd>:
 800a9a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9ac:	4607      	mov	r7, r0
 800a9ae:	460c      	mov	r4, r1
 800a9b0:	461e      	mov	r6, r3
 800a9b2:	2000      	movs	r0, #0
 800a9b4:	690d      	ldr	r5, [r1, #16]
 800a9b6:	f101 0c14 	add.w	ip, r1, #20
 800a9ba:	f8dc 3000 	ldr.w	r3, [ip]
 800a9be:	3001      	adds	r0, #1
 800a9c0:	b299      	uxth	r1, r3
 800a9c2:	fb02 6101 	mla	r1, r2, r1, r6
 800a9c6:	0c1e      	lsrs	r6, r3, #16
 800a9c8:	0c0b      	lsrs	r3, r1, #16
 800a9ca:	fb02 3306 	mla	r3, r2, r6, r3
 800a9ce:	b289      	uxth	r1, r1
 800a9d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a9d4:	4285      	cmp	r5, r0
 800a9d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a9da:	f84c 1b04 	str.w	r1, [ip], #4
 800a9de:	dcec      	bgt.n	800a9ba <__multadd+0x12>
 800a9e0:	b30e      	cbz	r6, 800aa26 <__multadd+0x7e>
 800a9e2:	68a3      	ldr	r3, [r4, #8]
 800a9e4:	42ab      	cmp	r3, r5
 800a9e6:	dc19      	bgt.n	800aa1c <__multadd+0x74>
 800a9e8:	6861      	ldr	r1, [r4, #4]
 800a9ea:	4638      	mov	r0, r7
 800a9ec:	3101      	adds	r1, #1
 800a9ee:	f7ff ff79 	bl	800a8e4 <_Balloc>
 800a9f2:	4680      	mov	r8, r0
 800a9f4:	b928      	cbnz	r0, 800aa02 <__multadd+0x5a>
 800a9f6:	4602      	mov	r2, r0
 800a9f8:	21ba      	movs	r1, #186	@ 0xba
 800a9fa:	4b0c      	ldr	r3, [pc, #48]	@ (800aa2c <__multadd+0x84>)
 800a9fc:	480c      	ldr	r0, [pc, #48]	@ (800aa30 <__multadd+0x88>)
 800a9fe:	f000 fec9 	bl	800b794 <__assert_func>
 800aa02:	6922      	ldr	r2, [r4, #16]
 800aa04:	f104 010c 	add.w	r1, r4, #12
 800aa08:	3202      	adds	r2, #2
 800aa0a:	0092      	lsls	r2, r2, #2
 800aa0c:	300c      	adds	r0, #12
 800aa0e:	f7fe fcb6 	bl	800937e <memcpy>
 800aa12:	4621      	mov	r1, r4
 800aa14:	4638      	mov	r0, r7
 800aa16:	f7ff ffa5 	bl	800a964 <_Bfree>
 800aa1a:	4644      	mov	r4, r8
 800aa1c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800aa20:	3501      	adds	r5, #1
 800aa22:	615e      	str	r6, [r3, #20]
 800aa24:	6125      	str	r5, [r4, #16]
 800aa26:	4620      	mov	r0, r4
 800aa28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa2c:	0800c676 	.word	0x0800c676
 800aa30:	0800c6e7 	.word	0x0800c6e7

0800aa34 <__s2b>:
 800aa34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa38:	4615      	mov	r5, r2
 800aa3a:	2209      	movs	r2, #9
 800aa3c:	461f      	mov	r7, r3
 800aa3e:	3308      	adds	r3, #8
 800aa40:	460c      	mov	r4, r1
 800aa42:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa46:	4606      	mov	r6, r0
 800aa48:	2201      	movs	r2, #1
 800aa4a:	2100      	movs	r1, #0
 800aa4c:	429a      	cmp	r2, r3
 800aa4e:	db09      	blt.n	800aa64 <__s2b+0x30>
 800aa50:	4630      	mov	r0, r6
 800aa52:	f7ff ff47 	bl	800a8e4 <_Balloc>
 800aa56:	b940      	cbnz	r0, 800aa6a <__s2b+0x36>
 800aa58:	4602      	mov	r2, r0
 800aa5a:	21d3      	movs	r1, #211	@ 0xd3
 800aa5c:	4b18      	ldr	r3, [pc, #96]	@ (800aac0 <__s2b+0x8c>)
 800aa5e:	4819      	ldr	r0, [pc, #100]	@ (800aac4 <__s2b+0x90>)
 800aa60:	f000 fe98 	bl	800b794 <__assert_func>
 800aa64:	0052      	lsls	r2, r2, #1
 800aa66:	3101      	adds	r1, #1
 800aa68:	e7f0      	b.n	800aa4c <__s2b+0x18>
 800aa6a:	9b08      	ldr	r3, [sp, #32]
 800aa6c:	2d09      	cmp	r5, #9
 800aa6e:	6143      	str	r3, [r0, #20]
 800aa70:	f04f 0301 	mov.w	r3, #1
 800aa74:	6103      	str	r3, [r0, #16]
 800aa76:	dd16      	ble.n	800aaa6 <__s2b+0x72>
 800aa78:	f104 0909 	add.w	r9, r4, #9
 800aa7c:	46c8      	mov	r8, r9
 800aa7e:	442c      	add	r4, r5
 800aa80:	f818 3b01 	ldrb.w	r3, [r8], #1
 800aa84:	4601      	mov	r1, r0
 800aa86:	220a      	movs	r2, #10
 800aa88:	4630      	mov	r0, r6
 800aa8a:	3b30      	subs	r3, #48	@ 0x30
 800aa8c:	f7ff ff8c 	bl	800a9a8 <__multadd>
 800aa90:	45a0      	cmp	r8, r4
 800aa92:	d1f5      	bne.n	800aa80 <__s2b+0x4c>
 800aa94:	f1a5 0408 	sub.w	r4, r5, #8
 800aa98:	444c      	add	r4, r9
 800aa9a:	1b2d      	subs	r5, r5, r4
 800aa9c:	1963      	adds	r3, r4, r5
 800aa9e:	42bb      	cmp	r3, r7
 800aaa0:	db04      	blt.n	800aaac <__s2b+0x78>
 800aaa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aaa6:	2509      	movs	r5, #9
 800aaa8:	340a      	adds	r4, #10
 800aaaa:	e7f6      	b.n	800aa9a <__s2b+0x66>
 800aaac:	f814 3b01 	ldrb.w	r3, [r4], #1
 800aab0:	4601      	mov	r1, r0
 800aab2:	220a      	movs	r2, #10
 800aab4:	4630      	mov	r0, r6
 800aab6:	3b30      	subs	r3, #48	@ 0x30
 800aab8:	f7ff ff76 	bl	800a9a8 <__multadd>
 800aabc:	e7ee      	b.n	800aa9c <__s2b+0x68>
 800aabe:	bf00      	nop
 800aac0:	0800c676 	.word	0x0800c676
 800aac4:	0800c6e7 	.word	0x0800c6e7

0800aac8 <__hi0bits>:
 800aac8:	4603      	mov	r3, r0
 800aaca:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800aace:	bf3a      	itte	cc
 800aad0:	0403      	lslcc	r3, r0, #16
 800aad2:	2010      	movcc	r0, #16
 800aad4:	2000      	movcs	r0, #0
 800aad6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800aada:	bf3c      	itt	cc
 800aadc:	021b      	lslcc	r3, r3, #8
 800aade:	3008      	addcc	r0, #8
 800aae0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aae4:	bf3c      	itt	cc
 800aae6:	011b      	lslcc	r3, r3, #4
 800aae8:	3004      	addcc	r0, #4
 800aaea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aaee:	bf3c      	itt	cc
 800aaf0:	009b      	lslcc	r3, r3, #2
 800aaf2:	3002      	addcc	r0, #2
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	db05      	blt.n	800ab04 <__hi0bits+0x3c>
 800aaf8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800aafc:	f100 0001 	add.w	r0, r0, #1
 800ab00:	bf08      	it	eq
 800ab02:	2020      	moveq	r0, #32
 800ab04:	4770      	bx	lr

0800ab06 <__lo0bits>:
 800ab06:	6803      	ldr	r3, [r0, #0]
 800ab08:	4602      	mov	r2, r0
 800ab0a:	f013 0007 	ands.w	r0, r3, #7
 800ab0e:	d00b      	beq.n	800ab28 <__lo0bits+0x22>
 800ab10:	07d9      	lsls	r1, r3, #31
 800ab12:	d421      	bmi.n	800ab58 <__lo0bits+0x52>
 800ab14:	0798      	lsls	r0, r3, #30
 800ab16:	bf49      	itett	mi
 800ab18:	085b      	lsrmi	r3, r3, #1
 800ab1a:	089b      	lsrpl	r3, r3, #2
 800ab1c:	2001      	movmi	r0, #1
 800ab1e:	6013      	strmi	r3, [r2, #0]
 800ab20:	bf5c      	itt	pl
 800ab22:	2002      	movpl	r0, #2
 800ab24:	6013      	strpl	r3, [r2, #0]
 800ab26:	4770      	bx	lr
 800ab28:	b299      	uxth	r1, r3
 800ab2a:	b909      	cbnz	r1, 800ab30 <__lo0bits+0x2a>
 800ab2c:	2010      	movs	r0, #16
 800ab2e:	0c1b      	lsrs	r3, r3, #16
 800ab30:	b2d9      	uxtb	r1, r3
 800ab32:	b909      	cbnz	r1, 800ab38 <__lo0bits+0x32>
 800ab34:	3008      	adds	r0, #8
 800ab36:	0a1b      	lsrs	r3, r3, #8
 800ab38:	0719      	lsls	r1, r3, #28
 800ab3a:	bf04      	itt	eq
 800ab3c:	091b      	lsreq	r3, r3, #4
 800ab3e:	3004      	addeq	r0, #4
 800ab40:	0799      	lsls	r1, r3, #30
 800ab42:	bf04      	itt	eq
 800ab44:	089b      	lsreq	r3, r3, #2
 800ab46:	3002      	addeq	r0, #2
 800ab48:	07d9      	lsls	r1, r3, #31
 800ab4a:	d403      	bmi.n	800ab54 <__lo0bits+0x4e>
 800ab4c:	085b      	lsrs	r3, r3, #1
 800ab4e:	f100 0001 	add.w	r0, r0, #1
 800ab52:	d003      	beq.n	800ab5c <__lo0bits+0x56>
 800ab54:	6013      	str	r3, [r2, #0]
 800ab56:	4770      	bx	lr
 800ab58:	2000      	movs	r0, #0
 800ab5a:	4770      	bx	lr
 800ab5c:	2020      	movs	r0, #32
 800ab5e:	4770      	bx	lr

0800ab60 <__i2b>:
 800ab60:	b510      	push	{r4, lr}
 800ab62:	460c      	mov	r4, r1
 800ab64:	2101      	movs	r1, #1
 800ab66:	f7ff febd 	bl	800a8e4 <_Balloc>
 800ab6a:	4602      	mov	r2, r0
 800ab6c:	b928      	cbnz	r0, 800ab7a <__i2b+0x1a>
 800ab6e:	f240 1145 	movw	r1, #325	@ 0x145
 800ab72:	4b04      	ldr	r3, [pc, #16]	@ (800ab84 <__i2b+0x24>)
 800ab74:	4804      	ldr	r0, [pc, #16]	@ (800ab88 <__i2b+0x28>)
 800ab76:	f000 fe0d 	bl	800b794 <__assert_func>
 800ab7a:	2301      	movs	r3, #1
 800ab7c:	6144      	str	r4, [r0, #20]
 800ab7e:	6103      	str	r3, [r0, #16]
 800ab80:	bd10      	pop	{r4, pc}
 800ab82:	bf00      	nop
 800ab84:	0800c676 	.word	0x0800c676
 800ab88:	0800c6e7 	.word	0x0800c6e7

0800ab8c <__multiply>:
 800ab8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab90:	4614      	mov	r4, r2
 800ab92:	690a      	ldr	r2, [r1, #16]
 800ab94:	6923      	ldr	r3, [r4, #16]
 800ab96:	460f      	mov	r7, r1
 800ab98:	429a      	cmp	r2, r3
 800ab9a:	bfa2      	ittt	ge
 800ab9c:	4623      	movge	r3, r4
 800ab9e:	460c      	movge	r4, r1
 800aba0:	461f      	movge	r7, r3
 800aba2:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800aba6:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800abaa:	68a3      	ldr	r3, [r4, #8]
 800abac:	6861      	ldr	r1, [r4, #4]
 800abae:	eb0a 0609 	add.w	r6, sl, r9
 800abb2:	42b3      	cmp	r3, r6
 800abb4:	b085      	sub	sp, #20
 800abb6:	bfb8      	it	lt
 800abb8:	3101      	addlt	r1, #1
 800abba:	f7ff fe93 	bl	800a8e4 <_Balloc>
 800abbe:	b930      	cbnz	r0, 800abce <__multiply+0x42>
 800abc0:	4602      	mov	r2, r0
 800abc2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800abc6:	4b43      	ldr	r3, [pc, #268]	@ (800acd4 <__multiply+0x148>)
 800abc8:	4843      	ldr	r0, [pc, #268]	@ (800acd8 <__multiply+0x14c>)
 800abca:	f000 fde3 	bl	800b794 <__assert_func>
 800abce:	f100 0514 	add.w	r5, r0, #20
 800abd2:	462b      	mov	r3, r5
 800abd4:	2200      	movs	r2, #0
 800abd6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800abda:	4543      	cmp	r3, r8
 800abdc:	d321      	bcc.n	800ac22 <__multiply+0x96>
 800abde:	f107 0114 	add.w	r1, r7, #20
 800abe2:	f104 0214 	add.w	r2, r4, #20
 800abe6:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800abea:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800abee:	9302      	str	r3, [sp, #8]
 800abf0:	1b13      	subs	r3, r2, r4
 800abf2:	3b15      	subs	r3, #21
 800abf4:	f023 0303 	bic.w	r3, r3, #3
 800abf8:	3304      	adds	r3, #4
 800abfa:	f104 0715 	add.w	r7, r4, #21
 800abfe:	42ba      	cmp	r2, r7
 800ac00:	bf38      	it	cc
 800ac02:	2304      	movcc	r3, #4
 800ac04:	9301      	str	r3, [sp, #4]
 800ac06:	9b02      	ldr	r3, [sp, #8]
 800ac08:	9103      	str	r1, [sp, #12]
 800ac0a:	428b      	cmp	r3, r1
 800ac0c:	d80c      	bhi.n	800ac28 <__multiply+0x9c>
 800ac0e:	2e00      	cmp	r6, #0
 800ac10:	dd03      	ble.n	800ac1a <__multiply+0x8e>
 800ac12:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d05a      	beq.n	800acd0 <__multiply+0x144>
 800ac1a:	6106      	str	r6, [r0, #16]
 800ac1c:	b005      	add	sp, #20
 800ac1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac22:	f843 2b04 	str.w	r2, [r3], #4
 800ac26:	e7d8      	b.n	800abda <__multiply+0x4e>
 800ac28:	f8b1 a000 	ldrh.w	sl, [r1]
 800ac2c:	f1ba 0f00 	cmp.w	sl, #0
 800ac30:	d023      	beq.n	800ac7a <__multiply+0xee>
 800ac32:	46a9      	mov	r9, r5
 800ac34:	f04f 0c00 	mov.w	ip, #0
 800ac38:	f104 0e14 	add.w	lr, r4, #20
 800ac3c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ac40:	f8d9 3000 	ldr.w	r3, [r9]
 800ac44:	fa1f fb87 	uxth.w	fp, r7
 800ac48:	b29b      	uxth	r3, r3
 800ac4a:	fb0a 330b 	mla	r3, sl, fp, r3
 800ac4e:	4463      	add	r3, ip
 800ac50:	f8d9 c000 	ldr.w	ip, [r9]
 800ac54:	0c3f      	lsrs	r7, r7, #16
 800ac56:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800ac5a:	fb0a c707 	mla	r7, sl, r7, ip
 800ac5e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ac62:	b29b      	uxth	r3, r3
 800ac64:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ac68:	4572      	cmp	r2, lr
 800ac6a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ac6e:	f849 3b04 	str.w	r3, [r9], #4
 800ac72:	d8e3      	bhi.n	800ac3c <__multiply+0xb0>
 800ac74:	9b01      	ldr	r3, [sp, #4]
 800ac76:	f845 c003 	str.w	ip, [r5, r3]
 800ac7a:	9b03      	ldr	r3, [sp, #12]
 800ac7c:	3104      	adds	r1, #4
 800ac7e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ac82:	f1b9 0f00 	cmp.w	r9, #0
 800ac86:	d021      	beq.n	800accc <__multiply+0x140>
 800ac88:	46ae      	mov	lr, r5
 800ac8a:	f04f 0a00 	mov.w	sl, #0
 800ac8e:	682b      	ldr	r3, [r5, #0]
 800ac90:	f104 0c14 	add.w	ip, r4, #20
 800ac94:	f8bc b000 	ldrh.w	fp, [ip]
 800ac98:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ac9c:	b29b      	uxth	r3, r3
 800ac9e:	fb09 770b 	mla	r7, r9, fp, r7
 800aca2:	4457      	add	r7, sl
 800aca4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800aca8:	f84e 3b04 	str.w	r3, [lr], #4
 800acac:	f85c 3b04 	ldr.w	r3, [ip], #4
 800acb0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800acb4:	f8be 3000 	ldrh.w	r3, [lr]
 800acb8:	4562      	cmp	r2, ip
 800acba:	fb09 330a 	mla	r3, r9, sl, r3
 800acbe:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800acc2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800acc6:	d8e5      	bhi.n	800ac94 <__multiply+0x108>
 800acc8:	9f01      	ldr	r7, [sp, #4]
 800acca:	51eb      	str	r3, [r5, r7]
 800accc:	3504      	adds	r5, #4
 800acce:	e79a      	b.n	800ac06 <__multiply+0x7a>
 800acd0:	3e01      	subs	r6, #1
 800acd2:	e79c      	b.n	800ac0e <__multiply+0x82>
 800acd4:	0800c676 	.word	0x0800c676
 800acd8:	0800c6e7 	.word	0x0800c6e7

0800acdc <__pow5mult>:
 800acdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ace0:	4615      	mov	r5, r2
 800ace2:	f012 0203 	ands.w	r2, r2, #3
 800ace6:	4607      	mov	r7, r0
 800ace8:	460e      	mov	r6, r1
 800acea:	d007      	beq.n	800acfc <__pow5mult+0x20>
 800acec:	4c25      	ldr	r4, [pc, #148]	@ (800ad84 <__pow5mult+0xa8>)
 800acee:	3a01      	subs	r2, #1
 800acf0:	2300      	movs	r3, #0
 800acf2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800acf6:	f7ff fe57 	bl	800a9a8 <__multadd>
 800acfa:	4606      	mov	r6, r0
 800acfc:	10ad      	asrs	r5, r5, #2
 800acfe:	d03d      	beq.n	800ad7c <__pow5mult+0xa0>
 800ad00:	69fc      	ldr	r4, [r7, #28]
 800ad02:	b97c      	cbnz	r4, 800ad24 <__pow5mult+0x48>
 800ad04:	2010      	movs	r0, #16
 800ad06:	f7ff fd25 	bl	800a754 <malloc>
 800ad0a:	4602      	mov	r2, r0
 800ad0c:	61f8      	str	r0, [r7, #28]
 800ad0e:	b928      	cbnz	r0, 800ad1c <__pow5mult+0x40>
 800ad10:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ad14:	4b1c      	ldr	r3, [pc, #112]	@ (800ad88 <__pow5mult+0xac>)
 800ad16:	481d      	ldr	r0, [pc, #116]	@ (800ad8c <__pow5mult+0xb0>)
 800ad18:	f000 fd3c 	bl	800b794 <__assert_func>
 800ad1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ad20:	6004      	str	r4, [r0, #0]
 800ad22:	60c4      	str	r4, [r0, #12]
 800ad24:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ad28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ad2c:	b94c      	cbnz	r4, 800ad42 <__pow5mult+0x66>
 800ad2e:	f240 2171 	movw	r1, #625	@ 0x271
 800ad32:	4638      	mov	r0, r7
 800ad34:	f7ff ff14 	bl	800ab60 <__i2b>
 800ad38:	2300      	movs	r3, #0
 800ad3a:	4604      	mov	r4, r0
 800ad3c:	f8c8 0008 	str.w	r0, [r8, #8]
 800ad40:	6003      	str	r3, [r0, #0]
 800ad42:	f04f 0900 	mov.w	r9, #0
 800ad46:	07eb      	lsls	r3, r5, #31
 800ad48:	d50a      	bpl.n	800ad60 <__pow5mult+0x84>
 800ad4a:	4631      	mov	r1, r6
 800ad4c:	4622      	mov	r2, r4
 800ad4e:	4638      	mov	r0, r7
 800ad50:	f7ff ff1c 	bl	800ab8c <__multiply>
 800ad54:	4680      	mov	r8, r0
 800ad56:	4631      	mov	r1, r6
 800ad58:	4638      	mov	r0, r7
 800ad5a:	f7ff fe03 	bl	800a964 <_Bfree>
 800ad5e:	4646      	mov	r6, r8
 800ad60:	106d      	asrs	r5, r5, #1
 800ad62:	d00b      	beq.n	800ad7c <__pow5mult+0xa0>
 800ad64:	6820      	ldr	r0, [r4, #0]
 800ad66:	b938      	cbnz	r0, 800ad78 <__pow5mult+0x9c>
 800ad68:	4622      	mov	r2, r4
 800ad6a:	4621      	mov	r1, r4
 800ad6c:	4638      	mov	r0, r7
 800ad6e:	f7ff ff0d 	bl	800ab8c <__multiply>
 800ad72:	6020      	str	r0, [r4, #0]
 800ad74:	f8c0 9000 	str.w	r9, [r0]
 800ad78:	4604      	mov	r4, r0
 800ad7a:	e7e4      	b.n	800ad46 <__pow5mult+0x6a>
 800ad7c:	4630      	mov	r0, r6
 800ad7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad82:	bf00      	nop
 800ad84:	0800c740 	.word	0x0800c740
 800ad88:	0800c607 	.word	0x0800c607
 800ad8c:	0800c6e7 	.word	0x0800c6e7

0800ad90 <__lshift>:
 800ad90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad94:	460c      	mov	r4, r1
 800ad96:	4607      	mov	r7, r0
 800ad98:	4691      	mov	r9, r2
 800ad9a:	6923      	ldr	r3, [r4, #16]
 800ad9c:	6849      	ldr	r1, [r1, #4]
 800ad9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ada2:	68a3      	ldr	r3, [r4, #8]
 800ada4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ada8:	f108 0601 	add.w	r6, r8, #1
 800adac:	42b3      	cmp	r3, r6
 800adae:	db0b      	blt.n	800adc8 <__lshift+0x38>
 800adb0:	4638      	mov	r0, r7
 800adb2:	f7ff fd97 	bl	800a8e4 <_Balloc>
 800adb6:	4605      	mov	r5, r0
 800adb8:	b948      	cbnz	r0, 800adce <__lshift+0x3e>
 800adba:	4602      	mov	r2, r0
 800adbc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800adc0:	4b27      	ldr	r3, [pc, #156]	@ (800ae60 <__lshift+0xd0>)
 800adc2:	4828      	ldr	r0, [pc, #160]	@ (800ae64 <__lshift+0xd4>)
 800adc4:	f000 fce6 	bl	800b794 <__assert_func>
 800adc8:	3101      	adds	r1, #1
 800adca:	005b      	lsls	r3, r3, #1
 800adcc:	e7ee      	b.n	800adac <__lshift+0x1c>
 800adce:	2300      	movs	r3, #0
 800add0:	f100 0114 	add.w	r1, r0, #20
 800add4:	f100 0210 	add.w	r2, r0, #16
 800add8:	4618      	mov	r0, r3
 800adda:	4553      	cmp	r3, sl
 800addc:	db33      	blt.n	800ae46 <__lshift+0xb6>
 800adde:	6920      	ldr	r0, [r4, #16]
 800ade0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ade4:	f104 0314 	add.w	r3, r4, #20
 800ade8:	f019 091f 	ands.w	r9, r9, #31
 800adec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800adf0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800adf4:	d02b      	beq.n	800ae4e <__lshift+0xbe>
 800adf6:	468a      	mov	sl, r1
 800adf8:	2200      	movs	r2, #0
 800adfa:	f1c9 0e20 	rsb	lr, r9, #32
 800adfe:	6818      	ldr	r0, [r3, #0]
 800ae00:	fa00 f009 	lsl.w	r0, r0, r9
 800ae04:	4310      	orrs	r0, r2
 800ae06:	f84a 0b04 	str.w	r0, [sl], #4
 800ae0a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae0e:	459c      	cmp	ip, r3
 800ae10:	fa22 f20e 	lsr.w	r2, r2, lr
 800ae14:	d8f3      	bhi.n	800adfe <__lshift+0x6e>
 800ae16:	ebac 0304 	sub.w	r3, ip, r4
 800ae1a:	3b15      	subs	r3, #21
 800ae1c:	f023 0303 	bic.w	r3, r3, #3
 800ae20:	3304      	adds	r3, #4
 800ae22:	f104 0015 	add.w	r0, r4, #21
 800ae26:	4584      	cmp	ip, r0
 800ae28:	bf38      	it	cc
 800ae2a:	2304      	movcc	r3, #4
 800ae2c:	50ca      	str	r2, [r1, r3]
 800ae2e:	b10a      	cbz	r2, 800ae34 <__lshift+0xa4>
 800ae30:	f108 0602 	add.w	r6, r8, #2
 800ae34:	3e01      	subs	r6, #1
 800ae36:	4638      	mov	r0, r7
 800ae38:	4621      	mov	r1, r4
 800ae3a:	612e      	str	r6, [r5, #16]
 800ae3c:	f7ff fd92 	bl	800a964 <_Bfree>
 800ae40:	4628      	mov	r0, r5
 800ae42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae46:	f842 0f04 	str.w	r0, [r2, #4]!
 800ae4a:	3301      	adds	r3, #1
 800ae4c:	e7c5      	b.n	800adda <__lshift+0x4a>
 800ae4e:	3904      	subs	r1, #4
 800ae50:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae54:	459c      	cmp	ip, r3
 800ae56:	f841 2f04 	str.w	r2, [r1, #4]!
 800ae5a:	d8f9      	bhi.n	800ae50 <__lshift+0xc0>
 800ae5c:	e7ea      	b.n	800ae34 <__lshift+0xa4>
 800ae5e:	bf00      	nop
 800ae60:	0800c676 	.word	0x0800c676
 800ae64:	0800c6e7 	.word	0x0800c6e7

0800ae68 <__mcmp>:
 800ae68:	4603      	mov	r3, r0
 800ae6a:	690a      	ldr	r2, [r1, #16]
 800ae6c:	6900      	ldr	r0, [r0, #16]
 800ae6e:	b530      	push	{r4, r5, lr}
 800ae70:	1a80      	subs	r0, r0, r2
 800ae72:	d10e      	bne.n	800ae92 <__mcmp+0x2a>
 800ae74:	3314      	adds	r3, #20
 800ae76:	3114      	adds	r1, #20
 800ae78:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ae7c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ae80:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ae84:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ae88:	4295      	cmp	r5, r2
 800ae8a:	d003      	beq.n	800ae94 <__mcmp+0x2c>
 800ae8c:	d205      	bcs.n	800ae9a <__mcmp+0x32>
 800ae8e:	f04f 30ff 	mov.w	r0, #4294967295
 800ae92:	bd30      	pop	{r4, r5, pc}
 800ae94:	42a3      	cmp	r3, r4
 800ae96:	d3f3      	bcc.n	800ae80 <__mcmp+0x18>
 800ae98:	e7fb      	b.n	800ae92 <__mcmp+0x2a>
 800ae9a:	2001      	movs	r0, #1
 800ae9c:	e7f9      	b.n	800ae92 <__mcmp+0x2a>
	...

0800aea0 <__mdiff>:
 800aea0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aea4:	4689      	mov	r9, r1
 800aea6:	4606      	mov	r6, r0
 800aea8:	4611      	mov	r1, r2
 800aeaa:	4648      	mov	r0, r9
 800aeac:	4614      	mov	r4, r2
 800aeae:	f7ff ffdb 	bl	800ae68 <__mcmp>
 800aeb2:	1e05      	subs	r5, r0, #0
 800aeb4:	d112      	bne.n	800aedc <__mdiff+0x3c>
 800aeb6:	4629      	mov	r1, r5
 800aeb8:	4630      	mov	r0, r6
 800aeba:	f7ff fd13 	bl	800a8e4 <_Balloc>
 800aebe:	4602      	mov	r2, r0
 800aec0:	b928      	cbnz	r0, 800aece <__mdiff+0x2e>
 800aec2:	f240 2137 	movw	r1, #567	@ 0x237
 800aec6:	4b3e      	ldr	r3, [pc, #248]	@ (800afc0 <__mdiff+0x120>)
 800aec8:	483e      	ldr	r0, [pc, #248]	@ (800afc4 <__mdiff+0x124>)
 800aeca:	f000 fc63 	bl	800b794 <__assert_func>
 800aece:	2301      	movs	r3, #1
 800aed0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800aed4:	4610      	mov	r0, r2
 800aed6:	b003      	add	sp, #12
 800aed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aedc:	bfbc      	itt	lt
 800aede:	464b      	movlt	r3, r9
 800aee0:	46a1      	movlt	r9, r4
 800aee2:	4630      	mov	r0, r6
 800aee4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800aee8:	bfba      	itte	lt
 800aeea:	461c      	movlt	r4, r3
 800aeec:	2501      	movlt	r5, #1
 800aeee:	2500      	movge	r5, #0
 800aef0:	f7ff fcf8 	bl	800a8e4 <_Balloc>
 800aef4:	4602      	mov	r2, r0
 800aef6:	b918      	cbnz	r0, 800af00 <__mdiff+0x60>
 800aef8:	f240 2145 	movw	r1, #581	@ 0x245
 800aefc:	4b30      	ldr	r3, [pc, #192]	@ (800afc0 <__mdiff+0x120>)
 800aefe:	e7e3      	b.n	800aec8 <__mdiff+0x28>
 800af00:	f100 0b14 	add.w	fp, r0, #20
 800af04:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800af08:	f109 0310 	add.w	r3, r9, #16
 800af0c:	60c5      	str	r5, [r0, #12]
 800af0e:	f04f 0c00 	mov.w	ip, #0
 800af12:	f109 0514 	add.w	r5, r9, #20
 800af16:	46d9      	mov	r9, fp
 800af18:	6926      	ldr	r6, [r4, #16]
 800af1a:	f104 0e14 	add.w	lr, r4, #20
 800af1e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800af22:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800af26:	9301      	str	r3, [sp, #4]
 800af28:	9b01      	ldr	r3, [sp, #4]
 800af2a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800af2e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800af32:	b281      	uxth	r1, r0
 800af34:	9301      	str	r3, [sp, #4]
 800af36:	fa1f f38a 	uxth.w	r3, sl
 800af3a:	1a5b      	subs	r3, r3, r1
 800af3c:	0c00      	lsrs	r0, r0, #16
 800af3e:	4463      	add	r3, ip
 800af40:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800af44:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800af48:	b29b      	uxth	r3, r3
 800af4a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800af4e:	4576      	cmp	r6, lr
 800af50:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800af54:	f849 3b04 	str.w	r3, [r9], #4
 800af58:	d8e6      	bhi.n	800af28 <__mdiff+0x88>
 800af5a:	1b33      	subs	r3, r6, r4
 800af5c:	3b15      	subs	r3, #21
 800af5e:	f023 0303 	bic.w	r3, r3, #3
 800af62:	3415      	adds	r4, #21
 800af64:	3304      	adds	r3, #4
 800af66:	42a6      	cmp	r6, r4
 800af68:	bf38      	it	cc
 800af6a:	2304      	movcc	r3, #4
 800af6c:	441d      	add	r5, r3
 800af6e:	445b      	add	r3, fp
 800af70:	461e      	mov	r6, r3
 800af72:	462c      	mov	r4, r5
 800af74:	4544      	cmp	r4, r8
 800af76:	d30e      	bcc.n	800af96 <__mdiff+0xf6>
 800af78:	f108 0103 	add.w	r1, r8, #3
 800af7c:	1b49      	subs	r1, r1, r5
 800af7e:	f021 0103 	bic.w	r1, r1, #3
 800af82:	3d03      	subs	r5, #3
 800af84:	45a8      	cmp	r8, r5
 800af86:	bf38      	it	cc
 800af88:	2100      	movcc	r1, #0
 800af8a:	440b      	add	r3, r1
 800af8c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800af90:	b199      	cbz	r1, 800afba <__mdiff+0x11a>
 800af92:	6117      	str	r7, [r2, #16]
 800af94:	e79e      	b.n	800aed4 <__mdiff+0x34>
 800af96:	46e6      	mov	lr, ip
 800af98:	f854 1b04 	ldr.w	r1, [r4], #4
 800af9c:	fa1f fc81 	uxth.w	ip, r1
 800afa0:	44f4      	add	ip, lr
 800afa2:	0c08      	lsrs	r0, r1, #16
 800afa4:	4471      	add	r1, lr
 800afa6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800afaa:	b289      	uxth	r1, r1
 800afac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800afb0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800afb4:	f846 1b04 	str.w	r1, [r6], #4
 800afb8:	e7dc      	b.n	800af74 <__mdiff+0xd4>
 800afba:	3f01      	subs	r7, #1
 800afbc:	e7e6      	b.n	800af8c <__mdiff+0xec>
 800afbe:	bf00      	nop
 800afc0:	0800c676 	.word	0x0800c676
 800afc4:	0800c6e7 	.word	0x0800c6e7

0800afc8 <__ulp>:
 800afc8:	4b0e      	ldr	r3, [pc, #56]	@ (800b004 <__ulp+0x3c>)
 800afca:	400b      	ands	r3, r1
 800afcc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	dc08      	bgt.n	800afe6 <__ulp+0x1e>
 800afd4:	425b      	negs	r3, r3
 800afd6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800afda:	ea4f 5223 	mov.w	r2, r3, asr #20
 800afde:	da04      	bge.n	800afea <__ulp+0x22>
 800afe0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800afe4:	4113      	asrs	r3, r2
 800afe6:	2200      	movs	r2, #0
 800afe8:	e008      	b.n	800affc <__ulp+0x34>
 800afea:	f1a2 0314 	sub.w	r3, r2, #20
 800afee:	2b1e      	cmp	r3, #30
 800aff0:	bfd6      	itet	le
 800aff2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800aff6:	2201      	movgt	r2, #1
 800aff8:	40da      	lsrle	r2, r3
 800affa:	2300      	movs	r3, #0
 800affc:	4619      	mov	r1, r3
 800affe:	4610      	mov	r0, r2
 800b000:	4770      	bx	lr
 800b002:	bf00      	nop
 800b004:	7ff00000 	.word	0x7ff00000

0800b008 <__b2d>:
 800b008:	6902      	ldr	r2, [r0, #16]
 800b00a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b00c:	f100 0614 	add.w	r6, r0, #20
 800b010:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800b014:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800b018:	4f1e      	ldr	r7, [pc, #120]	@ (800b094 <__b2d+0x8c>)
 800b01a:	4620      	mov	r0, r4
 800b01c:	f7ff fd54 	bl	800aac8 <__hi0bits>
 800b020:	4603      	mov	r3, r0
 800b022:	f1c0 0020 	rsb	r0, r0, #32
 800b026:	2b0a      	cmp	r3, #10
 800b028:	f1a2 0504 	sub.w	r5, r2, #4
 800b02c:	6008      	str	r0, [r1, #0]
 800b02e:	dc12      	bgt.n	800b056 <__b2d+0x4e>
 800b030:	42ae      	cmp	r6, r5
 800b032:	bf2c      	ite	cs
 800b034:	2200      	movcs	r2, #0
 800b036:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800b03a:	f1c3 0c0b 	rsb	ip, r3, #11
 800b03e:	3315      	adds	r3, #21
 800b040:	fa24 fe0c 	lsr.w	lr, r4, ip
 800b044:	fa04 f303 	lsl.w	r3, r4, r3
 800b048:	fa22 f20c 	lsr.w	r2, r2, ip
 800b04c:	ea4e 0107 	orr.w	r1, lr, r7
 800b050:	431a      	orrs	r2, r3
 800b052:	4610      	mov	r0, r2
 800b054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b056:	42ae      	cmp	r6, r5
 800b058:	bf36      	itet	cc
 800b05a:	f1a2 0508 	subcc.w	r5, r2, #8
 800b05e:	2200      	movcs	r2, #0
 800b060:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800b064:	3b0b      	subs	r3, #11
 800b066:	d012      	beq.n	800b08e <__b2d+0x86>
 800b068:	f1c3 0720 	rsb	r7, r3, #32
 800b06c:	fa22 f107 	lsr.w	r1, r2, r7
 800b070:	409c      	lsls	r4, r3
 800b072:	430c      	orrs	r4, r1
 800b074:	42b5      	cmp	r5, r6
 800b076:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800b07a:	bf94      	ite	ls
 800b07c:	2400      	movls	r4, #0
 800b07e:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800b082:	409a      	lsls	r2, r3
 800b084:	40fc      	lsrs	r4, r7
 800b086:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800b08a:	4322      	orrs	r2, r4
 800b08c:	e7e1      	b.n	800b052 <__b2d+0x4a>
 800b08e:	ea44 0107 	orr.w	r1, r4, r7
 800b092:	e7de      	b.n	800b052 <__b2d+0x4a>
 800b094:	3ff00000 	.word	0x3ff00000

0800b098 <__d2b>:
 800b098:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800b09c:	2101      	movs	r1, #1
 800b09e:	4690      	mov	r8, r2
 800b0a0:	4699      	mov	r9, r3
 800b0a2:	9e08      	ldr	r6, [sp, #32]
 800b0a4:	f7ff fc1e 	bl	800a8e4 <_Balloc>
 800b0a8:	4604      	mov	r4, r0
 800b0aa:	b930      	cbnz	r0, 800b0ba <__d2b+0x22>
 800b0ac:	4602      	mov	r2, r0
 800b0ae:	f240 310f 	movw	r1, #783	@ 0x30f
 800b0b2:	4b23      	ldr	r3, [pc, #140]	@ (800b140 <__d2b+0xa8>)
 800b0b4:	4823      	ldr	r0, [pc, #140]	@ (800b144 <__d2b+0xac>)
 800b0b6:	f000 fb6d 	bl	800b794 <__assert_func>
 800b0ba:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b0be:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b0c2:	b10d      	cbz	r5, 800b0c8 <__d2b+0x30>
 800b0c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b0c8:	9301      	str	r3, [sp, #4]
 800b0ca:	f1b8 0300 	subs.w	r3, r8, #0
 800b0ce:	d024      	beq.n	800b11a <__d2b+0x82>
 800b0d0:	4668      	mov	r0, sp
 800b0d2:	9300      	str	r3, [sp, #0]
 800b0d4:	f7ff fd17 	bl	800ab06 <__lo0bits>
 800b0d8:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b0dc:	b1d8      	cbz	r0, 800b116 <__d2b+0x7e>
 800b0de:	f1c0 0320 	rsb	r3, r0, #32
 800b0e2:	fa02 f303 	lsl.w	r3, r2, r3
 800b0e6:	430b      	orrs	r3, r1
 800b0e8:	40c2      	lsrs	r2, r0
 800b0ea:	6163      	str	r3, [r4, #20]
 800b0ec:	9201      	str	r2, [sp, #4]
 800b0ee:	9b01      	ldr	r3, [sp, #4]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	bf0c      	ite	eq
 800b0f4:	2201      	moveq	r2, #1
 800b0f6:	2202      	movne	r2, #2
 800b0f8:	61a3      	str	r3, [r4, #24]
 800b0fa:	6122      	str	r2, [r4, #16]
 800b0fc:	b1ad      	cbz	r5, 800b12a <__d2b+0x92>
 800b0fe:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b102:	4405      	add	r5, r0
 800b104:	6035      	str	r5, [r6, #0]
 800b106:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b10a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b10c:	6018      	str	r0, [r3, #0]
 800b10e:	4620      	mov	r0, r4
 800b110:	b002      	add	sp, #8
 800b112:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800b116:	6161      	str	r1, [r4, #20]
 800b118:	e7e9      	b.n	800b0ee <__d2b+0x56>
 800b11a:	a801      	add	r0, sp, #4
 800b11c:	f7ff fcf3 	bl	800ab06 <__lo0bits>
 800b120:	9b01      	ldr	r3, [sp, #4]
 800b122:	2201      	movs	r2, #1
 800b124:	6163      	str	r3, [r4, #20]
 800b126:	3020      	adds	r0, #32
 800b128:	e7e7      	b.n	800b0fa <__d2b+0x62>
 800b12a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b12e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b132:	6030      	str	r0, [r6, #0]
 800b134:	6918      	ldr	r0, [r3, #16]
 800b136:	f7ff fcc7 	bl	800aac8 <__hi0bits>
 800b13a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b13e:	e7e4      	b.n	800b10a <__d2b+0x72>
 800b140:	0800c676 	.word	0x0800c676
 800b144:	0800c6e7 	.word	0x0800c6e7

0800b148 <__ratio>:
 800b148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b14c:	b085      	sub	sp, #20
 800b14e:	e9cd 1000 	strd	r1, r0, [sp]
 800b152:	a902      	add	r1, sp, #8
 800b154:	f7ff ff58 	bl	800b008 <__b2d>
 800b158:	468b      	mov	fp, r1
 800b15a:	4606      	mov	r6, r0
 800b15c:	460f      	mov	r7, r1
 800b15e:	9800      	ldr	r0, [sp, #0]
 800b160:	a903      	add	r1, sp, #12
 800b162:	f7ff ff51 	bl	800b008 <__b2d>
 800b166:	460d      	mov	r5, r1
 800b168:	9b01      	ldr	r3, [sp, #4]
 800b16a:	4689      	mov	r9, r1
 800b16c:	6919      	ldr	r1, [r3, #16]
 800b16e:	9b00      	ldr	r3, [sp, #0]
 800b170:	4604      	mov	r4, r0
 800b172:	691b      	ldr	r3, [r3, #16]
 800b174:	4630      	mov	r0, r6
 800b176:	1ac9      	subs	r1, r1, r3
 800b178:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b17c:	1a9b      	subs	r3, r3, r2
 800b17e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b182:	2b00      	cmp	r3, #0
 800b184:	bfcd      	iteet	gt
 800b186:	463a      	movgt	r2, r7
 800b188:	462a      	movle	r2, r5
 800b18a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b18e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800b192:	bfd8      	it	le
 800b194:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b198:	464b      	mov	r3, r9
 800b19a:	4622      	mov	r2, r4
 800b19c:	4659      	mov	r1, fp
 800b19e:	f7f5 facf 	bl	8000740 <__aeabi_ddiv>
 800b1a2:	b005      	add	sp, #20
 800b1a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b1a8 <__copybits>:
 800b1a8:	3901      	subs	r1, #1
 800b1aa:	b570      	push	{r4, r5, r6, lr}
 800b1ac:	1149      	asrs	r1, r1, #5
 800b1ae:	6914      	ldr	r4, [r2, #16]
 800b1b0:	3101      	adds	r1, #1
 800b1b2:	f102 0314 	add.w	r3, r2, #20
 800b1b6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b1ba:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b1be:	1f05      	subs	r5, r0, #4
 800b1c0:	42a3      	cmp	r3, r4
 800b1c2:	d30c      	bcc.n	800b1de <__copybits+0x36>
 800b1c4:	1aa3      	subs	r3, r4, r2
 800b1c6:	3b11      	subs	r3, #17
 800b1c8:	f023 0303 	bic.w	r3, r3, #3
 800b1cc:	3211      	adds	r2, #17
 800b1ce:	42a2      	cmp	r2, r4
 800b1d0:	bf88      	it	hi
 800b1d2:	2300      	movhi	r3, #0
 800b1d4:	4418      	add	r0, r3
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	4288      	cmp	r0, r1
 800b1da:	d305      	bcc.n	800b1e8 <__copybits+0x40>
 800b1dc:	bd70      	pop	{r4, r5, r6, pc}
 800b1de:	f853 6b04 	ldr.w	r6, [r3], #4
 800b1e2:	f845 6f04 	str.w	r6, [r5, #4]!
 800b1e6:	e7eb      	b.n	800b1c0 <__copybits+0x18>
 800b1e8:	f840 3b04 	str.w	r3, [r0], #4
 800b1ec:	e7f4      	b.n	800b1d8 <__copybits+0x30>

0800b1ee <__any_on>:
 800b1ee:	f100 0214 	add.w	r2, r0, #20
 800b1f2:	6900      	ldr	r0, [r0, #16]
 800b1f4:	114b      	asrs	r3, r1, #5
 800b1f6:	4298      	cmp	r0, r3
 800b1f8:	b510      	push	{r4, lr}
 800b1fa:	db11      	blt.n	800b220 <__any_on+0x32>
 800b1fc:	dd0a      	ble.n	800b214 <__any_on+0x26>
 800b1fe:	f011 011f 	ands.w	r1, r1, #31
 800b202:	d007      	beq.n	800b214 <__any_on+0x26>
 800b204:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b208:	fa24 f001 	lsr.w	r0, r4, r1
 800b20c:	fa00 f101 	lsl.w	r1, r0, r1
 800b210:	428c      	cmp	r4, r1
 800b212:	d10b      	bne.n	800b22c <__any_on+0x3e>
 800b214:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b218:	4293      	cmp	r3, r2
 800b21a:	d803      	bhi.n	800b224 <__any_on+0x36>
 800b21c:	2000      	movs	r0, #0
 800b21e:	bd10      	pop	{r4, pc}
 800b220:	4603      	mov	r3, r0
 800b222:	e7f7      	b.n	800b214 <__any_on+0x26>
 800b224:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b228:	2900      	cmp	r1, #0
 800b22a:	d0f5      	beq.n	800b218 <__any_on+0x2a>
 800b22c:	2001      	movs	r0, #1
 800b22e:	e7f6      	b.n	800b21e <__any_on+0x30>

0800b230 <_strtol_l.constprop.0>:
 800b230:	2b24      	cmp	r3, #36	@ 0x24
 800b232:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b236:	4686      	mov	lr, r0
 800b238:	4690      	mov	r8, r2
 800b23a:	d801      	bhi.n	800b240 <_strtol_l.constprop.0+0x10>
 800b23c:	2b01      	cmp	r3, #1
 800b23e:	d106      	bne.n	800b24e <_strtol_l.constprop.0+0x1e>
 800b240:	f7fe f85a 	bl	80092f8 <__errno>
 800b244:	2316      	movs	r3, #22
 800b246:	6003      	str	r3, [r0, #0]
 800b248:	2000      	movs	r0, #0
 800b24a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b24e:	460d      	mov	r5, r1
 800b250:	4833      	ldr	r0, [pc, #204]	@ (800b320 <_strtol_l.constprop.0+0xf0>)
 800b252:	462a      	mov	r2, r5
 800b254:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b258:	5d06      	ldrb	r6, [r0, r4]
 800b25a:	f016 0608 	ands.w	r6, r6, #8
 800b25e:	d1f8      	bne.n	800b252 <_strtol_l.constprop.0+0x22>
 800b260:	2c2d      	cmp	r4, #45	@ 0x2d
 800b262:	d12d      	bne.n	800b2c0 <_strtol_l.constprop.0+0x90>
 800b264:	2601      	movs	r6, #1
 800b266:	782c      	ldrb	r4, [r5, #0]
 800b268:	1c95      	adds	r5, r2, #2
 800b26a:	f033 0210 	bics.w	r2, r3, #16
 800b26e:	d109      	bne.n	800b284 <_strtol_l.constprop.0+0x54>
 800b270:	2c30      	cmp	r4, #48	@ 0x30
 800b272:	d12a      	bne.n	800b2ca <_strtol_l.constprop.0+0x9a>
 800b274:	782a      	ldrb	r2, [r5, #0]
 800b276:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b27a:	2a58      	cmp	r2, #88	@ 0x58
 800b27c:	d125      	bne.n	800b2ca <_strtol_l.constprop.0+0x9a>
 800b27e:	2310      	movs	r3, #16
 800b280:	786c      	ldrb	r4, [r5, #1]
 800b282:	3502      	adds	r5, #2
 800b284:	2200      	movs	r2, #0
 800b286:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b28a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b28e:	fbbc f9f3 	udiv	r9, ip, r3
 800b292:	4610      	mov	r0, r2
 800b294:	fb03 ca19 	mls	sl, r3, r9, ip
 800b298:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b29c:	2f09      	cmp	r7, #9
 800b29e:	d81b      	bhi.n	800b2d8 <_strtol_l.constprop.0+0xa8>
 800b2a0:	463c      	mov	r4, r7
 800b2a2:	42a3      	cmp	r3, r4
 800b2a4:	dd27      	ble.n	800b2f6 <_strtol_l.constprop.0+0xc6>
 800b2a6:	1c57      	adds	r7, r2, #1
 800b2a8:	d007      	beq.n	800b2ba <_strtol_l.constprop.0+0x8a>
 800b2aa:	4581      	cmp	r9, r0
 800b2ac:	d320      	bcc.n	800b2f0 <_strtol_l.constprop.0+0xc0>
 800b2ae:	d101      	bne.n	800b2b4 <_strtol_l.constprop.0+0x84>
 800b2b0:	45a2      	cmp	sl, r4
 800b2b2:	db1d      	blt.n	800b2f0 <_strtol_l.constprop.0+0xc0>
 800b2b4:	2201      	movs	r2, #1
 800b2b6:	fb00 4003 	mla	r0, r0, r3, r4
 800b2ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b2be:	e7eb      	b.n	800b298 <_strtol_l.constprop.0+0x68>
 800b2c0:	2c2b      	cmp	r4, #43	@ 0x2b
 800b2c2:	bf04      	itt	eq
 800b2c4:	782c      	ldrbeq	r4, [r5, #0]
 800b2c6:	1c95      	addeq	r5, r2, #2
 800b2c8:	e7cf      	b.n	800b26a <_strtol_l.constprop.0+0x3a>
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d1da      	bne.n	800b284 <_strtol_l.constprop.0+0x54>
 800b2ce:	2c30      	cmp	r4, #48	@ 0x30
 800b2d0:	bf0c      	ite	eq
 800b2d2:	2308      	moveq	r3, #8
 800b2d4:	230a      	movne	r3, #10
 800b2d6:	e7d5      	b.n	800b284 <_strtol_l.constprop.0+0x54>
 800b2d8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b2dc:	2f19      	cmp	r7, #25
 800b2de:	d801      	bhi.n	800b2e4 <_strtol_l.constprop.0+0xb4>
 800b2e0:	3c37      	subs	r4, #55	@ 0x37
 800b2e2:	e7de      	b.n	800b2a2 <_strtol_l.constprop.0+0x72>
 800b2e4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b2e8:	2f19      	cmp	r7, #25
 800b2ea:	d804      	bhi.n	800b2f6 <_strtol_l.constprop.0+0xc6>
 800b2ec:	3c57      	subs	r4, #87	@ 0x57
 800b2ee:	e7d8      	b.n	800b2a2 <_strtol_l.constprop.0+0x72>
 800b2f0:	f04f 32ff 	mov.w	r2, #4294967295
 800b2f4:	e7e1      	b.n	800b2ba <_strtol_l.constprop.0+0x8a>
 800b2f6:	1c53      	adds	r3, r2, #1
 800b2f8:	d108      	bne.n	800b30c <_strtol_l.constprop.0+0xdc>
 800b2fa:	2322      	movs	r3, #34	@ 0x22
 800b2fc:	4660      	mov	r0, ip
 800b2fe:	f8ce 3000 	str.w	r3, [lr]
 800b302:	f1b8 0f00 	cmp.w	r8, #0
 800b306:	d0a0      	beq.n	800b24a <_strtol_l.constprop.0+0x1a>
 800b308:	1e69      	subs	r1, r5, #1
 800b30a:	e006      	b.n	800b31a <_strtol_l.constprop.0+0xea>
 800b30c:	b106      	cbz	r6, 800b310 <_strtol_l.constprop.0+0xe0>
 800b30e:	4240      	negs	r0, r0
 800b310:	f1b8 0f00 	cmp.w	r8, #0
 800b314:	d099      	beq.n	800b24a <_strtol_l.constprop.0+0x1a>
 800b316:	2a00      	cmp	r2, #0
 800b318:	d1f6      	bne.n	800b308 <_strtol_l.constprop.0+0xd8>
 800b31a:	f8c8 1000 	str.w	r1, [r8]
 800b31e:	e794      	b.n	800b24a <_strtol_l.constprop.0+0x1a>
 800b320:	0800c4b9 	.word	0x0800c4b9

0800b324 <_strtol_r>:
 800b324:	f7ff bf84 	b.w	800b230 <_strtol_l.constprop.0>

0800b328 <__ascii_wctomb>:
 800b328:	4603      	mov	r3, r0
 800b32a:	4608      	mov	r0, r1
 800b32c:	b141      	cbz	r1, 800b340 <__ascii_wctomb+0x18>
 800b32e:	2aff      	cmp	r2, #255	@ 0xff
 800b330:	d904      	bls.n	800b33c <__ascii_wctomb+0x14>
 800b332:	228a      	movs	r2, #138	@ 0x8a
 800b334:	f04f 30ff 	mov.w	r0, #4294967295
 800b338:	601a      	str	r2, [r3, #0]
 800b33a:	4770      	bx	lr
 800b33c:	2001      	movs	r0, #1
 800b33e:	700a      	strb	r2, [r1, #0]
 800b340:	4770      	bx	lr

0800b342 <__ssputs_r>:
 800b342:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b346:	461f      	mov	r7, r3
 800b348:	688e      	ldr	r6, [r1, #8]
 800b34a:	4682      	mov	sl, r0
 800b34c:	42be      	cmp	r6, r7
 800b34e:	460c      	mov	r4, r1
 800b350:	4690      	mov	r8, r2
 800b352:	680b      	ldr	r3, [r1, #0]
 800b354:	d82d      	bhi.n	800b3b2 <__ssputs_r+0x70>
 800b356:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b35a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b35e:	d026      	beq.n	800b3ae <__ssputs_r+0x6c>
 800b360:	6965      	ldr	r5, [r4, #20]
 800b362:	6909      	ldr	r1, [r1, #16]
 800b364:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b368:	eba3 0901 	sub.w	r9, r3, r1
 800b36c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b370:	1c7b      	adds	r3, r7, #1
 800b372:	444b      	add	r3, r9
 800b374:	106d      	asrs	r5, r5, #1
 800b376:	429d      	cmp	r5, r3
 800b378:	bf38      	it	cc
 800b37a:	461d      	movcc	r5, r3
 800b37c:	0553      	lsls	r3, r2, #21
 800b37e:	d527      	bpl.n	800b3d0 <__ssputs_r+0x8e>
 800b380:	4629      	mov	r1, r5
 800b382:	f7ff fa11 	bl	800a7a8 <_malloc_r>
 800b386:	4606      	mov	r6, r0
 800b388:	b360      	cbz	r0, 800b3e4 <__ssputs_r+0xa2>
 800b38a:	464a      	mov	r2, r9
 800b38c:	6921      	ldr	r1, [r4, #16]
 800b38e:	f7fd fff6 	bl	800937e <memcpy>
 800b392:	89a3      	ldrh	r3, [r4, #12]
 800b394:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b398:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b39c:	81a3      	strh	r3, [r4, #12]
 800b39e:	6126      	str	r6, [r4, #16]
 800b3a0:	444e      	add	r6, r9
 800b3a2:	6026      	str	r6, [r4, #0]
 800b3a4:	463e      	mov	r6, r7
 800b3a6:	6165      	str	r5, [r4, #20]
 800b3a8:	eba5 0509 	sub.w	r5, r5, r9
 800b3ac:	60a5      	str	r5, [r4, #8]
 800b3ae:	42be      	cmp	r6, r7
 800b3b0:	d900      	bls.n	800b3b4 <__ssputs_r+0x72>
 800b3b2:	463e      	mov	r6, r7
 800b3b4:	4632      	mov	r2, r6
 800b3b6:	4641      	mov	r1, r8
 800b3b8:	6820      	ldr	r0, [r4, #0]
 800b3ba:	f000 f9c1 	bl	800b740 <memmove>
 800b3be:	2000      	movs	r0, #0
 800b3c0:	68a3      	ldr	r3, [r4, #8]
 800b3c2:	1b9b      	subs	r3, r3, r6
 800b3c4:	60a3      	str	r3, [r4, #8]
 800b3c6:	6823      	ldr	r3, [r4, #0]
 800b3c8:	4433      	add	r3, r6
 800b3ca:	6023      	str	r3, [r4, #0]
 800b3cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3d0:	462a      	mov	r2, r5
 800b3d2:	f000 fa11 	bl	800b7f8 <_realloc_r>
 800b3d6:	4606      	mov	r6, r0
 800b3d8:	2800      	cmp	r0, #0
 800b3da:	d1e0      	bne.n	800b39e <__ssputs_r+0x5c>
 800b3dc:	4650      	mov	r0, sl
 800b3de:	6921      	ldr	r1, [r4, #16]
 800b3e0:	f7fe fe36 	bl	800a050 <_free_r>
 800b3e4:	230c      	movs	r3, #12
 800b3e6:	f8ca 3000 	str.w	r3, [sl]
 800b3ea:	89a3      	ldrh	r3, [r4, #12]
 800b3ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b3f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b3f4:	81a3      	strh	r3, [r4, #12]
 800b3f6:	e7e9      	b.n	800b3cc <__ssputs_r+0x8a>

0800b3f8 <_svfiprintf_r>:
 800b3f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3fc:	4698      	mov	r8, r3
 800b3fe:	898b      	ldrh	r3, [r1, #12]
 800b400:	4607      	mov	r7, r0
 800b402:	061b      	lsls	r3, r3, #24
 800b404:	460d      	mov	r5, r1
 800b406:	4614      	mov	r4, r2
 800b408:	b09d      	sub	sp, #116	@ 0x74
 800b40a:	d510      	bpl.n	800b42e <_svfiprintf_r+0x36>
 800b40c:	690b      	ldr	r3, [r1, #16]
 800b40e:	b973      	cbnz	r3, 800b42e <_svfiprintf_r+0x36>
 800b410:	2140      	movs	r1, #64	@ 0x40
 800b412:	f7ff f9c9 	bl	800a7a8 <_malloc_r>
 800b416:	6028      	str	r0, [r5, #0]
 800b418:	6128      	str	r0, [r5, #16]
 800b41a:	b930      	cbnz	r0, 800b42a <_svfiprintf_r+0x32>
 800b41c:	230c      	movs	r3, #12
 800b41e:	603b      	str	r3, [r7, #0]
 800b420:	f04f 30ff 	mov.w	r0, #4294967295
 800b424:	b01d      	add	sp, #116	@ 0x74
 800b426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b42a:	2340      	movs	r3, #64	@ 0x40
 800b42c:	616b      	str	r3, [r5, #20]
 800b42e:	2300      	movs	r3, #0
 800b430:	9309      	str	r3, [sp, #36]	@ 0x24
 800b432:	2320      	movs	r3, #32
 800b434:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b438:	2330      	movs	r3, #48	@ 0x30
 800b43a:	f04f 0901 	mov.w	r9, #1
 800b43e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b442:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800b5dc <_svfiprintf_r+0x1e4>
 800b446:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b44a:	4623      	mov	r3, r4
 800b44c:	469a      	mov	sl, r3
 800b44e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b452:	b10a      	cbz	r2, 800b458 <_svfiprintf_r+0x60>
 800b454:	2a25      	cmp	r2, #37	@ 0x25
 800b456:	d1f9      	bne.n	800b44c <_svfiprintf_r+0x54>
 800b458:	ebba 0b04 	subs.w	fp, sl, r4
 800b45c:	d00b      	beq.n	800b476 <_svfiprintf_r+0x7e>
 800b45e:	465b      	mov	r3, fp
 800b460:	4622      	mov	r2, r4
 800b462:	4629      	mov	r1, r5
 800b464:	4638      	mov	r0, r7
 800b466:	f7ff ff6c 	bl	800b342 <__ssputs_r>
 800b46a:	3001      	adds	r0, #1
 800b46c:	f000 80a7 	beq.w	800b5be <_svfiprintf_r+0x1c6>
 800b470:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b472:	445a      	add	r2, fp
 800b474:	9209      	str	r2, [sp, #36]	@ 0x24
 800b476:	f89a 3000 	ldrb.w	r3, [sl]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	f000 809f 	beq.w	800b5be <_svfiprintf_r+0x1c6>
 800b480:	2300      	movs	r3, #0
 800b482:	f04f 32ff 	mov.w	r2, #4294967295
 800b486:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b48a:	f10a 0a01 	add.w	sl, sl, #1
 800b48e:	9304      	str	r3, [sp, #16]
 800b490:	9307      	str	r3, [sp, #28]
 800b492:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b496:	931a      	str	r3, [sp, #104]	@ 0x68
 800b498:	4654      	mov	r4, sl
 800b49a:	2205      	movs	r2, #5
 800b49c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4a0:	484e      	ldr	r0, [pc, #312]	@ (800b5dc <_svfiprintf_r+0x1e4>)
 800b4a2:	f7fd ff5e 	bl	8009362 <memchr>
 800b4a6:	9a04      	ldr	r2, [sp, #16]
 800b4a8:	b9d8      	cbnz	r0, 800b4e2 <_svfiprintf_r+0xea>
 800b4aa:	06d0      	lsls	r0, r2, #27
 800b4ac:	bf44      	itt	mi
 800b4ae:	2320      	movmi	r3, #32
 800b4b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b4b4:	0711      	lsls	r1, r2, #28
 800b4b6:	bf44      	itt	mi
 800b4b8:	232b      	movmi	r3, #43	@ 0x2b
 800b4ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b4be:	f89a 3000 	ldrb.w	r3, [sl]
 800b4c2:	2b2a      	cmp	r3, #42	@ 0x2a
 800b4c4:	d015      	beq.n	800b4f2 <_svfiprintf_r+0xfa>
 800b4c6:	4654      	mov	r4, sl
 800b4c8:	2000      	movs	r0, #0
 800b4ca:	f04f 0c0a 	mov.w	ip, #10
 800b4ce:	9a07      	ldr	r2, [sp, #28]
 800b4d0:	4621      	mov	r1, r4
 800b4d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4d6:	3b30      	subs	r3, #48	@ 0x30
 800b4d8:	2b09      	cmp	r3, #9
 800b4da:	d94b      	bls.n	800b574 <_svfiprintf_r+0x17c>
 800b4dc:	b1b0      	cbz	r0, 800b50c <_svfiprintf_r+0x114>
 800b4de:	9207      	str	r2, [sp, #28]
 800b4e0:	e014      	b.n	800b50c <_svfiprintf_r+0x114>
 800b4e2:	eba0 0308 	sub.w	r3, r0, r8
 800b4e6:	fa09 f303 	lsl.w	r3, r9, r3
 800b4ea:	4313      	orrs	r3, r2
 800b4ec:	46a2      	mov	sl, r4
 800b4ee:	9304      	str	r3, [sp, #16]
 800b4f0:	e7d2      	b.n	800b498 <_svfiprintf_r+0xa0>
 800b4f2:	9b03      	ldr	r3, [sp, #12]
 800b4f4:	1d19      	adds	r1, r3, #4
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	9103      	str	r1, [sp, #12]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	bfbb      	ittet	lt
 800b4fe:	425b      	neglt	r3, r3
 800b500:	f042 0202 	orrlt.w	r2, r2, #2
 800b504:	9307      	strge	r3, [sp, #28]
 800b506:	9307      	strlt	r3, [sp, #28]
 800b508:	bfb8      	it	lt
 800b50a:	9204      	strlt	r2, [sp, #16]
 800b50c:	7823      	ldrb	r3, [r4, #0]
 800b50e:	2b2e      	cmp	r3, #46	@ 0x2e
 800b510:	d10a      	bne.n	800b528 <_svfiprintf_r+0x130>
 800b512:	7863      	ldrb	r3, [r4, #1]
 800b514:	2b2a      	cmp	r3, #42	@ 0x2a
 800b516:	d132      	bne.n	800b57e <_svfiprintf_r+0x186>
 800b518:	9b03      	ldr	r3, [sp, #12]
 800b51a:	3402      	adds	r4, #2
 800b51c:	1d1a      	adds	r2, r3, #4
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	9203      	str	r2, [sp, #12]
 800b522:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b526:	9305      	str	r3, [sp, #20]
 800b528:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800b5e0 <_svfiprintf_r+0x1e8>
 800b52c:	2203      	movs	r2, #3
 800b52e:	4650      	mov	r0, sl
 800b530:	7821      	ldrb	r1, [r4, #0]
 800b532:	f7fd ff16 	bl	8009362 <memchr>
 800b536:	b138      	cbz	r0, 800b548 <_svfiprintf_r+0x150>
 800b538:	2240      	movs	r2, #64	@ 0x40
 800b53a:	9b04      	ldr	r3, [sp, #16]
 800b53c:	eba0 000a 	sub.w	r0, r0, sl
 800b540:	4082      	lsls	r2, r0
 800b542:	4313      	orrs	r3, r2
 800b544:	3401      	adds	r4, #1
 800b546:	9304      	str	r3, [sp, #16]
 800b548:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b54c:	2206      	movs	r2, #6
 800b54e:	4825      	ldr	r0, [pc, #148]	@ (800b5e4 <_svfiprintf_r+0x1ec>)
 800b550:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b554:	f7fd ff05 	bl	8009362 <memchr>
 800b558:	2800      	cmp	r0, #0
 800b55a:	d036      	beq.n	800b5ca <_svfiprintf_r+0x1d2>
 800b55c:	4b22      	ldr	r3, [pc, #136]	@ (800b5e8 <_svfiprintf_r+0x1f0>)
 800b55e:	bb1b      	cbnz	r3, 800b5a8 <_svfiprintf_r+0x1b0>
 800b560:	9b03      	ldr	r3, [sp, #12]
 800b562:	3307      	adds	r3, #7
 800b564:	f023 0307 	bic.w	r3, r3, #7
 800b568:	3308      	adds	r3, #8
 800b56a:	9303      	str	r3, [sp, #12]
 800b56c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b56e:	4433      	add	r3, r6
 800b570:	9309      	str	r3, [sp, #36]	@ 0x24
 800b572:	e76a      	b.n	800b44a <_svfiprintf_r+0x52>
 800b574:	460c      	mov	r4, r1
 800b576:	2001      	movs	r0, #1
 800b578:	fb0c 3202 	mla	r2, ip, r2, r3
 800b57c:	e7a8      	b.n	800b4d0 <_svfiprintf_r+0xd8>
 800b57e:	2300      	movs	r3, #0
 800b580:	f04f 0c0a 	mov.w	ip, #10
 800b584:	4619      	mov	r1, r3
 800b586:	3401      	adds	r4, #1
 800b588:	9305      	str	r3, [sp, #20]
 800b58a:	4620      	mov	r0, r4
 800b58c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b590:	3a30      	subs	r2, #48	@ 0x30
 800b592:	2a09      	cmp	r2, #9
 800b594:	d903      	bls.n	800b59e <_svfiprintf_r+0x1a6>
 800b596:	2b00      	cmp	r3, #0
 800b598:	d0c6      	beq.n	800b528 <_svfiprintf_r+0x130>
 800b59a:	9105      	str	r1, [sp, #20]
 800b59c:	e7c4      	b.n	800b528 <_svfiprintf_r+0x130>
 800b59e:	4604      	mov	r4, r0
 800b5a0:	2301      	movs	r3, #1
 800b5a2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5a6:	e7f0      	b.n	800b58a <_svfiprintf_r+0x192>
 800b5a8:	ab03      	add	r3, sp, #12
 800b5aa:	9300      	str	r3, [sp, #0]
 800b5ac:	462a      	mov	r2, r5
 800b5ae:	4638      	mov	r0, r7
 800b5b0:	4b0e      	ldr	r3, [pc, #56]	@ (800b5ec <_svfiprintf_r+0x1f4>)
 800b5b2:	a904      	add	r1, sp, #16
 800b5b4:	f7fc fee4 	bl	8008380 <_printf_float>
 800b5b8:	1c42      	adds	r2, r0, #1
 800b5ba:	4606      	mov	r6, r0
 800b5bc:	d1d6      	bne.n	800b56c <_svfiprintf_r+0x174>
 800b5be:	89ab      	ldrh	r3, [r5, #12]
 800b5c0:	065b      	lsls	r3, r3, #25
 800b5c2:	f53f af2d 	bmi.w	800b420 <_svfiprintf_r+0x28>
 800b5c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b5c8:	e72c      	b.n	800b424 <_svfiprintf_r+0x2c>
 800b5ca:	ab03      	add	r3, sp, #12
 800b5cc:	9300      	str	r3, [sp, #0]
 800b5ce:	462a      	mov	r2, r5
 800b5d0:	4638      	mov	r0, r7
 800b5d2:	4b06      	ldr	r3, [pc, #24]	@ (800b5ec <_svfiprintf_r+0x1f4>)
 800b5d4:	a904      	add	r1, sp, #16
 800b5d6:	f7fd f971 	bl	80088bc <_printf_i>
 800b5da:	e7ed      	b.n	800b5b8 <_svfiprintf_r+0x1c0>
 800b5dc:	0800c840 	.word	0x0800c840
 800b5e0:	0800c846 	.word	0x0800c846
 800b5e4:	0800c84a 	.word	0x0800c84a
 800b5e8:	08008381 	.word	0x08008381
 800b5ec:	0800b343 	.word	0x0800b343

0800b5f0 <__sflush_r>:
 800b5f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b5f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5f6:	0716      	lsls	r6, r2, #28
 800b5f8:	4605      	mov	r5, r0
 800b5fa:	460c      	mov	r4, r1
 800b5fc:	d454      	bmi.n	800b6a8 <__sflush_r+0xb8>
 800b5fe:	684b      	ldr	r3, [r1, #4]
 800b600:	2b00      	cmp	r3, #0
 800b602:	dc02      	bgt.n	800b60a <__sflush_r+0x1a>
 800b604:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b606:	2b00      	cmp	r3, #0
 800b608:	dd48      	ble.n	800b69c <__sflush_r+0xac>
 800b60a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b60c:	2e00      	cmp	r6, #0
 800b60e:	d045      	beq.n	800b69c <__sflush_r+0xac>
 800b610:	2300      	movs	r3, #0
 800b612:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b616:	682f      	ldr	r7, [r5, #0]
 800b618:	6a21      	ldr	r1, [r4, #32]
 800b61a:	602b      	str	r3, [r5, #0]
 800b61c:	d030      	beq.n	800b680 <__sflush_r+0x90>
 800b61e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b620:	89a3      	ldrh	r3, [r4, #12]
 800b622:	0759      	lsls	r1, r3, #29
 800b624:	d505      	bpl.n	800b632 <__sflush_r+0x42>
 800b626:	6863      	ldr	r3, [r4, #4]
 800b628:	1ad2      	subs	r2, r2, r3
 800b62a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b62c:	b10b      	cbz	r3, 800b632 <__sflush_r+0x42>
 800b62e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b630:	1ad2      	subs	r2, r2, r3
 800b632:	2300      	movs	r3, #0
 800b634:	4628      	mov	r0, r5
 800b636:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b638:	6a21      	ldr	r1, [r4, #32]
 800b63a:	47b0      	blx	r6
 800b63c:	1c43      	adds	r3, r0, #1
 800b63e:	89a3      	ldrh	r3, [r4, #12]
 800b640:	d106      	bne.n	800b650 <__sflush_r+0x60>
 800b642:	6829      	ldr	r1, [r5, #0]
 800b644:	291d      	cmp	r1, #29
 800b646:	d82b      	bhi.n	800b6a0 <__sflush_r+0xb0>
 800b648:	4a28      	ldr	r2, [pc, #160]	@ (800b6ec <__sflush_r+0xfc>)
 800b64a:	410a      	asrs	r2, r1
 800b64c:	07d6      	lsls	r6, r2, #31
 800b64e:	d427      	bmi.n	800b6a0 <__sflush_r+0xb0>
 800b650:	2200      	movs	r2, #0
 800b652:	6062      	str	r2, [r4, #4]
 800b654:	6922      	ldr	r2, [r4, #16]
 800b656:	04d9      	lsls	r1, r3, #19
 800b658:	6022      	str	r2, [r4, #0]
 800b65a:	d504      	bpl.n	800b666 <__sflush_r+0x76>
 800b65c:	1c42      	adds	r2, r0, #1
 800b65e:	d101      	bne.n	800b664 <__sflush_r+0x74>
 800b660:	682b      	ldr	r3, [r5, #0]
 800b662:	b903      	cbnz	r3, 800b666 <__sflush_r+0x76>
 800b664:	6560      	str	r0, [r4, #84]	@ 0x54
 800b666:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b668:	602f      	str	r7, [r5, #0]
 800b66a:	b1b9      	cbz	r1, 800b69c <__sflush_r+0xac>
 800b66c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b670:	4299      	cmp	r1, r3
 800b672:	d002      	beq.n	800b67a <__sflush_r+0x8a>
 800b674:	4628      	mov	r0, r5
 800b676:	f7fe fceb 	bl	800a050 <_free_r>
 800b67a:	2300      	movs	r3, #0
 800b67c:	6363      	str	r3, [r4, #52]	@ 0x34
 800b67e:	e00d      	b.n	800b69c <__sflush_r+0xac>
 800b680:	2301      	movs	r3, #1
 800b682:	4628      	mov	r0, r5
 800b684:	47b0      	blx	r6
 800b686:	4602      	mov	r2, r0
 800b688:	1c50      	adds	r0, r2, #1
 800b68a:	d1c9      	bne.n	800b620 <__sflush_r+0x30>
 800b68c:	682b      	ldr	r3, [r5, #0]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d0c6      	beq.n	800b620 <__sflush_r+0x30>
 800b692:	2b1d      	cmp	r3, #29
 800b694:	d001      	beq.n	800b69a <__sflush_r+0xaa>
 800b696:	2b16      	cmp	r3, #22
 800b698:	d11d      	bne.n	800b6d6 <__sflush_r+0xe6>
 800b69a:	602f      	str	r7, [r5, #0]
 800b69c:	2000      	movs	r0, #0
 800b69e:	e021      	b.n	800b6e4 <__sflush_r+0xf4>
 800b6a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b6a4:	b21b      	sxth	r3, r3
 800b6a6:	e01a      	b.n	800b6de <__sflush_r+0xee>
 800b6a8:	690f      	ldr	r7, [r1, #16]
 800b6aa:	2f00      	cmp	r7, #0
 800b6ac:	d0f6      	beq.n	800b69c <__sflush_r+0xac>
 800b6ae:	0793      	lsls	r3, r2, #30
 800b6b0:	bf18      	it	ne
 800b6b2:	2300      	movne	r3, #0
 800b6b4:	680e      	ldr	r6, [r1, #0]
 800b6b6:	bf08      	it	eq
 800b6b8:	694b      	ldreq	r3, [r1, #20]
 800b6ba:	1bf6      	subs	r6, r6, r7
 800b6bc:	600f      	str	r7, [r1, #0]
 800b6be:	608b      	str	r3, [r1, #8]
 800b6c0:	2e00      	cmp	r6, #0
 800b6c2:	ddeb      	ble.n	800b69c <__sflush_r+0xac>
 800b6c4:	4633      	mov	r3, r6
 800b6c6:	463a      	mov	r2, r7
 800b6c8:	4628      	mov	r0, r5
 800b6ca:	6a21      	ldr	r1, [r4, #32]
 800b6cc:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800b6d0:	47e0      	blx	ip
 800b6d2:	2800      	cmp	r0, #0
 800b6d4:	dc07      	bgt.n	800b6e6 <__sflush_r+0xf6>
 800b6d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b6de:	f04f 30ff 	mov.w	r0, #4294967295
 800b6e2:	81a3      	strh	r3, [r4, #12]
 800b6e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6e6:	4407      	add	r7, r0
 800b6e8:	1a36      	subs	r6, r6, r0
 800b6ea:	e7e9      	b.n	800b6c0 <__sflush_r+0xd0>
 800b6ec:	dfbffffe 	.word	0xdfbffffe

0800b6f0 <_fflush_r>:
 800b6f0:	b538      	push	{r3, r4, r5, lr}
 800b6f2:	690b      	ldr	r3, [r1, #16]
 800b6f4:	4605      	mov	r5, r0
 800b6f6:	460c      	mov	r4, r1
 800b6f8:	b913      	cbnz	r3, 800b700 <_fflush_r+0x10>
 800b6fa:	2500      	movs	r5, #0
 800b6fc:	4628      	mov	r0, r5
 800b6fe:	bd38      	pop	{r3, r4, r5, pc}
 800b700:	b118      	cbz	r0, 800b70a <_fflush_r+0x1a>
 800b702:	6a03      	ldr	r3, [r0, #32]
 800b704:	b90b      	cbnz	r3, 800b70a <_fflush_r+0x1a>
 800b706:	f7fd fc95 	bl	8009034 <__sinit>
 800b70a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d0f3      	beq.n	800b6fa <_fflush_r+0xa>
 800b712:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b714:	07d0      	lsls	r0, r2, #31
 800b716:	d404      	bmi.n	800b722 <_fflush_r+0x32>
 800b718:	0599      	lsls	r1, r3, #22
 800b71a:	d402      	bmi.n	800b722 <_fflush_r+0x32>
 800b71c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b71e:	f7fd fe16 	bl	800934e <__retarget_lock_acquire_recursive>
 800b722:	4628      	mov	r0, r5
 800b724:	4621      	mov	r1, r4
 800b726:	f7ff ff63 	bl	800b5f0 <__sflush_r>
 800b72a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b72c:	4605      	mov	r5, r0
 800b72e:	07da      	lsls	r2, r3, #31
 800b730:	d4e4      	bmi.n	800b6fc <_fflush_r+0xc>
 800b732:	89a3      	ldrh	r3, [r4, #12]
 800b734:	059b      	lsls	r3, r3, #22
 800b736:	d4e1      	bmi.n	800b6fc <_fflush_r+0xc>
 800b738:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b73a:	f7fd fe09 	bl	8009350 <__retarget_lock_release_recursive>
 800b73e:	e7dd      	b.n	800b6fc <_fflush_r+0xc>

0800b740 <memmove>:
 800b740:	4288      	cmp	r0, r1
 800b742:	b510      	push	{r4, lr}
 800b744:	eb01 0402 	add.w	r4, r1, r2
 800b748:	d902      	bls.n	800b750 <memmove+0x10>
 800b74a:	4284      	cmp	r4, r0
 800b74c:	4623      	mov	r3, r4
 800b74e:	d807      	bhi.n	800b760 <memmove+0x20>
 800b750:	1e43      	subs	r3, r0, #1
 800b752:	42a1      	cmp	r1, r4
 800b754:	d008      	beq.n	800b768 <memmove+0x28>
 800b756:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b75a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b75e:	e7f8      	b.n	800b752 <memmove+0x12>
 800b760:	4601      	mov	r1, r0
 800b762:	4402      	add	r2, r0
 800b764:	428a      	cmp	r2, r1
 800b766:	d100      	bne.n	800b76a <memmove+0x2a>
 800b768:	bd10      	pop	{r4, pc}
 800b76a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b76e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b772:	e7f7      	b.n	800b764 <memmove+0x24>

0800b774 <_sbrk_r>:
 800b774:	b538      	push	{r3, r4, r5, lr}
 800b776:	2300      	movs	r3, #0
 800b778:	4d05      	ldr	r5, [pc, #20]	@ (800b790 <_sbrk_r+0x1c>)
 800b77a:	4604      	mov	r4, r0
 800b77c:	4608      	mov	r0, r1
 800b77e:	602b      	str	r3, [r5, #0]
 800b780:	f7f7 febc 	bl	80034fc <_sbrk>
 800b784:	1c43      	adds	r3, r0, #1
 800b786:	d102      	bne.n	800b78e <_sbrk_r+0x1a>
 800b788:	682b      	ldr	r3, [r5, #0]
 800b78a:	b103      	cbz	r3, 800b78e <_sbrk_r+0x1a>
 800b78c:	6023      	str	r3, [r4, #0]
 800b78e:	bd38      	pop	{r3, r4, r5, pc}
 800b790:	20000aa8 	.word	0x20000aa8

0800b794 <__assert_func>:
 800b794:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b796:	4614      	mov	r4, r2
 800b798:	461a      	mov	r2, r3
 800b79a:	4b09      	ldr	r3, [pc, #36]	@ (800b7c0 <__assert_func+0x2c>)
 800b79c:	4605      	mov	r5, r0
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	68d8      	ldr	r0, [r3, #12]
 800b7a2:	b954      	cbnz	r4, 800b7ba <__assert_func+0x26>
 800b7a4:	4b07      	ldr	r3, [pc, #28]	@ (800b7c4 <__assert_func+0x30>)
 800b7a6:	461c      	mov	r4, r3
 800b7a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b7ac:	9100      	str	r1, [sp, #0]
 800b7ae:	462b      	mov	r3, r5
 800b7b0:	4905      	ldr	r1, [pc, #20]	@ (800b7c8 <__assert_func+0x34>)
 800b7b2:	f000 f84f 	bl	800b854 <fiprintf>
 800b7b6:	f000 f85f 	bl	800b878 <abort>
 800b7ba:	4b04      	ldr	r3, [pc, #16]	@ (800b7cc <__assert_func+0x38>)
 800b7bc:	e7f4      	b.n	800b7a8 <__assert_func+0x14>
 800b7be:	bf00      	nop
 800b7c0:	20000190 	.word	0x20000190
 800b7c4:	0800c88c 	.word	0x0800c88c
 800b7c8:	0800c85e 	.word	0x0800c85e
 800b7cc:	0800c851 	.word	0x0800c851

0800b7d0 <_calloc_r>:
 800b7d0:	b570      	push	{r4, r5, r6, lr}
 800b7d2:	fba1 5402 	umull	r5, r4, r1, r2
 800b7d6:	b93c      	cbnz	r4, 800b7e8 <_calloc_r+0x18>
 800b7d8:	4629      	mov	r1, r5
 800b7da:	f7fe ffe5 	bl	800a7a8 <_malloc_r>
 800b7de:	4606      	mov	r6, r0
 800b7e0:	b928      	cbnz	r0, 800b7ee <_calloc_r+0x1e>
 800b7e2:	2600      	movs	r6, #0
 800b7e4:	4630      	mov	r0, r6
 800b7e6:	bd70      	pop	{r4, r5, r6, pc}
 800b7e8:	220c      	movs	r2, #12
 800b7ea:	6002      	str	r2, [r0, #0]
 800b7ec:	e7f9      	b.n	800b7e2 <_calloc_r+0x12>
 800b7ee:	462a      	mov	r2, r5
 800b7f0:	4621      	mov	r1, r4
 800b7f2:	f7fd fcf1 	bl	80091d8 <memset>
 800b7f6:	e7f5      	b.n	800b7e4 <_calloc_r+0x14>

0800b7f8 <_realloc_r>:
 800b7f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7fc:	4680      	mov	r8, r0
 800b7fe:	4615      	mov	r5, r2
 800b800:	460c      	mov	r4, r1
 800b802:	b921      	cbnz	r1, 800b80e <_realloc_r+0x16>
 800b804:	4611      	mov	r1, r2
 800b806:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b80a:	f7fe bfcd 	b.w	800a7a8 <_malloc_r>
 800b80e:	b92a      	cbnz	r2, 800b81c <_realloc_r+0x24>
 800b810:	f7fe fc1e 	bl	800a050 <_free_r>
 800b814:	2400      	movs	r4, #0
 800b816:	4620      	mov	r0, r4
 800b818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b81c:	f000 f833 	bl	800b886 <_malloc_usable_size_r>
 800b820:	4285      	cmp	r5, r0
 800b822:	4606      	mov	r6, r0
 800b824:	d802      	bhi.n	800b82c <_realloc_r+0x34>
 800b826:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b82a:	d8f4      	bhi.n	800b816 <_realloc_r+0x1e>
 800b82c:	4629      	mov	r1, r5
 800b82e:	4640      	mov	r0, r8
 800b830:	f7fe ffba 	bl	800a7a8 <_malloc_r>
 800b834:	4607      	mov	r7, r0
 800b836:	2800      	cmp	r0, #0
 800b838:	d0ec      	beq.n	800b814 <_realloc_r+0x1c>
 800b83a:	42b5      	cmp	r5, r6
 800b83c:	462a      	mov	r2, r5
 800b83e:	4621      	mov	r1, r4
 800b840:	bf28      	it	cs
 800b842:	4632      	movcs	r2, r6
 800b844:	f7fd fd9b 	bl	800937e <memcpy>
 800b848:	4621      	mov	r1, r4
 800b84a:	4640      	mov	r0, r8
 800b84c:	f7fe fc00 	bl	800a050 <_free_r>
 800b850:	463c      	mov	r4, r7
 800b852:	e7e0      	b.n	800b816 <_realloc_r+0x1e>

0800b854 <fiprintf>:
 800b854:	b40e      	push	{r1, r2, r3}
 800b856:	b503      	push	{r0, r1, lr}
 800b858:	4601      	mov	r1, r0
 800b85a:	ab03      	add	r3, sp, #12
 800b85c:	4805      	ldr	r0, [pc, #20]	@ (800b874 <fiprintf+0x20>)
 800b85e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b862:	6800      	ldr	r0, [r0, #0]
 800b864:	9301      	str	r3, [sp, #4]
 800b866:	f000 f83d 	bl	800b8e4 <_vfiprintf_r>
 800b86a:	b002      	add	sp, #8
 800b86c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b870:	b003      	add	sp, #12
 800b872:	4770      	bx	lr
 800b874:	20000190 	.word	0x20000190

0800b878 <abort>:
 800b878:	2006      	movs	r0, #6
 800b87a:	b508      	push	{r3, lr}
 800b87c:	f000 fa06 	bl	800bc8c <raise>
 800b880:	2001      	movs	r0, #1
 800b882:	f7f7 fdc6 	bl	8003412 <_exit>

0800b886 <_malloc_usable_size_r>:
 800b886:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b88a:	1f18      	subs	r0, r3, #4
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	bfbc      	itt	lt
 800b890:	580b      	ldrlt	r3, [r1, r0]
 800b892:	18c0      	addlt	r0, r0, r3
 800b894:	4770      	bx	lr

0800b896 <__sfputc_r>:
 800b896:	6893      	ldr	r3, [r2, #8]
 800b898:	b410      	push	{r4}
 800b89a:	3b01      	subs	r3, #1
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	6093      	str	r3, [r2, #8]
 800b8a0:	da07      	bge.n	800b8b2 <__sfputc_r+0x1c>
 800b8a2:	6994      	ldr	r4, [r2, #24]
 800b8a4:	42a3      	cmp	r3, r4
 800b8a6:	db01      	blt.n	800b8ac <__sfputc_r+0x16>
 800b8a8:	290a      	cmp	r1, #10
 800b8aa:	d102      	bne.n	800b8b2 <__sfputc_r+0x1c>
 800b8ac:	bc10      	pop	{r4}
 800b8ae:	f000 b931 	b.w	800bb14 <__swbuf_r>
 800b8b2:	6813      	ldr	r3, [r2, #0]
 800b8b4:	1c58      	adds	r0, r3, #1
 800b8b6:	6010      	str	r0, [r2, #0]
 800b8b8:	7019      	strb	r1, [r3, #0]
 800b8ba:	4608      	mov	r0, r1
 800b8bc:	bc10      	pop	{r4}
 800b8be:	4770      	bx	lr

0800b8c0 <__sfputs_r>:
 800b8c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8c2:	4606      	mov	r6, r0
 800b8c4:	460f      	mov	r7, r1
 800b8c6:	4614      	mov	r4, r2
 800b8c8:	18d5      	adds	r5, r2, r3
 800b8ca:	42ac      	cmp	r4, r5
 800b8cc:	d101      	bne.n	800b8d2 <__sfputs_r+0x12>
 800b8ce:	2000      	movs	r0, #0
 800b8d0:	e007      	b.n	800b8e2 <__sfputs_r+0x22>
 800b8d2:	463a      	mov	r2, r7
 800b8d4:	4630      	mov	r0, r6
 800b8d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8da:	f7ff ffdc 	bl	800b896 <__sfputc_r>
 800b8de:	1c43      	adds	r3, r0, #1
 800b8e0:	d1f3      	bne.n	800b8ca <__sfputs_r+0xa>
 800b8e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b8e4 <_vfiprintf_r>:
 800b8e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8e8:	460d      	mov	r5, r1
 800b8ea:	4614      	mov	r4, r2
 800b8ec:	4698      	mov	r8, r3
 800b8ee:	4606      	mov	r6, r0
 800b8f0:	b09d      	sub	sp, #116	@ 0x74
 800b8f2:	b118      	cbz	r0, 800b8fc <_vfiprintf_r+0x18>
 800b8f4:	6a03      	ldr	r3, [r0, #32]
 800b8f6:	b90b      	cbnz	r3, 800b8fc <_vfiprintf_r+0x18>
 800b8f8:	f7fd fb9c 	bl	8009034 <__sinit>
 800b8fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b8fe:	07d9      	lsls	r1, r3, #31
 800b900:	d405      	bmi.n	800b90e <_vfiprintf_r+0x2a>
 800b902:	89ab      	ldrh	r3, [r5, #12]
 800b904:	059a      	lsls	r2, r3, #22
 800b906:	d402      	bmi.n	800b90e <_vfiprintf_r+0x2a>
 800b908:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b90a:	f7fd fd20 	bl	800934e <__retarget_lock_acquire_recursive>
 800b90e:	89ab      	ldrh	r3, [r5, #12]
 800b910:	071b      	lsls	r3, r3, #28
 800b912:	d501      	bpl.n	800b918 <_vfiprintf_r+0x34>
 800b914:	692b      	ldr	r3, [r5, #16]
 800b916:	b99b      	cbnz	r3, 800b940 <_vfiprintf_r+0x5c>
 800b918:	4629      	mov	r1, r5
 800b91a:	4630      	mov	r0, r6
 800b91c:	f000 f938 	bl	800bb90 <__swsetup_r>
 800b920:	b170      	cbz	r0, 800b940 <_vfiprintf_r+0x5c>
 800b922:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b924:	07dc      	lsls	r4, r3, #31
 800b926:	d504      	bpl.n	800b932 <_vfiprintf_r+0x4e>
 800b928:	f04f 30ff 	mov.w	r0, #4294967295
 800b92c:	b01d      	add	sp, #116	@ 0x74
 800b92e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b932:	89ab      	ldrh	r3, [r5, #12]
 800b934:	0598      	lsls	r0, r3, #22
 800b936:	d4f7      	bmi.n	800b928 <_vfiprintf_r+0x44>
 800b938:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b93a:	f7fd fd09 	bl	8009350 <__retarget_lock_release_recursive>
 800b93e:	e7f3      	b.n	800b928 <_vfiprintf_r+0x44>
 800b940:	2300      	movs	r3, #0
 800b942:	9309      	str	r3, [sp, #36]	@ 0x24
 800b944:	2320      	movs	r3, #32
 800b946:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b94a:	2330      	movs	r3, #48	@ 0x30
 800b94c:	f04f 0901 	mov.w	r9, #1
 800b950:	f8cd 800c 	str.w	r8, [sp, #12]
 800b954:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800bb00 <_vfiprintf_r+0x21c>
 800b958:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b95c:	4623      	mov	r3, r4
 800b95e:	469a      	mov	sl, r3
 800b960:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b964:	b10a      	cbz	r2, 800b96a <_vfiprintf_r+0x86>
 800b966:	2a25      	cmp	r2, #37	@ 0x25
 800b968:	d1f9      	bne.n	800b95e <_vfiprintf_r+0x7a>
 800b96a:	ebba 0b04 	subs.w	fp, sl, r4
 800b96e:	d00b      	beq.n	800b988 <_vfiprintf_r+0xa4>
 800b970:	465b      	mov	r3, fp
 800b972:	4622      	mov	r2, r4
 800b974:	4629      	mov	r1, r5
 800b976:	4630      	mov	r0, r6
 800b978:	f7ff ffa2 	bl	800b8c0 <__sfputs_r>
 800b97c:	3001      	adds	r0, #1
 800b97e:	f000 80a7 	beq.w	800bad0 <_vfiprintf_r+0x1ec>
 800b982:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b984:	445a      	add	r2, fp
 800b986:	9209      	str	r2, [sp, #36]	@ 0x24
 800b988:	f89a 3000 	ldrb.w	r3, [sl]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	f000 809f 	beq.w	800bad0 <_vfiprintf_r+0x1ec>
 800b992:	2300      	movs	r3, #0
 800b994:	f04f 32ff 	mov.w	r2, #4294967295
 800b998:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b99c:	f10a 0a01 	add.w	sl, sl, #1
 800b9a0:	9304      	str	r3, [sp, #16]
 800b9a2:	9307      	str	r3, [sp, #28]
 800b9a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b9a8:	931a      	str	r3, [sp, #104]	@ 0x68
 800b9aa:	4654      	mov	r4, sl
 800b9ac:	2205      	movs	r2, #5
 800b9ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9b2:	4853      	ldr	r0, [pc, #332]	@ (800bb00 <_vfiprintf_r+0x21c>)
 800b9b4:	f7fd fcd5 	bl	8009362 <memchr>
 800b9b8:	9a04      	ldr	r2, [sp, #16]
 800b9ba:	b9d8      	cbnz	r0, 800b9f4 <_vfiprintf_r+0x110>
 800b9bc:	06d1      	lsls	r1, r2, #27
 800b9be:	bf44      	itt	mi
 800b9c0:	2320      	movmi	r3, #32
 800b9c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b9c6:	0713      	lsls	r3, r2, #28
 800b9c8:	bf44      	itt	mi
 800b9ca:	232b      	movmi	r3, #43	@ 0x2b
 800b9cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b9d0:	f89a 3000 	ldrb.w	r3, [sl]
 800b9d4:	2b2a      	cmp	r3, #42	@ 0x2a
 800b9d6:	d015      	beq.n	800ba04 <_vfiprintf_r+0x120>
 800b9d8:	4654      	mov	r4, sl
 800b9da:	2000      	movs	r0, #0
 800b9dc:	f04f 0c0a 	mov.w	ip, #10
 800b9e0:	9a07      	ldr	r2, [sp, #28]
 800b9e2:	4621      	mov	r1, r4
 800b9e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b9e8:	3b30      	subs	r3, #48	@ 0x30
 800b9ea:	2b09      	cmp	r3, #9
 800b9ec:	d94b      	bls.n	800ba86 <_vfiprintf_r+0x1a2>
 800b9ee:	b1b0      	cbz	r0, 800ba1e <_vfiprintf_r+0x13a>
 800b9f0:	9207      	str	r2, [sp, #28]
 800b9f2:	e014      	b.n	800ba1e <_vfiprintf_r+0x13a>
 800b9f4:	eba0 0308 	sub.w	r3, r0, r8
 800b9f8:	fa09 f303 	lsl.w	r3, r9, r3
 800b9fc:	4313      	orrs	r3, r2
 800b9fe:	46a2      	mov	sl, r4
 800ba00:	9304      	str	r3, [sp, #16]
 800ba02:	e7d2      	b.n	800b9aa <_vfiprintf_r+0xc6>
 800ba04:	9b03      	ldr	r3, [sp, #12]
 800ba06:	1d19      	adds	r1, r3, #4
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	9103      	str	r1, [sp, #12]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	bfbb      	ittet	lt
 800ba10:	425b      	neglt	r3, r3
 800ba12:	f042 0202 	orrlt.w	r2, r2, #2
 800ba16:	9307      	strge	r3, [sp, #28]
 800ba18:	9307      	strlt	r3, [sp, #28]
 800ba1a:	bfb8      	it	lt
 800ba1c:	9204      	strlt	r2, [sp, #16]
 800ba1e:	7823      	ldrb	r3, [r4, #0]
 800ba20:	2b2e      	cmp	r3, #46	@ 0x2e
 800ba22:	d10a      	bne.n	800ba3a <_vfiprintf_r+0x156>
 800ba24:	7863      	ldrb	r3, [r4, #1]
 800ba26:	2b2a      	cmp	r3, #42	@ 0x2a
 800ba28:	d132      	bne.n	800ba90 <_vfiprintf_r+0x1ac>
 800ba2a:	9b03      	ldr	r3, [sp, #12]
 800ba2c:	3402      	adds	r4, #2
 800ba2e:	1d1a      	adds	r2, r3, #4
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	9203      	str	r2, [sp, #12]
 800ba34:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ba38:	9305      	str	r3, [sp, #20]
 800ba3a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800bb04 <_vfiprintf_r+0x220>
 800ba3e:	2203      	movs	r2, #3
 800ba40:	4650      	mov	r0, sl
 800ba42:	7821      	ldrb	r1, [r4, #0]
 800ba44:	f7fd fc8d 	bl	8009362 <memchr>
 800ba48:	b138      	cbz	r0, 800ba5a <_vfiprintf_r+0x176>
 800ba4a:	2240      	movs	r2, #64	@ 0x40
 800ba4c:	9b04      	ldr	r3, [sp, #16]
 800ba4e:	eba0 000a 	sub.w	r0, r0, sl
 800ba52:	4082      	lsls	r2, r0
 800ba54:	4313      	orrs	r3, r2
 800ba56:	3401      	adds	r4, #1
 800ba58:	9304      	str	r3, [sp, #16]
 800ba5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba5e:	2206      	movs	r2, #6
 800ba60:	4829      	ldr	r0, [pc, #164]	@ (800bb08 <_vfiprintf_r+0x224>)
 800ba62:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ba66:	f7fd fc7c 	bl	8009362 <memchr>
 800ba6a:	2800      	cmp	r0, #0
 800ba6c:	d03f      	beq.n	800baee <_vfiprintf_r+0x20a>
 800ba6e:	4b27      	ldr	r3, [pc, #156]	@ (800bb0c <_vfiprintf_r+0x228>)
 800ba70:	bb1b      	cbnz	r3, 800baba <_vfiprintf_r+0x1d6>
 800ba72:	9b03      	ldr	r3, [sp, #12]
 800ba74:	3307      	adds	r3, #7
 800ba76:	f023 0307 	bic.w	r3, r3, #7
 800ba7a:	3308      	adds	r3, #8
 800ba7c:	9303      	str	r3, [sp, #12]
 800ba7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba80:	443b      	add	r3, r7
 800ba82:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba84:	e76a      	b.n	800b95c <_vfiprintf_r+0x78>
 800ba86:	460c      	mov	r4, r1
 800ba88:	2001      	movs	r0, #1
 800ba8a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba8e:	e7a8      	b.n	800b9e2 <_vfiprintf_r+0xfe>
 800ba90:	2300      	movs	r3, #0
 800ba92:	f04f 0c0a 	mov.w	ip, #10
 800ba96:	4619      	mov	r1, r3
 800ba98:	3401      	adds	r4, #1
 800ba9a:	9305      	str	r3, [sp, #20]
 800ba9c:	4620      	mov	r0, r4
 800ba9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800baa2:	3a30      	subs	r2, #48	@ 0x30
 800baa4:	2a09      	cmp	r2, #9
 800baa6:	d903      	bls.n	800bab0 <_vfiprintf_r+0x1cc>
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d0c6      	beq.n	800ba3a <_vfiprintf_r+0x156>
 800baac:	9105      	str	r1, [sp, #20]
 800baae:	e7c4      	b.n	800ba3a <_vfiprintf_r+0x156>
 800bab0:	4604      	mov	r4, r0
 800bab2:	2301      	movs	r3, #1
 800bab4:	fb0c 2101 	mla	r1, ip, r1, r2
 800bab8:	e7f0      	b.n	800ba9c <_vfiprintf_r+0x1b8>
 800baba:	ab03      	add	r3, sp, #12
 800babc:	9300      	str	r3, [sp, #0]
 800babe:	462a      	mov	r2, r5
 800bac0:	4630      	mov	r0, r6
 800bac2:	4b13      	ldr	r3, [pc, #76]	@ (800bb10 <_vfiprintf_r+0x22c>)
 800bac4:	a904      	add	r1, sp, #16
 800bac6:	f7fc fc5b 	bl	8008380 <_printf_float>
 800baca:	4607      	mov	r7, r0
 800bacc:	1c78      	adds	r0, r7, #1
 800bace:	d1d6      	bne.n	800ba7e <_vfiprintf_r+0x19a>
 800bad0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bad2:	07d9      	lsls	r1, r3, #31
 800bad4:	d405      	bmi.n	800bae2 <_vfiprintf_r+0x1fe>
 800bad6:	89ab      	ldrh	r3, [r5, #12]
 800bad8:	059a      	lsls	r2, r3, #22
 800bada:	d402      	bmi.n	800bae2 <_vfiprintf_r+0x1fe>
 800badc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bade:	f7fd fc37 	bl	8009350 <__retarget_lock_release_recursive>
 800bae2:	89ab      	ldrh	r3, [r5, #12]
 800bae4:	065b      	lsls	r3, r3, #25
 800bae6:	f53f af1f 	bmi.w	800b928 <_vfiprintf_r+0x44>
 800baea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800baec:	e71e      	b.n	800b92c <_vfiprintf_r+0x48>
 800baee:	ab03      	add	r3, sp, #12
 800baf0:	9300      	str	r3, [sp, #0]
 800baf2:	462a      	mov	r2, r5
 800baf4:	4630      	mov	r0, r6
 800baf6:	4b06      	ldr	r3, [pc, #24]	@ (800bb10 <_vfiprintf_r+0x22c>)
 800baf8:	a904      	add	r1, sp, #16
 800bafa:	f7fc fedf 	bl	80088bc <_printf_i>
 800bafe:	e7e4      	b.n	800baca <_vfiprintf_r+0x1e6>
 800bb00:	0800c840 	.word	0x0800c840
 800bb04:	0800c846 	.word	0x0800c846
 800bb08:	0800c84a 	.word	0x0800c84a
 800bb0c:	08008381 	.word	0x08008381
 800bb10:	0800b8c1 	.word	0x0800b8c1

0800bb14 <__swbuf_r>:
 800bb14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb16:	460e      	mov	r6, r1
 800bb18:	4614      	mov	r4, r2
 800bb1a:	4605      	mov	r5, r0
 800bb1c:	b118      	cbz	r0, 800bb26 <__swbuf_r+0x12>
 800bb1e:	6a03      	ldr	r3, [r0, #32]
 800bb20:	b90b      	cbnz	r3, 800bb26 <__swbuf_r+0x12>
 800bb22:	f7fd fa87 	bl	8009034 <__sinit>
 800bb26:	69a3      	ldr	r3, [r4, #24]
 800bb28:	60a3      	str	r3, [r4, #8]
 800bb2a:	89a3      	ldrh	r3, [r4, #12]
 800bb2c:	071a      	lsls	r2, r3, #28
 800bb2e:	d501      	bpl.n	800bb34 <__swbuf_r+0x20>
 800bb30:	6923      	ldr	r3, [r4, #16]
 800bb32:	b943      	cbnz	r3, 800bb46 <__swbuf_r+0x32>
 800bb34:	4621      	mov	r1, r4
 800bb36:	4628      	mov	r0, r5
 800bb38:	f000 f82a 	bl	800bb90 <__swsetup_r>
 800bb3c:	b118      	cbz	r0, 800bb46 <__swbuf_r+0x32>
 800bb3e:	f04f 37ff 	mov.w	r7, #4294967295
 800bb42:	4638      	mov	r0, r7
 800bb44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb46:	6823      	ldr	r3, [r4, #0]
 800bb48:	6922      	ldr	r2, [r4, #16]
 800bb4a:	b2f6      	uxtb	r6, r6
 800bb4c:	1a98      	subs	r0, r3, r2
 800bb4e:	6963      	ldr	r3, [r4, #20]
 800bb50:	4637      	mov	r7, r6
 800bb52:	4283      	cmp	r3, r0
 800bb54:	dc05      	bgt.n	800bb62 <__swbuf_r+0x4e>
 800bb56:	4621      	mov	r1, r4
 800bb58:	4628      	mov	r0, r5
 800bb5a:	f7ff fdc9 	bl	800b6f0 <_fflush_r>
 800bb5e:	2800      	cmp	r0, #0
 800bb60:	d1ed      	bne.n	800bb3e <__swbuf_r+0x2a>
 800bb62:	68a3      	ldr	r3, [r4, #8]
 800bb64:	3b01      	subs	r3, #1
 800bb66:	60a3      	str	r3, [r4, #8]
 800bb68:	6823      	ldr	r3, [r4, #0]
 800bb6a:	1c5a      	adds	r2, r3, #1
 800bb6c:	6022      	str	r2, [r4, #0]
 800bb6e:	701e      	strb	r6, [r3, #0]
 800bb70:	6962      	ldr	r2, [r4, #20]
 800bb72:	1c43      	adds	r3, r0, #1
 800bb74:	429a      	cmp	r2, r3
 800bb76:	d004      	beq.n	800bb82 <__swbuf_r+0x6e>
 800bb78:	89a3      	ldrh	r3, [r4, #12]
 800bb7a:	07db      	lsls	r3, r3, #31
 800bb7c:	d5e1      	bpl.n	800bb42 <__swbuf_r+0x2e>
 800bb7e:	2e0a      	cmp	r6, #10
 800bb80:	d1df      	bne.n	800bb42 <__swbuf_r+0x2e>
 800bb82:	4621      	mov	r1, r4
 800bb84:	4628      	mov	r0, r5
 800bb86:	f7ff fdb3 	bl	800b6f0 <_fflush_r>
 800bb8a:	2800      	cmp	r0, #0
 800bb8c:	d0d9      	beq.n	800bb42 <__swbuf_r+0x2e>
 800bb8e:	e7d6      	b.n	800bb3e <__swbuf_r+0x2a>

0800bb90 <__swsetup_r>:
 800bb90:	b538      	push	{r3, r4, r5, lr}
 800bb92:	4b29      	ldr	r3, [pc, #164]	@ (800bc38 <__swsetup_r+0xa8>)
 800bb94:	4605      	mov	r5, r0
 800bb96:	6818      	ldr	r0, [r3, #0]
 800bb98:	460c      	mov	r4, r1
 800bb9a:	b118      	cbz	r0, 800bba4 <__swsetup_r+0x14>
 800bb9c:	6a03      	ldr	r3, [r0, #32]
 800bb9e:	b90b      	cbnz	r3, 800bba4 <__swsetup_r+0x14>
 800bba0:	f7fd fa48 	bl	8009034 <__sinit>
 800bba4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bba8:	0719      	lsls	r1, r3, #28
 800bbaa:	d422      	bmi.n	800bbf2 <__swsetup_r+0x62>
 800bbac:	06da      	lsls	r2, r3, #27
 800bbae:	d407      	bmi.n	800bbc0 <__swsetup_r+0x30>
 800bbb0:	2209      	movs	r2, #9
 800bbb2:	602a      	str	r2, [r5, #0]
 800bbb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bbb8:	f04f 30ff 	mov.w	r0, #4294967295
 800bbbc:	81a3      	strh	r3, [r4, #12]
 800bbbe:	e033      	b.n	800bc28 <__swsetup_r+0x98>
 800bbc0:	0758      	lsls	r0, r3, #29
 800bbc2:	d512      	bpl.n	800bbea <__swsetup_r+0x5a>
 800bbc4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bbc6:	b141      	cbz	r1, 800bbda <__swsetup_r+0x4a>
 800bbc8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bbcc:	4299      	cmp	r1, r3
 800bbce:	d002      	beq.n	800bbd6 <__swsetup_r+0x46>
 800bbd0:	4628      	mov	r0, r5
 800bbd2:	f7fe fa3d 	bl	800a050 <_free_r>
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	6363      	str	r3, [r4, #52]	@ 0x34
 800bbda:	89a3      	ldrh	r3, [r4, #12]
 800bbdc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bbe0:	81a3      	strh	r3, [r4, #12]
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	6063      	str	r3, [r4, #4]
 800bbe6:	6923      	ldr	r3, [r4, #16]
 800bbe8:	6023      	str	r3, [r4, #0]
 800bbea:	89a3      	ldrh	r3, [r4, #12]
 800bbec:	f043 0308 	orr.w	r3, r3, #8
 800bbf0:	81a3      	strh	r3, [r4, #12]
 800bbf2:	6923      	ldr	r3, [r4, #16]
 800bbf4:	b94b      	cbnz	r3, 800bc0a <__swsetup_r+0x7a>
 800bbf6:	89a3      	ldrh	r3, [r4, #12]
 800bbf8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bbfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bc00:	d003      	beq.n	800bc0a <__swsetup_r+0x7a>
 800bc02:	4621      	mov	r1, r4
 800bc04:	4628      	mov	r0, r5
 800bc06:	f000 f882 	bl	800bd0e <__smakebuf_r>
 800bc0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc0e:	f013 0201 	ands.w	r2, r3, #1
 800bc12:	d00a      	beq.n	800bc2a <__swsetup_r+0x9a>
 800bc14:	2200      	movs	r2, #0
 800bc16:	60a2      	str	r2, [r4, #8]
 800bc18:	6962      	ldr	r2, [r4, #20]
 800bc1a:	4252      	negs	r2, r2
 800bc1c:	61a2      	str	r2, [r4, #24]
 800bc1e:	6922      	ldr	r2, [r4, #16]
 800bc20:	b942      	cbnz	r2, 800bc34 <__swsetup_r+0xa4>
 800bc22:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bc26:	d1c5      	bne.n	800bbb4 <__swsetup_r+0x24>
 800bc28:	bd38      	pop	{r3, r4, r5, pc}
 800bc2a:	0799      	lsls	r1, r3, #30
 800bc2c:	bf58      	it	pl
 800bc2e:	6962      	ldrpl	r2, [r4, #20]
 800bc30:	60a2      	str	r2, [r4, #8]
 800bc32:	e7f4      	b.n	800bc1e <__swsetup_r+0x8e>
 800bc34:	2000      	movs	r0, #0
 800bc36:	e7f7      	b.n	800bc28 <__swsetup_r+0x98>
 800bc38:	20000190 	.word	0x20000190

0800bc3c <_raise_r>:
 800bc3c:	291f      	cmp	r1, #31
 800bc3e:	b538      	push	{r3, r4, r5, lr}
 800bc40:	4605      	mov	r5, r0
 800bc42:	460c      	mov	r4, r1
 800bc44:	d904      	bls.n	800bc50 <_raise_r+0x14>
 800bc46:	2316      	movs	r3, #22
 800bc48:	6003      	str	r3, [r0, #0]
 800bc4a:	f04f 30ff 	mov.w	r0, #4294967295
 800bc4e:	bd38      	pop	{r3, r4, r5, pc}
 800bc50:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bc52:	b112      	cbz	r2, 800bc5a <_raise_r+0x1e>
 800bc54:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bc58:	b94b      	cbnz	r3, 800bc6e <_raise_r+0x32>
 800bc5a:	4628      	mov	r0, r5
 800bc5c:	f000 f830 	bl	800bcc0 <_getpid_r>
 800bc60:	4622      	mov	r2, r4
 800bc62:	4601      	mov	r1, r0
 800bc64:	4628      	mov	r0, r5
 800bc66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc6a:	f000 b817 	b.w	800bc9c <_kill_r>
 800bc6e:	2b01      	cmp	r3, #1
 800bc70:	d00a      	beq.n	800bc88 <_raise_r+0x4c>
 800bc72:	1c59      	adds	r1, r3, #1
 800bc74:	d103      	bne.n	800bc7e <_raise_r+0x42>
 800bc76:	2316      	movs	r3, #22
 800bc78:	6003      	str	r3, [r0, #0]
 800bc7a:	2001      	movs	r0, #1
 800bc7c:	e7e7      	b.n	800bc4e <_raise_r+0x12>
 800bc7e:	2100      	movs	r1, #0
 800bc80:	4620      	mov	r0, r4
 800bc82:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bc86:	4798      	blx	r3
 800bc88:	2000      	movs	r0, #0
 800bc8a:	e7e0      	b.n	800bc4e <_raise_r+0x12>

0800bc8c <raise>:
 800bc8c:	4b02      	ldr	r3, [pc, #8]	@ (800bc98 <raise+0xc>)
 800bc8e:	4601      	mov	r1, r0
 800bc90:	6818      	ldr	r0, [r3, #0]
 800bc92:	f7ff bfd3 	b.w	800bc3c <_raise_r>
 800bc96:	bf00      	nop
 800bc98:	20000190 	.word	0x20000190

0800bc9c <_kill_r>:
 800bc9c:	b538      	push	{r3, r4, r5, lr}
 800bc9e:	2300      	movs	r3, #0
 800bca0:	4d06      	ldr	r5, [pc, #24]	@ (800bcbc <_kill_r+0x20>)
 800bca2:	4604      	mov	r4, r0
 800bca4:	4608      	mov	r0, r1
 800bca6:	4611      	mov	r1, r2
 800bca8:	602b      	str	r3, [r5, #0]
 800bcaa:	f7f7 fba2 	bl	80033f2 <_kill>
 800bcae:	1c43      	adds	r3, r0, #1
 800bcb0:	d102      	bne.n	800bcb8 <_kill_r+0x1c>
 800bcb2:	682b      	ldr	r3, [r5, #0]
 800bcb4:	b103      	cbz	r3, 800bcb8 <_kill_r+0x1c>
 800bcb6:	6023      	str	r3, [r4, #0]
 800bcb8:	bd38      	pop	{r3, r4, r5, pc}
 800bcba:	bf00      	nop
 800bcbc:	20000aa8 	.word	0x20000aa8

0800bcc0 <_getpid_r>:
 800bcc0:	f7f7 bb90 	b.w	80033e4 <_getpid>

0800bcc4 <__swhatbuf_r>:
 800bcc4:	b570      	push	{r4, r5, r6, lr}
 800bcc6:	460c      	mov	r4, r1
 800bcc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bccc:	4615      	mov	r5, r2
 800bcce:	2900      	cmp	r1, #0
 800bcd0:	461e      	mov	r6, r3
 800bcd2:	b096      	sub	sp, #88	@ 0x58
 800bcd4:	da0c      	bge.n	800bcf0 <__swhatbuf_r+0x2c>
 800bcd6:	89a3      	ldrh	r3, [r4, #12]
 800bcd8:	2100      	movs	r1, #0
 800bcda:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bcde:	bf14      	ite	ne
 800bce0:	2340      	movne	r3, #64	@ 0x40
 800bce2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bce6:	2000      	movs	r0, #0
 800bce8:	6031      	str	r1, [r6, #0]
 800bcea:	602b      	str	r3, [r5, #0]
 800bcec:	b016      	add	sp, #88	@ 0x58
 800bcee:	bd70      	pop	{r4, r5, r6, pc}
 800bcf0:	466a      	mov	r2, sp
 800bcf2:	f000 f849 	bl	800bd88 <_fstat_r>
 800bcf6:	2800      	cmp	r0, #0
 800bcf8:	dbed      	blt.n	800bcd6 <__swhatbuf_r+0x12>
 800bcfa:	9901      	ldr	r1, [sp, #4]
 800bcfc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bd00:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bd04:	4259      	negs	r1, r3
 800bd06:	4159      	adcs	r1, r3
 800bd08:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bd0c:	e7eb      	b.n	800bce6 <__swhatbuf_r+0x22>

0800bd0e <__smakebuf_r>:
 800bd0e:	898b      	ldrh	r3, [r1, #12]
 800bd10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bd12:	079d      	lsls	r5, r3, #30
 800bd14:	4606      	mov	r6, r0
 800bd16:	460c      	mov	r4, r1
 800bd18:	d507      	bpl.n	800bd2a <__smakebuf_r+0x1c>
 800bd1a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bd1e:	6023      	str	r3, [r4, #0]
 800bd20:	6123      	str	r3, [r4, #16]
 800bd22:	2301      	movs	r3, #1
 800bd24:	6163      	str	r3, [r4, #20]
 800bd26:	b003      	add	sp, #12
 800bd28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd2a:	466a      	mov	r2, sp
 800bd2c:	ab01      	add	r3, sp, #4
 800bd2e:	f7ff ffc9 	bl	800bcc4 <__swhatbuf_r>
 800bd32:	9f00      	ldr	r7, [sp, #0]
 800bd34:	4605      	mov	r5, r0
 800bd36:	4639      	mov	r1, r7
 800bd38:	4630      	mov	r0, r6
 800bd3a:	f7fe fd35 	bl	800a7a8 <_malloc_r>
 800bd3e:	b948      	cbnz	r0, 800bd54 <__smakebuf_r+0x46>
 800bd40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd44:	059a      	lsls	r2, r3, #22
 800bd46:	d4ee      	bmi.n	800bd26 <__smakebuf_r+0x18>
 800bd48:	f023 0303 	bic.w	r3, r3, #3
 800bd4c:	f043 0302 	orr.w	r3, r3, #2
 800bd50:	81a3      	strh	r3, [r4, #12]
 800bd52:	e7e2      	b.n	800bd1a <__smakebuf_r+0xc>
 800bd54:	89a3      	ldrh	r3, [r4, #12]
 800bd56:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bd5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bd5e:	81a3      	strh	r3, [r4, #12]
 800bd60:	9b01      	ldr	r3, [sp, #4]
 800bd62:	6020      	str	r0, [r4, #0]
 800bd64:	b15b      	cbz	r3, 800bd7e <__smakebuf_r+0x70>
 800bd66:	4630      	mov	r0, r6
 800bd68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd6c:	f000 f81e 	bl	800bdac <_isatty_r>
 800bd70:	b128      	cbz	r0, 800bd7e <__smakebuf_r+0x70>
 800bd72:	89a3      	ldrh	r3, [r4, #12]
 800bd74:	f023 0303 	bic.w	r3, r3, #3
 800bd78:	f043 0301 	orr.w	r3, r3, #1
 800bd7c:	81a3      	strh	r3, [r4, #12]
 800bd7e:	89a3      	ldrh	r3, [r4, #12]
 800bd80:	431d      	orrs	r5, r3
 800bd82:	81a5      	strh	r5, [r4, #12]
 800bd84:	e7cf      	b.n	800bd26 <__smakebuf_r+0x18>
	...

0800bd88 <_fstat_r>:
 800bd88:	b538      	push	{r3, r4, r5, lr}
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	4d06      	ldr	r5, [pc, #24]	@ (800bda8 <_fstat_r+0x20>)
 800bd8e:	4604      	mov	r4, r0
 800bd90:	4608      	mov	r0, r1
 800bd92:	4611      	mov	r1, r2
 800bd94:	602b      	str	r3, [r5, #0]
 800bd96:	f7f7 fb8b 	bl	80034b0 <_fstat>
 800bd9a:	1c43      	adds	r3, r0, #1
 800bd9c:	d102      	bne.n	800bda4 <_fstat_r+0x1c>
 800bd9e:	682b      	ldr	r3, [r5, #0]
 800bda0:	b103      	cbz	r3, 800bda4 <_fstat_r+0x1c>
 800bda2:	6023      	str	r3, [r4, #0]
 800bda4:	bd38      	pop	{r3, r4, r5, pc}
 800bda6:	bf00      	nop
 800bda8:	20000aa8 	.word	0x20000aa8

0800bdac <_isatty_r>:
 800bdac:	b538      	push	{r3, r4, r5, lr}
 800bdae:	2300      	movs	r3, #0
 800bdb0:	4d05      	ldr	r5, [pc, #20]	@ (800bdc8 <_isatty_r+0x1c>)
 800bdb2:	4604      	mov	r4, r0
 800bdb4:	4608      	mov	r0, r1
 800bdb6:	602b      	str	r3, [r5, #0]
 800bdb8:	f7f7 fb89 	bl	80034ce <_isatty>
 800bdbc:	1c43      	adds	r3, r0, #1
 800bdbe:	d102      	bne.n	800bdc6 <_isatty_r+0x1a>
 800bdc0:	682b      	ldr	r3, [r5, #0]
 800bdc2:	b103      	cbz	r3, 800bdc6 <_isatty_r+0x1a>
 800bdc4:	6023      	str	r3, [r4, #0]
 800bdc6:	bd38      	pop	{r3, r4, r5, pc}
 800bdc8:	20000aa8 	.word	0x20000aa8

0800bdcc <atan2f>:
 800bdcc:	f000 b88a 	b.w	800bee4 <__ieee754_atan2f>

0800bdd0 <sqrtf>:
 800bdd0:	b538      	push	{r3, r4, r5, lr}
 800bdd2:	4605      	mov	r5, r0
 800bdd4:	f000 f816 	bl	800be04 <__ieee754_sqrtf>
 800bdd8:	4629      	mov	r1, r5
 800bdda:	4604      	mov	r4, r0
 800bddc:	4628      	mov	r0, r5
 800bdde:	f7f5 f9a1 	bl	8001124 <__aeabi_fcmpun>
 800bde2:	b968      	cbnz	r0, 800be00 <sqrtf+0x30>
 800bde4:	2100      	movs	r1, #0
 800bde6:	4628      	mov	r0, r5
 800bde8:	f7f5 f974 	bl	80010d4 <__aeabi_fcmplt>
 800bdec:	b140      	cbz	r0, 800be00 <sqrtf+0x30>
 800bdee:	f7fd fa83 	bl	80092f8 <__errno>
 800bdf2:	2321      	movs	r3, #33	@ 0x21
 800bdf4:	2100      	movs	r1, #0
 800bdf6:	6003      	str	r3, [r0, #0]
 800bdf8:	4608      	mov	r0, r1
 800bdfa:	f7f5 f881 	bl	8000f00 <__aeabi_fdiv>
 800bdfe:	4604      	mov	r4, r0
 800be00:	4620      	mov	r0, r4
 800be02:	bd38      	pop	{r3, r4, r5, pc}

0800be04 <__ieee754_sqrtf>:
 800be04:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 800be08:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800be0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be10:	4603      	mov	r3, r0
 800be12:	4604      	mov	r4, r0
 800be14:	d30a      	bcc.n	800be2c <__ieee754_sqrtf+0x28>
 800be16:	4601      	mov	r1, r0
 800be18:	f7f4 ffbe 	bl	8000d98 <__aeabi_fmul>
 800be1c:	4601      	mov	r1, r0
 800be1e:	4620      	mov	r0, r4
 800be20:	f7f4 feb2 	bl	8000b88 <__addsf3>
 800be24:	4604      	mov	r4, r0
 800be26:	4620      	mov	r0, r4
 800be28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be2c:	2a00      	cmp	r2, #0
 800be2e:	d0fa      	beq.n	800be26 <__ieee754_sqrtf+0x22>
 800be30:	2800      	cmp	r0, #0
 800be32:	da06      	bge.n	800be42 <__ieee754_sqrtf+0x3e>
 800be34:	4601      	mov	r1, r0
 800be36:	f7f4 fea5 	bl	8000b84 <__aeabi_fsub>
 800be3a:	4601      	mov	r1, r0
 800be3c:	f7f5 f860 	bl	8000f00 <__aeabi_fdiv>
 800be40:	e7f0      	b.n	800be24 <__ieee754_sqrtf+0x20>
 800be42:	f010 42ff 	ands.w	r2, r0, #2139095040	@ 0x7f800000
 800be46:	ea4f 51e0 	mov.w	r1, r0, asr #23
 800be4a:	d03e      	beq.n	800beca <__ieee754_sqrtf+0xc6>
 800be4c:	2400      	movs	r4, #0
 800be4e:	f1a1 057f 	sub.w	r5, r1, #127	@ 0x7f
 800be52:	07ca      	lsls	r2, r1, #31
 800be54:	f04f 0019 	mov.w	r0, #25
 800be58:	4626      	mov	r6, r4
 800be5a:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 800be5e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800be62:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800be66:	bf58      	it	pl
 800be68:	005b      	lslpl	r3, r3, #1
 800be6a:	106d      	asrs	r5, r5, #1
 800be6c:	005b      	lsls	r3, r3, #1
 800be6e:	1872      	adds	r2, r6, r1
 800be70:	429a      	cmp	r2, r3
 800be72:	bfcf      	iteee	gt
 800be74:	461a      	movgt	r2, r3
 800be76:	1856      	addle	r6, r2, r1
 800be78:	1864      	addle	r4, r4, r1
 800be7a:	1a9a      	suble	r2, r3, r2
 800be7c:	3801      	subs	r0, #1
 800be7e:	ea4f 0342 	mov.w	r3, r2, lsl #1
 800be82:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800be86:	d1f2      	bne.n	800be6e <__ieee754_sqrtf+0x6a>
 800be88:	b1ba      	cbz	r2, 800beba <__ieee754_sqrtf+0xb6>
 800be8a:	4e14      	ldr	r6, [pc, #80]	@ (800bedc <__ieee754_sqrtf+0xd8>)
 800be8c:	4f14      	ldr	r7, [pc, #80]	@ (800bee0 <__ieee754_sqrtf+0xdc>)
 800be8e:	6830      	ldr	r0, [r6, #0]
 800be90:	6839      	ldr	r1, [r7, #0]
 800be92:	f7f4 fe77 	bl	8000b84 <__aeabi_fsub>
 800be96:	f8d6 8000 	ldr.w	r8, [r6]
 800be9a:	4601      	mov	r1, r0
 800be9c:	4640      	mov	r0, r8
 800be9e:	f7f5 f923 	bl	80010e8 <__aeabi_fcmple>
 800bea2:	b150      	cbz	r0, 800beba <__ieee754_sqrtf+0xb6>
 800bea4:	6830      	ldr	r0, [r6, #0]
 800bea6:	6839      	ldr	r1, [r7, #0]
 800bea8:	f7f4 fe6e 	bl	8000b88 <__addsf3>
 800beac:	6836      	ldr	r6, [r6, #0]
 800beae:	4601      	mov	r1, r0
 800beb0:	4630      	mov	r0, r6
 800beb2:	f7f5 f90f 	bl	80010d4 <__aeabi_fcmplt>
 800beb6:	b168      	cbz	r0, 800bed4 <__ieee754_sqrtf+0xd0>
 800beb8:	3402      	adds	r4, #2
 800beba:	1064      	asrs	r4, r4, #1
 800bebc:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 800bec0:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 800bec4:	e7af      	b.n	800be26 <__ieee754_sqrtf+0x22>
 800bec6:	005b      	lsls	r3, r3, #1
 800bec8:	3201      	adds	r2, #1
 800beca:	0218      	lsls	r0, r3, #8
 800becc:	d5fb      	bpl.n	800bec6 <__ieee754_sqrtf+0xc2>
 800bece:	3a01      	subs	r2, #1
 800bed0:	1a89      	subs	r1, r1, r2
 800bed2:	e7bb      	b.n	800be4c <__ieee754_sqrtf+0x48>
 800bed4:	3401      	adds	r4, #1
 800bed6:	f024 0401 	bic.w	r4, r4, #1
 800beda:	e7ee      	b.n	800beba <__ieee754_sqrtf+0xb6>
 800bedc:	200001e4 	.word	0x200001e4
 800bee0:	200001e0 	.word	0x200001e0

0800bee4 <__ieee754_atan2f>:
 800bee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bee6:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 800beea:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 800beee:	4603      	mov	r3, r0
 800bef0:	d805      	bhi.n	800befe <__ieee754_atan2f+0x1a>
 800bef2:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 800bef6:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800befa:	4607      	mov	r7, r0
 800befc:	d904      	bls.n	800bf08 <__ieee754_atan2f+0x24>
 800befe:	4618      	mov	r0, r3
 800bf00:	f7f4 fe42 	bl	8000b88 <__addsf3>
 800bf04:	4603      	mov	r3, r0
 800bf06:	e010      	b.n	800bf2a <__ieee754_atan2f+0x46>
 800bf08:	f1b1 5f7e 	cmp.w	r1, #1065353216	@ 0x3f800000
 800bf0c:	d103      	bne.n	800bf16 <__ieee754_atan2f+0x32>
 800bf0e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bf12:	f000 b86f 	b.w	800bff4 <atanf>
 800bf16:	178c      	asrs	r4, r1, #30
 800bf18:	f004 0402 	and.w	r4, r4, #2
 800bf1c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800bf20:	b92a      	cbnz	r2, 800bf2e <__ieee754_atan2f+0x4a>
 800bf22:	2c02      	cmp	r4, #2
 800bf24:	d04b      	beq.n	800bfbe <__ieee754_atan2f+0xda>
 800bf26:	2c03      	cmp	r4, #3
 800bf28:	d04b      	beq.n	800bfc2 <__ieee754_atan2f+0xde>
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf2e:	b91e      	cbnz	r6, 800bf38 <__ieee754_atan2f+0x54>
 800bf30:	2f00      	cmp	r7, #0
 800bf32:	da4c      	bge.n	800bfce <__ieee754_atan2f+0xea>
 800bf34:	4b27      	ldr	r3, [pc, #156]	@ (800bfd4 <__ieee754_atan2f+0xf0>)
 800bf36:	e7f8      	b.n	800bf2a <__ieee754_atan2f+0x46>
 800bf38:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 800bf3c:	d10e      	bne.n	800bf5c <__ieee754_atan2f+0x78>
 800bf3e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800bf42:	f104 34ff 	add.w	r4, r4, #4294967295
 800bf46:	d105      	bne.n	800bf54 <__ieee754_atan2f+0x70>
 800bf48:	2c02      	cmp	r4, #2
 800bf4a:	d83c      	bhi.n	800bfc6 <__ieee754_atan2f+0xe2>
 800bf4c:	4b22      	ldr	r3, [pc, #136]	@ (800bfd8 <__ieee754_atan2f+0xf4>)
 800bf4e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800bf52:	e7ea      	b.n	800bf2a <__ieee754_atan2f+0x46>
 800bf54:	2c02      	cmp	r4, #2
 800bf56:	d838      	bhi.n	800bfca <__ieee754_atan2f+0xe6>
 800bf58:	4b20      	ldr	r3, [pc, #128]	@ (800bfdc <__ieee754_atan2f+0xf8>)
 800bf5a:	e7f8      	b.n	800bf4e <__ieee754_atan2f+0x6a>
 800bf5c:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800bf60:	d0e6      	beq.n	800bf30 <__ieee754_atan2f+0x4c>
 800bf62:	1b92      	subs	r2, r2, r6
 800bf64:	f1b2 5ff4 	cmp.w	r2, #511705088	@ 0x1e800000
 800bf68:	ea4f 50e2 	mov.w	r0, r2, asr #23
 800bf6c:	da17      	bge.n	800bf9e <__ieee754_atan2f+0xba>
 800bf6e:	2900      	cmp	r1, #0
 800bf70:	da01      	bge.n	800bf76 <__ieee754_atan2f+0x92>
 800bf72:	303c      	adds	r0, #60	@ 0x3c
 800bf74:	db15      	blt.n	800bfa2 <__ieee754_atan2f+0xbe>
 800bf76:	4618      	mov	r0, r3
 800bf78:	f7f4 ffc2 	bl	8000f00 <__aeabi_fdiv>
 800bf7c:	f000 f946 	bl	800c20c <fabsf>
 800bf80:	f000 f838 	bl	800bff4 <atanf>
 800bf84:	4603      	mov	r3, r0
 800bf86:	2c01      	cmp	r4, #1
 800bf88:	d00d      	beq.n	800bfa6 <__ieee754_atan2f+0xc2>
 800bf8a:	2c02      	cmp	r4, #2
 800bf8c:	d00e      	beq.n	800bfac <__ieee754_atan2f+0xc8>
 800bf8e:	2c00      	cmp	r4, #0
 800bf90:	d0cb      	beq.n	800bf2a <__ieee754_atan2f+0x46>
 800bf92:	4913      	ldr	r1, [pc, #76]	@ (800bfe0 <__ieee754_atan2f+0xfc>)
 800bf94:	4618      	mov	r0, r3
 800bf96:	f7f4 fdf7 	bl	8000b88 <__addsf3>
 800bf9a:	4912      	ldr	r1, [pc, #72]	@ (800bfe4 <__ieee754_atan2f+0x100>)
 800bf9c:	e00c      	b.n	800bfb8 <__ieee754_atan2f+0xd4>
 800bf9e:	4b12      	ldr	r3, [pc, #72]	@ (800bfe8 <__ieee754_atan2f+0x104>)
 800bfa0:	e7f1      	b.n	800bf86 <__ieee754_atan2f+0xa2>
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	e7ef      	b.n	800bf86 <__ieee754_atan2f+0xa2>
 800bfa6:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800bfaa:	e7be      	b.n	800bf2a <__ieee754_atan2f+0x46>
 800bfac:	490c      	ldr	r1, [pc, #48]	@ (800bfe0 <__ieee754_atan2f+0xfc>)
 800bfae:	4618      	mov	r0, r3
 800bfb0:	f7f4 fdea 	bl	8000b88 <__addsf3>
 800bfb4:	4601      	mov	r1, r0
 800bfb6:	480b      	ldr	r0, [pc, #44]	@ (800bfe4 <__ieee754_atan2f+0x100>)
 800bfb8:	f7f4 fde4 	bl	8000b84 <__aeabi_fsub>
 800bfbc:	e7a2      	b.n	800bf04 <__ieee754_atan2f+0x20>
 800bfbe:	4b09      	ldr	r3, [pc, #36]	@ (800bfe4 <__ieee754_atan2f+0x100>)
 800bfc0:	e7b3      	b.n	800bf2a <__ieee754_atan2f+0x46>
 800bfc2:	4b0a      	ldr	r3, [pc, #40]	@ (800bfec <__ieee754_atan2f+0x108>)
 800bfc4:	e7b1      	b.n	800bf2a <__ieee754_atan2f+0x46>
 800bfc6:	4b0a      	ldr	r3, [pc, #40]	@ (800bff0 <__ieee754_atan2f+0x10c>)
 800bfc8:	e7af      	b.n	800bf2a <__ieee754_atan2f+0x46>
 800bfca:	2300      	movs	r3, #0
 800bfcc:	e7ad      	b.n	800bf2a <__ieee754_atan2f+0x46>
 800bfce:	4b06      	ldr	r3, [pc, #24]	@ (800bfe8 <__ieee754_atan2f+0x104>)
 800bfd0:	e7ab      	b.n	800bf2a <__ieee754_atan2f+0x46>
 800bfd2:	bf00      	nop
 800bfd4:	bfc90fdb 	.word	0xbfc90fdb
 800bfd8:	0800c89c 	.word	0x0800c89c
 800bfdc:	0800c890 	.word	0x0800c890
 800bfe0:	33bbbd2e 	.word	0x33bbbd2e
 800bfe4:	40490fdb 	.word	0x40490fdb
 800bfe8:	3fc90fdb 	.word	0x3fc90fdb
 800bfec:	c0490fdb 	.word	0xc0490fdb
 800bff0:	3f490fdb 	.word	0x3f490fdb

0800bff4 <atanf>:
 800bff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bff8:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 800bffc:	f1b5 4fa1 	cmp.w	r5, #1350565888	@ 0x50800000
 800c000:	4604      	mov	r4, r0
 800c002:	4680      	mov	r8, r0
 800c004:	d30e      	bcc.n	800c024 <atanf+0x30>
 800c006:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800c00a:	d904      	bls.n	800c016 <atanf+0x22>
 800c00c:	4601      	mov	r1, r0
 800c00e:	f7f4 fdbb 	bl	8000b88 <__addsf3>
 800c012:	4604      	mov	r4, r0
 800c014:	e003      	b.n	800c01e <atanf+0x2a>
 800c016:	2800      	cmp	r0, #0
 800c018:	f340 80ce 	ble.w	800c1b8 <atanf+0x1c4>
 800c01c:	4c67      	ldr	r4, [pc, #412]	@ (800c1bc <atanf+0x1c8>)
 800c01e:	4620      	mov	r0, r4
 800c020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c024:	4b66      	ldr	r3, [pc, #408]	@ (800c1c0 <atanf+0x1cc>)
 800c026:	429d      	cmp	r5, r3
 800c028:	d80e      	bhi.n	800c048 <atanf+0x54>
 800c02a:	f1b5 5f44 	cmp.w	r5, #822083584	@ 0x31000000
 800c02e:	d208      	bcs.n	800c042 <atanf+0x4e>
 800c030:	4964      	ldr	r1, [pc, #400]	@ (800c1c4 <atanf+0x1d0>)
 800c032:	f7f4 fda9 	bl	8000b88 <__addsf3>
 800c036:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800c03a:	f7f5 f869 	bl	8001110 <__aeabi_fcmpgt>
 800c03e:	2800      	cmp	r0, #0
 800c040:	d1ed      	bne.n	800c01e <atanf+0x2a>
 800c042:	f04f 36ff 	mov.w	r6, #4294967295
 800c046:	e01c      	b.n	800c082 <atanf+0x8e>
 800c048:	f000 f8e0 	bl	800c20c <fabsf>
 800c04c:	4b5e      	ldr	r3, [pc, #376]	@ (800c1c8 <atanf+0x1d4>)
 800c04e:	4604      	mov	r4, r0
 800c050:	429d      	cmp	r5, r3
 800c052:	d87c      	bhi.n	800c14e <atanf+0x15a>
 800c054:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800c058:	429d      	cmp	r5, r3
 800c05a:	d867      	bhi.n	800c12c <atanf+0x138>
 800c05c:	4601      	mov	r1, r0
 800c05e:	f7f4 fd93 	bl	8000b88 <__addsf3>
 800c062:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800c066:	f7f4 fd8d 	bl	8000b84 <__aeabi_fsub>
 800c06a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800c06e:	4605      	mov	r5, r0
 800c070:	4620      	mov	r0, r4
 800c072:	f7f4 fd89 	bl	8000b88 <__addsf3>
 800c076:	4601      	mov	r1, r0
 800c078:	4628      	mov	r0, r5
 800c07a:	f7f4 ff41 	bl	8000f00 <__aeabi_fdiv>
 800c07e:	2600      	movs	r6, #0
 800c080:	4604      	mov	r4, r0
 800c082:	4621      	mov	r1, r4
 800c084:	4620      	mov	r0, r4
 800c086:	f7f4 fe87 	bl	8000d98 <__aeabi_fmul>
 800c08a:	4601      	mov	r1, r0
 800c08c:	4607      	mov	r7, r0
 800c08e:	f7f4 fe83 	bl	8000d98 <__aeabi_fmul>
 800c092:	4605      	mov	r5, r0
 800c094:	494d      	ldr	r1, [pc, #308]	@ (800c1cc <atanf+0x1d8>)
 800c096:	f7f4 fe7f 	bl	8000d98 <__aeabi_fmul>
 800c09a:	494d      	ldr	r1, [pc, #308]	@ (800c1d0 <atanf+0x1dc>)
 800c09c:	f7f4 fd74 	bl	8000b88 <__addsf3>
 800c0a0:	4629      	mov	r1, r5
 800c0a2:	f7f4 fe79 	bl	8000d98 <__aeabi_fmul>
 800c0a6:	494b      	ldr	r1, [pc, #300]	@ (800c1d4 <atanf+0x1e0>)
 800c0a8:	f7f4 fd6e 	bl	8000b88 <__addsf3>
 800c0ac:	4629      	mov	r1, r5
 800c0ae:	f7f4 fe73 	bl	8000d98 <__aeabi_fmul>
 800c0b2:	4949      	ldr	r1, [pc, #292]	@ (800c1d8 <atanf+0x1e4>)
 800c0b4:	f7f4 fd68 	bl	8000b88 <__addsf3>
 800c0b8:	4629      	mov	r1, r5
 800c0ba:	f7f4 fe6d 	bl	8000d98 <__aeabi_fmul>
 800c0be:	4947      	ldr	r1, [pc, #284]	@ (800c1dc <atanf+0x1e8>)
 800c0c0:	f7f4 fd62 	bl	8000b88 <__addsf3>
 800c0c4:	4629      	mov	r1, r5
 800c0c6:	f7f4 fe67 	bl	8000d98 <__aeabi_fmul>
 800c0ca:	4945      	ldr	r1, [pc, #276]	@ (800c1e0 <atanf+0x1ec>)
 800c0cc:	f7f4 fd5c 	bl	8000b88 <__addsf3>
 800c0d0:	4639      	mov	r1, r7
 800c0d2:	f7f4 fe61 	bl	8000d98 <__aeabi_fmul>
 800c0d6:	4943      	ldr	r1, [pc, #268]	@ (800c1e4 <atanf+0x1f0>)
 800c0d8:	4607      	mov	r7, r0
 800c0da:	4628      	mov	r0, r5
 800c0dc:	f7f4 fe5c 	bl	8000d98 <__aeabi_fmul>
 800c0e0:	4941      	ldr	r1, [pc, #260]	@ (800c1e8 <atanf+0x1f4>)
 800c0e2:	f7f4 fd4f 	bl	8000b84 <__aeabi_fsub>
 800c0e6:	4629      	mov	r1, r5
 800c0e8:	f7f4 fe56 	bl	8000d98 <__aeabi_fmul>
 800c0ec:	493f      	ldr	r1, [pc, #252]	@ (800c1ec <atanf+0x1f8>)
 800c0ee:	f7f4 fd49 	bl	8000b84 <__aeabi_fsub>
 800c0f2:	4629      	mov	r1, r5
 800c0f4:	f7f4 fe50 	bl	8000d98 <__aeabi_fmul>
 800c0f8:	493d      	ldr	r1, [pc, #244]	@ (800c1f0 <atanf+0x1fc>)
 800c0fa:	f7f4 fd43 	bl	8000b84 <__aeabi_fsub>
 800c0fe:	4629      	mov	r1, r5
 800c100:	f7f4 fe4a 	bl	8000d98 <__aeabi_fmul>
 800c104:	493b      	ldr	r1, [pc, #236]	@ (800c1f4 <atanf+0x200>)
 800c106:	f7f4 fd3d 	bl	8000b84 <__aeabi_fsub>
 800c10a:	4629      	mov	r1, r5
 800c10c:	f7f4 fe44 	bl	8000d98 <__aeabi_fmul>
 800c110:	4601      	mov	r1, r0
 800c112:	4638      	mov	r0, r7
 800c114:	f7f4 fd38 	bl	8000b88 <__addsf3>
 800c118:	4621      	mov	r1, r4
 800c11a:	f7f4 fe3d 	bl	8000d98 <__aeabi_fmul>
 800c11e:	1c73      	adds	r3, r6, #1
 800c120:	4601      	mov	r1, r0
 800c122:	d133      	bne.n	800c18c <atanf+0x198>
 800c124:	4620      	mov	r0, r4
 800c126:	f7f4 fd2d 	bl	8000b84 <__aeabi_fsub>
 800c12a:	e772      	b.n	800c012 <atanf+0x1e>
 800c12c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800c130:	f7f4 fd28 	bl	8000b84 <__aeabi_fsub>
 800c134:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800c138:	4605      	mov	r5, r0
 800c13a:	4620      	mov	r0, r4
 800c13c:	f7f4 fd24 	bl	8000b88 <__addsf3>
 800c140:	4601      	mov	r1, r0
 800c142:	4628      	mov	r0, r5
 800c144:	f7f4 fedc 	bl	8000f00 <__aeabi_fdiv>
 800c148:	2601      	movs	r6, #1
 800c14a:	4604      	mov	r4, r0
 800c14c:	e799      	b.n	800c082 <atanf+0x8e>
 800c14e:	4b2a      	ldr	r3, [pc, #168]	@ (800c1f8 <atanf+0x204>)
 800c150:	429d      	cmp	r5, r3
 800c152:	d814      	bhi.n	800c17e <atanf+0x18a>
 800c154:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 800c158:	f7f4 fd14 	bl	8000b84 <__aeabi_fsub>
 800c15c:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 800c160:	4605      	mov	r5, r0
 800c162:	4620      	mov	r0, r4
 800c164:	f7f4 fe18 	bl	8000d98 <__aeabi_fmul>
 800c168:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800c16c:	f7f4 fd0c 	bl	8000b88 <__addsf3>
 800c170:	4601      	mov	r1, r0
 800c172:	4628      	mov	r0, r5
 800c174:	f7f4 fec4 	bl	8000f00 <__aeabi_fdiv>
 800c178:	2602      	movs	r6, #2
 800c17a:	4604      	mov	r4, r0
 800c17c:	e781      	b.n	800c082 <atanf+0x8e>
 800c17e:	4601      	mov	r1, r0
 800c180:	481e      	ldr	r0, [pc, #120]	@ (800c1fc <atanf+0x208>)
 800c182:	f7f4 febd 	bl	8000f00 <__aeabi_fdiv>
 800c186:	2603      	movs	r6, #3
 800c188:	4604      	mov	r4, r0
 800c18a:	e77a      	b.n	800c082 <atanf+0x8e>
 800c18c:	4b1c      	ldr	r3, [pc, #112]	@ (800c200 <atanf+0x20c>)
 800c18e:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800c192:	f7f4 fcf7 	bl	8000b84 <__aeabi_fsub>
 800c196:	4621      	mov	r1, r4
 800c198:	f7f4 fcf4 	bl	8000b84 <__aeabi_fsub>
 800c19c:	4b19      	ldr	r3, [pc, #100]	@ (800c204 <atanf+0x210>)
 800c19e:	4601      	mov	r1, r0
 800c1a0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c1a4:	f7f4 fcee 	bl	8000b84 <__aeabi_fsub>
 800c1a8:	f1b8 0f00 	cmp.w	r8, #0
 800c1ac:	4604      	mov	r4, r0
 800c1ae:	f6bf af36 	bge.w	800c01e <atanf+0x2a>
 800c1b2:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 800c1b6:	e732      	b.n	800c01e <atanf+0x2a>
 800c1b8:	4c13      	ldr	r4, [pc, #76]	@ (800c208 <atanf+0x214>)
 800c1ba:	e730      	b.n	800c01e <atanf+0x2a>
 800c1bc:	3fc90fdb 	.word	0x3fc90fdb
 800c1c0:	3edfffff 	.word	0x3edfffff
 800c1c4:	7149f2ca 	.word	0x7149f2ca
 800c1c8:	3f97ffff 	.word	0x3f97ffff
 800c1cc:	3c8569d7 	.word	0x3c8569d7
 800c1d0:	3d4bda59 	.word	0x3d4bda59
 800c1d4:	3d886b35 	.word	0x3d886b35
 800c1d8:	3dba2e6e 	.word	0x3dba2e6e
 800c1dc:	3e124925 	.word	0x3e124925
 800c1e0:	3eaaaaab 	.word	0x3eaaaaab
 800c1e4:	bd15a221 	.word	0xbd15a221
 800c1e8:	3d6ef16b 	.word	0x3d6ef16b
 800c1ec:	3d9d8795 	.word	0x3d9d8795
 800c1f0:	3de38e38 	.word	0x3de38e38
 800c1f4:	3e4ccccd 	.word	0x3e4ccccd
 800c1f8:	401bffff 	.word	0x401bffff
 800c1fc:	bf800000 	.word	0xbf800000
 800c200:	0800c8a8 	.word	0x0800c8a8
 800c204:	0800c8b8 	.word	0x0800c8b8
 800c208:	bfc90fdb 	.word	0xbfc90fdb

0800c20c <fabsf>:
 800c20c:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800c210:	4770      	bx	lr
	...

0800c214 <_init>:
 800c214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c216:	bf00      	nop
 800c218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c21a:	bc08      	pop	{r3}
 800c21c:	469e      	mov	lr, r3
 800c21e:	4770      	bx	lr

0800c220 <_fini>:
 800c220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c222:	bf00      	nop
 800c224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c226:	bc08      	pop	{r3}
 800c228:	469e      	mov	lr, r3
 800c22a:	4770      	bx	lr
