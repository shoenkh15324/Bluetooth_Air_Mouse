
AirMouse_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000959c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c8  080096b0  080096b0  0000a6b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c78  08009c78  0000b1e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009c78  08009c78  0000ac78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c80  08009c80  0000b1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c80  08009c80  0000ac80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c84  08009c84  0000ac84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009c88  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000830  200001e0  08009e68  0000b1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a10  08009e68  0000ba10  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cb2f  00000000  00000000  0000b209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000279d  00000000  00000000  00017d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c68  00000000  00000000  0001a4d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000988  00000000  00000000  0001b140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a212  00000000  00000000  0001bac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011407  00000000  00000000  00035cda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088f93  00000000  00000000  000470e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d0074  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000468c  00000000  00000000  000d00b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  000d4744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08009694 	.word	0x08009694

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08009694 	.word	0x08009694

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <__aeabi_drsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000168:	e002      	b.n	8000170 <__adddf3>
 800016a:	bf00      	nop

0800016c <__aeabi_dsub>:
 800016c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000170 <__adddf3>:
 8000170:	b530      	push	{r4, r5, lr}
 8000172:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000176:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800017a:	ea94 0f05 	teq	r4, r5
 800017e:	bf08      	it	eq
 8000180:	ea90 0f02 	teqeq	r0, r2
 8000184:	bf1f      	itttt	ne
 8000186:	ea54 0c00 	orrsne.w	ip, r4, r0
 800018a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000192:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000196:	f000 80e2 	beq.w	800035e <__adddf3+0x1ee>
 800019a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001a2:	bfb8      	it	lt
 80001a4:	426d      	neglt	r5, r5
 80001a6:	dd0c      	ble.n	80001c2 <__adddf3+0x52>
 80001a8:	442c      	add	r4, r5
 80001aa:	ea80 0202 	eor.w	r2, r0, r2
 80001ae:	ea81 0303 	eor.w	r3, r1, r3
 80001b2:	ea82 0000 	eor.w	r0, r2, r0
 80001b6:	ea83 0101 	eor.w	r1, r3, r1
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	2d36      	cmp	r5, #54	@ 0x36
 80001c4:	bf88      	it	hi
 80001c6:	bd30      	pophi	{r4, r5, pc}
 80001c8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001d0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x70>
 80001da:	4240      	negs	r0, r0
 80001dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001e0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001ec:	d002      	beq.n	80001f4 <__adddf3+0x84>
 80001ee:	4252      	negs	r2, r2
 80001f0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f4:	ea94 0f05 	teq	r4, r5
 80001f8:	f000 80a7 	beq.w	800034a <__adddf3+0x1da>
 80001fc:	f1a4 0401 	sub.w	r4, r4, #1
 8000200:	f1d5 0e20 	rsbs	lr, r5, #32
 8000204:	db0d      	blt.n	8000222 <__adddf3+0xb2>
 8000206:	fa02 fc0e 	lsl.w	ip, r2, lr
 800020a:	fa22 f205 	lsr.w	r2, r2, r5
 800020e:	1880      	adds	r0, r0, r2
 8000210:	f141 0100 	adc.w	r1, r1, #0
 8000214:	fa03 f20e 	lsl.w	r2, r3, lr
 8000218:	1880      	adds	r0, r0, r2
 800021a:	fa43 f305 	asr.w	r3, r3, r5
 800021e:	4159      	adcs	r1, r3
 8000220:	e00e      	b.n	8000240 <__adddf3+0xd0>
 8000222:	f1a5 0520 	sub.w	r5, r5, #32
 8000226:	f10e 0e20 	add.w	lr, lr, #32
 800022a:	2a01      	cmp	r2, #1
 800022c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000230:	bf28      	it	cs
 8000232:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	18c0      	adds	r0, r0, r3
 800023c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000240:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000244:	d507      	bpl.n	8000256 <__adddf3+0xe6>
 8000246:	f04f 0e00 	mov.w	lr, #0
 800024a:	f1dc 0c00 	rsbs	ip, ip, #0
 800024e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000252:	eb6e 0101 	sbc.w	r1, lr, r1
 8000256:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800025a:	d31b      	bcc.n	8000294 <__adddf3+0x124>
 800025c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000260:	d30c      	bcc.n	800027c <__adddf3+0x10c>
 8000262:	0849      	lsrs	r1, r1, #1
 8000264:	ea5f 0030 	movs.w	r0, r0, rrx
 8000268:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800026c:	f104 0401 	add.w	r4, r4, #1
 8000270:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000274:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000278:	f080 809a 	bcs.w	80003b0 <__adddf3+0x240>
 800027c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000280:	bf08      	it	eq
 8000282:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000286:	f150 0000 	adcs.w	r0, r0, #0
 800028a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028e:	ea41 0105 	orr.w	r1, r1, r5
 8000292:	bd30      	pop	{r4, r5, pc}
 8000294:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000298:	4140      	adcs	r0, r0
 800029a:	eb41 0101 	adc.w	r1, r1, r1
 800029e:	3c01      	subs	r4, #1
 80002a0:	bf28      	it	cs
 80002a2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a6:	d2e9      	bcs.n	800027c <__adddf3+0x10c>
 80002a8:	f091 0f00 	teq	r1, #0
 80002ac:	bf04      	itt	eq
 80002ae:	4601      	moveq	r1, r0
 80002b0:	2000      	moveq	r0, #0
 80002b2:	fab1 f381 	clz	r3, r1
 80002b6:	bf08      	it	eq
 80002b8:	3320      	addeq	r3, #32
 80002ba:	f1a3 030b 	sub.w	r3, r3, #11
 80002be:	f1b3 0220 	subs.w	r2, r3, #32
 80002c2:	da0c      	bge.n	80002de <__adddf3+0x16e>
 80002c4:	320c      	adds	r2, #12
 80002c6:	dd08      	ble.n	80002da <__adddf3+0x16a>
 80002c8:	f102 0c14 	add.w	ip, r2, #20
 80002cc:	f1c2 020c 	rsb	r2, r2, #12
 80002d0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d4:	fa21 f102 	lsr.w	r1, r1, r2
 80002d8:	e00c      	b.n	80002f4 <__adddf3+0x184>
 80002da:	f102 0214 	add.w	r2, r2, #20
 80002de:	bfd8      	it	le
 80002e0:	f1c2 0c20 	rsble	ip, r2, #32
 80002e4:	fa01 f102 	lsl.w	r1, r1, r2
 80002e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002ec:	bfdc      	itt	le
 80002ee:	ea41 010c 	orrle.w	r1, r1, ip
 80002f2:	4090      	lslle	r0, r2
 80002f4:	1ae4      	subs	r4, r4, r3
 80002f6:	bfa2      	ittt	ge
 80002f8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002fc:	4329      	orrge	r1, r5
 80002fe:	bd30      	popge	{r4, r5, pc}
 8000300:	ea6f 0404 	mvn.w	r4, r4
 8000304:	3c1f      	subs	r4, #31
 8000306:	da1c      	bge.n	8000342 <__adddf3+0x1d2>
 8000308:	340c      	adds	r4, #12
 800030a:	dc0e      	bgt.n	800032a <__adddf3+0x1ba>
 800030c:	f104 0414 	add.w	r4, r4, #20
 8000310:	f1c4 0220 	rsb	r2, r4, #32
 8000314:	fa20 f004 	lsr.w	r0, r0, r4
 8000318:	fa01 f302 	lsl.w	r3, r1, r2
 800031c:	ea40 0003 	orr.w	r0, r0, r3
 8000320:	fa21 f304 	lsr.w	r3, r1, r4
 8000324:	ea45 0103 	orr.w	r1, r5, r3
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	f1c4 040c 	rsb	r4, r4, #12
 800032e:	f1c4 0220 	rsb	r2, r4, #32
 8000332:	fa20 f002 	lsr.w	r0, r0, r2
 8000336:	fa01 f304 	lsl.w	r3, r1, r4
 800033a:	ea40 0003 	orr.w	r0, r0, r3
 800033e:	4629      	mov	r1, r5
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	fa21 f004 	lsr.w	r0, r1, r4
 8000346:	4629      	mov	r1, r5
 8000348:	bd30      	pop	{r4, r5, pc}
 800034a:	f094 0f00 	teq	r4, #0
 800034e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000352:	bf06      	itte	eq
 8000354:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000358:	3401      	addeq	r4, #1
 800035a:	3d01      	subne	r5, #1
 800035c:	e74e      	b.n	80001fc <__adddf3+0x8c>
 800035e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000362:	bf18      	it	ne
 8000364:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000368:	d029      	beq.n	80003be <__adddf3+0x24e>
 800036a:	ea94 0f05 	teq	r4, r5
 800036e:	bf08      	it	eq
 8000370:	ea90 0f02 	teqeq	r0, r2
 8000374:	d005      	beq.n	8000382 <__adddf3+0x212>
 8000376:	ea54 0c00 	orrs.w	ip, r4, r0
 800037a:	bf04      	itt	eq
 800037c:	4619      	moveq	r1, r3
 800037e:	4610      	moveq	r0, r2
 8000380:	bd30      	pop	{r4, r5, pc}
 8000382:	ea91 0f03 	teq	r1, r3
 8000386:	bf1e      	ittt	ne
 8000388:	2100      	movne	r1, #0
 800038a:	2000      	movne	r0, #0
 800038c:	bd30      	popne	{r4, r5, pc}
 800038e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000392:	d105      	bne.n	80003a0 <__adddf3+0x230>
 8000394:	0040      	lsls	r0, r0, #1
 8000396:	4149      	adcs	r1, r1
 8000398:	bf28      	it	cs
 800039a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a4:	bf3c      	itt	cc
 80003a6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003aa:	bd30      	popcc	{r4, r5, pc}
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b8:	f04f 0000 	mov.w	r0, #0
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c2:	bf1a      	itte	ne
 80003c4:	4619      	movne	r1, r3
 80003c6:	4610      	movne	r0, r2
 80003c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003cc:	bf1c      	itt	ne
 80003ce:	460b      	movne	r3, r1
 80003d0:	4602      	movne	r2, r0
 80003d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d6:	bf06      	itte	eq
 80003d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003dc:	ea91 0f03 	teqeq	r1, r3
 80003e0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	bf00      	nop

080003e8 <__aeabi_ui2d>:
 80003e8:	f090 0f00 	teq	r0, #0
 80003ec:	bf04      	itt	eq
 80003ee:	2100      	moveq	r1, #0
 80003f0:	4770      	bxeq	lr
 80003f2:	b530      	push	{r4, r5, lr}
 80003f4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003fc:	f04f 0500 	mov.w	r5, #0
 8000400:	f04f 0100 	mov.w	r1, #0
 8000404:	e750      	b.n	80002a8 <__adddf3+0x138>
 8000406:	bf00      	nop

08000408 <__aeabi_i2d>:
 8000408:	f090 0f00 	teq	r0, #0
 800040c:	bf04      	itt	eq
 800040e:	2100      	moveq	r1, #0
 8000410:	4770      	bxeq	lr
 8000412:	b530      	push	{r4, r5, lr}
 8000414:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000418:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800041c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000420:	bf48      	it	mi
 8000422:	4240      	negmi	r0, r0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e73e      	b.n	80002a8 <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_f2d>:
 800042c:	0042      	lsls	r2, r0, #1
 800042e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000432:	ea4f 0131 	mov.w	r1, r1, rrx
 8000436:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800043a:	bf1f      	itttt	ne
 800043c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000440:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000444:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000448:	4770      	bxne	lr
 800044a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044e:	bf08      	it	eq
 8000450:	4770      	bxeq	lr
 8000452:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000456:	bf04      	itt	eq
 8000458:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000464:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000468:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800046c:	e71c      	b.n	80002a8 <__adddf3+0x138>
 800046e:	bf00      	nop

08000470 <__aeabi_ul2d>:
 8000470:	ea50 0201 	orrs.w	r2, r0, r1
 8000474:	bf08      	it	eq
 8000476:	4770      	bxeq	lr
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	f04f 0500 	mov.w	r5, #0
 800047e:	e00a      	b.n	8000496 <__aeabi_l2d+0x16>

08000480 <__aeabi_l2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048e:	d502      	bpl.n	8000496 <__aeabi_l2d+0x16>
 8000490:	4240      	negs	r0, r0
 8000492:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000496:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004a2:	f43f aed8 	beq.w	8000256 <__adddf3+0xe6>
 80004a6:	f04f 0203 	mov.w	r2, #3
 80004aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ae:	bf18      	it	ne
 80004b0:	3203      	addne	r2, #3
 80004b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b6:	bf18      	it	ne
 80004b8:	3203      	addne	r2, #3
 80004ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004be:	f1c2 0320 	rsb	r3, r2, #32
 80004c2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c6:	fa20 f002 	lsr.w	r0, r0, r2
 80004ca:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ce:	ea40 000e 	orr.w	r0, r0, lr
 80004d2:	fa21 f102 	lsr.w	r1, r1, r2
 80004d6:	4414      	add	r4, r2
 80004d8:	e6bd      	b.n	8000256 <__adddf3+0xe6>
 80004da:	bf00      	nop

080004dc <__aeabi_dmul>:
 80004dc:	b570      	push	{r4, r5, r6, lr}
 80004de:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004e2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004ea:	bf1d      	ittte	ne
 80004ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004f0:	ea94 0f0c 	teqne	r4, ip
 80004f4:	ea95 0f0c 	teqne	r5, ip
 80004f8:	f000 f8de 	bleq	80006b8 <__aeabi_dmul+0x1dc>
 80004fc:	442c      	add	r4, r5
 80004fe:	ea81 0603 	eor.w	r6, r1, r3
 8000502:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000506:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800050a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050e:	bf18      	it	ne
 8000510:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000514:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000518:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800051c:	d038      	beq.n	8000590 <__aeabi_dmul+0xb4>
 800051e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000522:	f04f 0500 	mov.w	r5, #0
 8000526:	fbe1 e502 	umlal	lr, r5, r1, r2
 800052a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000532:	f04f 0600 	mov.w	r6, #0
 8000536:	fbe1 5603 	umlal	r5, r6, r1, r3
 800053a:	f09c 0f00 	teq	ip, #0
 800053e:	bf18      	it	ne
 8000540:	f04e 0e01 	orrne.w	lr, lr, #1
 8000544:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000548:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800054c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000550:	d204      	bcs.n	800055c <__aeabi_dmul+0x80>
 8000552:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000556:	416d      	adcs	r5, r5
 8000558:	eb46 0606 	adc.w	r6, r6, r6
 800055c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000560:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000564:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000568:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800056c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000570:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000574:	bf88      	it	hi
 8000576:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800057a:	d81e      	bhi.n	80005ba <__aeabi_dmul+0xde>
 800057c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000580:	bf08      	it	eq
 8000582:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000586:	f150 0000 	adcs.w	r0, r0, #0
 800058a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058e:	bd70      	pop	{r4, r5, r6, pc}
 8000590:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000594:	ea46 0101 	orr.w	r1, r6, r1
 8000598:	ea40 0002 	orr.w	r0, r0, r2
 800059c:	ea81 0103 	eor.w	r1, r1, r3
 80005a0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a4:	bfc2      	ittt	gt
 80005a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ae:	bd70      	popgt	{r4, r5, r6, pc}
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b4:	f04f 0e00 	mov.w	lr, #0
 80005b8:	3c01      	subs	r4, #1
 80005ba:	f300 80ab 	bgt.w	8000714 <__aeabi_dmul+0x238>
 80005be:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005c2:	bfde      	ittt	le
 80005c4:	2000      	movle	r0, #0
 80005c6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd70      	pople	{r4, r5, r6, pc}
 80005cc:	f1c4 0400 	rsb	r4, r4, #0
 80005d0:	3c20      	subs	r4, #32
 80005d2:	da35      	bge.n	8000640 <__aeabi_dmul+0x164>
 80005d4:	340c      	adds	r4, #12
 80005d6:	dc1b      	bgt.n	8000610 <__aeabi_dmul+0x134>
 80005d8:	f104 0414 	add.w	r4, r4, #20
 80005dc:	f1c4 0520 	rsb	r5, r4, #32
 80005e0:	fa00 f305 	lsl.w	r3, r0, r5
 80005e4:	fa20 f004 	lsr.w	r0, r0, r4
 80005e8:	fa01 f205 	lsl.w	r2, r1, r5
 80005ec:	ea40 0002 	orr.w	r0, r0, r2
 80005f0:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005fc:	fa21 f604 	lsr.w	r6, r1, r4
 8000600:	eb42 0106 	adc.w	r1, r2, r6
 8000604:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000608:	bf08      	it	eq
 800060a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060e:	bd70      	pop	{r4, r5, r6, pc}
 8000610:	f1c4 040c 	rsb	r4, r4, #12
 8000614:	f1c4 0520 	rsb	r5, r4, #32
 8000618:	fa00 f304 	lsl.w	r3, r0, r4
 800061c:	fa20 f005 	lsr.w	r0, r0, r5
 8000620:	fa01 f204 	lsl.w	r2, r1, r4
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800062c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000630:	f141 0100 	adc.w	r1, r1, #0
 8000634:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000638:	bf08      	it	eq
 800063a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063e:	bd70      	pop	{r4, r5, r6, pc}
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f205 	lsl.w	r2, r0, r5
 8000648:	ea4e 0e02 	orr.w	lr, lr, r2
 800064c:	fa20 f304 	lsr.w	r3, r0, r4
 8000650:	fa01 f205 	lsl.w	r2, r1, r5
 8000654:	ea43 0302 	orr.w	r3, r3, r2
 8000658:	fa21 f004 	lsr.w	r0, r1, r4
 800065c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000660:	fa21 f204 	lsr.w	r2, r1, r4
 8000664:	ea20 0002 	bic.w	r0, r0, r2
 8000668:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800066c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000670:	bf08      	it	eq
 8000672:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000676:	bd70      	pop	{r4, r5, r6, pc}
 8000678:	f094 0f00 	teq	r4, #0
 800067c:	d10f      	bne.n	800069e <__aeabi_dmul+0x1c2>
 800067e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000682:	0040      	lsls	r0, r0, #1
 8000684:	eb41 0101 	adc.w	r1, r1, r1
 8000688:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800068c:	bf08      	it	eq
 800068e:	3c01      	subeq	r4, #1
 8000690:	d0f7      	beq.n	8000682 <__aeabi_dmul+0x1a6>
 8000692:	ea41 0106 	orr.w	r1, r1, r6
 8000696:	f095 0f00 	teq	r5, #0
 800069a:	bf18      	it	ne
 800069c:	4770      	bxne	lr
 800069e:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006a2:	0052      	lsls	r2, r2, #1
 80006a4:	eb43 0303 	adc.w	r3, r3, r3
 80006a8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006ac:	bf08      	it	eq
 80006ae:	3d01      	subeq	r5, #1
 80006b0:	d0f7      	beq.n	80006a2 <__aeabi_dmul+0x1c6>
 80006b2:	ea43 0306 	orr.w	r3, r3, r6
 80006b6:	4770      	bx	lr
 80006b8:	ea94 0f0c 	teq	r4, ip
 80006bc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006c0:	bf18      	it	ne
 80006c2:	ea95 0f0c 	teqne	r5, ip
 80006c6:	d00c      	beq.n	80006e2 <__aeabi_dmul+0x206>
 80006c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006cc:	bf18      	it	ne
 80006ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d2:	d1d1      	bne.n	8000678 <__aeabi_dmul+0x19c>
 80006d4:	ea81 0103 	eor.w	r1, r1, r3
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006dc:	f04f 0000 	mov.w	r0, #0
 80006e0:	bd70      	pop	{r4, r5, r6, pc}
 80006e2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e6:	bf06      	itte	eq
 80006e8:	4610      	moveq	r0, r2
 80006ea:	4619      	moveq	r1, r3
 80006ec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f0:	d019      	beq.n	8000726 <__aeabi_dmul+0x24a>
 80006f2:	ea94 0f0c 	teq	r4, ip
 80006f6:	d102      	bne.n	80006fe <__aeabi_dmul+0x222>
 80006f8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006fc:	d113      	bne.n	8000726 <__aeabi_dmul+0x24a>
 80006fe:	ea95 0f0c 	teq	r5, ip
 8000702:	d105      	bne.n	8000710 <__aeabi_dmul+0x234>
 8000704:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000708:	bf1c      	itt	ne
 800070a:	4610      	movne	r0, r2
 800070c:	4619      	movne	r1, r3
 800070e:	d10a      	bne.n	8000726 <__aeabi_dmul+0x24a>
 8000710:	ea81 0103 	eor.w	r1, r1, r3
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000718:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800071c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000720:	f04f 0000 	mov.w	r0, #0
 8000724:	bd70      	pop	{r4, r5, r6, pc}
 8000726:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800072a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072e:	bd70      	pop	{r4, r5, r6, pc}

08000730 <__aeabi_ddiv>:
 8000730:	b570      	push	{r4, r5, r6, lr}
 8000732:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000736:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800073a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073e:	bf1d      	ittte	ne
 8000740:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000744:	ea94 0f0c 	teqne	r4, ip
 8000748:	ea95 0f0c 	teqne	r5, ip
 800074c:	f000 f8a7 	bleq	800089e <__aeabi_ddiv+0x16e>
 8000750:	eba4 0405 	sub.w	r4, r4, r5
 8000754:	ea81 0e03 	eor.w	lr, r1, r3
 8000758:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800075c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000760:	f000 8088 	beq.w	8000874 <__aeabi_ddiv+0x144>
 8000764:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000768:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800076c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000770:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000774:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000778:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800077c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000780:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000784:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000788:	429d      	cmp	r5, r3
 800078a:	bf08      	it	eq
 800078c:	4296      	cmpeq	r6, r2
 800078e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000792:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000796:	d202      	bcs.n	800079e <__aeabi_ddiv+0x6e>
 8000798:	085b      	lsrs	r3, r3, #1
 800079a:	ea4f 0232 	mov.w	r2, r2, rrx
 800079e:	1ab6      	subs	r6, r6, r2
 80007a0:	eb65 0503 	sbc.w	r5, r5, r3
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007ae:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000802:	bf22      	ittt	cs
 8000804:	1ab6      	subcs	r6, r6, r2
 8000806:	4675      	movcs	r5, lr
 8000808:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800080c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000810:	d018      	beq.n	8000844 <__aeabi_ddiv+0x114>
 8000812:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000816:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800081a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000822:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000826:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800082a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082e:	d1c0      	bne.n	80007b2 <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	d10b      	bne.n	800084e <__aeabi_ddiv+0x11e>
 8000836:	ea41 0100 	orr.w	r1, r1, r0
 800083a:	f04f 0000 	mov.w	r0, #0
 800083e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000842:	e7b6      	b.n	80007b2 <__aeabi_ddiv+0x82>
 8000844:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000848:	bf04      	itt	eq
 800084a:	4301      	orreq	r1, r0
 800084c:	2000      	moveq	r0, #0
 800084e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000852:	bf88      	it	hi
 8000854:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000858:	f63f aeaf 	bhi.w	80005ba <__aeabi_dmul+0xde>
 800085c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000860:	bf04      	itt	eq
 8000862:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000866:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800086a:	f150 0000 	adcs.w	r0, r0, #0
 800086e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000872:	bd70      	pop	{r4, r5, r6, pc}
 8000874:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000878:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800087c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000880:	bfc2      	ittt	gt
 8000882:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000886:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800088a:	bd70      	popgt	{r4, r5, r6, pc}
 800088c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000890:	f04f 0e00 	mov.w	lr, #0
 8000894:	3c01      	subs	r4, #1
 8000896:	e690      	b.n	80005ba <__aeabi_dmul+0xde>
 8000898:	ea45 0e06 	orr.w	lr, r5, r6
 800089c:	e68d      	b.n	80005ba <__aeabi_dmul+0xde>
 800089e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008a2:	ea94 0f0c 	teq	r4, ip
 80008a6:	bf08      	it	eq
 80008a8:	ea95 0f0c 	teqeq	r5, ip
 80008ac:	f43f af3b 	beq.w	8000726 <__aeabi_dmul+0x24a>
 80008b0:	ea94 0f0c 	teq	r4, ip
 80008b4:	d10a      	bne.n	80008cc <__aeabi_ddiv+0x19c>
 80008b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ba:	f47f af34 	bne.w	8000726 <__aeabi_dmul+0x24a>
 80008be:	ea95 0f0c 	teq	r5, ip
 80008c2:	f47f af25 	bne.w	8000710 <__aeabi_dmul+0x234>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e72c      	b.n	8000726 <__aeabi_dmul+0x24a>
 80008cc:	ea95 0f0c 	teq	r5, ip
 80008d0:	d106      	bne.n	80008e0 <__aeabi_ddiv+0x1b0>
 80008d2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d6:	f43f aefd 	beq.w	80006d4 <__aeabi_dmul+0x1f8>
 80008da:	4610      	mov	r0, r2
 80008dc:	4619      	mov	r1, r3
 80008de:	e722      	b.n	8000726 <__aeabi_dmul+0x24a>
 80008e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e4:	bf18      	it	ne
 80008e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ea:	f47f aec5 	bne.w	8000678 <__aeabi_dmul+0x19c>
 80008ee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008f2:	f47f af0d 	bne.w	8000710 <__aeabi_dmul+0x234>
 80008f6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008fa:	f47f aeeb 	bne.w	80006d4 <__aeabi_dmul+0x1f8>
 80008fe:	e712      	b.n	8000726 <__aeabi_dmul+0x24a>

08000900 <__gedf2>:
 8000900:	f04f 3cff 	mov.w	ip, #4294967295
 8000904:	e006      	b.n	8000914 <__cmpdf2+0x4>
 8000906:	bf00      	nop

08000908 <__ledf2>:
 8000908:	f04f 0c01 	mov.w	ip, #1
 800090c:	e002      	b.n	8000914 <__cmpdf2+0x4>
 800090e:	bf00      	nop

08000910 <__cmpdf2>:
 8000910:	f04f 0c01 	mov.w	ip, #1
 8000914:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000918:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800091c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000920:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000924:	bf18      	it	ne
 8000926:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800092a:	d01b      	beq.n	8000964 <__cmpdf2+0x54>
 800092c:	b001      	add	sp, #4
 800092e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000932:	bf0c      	ite	eq
 8000934:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000938:	ea91 0f03 	teqne	r1, r3
 800093c:	bf02      	ittt	eq
 800093e:	ea90 0f02 	teqeq	r0, r2
 8000942:	2000      	moveq	r0, #0
 8000944:	4770      	bxeq	lr
 8000946:	f110 0f00 	cmn.w	r0, #0
 800094a:	ea91 0f03 	teq	r1, r3
 800094e:	bf58      	it	pl
 8000950:	4299      	cmppl	r1, r3
 8000952:	bf08      	it	eq
 8000954:	4290      	cmpeq	r0, r2
 8000956:	bf2c      	ite	cs
 8000958:	17d8      	asrcs	r0, r3, #31
 800095a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095e:	f040 0001 	orr.w	r0, r0, #1
 8000962:	4770      	bx	lr
 8000964:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000968:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800096c:	d102      	bne.n	8000974 <__cmpdf2+0x64>
 800096e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000972:	d107      	bne.n	8000984 <__cmpdf2+0x74>
 8000974:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d1d6      	bne.n	800092c <__cmpdf2+0x1c>
 800097e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000982:	d0d3      	beq.n	800092c <__cmpdf2+0x1c>
 8000984:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_cdrcmple>:
 800098c:	4684      	mov	ip, r0
 800098e:	4610      	mov	r0, r2
 8000990:	4662      	mov	r2, ip
 8000992:	468c      	mov	ip, r1
 8000994:	4619      	mov	r1, r3
 8000996:	4663      	mov	r3, ip
 8000998:	e000      	b.n	800099c <__aeabi_cdcmpeq>
 800099a:	bf00      	nop

0800099c <__aeabi_cdcmpeq>:
 800099c:	b501      	push	{r0, lr}
 800099e:	f7ff ffb7 	bl	8000910 <__cmpdf2>
 80009a2:	2800      	cmp	r0, #0
 80009a4:	bf48      	it	mi
 80009a6:	f110 0f00 	cmnmi.w	r0, #0
 80009aa:	bd01      	pop	{r0, pc}

080009ac <__aeabi_dcmpeq>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff fff4 	bl	800099c <__aeabi_cdcmpeq>
 80009b4:	bf0c      	ite	eq
 80009b6:	2001      	moveq	r0, #1
 80009b8:	2000      	movne	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmplt>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffea 	bl	800099c <__aeabi_cdcmpeq>
 80009c8:	bf34      	ite	cc
 80009ca:	2001      	movcc	r0, #1
 80009cc:	2000      	movcs	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmple>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffe0 	bl	800099c <__aeabi_cdcmpeq>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpge>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffce 	bl	800098c <__aeabi_cdrcmple>
 80009f0:	bf94      	ite	ls
 80009f2:	2001      	movls	r0, #1
 80009f4:	2000      	movhi	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpgt>:
 80009fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a00:	f7ff ffc4 	bl	800098c <__aeabi_cdrcmple>
 8000a04:	bf34      	ite	cc
 8000a06:	2001      	movcc	r0, #1
 8000a08:	2000      	movcs	r0, #0
 8000a0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0e:	bf00      	nop

08000a10 <__aeabi_dcmpun>:
 8000a10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d102      	bne.n	8000a20 <__aeabi_dcmpun+0x10>
 8000a1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1e:	d10a      	bne.n	8000a36 <__aeabi_dcmpun+0x26>
 8000a20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x20>
 8000a2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2e:	d102      	bne.n	8000a36 <__aeabi_dcmpun+0x26>
 8000a30:	f04f 0000 	mov.w	r0, #0
 8000a34:	4770      	bx	lr
 8000a36:	f04f 0001 	mov.w	r0, #1
 8000a3a:	4770      	bx	lr

08000a3c <__aeabi_d2uiz>:
 8000a3c:	004a      	lsls	r2, r1, #1
 8000a3e:	d211      	bcs.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a40:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a44:	d211      	bcs.n	8000a6a <__aeabi_d2uiz+0x2e>
 8000a46:	d50d      	bpl.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a48:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a50:	d40e      	bmi.n	8000a70 <__aeabi_d2uiz+0x34>
 8000a52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a56:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d102      	bne.n	8000a76 <__aeabi_d2uiz+0x3a>
 8000a70:	f04f 30ff 	mov.w	r0, #4294967295
 8000a74:	4770      	bx	lr
 8000a76:	f04f 0000 	mov.w	r0, #0
 8000a7a:	4770      	bx	lr

08000a7c <__aeabi_d2f>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a84:	bf24      	itt	cs
 8000a86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a8e:	d90d      	bls.n	8000aac <__aeabi_d2f+0x30>
 8000a90:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a9c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aa0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa4:	bf08      	it	eq
 8000aa6:	f020 0001 	biceq.w	r0, r0, #1
 8000aaa:	4770      	bx	lr
 8000aac:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ab0:	d121      	bne.n	8000af6 <__aeabi_d2f+0x7a>
 8000ab2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ab6:	bfbc      	itt	lt
 8000ab8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000abc:	4770      	bxlt	lr
 8000abe:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ac2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac6:	f1c2 0218 	rsb	r2, r2, #24
 8000aca:	f1c2 0c20 	rsb	ip, r2, #32
 8000ace:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ad2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad6:	bf18      	it	ne
 8000ad8:	f040 0001 	orrne.w	r0, r0, #1
 8000adc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae8:	ea40 000c 	orr.w	r0, r0, ip
 8000aec:	fa23 f302 	lsr.w	r3, r3, r2
 8000af0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af4:	e7cc      	b.n	8000a90 <__aeabi_d2f+0x14>
 8000af6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000afa:	d107      	bne.n	8000b0c <__aeabi_d2f+0x90>
 8000afc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b00:	bf1e      	ittt	ne
 8000b02:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b06:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b0a:	4770      	bxne	lr
 8000b0c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b10:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b14:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop

08000b1c <__aeabi_frsub>:
 8000b1c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b20:	e002      	b.n	8000b28 <__addsf3>
 8000b22:	bf00      	nop

08000b24 <__aeabi_fsub>:
 8000b24:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b28 <__addsf3>:
 8000b28:	0042      	lsls	r2, r0, #1
 8000b2a:	bf1f      	itttt	ne
 8000b2c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b30:	ea92 0f03 	teqne	r2, r3
 8000b34:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b38:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b3c:	d06a      	beq.n	8000c14 <__addsf3+0xec>
 8000b3e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b42:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b46:	bfc1      	itttt	gt
 8000b48:	18d2      	addgt	r2, r2, r3
 8000b4a:	4041      	eorgt	r1, r0
 8000b4c:	4048      	eorgt	r0, r1
 8000b4e:	4041      	eorgt	r1, r0
 8000b50:	bfb8      	it	lt
 8000b52:	425b      	neglt	r3, r3
 8000b54:	2b19      	cmp	r3, #25
 8000b56:	bf88      	it	hi
 8000b58:	4770      	bxhi	lr
 8000b5a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b5e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b62:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b6e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b72:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b76:	bf18      	it	ne
 8000b78:	4249      	negne	r1, r1
 8000b7a:	ea92 0f03 	teq	r2, r3
 8000b7e:	d03f      	beq.n	8000c00 <__addsf3+0xd8>
 8000b80:	f1a2 0201 	sub.w	r2, r2, #1
 8000b84:	fa41 fc03 	asr.w	ip, r1, r3
 8000b88:	eb10 000c 	adds.w	r0, r0, ip
 8000b8c:	f1c3 0320 	rsb	r3, r3, #32
 8000b90:	fa01 f103 	lsl.w	r1, r1, r3
 8000b94:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b98:	d502      	bpl.n	8000ba0 <__addsf3+0x78>
 8000b9a:	4249      	negs	r1, r1
 8000b9c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ba0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000ba4:	d313      	bcc.n	8000bce <__addsf3+0xa6>
 8000ba6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000baa:	d306      	bcc.n	8000bba <__addsf3+0x92>
 8000bac:	0840      	lsrs	r0, r0, #1
 8000bae:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bb2:	f102 0201 	add.w	r2, r2, #1
 8000bb6:	2afe      	cmp	r2, #254	@ 0xfe
 8000bb8:	d251      	bcs.n	8000c5e <__addsf3+0x136>
 8000bba:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bbe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bc2:	bf08      	it	eq
 8000bc4:	f020 0001 	biceq.w	r0, r0, #1
 8000bc8:	ea40 0003 	orr.w	r0, r0, r3
 8000bcc:	4770      	bx	lr
 8000bce:	0049      	lsls	r1, r1, #1
 8000bd0:	eb40 0000 	adc.w	r0, r0, r0
 8000bd4:	3a01      	subs	r2, #1
 8000bd6:	bf28      	it	cs
 8000bd8:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bdc:	d2ed      	bcs.n	8000bba <__addsf3+0x92>
 8000bde:	fab0 fc80 	clz	ip, r0
 8000be2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000be6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bea:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bee:	bfaa      	itet	ge
 8000bf0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf4:	4252      	neglt	r2, r2
 8000bf6:	4318      	orrge	r0, r3
 8000bf8:	bfbc      	itt	lt
 8000bfa:	40d0      	lsrlt	r0, r2
 8000bfc:	4318      	orrlt	r0, r3
 8000bfe:	4770      	bx	lr
 8000c00:	f092 0f00 	teq	r2, #0
 8000c04:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c08:	bf06      	itte	eq
 8000c0a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c0e:	3201      	addeq	r2, #1
 8000c10:	3b01      	subne	r3, #1
 8000c12:	e7b5      	b.n	8000b80 <__addsf3+0x58>
 8000c14:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c18:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c1c:	bf18      	it	ne
 8000c1e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c22:	d021      	beq.n	8000c68 <__addsf3+0x140>
 8000c24:	ea92 0f03 	teq	r2, r3
 8000c28:	d004      	beq.n	8000c34 <__addsf3+0x10c>
 8000c2a:	f092 0f00 	teq	r2, #0
 8000c2e:	bf08      	it	eq
 8000c30:	4608      	moveq	r0, r1
 8000c32:	4770      	bx	lr
 8000c34:	ea90 0f01 	teq	r0, r1
 8000c38:	bf1c      	itt	ne
 8000c3a:	2000      	movne	r0, #0
 8000c3c:	4770      	bxne	lr
 8000c3e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c42:	d104      	bne.n	8000c4e <__addsf3+0x126>
 8000c44:	0040      	lsls	r0, r0, #1
 8000c46:	bf28      	it	cs
 8000c48:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c4c:	4770      	bx	lr
 8000c4e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c52:	bf3c      	itt	cc
 8000c54:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c58:	4770      	bxcc	lr
 8000c5a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c5e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c62:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c66:	4770      	bx	lr
 8000c68:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c6c:	bf16      	itet	ne
 8000c6e:	4608      	movne	r0, r1
 8000c70:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c74:	4601      	movne	r1, r0
 8000c76:	0242      	lsls	r2, r0, #9
 8000c78:	bf06      	itte	eq
 8000c7a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c7e:	ea90 0f01 	teqeq	r0, r1
 8000c82:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c86:	4770      	bx	lr

08000c88 <__aeabi_ui2f>:
 8000c88:	f04f 0300 	mov.w	r3, #0
 8000c8c:	e004      	b.n	8000c98 <__aeabi_i2f+0x8>
 8000c8e:	bf00      	nop

08000c90 <__aeabi_i2f>:
 8000c90:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c94:	bf48      	it	mi
 8000c96:	4240      	negmi	r0, r0
 8000c98:	ea5f 0c00 	movs.w	ip, r0
 8000c9c:	bf08      	it	eq
 8000c9e:	4770      	bxeq	lr
 8000ca0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ca4:	4601      	mov	r1, r0
 8000ca6:	f04f 0000 	mov.w	r0, #0
 8000caa:	e01c      	b.n	8000ce6 <__aeabi_l2f+0x2a>

08000cac <__aeabi_ul2f>:
 8000cac:	ea50 0201 	orrs.w	r2, r0, r1
 8000cb0:	bf08      	it	eq
 8000cb2:	4770      	bxeq	lr
 8000cb4:	f04f 0300 	mov.w	r3, #0
 8000cb8:	e00a      	b.n	8000cd0 <__aeabi_l2f+0x14>
 8000cba:	bf00      	nop

08000cbc <__aeabi_l2f>:
 8000cbc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc0:	bf08      	it	eq
 8000cc2:	4770      	bxeq	lr
 8000cc4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cc8:	d502      	bpl.n	8000cd0 <__aeabi_l2f+0x14>
 8000cca:	4240      	negs	r0, r0
 8000ccc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd0:	ea5f 0c01 	movs.w	ip, r1
 8000cd4:	bf02      	ittt	eq
 8000cd6:	4684      	moveq	ip, r0
 8000cd8:	4601      	moveq	r1, r0
 8000cda:	2000      	moveq	r0, #0
 8000cdc:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000ce0:	bf08      	it	eq
 8000ce2:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000ce6:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cea:	fabc f28c 	clz	r2, ip
 8000cee:	3a08      	subs	r2, #8
 8000cf0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf4:	db10      	blt.n	8000d18 <__aeabi_l2f+0x5c>
 8000cf6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d00:	f1c2 0220 	rsb	r2, r2, #32
 8000d04:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d08:	fa20 f202 	lsr.w	r2, r0, r2
 8000d0c:	eb43 0002 	adc.w	r0, r3, r2
 8000d10:	bf08      	it	eq
 8000d12:	f020 0001 	biceq.w	r0, r0, #1
 8000d16:	4770      	bx	lr
 8000d18:	f102 0220 	add.w	r2, r2, #32
 8000d1c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d20:	f1c2 0220 	rsb	r2, r2, #32
 8000d24:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d28:	fa21 f202 	lsr.w	r2, r1, r2
 8000d2c:	eb43 0002 	adc.w	r0, r3, r2
 8000d30:	bf08      	it	eq
 8000d32:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d36:	4770      	bx	lr

08000d38 <__aeabi_fmul>:
 8000d38:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d3c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d40:	bf1e      	ittt	ne
 8000d42:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d46:	ea92 0f0c 	teqne	r2, ip
 8000d4a:	ea93 0f0c 	teqne	r3, ip
 8000d4e:	d06f      	beq.n	8000e30 <__aeabi_fmul+0xf8>
 8000d50:	441a      	add	r2, r3
 8000d52:	ea80 0c01 	eor.w	ip, r0, r1
 8000d56:	0240      	lsls	r0, r0, #9
 8000d58:	bf18      	it	ne
 8000d5a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d5e:	d01e      	beq.n	8000d9e <__aeabi_fmul+0x66>
 8000d60:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d64:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d68:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d6c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d70:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d74:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d78:	bf3e      	ittt	cc
 8000d7a:	0049      	lslcc	r1, r1, #1
 8000d7c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d80:	005b      	lslcc	r3, r3, #1
 8000d82:	ea40 0001 	orr.w	r0, r0, r1
 8000d86:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d8a:	2afd      	cmp	r2, #253	@ 0xfd
 8000d8c:	d81d      	bhi.n	8000dca <__aeabi_fmul+0x92>
 8000d8e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d92:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d96:	bf08      	it	eq
 8000d98:	f020 0001 	biceq.w	r0, r0, #1
 8000d9c:	4770      	bx	lr
 8000d9e:	f090 0f00 	teq	r0, #0
 8000da2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000da6:	bf08      	it	eq
 8000da8:	0249      	lsleq	r1, r1, #9
 8000daa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dae:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000db2:	3a7f      	subs	r2, #127	@ 0x7f
 8000db4:	bfc2      	ittt	gt
 8000db6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dba:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dbe:	4770      	bxgt	lr
 8000dc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dc4:	f04f 0300 	mov.w	r3, #0
 8000dc8:	3a01      	subs	r2, #1
 8000dca:	dc5d      	bgt.n	8000e88 <__aeabi_fmul+0x150>
 8000dcc:	f112 0f19 	cmn.w	r2, #25
 8000dd0:	bfdc      	itt	le
 8000dd2:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000dd6:	4770      	bxle	lr
 8000dd8:	f1c2 0200 	rsb	r2, r2, #0
 8000ddc:	0041      	lsls	r1, r0, #1
 8000dde:	fa21 f102 	lsr.w	r1, r1, r2
 8000de2:	f1c2 0220 	rsb	r2, r2, #32
 8000de6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dea:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dee:	f140 0000 	adc.w	r0, r0, #0
 8000df2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000df6:	bf08      	it	eq
 8000df8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dfc:	4770      	bx	lr
 8000dfe:	f092 0f00 	teq	r2, #0
 8000e02:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e06:	bf02      	ittt	eq
 8000e08:	0040      	lsleq	r0, r0, #1
 8000e0a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e0e:	3a01      	subeq	r2, #1
 8000e10:	d0f9      	beq.n	8000e06 <__aeabi_fmul+0xce>
 8000e12:	ea40 000c 	orr.w	r0, r0, ip
 8000e16:	f093 0f00 	teq	r3, #0
 8000e1a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e1e:	bf02      	ittt	eq
 8000e20:	0049      	lsleq	r1, r1, #1
 8000e22:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e26:	3b01      	subeq	r3, #1
 8000e28:	d0f9      	beq.n	8000e1e <__aeabi_fmul+0xe6>
 8000e2a:	ea41 010c 	orr.w	r1, r1, ip
 8000e2e:	e78f      	b.n	8000d50 <__aeabi_fmul+0x18>
 8000e30:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e34:	ea92 0f0c 	teq	r2, ip
 8000e38:	bf18      	it	ne
 8000e3a:	ea93 0f0c 	teqne	r3, ip
 8000e3e:	d00a      	beq.n	8000e56 <__aeabi_fmul+0x11e>
 8000e40:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e44:	bf18      	it	ne
 8000e46:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e4a:	d1d8      	bne.n	8000dfe <__aeabi_fmul+0xc6>
 8000e4c:	ea80 0001 	eor.w	r0, r0, r1
 8000e50:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e54:	4770      	bx	lr
 8000e56:	f090 0f00 	teq	r0, #0
 8000e5a:	bf17      	itett	ne
 8000e5c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e60:	4608      	moveq	r0, r1
 8000e62:	f091 0f00 	teqne	r1, #0
 8000e66:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e6a:	d014      	beq.n	8000e96 <__aeabi_fmul+0x15e>
 8000e6c:	ea92 0f0c 	teq	r2, ip
 8000e70:	d101      	bne.n	8000e76 <__aeabi_fmul+0x13e>
 8000e72:	0242      	lsls	r2, r0, #9
 8000e74:	d10f      	bne.n	8000e96 <__aeabi_fmul+0x15e>
 8000e76:	ea93 0f0c 	teq	r3, ip
 8000e7a:	d103      	bne.n	8000e84 <__aeabi_fmul+0x14c>
 8000e7c:	024b      	lsls	r3, r1, #9
 8000e7e:	bf18      	it	ne
 8000e80:	4608      	movne	r0, r1
 8000e82:	d108      	bne.n	8000e96 <__aeabi_fmul+0x15e>
 8000e84:	ea80 0001 	eor.w	r0, r0, r1
 8000e88:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e94:	4770      	bx	lr
 8000e96:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e9a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e9e:	4770      	bx	lr

08000ea0 <__aeabi_fdiv>:
 8000ea0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ea4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ea8:	bf1e      	ittt	ne
 8000eaa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eae:	ea92 0f0c 	teqne	r2, ip
 8000eb2:	ea93 0f0c 	teqne	r3, ip
 8000eb6:	d069      	beq.n	8000f8c <__aeabi_fdiv+0xec>
 8000eb8:	eba2 0203 	sub.w	r2, r2, r3
 8000ebc:	ea80 0c01 	eor.w	ip, r0, r1
 8000ec0:	0249      	lsls	r1, r1, #9
 8000ec2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ec6:	d037      	beq.n	8000f38 <__aeabi_fdiv+0x98>
 8000ec8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ecc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ed0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ed4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ed8:	428b      	cmp	r3, r1
 8000eda:	bf38      	it	cc
 8000edc:	005b      	lslcc	r3, r3, #1
 8000ede:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000ee2:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	bf24      	itt	cs
 8000eea:	1a5b      	subcs	r3, r3, r1
 8000eec:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ef0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ef4:	bf24      	itt	cs
 8000ef6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000efa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000efe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f02:	bf24      	itt	cs
 8000f04:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f08:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f0c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f10:	bf24      	itt	cs
 8000f12:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f16:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f1a:	011b      	lsls	r3, r3, #4
 8000f1c:	bf18      	it	ne
 8000f1e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f22:	d1e0      	bne.n	8000ee6 <__aeabi_fdiv+0x46>
 8000f24:	2afd      	cmp	r2, #253	@ 0xfd
 8000f26:	f63f af50 	bhi.w	8000dca <__aeabi_fmul+0x92>
 8000f2a:	428b      	cmp	r3, r1
 8000f2c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f30:	bf08      	it	eq
 8000f32:	f020 0001 	biceq.w	r0, r0, #1
 8000f36:	4770      	bx	lr
 8000f38:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f3c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f40:	327f      	adds	r2, #127	@ 0x7f
 8000f42:	bfc2      	ittt	gt
 8000f44:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f48:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f4c:	4770      	bxgt	lr
 8000f4e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f52:	f04f 0300 	mov.w	r3, #0
 8000f56:	3a01      	subs	r2, #1
 8000f58:	e737      	b.n	8000dca <__aeabi_fmul+0x92>
 8000f5a:	f092 0f00 	teq	r2, #0
 8000f5e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f62:	bf02      	ittt	eq
 8000f64:	0040      	lsleq	r0, r0, #1
 8000f66:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f6a:	3a01      	subeq	r2, #1
 8000f6c:	d0f9      	beq.n	8000f62 <__aeabi_fdiv+0xc2>
 8000f6e:	ea40 000c 	orr.w	r0, r0, ip
 8000f72:	f093 0f00 	teq	r3, #0
 8000f76:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f7a:	bf02      	ittt	eq
 8000f7c:	0049      	lsleq	r1, r1, #1
 8000f7e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f82:	3b01      	subeq	r3, #1
 8000f84:	d0f9      	beq.n	8000f7a <__aeabi_fdiv+0xda>
 8000f86:	ea41 010c 	orr.w	r1, r1, ip
 8000f8a:	e795      	b.n	8000eb8 <__aeabi_fdiv+0x18>
 8000f8c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f90:	ea92 0f0c 	teq	r2, ip
 8000f94:	d108      	bne.n	8000fa8 <__aeabi_fdiv+0x108>
 8000f96:	0242      	lsls	r2, r0, #9
 8000f98:	f47f af7d 	bne.w	8000e96 <__aeabi_fmul+0x15e>
 8000f9c:	ea93 0f0c 	teq	r3, ip
 8000fa0:	f47f af70 	bne.w	8000e84 <__aeabi_fmul+0x14c>
 8000fa4:	4608      	mov	r0, r1
 8000fa6:	e776      	b.n	8000e96 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	d104      	bne.n	8000fb8 <__aeabi_fdiv+0x118>
 8000fae:	024b      	lsls	r3, r1, #9
 8000fb0:	f43f af4c 	beq.w	8000e4c <__aeabi_fmul+0x114>
 8000fb4:	4608      	mov	r0, r1
 8000fb6:	e76e      	b.n	8000e96 <__aeabi_fmul+0x15e>
 8000fb8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fbc:	bf18      	it	ne
 8000fbe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fc2:	d1ca      	bne.n	8000f5a <__aeabi_fdiv+0xba>
 8000fc4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fc8:	f47f af5c 	bne.w	8000e84 <__aeabi_fmul+0x14c>
 8000fcc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fd0:	f47f af3c 	bne.w	8000e4c <__aeabi_fmul+0x114>
 8000fd4:	e75f      	b.n	8000e96 <__aeabi_fmul+0x15e>
 8000fd6:	bf00      	nop

08000fd8 <__gesf2>:
 8000fd8:	f04f 3cff 	mov.w	ip, #4294967295
 8000fdc:	e006      	b.n	8000fec <__cmpsf2+0x4>
 8000fde:	bf00      	nop

08000fe0 <__lesf2>:
 8000fe0:	f04f 0c01 	mov.w	ip, #1
 8000fe4:	e002      	b.n	8000fec <__cmpsf2+0x4>
 8000fe6:	bf00      	nop

08000fe8 <__cmpsf2>:
 8000fe8:	f04f 0c01 	mov.w	ip, #1
 8000fec:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ff0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ff4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ff8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ffc:	bf18      	it	ne
 8000ffe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001002:	d011      	beq.n	8001028 <__cmpsf2+0x40>
 8001004:	b001      	add	sp, #4
 8001006:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800100a:	bf18      	it	ne
 800100c:	ea90 0f01 	teqne	r0, r1
 8001010:	bf58      	it	pl
 8001012:	ebb2 0003 	subspl.w	r0, r2, r3
 8001016:	bf88      	it	hi
 8001018:	17c8      	asrhi	r0, r1, #31
 800101a:	bf38      	it	cc
 800101c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001020:	bf18      	it	ne
 8001022:	f040 0001 	orrne.w	r0, r0, #1
 8001026:	4770      	bx	lr
 8001028:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800102c:	d102      	bne.n	8001034 <__cmpsf2+0x4c>
 800102e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001032:	d105      	bne.n	8001040 <__cmpsf2+0x58>
 8001034:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001038:	d1e4      	bne.n	8001004 <__cmpsf2+0x1c>
 800103a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800103e:	d0e1      	beq.n	8001004 <__cmpsf2+0x1c>
 8001040:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop

08001048 <__aeabi_cfrcmple>:
 8001048:	4684      	mov	ip, r0
 800104a:	4608      	mov	r0, r1
 800104c:	4661      	mov	r1, ip
 800104e:	e7ff      	b.n	8001050 <__aeabi_cfcmpeq>

08001050 <__aeabi_cfcmpeq>:
 8001050:	b50f      	push	{r0, r1, r2, r3, lr}
 8001052:	f7ff ffc9 	bl	8000fe8 <__cmpsf2>
 8001056:	2800      	cmp	r0, #0
 8001058:	bf48      	it	mi
 800105a:	f110 0f00 	cmnmi.w	r0, #0
 800105e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001060 <__aeabi_fcmpeq>:
 8001060:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001064:	f7ff fff4 	bl	8001050 <__aeabi_cfcmpeq>
 8001068:	bf0c      	ite	eq
 800106a:	2001      	moveq	r0, #1
 800106c:	2000      	movne	r0, #0
 800106e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001072:	bf00      	nop

08001074 <__aeabi_fcmplt>:
 8001074:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001078:	f7ff ffea 	bl	8001050 <__aeabi_cfcmpeq>
 800107c:	bf34      	ite	cc
 800107e:	2001      	movcc	r0, #1
 8001080:	2000      	movcs	r0, #0
 8001082:	f85d fb08 	ldr.w	pc, [sp], #8
 8001086:	bf00      	nop

08001088 <__aeabi_fcmple>:
 8001088:	f84d ed08 	str.w	lr, [sp, #-8]!
 800108c:	f7ff ffe0 	bl	8001050 <__aeabi_cfcmpeq>
 8001090:	bf94      	ite	ls
 8001092:	2001      	movls	r0, #1
 8001094:	2000      	movhi	r0, #0
 8001096:	f85d fb08 	ldr.w	pc, [sp], #8
 800109a:	bf00      	nop

0800109c <__aeabi_fcmpge>:
 800109c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a0:	f7ff ffd2 	bl	8001048 <__aeabi_cfrcmple>
 80010a4:	bf94      	ite	ls
 80010a6:	2001      	movls	r0, #1
 80010a8:	2000      	movhi	r0, #0
 80010aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ae:	bf00      	nop

080010b0 <__aeabi_fcmpgt>:
 80010b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b4:	f7ff ffc8 	bl	8001048 <__aeabi_cfrcmple>
 80010b8:	bf34      	ite	cc
 80010ba:	2001      	movcc	r0, #1
 80010bc:	2000      	movcs	r0, #0
 80010be:	f85d fb08 	ldr.w	pc, [sp], #8
 80010c2:	bf00      	nop

080010c4 <__aeabi_fcmpun>:
 80010c4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010c8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010cc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010d0:	d102      	bne.n	80010d8 <__aeabi_fcmpun+0x14>
 80010d2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010d6:	d108      	bne.n	80010ea <__aeabi_fcmpun+0x26>
 80010d8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010dc:	d102      	bne.n	80010e4 <__aeabi_fcmpun+0x20>
 80010de:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010e2:	d102      	bne.n	80010ea <__aeabi_fcmpun+0x26>
 80010e4:	f04f 0000 	mov.w	r0, #0
 80010e8:	4770      	bx	lr
 80010ea:	f04f 0001 	mov.w	r0, #1
 80010ee:	4770      	bx	lr

080010f0 <__aeabi_f2iz>:
 80010f0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010f4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010f8:	d30f      	bcc.n	800111a <__aeabi_f2iz+0x2a>
 80010fa:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010fe:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001102:	d90d      	bls.n	8001120 <__aeabi_f2iz+0x30>
 8001104:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001108:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800110c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001110:	fa23 f002 	lsr.w	r0, r3, r2
 8001114:	bf18      	it	ne
 8001116:	4240      	negne	r0, r0
 8001118:	4770      	bx	lr
 800111a:	f04f 0000 	mov.w	r0, #0
 800111e:	4770      	bx	lr
 8001120:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001124:	d101      	bne.n	800112a <__aeabi_f2iz+0x3a>
 8001126:	0242      	lsls	r2, r0, #9
 8001128:	d105      	bne.n	8001136 <__aeabi_f2iz+0x46>
 800112a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800112e:	bf08      	it	eq
 8001130:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001134:	4770      	bx	lr
 8001136:	f04f 0000 	mov.w	r0, #0
 800113a:	4770      	bx	lr

0800113c <__aeabi_d2lz>:
 800113c:	b538      	push	{r3, r4, r5, lr}
 800113e:	2200      	movs	r2, #0
 8001140:	2300      	movs	r3, #0
 8001142:	4604      	mov	r4, r0
 8001144:	460d      	mov	r5, r1
 8001146:	f7ff fc3b 	bl	80009c0 <__aeabi_dcmplt>
 800114a:	b928      	cbnz	r0, 8001158 <__aeabi_d2lz+0x1c>
 800114c:	4620      	mov	r0, r4
 800114e:	4629      	mov	r1, r5
 8001150:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001154:	f000 b80a 	b.w	800116c <__aeabi_d2ulz>
 8001158:	4620      	mov	r0, r4
 800115a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 800115e:	f000 f805 	bl	800116c <__aeabi_d2ulz>
 8001162:	4240      	negs	r0, r0
 8001164:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001168:	bd38      	pop	{r3, r4, r5, pc}
 800116a:	bf00      	nop

0800116c <__aeabi_d2ulz>:
 800116c:	b5d0      	push	{r4, r6, r7, lr}
 800116e:	2200      	movs	r2, #0
 8001170:	4b0b      	ldr	r3, [pc, #44]	@ (80011a0 <__aeabi_d2ulz+0x34>)
 8001172:	4606      	mov	r6, r0
 8001174:	460f      	mov	r7, r1
 8001176:	f7ff f9b1 	bl	80004dc <__aeabi_dmul>
 800117a:	f7ff fc5f 	bl	8000a3c <__aeabi_d2uiz>
 800117e:	4604      	mov	r4, r0
 8001180:	f7ff f932 	bl	80003e8 <__aeabi_ui2d>
 8001184:	2200      	movs	r2, #0
 8001186:	4b07      	ldr	r3, [pc, #28]	@ (80011a4 <__aeabi_d2ulz+0x38>)
 8001188:	f7ff f9a8 	bl	80004dc <__aeabi_dmul>
 800118c:	4602      	mov	r2, r0
 800118e:	460b      	mov	r3, r1
 8001190:	4630      	mov	r0, r6
 8001192:	4639      	mov	r1, r7
 8001194:	f7fe ffea 	bl	800016c <__aeabi_dsub>
 8001198:	f7ff fc50 	bl	8000a3c <__aeabi_d2uiz>
 800119c:	4621      	mov	r1, r4
 800119e:	bdd0      	pop	{r4, r6, r7, pc}
 80011a0:	3df00000 	.word	0x3df00000
 80011a4:	41f00000 	.word	0x41f00000

080011a8 <buttonInit>:
};



void buttonInit()
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  cliAdd("button", cliButton);
 80011ac:	4902      	ldr	r1, [pc, #8]	@ (80011b8 <buttonInit+0x10>)
 80011ae:	4803      	ldr	r0, [pc, #12]	@ (80011bc <buttonInit+0x14>)
 80011b0:	f000 feaa 	bl	8001f08 <cliAdd>
}
 80011b4:	bf00      	nop
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	080011c1 	.word	0x080011c1
 80011bc:	080096b0 	.word	0x080096b0

080011c0 <cliButton>:

void cliButton(cli_args_t *args)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  bool ret = false;
 80011c8:	2300      	movs	r3, #0
 80011ca:	75fb      	strb	r3, [r7, #23]

  if(args->argc == 1 && args->isStr(0, "show"))
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	881b      	ldrh	r3, [r3, #0]
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d142      	bne.n	800125a <cliButton+0x9a>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	695b      	ldr	r3, [r3, #20]
 80011d8:	4926      	ldr	r1, [pc, #152]	@ (8001274 <cliButton+0xb4>)
 80011da:	2000      	movs	r0, #0
 80011dc:	4798      	blx	r3
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d03a      	beq.n	800125a <cliButton+0x9a>
  {
    uint8_t str = 0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	73fb      	strb	r3, [r7, #15]

    while(cliKeepLoop())
 80011e8:	e02e      	b.n	8001248 <cliButton+0x88>
    {
      str = uartRead(CH_USART1);
 80011ea:	2001      	movs	r0, #1
 80011ec:	f001 f83a 	bl	8002264 <uartRead>
 80011f0:	4603      	mov	r3, r0
 80011f2:	73fb      	strb	r3, [r7, #15]

      if(str == 0x0D) break;
 80011f4:	7bfb      	ldrb	r3, [r7, #15]
 80011f6:	2b0d      	cmp	r3, #13
 80011f8:	d02c      	beq.n	8001254 <cliButton+0x94>

      for(int i=0; i<BUTTON_MAX_CH; i++)
 80011fa:	2300      	movs	r3, #0
 80011fc:	613b      	str	r3, [r7, #16]
 80011fe:	e01a      	b.n	8001236 <cliButton+0x76>
      {
        cliPrintf("%d ", !HAL_GPIO_ReadPin(button_tbl[i].port, button_tbl[i].pin));
 8001200:	4a1d      	ldr	r2, [pc, #116]	@ (8001278 <cliButton+0xb8>)
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001208:	491b      	ldr	r1, [pc, #108]	@ (8001278 <cliButton+0xb8>)
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	00db      	lsls	r3, r3, #3
 800120e:	440b      	add	r3, r1
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	b29b      	uxth	r3, r3
 8001214:	4619      	mov	r1, r3
 8001216:	4610      	mov	r0, r2
 8001218:	f002 fce8 	bl	8003bec <HAL_GPIO_ReadPin>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	bf0c      	ite	eq
 8001222:	2301      	moveq	r3, #1
 8001224:	2300      	movne	r3, #0
 8001226:	b2db      	uxtb	r3, r3
 8001228:	4619      	mov	r1, r3
 800122a:	4814      	ldr	r0, [pc, #80]	@ (800127c <cliButton+0xbc>)
 800122c:	f000 fd6a 	bl	8001d04 <cliPrintf>
      for(int i=0; i<BUTTON_MAX_CH; i++)
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	3301      	adds	r3, #1
 8001234:	613b      	str	r3, [r7, #16]
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	2b00      	cmp	r3, #0
 800123a:	dde1      	ble.n	8001200 <cliButton+0x40>
      }
      cliPrintf("\n");
 800123c:	4810      	ldr	r0, [pc, #64]	@ (8001280 <cliButton+0xc0>)
 800123e:	f000 fd61 	bl	8001d04 <cliPrintf>

      HAL_Delay(50);
 8001242:	2032      	movs	r0, #50	@ 0x32
 8001244:	f001 ff7a 	bl	800313c <HAL_Delay>
    while(cliKeepLoop())
 8001248:	f000 fe50 	bl	8001eec <cliKeepLoop>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d1cb      	bne.n	80011ea <cliButton+0x2a>
 8001252:	e000      	b.n	8001256 <cliButton+0x96>
      if(str == 0x0D) break;
 8001254:	bf00      	nop
    }

    ret = true;
 8001256:	2301      	movs	r3, #1
 8001258:	75fb      	strb	r3, [r7, #23]
  }

  if(ret != true)
 800125a:	7dfb      	ldrb	r3, [r7, #23]
 800125c:	f083 0301 	eor.w	r3, r3, #1
 8001260:	b2db      	uxtb	r3, r3
 8001262:	2b00      	cmp	r3, #0
 8001264:	d002      	beq.n	800126c <cliButton+0xac>
  {
    cliPrintf("button show\n");
 8001266:	4807      	ldr	r0, [pc, #28]	@ (8001284 <cliButton+0xc4>)
 8001268:	f000 fd4c 	bl	8001d04 <cliPrintf>
  }
}
 800126c:	bf00      	nop
 800126e:	3718      	adds	r7, #24
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	080096b8 	.word	0x080096b8
 8001278:	20000000 	.word	0x20000000
 800127c:	080096c0 	.word	0x080096c0
 8001280:	080096c4 	.word	0x080096c4
 8001284:	080096c8 	.word	0x080096c8

08001288 <cliInit>:
void cliShowList(cli_args_t *args);
void cliMemoryDump(cli_args_t *args);


bool cliInit(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  cli_node.is_open = false;
 800128c:	4b1b      	ldr	r3, [pc, #108]	@ (80012fc <cliInit+0x74>)
 800128e:	2200      	movs	r2, #0
 8001290:	721a      	strb	r2, [r3, #8]
  cli_node.is_log  = false;
 8001292:	4b1a      	ldr	r3, [pc, #104]	@ (80012fc <cliInit+0x74>)
 8001294:	2200      	movs	r2, #0
 8001296:	725a      	strb	r2, [r3, #9]
  cli_node.state   = CLI_RX_IDLE;
 8001298:	4b18      	ldr	r3, [pc, #96]	@ (80012fc <cliInit+0x74>)
 800129a:	2200      	movs	r2, #0
 800129c:	741a      	strb	r2, [r3, #16]

  cli_node.hist_line_i     = 0;
 800129e:	4b17      	ldr	r3, [pc, #92]	@ (80012fc <cliInit+0x74>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
  cli_node.hist_line_last  = 0;
 80012a6:	4b15      	ldr	r3, [pc, #84]	@ (80012fc <cliInit+0x74>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
  cli_node.hist_line_count = 0;
 80012ae:	4b13      	ldr	r3, [pc, #76]	@ (80012fc <cliInit+0x74>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	f883 2197 	strb.w	r2, [r3, #407]	@ 0x197
  cli_node.hist_line_new   = false;
 80012b6:	4b11      	ldr	r3, [pc, #68]	@ (80012fc <cliInit+0x74>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	f883 2194 	strb.w	r2, [r3, #404]	@ 0x194

  cli_node.cmd_args.getData  = cliArgsGetData;
 80012be:	4b0f      	ldr	r3, [pc, #60]	@ (80012fc <cliInit+0x74>)
 80012c0:	4a0f      	ldr	r2, [pc, #60]	@ (8001300 <cliInit+0x78>)
 80012c2:	f8c3 2434 	str.w	r2, [r3, #1076]	@ 0x434
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 80012c6:	4b0d      	ldr	r3, [pc, #52]	@ (80012fc <cliInit+0x74>)
 80012c8:	4a0e      	ldr	r2, [pc, #56]	@ (8001304 <cliInit+0x7c>)
 80012ca:	f8c3 2438 	str.w	r2, [r3, #1080]	@ 0x438
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 80012ce:	4b0b      	ldr	r3, [pc, #44]	@ (80012fc <cliInit+0x74>)
 80012d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001308 <cliInit+0x80>)
 80012d2:	f8c3 243c 	str.w	r2, [r3, #1084]	@ 0x43c
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 80012d6:	4b09      	ldr	r3, [pc, #36]	@ (80012fc <cliInit+0x74>)
 80012d8:	4a0c      	ldr	r2, [pc, #48]	@ (800130c <cliInit+0x84>)
 80012da:	f8c3 2440 	str.w	r2, [r3, #1088]	@ 0x440

  cliLineClean(&cli_node);
 80012de:	4807      	ldr	r0, [pc, #28]	@ (80012fc <cliInit+0x74>)
 80012e0:	f000 fb86 	bl	80019f0 <cliLineClean>

  cliAdd("help", cliShowList);
 80012e4:	490a      	ldr	r1, [pc, #40]	@ (8001310 <cliInit+0x88>)
 80012e6:	480b      	ldr	r0, [pc, #44]	@ (8001314 <cliInit+0x8c>)
 80012e8:	f000 fe0e 	bl	8001f08 <cliAdd>
  cliAdd("md"  , cliMemoryDump);
 80012ec:	490a      	ldr	r1, [pc, #40]	@ (8001318 <cliInit+0x90>)
 80012ee:	480b      	ldr	r0, [pc, #44]	@ (800131c <cliInit+0x94>)
 80012f0:	f000 fe0a 	bl	8001f08 <cliAdd>

  return true;
 80012f4:	2301      	movs	r3, #1
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	200001fc 	.word	0x200001fc
 8001300:	08001db5 	.word	0x08001db5
 8001304:	08001e05 	.word	0x08001e05
 8001308:	08001e55 	.word	0x08001e55
 800130c:	08001e99 	.word	0x08001e99
 8001310:	08001f9d 	.word	0x08001f9d
 8001314:	080096d8 	.word	0x080096d8
 8001318:	0800200d 	.word	0x0800200d
 800131c:	080096e0 	.word	0x080096e0

08001320 <cliOpen>:

bool cliOpen(uint8_t ch, uint32_t baud)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	6039      	str	r1, [r7, #0]
 800132a:	71fb      	strb	r3, [r7, #7]
  cli_node.ch = ch;
 800132c:	4a1c      	ldr	r2, [pc, #112]	@ (80013a0 <cliOpen+0x80>)
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	7013      	strb	r3, [r2, #0]
  cli_node.baud = baud;
 8001332:	4a1b      	ldr	r2, [pc, #108]	@ (80013a0 <cliOpen+0x80>)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	6053      	str	r3, [r2, #4]

  qbuffer.in = 0;
 8001338:	4b1a      	ldr	r3, [pc, #104]	@ (80013a4 <cliOpen+0x84>)
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
  qbuffer.out = 0;
 800133e:	4b19      	ldr	r3, [pc, #100]	@ (80013a4 <cliOpen+0x84>)
 8001340:	2200      	movs	r2, #0
 8001342:	605a      	str	r2, [r3, #4]
  qbuffer.len = 256;
 8001344:	4b17      	ldr	r3, [pc, #92]	@ (80013a4 <cliOpen+0x84>)
 8001346:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800134a:	609a      	str	r2, [r3, #8]
  qbuffer.p_buf = &uart_buf[0];
 800134c:	4b15      	ldr	r3, [pc, #84]	@ (80013a4 <cliOpen+0x84>)
 800134e:	4a16      	ldr	r2, [pc, #88]	@ (80013a8 <cliOpen+0x88>)
 8001350:	60da      	str	r2, [r3, #12]

  cli_node.is_open = true;
 8001352:	4b13      	ldr	r3, [pc, #76]	@ (80013a0 <cliOpen+0x80>)
 8001354:	2201      	movs	r2, #1
 8001356:	721a      	strb	r2, [r3, #8]

  if(ch == CH_CDC)
 8001358:	79fb      	ldrb	r3, [r7, #7]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d01a      	beq.n	8001394 <cliOpen+0x74>
  {
  }
  else if(ch == CH_USART1)
 800135e:	79fb      	ldrb	r3, [r7, #7]
 8001360:	2b01      	cmp	r3, #1
 8001362:	d117      	bne.n	8001394 <cliOpen+0x74>
  {
    if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&uart_buf, 256) != HAL_OK)
 8001364:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001368:	490f      	ldr	r1, [pc, #60]	@ (80013a8 <cliOpen+0x88>)
 800136a:	4810      	ldr	r0, [pc, #64]	@ (80013ac <cliOpen+0x8c>)
 800136c:	f004 f9a7 	bl	80056be <HAL_UART_Receive_DMA>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d002      	beq.n	800137c <cliOpen+0x5c>
    {
      cli_node.is_open = false;
 8001376:	4b0a      	ldr	r3, [pc, #40]	@ (80013a0 <cliOpen+0x80>)
 8001378:	2200      	movs	r2, #0
 800137a:	721a      	strb	r2, [r3, #8]
    }

    qbuffer.in = qbuffer.len - hdma_usart1_rx.Instance->CNDTR;
 800137c:	4b09      	ldr	r3, [pc, #36]	@ (80013a4 <cliOpen+0x84>)
 800137e:	689a      	ldr	r2, [r3, #8]
 8001380:	4b0b      	ldr	r3, [pc, #44]	@ (80013b0 <cliOpen+0x90>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	4a06      	ldr	r2, [pc, #24]	@ (80013a4 <cliOpen+0x84>)
 800138a:	6013      	str	r3, [r2, #0]
    qbuffer.out = qbuffer.in;
 800138c:	4b05      	ldr	r3, [pc, #20]	@ (80013a4 <cliOpen+0x84>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a04      	ldr	r2, [pc, #16]	@ (80013a4 <cliOpen+0x84>)
 8001392:	6053      	str	r3, [r2, #4]
  }

  return cli_node.is_open;
 8001394:	4b02      	ldr	r3, [pc, #8]	@ (80013a0 <cliOpen+0x80>)
 8001396:	7a1b      	ldrb	r3, [r3, #8]
}
 8001398:	4618      	mov	r0, r3
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	200001fc 	.word	0x200001fc
 80013a4:	20000640 	.word	0x20000640
 80013a8:	20000650 	.word	0x20000650
 80013ac:	200007a8 	.word	0x200007a8
 80013b0:	20000838 	.word	0x20000838

080013b4 <cliShowLog>:
  cli_node.is_log = false;
  return true;
}

void cliShowLog(cli_t *p_cli)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  if (cli_node.is_log == true)
 80013bc:	4b34      	ldr	r3, [pc, #208]	@ (8001490 <cliShowLog+0xdc>)
 80013be:	7a5b      	ldrb	r3, [r3, #9]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d061      	beq.n	8001488 <cliShowLog+0xd4>
  {
    uartPrintf(p_cli->log_ch, "Cursor  : %d\n", p_cli->line.cursor);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	7a98      	ldrb	r0, [r3, #10]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
 80013ce:	461a      	mov	r2, r3
 80013d0:	4930      	ldr	r1, [pc, #192]	@ (8001494 <cliShowLog+0xe0>)
 80013d2:	f000 feeb 	bl	80021ac <uartPrintf>
    uartPrintf(p_cli->log_ch, "Count   : %d\n", p_cli->line.count);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	7a98      	ldrb	r0, [r3, #10]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
 80013e0:	461a      	mov	r2, r3
 80013e2:	492d      	ldr	r1, [pc, #180]	@ (8001498 <cliShowLog+0xe4>)
 80013e4:	f000 fee2 	bl	80021ac <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf_len : %d\n", p_cli->line.buf_len);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	7a98      	ldrb	r0, [r3, #10]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f893 32e4 	ldrb.w	r3, [r3, #740]	@ 0x2e4
 80013f2:	461a      	mov	r2, r3
 80013f4:	4929      	ldr	r1, [pc, #164]	@ (800149c <cliShowLog+0xe8>)
 80013f6:	f000 fed9 	bl	80021ac <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf     : %s\n", p_cli->line.buf);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	7a98      	ldrb	r0, [r3, #10]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 8001404:	461a      	mov	r2, r3
 8001406:	4926      	ldr	r1, [pc, #152]	@ (80014a0 <cliShowLog+0xec>)
 8001408:	f000 fed0 	bl	80021ac <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_i  : %d\n", p_cli->hist_line_i);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	7a98      	ldrb	r0, [r3, #10]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f993 3195 	ldrsb.w	r3, [r3, #405]	@ 0x195
 8001416:	461a      	mov	r2, r3
 8001418:	4922      	ldr	r1, [pc, #136]	@ (80014a4 <cliShowLog+0xf0>)
 800141a:	f000 fec7 	bl	80021ac <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_lt : %d\n", p_cli->hist_line_last);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	7a98      	ldrb	r0, [r3, #10]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8001428:	461a      	mov	r2, r3
 800142a:	491f      	ldr	r1, [pc, #124]	@ (80014a8 <cliShowLog+0xf4>)
 800142c:	f000 febe 	bl	80021ac <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_c  : %d\n", p_cli->hist_line_count);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	7a98      	ldrb	r0, [r3, #10]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 800143a:	461a      	mov	r2, r3
 800143c:	491b      	ldr	r1, [pc, #108]	@ (80014ac <cliShowLog+0xf8>)
 800143e:	f000 feb5 	bl	80021ac <uartPrintf>

    for (int i=0; i<p_cli->hist_line_count; i++)
 8001442:	2300      	movs	r3, #0
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	e012      	b.n	800146e <cliShowLog+0xba>
    {
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	7a98      	ldrb	r0, [r3, #10]
 800144c:	68fa      	ldr	r2, [r7, #12]
 800144e:	4613      	mov	r3, r2
 8001450:	015b      	lsls	r3, r3, #5
 8001452:	4413      	add	r3, r2
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	4413      	add	r3, r2
 8001458:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	4413      	add	r3, r2
 8001460:	68fa      	ldr	r2, [r7, #12]
 8001462:	4913      	ldr	r1, [pc, #76]	@ (80014b0 <cliShowLog+0xfc>)
 8001464:	f000 fea2 	bl	80021ac <uartPrintf>
    for (int i=0; i<p_cli->hist_line_count; i++)
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	3301      	adds	r3, #1
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 8001474:	461a      	mov	r2, r3
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	4293      	cmp	r3, r2
 800147a:	dbe5      	blt.n	8001448 <cliShowLog+0x94>
    }
    uartPrintf(p_cli->log_ch, "\n");
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	7a9b      	ldrb	r3, [r3, #10]
 8001480:	490c      	ldr	r1, [pc, #48]	@ (80014b4 <cliShowLog+0x100>)
 8001482:	4618      	mov	r0, r3
 8001484:	f000 fe92 	bl	80021ac <uartPrintf>
  }
}
 8001488:	bf00      	nop
 800148a:	3710      	adds	r7, #16
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	200001fc 	.word	0x200001fc
 8001494:	080096e4 	.word	0x080096e4
 8001498:	080096f4 	.word	0x080096f4
 800149c:	08009704 	.word	0x08009704
 80014a0:	08009714 	.word	0x08009714
 80014a4:	08009724 	.word	0x08009724
 80014a8:	08009734 	.word	0x08009734
 80014ac:	08009744 	.word	0x08009744
 80014b0:	08009754 	.word	0x08009754
 80014b4:	08009764 	.word	0x08009764

080014b8 <cliShowPrompt>:

void cliShowPrompt(cli_t *p_cli)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  uartPrintf(p_cli->ch, "\n\r");
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	4906      	ldr	r1, [pc, #24]	@ (80014e0 <cliShowPrompt+0x28>)
 80014c6:	4618      	mov	r0, r3
 80014c8:	f000 fe70 	bl	80021ac <uartPrintf>
  uartPrintf(p_cli->ch, CLI_PROMPT_STR);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	4904      	ldr	r1, [pc, #16]	@ (80014e4 <cliShowPrompt+0x2c>)
 80014d2:	4618      	mov	r0, r3
 80014d4:	f000 fe6a 	bl	80021ac <uartPrintf>
}
 80014d8:	bf00      	nop
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	08009768 	.word	0x08009768
 80014e4:	0800976c 	.word	0x0800976c

080014e8 <cliMain>:

bool cliMain(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  if (cli_node.is_open != true)
 80014ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001528 <cliMain+0x40>)
 80014ee:	7a1b      	ldrb	r3, [r3, #8]
 80014f0:	f083 0301 	eor.w	r3, r3, #1
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <cliMain+0x16>
  {
    return false;
 80014fa:	2300      	movs	r3, #0
 80014fc:	e012      	b.n	8001524 <cliMain+0x3c>
  }

  if(uartAvailable(cli_node.ch) > 0)
 80014fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001528 <cliMain+0x40>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	4618      	mov	r0, r3
 8001504:	f000 fe24 	bl	8002150 <uartAvailable>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d009      	beq.n	8001522 <cliMain+0x3a>
  {
    cliUpdate(&cli_node, uartRead(cli_node.ch));
 800150e:	4b06      	ldr	r3, [pc, #24]	@ (8001528 <cliMain+0x40>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	4618      	mov	r0, r3
 8001514:	f000 fea6 	bl	8002264 <uartRead>
 8001518:	4603      	mov	r3, r0
 800151a:	4619      	mov	r1, r3
 800151c:	4802      	ldr	r0, [pc, #8]	@ (8001528 <cliMain+0x40>)
 800151e:	f000 f805 	bl	800152c <cliUpdate>
  }

  return true;
 8001522:	2301      	movs	r3, #1
}
 8001524:	4618      	mov	r0, r3
 8001526:	bd80      	pop	{r7, pc}
 8001528:	200001fc 	.word	0x200001fc

0800152c <cliUpdate>:
{
  return uartWrite(cli_node.ch, p_data, length);
}

bool cliUpdate(cli_t *p_cli, uint8_t rx_data)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b08c      	sub	sp, #48	@ 0x30
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	460b      	mov	r3, r1
 8001536:	70fb      	strb	r3, [r7, #3]
  bool ret = false;
 8001538:	2300      	movs	r3, #0
 800153a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t tx_buf[8];
  cli_line_t *line;

  line = &p_cli->line;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 8001544:	61fb      	str	r3, [r7, #28]


  if (p_cli->state == CLI_RX_IDLE)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	7c1b      	ldrb	r3, [r3, #16]
 800154a:	2b00      	cmp	r3, #0
 800154c:	f040 816d 	bne.w	800182a <cliUpdate+0x2fe>
  {
    switch(rx_data)
 8001550:	78fb      	ldrb	r3, [r7, #3]
 8001552:	2b7f      	cmp	r3, #127	@ 0x7f
 8001554:	d02a      	beq.n	80015ac <cliUpdate+0x80>
 8001556:	2b7f      	cmp	r3, #127	@ 0x7f
 8001558:	f300 80da 	bgt.w	8001710 <cliUpdate+0x1e4>
 800155c:	2b1b      	cmp	r3, #27
 800155e:	d021      	beq.n	80015a4 <cliUpdate+0x78>
 8001560:	2b1b      	cmp	r3, #27
 8001562:	f300 80d5 	bgt.w	8001710 <cliUpdate+0x1e4>
 8001566:	2b08      	cmp	r3, #8
 8001568:	d062      	beq.n	8001630 <cliUpdate+0x104>
 800156a:	2b0d      	cmp	r3, #13
 800156c:	f040 80d0 	bne.w	8001710 <cliUpdate+0x1e4>
    {
      // 엔터
      //
      case CLI_KEY_ENTER:
        if (line->count > 0)
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001576:	2b00      	cmp	r3, #0
 8001578:	d005      	beq.n	8001586 <cliUpdate+0x5a>
        {
          cliLineAdd(p_cli);
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f000 fa51 	bl	8001a22 <cliLineAdd>
          cliRunCmd(p_cli);
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f000 fb1d 	bl	8001bc0 <cliRunCmd>
        }

        line->count = 0;
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	2200      	movs	r2, #0
 800158a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        line->cursor = 0;
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	2200      	movs	r2, #0
 8001592:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        line->buf[0] = 0;
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	2200      	movs	r2, #0
 800159a:	701a      	strb	r2, [r3, #0]
        cliShowPrompt(p_cli);
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f7ff ff8b 	bl	80014b8 <cliShowPrompt>
        break;
 80015a2:	e142      	b.n	800182a <cliUpdate+0x2fe>


      case CLI_KEY_ESC:
        p_cli->state = CLI_RX_SP1;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2201      	movs	r2, #1
 80015a8:	741a      	strb	r2, [r3, #16]
        break;
 80015aa:	e13e      	b.n	800182a <cliUpdate+0x2fe>


      // DEL
      //
      case CLI_KEY_DEL:
        if (line->cursor < line->count)
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80015b8:	429a      	cmp	r2, r3
 80015ba:	f080 8131 	bcs.w	8001820 <cliUpdate+0x2f4>
        {
          uint8_t mov_len;

          mov_len = line->count - line->cursor;
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	76fb      	strb	r3, [r7, #27]
          for (int i=1; i<mov_len; i++)
 80015ce:	2301      	movs	r3, #1
 80015d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80015d2:	e013      	b.n	80015fc <cliUpdate+0xd0>
          {
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80015da:	461a      	mov	r2, r3
 80015dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015de:	441a      	add	r2, r3
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80015e6:	4619      	mov	r1, r3
 80015e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015ea:	440b      	add	r3, r1
 80015ec:	3b01      	subs	r3, #1
 80015ee:	69f9      	ldr	r1, [r7, #28]
 80015f0:	5c89      	ldrb	r1, [r1, r2]
 80015f2:	69fa      	ldr	r2, [r7, #28]
 80015f4:	54d1      	strb	r1, [r2, r3]
          for (int i=1; i<mov_len; i++)
 80015f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015f8:	3301      	adds	r3, #1
 80015fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80015fc:	7efb      	ldrb	r3, [r7, #27]
 80015fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001600:	429a      	cmp	r2, r3
 8001602:	dbe7      	blt.n	80015d4 <cliUpdate+0xa8>
          }

          line->count--;
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800160a:	3b01      	subs	r3, #1
 800160c:	b2da      	uxtb	r2, r3
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          line->buf[line->count] = 0;
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800161a:	461a      	mov	r2, r3
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	2100      	movs	r1, #0
 8001620:	5499      	strb	r1, [r3, r2]

          uartPrintf(p_cli->ch, "\x1B[1P");
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	498d      	ldr	r1, [pc, #564]	@ (800185c <cliUpdate+0x330>)
 8001628:	4618      	mov	r0, r3
 800162a:	f000 fdbf 	bl	80021ac <uartPrintf>
        }
        break;
 800162e:	e0f7      	b.n	8001820 <cliUpdate+0x2f4>


      // 백스페이스
      //
      case CLI_KEY_BACK:
        if (line->count > 0 && line->cursor > 0)
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001636:	2b00      	cmp	r3, #0
 8001638:	d055      	beq.n	80016e6 <cliUpdate+0x1ba>
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001640:	2b00      	cmp	r3, #0
 8001642:	d050      	beq.n	80016e6 <cliUpdate+0x1ba>
        {
          if (line->cursor == line->count)
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001650:	429a      	cmp	r2, r3
 8001652:	d10e      	bne.n	8001672 <cliUpdate+0x146>
          {
            line->count--;
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800165a:	3b01      	subs	r3, #1
 800165c:	b2da      	uxtb	r2, r3
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
            line->buf[line->count] = 0;
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800166a:	461a      	mov	r2, r3
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	2100      	movs	r1, #0
 8001670:	5499      	strb	r1, [r3, r2]
          }

          if (line->cursor < line->count)
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800167e:	429a      	cmp	r2, r3
 8001680:	d231      	bcs.n	80016e6 <cliUpdate+0x1ba>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	76bb      	strb	r3, [r7, #26]

            for (int i=0; i<mov_len; i++)
 8001692:	2300      	movs	r3, #0
 8001694:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001696:	e013      	b.n	80016c0 <cliUpdate+0x194>
            {
              line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800169e:	461a      	mov	r2, r3
 80016a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016a2:	441a      	add	r2, r3
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80016aa:	4619      	mov	r1, r3
 80016ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016ae:	440b      	add	r3, r1
 80016b0:	3b01      	subs	r3, #1
 80016b2:	69f9      	ldr	r1, [r7, #28]
 80016b4:	5c89      	ldrb	r1, [r1, r2]
 80016b6:	69fa      	ldr	r2, [r7, #28]
 80016b8:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 80016ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016bc:	3301      	adds	r3, #1
 80016be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80016c0:	7ebb      	ldrb	r3, [r7, #26]
 80016c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80016c4:	429a      	cmp	r2, r3
 80016c6:	dbe7      	blt.n	8001698 <cliUpdate+0x16c>
            }

            line->count--;
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80016ce:	3b01      	subs	r3, #1
 80016d0:	b2da      	uxtb	r2, r3
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
            line->buf[line->count] = 0;
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80016de:	461a      	mov	r2, r3
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	2100      	movs	r1, #0
 80016e4:	5499      	strb	r1, [r3, r2]
          }
        }

        if (line->cursor > 0)
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	f000 8099 	beq.w	8001824 <cliUpdate+0x2f8>
        {
          line->cursor--;
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80016f8:	3b01      	subs	r3, #1
 80016fa:	b2da      	uxtb	r2, r3
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	4956      	ldr	r1, [pc, #344]	@ (8001860 <cliUpdate+0x334>)
 8001708:	4618      	mov	r0, r3
 800170a:	f000 fd4f 	bl	80021ac <uartPrintf>
        }
        break;
 800170e:	e089      	b.n	8001824 <cliUpdate+0x2f8>


      default:
        if ((line->count + 1) < line->buf_len)
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001716:	3301      	adds	r3, #1
 8001718:	69fa      	ldr	r2, [r7, #28]
 800171a:	f892 2040 	ldrb.w	r2, [r2, #64]	@ 0x40
 800171e:	4293      	cmp	r3, r2
 8001720:	f280 8082 	bge.w	8001828 <cliUpdate+0x2fc>
        {
          if (line->cursor == line->count)
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001730:	429a      	cmp	r2, r3
 8001732:	d124      	bne.n	800177e <cliUpdate+0x252>
          {
            uartWrite(p_cli->ch, &rx_data, 1);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	1cf9      	adds	r1, r7, #3
 800173a:	2201      	movs	r2, #1
 800173c:	4618      	mov	r0, r3
 800173e:	f000 fd6d 	bl	800221c <uartWrite>

            line->buf[line->cursor] = rx_data;
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001748:	461a      	mov	r2, r3
 800174a:	78f9      	ldrb	r1, [r7, #3]
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	5499      	strb	r1, [r3, r2]
            line->count++;
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001756:	3301      	adds	r3, #1
 8001758:	b2da      	uxtb	r2, r3
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
            line->cursor++;
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001766:	3301      	adds	r3, #1
 8001768:	b2da      	uxtb	r2, r3
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
            line->buf[line->count] = 0;
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001776:	461a      	mov	r2, r3
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	2100      	movs	r1, #0
 800177c:	5499      	strb	r1, [r3, r2]
          }
          if (line->cursor < line->count)
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800178a:	429a      	cmp	r2, r3
 800178c:	d24c      	bcs.n	8001828 <cliUpdate+0x2fc>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	767b      	strb	r3, [r7, #25]
            for (int i=0; i<mov_len; i++)
 800179e:	2300      	movs	r3, #0
 80017a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80017a2:	e013      	b.n	80017cc <cliUpdate+0x2a0>
            {
              line->buf[line->count - i] = line->buf[line->count - i - 1];
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80017aa:	461a      	mov	r2, r3
 80017ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	1e5a      	subs	r2, r3, #1
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80017b8:	4619      	mov	r1, r3
 80017ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017bc:	1acb      	subs	r3, r1, r3
 80017be:	69f9      	ldr	r1, [r7, #28]
 80017c0:	5c89      	ldrb	r1, [r1, r2]
 80017c2:	69fa      	ldr	r2, [r7, #28]
 80017c4:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 80017c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c8:	3301      	adds	r3, #1
 80017ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80017cc:	7e7b      	ldrb	r3, [r7, #25]
 80017ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017d0:	429a      	cmp	r2, r3
 80017d2:	dbe7      	blt.n	80017a4 <cliUpdate+0x278>
            }
            line->buf[line->cursor] = rx_data;
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80017da:	461a      	mov	r2, r3
 80017dc:	78f9      	ldrb	r1, [r7, #3]
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	5499      	strb	r1, [r3, r2]
            line->count++;
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80017e8:	3301      	adds	r3, #1
 80017ea:	b2da      	uxtb	r2, r3
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
            line->cursor++;
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80017f8:	3301      	adds	r3, #1
 80017fa:	b2da      	uxtb	r2, r3
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
            line->buf[line->count] = 0;
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001808:	461a      	mov	r2, r3
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	2100      	movs	r1, #0
 800180e:	5499      	strb	r1, [r3, r2]

            uartPrintf(p_cli->ch, "\x1B[4h%c\x1B[4l", rx_data);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	78fa      	ldrb	r2, [r7, #3]
 8001816:	4913      	ldr	r1, [pc, #76]	@ (8001864 <cliUpdate+0x338>)
 8001818:	4618      	mov	r0, r3
 800181a:	f000 fcc7 	bl	80021ac <uartPrintf>
          }
        }
        break;
 800181e:	e003      	b.n	8001828 <cliUpdate+0x2fc>
        break;
 8001820:	bf00      	nop
 8001822:	e002      	b.n	800182a <cliUpdate+0x2fe>
        break;
 8001824:	bf00      	nop
 8001826:	e000      	b.n	800182a <cliUpdate+0x2fe>
        break;
 8001828:	bf00      	nop
    }
  }

  switch(p_cli->state)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	7c1b      	ldrb	r3, [r3, #16]
 800182e:	3b01      	subs	r3, #1
 8001830:	2b03      	cmp	r3, #3
 8001832:	f200 80d0 	bhi.w	80019d6 <cliUpdate+0x4aa>
 8001836:	a201      	add	r2, pc, #4	@ (adr r2, 800183c <cliUpdate+0x310>)
 8001838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800183c:	0800184d 	.word	0x0800184d
 8001840:	08001855 	.word	0x08001855
 8001844:	08001869 	.word	0x08001869
 8001848:	080019cd 	.word	0x080019cd
  {
    case CLI_RX_SP1:
      p_cli->state = CLI_RX_SP2;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2202      	movs	r2, #2
 8001850:	741a      	strb	r2, [r3, #16]
      break;
 8001852:	e0c0      	b.n	80019d6 <cliUpdate+0x4aa>

    case CLI_RX_SP2:
      p_cli->state = CLI_RX_SP3;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2203      	movs	r2, #3
 8001858:	741a      	strb	r2, [r3, #16]
      break;
 800185a:	e0bc      	b.n	80019d6 <cliUpdate+0x4aa>
 800185c:	08009774 	.word	0x08009774
 8001860:	0800977c 	.word	0x0800977c
 8001864:	08009784 	.word	0x08009784

    case CLI_RX_SP3:
      p_cli->state = CLI_RX_IDLE;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2200      	movs	r2, #0
 800186c:	741a      	strb	r2, [r3, #16]

      if (rx_data == CLI_KEY_LEFT)
 800186e:	78fb      	ldrb	r3, [r7, #3]
 8001870:	2b44      	cmp	r3, #68	@ 0x44
 8001872:	d11a      	bne.n	80018aa <cliUpdate+0x37e>
      {
        if (line->cursor > 0)
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800187a:	2b00      	cmp	r3, #0
 800187c:	d015      	beq.n	80018aa <cliUpdate+0x37e>
        {
          line->cursor--;
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001884:	3b01      	subs	r3, #1
 8001886:	b2da      	uxtb	r2, r3
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          tx_buf[0] = 0x1B;
 800188e:	231b      	movs	r3, #27
 8001890:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 8001892:	235b      	movs	r3, #91	@ 0x5b
 8001894:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 8001896:	78fb      	ldrb	r3, [r7, #3]
 8001898:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	f107 010c 	add.w	r1, r7, #12
 80018a2:	2203      	movs	r2, #3
 80018a4:	4618      	mov	r0, r3
 80018a6:	f000 fcb9 	bl	800221c <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_RIGHT)
 80018aa:	78fb      	ldrb	r3, [r7, #3]
 80018ac:	2b43      	cmp	r3, #67	@ 0x43
 80018ae:	d11d      	bne.n	80018ec <cliUpdate+0x3c0>
      {
        if (line->cursor < line->count)
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80018bc:	429a      	cmp	r2, r3
 80018be:	d215      	bcs.n	80018ec <cliUpdate+0x3c0>
        {
          line->cursor++;
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80018c6:	3301      	adds	r3, #1
 80018c8:	b2da      	uxtb	r2, r3
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

          tx_buf[0] = 0x1B;
 80018d0:	231b      	movs	r3, #27
 80018d2:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 80018d4:	235b      	movs	r3, #91	@ 0x5b
 80018d6:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 80018d8:	78fb      	ldrb	r3, [r7, #3]
 80018da:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	f107 010c 	add.w	r1, r7, #12
 80018e4:	2203      	movs	r2, #3
 80018e6:	4618      	mov	r0, r3
 80018e8:	f000 fc98 	bl	800221c <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_UP)
 80018ec:	78fb      	ldrb	r3, [r7, #3]
 80018ee:	2b41      	cmp	r3, #65	@ 0x41
 80018f0:	d10c      	bne.n	800190c <cliUpdate+0x3e0>
      {
        cliLineChange(p_cli, true);
 80018f2:	2101      	movs	r1, #1
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f000 f8d9 	bl	8001aac <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	781a      	ldrb	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 8001904:	4619      	mov	r1, r3
 8001906:	4610      	mov	r0, r2
 8001908:	f000 fc50 	bl	80021ac <uartPrintf>
      }

      if (rx_data == CLI_KEY_DOWN)
 800190c:	78fb      	ldrb	r3, [r7, #3]
 800190e:	2b42      	cmp	r3, #66	@ 0x42
 8001910:	d10c      	bne.n	800192c <cliUpdate+0x400>
      {
        cliLineChange(p_cli, false);
 8001912:	2100      	movs	r1, #0
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f000 f8c9 	bl	8001aac <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	781a      	ldrb	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 8001924:	4619      	mov	r1, r3
 8001926:	4610      	mov	r0, r2
 8001928:	f000 fc40 	bl	80021ac <uartPrintf>
      }

      if (rx_data == CLI_KEY_HOME)
 800192c:	78fb      	ldrb	r3, [r7, #3]
 800192e:	2b31      	cmp	r3, #49	@ 0x31
 8001930:	d10f      	bne.n	8001952 <cliUpdate+0x426>
      {
        uartPrintf(p_cli->ch, "\x1B[%dD", line->cursor);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	7818      	ldrb	r0, [r3, #0]
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800193c:	461a      	mov	r2, r3
 800193e:	492a      	ldr	r1, [pc, #168]	@ (80019e8 <cliUpdate+0x4bc>)
 8001940:	f000 fc34 	bl	80021ac <uartPrintf>
        line->cursor = 0;
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	2200      	movs	r2, #0
 8001948:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        p_cli->state = CLI_RX_SP4;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2204      	movs	r2, #4
 8001950:	741a      	strb	r2, [r3, #16]
      }

      if (rx_data == CLI_KEY_END)
 8001952:	78fb      	ldrb	r3, [r7, #3]
 8001954:	2b34      	cmp	r3, #52	@ 0x34
 8001956:	d13d      	bne.n	80019d4 <cliUpdate+0x4a8>
      {
        uint16_t mov_len;

        if (line->cursor < line->count)
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001964:	429a      	cmp	r2, r3
 8001966:	d20f      	bcs.n	8001988 <cliUpdate+0x45c>
        {
          mov_len = line->count - line->cursor;
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800196e:	461a      	mov	r2, r3
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dC", mov_len);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	8afa      	ldrh	r2, [r7, #22]
 8001980:	491a      	ldr	r1, [pc, #104]	@ (80019ec <cliUpdate+0x4c0>)
 8001982:	4618      	mov	r0, r3
 8001984:	f000 fc12 	bl	80021ac <uartPrintf>
        }
        if (line->cursor > line->count)
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001994:	429a      	cmp	r2, r3
 8001996:	d90f      	bls.n	80019b8 <cliUpdate+0x48c>
        {
          mov_len = line->cursor - line->count;
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800199e:	461a      	mov	r2, r3
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dD", mov_len);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	8afa      	ldrh	r2, [r7, #22]
 80019b0:	490d      	ldr	r1, [pc, #52]	@ (80019e8 <cliUpdate+0x4bc>)
 80019b2:	4618      	mov	r0, r3
 80019b4:	f000 fbfa 	bl	80021ac <uartPrintf>
        }
        line->cursor = line->count;
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        p_cli->state = CLI_RX_SP4;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2204      	movs	r2, #4
 80019c8:	741a      	strb	r2, [r3, #16]
      }
      break;
 80019ca:	e003      	b.n	80019d4 <cliUpdate+0x4a8>

    case CLI_RX_SP4:
      p_cli->state = CLI_RX_IDLE;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2200      	movs	r2, #0
 80019d0:	741a      	strb	r2, [r3, #16]
      break;
 80019d2:	e000      	b.n	80019d6 <cliUpdate+0x4aa>
      break;
 80019d4:	bf00      	nop
  }



  cliShowLog(p_cli);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f7ff fcec 	bl	80013b4 <cliShowLog>

  return ret;
 80019dc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3730      	adds	r7, #48	@ 0x30
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	08009790 	.word	0x08009790
 80019ec:	08009798 	.word	0x08009798

080019f0 <cliLineClean>:

void cliLineClean(cli_t *p_cli)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  p_cli->line.count   = 0;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2200      	movs	r2, #0
 80019fc:	f883 22e6 	strb.w	r2, [r3, #742]	@ 0x2e6
  p_cli->line.cursor  = 0;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	f883 22e5 	strb.w	r2, [r3, #741]	@ 0x2e5
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	223f      	movs	r2, #63	@ 0x3f
 8001a0c:	f883 22e4 	strb.w	r2, [r3, #740]	@ 0x2e4
  p_cli->line.buf[0]  = 0;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	f883 22a4 	strb.w	r2, [r3, #676]	@ 0x2a4
}
 8001a18:	bf00      	nop
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bc80      	pop	{r7}
 8001a20:	4770      	bx	lr

08001a22 <cliLineAdd>:

void cliLineAdd(cli_t *p_cli)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b082      	sub	sp, #8
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]

  p_cli->line_buf[p_cli->hist_line_last] = p_cli->line;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8001a30:	461a      	mov	r2, r3
 8001a32:	6879      	ldr	r1, [r7, #4]
 8001a34:	4613      	mov	r3, r2
 8001a36:	015b      	lsls	r3, r3, #5
 8001a38:	4413      	add	r3, r2
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	4413      	add	r3, r2
 8001a3e:	440b      	add	r3, r1
 8001a40:	f503 72cc 	add.w	r2, r3, #408	@ 0x198
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4610      	mov	r0, r2
 8001a48:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 8001a4c:	2243      	movs	r2, #67	@ 0x43
 8001a4e:	4619      	mov	r1, r3
 8001a50:	f005 fe25 	bl	800769e <memcpy>

  if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 8001a5a:	2b03      	cmp	r3, #3
 8001a5c:	d807      	bhi.n	8001a6e <cliLineAdd+0x4c>
  {
    p_cli->hist_line_count++;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 8001a64:	3301      	adds	r3, #1
 8001a66:	b2da      	uxtb	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f883 2197 	strb.w	r2, [r3, #407]	@ 0x197
  }

  p_cli->hist_line_i    = p_cli->hist_line_last;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8001a74:	b25a      	sxtb	r2, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
  p_cli->hist_line_last = (p_cli->hist_line_last + 1) % CLI_LINE_HIS_MAX;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8001a82:	3301      	adds	r3, #1
 8001a84:	425a      	negs	r2, r3
 8001a86:	f003 0303 	and.w	r3, r3, #3
 8001a8a:	f002 0203 	and.w	r2, r2, #3
 8001a8e:	bf58      	it	pl
 8001a90:	4253      	negpl	r3, r2
 8001a92:	b2da      	uxtb	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
  p_cli->hist_line_new  = true;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	f883 2194 	strb.w	r2, [r3, #404]	@ 0x194
}
 8001aa2:	bf00      	nop
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
	...

08001aac <cliLineChange>:

void cliLineChange(cli_t *p_cli, int8_t key_up)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	70fb      	strb	r3, [r7, #3]
  uint8_t change_i;


  if (p_cli->hist_line_count == 0)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d076      	beq.n	8001bb0 <cliLineChange+0x104>
  {
    return;
  }


  if (p_cli->line.cursor > 0)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d008      	beq.n	8001ade <cliLineChange+0x32>
  {
    uartPrintf(p_cli->ch, "\x1B[%dD", p_cli->line.cursor);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	7818      	ldrb	r0, [r3, #0]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	4937      	ldr	r1, [pc, #220]	@ (8001bb8 <cliLineChange+0x10c>)
 8001ada:	f000 fb67 	bl	80021ac <uartPrintf>
  }
  if (p_cli->line.count > 0)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d008      	beq.n	8001afa <cliLineChange+0x4e>
  {
    uartPrintf(p_cli->ch, "\x1B[%dP", p_cli->line.count);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	7818      	ldrb	r0, [r3, #0]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
 8001af2:	461a      	mov	r2, r3
 8001af4:	4931      	ldr	r1, [pc, #196]	@ (8001bbc <cliLineChange+0x110>)
 8001af6:	f000 fb59 	bl	80021ac <uartPrintf>
  }


  if (key_up == true)
 8001afa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d125      	bne.n	8001b4e <cliLineChange+0xa2>
  {
    if (p_cli->hist_line_new == true)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f893 3194 	ldrb.w	r3, [r3, #404]	@ 0x194
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d006      	beq.n	8001b1a <cliLineChange+0x6e>
    {
      p_cli->hist_line_i = p_cli->hist_line_last;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8001b12:	b25a      	sxtb	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
    }
    p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) % p_cli->hist_line_count;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f993 3195 	ldrsb.w	r3, [r3, #405]	@ 0x195
 8001b20:	461a      	mov	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 8001b28:	4413      	add	r3, r2
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	f892 2197 	ldrb.w	r2, [r2, #407]	@ 0x197
 8001b32:	fb93 f1f2 	sdiv	r1, r3, r2
 8001b36:	fb01 f202 	mul.w	r2, r1, r2
 8001b3a:	1a9b      	subs	r3, r3, r2
 8001b3c:	b25a      	sxtb	r2, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
    change_i = p_cli->hist_line_i;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f993 3195 	ldrsb.w	r3, [r3, #405]	@ 0x195
 8001b4a:	73fb      	strb	r3, [r7, #15]
 8001b4c:	e013      	b.n	8001b76 <cliLineChange+0xca>
  }
  else
  {
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f993 3195 	ldrsb.w	r3, [r3, #405]	@ 0x195
 8001b54:	3301      	adds	r3, #1
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	f892 2197 	ldrb.w	r2, [r2, #407]	@ 0x197
 8001b5c:	fb93 f1f2 	sdiv	r1, r3, r2
 8001b60:	fb01 f202 	mul.w	r2, r1, r2
 8001b64:	1a9b      	subs	r3, r3, r2
 8001b66:	b25a      	sxtb	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
    change_i = p_cli->hist_line_i;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f993 3195 	ldrsb.w	r3, [r3, #405]	@ 0x195
 8001b74:	73fb      	strb	r3, [r7, #15]
  }

  p_cli->line = p_cli->line_buf[change_i];
 8001b76:	7bfa      	ldrb	r2, [r7, #15]
 8001b78:	6879      	ldr	r1, [r7, #4]
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	015b      	lsls	r3, r3, #5
 8001b80:	4413      	add	r3, r2
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	4413      	add	r3, r2
 8001b86:	4403      	add	r3, r0
 8001b88:	f503 72cc 	add.w	r2, r3, #408	@ 0x198
 8001b8c:	f501 7329 	add.w	r3, r1, #676	@ 0x2a4
 8001b90:	4611      	mov	r1, r2
 8001b92:	2243      	movs	r2, #67	@ 0x43
 8001b94:	4618      	mov	r0, r3
 8001b96:	f005 fd82 	bl	800769e <memcpy>
  p_cli->line.cursor = p_cli->line.count;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f893 22e6 	ldrb.w	r2, [r3, #742]	@ 0x2e6
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f883 22e5 	strb.w	r2, [r3, #741]	@ 0x2e5

  p_cli->hist_line_new = false;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f883 2194 	strb.w	r2, [r3, #404]	@ 0x194
 8001bae:	e000      	b.n	8001bb2 <cliLineChange+0x106>
    return;
 8001bb0:	bf00      	nop
}
 8001bb2:	3710      	adds	r7, #16
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	08009790 	.word	0x08009790
 8001bbc:	080097a0 	.word	0x080097a0

08001bc0 <cliRunCmd>:

bool cliRunCmd(cli_t *p_cli)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	72fb      	strb	r3, [r7, #11]


  if (cliParseArgs(p_cli) == true)
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f000 f851 	bl	8001c74 <cliParseArgs>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d046      	beq.n	8001c66 <cliRunCmd+0xa6>
  {
    cliPrintf("\r\n");
 8001bd8:	4825      	ldr	r0, [pc, #148]	@ (8001c70 <cliRunCmd+0xb0>)
 8001bda:	f000 f893 	bl	8001d04 <cliPrintf>

    cliToUpper(p_cli->argv[0]);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8001be4:	4618      	mov	r0, r3
 8001be6:	f000 f8b1 	bl	8001d4c <cliToUpper>

    for (int i=0; i<p_cli->cmd_count; i++)
 8001bea:	2300      	movs	r3, #0
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	e033      	b.n	8001c58 <cliRunCmd+0x98>
    {
      if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f8d3 0114 	ldr.w	r0, [r3, #276]	@ 0x114
 8001bf6:	68fa      	ldr	r2, [r7, #12]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	4413      	add	r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	4413      	add	r3, r2
 8001c08:	3304      	adds	r3, #4
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	f7fe faa0 	bl	8000150 <strcmp>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d11d      	bne.n	8001c52 <cliRunCmd+0x92>
      {
        p_cli->cmd_args.argc =  p_cli->argc - 1;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f8b3 3112 	ldrh.w	r3, [r3, #274]	@ 0x112
 8001c1c:	3b01      	subs	r3, #1
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f8a3 242c 	strh.w	r2, [r3, #1068]	@ 0x42c
        p_cli->cmd_args.argv = &p_cli->argv[1];
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f503 728c 	add.w	r2, r3, #280	@ 0x118
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
        p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);
 8001c32:	6879      	ldr	r1, [r7, #4]
 8001c34:	68fa      	ldr	r2, [r7, #12]
 8001c36:	4613      	mov	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	4413      	add	r3, r2
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	440b      	add	r3, r1
 8001c40:	f503 733f 	add.w	r3, r3, #764	@ 0x2fc
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	f202 422c 	addw	r2, r2, #1068	@ 0x42c
 8001c4c:	4610      	mov	r0, r2
 8001c4e:	4798      	blx	r3
        break;
 8001c50:	e009      	b.n	8001c66 <cliRunCmd+0xa6>
    for (int i=0; i<p_cli->cmd_count; i++)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	3301      	adds	r3, #1
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	@ 0x2e8
 8001c5e:	461a      	mov	r2, r3
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	4293      	cmp	r3, r2
 8001c64:	dbc4      	blt.n	8001bf0 <cliRunCmd+0x30>
      }
    }
  }

  return ret;
 8001c66:	7afb      	ldrb	r3, [r7, #11]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3710      	adds	r7, #16
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	080097a8 	.word	0x080097a8

08001c74 <cliParseArgs>:

bool cliParseArgs(cli_t *p_cli)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b088      	sub	sp, #32
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	77fb      	strb	r3, [r7, #31]
  char *tok;
  char *next_ptr;
  uint16_t argc = 0;
 8001c80:	2300      	movs	r3, #0
 8001c82:	82fb      	strh	r3, [r7, #22]
  static const char *delim = " \f\n\r\t\v";
  char *cmdline;
  char **argv;

  p_cli->argc = 0;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	f8a3 2112 	strh.w	r2, [r3, #274]	@ 0x112

  cmdline = (char *)p_cli->line.buf;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 8001c92:	613b      	str	r3, [r7, #16]
  argv    = p_cli->argv;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 8001c9a:	60fb      	str	r3, [r7, #12]

  argv[argc] = NULL;
 8001c9c:	8afb      	ldrh	r3, [r7, #22]
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	68fa      	ldr	r2, [r7, #12]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]

  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8001ca8:	4b15      	ldr	r3, [pc, #84]	@ (8001d00 <cliParseArgs+0x8c>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f107 0208 	add.w	r2, r7, #8
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	6938      	ldr	r0, [r7, #16]
 8001cb4:	f005 fc74 	bl	80075a0 <strtok_r>
 8001cb8:	61b8      	str	r0, [r7, #24]
 8001cba:	e010      	b.n	8001cde <cliParseArgs+0x6a>
  {
    argv[argc++] = tok;
 8001cbc:	8afb      	ldrh	r3, [r7, #22]
 8001cbe:	1c5a      	adds	r2, r3, #1
 8001cc0:	82fa      	strh	r2, [r7, #22]
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	68fa      	ldr	r2, [r7, #12]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	601a      	str	r2, [r3, #0]
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8001ccc:	4b0c      	ldr	r3, [pc, #48]	@ (8001d00 <cliParseArgs+0x8c>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f107 0208 	add.w	r2, r7, #8
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	2000      	movs	r0, #0
 8001cd8:	f005 fc62 	bl	80075a0 <strtok_r>
 8001cdc:	61b8      	str	r0, [r7, #24]
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d1eb      	bne.n	8001cbc <cliParseArgs+0x48>
  }

  p_cli->argc = argc;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	8afa      	ldrh	r2, [r7, #22]
 8001ce8:	f8a3 2112 	strh.w	r2, [r3, #274]	@ 0x112

  if (argc > 0)
 8001cec:	8afb      	ldrh	r3, [r7, #22]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <cliParseArgs+0x82>
  {
    ret = true;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	77fb      	strb	r3, [r7, #31]
  }

  return ret;
 8001cf6:	7ffb      	ldrb	r3, [r7, #31]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3720      	adds	r7, #32
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	20000008 	.word	0x20000008

08001d04 <cliPrintf>:

void cliPrintf(const char *fmt, ...)
{
 8001d04:	b40f      	push	{r0, r1, r2, r3}
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b084      	sub	sp, #16
 8001d0a:	af00      	add	r7, sp, #0
  va_list arg;
  va_start (arg, fmt);
 8001d0c:	f107 031c 	add.w	r3, r7, #28
 8001d10:	607b      	str	r3, [r7, #4]
  int32_t len;
  cli_t *p_cli = &cli_node;
 8001d12:	4b0d      	ldr	r3, [pc, #52]	@ (8001d48 <cliPrintf+0x44>)
 8001d14:	60fb      	str	r3, [r7, #12]


  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	f103 0011 	add.w	r0, r3, #17
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d24:	f005 fbec 	bl	8007500 <vsniprintf>
 8001d28:	60b8      	str	r0, [r7, #8]
  va_end (arg);

  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	7818      	ldrb	r0, [r3, #0]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	3311      	adds	r3, #17
 8001d32:	68ba      	ldr	r2, [r7, #8]
 8001d34:	4619      	mov	r1, r3
 8001d36:	f000 fa71 	bl	800221c <uartWrite>
}
 8001d3a:	bf00      	nop
 8001d3c:	3710      	adds	r7, #16
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001d44:	b004      	add	sp, #16
 8001d46:	4770      	bx	lr
 8001d48:	200001fc 	.word	0x200001fc

08001d4c <cliToUpper>:

void cliToUpper(char *str)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  uint16_t i;
  uint8_t  str_ch;

  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8001d54:	2300      	movs	r3, #0
 8001d56:	81fb      	strh	r3, [r7, #14]
 8001d58:	e018      	b.n	8001d8c <cliToUpper+0x40>
  {
    str_ch = str[i];
 8001d5a:	89fb      	ldrh	r3, [r7, #14]
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	4413      	add	r3, r2
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	737b      	strb	r3, [r7, #13]

    if (str_ch == 0)
 8001d64:	7b7b      	ldrb	r3, [r7, #13]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d014      	beq.n	8001d94 <cliToUpper+0x48>
    {
      break;
    }

    if ((str_ch >= 'a') && (str_ch <= 'z'))
 8001d6a:	7b7b      	ldrb	r3, [r7, #13]
 8001d6c:	2b60      	cmp	r3, #96	@ 0x60
 8001d6e:	d905      	bls.n	8001d7c <cliToUpper+0x30>
 8001d70:	7b7b      	ldrb	r3, [r7, #13]
 8001d72:	2b7a      	cmp	r3, #122	@ 0x7a
 8001d74:	d802      	bhi.n	8001d7c <cliToUpper+0x30>
    {
      str_ch = str_ch - 'a' + 'A';
 8001d76:	7b7b      	ldrb	r3, [r7, #13]
 8001d78:	3b20      	subs	r3, #32
 8001d7a:	737b      	strb	r3, [r7, #13]
    }
    str[i] = str_ch;
 8001d7c:	89fb      	ldrh	r3, [r7, #14]
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	4413      	add	r3, r2
 8001d82:	7b7a      	ldrb	r2, [r7, #13]
 8001d84:	701a      	strb	r2, [r3, #0]
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8001d86:	89fb      	ldrh	r3, [r7, #14]
 8001d88:	3301      	adds	r3, #1
 8001d8a:	81fb      	strh	r3, [r7, #14]
 8001d8c:	89fb      	ldrh	r3, [r7, #14]
 8001d8e:	2b0f      	cmp	r3, #15
 8001d90:	d9e3      	bls.n	8001d5a <cliToUpper+0xe>
 8001d92:	e000      	b.n	8001d96 <cliToUpper+0x4a>
      break;
 8001d94:	bf00      	nop
  }

  if (i == CLI_CMD_NAME_MAX)
 8001d96:	89fb      	ldrh	r3, [r7, #14]
 8001d98:	2b10      	cmp	r3, #16
 8001d9a:	d105      	bne.n	8001da8 <cliToUpper+0x5c>
  {
    str[i-1] = 0;
 8001d9c:	89fb      	ldrh	r3, [r7, #14]
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	4413      	add	r3, r2
 8001da4:	2200      	movs	r2, #0
 8001da6:	701a      	strb	r2, [r3, #0]
  }
}
 8001da8:	bf00      	nop
 8001daa:	3714      	adds	r7, #20
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bc80      	pop	{r7}
 8001db0:	4770      	bx	lr
	...

08001db4 <cliArgsGetData>:

int32_t cliArgsGetData(uint8_t index)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = 0;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8001dc2:	4b0f      	ldr	r3, [pc, #60]	@ (8001e00 <cliArgsGetData+0x4c>)
 8001dc4:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8001dc6:	79fb      	ldrb	r3, [r7, #7]
 8001dc8:	b29a      	uxth	r2, r3
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	@ 0x42c
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d301      	bcc.n	8001dd8 <cliArgsGetData+0x24>
  {
    return 0;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	e00e      	b.n	8001df6 <cliArgsGetData+0x42>
  }

  ret = (int32_t)strtoul((const char * ) p_cli->cmd_args.argv[index], (char **)NULL, (int) 0);
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8001dde:	79fb      	ldrb	r3, [r7, #7]
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	4413      	add	r3, r2
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2200      	movs	r2, #0
 8001de8:	2100      	movs	r1, #0
 8001dea:	4618      	mov	r0, r3
 8001dec:	f005 fa4e 	bl	800728c <strtoul>
 8001df0:	4603      	mov	r3, r0
 8001df2:	60fb      	str	r3, [r7, #12]

  return ret;
 8001df4:	68fb      	ldr	r3, [r7, #12]
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3710      	adds	r7, #16
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	200001fc 	.word	0x200001fc

08001e04 <cliArgsGetFloat>:

float cliArgsGetFloat(uint8_t index)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	71fb      	strb	r3, [r7, #7]
  float ret = 0.0;
 8001e0e:	f04f 0300 	mov.w	r3, #0
 8001e12:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8001e14:	4b0e      	ldr	r3, [pc, #56]	@ (8001e50 <cliArgsGetFloat+0x4c>)
 8001e16:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8001e18:	79fb      	ldrb	r3, [r7, #7]
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	@ 0x42c
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d302      	bcc.n	8001e2c <cliArgsGetFloat+0x28>
  {
    return 0;
 8001e26:	f04f 0300 	mov.w	r3, #0
 8001e2a:	e00c      	b.n	8001e46 <cliArgsGetFloat+0x42>
  }

  ret = (float)strtof((const char * ) p_cli->cmd_args.argv[index], (char **)NULL);
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8001e32:	79fb      	ldrb	r3, [r7, #7]
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	4413      	add	r3, r2
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f005 f95f 	bl	8007100 <strtof>
 8001e42:	60f8      	str	r0, [r7, #12]

  return ret;
 8001e44:	68fb      	ldr	r3, [r7, #12]
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	200001fc 	.word	0x200001fc

08001e54 <cliArgsGetStr>:

char *cliArgsGetStr(uint8_t index)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	71fb      	strb	r3, [r7, #7]
  char *ret = NULL;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8001e62:	4b0c      	ldr	r3, [pc, #48]	@ (8001e94 <cliArgsGetStr+0x40>)
 8001e64:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8001e66:	79fb      	ldrb	r3, [r7, #7]
 8001e68:	b29a      	uxth	r2, r3
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	@ 0x42c
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d301      	bcc.n	8001e78 <cliArgsGetStr+0x24>
  {
    return 0;
 8001e74:	2300      	movs	r3, #0
 8001e76:	e008      	b.n	8001e8a <cliArgsGetStr+0x36>
  }

  ret = p_cli->cmd_args.argv[index];
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8001e7e:	79fb      	ldrb	r3, [r7, #7]
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	4413      	add	r3, r2
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	60fb      	str	r3, [r7, #12]

  return ret;
 8001e88:	68fb      	ldr	r3, [r7, #12]
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3714      	adds	r7, #20
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bc80      	pop	{r7}
 8001e92:	4770      	bx	lr
 8001e94:	200001fc 	.word	0x200001fc

08001e98 <cliArgsIsStr>:

bool cliArgsIsStr(uint8_t index, char *p_str)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	6039      	str	r1, [r7, #0]
 8001ea2:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	73fb      	strb	r3, [r7, #15]
  cli_t *p_cli = &cli_node;
 8001ea8:	4b0f      	ldr	r3, [pc, #60]	@ (8001ee8 <cliArgsIsStr+0x50>)
 8001eaa:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8001eac:	79fb      	ldrb	r3, [r7, #7]
 8001eae:	b29a      	uxth	r2, r3
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	@ 0x42c
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d301      	bcc.n	8001ebe <cliArgsIsStr+0x26>
  {
    return 0;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	e010      	b.n	8001ee0 <cliArgsIsStr+0x48>
  }

  if(strcmp(p_str, p_cli->cmd_args.argv[index]) == 0)
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8001ec4:	79fb      	ldrb	r3, [r7, #7]
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	4413      	add	r3, r2
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4619      	mov	r1, r3
 8001ece:	6838      	ldr	r0, [r7, #0]
 8001ed0:	f7fe f93e 	bl	8000150 <strcmp>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d101      	bne.n	8001ede <cliArgsIsStr+0x46>
  {
    ret = true;
 8001eda:	2301      	movs	r3, #1
 8001edc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3710      	adds	r7, #16
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	200001fc 	.word	0x200001fc

08001eec <cliKeepLoop>:

bool cliKeepLoop(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
  cli_t *p_cli = &cli_node;
 8001ef2:	4b04      	ldr	r3, [pc, #16]	@ (8001f04 <cliKeepLoop+0x18>)
 8001ef4:	607b      	str	r3, [r7, #4]

  if(p_cli->ch != -1)
  {
    return true;
 8001ef6:	2301      	movs	r3, #1
  }
  else
  {
    return false;
  }
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bc80      	pop	{r7}
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	200001fc 	.word	0x200001fc

08001f08 <cliAdd>:

bool cliAdd(const char *cmd_str, void (*p_func)(cli_args_t *))
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b086      	sub	sp, #24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  bool ret = true;
 8001f12:	2301      	movs	r3, #1
 8001f14:	75fb      	strb	r3, [r7, #23]
  cli_t *p_cli = &cli_node;
 8001f16:	4b20      	ldr	r3, [pc, #128]	@ (8001f98 <cliAdd+0x90>)
 8001f18:	613b      	str	r3, [r7, #16]
  uint16_t index;

  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	@ 0x2e8
 8001f20:	2b0f      	cmp	r3, #15
 8001f22:	d901      	bls.n	8001f28 <cliAdd+0x20>
  {
    return false;
 8001f24:	2300      	movs	r3, #0
 8001f26:	e032      	b.n	8001f8e <cliAdd+0x86>
  }

  index = p_cli->cmd_count;
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	@ 0x2e8
 8001f2e:	81fb      	strh	r3, [r7, #14]

  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 8001f30:	89fa      	ldrh	r2, [r7, #14]
 8001f32:	4613      	mov	r3, r2
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	4413      	add	r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	4413      	add	r3, r2
 8001f42:	3304      	adds	r3, #4
 8001f44:	6879      	ldr	r1, [r7, #4]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f005 fba1 	bl	800768e <strcpy>
  p_cli->cmd_list[index].cmd_func = p_func;
 8001f4c:	89fa      	ldrh	r2, [r7, #14]
 8001f4e:	6939      	ldr	r1, [r7, #16]
 8001f50:	4613      	mov	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4413      	add	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	440b      	add	r3, r1
 8001f5a:	f503 733f 	add.w	r3, r3, #764	@ 0x2fc
 8001f5e:	683a      	ldr	r2, [r7, #0]
 8001f60:	601a      	str	r2, [r3, #0]

  cliToUpper(p_cli->cmd_list[index].cmd_str);
 8001f62:	89fa      	ldrh	r2, [r7, #14]
 8001f64:	4613      	mov	r3, r2
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	4413      	add	r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 8001f70:	693a      	ldr	r2, [r7, #16]
 8001f72:	4413      	add	r3, r2
 8001f74:	3304      	adds	r3, #4
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff fee8 	bl	8001d4c <cliToUpper>

  p_cli->cmd_count++;
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	@ 0x2e8
 8001f82:	3301      	adds	r3, #1
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	f8a3 22e8 	strh.w	r2, [r3, #744]	@ 0x2e8

  return ret;
 8001f8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3718      	adds	r7, #24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	200001fc 	.word	0x200001fc

08001f9c <cliShowList>:

void cliShowList(cli_args_t *args)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  cli_t *p_cli = &cli_node;
 8001fa4:	4b15      	ldr	r3, [pc, #84]	@ (8001ffc <cliShowList+0x60>)
 8001fa6:	60bb      	str	r3, [r7, #8]


  cliPrintf("\r\n");
 8001fa8:	4815      	ldr	r0, [pc, #84]	@ (8002000 <cliShowList+0x64>)
 8001faa:	f7ff feab 	bl	8001d04 <cliPrintf>
  cliPrintf("---------- cmd list ---------\r\n");
 8001fae:	4815      	ldr	r0, [pc, #84]	@ (8002004 <cliShowList+0x68>)
 8001fb0:	f7ff fea8 	bl	8001d04 <cliPrintf>

  for (int i=0; i<p_cli->cmd_count; i++)
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	e012      	b.n	8001fe0 <cliShowList+0x44>
  {
    cliPrintf(p_cli->cmd_list[i].cmd_str);
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	4413      	add	r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 8001fc8:	68ba      	ldr	r2, [r7, #8]
 8001fca:	4413      	add	r3, r2
 8001fcc:	3304      	adds	r3, #4
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7ff fe98 	bl	8001d04 <cliPrintf>
    cliPrintf("\r\n");
 8001fd4:	480a      	ldr	r0, [pc, #40]	@ (8002000 <cliShowList+0x64>)
 8001fd6:	f7ff fe95 	bl	8001d04 <cliPrintf>
  for (int i=0; i<p_cli->cmd_count; i++)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	3301      	adds	r3, #1
 8001fde:	60fb      	str	r3, [r7, #12]
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	@ 0x2e8
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	4293      	cmp	r3, r2
 8001fec:	dbe5      	blt.n	8001fba <cliShowList+0x1e>
  }

  cliPrintf("-----------------------------\r\n");
 8001fee:	4806      	ldr	r0, [pc, #24]	@ (8002008 <cliShowList+0x6c>)
 8001ff0:	f7ff fe88 	bl	8001d04 <cliPrintf>
}
 8001ff4:	bf00      	nop
 8001ff6:	3710      	adds	r7, #16
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	200001fc 	.word	0x200001fc
 8002000:	080097a8 	.word	0x080097a8
 8002004:	080097ac 	.word	0x080097ac
 8002008:	080097cc 	.word	0x080097cc

0800200c <cliMemoryDump>:

void cliMemoryDump(cli_args_t *args)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b08c      	sub	sp, #48	@ 0x30
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  int idx, size = 16;
 8002014:	2310      	movs	r3, #16
 8002016:	62bb      	str	r3, [r7, #40]	@ 0x28
  unsigned int *addr;
  int idx1, i;
  unsigned int *ascptr;
  unsigned char asc[4];

  int    argc = args->argc;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	881b      	ldrh	r3, [r3, #0]
 800201c:	617b      	str	r3, [r7, #20]
  char **argv = args->argv;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	613b      	str	r3, [r7, #16]


  if(args->argc < 1)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	881b      	ldrh	r3, [r3, #0]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d103      	bne.n	8002034 <cliMemoryDump+0x28>
  {
    cliPrintf(">> md addr [size] \n");
 800202c:	4840      	ldr	r0, [pc, #256]	@ (8002130 <cliMemoryDump+0x124>)
 800202e:	f7ff fe69 	bl	8001d04 <cliPrintf>
 8002032:	e07a      	b.n	800212a <cliMemoryDump+0x11e>
    return;
  }

  if(argc > 1)
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	2b01      	cmp	r3, #1
 8002038:	dd09      	ble.n	800204e <cliMemoryDump+0x42>
  {
    size = (int)strtoul((const char * ) argv[1], (char **)NULL, (int) 0);
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	3304      	adds	r3, #4
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2200      	movs	r2, #0
 8002042:	2100      	movs	r1, #0
 8002044:	4618      	mov	r0, r3
 8002046:	f005 f921 	bl	800728c <strtoul>
 800204a:	4603      	mov	r3, r0
 800204c:	62bb      	str	r3, [r7, #40]	@ 0x28
  }
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2200      	movs	r2, #0
 8002054:	2100      	movs	r1, #0
 8002056:	4618      	mov	r0, r3
 8002058:	f005 f918 	bl	800728c <strtoul>
 800205c:	4603      	mov	r3, r0
 800205e:	627b      	str	r3, [r7, #36]	@ 0x24
  ascptr = (unsigned int *)addr;
 8002060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002062:	61bb      	str	r3, [r7, #24]

  cliPrintf("\n   ");
 8002064:	4833      	ldr	r0, [pc, #204]	@ (8002134 <cliMemoryDump+0x128>)
 8002066:	f7ff fe4d 	bl	8001d04 <cliPrintf>
  for (idx = 0; idx<size; idx++)
 800206a:	2300      	movs	r3, #0
 800206c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800206e:	e058      	b.n	8002122 <cliMemoryDump+0x116>
  {
    if((idx%4) == 0)
 8002070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002072:	f003 0303 	and.w	r3, r3, #3
 8002076:	2b00      	cmp	r3, #0
 8002078:	d104      	bne.n	8002084 <cliMemoryDump+0x78>
    {
      cliPrintf(" 0x%08X: ", (unsigned int)addr);
 800207a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800207c:	4619      	mov	r1, r3
 800207e:	482e      	ldr	r0, [pc, #184]	@ (8002138 <cliMemoryDump+0x12c>)
 8002080:	f7ff fe40 	bl	8001d04 <cliPrintf>
    }
    cliPrintf(" 0x%08X", *(addr));
 8002084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4619      	mov	r1, r3
 800208a:	482c      	ldr	r0, [pc, #176]	@ (800213c <cliMemoryDump+0x130>)
 800208c:	f7ff fe3a 	bl	8001d04 <cliPrintf>

    if ((idx%4) == 3)
 8002090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002092:	425a      	negs	r2, r3
 8002094:	f003 0303 	and.w	r3, r3, #3
 8002098:	f002 0203 	and.w	r2, r2, #3
 800209c:	bf58      	it	pl
 800209e:	4253      	negpl	r3, r2
 80020a0:	2b03      	cmp	r3, #3
 80020a2:	d138      	bne.n	8002116 <cliMemoryDump+0x10a>
    {
      cliPrintf ("  |");
 80020a4:	4826      	ldr	r0, [pc, #152]	@ (8002140 <cliMemoryDump+0x134>)
 80020a6:	f7ff fe2d 	bl	8001d04 <cliPrintf>
      for (idx1= 0; idx1< 4; idx1++)
 80020aa:	2300      	movs	r3, #0
 80020ac:	623b      	str	r3, [r7, #32]
 80020ae:	e02c      	b.n	800210a <cliMemoryDump+0xfe>
      {
        memcpy((char *)asc, (char *)ascptr, 4);
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	60fb      	str	r3, [r7, #12]
        for (i=0;i<4;i++)
 80020b6:	2300      	movs	r3, #0
 80020b8:	61fb      	str	r3, [r7, #28]
 80020ba:	e01d      	b.n	80020f8 <cliMemoryDump+0xec>
        {
          if (asc[i] > 0x1f && asc[i] < 0x7f)
 80020bc:	f107 020c 	add.w	r2, r7, #12
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	4413      	add	r3, r2
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	2b1f      	cmp	r3, #31
 80020c8:	d910      	bls.n	80020ec <cliMemoryDump+0xe0>
 80020ca:	f107 020c 	add.w	r2, r7, #12
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	4413      	add	r3, r2
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	2b7e      	cmp	r3, #126	@ 0x7e
 80020d6:	d809      	bhi.n	80020ec <cliMemoryDump+0xe0>
          {
            cliPrintf("%c", asc[i]);
 80020d8:	f107 020c 	add.w	r2, r7, #12
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	4413      	add	r3, r2
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	4619      	mov	r1, r3
 80020e4:	4817      	ldr	r0, [pc, #92]	@ (8002144 <cliMemoryDump+0x138>)
 80020e6:	f7ff fe0d 	bl	8001d04 <cliPrintf>
 80020ea:	e002      	b.n	80020f2 <cliMemoryDump+0xe6>
          }
          else
          {
            cliPrintf(".");
 80020ec:	4816      	ldr	r0, [pc, #88]	@ (8002148 <cliMemoryDump+0x13c>)
 80020ee:	f7ff fe09 	bl	8001d04 <cliPrintf>
        for (i=0;i<4;i++)
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	3301      	adds	r3, #1
 80020f6:	61fb      	str	r3, [r7, #28]
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	2b03      	cmp	r3, #3
 80020fc:	ddde      	ble.n	80020bc <cliMemoryDump+0xb0>
          }
        }
        ascptr+=1;
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	3304      	adds	r3, #4
 8002102:	61bb      	str	r3, [r7, #24]
      for (idx1= 0; idx1< 4; idx1++)
 8002104:	6a3b      	ldr	r3, [r7, #32]
 8002106:	3301      	adds	r3, #1
 8002108:	623b      	str	r3, [r7, #32]
 800210a:	6a3b      	ldr	r3, [r7, #32]
 800210c:	2b03      	cmp	r3, #3
 800210e:	ddcf      	ble.n	80020b0 <cliMemoryDump+0xa4>
      }
      cliPrintf("|\n   ");
 8002110:	480e      	ldr	r0, [pc, #56]	@ (800214c <cliMemoryDump+0x140>)
 8002112:	f7ff fdf7 	bl	8001d04 <cliPrintf>
    }
    addr++;
 8002116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002118:	3304      	adds	r3, #4
 800211a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (idx = 0; idx<size; idx++)
 800211c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800211e:	3301      	adds	r3, #1
 8002120:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002122:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002126:	429a      	cmp	r2, r3
 8002128:	dba2      	blt.n	8002070 <cliMemoryDump+0x64>
  }
}
 800212a:	3730      	adds	r7, #48	@ 0x30
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	080097ec 	.word	0x080097ec
 8002134:	08009800 	.word	0x08009800
 8002138:	08009808 	.word	0x08009808
 800213c:	08009814 	.word	0x08009814
 8002140:	0800981c 	.word	0x0800981c
 8002144:	08009820 	.word	0x08009820
 8002148:	08009824 	.word	0x08009824
 800214c:	08009828 	.word	0x08009828

08002150 <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	4603      	mov	r3, r0
 8002158:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 800215a:	2300      	movs	r3, #0
 800215c:	60fb      	str	r3, [r7, #12]

  switch(ch)
 800215e:	79fb      	ldrb	r3, [r7, #7]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d017      	beq.n	8002194 <uartAvailable+0x44>
 8002164:	2b01      	cmp	r3, #1
 8002166:	d116      	bne.n	8002196 <uartAvailable+0x46>
    case CH_CDC:
      //ret = cdcAvailable();
      break;

    case CH_USART1:
      qbuffer.in = (qbuffer.len - hdma_usart1_rx.Instance->CNDTR);
 8002168:	4b0e      	ldr	r3, [pc, #56]	@ (80021a4 <uartAvailable+0x54>)
 800216a:	689a      	ldr	r2, [r3, #8]
 800216c:	4b0e      	ldr	r3, [pc, #56]	@ (80021a8 <uartAvailable+0x58>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	4a0b      	ldr	r2, [pc, #44]	@ (80021a4 <uartAvailable+0x54>)
 8002176:	6013      	str	r3, [r2, #0]
      ret = (qbuffer.in - qbuffer.out) % qbuffer.len;
 8002178:	4b0a      	ldr	r3, [pc, #40]	@ (80021a4 <uartAvailable+0x54>)
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	4b09      	ldr	r3, [pc, #36]	@ (80021a4 <uartAvailable+0x54>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	4a08      	ldr	r2, [pc, #32]	@ (80021a4 <uartAvailable+0x54>)
 8002184:	6892      	ldr	r2, [r2, #8]
 8002186:	fbb3 f1f2 	udiv	r1, r3, r2
 800218a:	fb01 f202 	mul.w	r2, r1, r2
 800218e:	1a9b      	subs	r3, r3, r2
 8002190:	60fb      	str	r3, [r7, #12]
      break;
 8002192:	e000      	b.n	8002196 <uartAvailable+0x46>
      break;
 8002194:	bf00      	nop
  }

  return ret;
 8002196:	68fb      	ldr	r3, [r7, #12]
}
 8002198:	4618      	mov	r0, r3
 800219a:	3714      	adds	r7, #20
 800219c:	46bd      	mov	sp, r7
 800219e:	bc80      	pop	{r7}
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	20000640 	.word	0x20000640
 80021a8:	20000838 	.word	0x20000838

080021ac <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
 80021ac:	b40e      	push	{r1, r2, r3}
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b0c7      	sub	sp, #284	@ 0x11c
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	4602      	mov	r2, r0
 80021b6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80021ba:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 80021be:	701a      	strb	r2, [r3, #0]
  char buf[256];
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
 80021c0:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 80021c4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80021c8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80021cc:	601a      	str	r2, [r3, #0]
  len = vsnprintf(buf, 256, fmt, args);
 80021ce:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80021d2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80021d6:	f107 0010 	add.w	r0, r7, #16
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80021e0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80021e4:	f005 f98c 	bl	8007500 <vsniprintf>
 80021e8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

  ret = uartWrite(ch, (uint8_t *)buf, len);
 80021ec:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80021f0:	f107 0110 	add.w	r1, r7, #16
 80021f4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80021f8:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	4618      	mov	r0, r3
 8002200:	f000 f80c 	bl	800221c <uartWrite>
 8002204:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

  va_end(args);


  return ret;
 8002208:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 800220c:	4618      	mov	r0, r3
 800220e:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 8002212:	46bd      	mov	sp, r7
 8002214:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002218:	b003      	add	sp, #12
 800221a:	4770      	bx	lr

0800221c <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b086      	sub	sp, #24
 8002220:	af00      	add	r7, sp, #0
 8002222:	4603      	mov	r3, r0
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	607a      	str	r2, [r7, #4]
 8002228:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 800222a:	2300      	movs	r3, #0
 800222c:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  if(ch == CH_CDC)
 800222e:	7bfb      	ldrb	r3, [r7, #15]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d010      	beq.n	8002256 <uartWrite+0x3a>
  {
    //ret = cdcWrite(p_data, length);
  }
  else if(ch == CH_USART1)
 8002234:	7bfb      	ldrb	r3, [r7, #15]
 8002236:	2b01      	cmp	r3, #1
 8002238:	d10d      	bne.n	8002256 <uartWrite+0x3a>
  {
    status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	b29a      	uxth	r2, r3
 800223e:	2364      	movs	r3, #100	@ 0x64
 8002240:	68b9      	ldr	r1, [r7, #8]
 8002242:	4807      	ldr	r0, [pc, #28]	@ (8002260 <uartWrite+0x44>)
 8002244:	f003 f9b0 	bl	80055a8 <HAL_UART_Transmit>
 8002248:	4603      	mov	r3, r0
 800224a:	74fb      	strb	r3, [r7, #19]
    if (status == HAL_OK)
 800224c:	7cfb      	ldrb	r3, [r7, #19]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <uartWrite+0x3a>
    {
      ret = length;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8002256:	697b      	ldr	r3, [r7, #20]
}
 8002258:	4618      	mov	r0, r3
 800225a:	3718      	adds	r7, #24
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	200007a8 	.word	0x200007a8

08002264 <uartRead>:

uint8_t uartRead(uint8_t ch)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	4603      	mov	r3, r0
 800226c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = 0;
 800226e:	2300      	movs	r3, #0
 8002270:	73fb      	strb	r3, [r7, #15]

  if(ch == CH_CDC)
 8002272:	79fb      	ldrb	r3, [r7, #7]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d009      	beq.n	800228c <uartRead+0x28>
  {
    //data = cdcRead();
  }
  else if(ch == CH_USART1)
 8002278:	79fb      	ldrb	r3, [r7, #7]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d106      	bne.n	800228c <uartRead+0x28>
  {
     qbufferRead(&qbuffer, &data,1);
 800227e:	f107 030f 	add.w	r3, r7, #15
 8002282:	2201      	movs	r2, #1
 8002284:	4619      	mov	r1, r3
 8002286:	4804      	ldr	r0, [pc, #16]	@ (8002298 <uartRead+0x34>)
 8002288:	f000 f808 	bl	800229c <qbufferRead>
  }

  return data;
 800228c:	7bfb      	ldrb	r3, [r7, #15]
}
 800228e:	4618      	mov	r0, r3
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	20000640 	.word	0x20000640

0800229c <qbufferRead>:

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 800229c:	b480      	push	{r7}
 800229e:	b087      	sub	sp, #28
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	607a      	str	r2, [r7, #4]
  bool ret = true;
 80022a8:	2301      	movs	r3, #1
 80022aa:	75fb      	strb	r3, [r7, #23]

  for(int i=0; i<length; i++)
 80022ac:	2300      	movs	r3, #0
 80022ae:	613b      	str	r3, [r7, #16]
 80022b0:	e026      	b.n	8002300 <qbufferRead+0x64>
  {
    if(p_node->p_buf != NULL)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d009      	beq.n	80022ce <qbufferRead+0x32>
    {
      p_data[i] = p_node->p_buf[p_node->out];
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	68da      	ldr	r2, [r3, #12]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	441a      	add	r2, r3
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	68b9      	ldr	r1, [r7, #8]
 80022c8:	440b      	add	r3, r1
 80022ca:	7812      	ldrb	r2, [r2, #0]
 80022cc:	701a      	strb	r2, [r3, #0]
    }

    if(p_node->out != p_node->in)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	685a      	ldr	r2, [r3, #4]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d00c      	beq.n	80022f4 <qbufferRead+0x58>
    {
      p_node->out = (p_node->out + 1) % p_node->len;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	3301      	adds	r3, #1
 80022e0:	68fa      	ldr	r2, [r7, #12]
 80022e2:	6892      	ldr	r2, [r2, #8]
 80022e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80022e8:	fb01 f202 	mul.w	r2, r1, r2
 80022ec:	1a9a      	subs	r2, r3, r2
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	605a      	str	r2, [r3, #4]
 80022f2:	e002      	b.n	80022fa <qbufferRead+0x5e>
    }
    else
    {
      ret = false;
 80022f4:	2300      	movs	r3, #0
 80022f6:	75fb      	strb	r3, [r7, #23]
      break;
 80022f8:	e006      	b.n	8002308 <qbufferRead+0x6c>
  for(int i=0; i<length; i++)
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	3301      	adds	r3, #1
 80022fe:	613b      	str	r3, [r7, #16]
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	429a      	cmp	r2, r3
 8002306:	d8d4      	bhi.n	80022b2 <qbufferRead+0x16>
    }
  }

  return ret;
 8002308:	7dfb      	ldrb	r3, [r7, #23]
}
 800230a:	4618      	mov	r0, r3
 800230c:	371c      	adds	r7, #28
 800230e:	46bd      	mov	sp, r7
 8002310:	bc80      	pop	{r7}
 8002312:	4770      	bx	lr

08002314 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800231a:	4b10      	ldr	r3, [pc, #64]	@ (800235c <MX_DMA_Init+0x48>)
 800231c:	695b      	ldr	r3, [r3, #20]
 800231e:	4a0f      	ldr	r2, [pc, #60]	@ (800235c <MX_DMA_Init+0x48>)
 8002320:	f043 0301 	orr.w	r3, r3, #1
 8002324:	6153      	str	r3, [r2, #20]
 8002326:	4b0d      	ldr	r3, [pc, #52]	@ (800235c <MX_DMA_Init+0x48>)
 8002328:	695b      	ldr	r3, [r3, #20]
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	607b      	str	r3, [r7, #4]
 8002330:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002332:	2200      	movs	r2, #0
 8002334:	2100      	movs	r1, #0
 8002336:	200f      	movs	r0, #15
 8002338:	f000 fffb 	bl	8003332 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800233c:	200f      	movs	r0, #15
 800233e:	f001 f814 	bl	800336a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8002342:	2200      	movs	r2, #0
 8002344:	2100      	movs	r1, #0
 8002346:	2010      	movs	r0, #16
 8002348:	f000 fff3 	bl	8003332 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800234c:	2010      	movs	r0, #16
 800234e:	f001 f80c 	bl	800336a <HAL_NVIC_EnableIRQ>

}
 8002352:	bf00      	nop
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	40021000 	.word	0x40021000

08002360 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b088      	sub	sp, #32
 8002364:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002366:	f107 0310 	add.w	r3, r7, #16
 800236a:	2200      	movs	r2, #0
 800236c:	601a      	str	r2, [r3, #0]
 800236e:	605a      	str	r2, [r3, #4]
 8002370:	609a      	str	r2, [r3, #8]
 8002372:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002374:	4b19      	ldr	r3, [pc, #100]	@ (80023dc <MX_GPIO_Init+0x7c>)
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	4a18      	ldr	r2, [pc, #96]	@ (80023dc <MX_GPIO_Init+0x7c>)
 800237a:	f043 0320 	orr.w	r3, r3, #32
 800237e:	6193      	str	r3, [r2, #24]
 8002380:	4b16      	ldr	r3, [pc, #88]	@ (80023dc <MX_GPIO_Init+0x7c>)
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	f003 0320 	and.w	r3, r3, #32
 8002388:	60fb      	str	r3, [r7, #12]
 800238a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800238c:	4b13      	ldr	r3, [pc, #76]	@ (80023dc <MX_GPIO_Init+0x7c>)
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	4a12      	ldr	r2, [pc, #72]	@ (80023dc <MX_GPIO_Init+0x7c>)
 8002392:	f043 0304 	orr.w	r3, r3, #4
 8002396:	6193      	str	r3, [r2, #24]
 8002398:	4b10      	ldr	r3, [pc, #64]	@ (80023dc <MX_GPIO_Init+0x7c>)
 800239a:	699b      	ldr	r3, [r3, #24]
 800239c:	f003 0304 	and.w	r3, r3, #4
 80023a0:	60bb      	str	r3, [r7, #8]
 80023a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023a4:	4b0d      	ldr	r3, [pc, #52]	@ (80023dc <MX_GPIO_Init+0x7c>)
 80023a6:	699b      	ldr	r3, [r3, #24]
 80023a8:	4a0c      	ldr	r2, [pc, #48]	@ (80023dc <MX_GPIO_Init+0x7c>)
 80023aa:	f043 0308 	orr.w	r3, r3, #8
 80023ae:	6193      	str	r3, [r2, #24]
 80023b0:	4b0a      	ldr	r3, [pc, #40]	@ (80023dc <MX_GPIO_Init+0x7c>)
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	f003 0308 	and.w	r3, r3, #8
 80023b8:	607b      	str	r3, [r7, #4]
 80023ba:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_TEST_Pin;
 80023bc:	2310      	movs	r3, #16
 80023be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023c0:	2300      	movs	r3, #0
 80023c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c4:	2300      	movs	r3, #0
 80023c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN_TEST_GPIO_Port, &GPIO_InitStruct);
 80023c8:	f107 0310 	add.w	r3, r7, #16
 80023cc:	4619      	mov	r1, r3
 80023ce:	4804      	ldr	r0, [pc, #16]	@ (80023e0 <MX_GPIO_Init+0x80>)
 80023d0:	f001 fa88 	bl	80038e4 <HAL_GPIO_Init>

}
 80023d4:	bf00      	nop
 80023d6:	3720      	adds	r7, #32
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	40021000 	.word	0x40021000
 80023e0:	40010c00 	.word	0x40010c00

080023e4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80023e8:	4b12      	ldr	r3, [pc, #72]	@ (8002434 <MX_I2C1_Init+0x50>)
 80023ea:	4a13      	ldr	r2, [pc, #76]	@ (8002438 <MX_I2C1_Init+0x54>)
 80023ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80023ee:	4b11      	ldr	r3, [pc, #68]	@ (8002434 <MX_I2C1_Init+0x50>)
 80023f0:	4a12      	ldr	r2, [pc, #72]	@ (800243c <MX_I2C1_Init+0x58>)
 80023f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80023f4:	4b0f      	ldr	r3, [pc, #60]	@ (8002434 <MX_I2C1_Init+0x50>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80023fa:	4b0e      	ldr	r3, [pc, #56]	@ (8002434 <MX_I2C1_Init+0x50>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002400:	4b0c      	ldr	r3, [pc, #48]	@ (8002434 <MX_I2C1_Init+0x50>)
 8002402:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002406:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002408:	4b0a      	ldr	r3, [pc, #40]	@ (8002434 <MX_I2C1_Init+0x50>)
 800240a:	2200      	movs	r2, #0
 800240c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800240e:	4b09      	ldr	r3, [pc, #36]	@ (8002434 <MX_I2C1_Init+0x50>)
 8002410:	2200      	movs	r2, #0
 8002412:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002414:	4b07      	ldr	r3, [pc, #28]	@ (8002434 <MX_I2C1_Init+0x50>)
 8002416:	2200      	movs	r2, #0
 8002418:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800241a:	4b06      	ldr	r3, [pc, #24]	@ (8002434 <MX_I2C1_Init+0x50>)
 800241c:	2200      	movs	r2, #0
 800241e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002420:	4804      	ldr	r0, [pc, #16]	@ (8002434 <MX_I2C1_Init+0x50>)
 8002422:	f001 fbfb 	bl	8003c1c <HAL_I2C_Init>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800242c:	f000 f8aa 	bl	8002584 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002430:	bf00      	nop
 8002432:	bd80      	pop	{r7, pc}
 8002434:	20000750 	.word	0x20000750
 8002438:	40005400 	.word	0x40005400
 800243c:	000186a0 	.word	0x000186a0

08002440 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b088      	sub	sp, #32
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002448:	f107 0310 	add.w	r3, r7, #16
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	605a      	str	r2, [r3, #4]
 8002452:	609a      	str	r2, [r3, #8]
 8002454:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a15      	ldr	r2, [pc, #84]	@ (80024b0 <HAL_I2C_MspInit+0x70>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d123      	bne.n	80024a8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002460:	4b14      	ldr	r3, [pc, #80]	@ (80024b4 <HAL_I2C_MspInit+0x74>)
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	4a13      	ldr	r2, [pc, #76]	@ (80024b4 <HAL_I2C_MspInit+0x74>)
 8002466:	f043 0308 	orr.w	r3, r3, #8
 800246a:	6193      	str	r3, [r2, #24]
 800246c:	4b11      	ldr	r3, [pc, #68]	@ (80024b4 <HAL_I2C_MspInit+0x74>)
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	f003 0308 	and.w	r3, r3, #8
 8002474:	60fb      	str	r3, [r7, #12]
 8002476:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002478:	23c0      	movs	r3, #192	@ 0xc0
 800247a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800247c:	2312      	movs	r3, #18
 800247e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002480:	2303      	movs	r3, #3
 8002482:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002484:	f107 0310 	add.w	r3, r7, #16
 8002488:	4619      	mov	r1, r3
 800248a:	480b      	ldr	r0, [pc, #44]	@ (80024b8 <HAL_I2C_MspInit+0x78>)
 800248c:	f001 fa2a 	bl	80038e4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002490:	4b08      	ldr	r3, [pc, #32]	@ (80024b4 <HAL_I2C_MspInit+0x74>)
 8002492:	69db      	ldr	r3, [r3, #28]
 8002494:	4a07      	ldr	r2, [pc, #28]	@ (80024b4 <HAL_I2C_MspInit+0x74>)
 8002496:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800249a:	61d3      	str	r3, [r2, #28]
 800249c:	4b05      	ldr	r3, [pc, #20]	@ (80024b4 <HAL_I2C_MspInit+0x74>)
 800249e:	69db      	ldr	r3, [r3, #28]
 80024a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024a4:	60bb      	str	r3, [r7, #8]
 80024a6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80024a8:	bf00      	nop
 80024aa:	3720      	adds	r7, #32
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	40005400 	.word	0x40005400
 80024b4:	40021000 	.word	0x40021000
 80024b8:	40010c00 	.word	0x40010c00

080024bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024c0:	f000 fdda 	bl	8003078 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024c4:	f000 f819 	bl	80024fa <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024c8:	f7ff ff4a 	bl	8002360 <MX_GPIO_Init>
  MX_DMA_Init();
 80024cc:	f7ff ff22 	bl	8002314 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80024d0:	f000 fc70 	bl	8002db4 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80024d4:	f7ff ff86 	bl	80023e4 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80024d8:	f000 fc96 	bl	8002e08 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  cliInit();
 80024dc:	f7fe fed4 	bl	8001288 <cliInit>
  MPU6050_Init(0x00);
 80024e0:	2000      	movs	r0, #0
 80024e2:	f000 fa5b 	bl	800299c <MPU6050_Init>
  buttonInit();
 80024e6:	f7fe fe5f 	bl	80011a8 <buttonInit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  cliOpen(CH_USART1, 11520);
 80024ea:	f44f 5134 	mov.w	r1, #11520	@ 0x2d00
 80024ee:	2001      	movs	r0, #1
 80024f0:	f7fe ff16 	bl	8001320 <cliOpen>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    cliMain();
 80024f4:	f7fe fff8 	bl	80014e8 <cliMain>
 80024f8:	e7fc      	b.n	80024f4 <main+0x38>

080024fa <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b090      	sub	sp, #64	@ 0x40
 80024fe:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002500:	f107 0318 	add.w	r3, r7, #24
 8002504:	2228      	movs	r2, #40	@ 0x28
 8002506:	2100      	movs	r1, #0
 8002508:	4618      	mov	r0, r3
 800250a:	f005 f807 	bl	800751c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800250e:	1d3b      	adds	r3, r7, #4
 8002510:	2200      	movs	r2, #0
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	605a      	str	r2, [r3, #4]
 8002516:	609a      	str	r2, [r3, #8]
 8002518:	60da      	str	r2, [r3, #12]
 800251a:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800251c:	2301      	movs	r3, #1
 800251e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002520:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002524:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002526:	2300      	movs	r3, #0
 8002528:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800252a:	2301      	movs	r3, #1
 800252c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800252e:	2302      	movs	r3, #2
 8002530:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002532:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002536:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002538:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800253c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800253e:	f107 0318 	add.w	r3, r7, #24
 8002542:	4618      	mov	r0, r3
 8002544:	f002 fbd0 	bl	8004ce8 <HAL_RCC_OscConfig>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800254e:	f000 f819 	bl	8002584 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002552:	230f      	movs	r3, #15
 8002554:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002556:	2302      	movs	r3, #2
 8002558:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800255a:	2300      	movs	r3, #0
 800255c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800255e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002562:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002564:	2300      	movs	r3, #0
 8002566:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002568:	1d3b      	adds	r3, r7, #4
 800256a:	2102      	movs	r1, #2
 800256c:	4618      	mov	r0, r3
 800256e:	f002 fe3d 	bl	80051ec <HAL_RCC_ClockConfig>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002578:	f000 f804 	bl	8002584 <Error_Handler>
  }
}
 800257c:	bf00      	nop
 800257e:	3740      	adds	r7, #64	@ 0x40
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002588:	b672      	cpsid	i
}
 800258a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800258c:	bf00      	nop
 800258e:	e7fd      	b.n	800258c <Error_Handler+0x8>

08002590 <MPU6050_ReadOneByte>:
//������ ���� 1����Ʈ �б� 
// �Ķ����1 : ���� ��巹��, �Ķ���� 2 : ������ �������� ��巹��
// ���ϰ� : �������䰪

uint8_t MPU6050_ReadOneByte(uint8_t RegAddr)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b088      	sub	sp, #32
 8002594:	af04      	add	r7, sp, #16
 8002596:	4603      	mov	r3, r0
 8002598:	71fb      	strb	r3, [r7, #7]
	uint8_t Data = 0;
 800259a:	2300      	movs	r3, #0
 800259c:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(&MPU6050_I2C_PORT,MPU6050_DEVICE_ADDR,RegAddr,1,&Data,1,1000);
 800259e:	79fb      	ldrb	r3, [r7, #7]
 80025a0:	b29a      	uxth	r2, r3
 80025a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80025a6:	9302      	str	r3, [sp, #8]
 80025a8:	2301      	movs	r3, #1
 80025aa:	9301      	str	r3, [sp, #4]
 80025ac:	f107 030f 	add.w	r3, r7, #15
 80025b0:	9300      	str	r3, [sp, #0]
 80025b2:	2301      	movs	r3, #1
 80025b4:	21d0      	movs	r1, #208	@ 0xd0
 80025b6:	4804      	ldr	r0, [pc, #16]	@ (80025c8 <MPU6050_ReadOneByte+0x38>)
 80025b8:	f001 fd6e 	bl	8004098 <HAL_I2C_Mem_Read>
	return Data;
 80025bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	20000750 	.word	0x20000750

080025cc <MPU6050_WriteOneByte>:

//������  1����Ʈ ���� 
// �Ķ����1 : ���� ��巹��, �Ķ���� 2 : ������ �������� ��巹��
// ���ϰ� : �������䰪
void MPU6050_WriteOneByte(uint8_t RegAddr, uint8_t Data)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af04      	add	r7, sp, #16
 80025d2:	4603      	mov	r3, r0
 80025d4:	460a      	mov	r2, r1
 80025d6:	71fb      	strb	r3, [r7, #7]
 80025d8:	4613      	mov	r3, r2
 80025da:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&MPU6050_I2C_PORT,MPU6050_DEVICE_ADDR,RegAddr,I2C_MEMADD_SIZE_8BIT,&Data,1,1000);
 80025dc:	79fb      	ldrb	r3, [r7, #7]
 80025de:	b29a      	uxth	r2, r3
 80025e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80025e4:	9302      	str	r3, [sp, #8]
 80025e6:	2301      	movs	r3, #1
 80025e8:	9301      	str	r3, [sp, #4]
 80025ea:	1dbb      	adds	r3, r7, #6
 80025ec:	9300      	str	r3, [sp, #0]
 80025ee:	2301      	movs	r3, #1
 80025f0:	21d0      	movs	r1, #208	@ 0xd0
 80025f2:	4803      	ldr	r0, [pc, #12]	@ (8002600 <MPU6050_WriteOneByte+0x34>)
 80025f4:	f001 fc56 	bl	8003ea4 <HAL_I2C_Mem_Write>
}
 80025f8:	bf00      	nop
 80025fa:	3708      	adds	r7, #8
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	20000750 	.word	0x20000750

08002604 <MPU6050_WriteBits>:

bool MPU6050_WriteBits(uint8_t RegAddr, uint8_t BitStart, uint8_t Length, uint8_t Data)
{
 8002604:	b590      	push	{r4, r7, lr}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	4604      	mov	r4, r0
 800260c:	4608      	mov	r0, r1
 800260e:	4611      	mov	r1, r2
 8002610:	461a      	mov	r2, r3
 8002612:	4623      	mov	r3, r4
 8002614:	71fb      	strb	r3, [r7, #7]
 8002616:	4603      	mov	r3, r0
 8002618:	71bb      	strb	r3, [r7, #6]
 800261a:	460b      	mov	r3, r1
 800261c:	717b      	strb	r3, [r7, #5]
 800261e:	4613      	mov	r3, r2
 8002620:	713b      	strb	r3, [r7, #4]

   uint8_t Dat, Mask;
    
		Dat = MPU6050_ReadOneByte(RegAddr);
 8002622:	79fb      	ldrb	r3, [r7, #7]
 8002624:	4618      	mov	r0, r3
 8002626:	f7ff ffb3 	bl	8002590 <MPU6050_ReadOneByte>
 800262a:	4603      	mov	r3, r0
 800262c:	73fb      	strb	r3, [r7, #15]
    Mask = (0xFF << (BitStart + 1)) | 0xFF >> ((8 - BitStart) + Length - 1);
 800262e:	79bb      	ldrb	r3, [r7, #6]
 8002630:	3301      	adds	r3, #1
 8002632:	22ff      	movs	r2, #255	@ 0xff
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	b25a      	sxtb	r2, r3
 800263a:	79bb      	ldrb	r3, [r7, #6]
 800263c:	f1c3 0108 	rsb	r1, r3, #8
 8002640:	797b      	ldrb	r3, [r7, #5]
 8002642:	440b      	add	r3, r1
 8002644:	3b01      	subs	r3, #1
 8002646:	21ff      	movs	r1, #255	@ 0xff
 8002648:	fa41 f303 	asr.w	r3, r1, r3
 800264c:	b25b      	sxtb	r3, r3
 800264e:	4313      	orrs	r3, r2
 8002650:	b25b      	sxtb	r3, r3
 8002652:	73bb      	strb	r3, [r7, #14]
    Data <<= (8 - Length);
 8002654:	793a      	ldrb	r2, [r7, #4]
 8002656:	797b      	ldrb	r3, [r7, #5]
 8002658:	f1c3 0308 	rsb	r3, r3, #8
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	713b      	strb	r3, [r7, #4]
    Data >>= (7 - BitStart);
 8002662:	793a      	ldrb	r2, [r7, #4]
 8002664:	79bb      	ldrb	r3, [r7, #6]
 8002666:	f1c3 0307 	rsb	r3, r3, #7
 800266a:	fa42 f303 	asr.w	r3, r2, r3
 800266e:	713b      	strb	r3, [r7, #4]
    Dat &= Mask;
 8002670:	7bfa      	ldrb	r2, [r7, #15]
 8002672:	7bbb      	ldrb	r3, [r7, #14]
 8002674:	4013      	ands	r3, r2
 8002676:	73fb      	strb	r3, [r7, #15]
    Dat |= Data;
 8002678:	7bfa      	ldrb	r2, [r7, #15]
 800267a:	793b      	ldrb	r3, [r7, #4]
 800267c:	4313      	orrs	r3, r2
 800267e:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteOneByte(RegAddr, Dat);
 8002680:	7bfa      	ldrb	r2, [r7, #15]
 8002682:	79fb      	ldrb	r3, [r7, #7]
 8002684:	4611      	mov	r1, r2
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff ffa0 	bl	80025cc <MPU6050_WriteOneByte>
    
    return true;
 800268c:	2301      	movs	r3, #1
}
 800268e:	4618      	mov	r0, r3
 8002690:	3714      	adds	r7, #20
 8002692:	46bd      	mov	sp, r7
 8002694:	bd90      	pop	{r4, r7, pc}

08002696 <MPU6050_WriteOneBit>:

bool MPU6050_WriteOneBit(uint8_t RegAddr, uint8_t BitNum, uint8_t Data)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	b084      	sub	sp, #16
 800269a:	af00      	add	r7, sp, #0
 800269c:	4603      	mov	r3, r0
 800269e:	71fb      	strb	r3, [r7, #7]
 80026a0:	460b      	mov	r3, r1
 80026a2:	71bb      	strb	r3, [r7, #6]
 80026a4:	4613      	mov	r3, r2
 80026a6:	717b      	strb	r3, [r7, #5]
    uint8_t Dat;
    
    Dat = MPU6050_ReadOneByte(RegAddr);
 80026a8:	79fb      	ldrb	r3, [r7, #7]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7ff ff70 	bl	8002590 <MPU6050_ReadOneByte>
 80026b0:	4603      	mov	r3, r0
 80026b2:	73fb      	strb	r3, [r7, #15]
    Dat = (Data != 0) ? (Dat | (1 << BitNum)) : (Dat & ~(1 << BitNum));
 80026b4:	797b      	ldrb	r3, [r7, #5]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00a      	beq.n	80026d0 <MPU6050_WriteOneBit+0x3a>
 80026ba:	79bb      	ldrb	r3, [r7, #6]
 80026bc:	2201      	movs	r2, #1
 80026be:	fa02 f303 	lsl.w	r3, r2, r3
 80026c2:	b25a      	sxtb	r2, r3
 80026c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	b25b      	sxtb	r3, r3
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	e00b      	b.n	80026e8 <MPU6050_WriteOneBit+0x52>
 80026d0:	79bb      	ldrb	r3, [r7, #6]
 80026d2:	2201      	movs	r2, #1
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	b25b      	sxtb	r3, r3
 80026da:	43db      	mvns	r3, r3
 80026dc:	b25a      	sxtb	r2, r3
 80026de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026e2:	4013      	ands	r3, r2
 80026e4:	b25b      	sxtb	r3, r3
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteOneByte(RegAddr, Dat);
 80026ea:	7bfa      	ldrb	r2, [r7, #15]
 80026ec:	79fb      	ldrb	r3, [r7, #7]
 80026ee:	4611      	mov	r1, r2
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7ff ff6b 	bl	80025cc <MPU6050_WriteOneByte>
    
    return true;
 80026f6:	2301      	movs	r3, #1
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3710      	adds	r7, #16
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}

08002700 <MPU6050_ReadBuff>:

//�����б� (����̽� ��巹��, �������� ��巹��, ������ ũ��, ���� ������)
bool MPU6050_ReadBuff(uint8_t RegAddr, uint8_t Num, uint8_t *pBuff)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b086      	sub	sp, #24
 8002704:	af04      	add	r7, sp, #16
 8002706:	4603      	mov	r3, r0
 8002708:	603a      	str	r2, [r7, #0]
 800270a:	71fb      	strb	r3, [r7, #7]
 800270c:	460b      	mov	r3, r1
 800270e:	71bb      	strb	r3, [r7, #6]
	// �޸� �б�(����̽� ��巹��, 8��Ʈ ��巹�� �޸� ũ��, ���� ������, ���ۼ���, �õ�Ƚ��)
	return HAL_I2C_Mem_Read(&MPU6050_I2C_PORT,MPU6050_DEVICE_ADDR,RegAddr,I2C_MEMADD_SIZE_8BIT,pBuff,Num,1000);
 8002710:	79fb      	ldrb	r3, [r7, #7]
 8002712:	b29a      	uxth	r2, r3
 8002714:	79bb      	ldrb	r3, [r7, #6]
 8002716:	b29b      	uxth	r3, r3
 8002718:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800271c:	9102      	str	r1, [sp, #8]
 800271e:	9301      	str	r3, [sp, #4]
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	9300      	str	r3, [sp, #0]
 8002724:	2301      	movs	r3, #1
 8002726:	21d0      	movs	r1, #208	@ 0xd0
 8002728:	4806      	ldr	r0, [pc, #24]	@ (8002744 <MPU6050_ReadBuff+0x44>)
 800272a:	f001 fcb5 	bl	8004098 <HAL_I2C_Mem_Read>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	bf14      	ite	ne
 8002734:	2301      	movne	r3, #1
 8002736:	2300      	moveq	r3, #0
 8002738:	b2db      	uxtb	r3, r3
}
 800273a:	4618      	mov	r0, r3
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	20000750 	.word	0x20000750

08002748 <MPU6050_SetClockSource>:
  	}
  	*pOutVal >>= 3;
}

void MPU6050_SetClockSource(uint8_t source)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	4603      	mov	r3, r0
 8002750:	71fb      	strb	r3, [r7, #7]
    MPU6050_WriteBits(MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, source);
 8002752:	79fb      	ldrb	r3, [r7, #7]
 8002754:	2203      	movs	r2, #3
 8002756:	2102      	movs	r1, #2
 8002758:	206b      	movs	r0, #107	@ 0x6b
 800275a:	f7ff ff53 	bl	8002604 <MPU6050_WriteBits>
}
 800275e:	bf00      	nop
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <MPU6050_SetFullScaleGyroRange>:

void MPU6050_SetFullScaleGyroRange(uint8_t range)
{
 8002766:	b580      	push	{r7, lr}
 8002768:	b082      	sub	sp, #8
 800276a:	af00      	add	r7, sp, #0
 800276c:	4603      	mov	r3, r0
 800276e:	71fb      	strb	r3, [r7, #7]
    MPU6050_WriteBits(MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, range);
 8002770:	79fb      	ldrb	r3, [r7, #7]
 8002772:	2202      	movs	r2, #2
 8002774:	2104      	movs	r1, #4
 8002776:	201b      	movs	r0, #27
 8002778:	f7ff ff44 	bl	8002604 <MPU6050_WriteBits>
}
 800277c:	bf00      	nop
 800277e:	3708      	adds	r7, #8
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <MPU6050_SetLPF>:

void MPU6050_SetLPF(uint8_t	LowPassFilter)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	4603      	mov	r3, r0
 800278c:	71fb      	strb	r3, [r7, #7]
   MPU6050_WriteOneByte(MPU6050_RA_CONFIG, LowPassFilter);
 800278e:	79fb      	ldrb	r3, [r7, #7]
 8002790:	4619      	mov	r1, r3
 8002792:	201a      	movs	r0, #26
 8002794:	f7ff ff1a 	bl	80025cc <MPU6050_WriteOneByte>
}
 8002798:	bf00      	nop
 800279a:	3708      	adds	r7, #8
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <MPU6050_SetFullScaleAccelRange>:

void MPU6050_SetFullScaleAccelRange(uint8_t range)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	4603      	mov	r3, r0
 80027a8:	71fb      	strb	r3, [r7, #7]
    MPU6050_WriteBits(MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, range);
 80027aa:	79fb      	ldrb	r3, [r7, #7]
 80027ac:	2202      	movs	r2, #2
 80027ae:	2104      	movs	r1, #4
 80027b0:	201c      	movs	r0, #28
 80027b2:	f7ff ff27 	bl	8002604 <MPU6050_WriteBits>
}
 80027b6:	bf00      	nop
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <MPU6050_SetSleepEnabled>:

void MPU6050_SetSleepEnabled(uint8_t enabled) 
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b082      	sub	sp, #8
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	4603      	mov	r3, r0
 80027c6:	71fb      	strb	r3, [r7, #7]
    MPU6050_WriteOneBit(MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, enabled);
 80027c8:	79fb      	ldrb	r3, [r7, #7]
 80027ca:	461a      	mov	r2, r3
 80027cc:	2106      	movs	r1, #6
 80027ce:	206b      	movs	r0, #107	@ 0x6b
 80027d0:	f7ff ff61 	bl	8002696 <MPU6050_WriteOneBit>
}
 80027d4:	bf00      	nop
 80027d6:	3708      	adds	r7, #8
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <MPU6050_SetI2CMasterModeEnabled>:

void MPU6050_SetI2CMasterModeEnabled(uint8_t enabled) 
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	4603      	mov	r3, r0
 80027e4:	71fb      	strb	r3, [r7, #7]
    MPU6050_WriteOneBit(MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_EN_BIT, enabled);
 80027e6:	79fb      	ldrb	r3, [r7, #7]
 80027e8:	461a      	mov	r2, r3
 80027ea:	2105      	movs	r1, #5
 80027ec:	206a      	movs	r0, #106	@ 0x6a
 80027ee:	f7ff ff52 	bl	8002696 <MPU6050_WriteOneBit>
}
 80027f2:	bf00      	nop
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <MPU6050_SetI2CBypassEnabled>:

void MPU6050_SetI2CBypassEnabled(uint8_t enabled) 
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b082      	sub	sp, #8
 80027fe:	af00      	add	r7, sp, #0
 8002800:	4603      	mov	r3, r0
 8002802:	71fb      	strb	r3, [r7, #7]
    MPU6050_WriteOneBit(MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_I2C_BYPASS_EN_BIT, enabled);
 8002804:	79fb      	ldrb	r3, [r7, #7]
 8002806:	461a      	mov	r2, r3
 8002808:	2101      	movs	r1, #1
 800280a:	2037      	movs	r0, #55	@ 0x37
 800280c:	f7ff ff43 	bl	8002696 <MPU6050_WriteOneBit>
}
 8002810:	bf00      	nop
 8002812:	3708      	adds	r7, #8
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <MPU6050_GetData>:

void MPU6050_GetData(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz, int16_t* tmpr) 
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b08c      	sub	sp, #48	@ 0x30
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
 8002824:	603b      	str	r3, [r7, #0]
	uint8_t Buffer[14] = {0};
 8002826:	2300      	movs	r3, #0
 8002828:	623b      	str	r3, [r7, #32]
 800282a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800282e:	2200      	movs	r2, #0
 8002830:	601a      	str	r2, [r3, #0]
 8002832:	605a      	str	r2, [r3, #4]
 8002834:	811a      	strh	r2, [r3, #8]
	int16_t InBuffer[7] = {0};
 8002836:	f107 0310 	add.w	r3, r7, #16
 800283a:	2200      	movs	r2, #0
 800283c:	601a      	str	r2, [r3, #0]
 800283e:	605a      	str	r2, [r3, #4]
 8002840:	609a      	str	r2, [r3, #8]
 8002842:	819a      	strh	r2, [r3, #12]
	int16_t temp;
	
	MPU6050_ReadBuff(MPU6050_RA_ACCEL_XOUT_H, 14, Buffer);
 8002844:	f107 0320 	add.w	r3, r7, #32
 8002848:	461a      	mov	r2, r3
 800284a:	210e      	movs	r1, #14
 800284c:	203b      	movs	r0, #59	@ 0x3b
 800284e:	f7ff ff57 	bl	8002700 <MPU6050_ReadBuff>
		
  InBuffer[0] = (((int16_t)Buffer[0]) << 8) | Buffer[1];
 8002852:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002856:	021b      	lsls	r3, r3, #8
 8002858:	b21a      	sxth	r2, r3
 800285a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800285e:	b21b      	sxth	r3, r3
 8002860:	4313      	orrs	r3, r2
 8002862:	b21b      	sxth	r3, r3
 8002864:	823b      	strh	r3, [r7, #16]
  InBuffer[1] = (((int16_t)Buffer[2]) << 8) | Buffer[3];
 8002866:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800286a:	021b      	lsls	r3, r3, #8
 800286c:	b21a      	sxth	r2, r3
 800286e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002872:	b21b      	sxth	r3, r3
 8002874:	4313      	orrs	r3, r2
 8002876:	b21b      	sxth	r3, r3
 8002878:	827b      	strh	r3, [r7, #18]
  InBuffer[2] = (((int16_t)Buffer[4]) << 8) | Buffer[5];
 800287a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800287e:	021b      	lsls	r3, r3, #8
 8002880:	b21a      	sxth	r2, r3
 8002882:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002886:	b21b      	sxth	r3, r3
 8002888:	4313      	orrs	r3, r2
 800288a:	b21b      	sxth	r3, r3
 800288c:	82bb      	strh	r3, [r7, #20]

  InBuffer[3] = (((int16_t)Buffer[8]) << 8) | Buffer[9];
 800288e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002892:	021b      	lsls	r3, r3, #8
 8002894:	b21a      	sxth	r2, r3
 8002896:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800289a:	b21b      	sxth	r3, r3
 800289c:	4313      	orrs	r3, r2
 800289e:	b21b      	sxth	r3, r3
 80028a0:	82fb      	strh	r3, [r7, #22]
  InBuffer[4] = (((int16_t)Buffer[10]) << 8) | Buffer[11];
 80028a2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80028a6:	021b      	lsls	r3, r3, #8
 80028a8:	b21a      	sxth	r2, r3
 80028aa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80028ae:	b21b      	sxth	r3, r3
 80028b0:	4313      	orrs	r3, r2
 80028b2:	b21b      	sxth	r3, r3
 80028b4:	833b      	strh	r3, [r7, #24]
  InBuffer[5] = (((int16_t)Buffer[12]) << 8) | Buffer[13];
 80028b6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80028ba:	021b      	lsls	r3, r3, #8
 80028bc:	b21a      	sxth	r2, r3
 80028be:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80028c2:	b21b      	sxth	r3, r3
 80028c4:	4313      	orrs	r3, r2
 80028c6:	b21b      	sxth	r3, r3
 80028c8:	837b      	strh	r3, [r7, #26]
	
	temp = (((int16_t)Buffer[6]) << 8) | Buffer[7];
 80028ca:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80028ce:	021b      	lsls	r3, r3, #8
 80028d0:	b21a      	sxth	r2, r3
 80028d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80028d6:	b21b      	sxth	r3, r3
 80028d8:	4313      	orrs	r3, r2
 80028da:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	InBuffer[6] = (int16_t)(temp* 10L / 34) + 3653;
 80028dc:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	@ 0x2e
 80028e0:	4613      	mov	r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	4413      	add	r3, r2
 80028e6:	005b      	lsls	r3, r3, #1
 80028e8:	4a2a      	ldr	r2, [pc, #168]	@ (8002994 <MPU6050_GetData+0x17c>)
 80028ea:	fb82 1203 	smull	r1, r2, r2, r3
 80028ee:	1112      	asrs	r2, r2, #4
 80028f0:	17db      	asrs	r3, r3, #31
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	f603 6345 	addw	r3, r3, #3653	@ 0xe45
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	b21b      	sxth	r3, r3
 80028fe:	83bb      	strh	r3, [r7, #28]
	
	*ax = *(InBuffer + 0);
 8002900:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	801a      	strh	r2, [r3, #0]
	*ay = *(InBuffer + 1);
 8002908:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	801a      	strh	r2, [r3, #0]
	*az = *(InBuffer + 2);
 8002910:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	801a      	strh	r2, [r3, #0]
	*gx = *(InBuffer + 3) / 32.8f;
 8002918:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800291c:	4618      	mov	r0, r3
 800291e:	f7fe f9b7 	bl	8000c90 <__aeabi_i2f>
 8002922:	4603      	mov	r3, r0
 8002924:	491c      	ldr	r1, [pc, #112]	@ (8002998 <MPU6050_GetData+0x180>)
 8002926:	4618      	mov	r0, r3
 8002928:	f7fe faba 	bl	8000ea0 <__aeabi_fdiv>
 800292c:	4603      	mov	r3, r0
 800292e:	4618      	mov	r0, r3
 8002930:	f7fe fbde 	bl	80010f0 <__aeabi_f2iz>
 8002934:	4603      	mov	r3, r0
 8002936:	b21a      	sxth	r2, r3
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	801a      	strh	r2, [r3, #0]
	*gy = *(InBuffer + 4) / 32.8f;
 800293c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002940:	4618      	mov	r0, r3
 8002942:	f7fe f9a5 	bl	8000c90 <__aeabi_i2f>
 8002946:	4603      	mov	r3, r0
 8002948:	4913      	ldr	r1, [pc, #76]	@ (8002998 <MPU6050_GetData+0x180>)
 800294a:	4618      	mov	r0, r3
 800294c:	f7fe faa8 	bl	8000ea0 <__aeabi_fdiv>
 8002950:	4603      	mov	r3, r0
 8002952:	4618      	mov	r0, r3
 8002954:	f7fe fbcc 	bl	80010f0 <__aeabi_f2iz>
 8002958:	4603      	mov	r3, r0
 800295a:	b21a      	sxth	r2, r3
 800295c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800295e:	801a      	strh	r2, [r3, #0]
	*gz = *(InBuffer + 5) / 32.8f;
 8002960:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002964:	4618      	mov	r0, r3
 8002966:	f7fe f993 	bl	8000c90 <__aeabi_i2f>
 800296a:	4603      	mov	r3, r0
 800296c:	490a      	ldr	r1, [pc, #40]	@ (8002998 <MPU6050_GetData+0x180>)
 800296e:	4618      	mov	r0, r3
 8002970:	f7fe fa96 	bl	8000ea0 <__aeabi_fdiv>
 8002974:	4603      	mov	r3, r0
 8002976:	4618      	mov	r0, r3
 8002978:	f7fe fbba 	bl	80010f0 <__aeabi_f2iz>
 800297c:	4603      	mov	r3, r0
 800297e:	b21a      	sxth	r2, r3
 8002980:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002982:	801a      	strh	r2, [r3, #0]
	*tmpr = *(InBuffer + 6);
 8002984:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8002988:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800298a:	801a      	strh	r2, [r3, #0]
}
 800298c:	bf00      	nop
 800298e:	3730      	adds	r7, #48	@ 0x30
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	78787879 	.word	0x78787879
 8002998:	42033333 	.word	0x42033333

0800299c <MPU6050_Init>:
	MPU6050_GyroOffset.Z = TempGz >> 5;

}

void MPU6050_Init(uint8_t	lpf)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	4603      	mov	r3, r0
 80029a4:	71fb      	strb	r3, [r7, #7]
  MPU6050_SetClockSource(MPU6050_CLOCK_PLL_XGYRO); 
 80029a6:	2001      	movs	r0, #1
 80029a8:	f7ff fece 	bl	8002748 <MPU6050_SetClockSource>
  MPU6050_SetFullScaleGyroRange(MPU6050_GYRO_FS_1000);
 80029ac:	2002      	movs	r0, #2
 80029ae:	f7ff feda 	bl	8002766 <MPU6050_SetFullScaleGyroRange>
  MPU6050_SetFullScaleAccelRange(MPU6050_ACCEL_FS_2);	
 80029b2:	2000      	movs	r0, #0
 80029b4:	f7ff fef4 	bl	80027a0 <MPU6050_SetFullScaleAccelRange>
		MPU6050_DLPF_BW_42          0x03
		MPU6050_DLPF_BW_20          0x04
		MPU6050_DLPF_BW_10          0x05
		MPU6050_DLPF_BW_5           0x06
	*/
	MPU6050_SetLPF(lpf);
 80029b8:	79fb      	ldrb	r3, [r7, #7]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff fee2 	bl	8002784 <MPU6050_SetLPF>
	
  MPU6050_SetSleepEnabled(0); 
 80029c0:	2000      	movs	r0, #0
 80029c2:	f7ff fefc 	bl	80027be <MPU6050_SetSleepEnabled>
	MPU6050_SetI2CMasterModeEnabled(0);	 
 80029c6:	2000      	movs	r0, #0
 80029c8:	f7ff ff08 	bl	80027dc <MPU6050_SetI2CMasterModeEnabled>
	MPU6050_SetI2CBypassEnabled(1);	 
 80029cc:	2001      	movs	r0, #1
 80029ce:	f7ff ff14 	bl	80027fa <MPU6050_SetI2CBypassEnabled>
	
	MPU6050_WriteOneBit(MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_INT_LEVEL_BIT, 0);
 80029d2:	2200      	movs	r2, #0
 80029d4:	2107      	movs	r1, #7
 80029d6:	2037      	movs	r0, #55	@ 0x37
 80029d8:	f7ff fe5d 	bl	8002696 <MPU6050_WriteOneBit>
	MPU6050_WriteOneBit( MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_INT_OPEN_BIT, 0);
 80029dc:	2200      	movs	r2, #0
 80029de:	2106      	movs	r1, #6
 80029e0:	2037      	movs	r0, #55	@ 0x37
 80029e2:	f7ff fe58 	bl	8002696 <MPU6050_WriteOneBit>
	MPU6050_WriteOneBit(MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_LATCH_INT_EN_BIT, 1);
 80029e6:	2201      	movs	r2, #1
 80029e8:	2105      	movs	r1, #5
 80029ea:	2037      	movs	r0, #55	@ 0x37
 80029ec:	f7ff fe53 	bl	8002696 <MPU6050_WriteOneBit>
	MPU6050_WriteOneBit(MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_INT_RD_CLEAR_BIT, 1);
 80029f0:	2201      	movs	r2, #1
 80029f2:	2104      	movs	r1, #4
 80029f4:	2037      	movs	r0, #55	@ 0x37
 80029f6:	f7ff fe4e 	bl	8002696 <MPU6050_WriteOneBit>
  MPU6050_WriteOneBit(MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_DATA_RDY_BIT, 1);
 80029fa:	2201      	movs	r2, #1
 80029fc:	2100      	movs	r1, #0
 80029fe:	2038      	movs	r0, #56	@ 0x38
 8002a00:	f7ff fe49 	bl	8002696 <MPU6050_WriteOneBit>
	HAL_Delay(100);  // ���̷� ����ȭ ���
 8002a04:	2064      	movs	r0, #100	@ 0x64
 8002a06:	f000 fb99 	bl	800313c <HAL_Delay>

	cliAdd("mpu6050", cliMPU6050);
 8002a0a:	4904      	ldr	r1, [pc, #16]	@ (8002a1c <MPU6050_Init+0x80>)
 8002a0c:	4804      	ldr	r0, [pc, #16]	@ (8002a20 <MPU6050_Init+0x84>)
 8002a0e:	f7ff fa7b 	bl	8001f08 <cliAdd>
}
 8002a12:	bf00      	nop
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	08002a25 	.word	0x08002a25
 8002a20:	08009838 	.word	0x08009838

08002a24 <cliMPU6050>:

void cliMPU6050(cli_args_t *args)
{
 8002a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a26:	b08b      	sub	sp, #44	@ 0x2c
 8002a28:	af04      	add	r7, sp, #16
 8002a2a:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	75fb      	strb	r3, [r7, #23]

  if(args->argc == 1 && args->isStr(0, "show"))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	881b      	ldrh	r3, [r3, #0]
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d15b      	bne.n	8002af0 <cliMPU6050+0xcc>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	695b      	ldr	r3, [r3, #20]
 8002a3c:	4933      	ldr	r1, [pc, #204]	@ (8002b0c <cliMPU6050+0xe8>)
 8002a3e:	2000      	movs	r0, #0
 8002a40:	4798      	blx	r3
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d053      	beq.n	8002af0 <cliMPU6050+0xcc>
  {
    int16_t ax = 0, ay = 0, az = 0;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	82bb      	strh	r3, [r7, #20]
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	827b      	strh	r3, [r7, #18]
 8002a50:	2300      	movs	r3, #0
 8002a52:	823b      	strh	r3, [r7, #16]
    int16_t gx = 0, gy = 0, gz = 0;
 8002a54:	2300      	movs	r3, #0
 8002a56:	81fb      	strh	r3, [r7, #14]
 8002a58:	2300      	movs	r3, #0
 8002a5a:	81bb      	strh	r3, [r7, #12]
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	817b      	strh	r3, [r7, #10]
    int16_t temp = 0;
 8002a60:	2300      	movs	r3, #0
 8002a62:	813b      	strh	r3, [r7, #8]

    uint8_t str = 0;
 8002a64:	2300      	movs	r3, #0
 8002a66:	75bb      	strb	r3, [r7, #22]

    while(cliKeepLoop())
 8002a68:	e039      	b.n	8002ade <cliMPU6050+0xba>
    {
      str = uartRead(CH_USART1);
 8002a6a:	2001      	movs	r0, #1
 8002a6c:	f7ff fbfa 	bl	8002264 <uartRead>
 8002a70:	4603      	mov	r3, r0
 8002a72:	75bb      	strb	r3, [r7, #22]

      if(str == 0x0D)
 8002a74:	7dbb      	ldrb	r3, [r7, #22]
 8002a76:	2b0d      	cmp	r3, #13
 8002a78:	d037      	beq.n	8002aea <cliMPU6050+0xc6>
        break;

      MPU6050_GetData(&ax, &ay, &az, &gx, &gy, &gz, &temp);
 8002a7a:	f107 040e 	add.w	r4, r7, #14
 8002a7e:	f107 0210 	add.w	r2, r7, #16
 8002a82:	f107 0112 	add.w	r1, r7, #18
 8002a86:	f107 0014 	add.w	r0, r7, #20
 8002a8a:	f107 0308 	add.w	r3, r7, #8
 8002a8e:	9302      	str	r3, [sp, #8]
 8002a90:	f107 030a 	add.w	r3, r7, #10
 8002a94:	9301      	str	r3, [sp, #4]
 8002a96:	f107 030c 	add.w	r3, r7, #12
 8002a9a:	9300      	str	r3, [sp, #0]
 8002a9c:	4623      	mov	r3, r4
 8002a9e:	f7ff febb 	bl	8002818 <MPU6050_GetData>

      cliPrintf("ax: %d, ay: %d, az: %d, gx: %d, gy: %d, gz: %d, temp: %d\n", ax, ay, az, gx, gy, gz, temp);
 8002aa2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002aa6:	461c      	mov	r4, r3
 8002aa8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002aac:	461d      	mov	r5, r3
 8002aae:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002ab2:	461e      	mov	r6, r3
 8002ab4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ab8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002abc:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002ac0:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 8002ac4:	9003      	str	r0, [sp, #12]
 8002ac6:	9102      	str	r1, [sp, #8]
 8002ac8:	9201      	str	r2, [sp, #4]
 8002aca:	9300      	str	r3, [sp, #0]
 8002acc:	4633      	mov	r3, r6
 8002ace:	462a      	mov	r2, r5
 8002ad0:	4621      	mov	r1, r4
 8002ad2:	480f      	ldr	r0, [pc, #60]	@ (8002b10 <cliMPU6050+0xec>)
 8002ad4:	f7ff f916 	bl	8001d04 <cliPrintf>

      HAL_Delay(200);
 8002ad8:	20c8      	movs	r0, #200	@ 0xc8
 8002ada:	f000 fb2f 	bl	800313c <HAL_Delay>
    while(cliKeepLoop())
 8002ade:	f7ff fa05 	bl	8001eec <cliKeepLoop>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d1c0      	bne.n	8002a6a <cliMPU6050+0x46>
 8002ae8:	e000      	b.n	8002aec <cliMPU6050+0xc8>
        break;
 8002aea:	bf00      	nop
    }

    ret = true;
 8002aec:	2301      	movs	r3, #1
 8002aee:	75fb      	strb	r3, [r7, #23]
  }

  if(ret != true)
 8002af0:	7dfb      	ldrb	r3, [r7, #23]
 8002af2:	f083 0301 	eor.w	r3, r3, #1
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d002      	beq.n	8002b02 <cliMPU6050+0xde>
  {
    cliPrintf("mpu6050 show\n");
 8002afc:	4805      	ldr	r0, [pc, #20]	@ (8002b14 <cliMPU6050+0xf0>)
 8002afe:	f7ff f901 	bl	8001d04 <cliPrintf>
  }
}
 8002b02:	bf00      	nop
 8002b04:	371c      	adds	r7, #28
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	08009840 	.word	0x08009840
 8002b10:	08009848 	.word	0x08009848
 8002b14:	08009884 	.word	0x08009884

08002b18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002b1e:	4b15      	ldr	r3, [pc, #84]	@ (8002b74 <HAL_MspInit+0x5c>)
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	4a14      	ldr	r2, [pc, #80]	@ (8002b74 <HAL_MspInit+0x5c>)
 8002b24:	f043 0301 	orr.w	r3, r3, #1
 8002b28:	6193      	str	r3, [r2, #24]
 8002b2a:	4b12      	ldr	r3, [pc, #72]	@ (8002b74 <HAL_MspInit+0x5c>)
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	60bb      	str	r3, [r7, #8]
 8002b34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b36:	4b0f      	ldr	r3, [pc, #60]	@ (8002b74 <HAL_MspInit+0x5c>)
 8002b38:	69db      	ldr	r3, [r3, #28]
 8002b3a:	4a0e      	ldr	r2, [pc, #56]	@ (8002b74 <HAL_MspInit+0x5c>)
 8002b3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b40:	61d3      	str	r3, [r2, #28]
 8002b42:	4b0c      	ldr	r3, [pc, #48]	@ (8002b74 <HAL_MspInit+0x5c>)
 8002b44:	69db      	ldr	r3, [r3, #28]
 8002b46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b4a:	607b      	str	r3, [r7, #4]
 8002b4c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002b4e:	4b0a      	ldr	r3, [pc, #40]	@ (8002b78 <HAL_MspInit+0x60>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	60fb      	str	r3, [r7, #12]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002b5a:	60fb      	str	r3, [r7, #12]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002b62:	60fb      	str	r3, [r7, #12]
 8002b64:	4a04      	ldr	r2, [pc, #16]	@ (8002b78 <HAL_MspInit+0x60>)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b6a:	bf00      	nop
 8002b6c:	3714      	adds	r7, #20
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bc80      	pop	{r7}
 8002b72:	4770      	bx	lr
 8002b74:	40021000 	.word	0x40021000
 8002b78:	40010000 	.word	0x40010000

08002b7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b80:	bf00      	nop
 8002b82:	e7fd      	b.n	8002b80 <NMI_Handler+0x4>

08002b84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b88:	bf00      	nop
 8002b8a:	e7fd      	b.n	8002b88 <HardFault_Handler+0x4>

08002b8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b90:	bf00      	nop
 8002b92:	e7fd      	b.n	8002b90 <MemManage_Handler+0x4>

08002b94 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b98:	bf00      	nop
 8002b9a:	e7fd      	b.n	8002b98 <BusFault_Handler+0x4>

08002b9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ba0:	bf00      	nop
 8002ba2:	e7fd      	b.n	8002ba0 <UsageFault_Handler+0x4>

08002ba4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ba8:	bf00      	nop
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bc80      	pop	{r7}
 8002bae:	4770      	bx	lr

08002bb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bb4:	bf00      	nop
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bc80      	pop	{r7}
 8002bba:	4770      	bx	lr

08002bbc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bc0:	bf00      	nop
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bc80      	pop	{r7}
 8002bc6:	4770      	bx	lr

08002bc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bcc:	f000 fa9a 	bl	8003104 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bd0:	bf00      	nop
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002bd8:	4802      	ldr	r0, [pc, #8]	@ (8002be4 <DMA1_Channel5_IRQHandler+0x10>)
 8002bda:	f000 fd4f 	bl	800367c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002bde:	bf00      	nop
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	20000838 	.word	0x20000838

08002be8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002bec:	4802      	ldr	r0, [pc, #8]	@ (8002bf8 <DMA1_Channel6_IRQHandler+0x10>)
 8002bee:	f000 fd45 	bl	800367c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002bf2:	bf00      	nop
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	2000087c 	.word	0x2000087c

08002bfc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002c00:	4802      	ldr	r0, [pc, #8]	@ (8002c0c <USART1_IRQHandler+0x10>)
 8002c02:	f002 fd81 	bl	8005708 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002c06:	bf00      	nop
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	200007a8 	.word	0x200007a8

08002c10 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002c14:	4802      	ldr	r0, [pc, #8]	@ (8002c20 <USART2_IRQHandler+0x10>)
 8002c16:	f002 fd77 	bl	8005708 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002c1a:	bf00      	nop
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	200007f0 	.word	0x200007f0

08002c24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  return 1;
 8002c28:	2301      	movs	r3, #1
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bc80      	pop	{r7}
 8002c30:	4770      	bx	lr

08002c32 <_kill>:

int _kill(int pid, int sig)
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b082      	sub	sp, #8
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
 8002c3a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002c3c:	f004 fcfa 	bl	8007634 <__errno>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2216      	movs	r2, #22
 8002c44:	601a      	str	r2, [r3, #0]
  return -1;
 8002c46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <_exit>:

void _exit (int status)
{
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b082      	sub	sp, #8
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002c5a:	f04f 31ff 	mov.w	r1, #4294967295
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f7ff ffe7 	bl	8002c32 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002c64:	bf00      	nop
 8002c66:	e7fd      	b.n	8002c64 <_exit+0x12>

08002c68 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b086      	sub	sp, #24
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c74:	2300      	movs	r3, #0
 8002c76:	617b      	str	r3, [r7, #20]
 8002c78:	e00a      	b.n	8002c90 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c7a:	f3af 8000 	nop.w
 8002c7e:	4601      	mov	r1, r0
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	1c5a      	adds	r2, r3, #1
 8002c84:	60ba      	str	r2, [r7, #8]
 8002c86:	b2ca      	uxtb	r2, r1
 8002c88:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	617b      	str	r3, [r7, #20]
 8002c90:	697a      	ldr	r2, [r7, #20]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	dbf0      	blt.n	8002c7a <_read+0x12>
  }

  return len;
 8002c98:	687b      	ldr	r3, [r7, #4]
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3718      	adds	r7, #24
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b086      	sub	sp, #24
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	60f8      	str	r0, [r7, #12]
 8002caa:	60b9      	str	r1, [r7, #8]
 8002cac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cae:	2300      	movs	r3, #0
 8002cb0:	617b      	str	r3, [r7, #20]
 8002cb2:	e009      	b.n	8002cc8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	1c5a      	adds	r2, r3, #1
 8002cb8:	60ba      	str	r2, [r7, #8]
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	617b      	str	r3, [r7, #20]
 8002cc8:	697a      	ldr	r2, [r7, #20]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	dbf1      	blt.n	8002cb4 <_write+0x12>
  }
  return len;
 8002cd0:	687b      	ldr	r3, [r7, #4]
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3718      	adds	r7, #24
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <_close>:

int _close(int file)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	b083      	sub	sp, #12
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002ce2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bc80      	pop	{r7}
 8002cee:	4770      	bx	lr

08002cf0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002d00:	605a      	str	r2, [r3, #4]
  return 0;
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bc80      	pop	{r7}
 8002d0c:	4770      	bx	lr

08002d0e <_isatty>:

int _isatty(int file)
{
 8002d0e:	b480      	push	{r7}
 8002d10:	b083      	sub	sp, #12
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002d16:	2301      	movs	r3, #1
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bc80      	pop	{r7}
 8002d20:	4770      	bx	lr

08002d22 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d22:	b480      	push	{r7}
 8002d24:	b085      	sub	sp, #20
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	60f8      	str	r0, [r7, #12]
 8002d2a:	60b9      	str	r1, [r7, #8]
 8002d2c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d2e:	2300      	movs	r3, #0
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3714      	adds	r7, #20
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bc80      	pop	{r7}
 8002d38:	4770      	bx	lr
	...

08002d3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b086      	sub	sp, #24
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d44:	4a14      	ldr	r2, [pc, #80]	@ (8002d98 <_sbrk+0x5c>)
 8002d46:	4b15      	ldr	r3, [pc, #84]	@ (8002d9c <_sbrk+0x60>)
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d50:	4b13      	ldr	r3, [pc, #76]	@ (8002da0 <_sbrk+0x64>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d102      	bne.n	8002d5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d58:	4b11      	ldr	r3, [pc, #68]	@ (8002da0 <_sbrk+0x64>)
 8002d5a:	4a12      	ldr	r2, [pc, #72]	@ (8002da4 <_sbrk+0x68>)
 8002d5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d5e:	4b10      	ldr	r3, [pc, #64]	@ (8002da0 <_sbrk+0x64>)
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4413      	add	r3, r2
 8002d66:	693a      	ldr	r2, [r7, #16]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d207      	bcs.n	8002d7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d6c:	f004 fc62 	bl	8007634 <__errno>
 8002d70:	4603      	mov	r3, r0
 8002d72:	220c      	movs	r2, #12
 8002d74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d76:	f04f 33ff 	mov.w	r3, #4294967295
 8002d7a:	e009      	b.n	8002d90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d7c:	4b08      	ldr	r3, [pc, #32]	@ (8002da0 <_sbrk+0x64>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d82:	4b07      	ldr	r3, [pc, #28]	@ (8002da0 <_sbrk+0x64>)
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4413      	add	r3, r2
 8002d8a:	4a05      	ldr	r2, [pc, #20]	@ (8002da0 <_sbrk+0x64>)
 8002d8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3718      	adds	r7, #24
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	20005000 	.word	0x20005000
 8002d9c:	00000400 	.word	0x00000400
 8002da0:	200007a4 	.word	0x200007a4
 8002da4:	20000a10 	.word	0x20000a10

08002da8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002dac:	bf00      	nop
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bc80      	pop	{r7}
 8002db2:	4770      	bx	lr

08002db4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002db8:	4b11      	ldr	r3, [pc, #68]	@ (8002e00 <MX_USART1_UART_Init+0x4c>)
 8002dba:	4a12      	ldr	r2, [pc, #72]	@ (8002e04 <MX_USART1_UART_Init+0x50>)
 8002dbc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002dbe:	4b10      	ldr	r3, [pc, #64]	@ (8002e00 <MX_USART1_UART_Init+0x4c>)
 8002dc0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002dc4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002dc6:	4b0e      	ldr	r3, [pc, #56]	@ (8002e00 <MX_USART1_UART_Init+0x4c>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8002e00 <MX_USART1_UART_Init+0x4c>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002dd2:	4b0b      	ldr	r3, [pc, #44]	@ (8002e00 <MX_USART1_UART_Init+0x4c>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002dd8:	4b09      	ldr	r3, [pc, #36]	@ (8002e00 <MX_USART1_UART_Init+0x4c>)
 8002dda:	220c      	movs	r2, #12
 8002ddc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dde:	4b08      	ldr	r3, [pc, #32]	@ (8002e00 <MX_USART1_UART_Init+0x4c>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002de4:	4b06      	ldr	r3, [pc, #24]	@ (8002e00 <MX_USART1_UART_Init+0x4c>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002dea:	4805      	ldr	r0, [pc, #20]	@ (8002e00 <MX_USART1_UART_Init+0x4c>)
 8002dec:	f002 fb8c 	bl	8005508 <HAL_UART_Init>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002df6:	f7ff fbc5 	bl	8002584 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002dfa:	bf00      	nop
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	200007a8 	.word	0x200007a8
 8002e04:	40013800 	.word	0x40013800

08002e08 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002e0c:	4b11      	ldr	r3, [pc, #68]	@ (8002e54 <MX_USART2_UART_Init+0x4c>)
 8002e0e:	4a12      	ldr	r2, [pc, #72]	@ (8002e58 <MX_USART2_UART_Init+0x50>)
 8002e10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002e12:	4b10      	ldr	r3, [pc, #64]	@ (8002e54 <MX_USART2_UART_Init+0x4c>)
 8002e14:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002e18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002e1a:	4b0e      	ldr	r3, [pc, #56]	@ (8002e54 <MX_USART2_UART_Init+0x4c>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002e20:	4b0c      	ldr	r3, [pc, #48]	@ (8002e54 <MX_USART2_UART_Init+0x4c>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002e26:	4b0b      	ldr	r3, [pc, #44]	@ (8002e54 <MX_USART2_UART_Init+0x4c>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002e2c:	4b09      	ldr	r3, [pc, #36]	@ (8002e54 <MX_USART2_UART_Init+0x4c>)
 8002e2e:	220c      	movs	r2, #12
 8002e30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e32:	4b08      	ldr	r3, [pc, #32]	@ (8002e54 <MX_USART2_UART_Init+0x4c>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e38:	4b06      	ldr	r3, [pc, #24]	@ (8002e54 <MX_USART2_UART_Init+0x4c>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002e3e:	4805      	ldr	r0, [pc, #20]	@ (8002e54 <MX_USART2_UART_Init+0x4c>)
 8002e40:	f002 fb62 	bl	8005508 <HAL_UART_Init>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002e4a:	f7ff fb9b 	bl	8002584 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002e4e:	bf00      	nop
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	200007f0 	.word	0x200007f0
 8002e58:	40004400 	.word	0x40004400

08002e5c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b08a      	sub	sp, #40	@ 0x28
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e64:	f107 0318 	add.w	r3, r7, #24
 8002e68:	2200      	movs	r2, #0
 8002e6a:	601a      	str	r2, [r3, #0]
 8002e6c:	605a      	str	r2, [r3, #4]
 8002e6e:	609a      	str	r2, [r3, #8]
 8002e70:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a65      	ldr	r2, [pc, #404]	@ (800300c <HAL_UART_MspInit+0x1b0>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d160      	bne.n	8002f3e <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e7c:	4b64      	ldr	r3, [pc, #400]	@ (8003010 <HAL_UART_MspInit+0x1b4>)
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	4a63      	ldr	r2, [pc, #396]	@ (8003010 <HAL_UART_MspInit+0x1b4>)
 8002e82:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e86:	6193      	str	r3, [r2, #24]
 8002e88:	4b61      	ldr	r3, [pc, #388]	@ (8003010 <HAL_UART_MspInit+0x1b4>)
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e90:	617b      	str	r3, [r7, #20]
 8002e92:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e94:	4b5e      	ldr	r3, [pc, #376]	@ (8003010 <HAL_UART_MspInit+0x1b4>)
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	4a5d      	ldr	r2, [pc, #372]	@ (8003010 <HAL_UART_MspInit+0x1b4>)
 8002e9a:	f043 0304 	orr.w	r3, r3, #4
 8002e9e:	6193      	str	r3, [r2, #24]
 8002ea0:	4b5b      	ldr	r3, [pc, #364]	@ (8003010 <HAL_UART_MspInit+0x1b4>)
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	f003 0304 	and.w	r3, r3, #4
 8002ea8:	613b      	str	r3, [r7, #16]
 8002eaa:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = UART_CLI_TX_Pin;
 8002eac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002eb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(UART_CLI_TX_GPIO_Port, &GPIO_InitStruct);
 8002eba:	f107 0318 	add.w	r3, r7, #24
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	4854      	ldr	r0, [pc, #336]	@ (8003014 <HAL_UART_MspInit+0x1b8>)
 8002ec2:	f000 fd0f 	bl	80038e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = UART_CLI_RX_Pin;
 8002ec6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002eca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(UART_CLI_RX_GPIO_Port, &GPIO_InitStruct);
 8002ed4:	f107 0318 	add.w	r3, r7, #24
 8002ed8:	4619      	mov	r1, r3
 8002eda:	484e      	ldr	r0, [pc, #312]	@ (8003014 <HAL_UART_MspInit+0x1b8>)
 8002edc:	f000 fd02 	bl	80038e4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002ee0:	4b4d      	ldr	r3, [pc, #308]	@ (8003018 <HAL_UART_MspInit+0x1bc>)
 8002ee2:	4a4e      	ldr	r2, [pc, #312]	@ (800301c <HAL_UART_MspInit+0x1c0>)
 8002ee4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ee6:	4b4c      	ldr	r3, [pc, #304]	@ (8003018 <HAL_UART_MspInit+0x1bc>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002eec:	4b4a      	ldr	r3, [pc, #296]	@ (8003018 <HAL_UART_MspInit+0x1bc>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ef2:	4b49      	ldr	r3, [pc, #292]	@ (8003018 <HAL_UART_MspInit+0x1bc>)
 8002ef4:	2280      	movs	r2, #128	@ 0x80
 8002ef6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ef8:	4b47      	ldr	r3, [pc, #284]	@ (8003018 <HAL_UART_MspInit+0x1bc>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002efe:	4b46      	ldr	r3, [pc, #280]	@ (8003018 <HAL_UART_MspInit+0x1bc>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002f04:	4b44      	ldr	r3, [pc, #272]	@ (8003018 <HAL_UART_MspInit+0x1bc>)
 8002f06:	2220      	movs	r2, #32
 8002f08:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002f0a:	4b43      	ldr	r3, [pc, #268]	@ (8003018 <HAL_UART_MspInit+0x1bc>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002f10:	4841      	ldr	r0, [pc, #260]	@ (8003018 <HAL_UART_MspInit+0x1bc>)
 8002f12:	f000 fa45 	bl	80033a0 <HAL_DMA_Init>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d001      	beq.n	8002f20 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8002f1c:	f7ff fb32 	bl	8002584 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	4a3d      	ldr	r2, [pc, #244]	@ (8003018 <HAL_UART_MspInit+0x1bc>)
 8002f24:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002f26:	4a3c      	ldr	r2, [pc, #240]	@ (8003018 <HAL_UART_MspInit+0x1bc>)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	2100      	movs	r1, #0
 8002f30:	2025      	movs	r0, #37	@ 0x25
 8002f32:	f000 f9fe 	bl	8003332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002f36:	2025      	movs	r0, #37	@ 0x25
 8002f38:	f000 fa17 	bl	800336a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002f3c:	e062      	b.n	8003004 <HAL_UART_MspInit+0x1a8>
  else if(uartHandle->Instance==USART2)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a37      	ldr	r2, [pc, #220]	@ (8003020 <HAL_UART_MspInit+0x1c4>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d15d      	bne.n	8003004 <HAL_UART_MspInit+0x1a8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f48:	4b31      	ldr	r3, [pc, #196]	@ (8003010 <HAL_UART_MspInit+0x1b4>)
 8002f4a:	69db      	ldr	r3, [r3, #28]
 8002f4c:	4a30      	ldr	r2, [pc, #192]	@ (8003010 <HAL_UART_MspInit+0x1b4>)
 8002f4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f52:	61d3      	str	r3, [r2, #28]
 8002f54:	4b2e      	ldr	r3, [pc, #184]	@ (8003010 <HAL_UART_MspInit+0x1b4>)
 8002f56:	69db      	ldr	r3, [r3, #28]
 8002f58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f5c:	60fb      	str	r3, [r7, #12]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f60:	4b2b      	ldr	r3, [pc, #172]	@ (8003010 <HAL_UART_MspInit+0x1b4>)
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	4a2a      	ldr	r2, [pc, #168]	@ (8003010 <HAL_UART_MspInit+0x1b4>)
 8002f66:	f043 0304 	orr.w	r3, r3, #4
 8002f6a:	6193      	str	r3, [r2, #24]
 8002f6c:	4b28      	ldr	r3, [pc, #160]	@ (8003010 <HAL_UART_MspInit+0x1b4>)
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	f003 0304 	and.w	r3, r3, #4
 8002f74:	60bb      	str	r3, [r7, #8]
 8002f76:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = UART_BT_TX_Pin;
 8002f78:	2304      	movs	r3, #4
 8002f7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f80:	2303      	movs	r3, #3
 8002f82:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(UART_BT_TX_GPIO_Port, &GPIO_InitStruct);
 8002f84:	f107 0318 	add.w	r3, r7, #24
 8002f88:	4619      	mov	r1, r3
 8002f8a:	4822      	ldr	r0, [pc, #136]	@ (8003014 <HAL_UART_MspInit+0x1b8>)
 8002f8c:	f000 fcaa 	bl	80038e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART_BT_RX_Pin;
 8002f90:	2308      	movs	r3, #8
 8002f92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f94:	2300      	movs	r3, #0
 8002f96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(UART_BT_RX_GPIO_Port, &GPIO_InitStruct);
 8002f9c:	f107 0318 	add.w	r3, r7, #24
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	481c      	ldr	r0, [pc, #112]	@ (8003014 <HAL_UART_MspInit+0x1b8>)
 8002fa4:	f000 fc9e 	bl	80038e4 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002fa8:	4b1e      	ldr	r3, [pc, #120]	@ (8003024 <HAL_UART_MspInit+0x1c8>)
 8002faa:	4a1f      	ldr	r2, [pc, #124]	@ (8003028 <HAL_UART_MspInit+0x1cc>)
 8002fac:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fae:	4b1d      	ldr	r3, [pc, #116]	@ (8003024 <HAL_UART_MspInit+0x1c8>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fb4:	4b1b      	ldr	r3, [pc, #108]	@ (8003024 <HAL_UART_MspInit+0x1c8>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002fba:	4b1a      	ldr	r3, [pc, #104]	@ (8003024 <HAL_UART_MspInit+0x1c8>)
 8002fbc:	2280      	movs	r2, #128	@ 0x80
 8002fbe:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fc0:	4b18      	ldr	r3, [pc, #96]	@ (8003024 <HAL_UART_MspInit+0x1c8>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fc6:	4b17      	ldr	r3, [pc, #92]	@ (8003024 <HAL_UART_MspInit+0x1c8>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002fcc:	4b15      	ldr	r3, [pc, #84]	@ (8003024 <HAL_UART_MspInit+0x1c8>)
 8002fce:	2220      	movs	r2, #32
 8002fd0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002fd2:	4b14      	ldr	r3, [pc, #80]	@ (8003024 <HAL_UART_MspInit+0x1c8>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002fd8:	4812      	ldr	r0, [pc, #72]	@ (8003024 <HAL_UART_MspInit+0x1c8>)
 8002fda:	f000 f9e1 	bl	80033a0 <HAL_DMA_Init>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d001      	beq.n	8002fe8 <HAL_UART_MspInit+0x18c>
      Error_Handler();
 8002fe4:	f7ff face 	bl	8002584 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4a0e      	ldr	r2, [pc, #56]	@ (8003024 <HAL_UART_MspInit+0x1c8>)
 8002fec:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002fee:	4a0d      	ldr	r2, [pc, #52]	@ (8003024 <HAL_UART_MspInit+0x1c8>)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	2100      	movs	r1, #0
 8002ff8:	2026      	movs	r0, #38	@ 0x26
 8002ffa:	f000 f99a 	bl	8003332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002ffe:	2026      	movs	r0, #38	@ 0x26
 8003000:	f000 f9b3 	bl	800336a <HAL_NVIC_EnableIRQ>
}
 8003004:	bf00      	nop
 8003006:	3728      	adds	r7, #40	@ 0x28
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	40013800 	.word	0x40013800
 8003010:	40021000 	.word	0x40021000
 8003014:	40010800 	.word	0x40010800
 8003018:	20000838 	.word	0x20000838
 800301c:	40020058 	.word	0x40020058
 8003020:	40004400 	.word	0x40004400
 8003024:	2000087c 	.word	0x2000087c
 8003028:	4002006c 	.word	0x4002006c

0800302c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800302c:	f7ff febc 	bl	8002da8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003030:	480b      	ldr	r0, [pc, #44]	@ (8003060 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003032:	490c      	ldr	r1, [pc, #48]	@ (8003064 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003034:	4a0c      	ldr	r2, [pc, #48]	@ (8003068 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003036:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003038:	e002      	b.n	8003040 <LoopCopyDataInit>

0800303a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800303a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800303c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800303e:	3304      	adds	r3, #4

08003040 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003040:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003042:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003044:	d3f9      	bcc.n	800303a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003046:	4a09      	ldr	r2, [pc, #36]	@ (800306c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003048:	4c09      	ldr	r4, [pc, #36]	@ (8003070 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800304a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800304c:	e001      	b.n	8003052 <LoopFillZerobss>

0800304e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800304e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003050:	3204      	adds	r2, #4

08003052 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003052:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003054:	d3fb      	bcc.n	800304e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003056:	f004 faf3 	bl	8007640 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800305a:	f7ff fa2f 	bl	80024bc <main>
  bx lr
 800305e:	4770      	bx	lr
  ldr r0, =_sdata
 8003060:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003064:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8003068:	08009c88 	.word	0x08009c88
  ldr r2, =_sbss
 800306c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8003070:	20000a10 	.word	0x20000a10

08003074 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003074:	e7fe      	b.n	8003074 <ADC1_2_IRQHandler>
	...

08003078 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800307c:	4b08      	ldr	r3, [pc, #32]	@ (80030a0 <HAL_Init+0x28>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a07      	ldr	r2, [pc, #28]	@ (80030a0 <HAL_Init+0x28>)
 8003082:	f043 0310 	orr.w	r3, r3, #16
 8003086:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003088:	2003      	movs	r0, #3
 800308a:	f000 f947 	bl	800331c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800308e:	200f      	movs	r0, #15
 8003090:	f000 f808 	bl	80030a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003094:	f7ff fd40 	bl	8002b18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	40022000 	.word	0x40022000

080030a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030ac:	4b12      	ldr	r3, [pc, #72]	@ (80030f8 <HAL_InitTick+0x54>)
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	4b12      	ldr	r3, [pc, #72]	@ (80030fc <HAL_InitTick+0x58>)
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	4619      	mov	r1, r3
 80030b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80030ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80030be:	fbb2 f3f3 	udiv	r3, r2, r3
 80030c2:	4618      	mov	r0, r3
 80030c4:	f000 f95f 	bl	8003386 <HAL_SYSTICK_Config>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d001      	beq.n	80030d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e00e      	b.n	80030f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2b0f      	cmp	r3, #15
 80030d6:	d80a      	bhi.n	80030ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030d8:	2200      	movs	r2, #0
 80030da:	6879      	ldr	r1, [r7, #4]
 80030dc:	f04f 30ff 	mov.w	r0, #4294967295
 80030e0:	f000 f927 	bl	8003332 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030e4:	4a06      	ldr	r2, [pc, #24]	@ (8003100 <HAL_InitTick+0x5c>)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030ea:	2300      	movs	r3, #0
 80030ec:	e000      	b.n	80030f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3708      	adds	r7, #8
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	2000000c 	.word	0x2000000c
 80030fc:	20000014 	.word	0x20000014
 8003100:	20000010 	.word	0x20000010

08003104 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003104:	b480      	push	{r7}
 8003106:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003108:	4b05      	ldr	r3, [pc, #20]	@ (8003120 <HAL_IncTick+0x1c>)
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	461a      	mov	r2, r3
 800310e:	4b05      	ldr	r3, [pc, #20]	@ (8003124 <HAL_IncTick+0x20>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4413      	add	r3, r2
 8003114:	4a03      	ldr	r2, [pc, #12]	@ (8003124 <HAL_IncTick+0x20>)
 8003116:	6013      	str	r3, [r2, #0]
}
 8003118:	bf00      	nop
 800311a:	46bd      	mov	sp, r7
 800311c:	bc80      	pop	{r7}
 800311e:	4770      	bx	lr
 8003120:	20000014 	.word	0x20000014
 8003124:	200008c0 	.word	0x200008c0

08003128 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0
  return uwTick;
 800312c:	4b02      	ldr	r3, [pc, #8]	@ (8003138 <HAL_GetTick+0x10>)
 800312e:	681b      	ldr	r3, [r3, #0]
}
 8003130:	4618      	mov	r0, r3
 8003132:	46bd      	mov	sp, r7
 8003134:	bc80      	pop	{r7}
 8003136:	4770      	bx	lr
 8003138:	200008c0 	.word	0x200008c0

0800313c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003144:	f7ff fff0 	bl	8003128 <HAL_GetTick>
 8003148:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003154:	d005      	beq.n	8003162 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003156:	4b0a      	ldr	r3, [pc, #40]	@ (8003180 <HAL_Delay+0x44>)
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	461a      	mov	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	4413      	add	r3, r2
 8003160:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003162:	bf00      	nop
 8003164:	f7ff ffe0 	bl	8003128 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	429a      	cmp	r2, r3
 8003172:	d8f7      	bhi.n	8003164 <HAL_Delay+0x28>
  {
  }
}
 8003174:	bf00      	nop
 8003176:	bf00      	nop
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	20000014 	.word	0x20000014

08003184 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003184:	b480      	push	{r7}
 8003186:	b085      	sub	sp, #20
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f003 0307 	and.w	r3, r3, #7
 8003192:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003194:	4b0c      	ldr	r3, [pc, #48]	@ (80031c8 <__NVIC_SetPriorityGrouping+0x44>)
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800319a:	68ba      	ldr	r2, [r7, #8]
 800319c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80031a0:	4013      	ands	r3, r2
 80031a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80031b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031b6:	4a04      	ldr	r2, [pc, #16]	@ (80031c8 <__NVIC_SetPriorityGrouping+0x44>)
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	60d3      	str	r3, [r2, #12]
}
 80031bc:	bf00      	nop
 80031be:	3714      	adds	r7, #20
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bc80      	pop	{r7}
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	e000ed00 	.word	0xe000ed00

080031cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031cc:	b480      	push	{r7}
 80031ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031d0:	4b04      	ldr	r3, [pc, #16]	@ (80031e4 <__NVIC_GetPriorityGrouping+0x18>)
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	0a1b      	lsrs	r3, r3, #8
 80031d6:	f003 0307 	and.w	r3, r3, #7
}
 80031da:	4618      	mov	r0, r3
 80031dc:	46bd      	mov	sp, r7
 80031de:	bc80      	pop	{r7}
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	e000ed00 	.word	0xe000ed00

080031e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	4603      	mov	r3, r0
 80031f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	db0b      	blt.n	8003212 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031fa:	79fb      	ldrb	r3, [r7, #7]
 80031fc:	f003 021f 	and.w	r2, r3, #31
 8003200:	4906      	ldr	r1, [pc, #24]	@ (800321c <__NVIC_EnableIRQ+0x34>)
 8003202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003206:	095b      	lsrs	r3, r3, #5
 8003208:	2001      	movs	r0, #1
 800320a:	fa00 f202 	lsl.w	r2, r0, r2
 800320e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003212:	bf00      	nop
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	bc80      	pop	{r7}
 800321a:	4770      	bx	lr
 800321c:	e000e100 	.word	0xe000e100

08003220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	4603      	mov	r3, r0
 8003228:	6039      	str	r1, [r7, #0]
 800322a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800322c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003230:	2b00      	cmp	r3, #0
 8003232:	db0a      	blt.n	800324a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	b2da      	uxtb	r2, r3
 8003238:	490c      	ldr	r1, [pc, #48]	@ (800326c <__NVIC_SetPriority+0x4c>)
 800323a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800323e:	0112      	lsls	r2, r2, #4
 8003240:	b2d2      	uxtb	r2, r2
 8003242:	440b      	add	r3, r1
 8003244:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003248:	e00a      	b.n	8003260 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	b2da      	uxtb	r2, r3
 800324e:	4908      	ldr	r1, [pc, #32]	@ (8003270 <__NVIC_SetPriority+0x50>)
 8003250:	79fb      	ldrb	r3, [r7, #7]
 8003252:	f003 030f 	and.w	r3, r3, #15
 8003256:	3b04      	subs	r3, #4
 8003258:	0112      	lsls	r2, r2, #4
 800325a:	b2d2      	uxtb	r2, r2
 800325c:	440b      	add	r3, r1
 800325e:	761a      	strb	r2, [r3, #24]
}
 8003260:	bf00      	nop
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	bc80      	pop	{r7}
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	e000e100 	.word	0xe000e100
 8003270:	e000ed00 	.word	0xe000ed00

08003274 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003274:	b480      	push	{r7}
 8003276:	b089      	sub	sp, #36	@ 0x24
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f003 0307 	and.w	r3, r3, #7
 8003286:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	f1c3 0307 	rsb	r3, r3, #7
 800328e:	2b04      	cmp	r3, #4
 8003290:	bf28      	it	cs
 8003292:	2304      	movcs	r3, #4
 8003294:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	3304      	adds	r3, #4
 800329a:	2b06      	cmp	r3, #6
 800329c:	d902      	bls.n	80032a4 <NVIC_EncodePriority+0x30>
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	3b03      	subs	r3, #3
 80032a2:	e000      	b.n	80032a6 <NVIC_EncodePriority+0x32>
 80032a4:	2300      	movs	r3, #0
 80032a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032a8:	f04f 32ff 	mov.w	r2, #4294967295
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	fa02 f303 	lsl.w	r3, r2, r3
 80032b2:	43da      	mvns	r2, r3
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	401a      	ands	r2, r3
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032bc:	f04f 31ff 	mov.w	r1, #4294967295
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	fa01 f303 	lsl.w	r3, r1, r3
 80032c6:	43d9      	mvns	r1, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032cc:	4313      	orrs	r3, r2
         );
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3724      	adds	r7, #36	@ 0x24
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bc80      	pop	{r7}
 80032d6:	4770      	bx	lr

080032d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	3b01      	subs	r3, #1
 80032e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032e8:	d301      	bcc.n	80032ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032ea:	2301      	movs	r3, #1
 80032ec:	e00f      	b.n	800330e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032ee:	4a0a      	ldr	r2, [pc, #40]	@ (8003318 <SysTick_Config+0x40>)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	3b01      	subs	r3, #1
 80032f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032f6:	210f      	movs	r1, #15
 80032f8:	f04f 30ff 	mov.w	r0, #4294967295
 80032fc:	f7ff ff90 	bl	8003220 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003300:	4b05      	ldr	r3, [pc, #20]	@ (8003318 <SysTick_Config+0x40>)
 8003302:	2200      	movs	r2, #0
 8003304:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003306:	4b04      	ldr	r3, [pc, #16]	@ (8003318 <SysTick_Config+0x40>)
 8003308:	2207      	movs	r2, #7
 800330a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3708      	adds	r7, #8
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	e000e010 	.word	0xe000e010

0800331c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f7ff ff2d 	bl	8003184 <__NVIC_SetPriorityGrouping>
}
 800332a:	bf00      	nop
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003332:	b580      	push	{r7, lr}
 8003334:	b086      	sub	sp, #24
 8003336:	af00      	add	r7, sp, #0
 8003338:	4603      	mov	r3, r0
 800333a:	60b9      	str	r1, [r7, #8]
 800333c:	607a      	str	r2, [r7, #4]
 800333e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003340:	2300      	movs	r3, #0
 8003342:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003344:	f7ff ff42 	bl	80031cc <__NVIC_GetPriorityGrouping>
 8003348:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	68b9      	ldr	r1, [r7, #8]
 800334e:	6978      	ldr	r0, [r7, #20]
 8003350:	f7ff ff90 	bl	8003274 <NVIC_EncodePriority>
 8003354:	4602      	mov	r2, r0
 8003356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800335a:	4611      	mov	r1, r2
 800335c:	4618      	mov	r0, r3
 800335e:	f7ff ff5f 	bl	8003220 <__NVIC_SetPriority>
}
 8003362:	bf00      	nop
 8003364:	3718      	adds	r7, #24
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800336a:	b580      	push	{r7, lr}
 800336c:	b082      	sub	sp, #8
 800336e:	af00      	add	r7, sp, #0
 8003370:	4603      	mov	r3, r0
 8003372:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003378:	4618      	mov	r0, r3
 800337a:	f7ff ff35 	bl	80031e8 <__NVIC_EnableIRQ>
}
 800337e:	bf00      	nop
 8003380:	3708      	adds	r7, #8
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003386:	b580      	push	{r7, lr}
 8003388:	b082      	sub	sp, #8
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7ff ffa2 	bl	80032d8 <SysTick_Config>
 8003394:	4603      	mov	r3, r0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
	...

080033a0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80033a8:	2300      	movs	r3, #0
 80033aa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d101      	bne.n	80033b6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e043      	b.n	800343e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	461a      	mov	r2, r3
 80033bc:	4b22      	ldr	r3, [pc, #136]	@ (8003448 <HAL_DMA_Init+0xa8>)
 80033be:	4413      	add	r3, r2
 80033c0:	4a22      	ldr	r2, [pc, #136]	@ (800344c <HAL_DMA_Init+0xac>)
 80033c2:	fba2 2303 	umull	r2, r3, r2, r3
 80033c6:	091b      	lsrs	r3, r3, #4
 80033c8:	009a      	lsls	r2, r3, #2
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a1f      	ldr	r2, [pc, #124]	@ (8003450 <HAL_DMA_Init+0xb0>)
 80033d2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2202      	movs	r2, #2
 80033d8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80033ea:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80033ee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80033f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003404:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003410:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	69db      	ldr	r3, [r3, #28]
 8003416:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003418:	68fa      	ldr	r2, [r7, #12]
 800341a:	4313      	orrs	r3, r2
 800341c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3714      	adds	r7, #20
 8003442:	46bd      	mov	sp, r7
 8003444:	bc80      	pop	{r7}
 8003446:	4770      	bx	lr
 8003448:	bffdfff8 	.word	0xbffdfff8
 800344c:	cccccccd 	.word	0xcccccccd
 8003450:	40020000 	.word	0x40020000

08003454 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b086      	sub	sp, #24
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
 8003460:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003462:	2300      	movs	r3, #0
 8003464:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f893 3020 	ldrb.w	r3, [r3, #32]
 800346c:	2b01      	cmp	r3, #1
 800346e:	d101      	bne.n	8003474 <HAL_DMA_Start_IT+0x20>
 8003470:	2302      	movs	r3, #2
 8003472:	e04b      	b.n	800350c <HAL_DMA_Start_IT+0xb8>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003482:	b2db      	uxtb	r3, r3
 8003484:	2b01      	cmp	r3, #1
 8003486:	d13a      	bne.n	80034fe <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2202      	movs	r2, #2
 800348c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2200      	movs	r2, #0
 8003494:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f022 0201 	bic.w	r2, r2, #1
 80034a4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	68b9      	ldr	r1, [r7, #8]
 80034ac:	68f8      	ldr	r0, [r7, #12]
 80034ae:	f000 f9eb 	bl	8003888 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d008      	beq.n	80034cc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f042 020e 	orr.w	r2, r2, #14
 80034c8:	601a      	str	r2, [r3, #0]
 80034ca:	e00f      	b.n	80034ec <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f022 0204 	bic.w	r2, r2, #4
 80034da:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f042 020a 	orr.w	r2, r2, #10
 80034ea:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f042 0201 	orr.w	r2, r2, #1
 80034fa:	601a      	str	r2, [r3, #0]
 80034fc:	e005      	b.n	800350a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003506:	2302      	movs	r3, #2
 8003508:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800350a:	7dfb      	ldrb	r3, [r7, #23]
}
 800350c:	4618      	mov	r0, r3
 800350e:	3718      	adds	r7, #24
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003514:	b480      	push	{r7}
 8003516:	b085      	sub	sp, #20
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800351c:	2300      	movs	r3, #0
 800351e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003526:	b2db      	uxtb	r3, r3
 8003528:	2b02      	cmp	r3, #2
 800352a:	d008      	beq.n	800353e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2204      	movs	r2, #4
 8003530:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e020      	b.n	8003580 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f022 020e 	bic.w	r2, r2, #14
 800354c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f022 0201 	bic.w	r2, r2, #1
 800355c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003566:	2101      	movs	r1, #1
 8003568:	fa01 f202 	lsl.w	r2, r1, r2
 800356c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2201      	movs	r2, #1
 8003572:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800357e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003580:	4618      	mov	r0, r3
 8003582:	3714      	adds	r7, #20
 8003584:	46bd      	mov	sp, r7
 8003586:	bc80      	pop	{r7}
 8003588:	4770      	bx	lr
	...

0800358c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003594:	2300      	movs	r3, #0
 8003596:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d005      	beq.n	80035b0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2204      	movs	r2, #4
 80035a8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	73fb      	strb	r3, [r7, #15]
 80035ae:	e051      	b.n	8003654 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f022 020e 	bic.w	r2, r2, #14
 80035be:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f022 0201 	bic.w	r2, r2, #1
 80035ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a22      	ldr	r2, [pc, #136]	@ (8003660 <HAL_DMA_Abort_IT+0xd4>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d029      	beq.n	800362e <HAL_DMA_Abort_IT+0xa2>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a21      	ldr	r2, [pc, #132]	@ (8003664 <HAL_DMA_Abort_IT+0xd8>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d022      	beq.n	800362a <HAL_DMA_Abort_IT+0x9e>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a1f      	ldr	r2, [pc, #124]	@ (8003668 <HAL_DMA_Abort_IT+0xdc>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d01a      	beq.n	8003624 <HAL_DMA_Abort_IT+0x98>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a1e      	ldr	r2, [pc, #120]	@ (800366c <HAL_DMA_Abort_IT+0xe0>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d012      	beq.n	800361e <HAL_DMA_Abort_IT+0x92>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a1c      	ldr	r2, [pc, #112]	@ (8003670 <HAL_DMA_Abort_IT+0xe4>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d00a      	beq.n	8003618 <HAL_DMA_Abort_IT+0x8c>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a1b      	ldr	r2, [pc, #108]	@ (8003674 <HAL_DMA_Abort_IT+0xe8>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d102      	bne.n	8003612 <HAL_DMA_Abort_IT+0x86>
 800360c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003610:	e00e      	b.n	8003630 <HAL_DMA_Abort_IT+0xa4>
 8003612:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003616:	e00b      	b.n	8003630 <HAL_DMA_Abort_IT+0xa4>
 8003618:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800361c:	e008      	b.n	8003630 <HAL_DMA_Abort_IT+0xa4>
 800361e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003622:	e005      	b.n	8003630 <HAL_DMA_Abort_IT+0xa4>
 8003624:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003628:	e002      	b.n	8003630 <HAL_DMA_Abort_IT+0xa4>
 800362a:	2310      	movs	r3, #16
 800362c:	e000      	b.n	8003630 <HAL_DMA_Abort_IT+0xa4>
 800362e:	2301      	movs	r3, #1
 8003630:	4a11      	ldr	r2, [pc, #68]	@ (8003678 <HAL_DMA_Abort_IT+0xec>)
 8003632:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003648:	2b00      	cmp	r3, #0
 800364a:	d003      	beq.n	8003654 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	4798      	blx	r3
    } 
  }
  return status;
 8003654:	7bfb      	ldrb	r3, [r7, #15]
}
 8003656:	4618      	mov	r0, r3
 8003658:	3710      	adds	r7, #16
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	40020008 	.word	0x40020008
 8003664:	4002001c 	.word	0x4002001c
 8003668:	40020030 	.word	0x40020030
 800366c:	40020044 	.word	0x40020044
 8003670:	40020058 	.word	0x40020058
 8003674:	4002006c 	.word	0x4002006c
 8003678:	40020000 	.word	0x40020000

0800367c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003698:	2204      	movs	r2, #4
 800369a:	409a      	lsls	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	4013      	ands	r3, r2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d04f      	beq.n	8003744 <HAL_DMA_IRQHandler+0xc8>
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	f003 0304 	and.w	r3, r3, #4
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d04a      	beq.n	8003744 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0320 	and.w	r3, r3, #32
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d107      	bne.n	80036cc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f022 0204 	bic.w	r2, r2, #4
 80036ca:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a66      	ldr	r2, [pc, #408]	@ (800386c <HAL_DMA_IRQHandler+0x1f0>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d029      	beq.n	800372a <HAL_DMA_IRQHandler+0xae>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a65      	ldr	r2, [pc, #404]	@ (8003870 <HAL_DMA_IRQHandler+0x1f4>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d022      	beq.n	8003726 <HAL_DMA_IRQHandler+0xaa>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a63      	ldr	r2, [pc, #396]	@ (8003874 <HAL_DMA_IRQHandler+0x1f8>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d01a      	beq.n	8003720 <HAL_DMA_IRQHandler+0xa4>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a62      	ldr	r2, [pc, #392]	@ (8003878 <HAL_DMA_IRQHandler+0x1fc>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d012      	beq.n	800371a <HAL_DMA_IRQHandler+0x9e>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a60      	ldr	r2, [pc, #384]	@ (800387c <HAL_DMA_IRQHandler+0x200>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d00a      	beq.n	8003714 <HAL_DMA_IRQHandler+0x98>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a5f      	ldr	r2, [pc, #380]	@ (8003880 <HAL_DMA_IRQHandler+0x204>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d102      	bne.n	800370e <HAL_DMA_IRQHandler+0x92>
 8003708:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800370c:	e00e      	b.n	800372c <HAL_DMA_IRQHandler+0xb0>
 800370e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003712:	e00b      	b.n	800372c <HAL_DMA_IRQHandler+0xb0>
 8003714:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003718:	e008      	b.n	800372c <HAL_DMA_IRQHandler+0xb0>
 800371a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800371e:	e005      	b.n	800372c <HAL_DMA_IRQHandler+0xb0>
 8003720:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003724:	e002      	b.n	800372c <HAL_DMA_IRQHandler+0xb0>
 8003726:	2340      	movs	r3, #64	@ 0x40
 8003728:	e000      	b.n	800372c <HAL_DMA_IRQHandler+0xb0>
 800372a:	2304      	movs	r3, #4
 800372c:	4a55      	ldr	r2, [pc, #340]	@ (8003884 <HAL_DMA_IRQHandler+0x208>)
 800372e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003734:	2b00      	cmp	r3, #0
 8003736:	f000 8094 	beq.w	8003862 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003742:	e08e      	b.n	8003862 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003748:	2202      	movs	r2, #2
 800374a:	409a      	lsls	r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	4013      	ands	r3, r2
 8003750:	2b00      	cmp	r3, #0
 8003752:	d056      	beq.n	8003802 <HAL_DMA_IRQHandler+0x186>
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d051      	beq.n	8003802 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0320 	and.w	r3, r3, #32
 8003768:	2b00      	cmp	r3, #0
 800376a:	d10b      	bne.n	8003784 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f022 020a 	bic.w	r2, r2, #10
 800377a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a38      	ldr	r2, [pc, #224]	@ (800386c <HAL_DMA_IRQHandler+0x1f0>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d029      	beq.n	80037e2 <HAL_DMA_IRQHandler+0x166>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a37      	ldr	r2, [pc, #220]	@ (8003870 <HAL_DMA_IRQHandler+0x1f4>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d022      	beq.n	80037de <HAL_DMA_IRQHandler+0x162>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a35      	ldr	r2, [pc, #212]	@ (8003874 <HAL_DMA_IRQHandler+0x1f8>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d01a      	beq.n	80037d8 <HAL_DMA_IRQHandler+0x15c>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a34      	ldr	r2, [pc, #208]	@ (8003878 <HAL_DMA_IRQHandler+0x1fc>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d012      	beq.n	80037d2 <HAL_DMA_IRQHandler+0x156>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a32      	ldr	r2, [pc, #200]	@ (800387c <HAL_DMA_IRQHandler+0x200>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d00a      	beq.n	80037cc <HAL_DMA_IRQHandler+0x150>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a31      	ldr	r2, [pc, #196]	@ (8003880 <HAL_DMA_IRQHandler+0x204>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d102      	bne.n	80037c6 <HAL_DMA_IRQHandler+0x14a>
 80037c0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80037c4:	e00e      	b.n	80037e4 <HAL_DMA_IRQHandler+0x168>
 80037c6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80037ca:	e00b      	b.n	80037e4 <HAL_DMA_IRQHandler+0x168>
 80037cc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80037d0:	e008      	b.n	80037e4 <HAL_DMA_IRQHandler+0x168>
 80037d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80037d6:	e005      	b.n	80037e4 <HAL_DMA_IRQHandler+0x168>
 80037d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80037dc:	e002      	b.n	80037e4 <HAL_DMA_IRQHandler+0x168>
 80037de:	2320      	movs	r3, #32
 80037e0:	e000      	b.n	80037e4 <HAL_DMA_IRQHandler+0x168>
 80037e2:	2302      	movs	r3, #2
 80037e4:	4a27      	ldr	r2, [pc, #156]	@ (8003884 <HAL_DMA_IRQHandler+0x208>)
 80037e6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d034      	beq.n	8003862 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003800:	e02f      	b.n	8003862 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003806:	2208      	movs	r2, #8
 8003808:	409a      	lsls	r2, r3
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	4013      	ands	r3, r2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d028      	beq.n	8003864 <HAL_DMA_IRQHandler+0x1e8>
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	f003 0308 	and.w	r3, r3, #8
 8003818:	2b00      	cmp	r3, #0
 800381a:	d023      	beq.n	8003864 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f022 020e 	bic.w	r2, r2, #14
 800382a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003834:	2101      	movs	r1, #1
 8003836:	fa01 f202 	lsl.w	r2, r1, r2
 800383a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2201      	movs	r2, #1
 8003846:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003856:	2b00      	cmp	r3, #0
 8003858:	d004      	beq.n	8003864 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	4798      	blx	r3
    }
  }
  return;
 8003862:	bf00      	nop
 8003864:	bf00      	nop
}
 8003866:	3710      	adds	r7, #16
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}
 800386c:	40020008 	.word	0x40020008
 8003870:	4002001c 	.word	0x4002001c
 8003874:	40020030 	.word	0x40020030
 8003878:	40020044 	.word	0x40020044
 800387c:	40020058 	.word	0x40020058
 8003880:	4002006c 	.word	0x4002006c
 8003884:	40020000 	.word	0x40020000

08003888 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003888:	b480      	push	{r7}
 800388a:	b085      	sub	sp, #20
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	607a      	str	r2, [r7, #4]
 8003894:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800389e:	2101      	movs	r1, #1
 80038a0:	fa01 f202 	lsl.w	r2, r1, r2
 80038a4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	683a      	ldr	r2, [r7, #0]
 80038ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	2b10      	cmp	r3, #16
 80038b4:	d108      	bne.n	80038c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68ba      	ldr	r2, [r7, #8]
 80038c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80038c6:	e007      	b.n	80038d8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68ba      	ldr	r2, [r7, #8]
 80038ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	60da      	str	r2, [r3, #12]
}
 80038d8:	bf00      	nop
 80038da:	3714      	adds	r7, #20
 80038dc:	46bd      	mov	sp, r7
 80038de:	bc80      	pop	{r7}
 80038e0:	4770      	bx	lr
	...

080038e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b08b      	sub	sp, #44	@ 0x2c
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80038ee:	2300      	movs	r3, #0
 80038f0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80038f2:	2300      	movs	r3, #0
 80038f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038f6:	e169      	b.n	8003bcc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80038f8:	2201      	movs	r2, #1
 80038fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003900:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	69fa      	ldr	r2, [r7, #28]
 8003908:	4013      	ands	r3, r2
 800390a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	429a      	cmp	r2, r3
 8003912:	f040 8158 	bne.w	8003bc6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	4a9a      	ldr	r2, [pc, #616]	@ (8003b84 <HAL_GPIO_Init+0x2a0>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d05e      	beq.n	80039de <HAL_GPIO_Init+0xfa>
 8003920:	4a98      	ldr	r2, [pc, #608]	@ (8003b84 <HAL_GPIO_Init+0x2a0>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d875      	bhi.n	8003a12 <HAL_GPIO_Init+0x12e>
 8003926:	4a98      	ldr	r2, [pc, #608]	@ (8003b88 <HAL_GPIO_Init+0x2a4>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d058      	beq.n	80039de <HAL_GPIO_Init+0xfa>
 800392c:	4a96      	ldr	r2, [pc, #600]	@ (8003b88 <HAL_GPIO_Init+0x2a4>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d86f      	bhi.n	8003a12 <HAL_GPIO_Init+0x12e>
 8003932:	4a96      	ldr	r2, [pc, #600]	@ (8003b8c <HAL_GPIO_Init+0x2a8>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d052      	beq.n	80039de <HAL_GPIO_Init+0xfa>
 8003938:	4a94      	ldr	r2, [pc, #592]	@ (8003b8c <HAL_GPIO_Init+0x2a8>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d869      	bhi.n	8003a12 <HAL_GPIO_Init+0x12e>
 800393e:	4a94      	ldr	r2, [pc, #592]	@ (8003b90 <HAL_GPIO_Init+0x2ac>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d04c      	beq.n	80039de <HAL_GPIO_Init+0xfa>
 8003944:	4a92      	ldr	r2, [pc, #584]	@ (8003b90 <HAL_GPIO_Init+0x2ac>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d863      	bhi.n	8003a12 <HAL_GPIO_Init+0x12e>
 800394a:	4a92      	ldr	r2, [pc, #584]	@ (8003b94 <HAL_GPIO_Init+0x2b0>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d046      	beq.n	80039de <HAL_GPIO_Init+0xfa>
 8003950:	4a90      	ldr	r2, [pc, #576]	@ (8003b94 <HAL_GPIO_Init+0x2b0>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d85d      	bhi.n	8003a12 <HAL_GPIO_Init+0x12e>
 8003956:	2b12      	cmp	r3, #18
 8003958:	d82a      	bhi.n	80039b0 <HAL_GPIO_Init+0xcc>
 800395a:	2b12      	cmp	r3, #18
 800395c:	d859      	bhi.n	8003a12 <HAL_GPIO_Init+0x12e>
 800395e:	a201      	add	r2, pc, #4	@ (adr r2, 8003964 <HAL_GPIO_Init+0x80>)
 8003960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003964:	080039df 	.word	0x080039df
 8003968:	080039b9 	.word	0x080039b9
 800396c:	080039cb 	.word	0x080039cb
 8003970:	08003a0d 	.word	0x08003a0d
 8003974:	08003a13 	.word	0x08003a13
 8003978:	08003a13 	.word	0x08003a13
 800397c:	08003a13 	.word	0x08003a13
 8003980:	08003a13 	.word	0x08003a13
 8003984:	08003a13 	.word	0x08003a13
 8003988:	08003a13 	.word	0x08003a13
 800398c:	08003a13 	.word	0x08003a13
 8003990:	08003a13 	.word	0x08003a13
 8003994:	08003a13 	.word	0x08003a13
 8003998:	08003a13 	.word	0x08003a13
 800399c:	08003a13 	.word	0x08003a13
 80039a0:	08003a13 	.word	0x08003a13
 80039a4:	08003a13 	.word	0x08003a13
 80039a8:	080039c1 	.word	0x080039c1
 80039ac:	080039d5 	.word	0x080039d5
 80039b0:	4a79      	ldr	r2, [pc, #484]	@ (8003b98 <HAL_GPIO_Init+0x2b4>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d013      	beq.n	80039de <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80039b6:	e02c      	b.n	8003a12 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	623b      	str	r3, [r7, #32]
          break;
 80039be:	e029      	b.n	8003a14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	3304      	adds	r3, #4
 80039c6:	623b      	str	r3, [r7, #32]
          break;
 80039c8:	e024      	b.n	8003a14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	3308      	adds	r3, #8
 80039d0:	623b      	str	r3, [r7, #32]
          break;
 80039d2:	e01f      	b.n	8003a14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	330c      	adds	r3, #12
 80039da:	623b      	str	r3, [r7, #32]
          break;
 80039dc:	e01a      	b.n	8003a14 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d102      	bne.n	80039ec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80039e6:	2304      	movs	r3, #4
 80039e8:	623b      	str	r3, [r7, #32]
          break;
 80039ea:	e013      	b.n	8003a14 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d105      	bne.n	8003a00 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80039f4:	2308      	movs	r3, #8
 80039f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	69fa      	ldr	r2, [r7, #28]
 80039fc:	611a      	str	r2, [r3, #16]
          break;
 80039fe:	e009      	b.n	8003a14 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003a00:	2308      	movs	r3, #8
 8003a02:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	69fa      	ldr	r2, [r7, #28]
 8003a08:	615a      	str	r2, [r3, #20]
          break;
 8003a0a:	e003      	b.n	8003a14 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	623b      	str	r3, [r7, #32]
          break;
 8003a10:	e000      	b.n	8003a14 <HAL_GPIO_Init+0x130>
          break;
 8003a12:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	2bff      	cmp	r3, #255	@ 0xff
 8003a18:	d801      	bhi.n	8003a1e <HAL_GPIO_Init+0x13a>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	e001      	b.n	8003a22 <HAL_GPIO_Init+0x13e>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	3304      	adds	r3, #4
 8003a22:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	2bff      	cmp	r3, #255	@ 0xff
 8003a28:	d802      	bhi.n	8003a30 <HAL_GPIO_Init+0x14c>
 8003a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	e002      	b.n	8003a36 <HAL_GPIO_Init+0x152>
 8003a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a32:	3b08      	subs	r3, #8
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	210f      	movs	r1, #15
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	fa01 f303 	lsl.w	r3, r1, r3
 8003a44:	43db      	mvns	r3, r3
 8003a46:	401a      	ands	r2, r3
 8003a48:	6a39      	ldr	r1, [r7, #32]
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a50:	431a      	orrs	r2, r3
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	f000 80b1 	beq.w	8003bc6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003a64:	4b4d      	ldr	r3, [pc, #308]	@ (8003b9c <HAL_GPIO_Init+0x2b8>)
 8003a66:	699b      	ldr	r3, [r3, #24]
 8003a68:	4a4c      	ldr	r2, [pc, #304]	@ (8003b9c <HAL_GPIO_Init+0x2b8>)
 8003a6a:	f043 0301 	orr.w	r3, r3, #1
 8003a6e:	6193      	str	r3, [r2, #24]
 8003a70:	4b4a      	ldr	r3, [pc, #296]	@ (8003b9c <HAL_GPIO_Init+0x2b8>)
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	f003 0301 	and.w	r3, r3, #1
 8003a78:	60bb      	str	r3, [r7, #8]
 8003a7a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003a7c:	4a48      	ldr	r2, [pc, #288]	@ (8003ba0 <HAL_GPIO_Init+0x2bc>)
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a80:	089b      	lsrs	r3, r3, #2
 8003a82:	3302      	adds	r3, #2
 8003a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a88:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a8c:	f003 0303 	and.w	r3, r3, #3
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	220f      	movs	r2, #15
 8003a94:	fa02 f303 	lsl.w	r3, r2, r3
 8003a98:	43db      	mvns	r3, r3
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a40      	ldr	r2, [pc, #256]	@ (8003ba4 <HAL_GPIO_Init+0x2c0>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d013      	beq.n	8003ad0 <HAL_GPIO_Init+0x1ec>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	4a3f      	ldr	r2, [pc, #252]	@ (8003ba8 <HAL_GPIO_Init+0x2c4>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d00d      	beq.n	8003acc <HAL_GPIO_Init+0x1e8>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a3e      	ldr	r2, [pc, #248]	@ (8003bac <HAL_GPIO_Init+0x2c8>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d007      	beq.n	8003ac8 <HAL_GPIO_Init+0x1e4>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4a3d      	ldr	r2, [pc, #244]	@ (8003bb0 <HAL_GPIO_Init+0x2cc>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d101      	bne.n	8003ac4 <HAL_GPIO_Init+0x1e0>
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e006      	b.n	8003ad2 <HAL_GPIO_Init+0x1ee>
 8003ac4:	2304      	movs	r3, #4
 8003ac6:	e004      	b.n	8003ad2 <HAL_GPIO_Init+0x1ee>
 8003ac8:	2302      	movs	r3, #2
 8003aca:	e002      	b.n	8003ad2 <HAL_GPIO_Init+0x1ee>
 8003acc:	2301      	movs	r3, #1
 8003ace:	e000      	b.n	8003ad2 <HAL_GPIO_Init+0x1ee>
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ad4:	f002 0203 	and.w	r2, r2, #3
 8003ad8:	0092      	lsls	r2, r2, #2
 8003ada:	4093      	lsls	r3, r2
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003ae2:	492f      	ldr	r1, [pc, #188]	@ (8003ba0 <HAL_GPIO_Init+0x2bc>)
 8003ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae6:	089b      	lsrs	r3, r3, #2
 8003ae8:	3302      	adds	r3, #2
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d006      	beq.n	8003b0a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003afc:	4b2d      	ldr	r3, [pc, #180]	@ (8003bb4 <HAL_GPIO_Init+0x2d0>)
 8003afe:	689a      	ldr	r2, [r3, #8]
 8003b00:	492c      	ldr	r1, [pc, #176]	@ (8003bb4 <HAL_GPIO_Init+0x2d0>)
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	608b      	str	r3, [r1, #8]
 8003b08:	e006      	b.n	8003b18 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003b0a:	4b2a      	ldr	r3, [pc, #168]	@ (8003bb4 <HAL_GPIO_Init+0x2d0>)
 8003b0c:	689a      	ldr	r2, [r3, #8]
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	43db      	mvns	r3, r3
 8003b12:	4928      	ldr	r1, [pc, #160]	@ (8003bb4 <HAL_GPIO_Init+0x2d0>)
 8003b14:	4013      	ands	r3, r2
 8003b16:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d006      	beq.n	8003b32 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003b24:	4b23      	ldr	r3, [pc, #140]	@ (8003bb4 <HAL_GPIO_Init+0x2d0>)
 8003b26:	68da      	ldr	r2, [r3, #12]
 8003b28:	4922      	ldr	r1, [pc, #136]	@ (8003bb4 <HAL_GPIO_Init+0x2d0>)
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	60cb      	str	r3, [r1, #12]
 8003b30:	e006      	b.n	8003b40 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003b32:	4b20      	ldr	r3, [pc, #128]	@ (8003bb4 <HAL_GPIO_Init+0x2d0>)
 8003b34:	68da      	ldr	r2, [r3, #12]
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	43db      	mvns	r3, r3
 8003b3a:	491e      	ldr	r1, [pc, #120]	@ (8003bb4 <HAL_GPIO_Init+0x2d0>)
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d006      	beq.n	8003b5a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003b4c:	4b19      	ldr	r3, [pc, #100]	@ (8003bb4 <HAL_GPIO_Init+0x2d0>)
 8003b4e:	685a      	ldr	r2, [r3, #4]
 8003b50:	4918      	ldr	r1, [pc, #96]	@ (8003bb4 <HAL_GPIO_Init+0x2d0>)
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	604b      	str	r3, [r1, #4]
 8003b58:	e006      	b.n	8003b68 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003b5a:	4b16      	ldr	r3, [pc, #88]	@ (8003bb4 <HAL_GPIO_Init+0x2d0>)
 8003b5c:	685a      	ldr	r2, [r3, #4]
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	43db      	mvns	r3, r3
 8003b62:	4914      	ldr	r1, [pc, #80]	@ (8003bb4 <HAL_GPIO_Init+0x2d0>)
 8003b64:	4013      	ands	r3, r2
 8003b66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d021      	beq.n	8003bb8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003b74:	4b0f      	ldr	r3, [pc, #60]	@ (8003bb4 <HAL_GPIO_Init+0x2d0>)
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	490e      	ldr	r1, [pc, #56]	@ (8003bb4 <HAL_GPIO_Init+0x2d0>)
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	600b      	str	r3, [r1, #0]
 8003b80:	e021      	b.n	8003bc6 <HAL_GPIO_Init+0x2e2>
 8003b82:	bf00      	nop
 8003b84:	10320000 	.word	0x10320000
 8003b88:	10310000 	.word	0x10310000
 8003b8c:	10220000 	.word	0x10220000
 8003b90:	10210000 	.word	0x10210000
 8003b94:	10120000 	.word	0x10120000
 8003b98:	10110000 	.word	0x10110000
 8003b9c:	40021000 	.word	0x40021000
 8003ba0:	40010000 	.word	0x40010000
 8003ba4:	40010800 	.word	0x40010800
 8003ba8:	40010c00 	.word	0x40010c00
 8003bac:	40011000 	.word	0x40011000
 8003bb0:	40011400 	.word	0x40011400
 8003bb4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8003be8 <HAL_GPIO_Init+0x304>)
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	43db      	mvns	r3, r3
 8003bc0:	4909      	ldr	r1, [pc, #36]	@ (8003be8 <HAL_GPIO_Init+0x304>)
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc8:	3301      	adds	r3, #1
 8003bca:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd2:	fa22 f303 	lsr.w	r3, r2, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	f47f ae8e 	bne.w	80038f8 <HAL_GPIO_Init+0x14>
  }
}
 8003bdc:	bf00      	nop
 8003bde:	bf00      	nop
 8003be0:	372c      	adds	r7, #44	@ 0x2c
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bc80      	pop	{r7}
 8003be6:	4770      	bx	lr
 8003be8:	40010400 	.word	0x40010400

08003bec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	689a      	ldr	r2, [r3, #8]
 8003bfc:	887b      	ldrh	r3, [r7, #2]
 8003bfe:	4013      	ands	r3, r2
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d002      	beq.n	8003c0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003c04:	2301      	movs	r3, #1
 8003c06:	73fb      	strb	r3, [r7, #15]
 8003c08:	e001      	b.n	8003c0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3714      	adds	r7, #20
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bc80      	pop	{r7}
 8003c18:	4770      	bx	lr
	...

08003c1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e12b      	b.n	8003e86 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d106      	bne.n	8003c48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f7fe fbfc 	bl	8002440 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2224      	movs	r2, #36	@ 0x24
 8003c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f022 0201 	bic.w	r2, r2, #1
 8003c5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c80:	f001 fbfc 	bl	800547c <HAL_RCC_GetPCLK1Freq>
 8003c84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	4a81      	ldr	r2, [pc, #516]	@ (8003e90 <HAL_I2C_Init+0x274>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d807      	bhi.n	8003ca0 <HAL_I2C_Init+0x84>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	4a80      	ldr	r2, [pc, #512]	@ (8003e94 <HAL_I2C_Init+0x278>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	bf94      	ite	ls
 8003c98:	2301      	movls	r3, #1
 8003c9a:	2300      	movhi	r3, #0
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	e006      	b.n	8003cae <HAL_I2C_Init+0x92>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	4a7d      	ldr	r2, [pc, #500]	@ (8003e98 <HAL_I2C_Init+0x27c>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	bf94      	ite	ls
 8003ca8:	2301      	movls	r3, #1
 8003caa:	2300      	movhi	r3, #0
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d001      	beq.n	8003cb6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e0e7      	b.n	8003e86 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	4a78      	ldr	r2, [pc, #480]	@ (8003e9c <HAL_I2C_Init+0x280>)
 8003cba:	fba2 2303 	umull	r2, r3, r2, r3
 8003cbe:	0c9b      	lsrs	r3, r3, #18
 8003cc0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68ba      	ldr	r2, [r7, #8]
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	6a1b      	ldr	r3, [r3, #32]
 8003cdc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	4a6a      	ldr	r2, [pc, #424]	@ (8003e90 <HAL_I2C_Init+0x274>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d802      	bhi.n	8003cf0 <HAL_I2C_Init+0xd4>
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	3301      	adds	r3, #1
 8003cee:	e009      	b.n	8003d04 <HAL_I2C_Init+0xe8>
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003cf6:	fb02 f303 	mul.w	r3, r2, r3
 8003cfa:	4a69      	ldr	r2, [pc, #420]	@ (8003ea0 <HAL_I2C_Init+0x284>)
 8003cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8003d00:	099b      	lsrs	r3, r3, #6
 8003d02:	3301      	adds	r3, #1
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	6812      	ldr	r2, [r2, #0]
 8003d08:	430b      	orrs	r3, r1
 8003d0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	69db      	ldr	r3, [r3, #28]
 8003d12:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003d16:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	495c      	ldr	r1, [pc, #368]	@ (8003e90 <HAL_I2C_Init+0x274>)
 8003d20:	428b      	cmp	r3, r1
 8003d22:	d819      	bhi.n	8003d58 <HAL_I2C_Init+0x13c>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	1e59      	subs	r1, r3, #1
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	005b      	lsls	r3, r3, #1
 8003d2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d32:	1c59      	adds	r1, r3, #1
 8003d34:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003d38:	400b      	ands	r3, r1
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00a      	beq.n	8003d54 <HAL_I2C_Init+0x138>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	1e59      	subs	r1, r3, #1
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	005b      	lsls	r3, r3, #1
 8003d48:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d52:	e051      	b.n	8003df8 <HAL_I2C_Init+0x1dc>
 8003d54:	2304      	movs	r3, #4
 8003d56:	e04f      	b.n	8003df8 <HAL_I2C_Init+0x1dc>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d111      	bne.n	8003d84 <HAL_I2C_Init+0x168>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	1e58      	subs	r0, r3, #1
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6859      	ldr	r1, [r3, #4]
 8003d68:	460b      	mov	r3, r1
 8003d6a:	005b      	lsls	r3, r3, #1
 8003d6c:	440b      	add	r3, r1
 8003d6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d72:	3301      	adds	r3, #1
 8003d74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	bf0c      	ite	eq
 8003d7c:	2301      	moveq	r3, #1
 8003d7e:	2300      	movne	r3, #0
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	e012      	b.n	8003daa <HAL_I2C_Init+0x18e>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	1e58      	subs	r0, r3, #1
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6859      	ldr	r1, [r3, #4]
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	440b      	add	r3, r1
 8003d92:	0099      	lsls	r1, r3, #2
 8003d94:	440b      	add	r3, r1
 8003d96:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	bf0c      	ite	eq
 8003da4:	2301      	moveq	r3, #1
 8003da6:	2300      	movne	r3, #0
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d001      	beq.n	8003db2 <HAL_I2C_Init+0x196>
 8003dae:	2301      	movs	r3, #1
 8003db0:	e022      	b.n	8003df8 <HAL_I2C_Init+0x1dc>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d10e      	bne.n	8003dd8 <HAL_I2C_Init+0x1bc>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	1e58      	subs	r0, r3, #1
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6859      	ldr	r1, [r3, #4]
 8003dc2:	460b      	mov	r3, r1
 8003dc4:	005b      	lsls	r3, r3, #1
 8003dc6:	440b      	add	r3, r1
 8003dc8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dcc:	3301      	adds	r3, #1
 8003dce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003dd6:	e00f      	b.n	8003df8 <HAL_I2C_Init+0x1dc>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	1e58      	subs	r0, r3, #1
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6859      	ldr	r1, [r3, #4]
 8003de0:	460b      	mov	r3, r1
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	440b      	add	r3, r1
 8003de6:	0099      	lsls	r1, r3, #2
 8003de8:	440b      	add	r3, r1
 8003dea:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dee:	3301      	adds	r3, #1
 8003df0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003df4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003df8:	6879      	ldr	r1, [r7, #4]
 8003dfa:	6809      	ldr	r1, [r1, #0]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	69da      	ldr	r2, [r3, #28]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a1b      	ldr	r3, [r3, #32]
 8003e12:	431a      	orrs	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003e26:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	6911      	ldr	r1, [r2, #16]
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	68d2      	ldr	r2, [r2, #12]
 8003e32:	4311      	orrs	r1, r2
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	6812      	ldr	r2, [r2, #0]
 8003e38:	430b      	orrs	r3, r1
 8003e3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	695a      	ldr	r2, [r3, #20]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	431a      	orrs	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	430a      	orrs	r2, r1
 8003e56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f042 0201 	orr.w	r2, r2, #1
 8003e66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2220      	movs	r2, #32
 8003e72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3710      	adds	r7, #16
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	000186a0 	.word	0x000186a0
 8003e94:	001e847f 	.word	0x001e847f
 8003e98:	003d08ff 	.word	0x003d08ff
 8003e9c:	431bde83 	.word	0x431bde83
 8003ea0:	10624dd3 	.word	0x10624dd3

08003ea4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b088      	sub	sp, #32
 8003ea8:	af02      	add	r7, sp, #8
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	4608      	mov	r0, r1
 8003eae:	4611      	mov	r1, r2
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	817b      	strh	r3, [r7, #10]
 8003eb6:	460b      	mov	r3, r1
 8003eb8:	813b      	strh	r3, [r7, #8]
 8003eba:	4613      	mov	r3, r2
 8003ebc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ebe:	f7ff f933 	bl	8003128 <HAL_GetTick>
 8003ec2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	2b20      	cmp	r3, #32
 8003ece:	f040 80d9 	bne.w	8004084 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	9300      	str	r3, [sp, #0]
 8003ed6:	2319      	movs	r3, #25
 8003ed8:	2201      	movs	r2, #1
 8003eda:	496d      	ldr	r1, [pc, #436]	@ (8004090 <HAL_I2C_Mem_Write+0x1ec>)
 8003edc:	68f8      	ldr	r0, [r7, #12]
 8003ede:	f000 fccd 	bl	800487c <I2C_WaitOnFlagUntilTimeout>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d001      	beq.n	8003eec <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003ee8:	2302      	movs	r3, #2
 8003eea:	e0cc      	b.n	8004086 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d101      	bne.n	8003efa <HAL_I2C_Mem_Write+0x56>
 8003ef6:	2302      	movs	r3, #2
 8003ef8:	e0c5      	b.n	8004086 <HAL_I2C_Mem_Write+0x1e2>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2201      	movs	r2, #1
 8003efe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0301 	and.w	r3, r3, #1
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d007      	beq.n	8003f20 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f042 0201 	orr.w	r2, r2, #1
 8003f1e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f2e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2221      	movs	r2, #33	@ 0x21
 8003f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2240      	movs	r2, #64	@ 0x40
 8003f3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2200      	movs	r2, #0
 8003f44:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6a3a      	ldr	r2, [r7, #32]
 8003f4a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003f50:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f56:	b29a      	uxth	r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	4a4d      	ldr	r2, [pc, #308]	@ (8004094 <HAL_I2C_Mem_Write+0x1f0>)
 8003f60:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f62:	88f8      	ldrh	r0, [r7, #6]
 8003f64:	893a      	ldrh	r2, [r7, #8]
 8003f66:	8979      	ldrh	r1, [r7, #10]
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	9301      	str	r3, [sp, #4]
 8003f6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f6e:	9300      	str	r3, [sp, #0]
 8003f70:	4603      	mov	r3, r0
 8003f72:	68f8      	ldr	r0, [r7, #12]
 8003f74:	f000 fb04 	bl	8004580 <I2C_RequestMemoryWrite>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d052      	beq.n	8004024 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e081      	b.n	8004086 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f82:	697a      	ldr	r2, [r7, #20]
 8003f84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f86:	68f8      	ldr	r0, [r7, #12]
 8003f88:	f000 fd92 	bl	8004ab0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00d      	beq.n	8003fae <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f96:	2b04      	cmp	r3, #4
 8003f98:	d107      	bne.n	8003faa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fa8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e06b      	b.n	8004086 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb2:	781a      	ldrb	r2, [r3, #0]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fbe:	1c5a      	adds	r2, r3, #1
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fc8:	3b01      	subs	r3, #1
 8003fca:	b29a      	uxth	r2, r3
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	3b01      	subs	r3, #1
 8003fd8:	b29a      	uxth	r2, r3
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	695b      	ldr	r3, [r3, #20]
 8003fe4:	f003 0304 	and.w	r3, r3, #4
 8003fe8:	2b04      	cmp	r3, #4
 8003fea:	d11b      	bne.n	8004024 <HAL_I2C_Mem_Write+0x180>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d017      	beq.n	8004024 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff8:	781a      	ldrb	r2, [r3, #0]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004004:	1c5a      	adds	r2, r3, #1
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800400e:	3b01      	subs	r3, #1
 8004010:	b29a      	uxth	r2, r3
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800401a:	b29b      	uxth	r3, r3
 800401c:	3b01      	subs	r3, #1
 800401e:	b29a      	uxth	r2, r3
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004028:	2b00      	cmp	r3, #0
 800402a:	d1aa      	bne.n	8003f82 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800402c:	697a      	ldr	r2, [r7, #20]
 800402e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004030:	68f8      	ldr	r0, [r7, #12]
 8004032:	f000 fd85 	bl	8004b40 <I2C_WaitOnBTFFlagUntilTimeout>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d00d      	beq.n	8004058 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004040:	2b04      	cmp	r3, #4
 8004042:	d107      	bne.n	8004054 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004052:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e016      	b.n	8004086 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004066:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2220      	movs	r2, #32
 800406c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2200      	movs	r2, #0
 8004074:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2200      	movs	r2, #0
 800407c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004080:	2300      	movs	r3, #0
 8004082:	e000      	b.n	8004086 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004084:	2302      	movs	r3, #2
  }
}
 8004086:	4618      	mov	r0, r3
 8004088:	3718      	adds	r7, #24
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	00100002 	.word	0x00100002
 8004094:	ffff0000 	.word	0xffff0000

08004098 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b08c      	sub	sp, #48	@ 0x30
 800409c:	af02      	add	r7, sp, #8
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	4608      	mov	r0, r1
 80040a2:	4611      	mov	r1, r2
 80040a4:	461a      	mov	r2, r3
 80040a6:	4603      	mov	r3, r0
 80040a8:	817b      	strh	r3, [r7, #10]
 80040aa:	460b      	mov	r3, r1
 80040ac:	813b      	strh	r3, [r7, #8]
 80040ae:	4613      	mov	r3, r2
 80040b0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80040b2:	2300      	movs	r3, #0
 80040b4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80040b6:	f7ff f837 	bl	8003128 <HAL_GetTick>
 80040ba:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	2b20      	cmp	r3, #32
 80040c6:	f040 8250 	bne.w	800456a <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040cc:	9300      	str	r3, [sp, #0]
 80040ce:	2319      	movs	r3, #25
 80040d0:	2201      	movs	r2, #1
 80040d2:	4982      	ldr	r1, [pc, #520]	@ (80042dc <HAL_I2C_Mem_Read+0x244>)
 80040d4:	68f8      	ldr	r0, [r7, #12]
 80040d6:	f000 fbd1 	bl	800487c <I2C_WaitOnFlagUntilTimeout>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d001      	beq.n	80040e4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80040e0:	2302      	movs	r3, #2
 80040e2:	e243      	b.n	800456c <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d101      	bne.n	80040f2 <HAL_I2C_Mem_Read+0x5a>
 80040ee:	2302      	movs	r3, #2
 80040f0:	e23c      	b.n	800456c <HAL_I2C_Mem_Read+0x4d4>
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2201      	movs	r2, #1
 80040f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0301 	and.w	r3, r3, #1
 8004104:	2b01      	cmp	r3, #1
 8004106:	d007      	beq.n	8004118 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f042 0201 	orr.w	r2, r2, #1
 8004116:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004126:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2222      	movs	r2, #34	@ 0x22
 800412c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2240      	movs	r2, #64	@ 0x40
 8004134:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2200      	movs	r2, #0
 800413c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004142:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004148:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800414e:	b29a      	uxth	r2, r3
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	4a62      	ldr	r2, [pc, #392]	@ (80042e0 <HAL_I2C_Mem_Read+0x248>)
 8004158:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800415a:	88f8      	ldrh	r0, [r7, #6]
 800415c:	893a      	ldrh	r2, [r7, #8]
 800415e:	8979      	ldrh	r1, [r7, #10]
 8004160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004162:	9301      	str	r3, [sp, #4]
 8004164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004166:	9300      	str	r3, [sp, #0]
 8004168:	4603      	mov	r3, r0
 800416a:	68f8      	ldr	r0, [r7, #12]
 800416c:	f000 fa9e 	bl	80046ac <I2C_RequestMemoryRead>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d001      	beq.n	800417a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e1f8      	b.n	800456c <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800417e:	2b00      	cmp	r3, #0
 8004180:	d113      	bne.n	80041aa <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004182:	2300      	movs	r3, #0
 8004184:	61fb      	str	r3, [r7, #28]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	695b      	ldr	r3, [r3, #20]
 800418c:	61fb      	str	r3, [r7, #28]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	699b      	ldr	r3, [r3, #24]
 8004194:	61fb      	str	r3, [r7, #28]
 8004196:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041a6:	601a      	str	r2, [r3, #0]
 80041a8:	e1cc      	b.n	8004544 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d11e      	bne.n	80041f0 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041c0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80041c2:	b672      	cpsid	i
}
 80041c4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041c6:	2300      	movs	r3, #0
 80041c8:	61bb      	str	r3, [r7, #24]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	695b      	ldr	r3, [r3, #20]
 80041d0:	61bb      	str	r3, [r7, #24]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	699b      	ldr	r3, [r3, #24]
 80041d8:	61bb      	str	r3, [r7, #24]
 80041da:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041ea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80041ec:	b662      	cpsie	i
}
 80041ee:	e035      	b.n	800425c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d11e      	bne.n	8004236 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004206:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004208:	b672      	cpsid	i
}
 800420a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800420c:	2300      	movs	r3, #0
 800420e:	617b      	str	r3, [r7, #20]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	617b      	str	r3, [r7, #20]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	617b      	str	r3, [r7, #20]
 8004220:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004230:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004232:	b662      	cpsie	i
}
 8004234:	e012      	b.n	800425c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004244:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004246:	2300      	movs	r3, #0
 8004248:	613b      	str	r3, [r7, #16]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	695b      	ldr	r3, [r3, #20]
 8004250:	613b      	str	r3, [r7, #16]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	699b      	ldr	r3, [r3, #24]
 8004258:	613b      	str	r3, [r7, #16]
 800425a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800425c:	e172      	b.n	8004544 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004262:	2b03      	cmp	r3, #3
 8004264:	f200 811f 	bhi.w	80044a6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800426c:	2b01      	cmp	r3, #1
 800426e:	d123      	bne.n	80042b8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004270:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004272:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004274:	68f8      	ldr	r0, [r7, #12]
 8004276:	f000 fcab 	bl	8004bd0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d001      	beq.n	8004284 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e173      	b.n	800456c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	691a      	ldr	r2, [r3, #16]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800428e:	b2d2      	uxtb	r2, r2
 8004290:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004296:	1c5a      	adds	r2, r3, #1
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042a0:	3b01      	subs	r3, #1
 80042a2:	b29a      	uxth	r2, r3
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	3b01      	subs	r3, #1
 80042b0:	b29a      	uxth	r2, r3
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80042b6:	e145      	b.n	8004544 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d152      	bne.n	8004366 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c2:	9300      	str	r3, [sp, #0]
 80042c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042c6:	2200      	movs	r2, #0
 80042c8:	4906      	ldr	r1, [pc, #24]	@ (80042e4 <HAL_I2C_Mem_Read+0x24c>)
 80042ca:	68f8      	ldr	r0, [r7, #12]
 80042cc:	f000 fad6 	bl	800487c <I2C_WaitOnFlagUntilTimeout>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d008      	beq.n	80042e8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e148      	b.n	800456c <HAL_I2C_Mem_Read+0x4d4>
 80042da:	bf00      	nop
 80042dc:	00100002 	.word	0x00100002
 80042e0:	ffff0000 	.word	0xffff0000
 80042e4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80042e8:	b672      	cpsid	i
}
 80042ea:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	691a      	ldr	r2, [r3, #16]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004306:	b2d2      	uxtb	r2, r2
 8004308:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800430e:	1c5a      	adds	r2, r3, #1
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004318:	3b01      	subs	r3, #1
 800431a:	b29a      	uxth	r2, r3
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004324:	b29b      	uxth	r3, r3
 8004326:	3b01      	subs	r3, #1
 8004328:	b29a      	uxth	r2, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800432e:	b662      	cpsie	i
}
 8004330:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	691a      	ldr	r2, [r3, #16]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800433c:	b2d2      	uxtb	r2, r2
 800433e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004344:	1c5a      	adds	r2, r3, #1
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800434e:	3b01      	subs	r3, #1
 8004350:	b29a      	uxth	r2, r3
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800435a:	b29b      	uxth	r3, r3
 800435c:	3b01      	subs	r3, #1
 800435e:	b29a      	uxth	r2, r3
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004364:	e0ee      	b.n	8004544 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004368:	9300      	str	r3, [sp, #0]
 800436a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800436c:	2200      	movs	r2, #0
 800436e:	4981      	ldr	r1, [pc, #516]	@ (8004574 <HAL_I2C_Mem_Read+0x4dc>)
 8004370:	68f8      	ldr	r0, [r7, #12]
 8004372:	f000 fa83 	bl	800487c <I2C_WaitOnFlagUntilTimeout>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d001      	beq.n	8004380 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e0f5      	b.n	800456c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800438e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004390:	b672      	cpsid	i
}
 8004392:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	691a      	ldr	r2, [r3, #16]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800439e:	b2d2      	uxtb	r2, r2
 80043a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a6:	1c5a      	adds	r2, r3, #1
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043b0:	3b01      	subs	r3, #1
 80043b2:	b29a      	uxth	r2, r3
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043bc:	b29b      	uxth	r3, r3
 80043be:	3b01      	subs	r3, #1
 80043c0:	b29a      	uxth	r2, r3
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80043c6:	4b6c      	ldr	r3, [pc, #432]	@ (8004578 <HAL_I2C_Mem_Read+0x4e0>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	08db      	lsrs	r3, r3, #3
 80043cc:	4a6b      	ldr	r2, [pc, #428]	@ (800457c <HAL_I2C_Mem_Read+0x4e4>)
 80043ce:	fba2 2303 	umull	r2, r3, r2, r3
 80043d2:	0a1a      	lsrs	r2, r3, #8
 80043d4:	4613      	mov	r3, r2
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	4413      	add	r3, r2
 80043da:	00da      	lsls	r2, r3, #3
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80043e0:	6a3b      	ldr	r3, [r7, #32]
 80043e2:	3b01      	subs	r3, #1
 80043e4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80043e6:	6a3b      	ldr	r3, [r7, #32]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d118      	bne.n	800441e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2200      	movs	r2, #0
 80043f0:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2220      	movs	r2, #32
 80043f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2200      	movs	r2, #0
 80043fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004406:	f043 0220 	orr.w	r2, r3, #32
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800440e:	b662      	cpsie	i
}
 8004410:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e0a6      	b.n	800456c <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	695b      	ldr	r3, [r3, #20]
 8004424:	f003 0304 	and.w	r3, r3, #4
 8004428:	2b04      	cmp	r3, #4
 800442a:	d1d9      	bne.n	80043e0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800443a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	691a      	ldr	r2, [r3, #16]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004446:	b2d2      	uxtb	r2, r2
 8004448:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800444e:	1c5a      	adds	r2, r3, #1
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004458:	3b01      	subs	r3, #1
 800445a:	b29a      	uxth	r2, r3
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004464:	b29b      	uxth	r3, r3
 8004466:	3b01      	subs	r3, #1
 8004468:	b29a      	uxth	r2, r3
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800446e:	b662      	cpsie	i
}
 8004470:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	691a      	ldr	r2, [r3, #16]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800447c:	b2d2      	uxtb	r2, r2
 800447e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004484:	1c5a      	adds	r2, r3, #1
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800448e:	3b01      	subs	r3, #1
 8004490:	b29a      	uxth	r2, r3
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800449a:	b29b      	uxth	r3, r3
 800449c:	3b01      	subs	r3, #1
 800449e:	b29a      	uxth	r2, r3
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80044a4:	e04e      	b.n	8004544 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044a8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80044aa:	68f8      	ldr	r0, [r7, #12]
 80044ac:	f000 fb90 	bl	8004bd0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d001      	beq.n	80044ba <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e058      	b.n	800456c <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	691a      	ldr	r2, [r3, #16]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c4:	b2d2      	uxtb	r2, r2
 80044c6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044cc:	1c5a      	adds	r2, r3, #1
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044d6:	3b01      	subs	r3, #1
 80044d8:	b29a      	uxth	r2, r3
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	3b01      	subs	r3, #1
 80044e6:	b29a      	uxth	r2, r3
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	695b      	ldr	r3, [r3, #20]
 80044f2:	f003 0304 	and.w	r3, r3, #4
 80044f6:	2b04      	cmp	r3, #4
 80044f8:	d124      	bne.n	8004544 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044fe:	2b03      	cmp	r3, #3
 8004500:	d107      	bne.n	8004512 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004510:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	691a      	ldr	r2, [r3, #16]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800451c:	b2d2      	uxtb	r2, r2
 800451e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004524:	1c5a      	adds	r2, r3, #1
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800452e:	3b01      	subs	r3, #1
 8004530:	b29a      	uxth	r2, r3
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800453a:	b29b      	uxth	r3, r3
 800453c:	3b01      	subs	r3, #1
 800453e:	b29a      	uxth	r2, r3
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004548:	2b00      	cmp	r3, #0
 800454a:	f47f ae88 	bne.w	800425e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2220      	movs	r2, #32
 8004552:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004566:	2300      	movs	r3, #0
 8004568:	e000      	b.n	800456c <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 800456a:	2302      	movs	r3, #2
  }
}
 800456c:	4618      	mov	r0, r3
 800456e:	3728      	adds	r7, #40	@ 0x28
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	00010004 	.word	0x00010004
 8004578:	2000000c 	.word	0x2000000c
 800457c:	14f8b589 	.word	0x14f8b589

08004580 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b088      	sub	sp, #32
 8004584:	af02      	add	r7, sp, #8
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	4608      	mov	r0, r1
 800458a:	4611      	mov	r1, r2
 800458c:	461a      	mov	r2, r3
 800458e:	4603      	mov	r3, r0
 8004590:	817b      	strh	r3, [r7, #10]
 8004592:	460b      	mov	r3, r1
 8004594:	813b      	strh	r3, [r7, #8]
 8004596:	4613      	mov	r3, r2
 8004598:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ac:	9300      	str	r3, [sp, #0]
 80045ae:	6a3b      	ldr	r3, [r7, #32]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80045b6:	68f8      	ldr	r0, [r7, #12]
 80045b8:	f000 f960 	bl	800487c <I2C_WaitOnFlagUntilTimeout>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00d      	beq.n	80045de <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045d0:	d103      	bne.n	80045da <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80045d8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e05f      	b.n	800469e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80045de:	897b      	ldrh	r3, [r7, #10]
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	461a      	mov	r2, r3
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80045ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f0:	6a3a      	ldr	r2, [r7, #32]
 80045f2:	492d      	ldr	r1, [pc, #180]	@ (80046a8 <I2C_RequestMemoryWrite+0x128>)
 80045f4:	68f8      	ldr	r0, [r7, #12]
 80045f6:	f000 f9bb 	bl	8004970 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d001      	beq.n	8004604 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e04c      	b.n	800469e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004604:	2300      	movs	r3, #0
 8004606:	617b      	str	r3, [r7, #20]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	617b      	str	r3, [r7, #20]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	699b      	ldr	r3, [r3, #24]
 8004616:	617b      	str	r3, [r7, #20]
 8004618:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800461a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800461c:	6a39      	ldr	r1, [r7, #32]
 800461e:	68f8      	ldr	r0, [r7, #12]
 8004620:	f000 fa46 	bl	8004ab0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00d      	beq.n	8004646 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800462e:	2b04      	cmp	r3, #4
 8004630:	d107      	bne.n	8004642 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004640:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e02b      	b.n	800469e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004646:	88fb      	ldrh	r3, [r7, #6]
 8004648:	2b01      	cmp	r3, #1
 800464a:	d105      	bne.n	8004658 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800464c:	893b      	ldrh	r3, [r7, #8]
 800464e:	b2da      	uxtb	r2, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	611a      	str	r2, [r3, #16]
 8004656:	e021      	b.n	800469c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004658:	893b      	ldrh	r3, [r7, #8]
 800465a:	0a1b      	lsrs	r3, r3, #8
 800465c:	b29b      	uxth	r3, r3
 800465e:	b2da      	uxtb	r2, r3
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004666:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004668:	6a39      	ldr	r1, [r7, #32]
 800466a:	68f8      	ldr	r0, [r7, #12]
 800466c:	f000 fa20 	bl	8004ab0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00d      	beq.n	8004692 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800467a:	2b04      	cmp	r3, #4
 800467c:	d107      	bne.n	800468e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800468c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e005      	b.n	800469e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004692:	893b      	ldrh	r3, [r7, #8]
 8004694:	b2da      	uxtb	r2, r3
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3718      	adds	r7, #24
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	00010002 	.word	0x00010002

080046ac <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b088      	sub	sp, #32
 80046b0:	af02      	add	r7, sp, #8
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	4608      	mov	r0, r1
 80046b6:	4611      	mov	r1, r2
 80046b8:	461a      	mov	r2, r3
 80046ba:	4603      	mov	r3, r0
 80046bc:	817b      	strh	r3, [r7, #10]
 80046be:	460b      	mov	r3, r1
 80046c0:	813b      	strh	r3, [r7, #8]
 80046c2:	4613      	mov	r3, r2
 80046c4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80046d4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046e8:	9300      	str	r3, [sp, #0]
 80046ea:	6a3b      	ldr	r3, [r7, #32]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80046f2:	68f8      	ldr	r0, [r7, #12]
 80046f4:	f000 f8c2 	bl	800487c <I2C_WaitOnFlagUntilTimeout>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00d      	beq.n	800471a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004708:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800470c:	d103      	bne.n	8004716 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004714:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e0aa      	b.n	8004870 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800471a:	897b      	ldrh	r3, [r7, #10]
 800471c:	b2db      	uxtb	r3, r3
 800471e:	461a      	mov	r2, r3
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004728:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800472a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800472c:	6a3a      	ldr	r2, [r7, #32]
 800472e:	4952      	ldr	r1, [pc, #328]	@ (8004878 <I2C_RequestMemoryRead+0x1cc>)
 8004730:	68f8      	ldr	r0, [r7, #12]
 8004732:	f000 f91d 	bl	8004970 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004736:	4603      	mov	r3, r0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d001      	beq.n	8004740 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e097      	b.n	8004870 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004740:	2300      	movs	r3, #0
 8004742:	617b      	str	r3, [r7, #20]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	695b      	ldr	r3, [r3, #20]
 800474a:	617b      	str	r3, [r7, #20]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	617b      	str	r3, [r7, #20]
 8004754:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004756:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004758:	6a39      	ldr	r1, [r7, #32]
 800475a:	68f8      	ldr	r0, [r7, #12]
 800475c:	f000 f9a8 	bl	8004ab0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00d      	beq.n	8004782 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800476a:	2b04      	cmp	r3, #4
 800476c:	d107      	bne.n	800477e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800477c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e076      	b.n	8004870 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004782:	88fb      	ldrh	r3, [r7, #6]
 8004784:	2b01      	cmp	r3, #1
 8004786:	d105      	bne.n	8004794 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004788:	893b      	ldrh	r3, [r7, #8]
 800478a:	b2da      	uxtb	r2, r3
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	611a      	str	r2, [r3, #16]
 8004792:	e021      	b.n	80047d8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004794:	893b      	ldrh	r3, [r7, #8]
 8004796:	0a1b      	lsrs	r3, r3, #8
 8004798:	b29b      	uxth	r3, r3
 800479a:	b2da      	uxtb	r2, r3
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047a4:	6a39      	ldr	r1, [r7, #32]
 80047a6:	68f8      	ldr	r0, [r7, #12]
 80047a8:	f000 f982 	bl	8004ab0 <I2C_WaitOnTXEFlagUntilTimeout>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d00d      	beq.n	80047ce <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047b6:	2b04      	cmp	r3, #4
 80047b8:	d107      	bne.n	80047ca <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e050      	b.n	8004870 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80047ce:	893b      	ldrh	r3, [r7, #8]
 80047d0:	b2da      	uxtb	r2, r3
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047da:	6a39      	ldr	r1, [r7, #32]
 80047dc:	68f8      	ldr	r0, [r7, #12]
 80047de:	f000 f967 	bl	8004ab0 <I2C_WaitOnTXEFlagUntilTimeout>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d00d      	beq.n	8004804 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ec:	2b04      	cmp	r3, #4
 80047ee:	d107      	bne.n	8004800 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047fe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e035      	b.n	8004870 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004812:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004816:	9300      	str	r3, [sp, #0]
 8004818:	6a3b      	ldr	r3, [r7, #32]
 800481a:	2200      	movs	r2, #0
 800481c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004820:	68f8      	ldr	r0, [r7, #12]
 8004822:	f000 f82b 	bl	800487c <I2C_WaitOnFlagUntilTimeout>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d00d      	beq.n	8004848 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004836:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800483a:	d103      	bne.n	8004844 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004842:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	e013      	b.n	8004870 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004848:	897b      	ldrh	r3, [r7, #10]
 800484a:	b2db      	uxtb	r3, r3
 800484c:	f043 0301 	orr.w	r3, r3, #1
 8004850:	b2da      	uxtb	r2, r3
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800485a:	6a3a      	ldr	r2, [r7, #32]
 800485c:	4906      	ldr	r1, [pc, #24]	@ (8004878 <I2C_RequestMemoryRead+0x1cc>)
 800485e:	68f8      	ldr	r0, [r7, #12]
 8004860:	f000 f886 	bl	8004970 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d001      	beq.n	800486e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e000      	b.n	8004870 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	3718      	adds	r7, #24
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}
 8004878:	00010002 	.word	0x00010002

0800487c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	603b      	str	r3, [r7, #0]
 8004888:	4613      	mov	r3, r2
 800488a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800488c:	e048      	b.n	8004920 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004894:	d044      	beq.n	8004920 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004896:	f7fe fc47 	bl	8003128 <HAL_GetTick>
 800489a:	4602      	mov	r2, r0
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	683a      	ldr	r2, [r7, #0]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d302      	bcc.n	80048ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d139      	bne.n	8004920 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	0c1b      	lsrs	r3, r3, #16
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d10d      	bne.n	80048d2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	695b      	ldr	r3, [r3, #20]
 80048bc:	43da      	mvns	r2, r3
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	4013      	ands	r3, r2
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	bf0c      	ite	eq
 80048c8:	2301      	moveq	r3, #1
 80048ca:	2300      	movne	r3, #0
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	461a      	mov	r2, r3
 80048d0:	e00c      	b.n	80048ec <I2C_WaitOnFlagUntilTimeout+0x70>
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	699b      	ldr	r3, [r3, #24]
 80048d8:	43da      	mvns	r2, r3
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	4013      	ands	r3, r2
 80048de:	b29b      	uxth	r3, r3
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	bf0c      	ite	eq
 80048e4:	2301      	moveq	r3, #1
 80048e6:	2300      	movne	r3, #0
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	461a      	mov	r2, r3
 80048ec:	79fb      	ldrb	r3, [r7, #7]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d116      	bne.n	8004920 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2200      	movs	r2, #0
 80048f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2220      	movs	r2, #32
 80048fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2200      	movs	r2, #0
 8004904:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800490c:	f043 0220 	orr.w	r2, r3, #32
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e023      	b.n	8004968 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	0c1b      	lsrs	r3, r3, #16
 8004924:	b2db      	uxtb	r3, r3
 8004926:	2b01      	cmp	r3, #1
 8004928:	d10d      	bne.n	8004946 <I2C_WaitOnFlagUntilTimeout+0xca>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	695b      	ldr	r3, [r3, #20]
 8004930:	43da      	mvns	r2, r3
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	4013      	ands	r3, r2
 8004936:	b29b      	uxth	r3, r3
 8004938:	2b00      	cmp	r3, #0
 800493a:	bf0c      	ite	eq
 800493c:	2301      	moveq	r3, #1
 800493e:	2300      	movne	r3, #0
 8004940:	b2db      	uxtb	r3, r3
 8004942:	461a      	mov	r2, r3
 8004944:	e00c      	b.n	8004960 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	699b      	ldr	r3, [r3, #24]
 800494c:	43da      	mvns	r2, r3
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	4013      	ands	r3, r2
 8004952:	b29b      	uxth	r3, r3
 8004954:	2b00      	cmp	r3, #0
 8004956:	bf0c      	ite	eq
 8004958:	2301      	moveq	r3, #1
 800495a:	2300      	movne	r3, #0
 800495c:	b2db      	uxtb	r3, r3
 800495e:	461a      	mov	r2, r3
 8004960:	79fb      	ldrb	r3, [r7, #7]
 8004962:	429a      	cmp	r2, r3
 8004964:	d093      	beq.n	800488e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004966:	2300      	movs	r3, #0
}
 8004968:	4618      	mov	r0, r3
 800496a:	3710      	adds	r7, #16
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	607a      	str	r2, [r7, #4]
 800497c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800497e:	e071      	b.n	8004a64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800498a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800498e:	d123      	bne.n	80049d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800499e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80049a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2200      	movs	r2, #0
 80049ae:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2220      	movs	r2, #32
 80049b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049c4:	f043 0204 	orr.w	r2, r3, #4
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e067      	b.n	8004aa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049de:	d041      	beq.n	8004a64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049e0:	f7fe fba2 	bl	8003128 <HAL_GetTick>
 80049e4:	4602      	mov	r2, r0
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d302      	bcc.n	80049f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d136      	bne.n	8004a64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	0c1b      	lsrs	r3, r3, #16
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d10c      	bne.n	8004a1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	695b      	ldr	r3, [r3, #20]
 8004a06:	43da      	mvns	r2, r3
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	bf14      	ite	ne
 8004a12:	2301      	movne	r3, #1
 8004a14:	2300      	moveq	r3, #0
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	e00b      	b.n	8004a32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	699b      	ldr	r3, [r3, #24]
 8004a20:	43da      	mvns	r2, r3
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	4013      	ands	r3, r2
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	bf14      	ite	ne
 8004a2c:	2301      	movne	r3, #1
 8004a2e:	2300      	moveq	r3, #0
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d016      	beq.n	8004a64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2220      	movs	r2, #32
 8004a40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a50:	f043 0220 	orr.w	r2, r3, #32
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e021      	b.n	8004aa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	0c1b      	lsrs	r3, r3, #16
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d10c      	bne.n	8004a88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	695b      	ldr	r3, [r3, #20]
 8004a74:	43da      	mvns	r2, r3
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	4013      	ands	r3, r2
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	bf14      	ite	ne
 8004a80:	2301      	movne	r3, #1
 8004a82:	2300      	moveq	r3, #0
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	e00b      	b.n	8004aa0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	43da      	mvns	r2, r3
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	4013      	ands	r3, r2
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	bf14      	ite	ne
 8004a9a:	2301      	movne	r3, #1
 8004a9c:	2300      	moveq	r3, #0
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	f47f af6d 	bne.w	8004980 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004aa6:	2300      	movs	r3, #0
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3710      	adds	r7, #16
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004abc:	e034      	b.n	8004b28 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004abe:	68f8      	ldr	r0, [r7, #12]
 8004ac0:	f000 f8e3 	bl	8004c8a <I2C_IsAcknowledgeFailed>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d001      	beq.n	8004ace <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e034      	b.n	8004b38 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ad4:	d028      	beq.n	8004b28 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ad6:	f7fe fb27 	bl	8003128 <HAL_GetTick>
 8004ada:	4602      	mov	r2, r0
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	68ba      	ldr	r2, [r7, #8]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d302      	bcc.n	8004aec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d11d      	bne.n	8004b28 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	695b      	ldr	r3, [r3, #20]
 8004af2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004af6:	2b80      	cmp	r3, #128	@ 0x80
 8004af8:	d016      	beq.n	8004b28 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2220      	movs	r2, #32
 8004b04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b14:	f043 0220 	orr.w	r2, r3, #32
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e007      	b.n	8004b38 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	695b      	ldr	r3, [r3, #20]
 8004b2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b32:	2b80      	cmp	r3, #128	@ 0x80
 8004b34:	d1c3      	bne.n	8004abe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3710      	adds	r7, #16
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b4c:	e034      	b.n	8004bb8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b4e:	68f8      	ldr	r0, [r7, #12]
 8004b50:	f000 f89b 	bl	8004c8a <I2C_IsAcknowledgeFailed>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d001      	beq.n	8004b5e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e034      	b.n	8004bc8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b64:	d028      	beq.n	8004bb8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b66:	f7fe fadf 	bl	8003128 <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	68ba      	ldr	r2, [r7, #8]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d302      	bcc.n	8004b7c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d11d      	bne.n	8004bb8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	695b      	ldr	r3, [r3, #20]
 8004b82:	f003 0304 	and.w	r3, r3, #4
 8004b86:	2b04      	cmp	r3, #4
 8004b88:	d016      	beq.n	8004bb8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2220      	movs	r2, #32
 8004b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba4:	f043 0220 	orr.w	r2, r3, #32
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e007      	b.n	8004bc8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	f003 0304 	and.w	r3, r3, #4
 8004bc2:	2b04      	cmp	r3, #4
 8004bc4:	d1c3      	bne.n	8004b4e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3710      	adds	r7, #16
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004bdc:	e049      	b.n	8004c72 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	695b      	ldr	r3, [r3, #20]
 8004be4:	f003 0310 	and.w	r3, r3, #16
 8004be8:	2b10      	cmp	r3, #16
 8004bea:	d119      	bne.n	8004c20 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f06f 0210 	mvn.w	r2, #16
 8004bf4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2220      	movs	r2, #32
 8004c00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e030      	b.n	8004c82 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c20:	f7fe fa82 	bl	8003128 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	68ba      	ldr	r2, [r7, #8]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d302      	bcc.n	8004c36 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d11d      	bne.n	8004c72 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	695b      	ldr	r3, [r3, #20]
 8004c3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c40:	2b40      	cmp	r3, #64	@ 0x40
 8004c42:	d016      	beq.n	8004c72 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2200      	movs	r2, #0
 8004c48:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2220      	movs	r2, #32
 8004c4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c5e:	f043 0220 	orr.w	r2, r3, #32
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e007      	b.n	8004c82 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	695b      	ldr	r3, [r3, #20]
 8004c78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c7c:	2b40      	cmp	r3, #64	@ 0x40
 8004c7e:	d1ae      	bne.n	8004bde <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3710      	adds	r7, #16
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}

08004c8a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004c8a:	b480      	push	{r7}
 8004c8c:	b083      	sub	sp, #12
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	695b      	ldr	r3, [r3, #20]
 8004c98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ca0:	d11b      	bne.n	8004cda <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004caa:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2220      	movs	r2, #32
 8004cb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cc6:	f043 0204 	orr.w	r2, r3, #4
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e000      	b.n	8004cdc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004cda:	2300      	movs	r3, #0
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bc80      	pop	{r7}
 8004ce4:	4770      	bx	lr
	...

08004ce8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b086      	sub	sp, #24
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d101      	bne.n	8004cfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e272      	b.n	80051e0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0301 	and.w	r3, r3, #1
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	f000 8087 	beq.w	8004e16 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d08:	4b92      	ldr	r3, [pc, #584]	@ (8004f54 <HAL_RCC_OscConfig+0x26c>)
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	f003 030c 	and.w	r3, r3, #12
 8004d10:	2b04      	cmp	r3, #4
 8004d12:	d00c      	beq.n	8004d2e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004d14:	4b8f      	ldr	r3, [pc, #572]	@ (8004f54 <HAL_RCC_OscConfig+0x26c>)
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	f003 030c 	and.w	r3, r3, #12
 8004d1c:	2b08      	cmp	r3, #8
 8004d1e:	d112      	bne.n	8004d46 <HAL_RCC_OscConfig+0x5e>
 8004d20:	4b8c      	ldr	r3, [pc, #560]	@ (8004f54 <HAL_RCC_OscConfig+0x26c>)
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d2c:	d10b      	bne.n	8004d46 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d2e:	4b89      	ldr	r3, [pc, #548]	@ (8004f54 <HAL_RCC_OscConfig+0x26c>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d06c      	beq.n	8004e14 <HAL_RCC_OscConfig+0x12c>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d168      	bne.n	8004e14 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e24c      	b.n	80051e0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d4e:	d106      	bne.n	8004d5e <HAL_RCC_OscConfig+0x76>
 8004d50:	4b80      	ldr	r3, [pc, #512]	@ (8004f54 <HAL_RCC_OscConfig+0x26c>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a7f      	ldr	r2, [pc, #508]	@ (8004f54 <HAL_RCC_OscConfig+0x26c>)
 8004d56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d5a:	6013      	str	r3, [r2, #0]
 8004d5c:	e02e      	b.n	8004dbc <HAL_RCC_OscConfig+0xd4>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d10c      	bne.n	8004d80 <HAL_RCC_OscConfig+0x98>
 8004d66:	4b7b      	ldr	r3, [pc, #492]	@ (8004f54 <HAL_RCC_OscConfig+0x26c>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a7a      	ldr	r2, [pc, #488]	@ (8004f54 <HAL_RCC_OscConfig+0x26c>)
 8004d6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d70:	6013      	str	r3, [r2, #0]
 8004d72:	4b78      	ldr	r3, [pc, #480]	@ (8004f54 <HAL_RCC_OscConfig+0x26c>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a77      	ldr	r2, [pc, #476]	@ (8004f54 <HAL_RCC_OscConfig+0x26c>)
 8004d78:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d7c:	6013      	str	r3, [r2, #0]
 8004d7e:	e01d      	b.n	8004dbc <HAL_RCC_OscConfig+0xd4>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d88:	d10c      	bne.n	8004da4 <HAL_RCC_OscConfig+0xbc>
 8004d8a:	4b72      	ldr	r3, [pc, #456]	@ (8004f54 <HAL_RCC_OscConfig+0x26c>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a71      	ldr	r2, [pc, #452]	@ (8004f54 <HAL_RCC_OscConfig+0x26c>)
 8004d90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d94:	6013      	str	r3, [r2, #0]
 8004d96:	4b6f      	ldr	r3, [pc, #444]	@ (8004f54 <HAL_RCC_OscConfig+0x26c>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a6e      	ldr	r2, [pc, #440]	@ (8004f54 <HAL_RCC_OscConfig+0x26c>)
 8004d9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004da0:	6013      	str	r3, [r2, #0]
 8004da2:	e00b      	b.n	8004dbc <HAL_RCC_OscConfig+0xd4>
 8004da4:	4b6b      	ldr	r3, [pc, #428]	@ (8004f54 <HAL_RCC_OscConfig+0x26c>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a6a      	ldr	r2, [pc, #424]	@ (8004f54 <HAL_RCC_OscConfig+0x26c>)
 8004daa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004dae:	6013      	str	r3, [r2, #0]
 8004db0:	4b68      	ldr	r3, [pc, #416]	@ (8004f54 <HAL_RCC_OscConfig+0x26c>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a67      	ldr	r2, [pc, #412]	@ (8004f54 <HAL_RCC_OscConfig+0x26c>)
 8004db6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004dba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d013      	beq.n	8004dec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dc4:	f7fe f9b0 	bl	8003128 <HAL_GetTick>
 8004dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dca:	e008      	b.n	8004dde <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dcc:	f7fe f9ac 	bl	8003128 <HAL_GetTick>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	2b64      	cmp	r3, #100	@ 0x64
 8004dd8:	d901      	bls.n	8004dde <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e200      	b.n	80051e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dde:	4b5d      	ldr	r3, [pc, #372]	@ (8004f54 <HAL_RCC_OscConfig+0x26c>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d0f0      	beq.n	8004dcc <HAL_RCC_OscConfig+0xe4>
 8004dea:	e014      	b.n	8004e16 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dec:	f7fe f99c 	bl	8003128 <HAL_GetTick>
 8004df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004df2:	e008      	b.n	8004e06 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004df4:	f7fe f998 	bl	8003128 <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	2b64      	cmp	r3, #100	@ 0x64
 8004e00:	d901      	bls.n	8004e06 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e1ec      	b.n	80051e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e06:	4b53      	ldr	r3, [pc, #332]	@ (8004f54 <HAL_RCC_OscConfig+0x26c>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d1f0      	bne.n	8004df4 <HAL_RCC_OscConfig+0x10c>
 8004e12:	e000      	b.n	8004e16 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0302 	and.w	r3, r3, #2
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d063      	beq.n	8004eea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e22:	4b4c      	ldr	r3, [pc, #304]	@ (8004f54 <HAL_RCC_OscConfig+0x26c>)
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f003 030c 	and.w	r3, r3, #12
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00b      	beq.n	8004e46 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004e2e:	4b49      	ldr	r3, [pc, #292]	@ (8004f54 <HAL_RCC_OscConfig+0x26c>)
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	f003 030c 	and.w	r3, r3, #12
 8004e36:	2b08      	cmp	r3, #8
 8004e38:	d11c      	bne.n	8004e74 <HAL_RCC_OscConfig+0x18c>
 8004e3a:	4b46      	ldr	r3, [pc, #280]	@ (8004f54 <HAL_RCC_OscConfig+0x26c>)
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d116      	bne.n	8004e74 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e46:	4b43      	ldr	r3, [pc, #268]	@ (8004f54 <HAL_RCC_OscConfig+0x26c>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0302 	and.w	r3, r3, #2
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d005      	beq.n	8004e5e <HAL_RCC_OscConfig+0x176>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d001      	beq.n	8004e5e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e1c0      	b.n	80051e0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e5e:	4b3d      	ldr	r3, [pc, #244]	@ (8004f54 <HAL_RCC_OscConfig+0x26c>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	695b      	ldr	r3, [r3, #20]
 8004e6a:	00db      	lsls	r3, r3, #3
 8004e6c:	4939      	ldr	r1, [pc, #228]	@ (8004f54 <HAL_RCC_OscConfig+0x26c>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e72:	e03a      	b.n	8004eea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	691b      	ldr	r3, [r3, #16]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d020      	beq.n	8004ebe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e7c:	4b36      	ldr	r3, [pc, #216]	@ (8004f58 <HAL_RCC_OscConfig+0x270>)
 8004e7e:	2201      	movs	r2, #1
 8004e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e82:	f7fe f951 	bl	8003128 <HAL_GetTick>
 8004e86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e88:	e008      	b.n	8004e9c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e8a:	f7fe f94d 	bl	8003128 <HAL_GetTick>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d901      	bls.n	8004e9c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e1a1      	b.n	80051e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e9c:	4b2d      	ldr	r3, [pc, #180]	@ (8004f54 <HAL_RCC_OscConfig+0x26c>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0302 	and.w	r3, r3, #2
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d0f0      	beq.n	8004e8a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ea8:	4b2a      	ldr	r3, [pc, #168]	@ (8004f54 <HAL_RCC_OscConfig+0x26c>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	695b      	ldr	r3, [r3, #20]
 8004eb4:	00db      	lsls	r3, r3, #3
 8004eb6:	4927      	ldr	r1, [pc, #156]	@ (8004f54 <HAL_RCC_OscConfig+0x26c>)
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	600b      	str	r3, [r1, #0]
 8004ebc:	e015      	b.n	8004eea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ebe:	4b26      	ldr	r3, [pc, #152]	@ (8004f58 <HAL_RCC_OscConfig+0x270>)
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ec4:	f7fe f930 	bl	8003128 <HAL_GetTick>
 8004ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004eca:	e008      	b.n	8004ede <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ecc:	f7fe f92c 	bl	8003128 <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d901      	bls.n	8004ede <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e180      	b.n	80051e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ede:	4b1d      	ldr	r3, [pc, #116]	@ (8004f54 <HAL_RCC_OscConfig+0x26c>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0302 	and.w	r3, r3, #2
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d1f0      	bne.n	8004ecc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0308 	and.w	r3, r3, #8
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d03a      	beq.n	8004f6c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	699b      	ldr	r3, [r3, #24]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d019      	beq.n	8004f32 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004efe:	4b17      	ldr	r3, [pc, #92]	@ (8004f5c <HAL_RCC_OscConfig+0x274>)
 8004f00:	2201      	movs	r2, #1
 8004f02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f04:	f7fe f910 	bl	8003128 <HAL_GetTick>
 8004f08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f0a:	e008      	b.n	8004f1e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f0c:	f7fe f90c 	bl	8003128 <HAL_GetTick>
 8004f10:	4602      	mov	r2, r0
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d901      	bls.n	8004f1e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e160      	b.n	80051e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f1e:	4b0d      	ldr	r3, [pc, #52]	@ (8004f54 <HAL_RCC_OscConfig+0x26c>)
 8004f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f22:	f003 0302 	and.w	r3, r3, #2
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d0f0      	beq.n	8004f0c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004f2a:	2001      	movs	r0, #1
 8004f2c:	f000 face 	bl	80054cc <RCC_Delay>
 8004f30:	e01c      	b.n	8004f6c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f32:	4b0a      	ldr	r3, [pc, #40]	@ (8004f5c <HAL_RCC_OscConfig+0x274>)
 8004f34:	2200      	movs	r2, #0
 8004f36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f38:	f7fe f8f6 	bl	8003128 <HAL_GetTick>
 8004f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f3e:	e00f      	b.n	8004f60 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f40:	f7fe f8f2 	bl	8003128 <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d908      	bls.n	8004f60 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e146      	b.n	80051e0 <HAL_RCC_OscConfig+0x4f8>
 8004f52:	bf00      	nop
 8004f54:	40021000 	.word	0x40021000
 8004f58:	42420000 	.word	0x42420000
 8004f5c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f60:	4b92      	ldr	r3, [pc, #584]	@ (80051ac <HAL_RCC_OscConfig+0x4c4>)
 8004f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f64:	f003 0302 	and.w	r3, r3, #2
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1e9      	bne.n	8004f40 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0304 	and.w	r3, r3, #4
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	f000 80a6 	beq.w	80050c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f7e:	4b8b      	ldr	r3, [pc, #556]	@ (80051ac <HAL_RCC_OscConfig+0x4c4>)
 8004f80:	69db      	ldr	r3, [r3, #28]
 8004f82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d10d      	bne.n	8004fa6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f8a:	4b88      	ldr	r3, [pc, #544]	@ (80051ac <HAL_RCC_OscConfig+0x4c4>)
 8004f8c:	69db      	ldr	r3, [r3, #28]
 8004f8e:	4a87      	ldr	r2, [pc, #540]	@ (80051ac <HAL_RCC_OscConfig+0x4c4>)
 8004f90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f94:	61d3      	str	r3, [r2, #28]
 8004f96:	4b85      	ldr	r3, [pc, #532]	@ (80051ac <HAL_RCC_OscConfig+0x4c4>)
 8004f98:	69db      	ldr	r3, [r3, #28]
 8004f9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f9e:	60bb      	str	r3, [r7, #8]
 8004fa0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fa6:	4b82      	ldr	r3, [pc, #520]	@ (80051b0 <HAL_RCC_OscConfig+0x4c8>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d118      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fb2:	4b7f      	ldr	r3, [pc, #508]	@ (80051b0 <HAL_RCC_OscConfig+0x4c8>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a7e      	ldr	r2, [pc, #504]	@ (80051b0 <HAL_RCC_OscConfig+0x4c8>)
 8004fb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fbe:	f7fe f8b3 	bl	8003128 <HAL_GetTick>
 8004fc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fc4:	e008      	b.n	8004fd8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fc6:	f7fe f8af 	bl	8003128 <HAL_GetTick>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	2b64      	cmp	r3, #100	@ 0x64
 8004fd2:	d901      	bls.n	8004fd8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	e103      	b.n	80051e0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fd8:	4b75      	ldr	r3, [pc, #468]	@ (80051b0 <HAL_RCC_OscConfig+0x4c8>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d0f0      	beq.n	8004fc6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d106      	bne.n	8004ffa <HAL_RCC_OscConfig+0x312>
 8004fec:	4b6f      	ldr	r3, [pc, #444]	@ (80051ac <HAL_RCC_OscConfig+0x4c4>)
 8004fee:	6a1b      	ldr	r3, [r3, #32]
 8004ff0:	4a6e      	ldr	r2, [pc, #440]	@ (80051ac <HAL_RCC_OscConfig+0x4c4>)
 8004ff2:	f043 0301 	orr.w	r3, r3, #1
 8004ff6:	6213      	str	r3, [r2, #32]
 8004ff8:	e02d      	b.n	8005056 <HAL_RCC_OscConfig+0x36e>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d10c      	bne.n	800501c <HAL_RCC_OscConfig+0x334>
 8005002:	4b6a      	ldr	r3, [pc, #424]	@ (80051ac <HAL_RCC_OscConfig+0x4c4>)
 8005004:	6a1b      	ldr	r3, [r3, #32]
 8005006:	4a69      	ldr	r2, [pc, #420]	@ (80051ac <HAL_RCC_OscConfig+0x4c4>)
 8005008:	f023 0301 	bic.w	r3, r3, #1
 800500c:	6213      	str	r3, [r2, #32]
 800500e:	4b67      	ldr	r3, [pc, #412]	@ (80051ac <HAL_RCC_OscConfig+0x4c4>)
 8005010:	6a1b      	ldr	r3, [r3, #32]
 8005012:	4a66      	ldr	r2, [pc, #408]	@ (80051ac <HAL_RCC_OscConfig+0x4c4>)
 8005014:	f023 0304 	bic.w	r3, r3, #4
 8005018:	6213      	str	r3, [r2, #32]
 800501a:	e01c      	b.n	8005056 <HAL_RCC_OscConfig+0x36e>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	2b05      	cmp	r3, #5
 8005022:	d10c      	bne.n	800503e <HAL_RCC_OscConfig+0x356>
 8005024:	4b61      	ldr	r3, [pc, #388]	@ (80051ac <HAL_RCC_OscConfig+0x4c4>)
 8005026:	6a1b      	ldr	r3, [r3, #32]
 8005028:	4a60      	ldr	r2, [pc, #384]	@ (80051ac <HAL_RCC_OscConfig+0x4c4>)
 800502a:	f043 0304 	orr.w	r3, r3, #4
 800502e:	6213      	str	r3, [r2, #32]
 8005030:	4b5e      	ldr	r3, [pc, #376]	@ (80051ac <HAL_RCC_OscConfig+0x4c4>)
 8005032:	6a1b      	ldr	r3, [r3, #32]
 8005034:	4a5d      	ldr	r2, [pc, #372]	@ (80051ac <HAL_RCC_OscConfig+0x4c4>)
 8005036:	f043 0301 	orr.w	r3, r3, #1
 800503a:	6213      	str	r3, [r2, #32]
 800503c:	e00b      	b.n	8005056 <HAL_RCC_OscConfig+0x36e>
 800503e:	4b5b      	ldr	r3, [pc, #364]	@ (80051ac <HAL_RCC_OscConfig+0x4c4>)
 8005040:	6a1b      	ldr	r3, [r3, #32]
 8005042:	4a5a      	ldr	r2, [pc, #360]	@ (80051ac <HAL_RCC_OscConfig+0x4c4>)
 8005044:	f023 0301 	bic.w	r3, r3, #1
 8005048:	6213      	str	r3, [r2, #32]
 800504a:	4b58      	ldr	r3, [pc, #352]	@ (80051ac <HAL_RCC_OscConfig+0x4c4>)
 800504c:	6a1b      	ldr	r3, [r3, #32]
 800504e:	4a57      	ldr	r2, [pc, #348]	@ (80051ac <HAL_RCC_OscConfig+0x4c4>)
 8005050:	f023 0304 	bic.w	r3, r3, #4
 8005054:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d015      	beq.n	800508a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800505e:	f7fe f863 	bl	8003128 <HAL_GetTick>
 8005062:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005064:	e00a      	b.n	800507c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005066:	f7fe f85f 	bl	8003128 <HAL_GetTick>
 800506a:	4602      	mov	r2, r0
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005074:	4293      	cmp	r3, r2
 8005076:	d901      	bls.n	800507c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005078:	2303      	movs	r3, #3
 800507a:	e0b1      	b.n	80051e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800507c:	4b4b      	ldr	r3, [pc, #300]	@ (80051ac <HAL_RCC_OscConfig+0x4c4>)
 800507e:	6a1b      	ldr	r3, [r3, #32]
 8005080:	f003 0302 	and.w	r3, r3, #2
 8005084:	2b00      	cmp	r3, #0
 8005086:	d0ee      	beq.n	8005066 <HAL_RCC_OscConfig+0x37e>
 8005088:	e014      	b.n	80050b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800508a:	f7fe f84d 	bl	8003128 <HAL_GetTick>
 800508e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005090:	e00a      	b.n	80050a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005092:	f7fe f849 	bl	8003128 <HAL_GetTick>
 8005096:	4602      	mov	r2, r0
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d901      	bls.n	80050a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80050a4:	2303      	movs	r3, #3
 80050a6:	e09b      	b.n	80051e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050a8:	4b40      	ldr	r3, [pc, #256]	@ (80051ac <HAL_RCC_OscConfig+0x4c4>)
 80050aa:	6a1b      	ldr	r3, [r3, #32]
 80050ac:	f003 0302 	and.w	r3, r3, #2
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d1ee      	bne.n	8005092 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80050b4:	7dfb      	ldrb	r3, [r7, #23]
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d105      	bne.n	80050c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050ba:	4b3c      	ldr	r3, [pc, #240]	@ (80051ac <HAL_RCC_OscConfig+0x4c4>)
 80050bc:	69db      	ldr	r3, [r3, #28]
 80050be:	4a3b      	ldr	r2, [pc, #236]	@ (80051ac <HAL_RCC_OscConfig+0x4c4>)
 80050c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	69db      	ldr	r3, [r3, #28]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	f000 8087 	beq.w	80051de <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050d0:	4b36      	ldr	r3, [pc, #216]	@ (80051ac <HAL_RCC_OscConfig+0x4c4>)
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	f003 030c 	and.w	r3, r3, #12
 80050d8:	2b08      	cmp	r3, #8
 80050da:	d061      	beq.n	80051a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	69db      	ldr	r3, [r3, #28]
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d146      	bne.n	8005172 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050e4:	4b33      	ldr	r3, [pc, #204]	@ (80051b4 <HAL_RCC_OscConfig+0x4cc>)
 80050e6:	2200      	movs	r2, #0
 80050e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050ea:	f7fe f81d 	bl	8003128 <HAL_GetTick>
 80050ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050f0:	e008      	b.n	8005104 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050f2:	f7fe f819 	bl	8003128 <HAL_GetTick>
 80050f6:	4602      	mov	r2, r0
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	1ad3      	subs	r3, r2, r3
 80050fc:	2b02      	cmp	r3, #2
 80050fe:	d901      	bls.n	8005104 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005100:	2303      	movs	r3, #3
 8005102:	e06d      	b.n	80051e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005104:	4b29      	ldr	r3, [pc, #164]	@ (80051ac <HAL_RCC_OscConfig+0x4c4>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800510c:	2b00      	cmp	r3, #0
 800510e:	d1f0      	bne.n	80050f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6a1b      	ldr	r3, [r3, #32]
 8005114:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005118:	d108      	bne.n	800512c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800511a:	4b24      	ldr	r3, [pc, #144]	@ (80051ac <HAL_RCC_OscConfig+0x4c4>)
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	4921      	ldr	r1, [pc, #132]	@ (80051ac <HAL_RCC_OscConfig+0x4c4>)
 8005128:	4313      	orrs	r3, r2
 800512a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800512c:	4b1f      	ldr	r3, [pc, #124]	@ (80051ac <HAL_RCC_OscConfig+0x4c4>)
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a19      	ldr	r1, [r3, #32]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800513c:	430b      	orrs	r3, r1
 800513e:	491b      	ldr	r1, [pc, #108]	@ (80051ac <HAL_RCC_OscConfig+0x4c4>)
 8005140:	4313      	orrs	r3, r2
 8005142:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005144:	4b1b      	ldr	r3, [pc, #108]	@ (80051b4 <HAL_RCC_OscConfig+0x4cc>)
 8005146:	2201      	movs	r2, #1
 8005148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800514a:	f7fd ffed 	bl	8003128 <HAL_GetTick>
 800514e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005150:	e008      	b.n	8005164 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005152:	f7fd ffe9 	bl	8003128 <HAL_GetTick>
 8005156:	4602      	mov	r2, r0
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	2b02      	cmp	r3, #2
 800515e:	d901      	bls.n	8005164 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005160:	2303      	movs	r3, #3
 8005162:	e03d      	b.n	80051e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005164:	4b11      	ldr	r3, [pc, #68]	@ (80051ac <HAL_RCC_OscConfig+0x4c4>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800516c:	2b00      	cmp	r3, #0
 800516e:	d0f0      	beq.n	8005152 <HAL_RCC_OscConfig+0x46a>
 8005170:	e035      	b.n	80051de <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005172:	4b10      	ldr	r3, [pc, #64]	@ (80051b4 <HAL_RCC_OscConfig+0x4cc>)
 8005174:	2200      	movs	r2, #0
 8005176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005178:	f7fd ffd6 	bl	8003128 <HAL_GetTick>
 800517c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800517e:	e008      	b.n	8005192 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005180:	f7fd ffd2 	bl	8003128 <HAL_GetTick>
 8005184:	4602      	mov	r2, r0
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	2b02      	cmp	r3, #2
 800518c:	d901      	bls.n	8005192 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	e026      	b.n	80051e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005192:	4b06      	ldr	r3, [pc, #24]	@ (80051ac <HAL_RCC_OscConfig+0x4c4>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d1f0      	bne.n	8005180 <HAL_RCC_OscConfig+0x498>
 800519e:	e01e      	b.n	80051de <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	69db      	ldr	r3, [r3, #28]
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d107      	bne.n	80051b8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e019      	b.n	80051e0 <HAL_RCC_OscConfig+0x4f8>
 80051ac:	40021000 	.word	0x40021000
 80051b0:	40007000 	.word	0x40007000
 80051b4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80051b8:	4b0b      	ldr	r3, [pc, #44]	@ (80051e8 <HAL_RCC_OscConfig+0x500>)
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6a1b      	ldr	r3, [r3, #32]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d106      	bne.n	80051da <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d001      	beq.n	80051de <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e000      	b.n	80051e0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80051de:	2300      	movs	r3, #0
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3718      	adds	r7, #24
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	40021000 	.word	0x40021000

080051ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d101      	bne.n	8005200 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e0d0      	b.n	80053a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005200:	4b6a      	ldr	r3, [pc, #424]	@ (80053ac <HAL_RCC_ClockConfig+0x1c0>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0307 	and.w	r3, r3, #7
 8005208:	683a      	ldr	r2, [r7, #0]
 800520a:	429a      	cmp	r2, r3
 800520c:	d910      	bls.n	8005230 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800520e:	4b67      	ldr	r3, [pc, #412]	@ (80053ac <HAL_RCC_ClockConfig+0x1c0>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f023 0207 	bic.w	r2, r3, #7
 8005216:	4965      	ldr	r1, [pc, #404]	@ (80053ac <HAL_RCC_ClockConfig+0x1c0>)
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	4313      	orrs	r3, r2
 800521c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800521e:	4b63      	ldr	r3, [pc, #396]	@ (80053ac <HAL_RCC_ClockConfig+0x1c0>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 0307 	and.w	r3, r3, #7
 8005226:	683a      	ldr	r2, [r7, #0]
 8005228:	429a      	cmp	r2, r3
 800522a:	d001      	beq.n	8005230 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	e0b8      	b.n	80053a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 0302 	and.w	r3, r3, #2
 8005238:	2b00      	cmp	r3, #0
 800523a:	d020      	beq.n	800527e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0304 	and.w	r3, r3, #4
 8005244:	2b00      	cmp	r3, #0
 8005246:	d005      	beq.n	8005254 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005248:	4b59      	ldr	r3, [pc, #356]	@ (80053b0 <HAL_RCC_ClockConfig+0x1c4>)
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	4a58      	ldr	r2, [pc, #352]	@ (80053b0 <HAL_RCC_ClockConfig+0x1c4>)
 800524e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005252:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 0308 	and.w	r3, r3, #8
 800525c:	2b00      	cmp	r3, #0
 800525e:	d005      	beq.n	800526c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005260:	4b53      	ldr	r3, [pc, #332]	@ (80053b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	4a52      	ldr	r2, [pc, #328]	@ (80053b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005266:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800526a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800526c:	4b50      	ldr	r3, [pc, #320]	@ (80053b0 <HAL_RCC_ClockConfig+0x1c4>)
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	494d      	ldr	r1, [pc, #308]	@ (80053b0 <HAL_RCC_ClockConfig+0x1c4>)
 800527a:	4313      	orrs	r3, r2
 800527c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0301 	and.w	r3, r3, #1
 8005286:	2b00      	cmp	r3, #0
 8005288:	d040      	beq.n	800530c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	2b01      	cmp	r3, #1
 8005290:	d107      	bne.n	80052a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005292:	4b47      	ldr	r3, [pc, #284]	@ (80053b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800529a:	2b00      	cmp	r3, #0
 800529c:	d115      	bne.n	80052ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e07f      	b.n	80053a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	2b02      	cmp	r3, #2
 80052a8:	d107      	bne.n	80052ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052aa:	4b41      	ldr	r3, [pc, #260]	@ (80053b0 <HAL_RCC_ClockConfig+0x1c4>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d109      	bne.n	80052ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e073      	b.n	80053a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052ba:	4b3d      	ldr	r3, [pc, #244]	@ (80053b0 <HAL_RCC_ClockConfig+0x1c4>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0302 	and.w	r3, r3, #2
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d101      	bne.n	80052ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e06b      	b.n	80053a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80052ca:	4b39      	ldr	r3, [pc, #228]	@ (80053b0 <HAL_RCC_ClockConfig+0x1c4>)
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	f023 0203 	bic.w	r2, r3, #3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	4936      	ldr	r1, [pc, #216]	@ (80053b0 <HAL_RCC_ClockConfig+0x1c4>)
 80052d8:	4313      	orrs	r3, r2
 80052da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80052dc:	f7fd ff24 	bl	8003128 <HAL_GetTick>
 80052e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052e2:	e00a      	b.n	80052fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052e4:	f7fd ff20 	bl	8003128 <HAL_GetTick>
 80052e8:	4602      	mov	r2, r0
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d901      	bls.n	80052fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	e053      	b.n	80053a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052fa:	4b2d      	ldr	r3, [pc, #180]	@ (80053b0 <HAL_RCC_ClockConfig+0x1c4>)
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	f003 020c 	and.w	r2, r3, #12
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	429a      	cmp	r2, r3
 800530a:	d1eb      	bne.n	80052e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800530c:	4b27      	ldr	r3, [pc, #156]	@ (80053ac <HAL_RCC_ClockConfig+0x1c0>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0307 	and.w	r3, r3, #7
 8005314:	683a      	ldr	r2, [r7, #0]
 8005316:	429a      	cmp	r2, r3
 8005318:	d210      	bcs.n	800533c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800531a:	4b24      	ldr	r3, [pc, #144]	@ (80053ac <HAL_RCC_ClockConfig+0x1c0>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f023 0207 	bic.w	r2, r3, #7
 8005322:	4922      	ldr	r1, [pc, #136]	@ (80053ac <HAL_RCC_ClockConfig+0x1c0>)
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	4313      	orrs	r3, r2
 8005328:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800532a:	4b20      	ldr	r3, [pc, #128]	@ (80053ac <HAL_RCC_ClockConfig+0x1c0>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 0307 	and.w	r3, r3, #7
 8005332:	683a      	ldr	r2, [r7, #0]
 8005334:	429a      	cmp	r2, r3
 8005336:	d001      	beq.n	800533c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e032      	b.n	80053a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0304 	and.w	r3, r3, #4
 8005344:	2b00      	cmp	r3, #0
 8005346:	d008      	beq.n	800535a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005348:	4b19      	ldr	r3, [pc, #100]	@ (80053b0 <HAL_RCC_ClockConfig+0x1c4>)
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	4916      	ldr	r1, [pc, #88]	@ (80053b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005356:	4313      	orrs	r3, r2
 8005358:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 0308 	and.w	r3, r3, #8
 8005362:	2b00      	cmp	r3, #0
 8005364:	d009      	beq.n	800537a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005366:	4b12      	ldr	r3, [pc, #72]	@ (80053b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	00db      	lsls	r3, r3, #3
 8005374:	490e      	ldr	r1, [pc, #56]	@ (80053b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005376:	4313      	orrs	r3, r2
 8005378:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800537a:	f000 f821 	bl	80053c0 <HAL_RCC_GetSysClockFreq>
 800537e:	4602      	mov	r2, r0
 8005380:	4b0b      	ldr	r3, [pc, #44]	@ (80053b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	091b      	lsrs	r3, r3, #4
 8005386:	f003 030f 	and.w	r3, r3, #15
 800538a:	490a      	ldr	r1, [pc, #40]	@ (80053b4 <HAL_RCC_ClockConfig+0x1c8>)
 800538c:	5ccb      	ldrb	r3, [r1, r3]
 800538e:	fa22 f303 	lsr.w	r3, r2, r3
 8005392:	4a09      	ldr	r2, [pc, #36]	@ (80053b8 <HAL_RCC_ClockConfig+0x1cc>)
 8005394:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005396:	4b09      	ldr	r3, [pc, #36]	@ (80053bc <HAL_RCC_ClockConfig+0x1d0>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4618      	mov	r0, r3
 800539c:	f7fd fe82 	bl	80030a4 <HAL_InitTick>

  return HAL_OK;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3710      	adds	r7, #16
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	40022000 	.word	0x40022000
 80053b0:	40021000 	.word	0x40021000
 80053b4:	08009894 	.word	0x08009894
 80053b8:	2000000c 	.word	0x2000000c
 80053bc:	20000010 	.word	0x20000010

080053c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b087      	sub	sp, #28
 80053c4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80053c6:	2300      	movs	r3, #0
 80053c8:	60fb      	str	r3, [r7, #12]
 80053ca:	2300      	movs	r3, #0
 80053cc:	60bb      	str	r3, [r7, #8]
 80053ce:	2300      	movs	r3, #0
 80053d0:	617b      	str	r3, [r7, #20]
 80053d2:	2300      	movs	r3, #0
 80053d4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80053d6:	2300      	movs	r3, #0
 80053d8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80053da:	4b1e      	ldr	r3, [pc, #120]	@ (8005454 <HAL_RCC_GetSysClockFreq+0x94>)
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f003 030c 	and.w	r3, r3, #12
 80053e6:	2b04      	cmp	r3, #4
 80053e8:	d002      	beq.n	80053f0 <HAL_RCC_GetSysClockFreq+0x30>
 80053ea:	2b08      	cmp	r3, #8
 80053ec:	d003      	beq.n	80053f6 <HAL_RCC_GetSysClockFreq+0x36>
 80053ee:	e027      	b.n	8005440 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80053f0:	4b19      	ldr	r3, [pc, #100]	@ (8005458 <HAL_RCC_GetSysClockFreq+0x98>)
 80053f2:	613b      	str	r3, [r7, #16]
      break;
 80053f4:	e027      	b.n	8005446 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	0c9b      	lsrs	r3, r3, #18
 80053fa:	f003 030f 	and.w	r3, r3, #15
 80053fe:	4a17      	ldr	r2, [pc, #92]	@ (800545c <HAL_RCC_GetSysClockFreq+0x9c>)
 8005400:	5cd3      	ldrb	r3, [r2, r3]
 8005402:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d010      	beq.n	8005430 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800540e:	4b11      	ldr	r3, [pc, #68]	@ (8005454 <HAL_RCC_GetSysClockFreq+0x94>)
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	0c5b      	lsrs	r3, r3, #17
 8005414:	f003 0301 	and.w	r3, r3, #1
 8005418:	4a11      	ldr	r2, [pc, #68]	@ (8005460 <HAL_RCC_GetSysClockFreq+0xa0>)
 800541a:	5cd3      	ldrb	r3, [r2, r3]
 800541c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a0d      	ldr	r2, [pc, #52]	@ (8005458 <HAL_RCC_GetSysClockFreq+0x98>)
 8005422:	fb03 f202 	mul.w	r2, r3, r2
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	fbb2 f3f3 	udiv	r3, r2, r3
 800542c:	617b      	str	r3, [r7, #20]
 800542e:	e004      	b.n	800543a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	4a0c      	ldr	r2, [pc, #48]	@ (8005464 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005434:	fb02 f303 	mul.w	r3, r2, r3
 8005438:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	613b      	str	r3, [r7, #16]
      break;
 800543e:	e002      	b.n	8005446 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005440:	4b05      	ldr	r3, [pc, #20]	@ (8005458 <HAL_RCC_GetSysClockFreq+0x98>)
 8005442:	613b      	str	r3, [r7, #16]
      break;
 8005444:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005446:	693b      	ldr	r3, [r7, #16]
}
 8005448:	4618      	mov	r0, r3
 800544a:	371c      	adds	r7, #28
 800544c:	46bd      	mov	sp, r7
 800544e:	bc80      	pop	{r7}
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	40021000 	.word	0x40021000
 8005458:	007a1200 	.word	0x007a1200
 800545c:	080098ac 	.word	0x080098ac
 8005460:	080098bc 	.word	0x080098bc
 8005464:	003d0900 	.word	0x003d0900

08005468 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005468:	b480      	push	{r7}
 800546a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800546c:	4b02      	ldr	r3, [pc, #8]	@ (8005478 <HAL_RCC_GetHCLKFreq+0x10>)
 800546e:	681b      	ldr	r3, [r3, #0]
}
 8005470:	4618      	mov	r0, r3
 8005472:	46bd      	mov	sp, r7
 8005474:	bc80      	pop	{r7}
 8005476:	4770      	bx	lr
 8005478:	2000000c 	.word	0x2000000c

0800547c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005480:	f7ff fff2 	bl	8005468 <HAL_RCC_GetHCLKFreq>
 8005484:	4602      	mov	r2, r0
 8005486:	4b05      	ldr	r3, [pc, #20]	@ (800549c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	0a1b      	lsrs	r3, r3, #8
 800548c:	f003 0307 	and.w	r3, r3, #7
 8005490:	4903      	ldr	r1, [pc, #12]	@ (80054a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005492:	5ccb      	ldrb	r3, [r1, r3]
 8005494:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005498:	4618      	mov	r0, r3
 800549a:	bd80      	pop	{r7, pc}
 800549c:	40021000 	.word	0x40021000
 80054a0:	080098a4 	.word	0x080098a4

080054a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80054a8:	f7ff ffde 	bl	8005468 <HAL_RCC_GetHCLKFreq>
 80054ac:	4602      	mov	r2, r0
 80054ae:	4b05      	ldr	r3, [pc, #20]	@ (80054c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	0adb      	lsrs	r3, r3, #11
 80054b4:	f003 0307 	and.w	r3, r3, #7
 80054b8:	4903      	ldr	r1, [pc, #12]	@ (80054c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80054ba:	5ccb      	ldrb	r3, [r1, r3]
 80054bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	40021000 	.word	0x40021000
 80054c8:	080098a4 	.word	0x080098a4

080054cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b085      	sub	sp, #20
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80054d4:	4b0a      	ldr	r3, [pc, #40]	@ (8005500 <RCC_Delay+0x34>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a0a      	ldr	r2, [pc, #40]	@ (8005504 <RCC_Delay+0x38>)
 80054da:	fba2 2303 	umull	r2, r3, r2, r3
 80054de:	0a5b      	lsrs	r3, r3, #9
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	fb02 f303 	mul.w	r3, r2, r3
 80054e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80054e8:	bf00      	nop
  }
  while (Delay --);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	1e5a      	subs	r2, r3, #1
 80054ee:	60fa      	str	r2, [r7, #12]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d1f9      	bne.n	80054e8 <RCC_Delay+0x1c>
}
 80054f4:	bf00      	nop
 80054f6:	bf00      	nop
 80054f8:	3714      	adds	r7, #20
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bc80      	pop	{r7}
 80054fe:	4770      	bx	lr
 8005500:	2000000c 	.word	0x2000000c
 8005504:	10624dd3 	.word	0x10624dd3

08005508 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d101      	bne.n	800551a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e042      	b.n	80055a0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005520:	b2db      	uxtb	r3, r3
 8005522:	2b00      	cmp	r3, #0
 8005524:	d106      	bne.n	8005534 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f7fd fc94 	bl	8002e5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2224      	movs	r2, #36	@ 0x24
 8005538:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68da      	ldr	r2, [r3, #12]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800554a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f000 ff4f 	bl	80063f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	691a      	ldr	r2, [r3, #16]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005560:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	695a      	ldr	r2, [r3, #20]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005570:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	68da      	ldr	r2, [r3, #12]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005580:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2220      	movs	r2, #32
 800558c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2220      	movs	r2, #32
 8005594:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3708      	adds	r7, #8
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b08a      	sub	sp, #40	@ 0x28
 80055ac:	af02      	add	r7, sp, #8
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	603b      	str	r3, [r7, #0]
 80055b4:	4613      	mov	r3, r2
 80055b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80055b8:	2300      	movs	r3, #0
 80055ba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	2b20      	cmp	r3, #32
 80055c6:	d175      	bne.n	80056b4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d002      	beq.n	80055d4 <HAL_UART_Transmit+0x2c>
 80055ce:	88fb      	ldrh	r3, [r7, #6]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d101      	bne.n	80055d8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	e06e      	b.n	80056b6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2221      	movs	r2, #33	@ 0x21
 80055e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80055e6:	f7fd fd9f 	bl	8003128 <HAL_GetTick>
 80055ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	88fa      	ldrh	r2, [r7, #6]
 80055f0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	88fa      	ldrh	r2, [r7, #6]
 80055f6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005600:	d108      	bne.n	8005614 <HAL_UART_Transmit+0x6c>
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d104      	bne.n	8005614 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800560a:	2300      	movs	r3, #0
 800560c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	61bb      	str	r3, [r7, #24]
 8005612:	e003      	b.n	800561c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005618:	2300      	movs	r3, #0
 800561a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800561c:	e02e      	b.n	800567c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	9300      	str	r3, [sp, #0]
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	2200      	movs	r2, #0
 8005626:	2180      	movs	r1, #128	@ 0x80
 8005628:	68f8      	ldr	r0, [r7, #12]
 800562a:	f000 fc2c 	bl	8005e86 <UART_WaitOnFlagUntilTimeout>
 800562e:	4603      	mov	r3, r0
 8005630:	2b00      	cmp	r3, #0
 8005632:	d005      	beq.n	8005640 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2220      	movs	r2, #32
 8005638:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800563c:	2303      	movs	r3, #3
 800563e:	e03a      	b.n	80056b6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005640:	69fb      	ldr	r3, [r7, #28]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d10b      	bne.n	800565e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005646:	69bb      	ldr	r3, [r7, #24]
 8005648:	881b      	ldrh	r3, [r3, #0]
 800564a:	461a      	mov	r2, r3
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005654:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	3302      	adds	r3, #2
 800565a:	61bb      	str	r3, [r7, #24]
 800565c:	e007      	b.n	800566e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	781a      	ldrb	r2, [r3, #0]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005668:	69fb      	ldr	r3, [r7, #28]
 800566a:	3301      	adds	r3, #1
 800566c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005672:	b29b      	uxth	r3, r3
 8005674:	3b01      	subs	r3, #1
 8005676:	b29a      	uxth	r2, r3
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005680:	b29b      	uxth	r3, r3
 8005682:	2b00      	cmp	r3, #0
 8005684:	d1cb      	bne.n	800561e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	9300      	str	r3, [sp, #0]
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	2200      	movs	r2, #0
 800568e:	2140      	movs	r1, #64	@ 0x40
 8005690:	68f8      	ldr	r0, [r7, #12]
 8005692:	f000 fbf8 	bl	8005e86 <UART_WaitOnFlagUntilTimeout>
 8005696:	4603      	mov	r3, r0
 8005698:	2b00      	cmp	r3, #0
 800569a:	d005      	beq.n	80056a8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2220      	movs	r2, #32
 80056a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80056a4:	2303      	movs	r3, #3
 80056a6:	e006      	b.n	80056b6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2220      	movs	r2, #32
 80056ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80056b0:	2300      	movs	r3, #0
 80056b2:	e000      	b.n	80056b6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80056b4:	2302      	movs	r3, #2
  }
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3720      	adds	r7, #32
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}

080056be <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80056be:	b580      	push	{r7, lr}
 80056c0:	b084      	sub	sp, #16
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	60f8      	str	r0, [r7, #12]
 80056c6:	60b9      	str	r1, [r7, #8]
 80056c8:	4613      	mov	r3, r2
 80056ca:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	2b20      	cmp	r3, #32
 80056d6:	d112      	bne.n	80056fe <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d002      	beq.n	80056e4 <HAL_UART_Receive_DMA+0x26>
 80056de:	88fb      	ldrh	r3, [r7, #6]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d101      	bne.n	80056e8 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e00b      	b.n	8005700 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2200      	movs	r2, #0
 80056ec:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80056ee:	88fb      	ldrh	r3, [r7, #6]
 80056f0:	461a      	mov	r2, r3
 80056f2:	68b9      	ldr	r1, [r7, #8]
 80056f4:	68f8      	ldr	r0, [r7, #12]
 80056f6:	f000 fc1f 	bl	8005f38 <UART_Start_Receive_DMA>
 80056fa:	4603      	mov	r3, r0
 80056fc:	e000      	b.n	8005700 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80056fe:	2302      	movs	r3, #2
  }
}
 8005700:	4618      	mov	r0, r3
 8005702:	3710      	adds	r7, #16
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}

08005708 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b0ba      	sub	sp, #232	@ 0xe8
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	695b      	ldr	r3, [r3, #20]
 800572a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800572e:	2300      	movs	r3, #0
 8005730:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005734:	2300      	movs	r3, #0
 8005736:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800573a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800573e:	f003 030f 	and.w	r3, r3, #15
 8005742:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005746:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800574a:	2b00      	cmp	r3, #0
 800574c:	d10f      	bne.n	800576e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800574e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005752:	f003 0320 	and.w	r3, r3, #32
 8005756:	2b00      	cmp	r3, #0
 8005758:	d009      	beq.n	800576e <HAL_UART_IRQHandler+0x66>
 800575a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800575e:	f003 0320 	and.w	r3, r3, #32
 8005762:	2b00      	cmp	r3, #0
 8005764:	d003      	beq.n	800576e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f000 fd84 	bl	8006274 <UART_Receive_IT>
      return;
 800576c:	e25b      	b.n	8005c26 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800576e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005772:	2b00      	cmp	r3, #0
 8005774:	f000 80de 	beq.w	8005934 <HAL_UART_IRQHandler+0x22c>
 8005778:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800577c:	f003 0301 	and.w	r3, r3, #1
 8005780:	2b00      	cmp	r3, #0
 8005782:	d106      	bne.n	8005792 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005788:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800578c:	2b00      	cmp	r3, #0
 800578e:	f000 80d1 	beq.w	8005934 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005796:	f003 0301 	and.w	r3, r3, #1
 800579a:	2b00      	cmp	r3, #0
 800579c:	d00b      	beq.n	80057b6 <HAL_UART_IRQHandler+0xae>
 800579e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d005      	beq.n	80057b6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057ae:	f043 0201 	orr.w	r2, r3, #1
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80057b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057ba:	f003 0304 	and.w	r3, r3, #4
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d00b      	beq.n	80057da <HAL_UART_IRQHandler+0xd2>
 80057c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057c6:	f003 0301 	and.w	r3, r3, #1
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d005      	beq.n	80057da <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057d2:	f043 0202 	orr.w	r2, r3, #2
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80057da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057de:	f003 0302 	and.w	r3, r3, #2
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d00b      	beq.n	80057fe <HAL_UART_IRQHandler+0xf6>
 80057e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057ea:	f003 0301 	and.w	r3, r3, #1
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d005      	beq.n	80057fe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057f6:	f043 0204 	orr.w	r2, r3, #4
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80057fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005802:	f003 0308 	and.w	r3, r3, #8
 8005806:	2b00      	cmp	r3, #0
 8005808:	d011      	beq.n	800582e <HAL_UART_IRQHandler+0x126>
 800580a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800580e:	f003 0320 	and.w	r3, r3, #32
 8005812:	2b00      	cmp	r3, #0
 8005814:	d105      	bne.n	8005822 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005816:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800581a:	f003 0301 	and.w	r3, r3, #1
 800581e:	2b00      	cmp	r3, #0
 8005820:	d005      	beq.n	800582e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005826:	f043 0208 	orr.w	r2, r3, #8
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005832:	2b00      	cmp	r3, #0
 8005834:	f000 81f2 	beq.w	8005c1c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005838:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800583c:	f003 0320 	and.w	r3, r3, #32
 8005840:	2b00      	cmp	r3, #0
 8005842:	d008      	beq.n	8005856 <HAL_UART_IRQHandler+0x14e>
 8005844:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005848:	f003 0320 	and.w	r3, r3, #32
 800584c:	2b00      	cmp	r3, #0
 800584e:	d002      	beq.n	8005856 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f000 fd0f 	bl	8006274 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	695b      	ldr	r3, [r3, #20]
 800585c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005860:	2b00      	cmp	r3, #0
 8005862:	bf14      	ite	ne
 8005864:	2301      	movne	r3, #1
 8005866:	2300      	moveq	r3, #0
 8005868:	b2db      	uxtb	r3, r3
 800586a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005872:	f003 0308 	and.w	r3, r3, #8
 8005876:	2b00      	cmp	r3, #0
 8005878:	d103      	bne.n	8005882 <HAL_UART_IRQHandler+0x17a>
 800587a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800587e:	2b00      	cmp	r3, #0
 8005880:	d04f      	beq.n	8005922 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 fc19 	bl	80060ba <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	695b      	ldr	r3, [r3, #20]
 800588e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005892:	2b00      	cmp	r3, #0
 8005894:	d041      	beq.n	800591a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	3314      	adds	r3, #20
 800589c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80058a4:	e853 3f00 	ldrex	r3, [r3]
 80058a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80058ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80058b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	3314      	adds	r3, #20
 80058be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80058c2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80058c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80058ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80058d2:	e841 2300 	strex	r3, r2, [r1]
 80058d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80058da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d1d9      	bne.n	8005896 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d013      	beq.n	8005912 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058ee:	4a7e      	ldr	r2, [pc, #504]	@ (8005ae8 <HAL_UART_IRQHandler+0x3e0>)
 80058f0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058f6:	4618      	mov	r0, r3
 80058f8:	f7fd fe48 	bl	800358c <HAL_DMA_Abort_IT>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d016      	beq.n	8005930 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005906:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800590c:	4610      	mov	r0, r2
 800590e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005910:	e00e      	b.n	8005930 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 f9a5 	bl	8005c62 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005918:	e00a      	b.n	8005930 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 f9a1 	bl	8005c62 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005920:	e006      	b.n	8005930 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 f99d 	bl	8005c62 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800592e:	e175      	b.n	8005c1c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005930:	bf00      	nop
    return;
 8005932:	e173      	b.n	8005c1c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005938:	2b01      	cmp	r3, #1
 800593a:	f040 814f 	bne.w	8005bdc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800593e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005942:	f003 0310 	and.w	r3, r3, #16
 8005946:	2b00      	cmp	r3, #0
 8005948:	f000 8148 	beq.w	8005bdc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800594c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005950:	f003 0310 	and.w	r3, r3, #16
 8005954:	2b00      	cmp	r3, #0
 8005956:	f000 8141 	beq.w	8005bdc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800595a:	2300      	movs	r3, #0
 800595c:	60bb      	str	r3, [r7, #8]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	60bb      	str	r3, [r7, #8]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	60bb      	str	r3, [r7, #8]
 800596e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	695b      	ldr	r3, [r3, #20]
 8005976:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800597a:	2b00      	cmp	r3, #0
 800597c:	f000 80b6 	beq.w	8005aec <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800598c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005990:	2b00      	cmp	r3, #0
 8005992:	f000 8145 	beq.w	8005c20 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800599a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800599e:	429a      	cmp	r2, r3
 80059a0:	f080 813e 	bcs.w	8005c20 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80059aa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059b0:	699b      	ldr	r3, [r3, #24]
 80059b2:	2b20      	cmp	r3, #32
 80059b4:	f000 8088 	beq.w	8005ac8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	330c      	adds	r3, #12
 80059be:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80059c6:	e853 3f00 	ldrex	r3, [r3]
 80059ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80059ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80059d2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80059d6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	330c      	adds	r3, #12
 80059e0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80059e4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80059e8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ec:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80059f0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80059f4:	e841 2300 	strex	r3, r2, [r1]
 80059f8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80059fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d1d9      	bne.n	80059b8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	3314      	adds	r3, #20
 8005a0a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a0c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005a0e:	e853 3f00 	ldrex	r3, [r3]
 8005a12:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005a14:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005a16:	f023 0301 	bic.w	r3, r3, #1
 8005a1a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	3314      	adds	r3, #20
 8005a24:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005a28:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005a2c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a2e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005a30:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005a34:	e841 2300 	strex	r3, r2, [r1]
 8005a38:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005a3a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d1e1      	bne.n	8005a04 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	3314      	adds	r3, #20
 8005a46:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a48:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a4a:	e853 3f00 	ldrex	r3, [r3]
 8005a4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005a50:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a56:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	3314      	adds	r3, #20
 8005a60:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005a64:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005a66:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a68:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005a6a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005a6c:	e841 2300 	strex	r3, r2, [r1]
 8005a70:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005a72:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d1e3      	bne.n	8005a40 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2220      	movs	r2, #32
 8005a7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	330c      	adds	r3, #12
 8005a8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a90:	e853 3f00 	ldrex	r3, [r3]
 8005a94:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005a96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a98:	f023 0310 	bic.w	r3, r3, #16
 8005a9c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	330c      	adds	r3, #12
 8005aa6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005aaa:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005aac:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aae:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005ab0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005ab2:	e841 2300 	strex	r3, r2, [r1]
 8005ab6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005ab8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d1e3      	bne.n	8005a86 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f7fd fd26 	bl	8003514 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2202      	movs	r2, #2
 8005acc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	4619      	mov	r1, r3
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 f8c8 	bl	8005c74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005ae4:	e09c      	b.n	8005c20 <HAL_UART_IRQHandler+0x518>
 8005ae6:	bf00      	nop
 8005ae8:	0800617f 	.word	0x0800617f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	f000 808e 	beq.w	8005c24 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005b08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	f000 8089 	beq.w	8005c24 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	330c      	adds	r3, #12
 8005b18:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b1c:	e853 3f00 	ldrex	r3, [r3]
 8005b20:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b28:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	330c      	adds	r3, #12
 8005b32:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005b36:	647a      	str	r2, [r7, #68]	@ 0x44
 8005b38:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b3a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b3c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b3e:	e841 2300 	strex	r3, r2, [r1]
 8005b42:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d1e3      	bne.n	8005b12 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	3314      	adds	r3, #20
 8005b50:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b54:	e853 3f00 	ldrex	r3, [r3]
 8005b58:	623b      	str	r3, [r7, #32]
   return(result);
 8005b5a:	6a3b      	ldr	r3, [r7, #32]
 8005b5c:	f023 0301 	bic.w	r3, r3, #1
 8005b60:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	3314      	adds	r3, #20
 8005b6a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005b6e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005b70:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b76:	e841 2300 	strex	r3, r2, [r1]
 8005b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d1e3      	bne.n	8005b4a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2220      	movs	r2, #32
 8005b86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	330c      	adds	r3, #12
 8005b96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	e853 3f00 	ldrex	r3, [r3]
 8005b9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f023 0310 	bic.w	r3, r3, #16
 8005ba6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	330c      	adds	r3, #12
 8005bb0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005bb4:	61fa      	str	r2, [r7, #28]
 8005bb6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb8:	69b9      	ldr	r1, [r7, #24]
 8005bba:	69fa      	ldr	r2, [r7, #28]
 8005bbc:	e841 2300 	strex	r3, r2, [r1]
 8005bc0:	617b      	str	r3, [r7, #20]
   return(result);
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d1e3      	bne.n	8005b90 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2202      	movs	r2, #2
 8005bcc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005bce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f000 f84d 	bl	8005c74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005bda:	e023      	b.n	8005c24 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005bdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005be0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d009      	beq.n	8005bfc <HAL_UART_IRQHandler+0x4f4>
 8005be8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d003      	beq.n	8005bfc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f000 fad6 	bl	80061a6 <UART_Transmit_IT>
    return;
 8005bfa:	e014      	b.n	8005c26 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005bfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d00e      	beq.n	8005c26 <HAL_UART_IRQHandler+0x51e>
 8005c08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d008      	beq.n	8005c26 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f000 fb15 	bl	8006244 <UART_EndTransmit_IT>
    return;
 8005c1a:	e004      	b.n	8005c26 <HAL_UART_IRQHandler+0x51e>
    return;
 8005c1c:	bf00      	nop
 8005c1e:	e002      	b.n	8005c26 <HAL_UART_IRQHandler+0x51e>
      return;
 8005c20:	bf00      	nop
 8005c22:	e000      	b.n	8005c26 <HAL_UART_IRQHandler+0x51e>
      return;
 8005c24:	bf00      	nop
  }
}
 8005c26:	37e8      	adds	r7, #232	@ 0xe8
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005c34:	bf00      	nop
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bc80      	pop	{r7}
 8005c3c:	4770      	bx	lr

08005c3e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c3e:	b480      	push	{r7}
 8005c40:	b083      	sub	sp, #12
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005c46:	bf00      	nop
 8005c48:	370c      	adds	r7, #12
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bc80      	pop	{r7}
 8005c4e:	4770      	bx	lr

08005c50 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005c58:	bf00      	nop
 8005c5a:	370c      	adds	r7, #12
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bc80      	pop	{r7}
 8005c60:	4770      	bx	lr

08005c62 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c62:	b480      	push	{r7}
 8005c64:	b083      	sub	sp, #12
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005c6a:	bf00      	nop
 8005c6c:	370c      	adds	r7, #12
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bc80      	pop	{r7}
 8005c72:	4770      	bx	lr

08005c74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	460b      	mov	r3, r1
 8005c7e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c80:	bf00      	nop
 8005c82:	370c      	adds	r7, #12
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bc80      	pop	{r7}
 8005c88:	4770      	bx	lr

08005c8a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005c8a:	b580      	push	{r7, lr}
 8005c8c:	b09c      	sub	sp, #112	@ 0x70
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c96:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 0320 	and.w	r3, r3, #32
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d172      	bne.n	8005d8c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005ca6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ca8:	2200      	movs	r2, #0
 8005caa:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005cac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	330c      	adds	r3, #12
 8005cb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cb6:	e853 3f00 	ldrex	r3, [r3]
 8005cba:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005cbc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005cbe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005cc2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005cc4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	330c      	adds	r3, #12
 8005cca:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005ccc:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005cce:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005cd2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005cd4:	e841 2300 	strex	r3, r2, [r1]
 8005cd8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005cda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d1e5      	bne.n	8005cac <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ce0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	3314      	adds	r3, #20
 8005ce6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cea:	e853 3f00 	ldrex	r3, [r3]
 8005cee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005cf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cf2:	f023 0301 	bic.w	r3, r3, #1
 8005cf6:	667b      	str	r3, [r7, #100]	@ 0x64
 8005cf8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	3314      	adds	r3, #20
 8005cfe:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005d00:	647a      	str	r2, [r7, #68]	@ 0x44
 8005d02:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d04:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005d06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d08:	e841 2300 	strex	r3, r2, [r1]
 8005d0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005d0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d1e5      	bne.n	8005ce0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	3314      	adds	r3, #20
 8005d1a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d1e:	e853 3f00 	ldrex	r3, [r3]
 8005d22:	623b      	str	r3, [r7, #32]
   return(result);
 8005d24:	6a3b      	ldr	r3, [r7, #32]
 8005d26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d2a:	663b      	str	r3, [r7, #96]	@ 0x60
 8005d2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	3314      	adds	r3, #20
 8005d32:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005d34:	633a      	str	r2, [r7, #48]	@ 0x30
 8005d36:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d38:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d3c:	e841 2300 	strex	r3, r2, [r1]
 8005d40:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d1e5      	bne.n	8005d14 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005d48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d4a:	2220      	movs	r2, #32
 8005d4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d119      	bne.n	8005d8c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	330c      	adds	r3, #12
 8005d5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	e853 3f00 	ldrex	r3, [r3]
 8005d66:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f023 0310 	bic.w	r3, r3, #16
 8005d6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005d70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	330c      	adds	r3, #12
 8005d76:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005d78:	61fa      	str	r2, [r7, #28]
 8005d7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d7c:	69b9      	ldr	r1, [r7, #24]
 8005d7e:	69fa      	ldr	r2, [r7, #28]
 8005d80:	e841 2300 	strex	r3, r2, [r1]
 8005d84:	617b      	str	r3, [r7, #20]
   return(result);
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d1e5      	bne.n	8005d58 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d8e:	2200      	movs	r2, #0
 8005d90:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d106      	bne.n	8005da8 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d9c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005d9e:	4619      	mov	r1, r3
 8005da0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005da2:	f7ff ff67 	bl	8005c74 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005da6:	e002      	b.n	8005dae <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005da8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005daa:	f7ff ff48 	bl	8005c3e <HAL_UART_RxCpltCallback>
}
 8005dae:	bf00      	nop
 8005db0:	3770      	adds	r7, #112	@ 0x70
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}

08005db6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005db6:	b580      	push	{r7, lr}
 8005db8:	b084      	sub	sp, #16
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dc2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d108      	bne.n	8005de4 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005dd6:	085b      	lsrs	r3, r3, #1
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	4619      	mov	r1, r3
 8005ddc:	68f8      	ldr	r0, [r7, #12]
 8005dde:	f7ff ff49 	bl	8005c74 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005de2:	e002      	b.n	8005dea <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005de4:	68f8      	ldr	r0, [r7, #12]
 8005de6:	f7ff ff33 	bl	8005c50 <HAL_UART_RxHalfCpltCallback>
}
 8005dea:	bf00      	nop
 8005dec:	3710      	adds	r7, #16
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}

08005df2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005df2:	b580      	push	{r7, lr}
 8005df4:	b084      	sub	sp, #16
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e02:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	695b      	ldr	r3, [r3, #20]
 8005e0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	bf14      	ite	ne
 8005e12:	2301      	movne	r3, #1
 8005e14:	2300      	moveq	r3, #0
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e20:	b2db      	uxtb	r3, r3
 8005e22:	2b21      	cmp	r3, #33	@ 0x21
 8005e24:	d108      	bne.n	8005e38 <UART_DMAError+0x46>
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d005      	beq.n	8005e38 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005e32:	68b8      	ldr	r0, [r7, #8]
 8005e34:	f000 f91a 	bl	800606c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	695b      	ldr	r3, [r3, #20]
 8005e3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	bf14      	ite	ne
 8005e46:	2301      	movne	r3, #1
 8005e48:	2300      	moveq	r3, #0
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	2b22      	cmp	r3, #34	@ 0x22
 8005e58:	d108      	bne.n	8005e6c <UART_DMAError+0x7a>
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d005      	beq.n	8005e6c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	2200      	movs	r2, #0
 8005e64:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8005e66:	68b8      	ldr	r0, [r7, #8]
 8005e68:	f000 f927 	bl	80060ba <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e70:	f043 0210 	orr.w	r2, r3, #16
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e78:	68b8      	ldr	r0, [r7, #8]
 8005e7a:	f7ff fef2 	bl	8005c62 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e7e:	bf00      	nop
 8005e80:	3710      	adds	r7, #16
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}

08005e86 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005e86:	b580      	push	{r7, lr}
 8005e88:	b086      	sub	sp, #24
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	60f8      	str	r0, [r7, #12]
 8005e8e:	60b9      	str	r1, [r7, #8]
 8005e90:	603b      	str	r3, [r7, #0]
 8005e92:	4613      	mov	r3, r2
 8005e94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e96:	e03b      	b.n	8005f10 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e98:	6a3b      	ldr	r3, [r7, #32]
 8005e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e9e:	d037      	beq.n	8005f10 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ea0:	f7fd f942 	bl	8003128 <HAL_GetTick>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	1ad3      	subs	r3, r2, r3
 8005eaa:	6a3a      	ldr	r2, [r7, #32]
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d302      	bcc.n	8005eb6 <UART_WaitOnFlagUntilTimeout+0x30>
 8005eb0:	6a3b      	ldr	r3, [r7, #32]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d101      	bne.n	8005eba <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	e03a      	b.n	8005f30 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	f003 0304 	and.w	r3, r3, #4
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d023      	beq.n	8005f10 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	2b80      	cmp	r3, #128	@ 0x80
 8005ecc:	d020      	beq.n	8005f10 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	2b40      	cmp	r3, #64	@ 0x40
 8005ed2:	d01d      	beq.n	8005f10 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 0308 	and.w	r3, r3, #8
 8005ede:	2b08      	cmp	r3, #8
 8005ee0:	d116      	bne.n	8005f10 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	617b      	str	r3, [r7, #20]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	617b      	str	r3, [r7, #20]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	617b      	str	r3, [r7, #20]
 8005ef6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ef8:	68f8      	ldr	r0, [r7, #12]
 8005efa:	f000 f8de 	bl	80060ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2208      	movs	r2, #8
 8005f02:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2200      	movs	r2, #0
 8005f08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e00f      	b.n	8005f30 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	4013      	ands	r3, r2
 8005f1a:	68ba      	ldr	r2, [r7, #8]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	bf0c      	ite	eq
 8005f20:	2301      	moveq	r3, #1
 8005f22:	2300      	movne	r3, #0
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	461a      	mov	r2, r3
 8005f28:	79fb      	ldrb	r3, [r7, #7]
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d0b4      	beq.n	8005e98 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f2e:	2300      	movs	r3, #0
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3718      	adds	r7, #24
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b098      	sub	sp, #96	@ 0x60
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	60f8      	str	r0, [r7, #12]
 8005f40:	60b9      	str	r1, [r7, #8]
 8005f42:	4613      	mov	r3, r2
 8005f44:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005f46:	68ba      	ldr	r2, [r7, #8]
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	88fa      	ldrh	r2, [r7, #6]
 8005f50:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2200      	movs	r2, #0
 8005f56:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2222      	movs	r2, #34	@ 0x22
 8005f5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f64:	4a3e      	ldr	r2, [pc, #248]	@ (8006060 <UART_Start_Receive_DMA+0x128>)
 8005f66:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f6c:	4a3d      	ldr	r2, [pc, #244]	@ (8006064 <UART_Start_Receive_DMA+0x12c>)
 8005f6e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f74:	4a3c      	ldr	r2, [pc, #240]	@ (8006068 <UART_Start_Receive_DMA+0x130>)
 8005f76:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005f80:	f107 0308 	add.w	r3, r7, #8
 8005f84:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	3304      	adds	r3, #4
 8005f90:	4619      	mov	r1, r3
 8005f92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	88fb      	ldrh	r3, [r7, #6]
 8005f98:	f7fd fa5c 	bl	8003454 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	613b      	str	r3, [r7, #16]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	613b      	str	r3, [r7, #16]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	613b      	str	r3, [r7, #16]
 8005fb0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d019      	beq.n	8005fee <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	330c      	adds	r3, #12
 8005fc0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fc4:	e853 3f00 	ldrex	r3, [r3]
 8005fc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005fca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005fd0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	330c      	adds	r3, #12
 8005fd8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005fda:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005fdc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fde:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005fe0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005fe2:	e841 2300 	strex	r3, r2, [r1]
 8005fe6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005fe8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d1e5      	bne.n	8005fba <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	3314      	adds	r3, #20
 8005ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ff8:	e853 3f00 	ldrex	r3, [r3]
 8005ffc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006000:	f043 0301 	orr.w	r3, r3, #1
 8006004:	657b      	str	r3, [r7, #84]	@ 0x54
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	3314      	adds	r3, #20
 800600c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800600e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006010:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006012:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006014:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006016:	e841 2300 	strex	r3, r2, [r1]
 800601a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800601c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800601e:	2b00      	cmp	r3, #0
 8006020:	d1e5      	bne.n	8005fee <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	3314      	adds	r3, #20
 8006028:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	e853 3f00 	ldrex	r3, [r3]
 8006030:	617b      	str	r3, [r7, #20]
   return(result);
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006038:	653b      	str	r3, [r7, #80]	@ 0x50
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	3314      	adds	r3, #20
 8006040:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006042:	627a      	str	r2, [r7, #36]	@ 0x24
 8006044:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006046:	6a39      	ldr	r1, [r7, #32]
 8006048:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800604a:	e841 2300 	strex	r3, r2, [r1]
 800604e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d1e5      	bne.n	8006022 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006056:	2300      	movs	r3, #0
}
 8006058:	4618      	mov	r0, r3
 800605a:	3760      	adds	r7, #96	@ 0x60
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}
 8006060:	08005c8b 	.word	0x08005c8b
 8006064:	08005db7 	.word	0x08005db7
 8006068:	08005df3 	.word	0x08005df3

0800606c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800606c:	b480      	push	{r7}
 800606e:	b089      	sub	sp, #36	@ 0x24
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	330c      	adds	r3, #12
 800607a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	e853 3f00 	ldrex	r3, [r3]
 8006082:	60bb      	str	r3, [r7, #8]
   return(result);
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800608a:	61fb      	str	r3, [r7, #28]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	330c      	adds	r3, #12
 8006092:	69fa      	ldr	r2, [r7, #28]
 8006094:	61ba      	str	r2, [r7, #24]
 8006096:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006098:	6979      	ldr	r1, [r7, #20]
 800609a:	69ba      	ldr	r2, [r7, #24]
 800609c:	e841 2300 	strex	r3, r2, [r1]
 80060a0:	613b      	str	r3, [r7, #16]
   return(result);
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d1e5      	bne.n	8006074 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2220      	movs	r2, #32
 80060ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80060b0:	bf00      	nop
 80060b2:	3724      	adds	r7, #36	@ 0x24
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bc80      	pop	{r7}
 80060b8:	4770      	bx	lr

080060ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80060ba:	b480      	push	{r7}
 80060bc:	b095      	sub	sp, #84	@ 0x54
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	330c      	adds	r3, #12
 80060c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060cc:	e853 3f00 	ldrex	r3, [r3]
 80060d0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80060d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80060d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	330c      	adds	r3, #12
 80060e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80060e2:	643a      	str	r2, [r7, #64]	@ 0x40
 80060e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80060e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80060ea:	e841 2300 	strex	r3, r2, [r1]
 80060ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80060f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d1e5      	bne.n	80060c2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	3314      	adds	r3, #20
 80060fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060fe:	6a3b      	ldr	r3, [r7, #32]
 8006100:	e853 3f00 	ldrex	r3, [r3]
 8006104:	61fb      	str	r3, [r7, #28]
   return(result);
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	f023 0301 	bic.w	r3, r3, #1
 800610c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	3314      	adds	r3, #20
 8006114:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006116:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006118:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800611a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800611c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800611e:	e841 2300 	strex	r3, r2, [r1]
 8006122:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006126:	2b00      	cmp	r3, #0
 8006128:	d1e5      	bne.n	80060f6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800612e:	2b01      	cmp	r3, #1
 8006130:	d119      	bne.n	8006166 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	330c      	adds	r3, #12
 8006138:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	e853 3f00 	ldrex	r3, [r3]
 8006140:	60bb      	str	r3, [r7, #8]
   return(result);
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	f023 0310 	bic.w	r3, r3, #16
 8006148:	647b      	str	r3, [r7, #68]	@ 0x44
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	330c      	adds	r3, #12
 8006150:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006152:	61ba      	str	r2, [r7, #24]
 8006154:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006156:	6979      	ldr	r1, [r7, #20]
 8006158:	69ba      	ldr	r2, [r7, #24]
 800615a:	e841 2300 	strex	r3, r2, [r1]
 800615e:	613b      	str	r3, [r7, #16]
   return(result);
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d1e5      	bne.n	8006132 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2220      	movs	r2, #32
 800616a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006174:	bf00      	nop
 8006176:	3754      	adds	r7, #84	@ 0x54
 8006178:	46bd      	mov	sp, r7
 800617a:	bc80      	pop	{r7}
 800617c:	4770      	bx	lr

0800617e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800617e:	b580      	push	{r7, lr}
 8006180:	b084      	sub	sp, #16
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800618a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2200      	movs	r2, #0
 8006190:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2200      	movs	r2, #0
 8006196:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006198:	68f8      	ldr	r0, [r7, #12]
 800619a:	f7ff fd62 	bl	8005c62 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800619e:	bf00      	nop
 80061a0:	3710      	adds	r7, #16
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}

080061a6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80061a6:	b480      	push	{r7}
 80061a8:	b085      	sub	sp, #20
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	2b21      	cmp	r3, #33	@ 0x21
 80061b8:	d13e      	bne.n	8006238 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061c2:	d114      	bne.n	80061ee <UART_Transmit_IT+0x48>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	691b      	ldr	r3, [r3, #16]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d110      	bne.n	80061ee <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6a1b      	ldr	r3, [r3, #32]
 80061d0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	881b      	ldrh	r3, [r3, #0]
 80061d6:	461a      	mov	r2, r3
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061e0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6a1b      	ldr	r3, [r3, #32]
 80061e6:	1c9a      	adds	r2, r3, #2
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	621a      	str	r2, [r3, #32]
 80061ec:	e008      	b.n	8006200 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a1b      	ldr	r3, [r3, #32]
 80061f2:	1c59      	adds	r1, r3, #1
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	6211      	str	r1, [r2, #32]
 80061f8:	781a      	ldrb	r2, [r3, #0]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006204:	b29b      	uxth	r3, r3
 8006206:	3b01      	subs	r3, #1
 8006208:	b29b      	uxth	r3, r3
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	4619      	mov	r1, r3
 800620e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006210:	2b00      	cmp	r3, #0
 8006212:	d10f      	bne.n	8006234 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	68da      	ldr	r2, [r3, #12]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006222:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	68da      	ldr	r2, [r3, #12]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006232:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006234:	2300      	movs	r3, #0
 8006236:	e000      	b.n	800623a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006238:	2302      	movs	r3, #2
  }
}
 800623a:	4618      	mov	r0, r3
 800623c:	3714      	adds	r7, #20
 800623e:	46bd      	mov	sp, r7
 8006240:	bc80      	pop	{r7}
 8006242:	4770      	bx	lr

08006244 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b082      	sub	sp, #8
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	68da      	ldr	r2, [r3, #12]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800625a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2220      	movs	r2, #32
 8006260:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f7ff fce1 	bl	8005c2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800626a:	2300      	movs	r3, #0
}
 800626c:	4618      	mov	r0, r3
 800626e:	3708      	adds	r7, #8
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}

08006274 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b08c      	sub	sp, #48	@ 0x30
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006282:	b2db      	uxtb	r3, r3
 8006284:	2b22      	cmp	r3, #34	@ 0x22
 8006286:	f040 80ae 	bne.w	80063e6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006292:	d117      	bne.n	80062c4 <UART_Receive_IT+0x50>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	691b      	ldr	r3, [r3, #16]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d113      	bne.n	80062c4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800629c:	2300      	movs	r3, #0
 800629e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062a4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062b2:	b29a      	uxth	r2, r3
 80062b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062b6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062bc:	1c9a      	adds	r2, r3, #2
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	629a      	str	r2, [r3, #40]	@ 0x28
 80062c2:	e026      	b.n	8006312 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80062ca:	2300      	movs	r3, #0
 80062cc:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062d6:	d007      	beq.n	80062e8 <UART_Receive_IT+0x74>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d10a      	bne.n	80062f6 <UART_Receive_IT+0x82>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	691b      	ldr	r3, [r3, #16]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d106      	bne.n	80062f6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	b2da      	uxtb	r2, r3
 80062f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062f2:	701a      	strb	r2, [r3, #0]
 80062f4:	e008      	b.n	8006308 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006302:	b2da      	uxtb	r2, r3
 8006304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006306:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800630c:	1c5a      	adds	r2, r3, #1
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006316:	b29b      	uxth	r3, r3
 8006318:	3b01      	subs	r3, #1
 800631a:	b29b      	uxth	r3, r3
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	4619      	mov	r1, r3
 8006320:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006322:	2b00      	cmp	r3, #0
 8006324:	d15d      	bne.n	80063e2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68da      	ldr	r2, [r3, #12]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f022 0220 	bic.w	r2, r2, #32
 8006334:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	68da      	ldr	r2, [r3, #12]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006344:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	695a      	ldr	r2, [r3, #20]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f022 0201 	bic.w	r2, r2, #1
 8006354:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2220      	movs	r2, #32
 800635a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006368:	2b01      	cmp	r3, #1
 800636a:	d135      	bne.n	80063d8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	330c      	adds	r3, #12
 8006378:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	e853 3f00 	ldrex	r3, [r3]
 8006380:	613b      	str	r3, [r7, #16]
   return(result);
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	f023 0310 	bic.w	r3, r3, #16
 8006388:	627b      	str	r3, [r7, #36]	@ 0x24
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	330c      	adds	r3, #12
 8006390:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006392:	623a      	str	r2, [r7, #32]
 8006394:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006396:	69f9      	ldr	r1, [r7, #28]
 8006398:	6a3a      	ldr	r2, [r7, #32]
 800639a:	e841 2300 	strex	r3, r2, [r1]
 800639e:	61bb      	str	r3, [r7, #24]
   return(result);
 80063a0:	69bb      	ldr	r3, [r7, #24]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d1e5      	bne.n	8006372 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f003 0310 	and.w	r3, r3, #16
 80063b0:	2b10      	cmp	r3, #16
 80063b2:	d10a      	bne.n	80063ca <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80063b4:	2300      	movs	r3, #0
 80063b6:	60fb      	str	r3, [r7, #12]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	60fb      	str	r3, [r7, #12]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	60fb      	str	r3, [r7, #12]
 80063c8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80063ce:	4619      	mov	r1, r3
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f7ff fc4f 	bl	8005c74 <HAL_UARTEx_RxEventCallback>
 80063d6:	e002      	b.n	80063de <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f7ff fc30 	bl	8005c3e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80063de:	2300      	movs	r3, #0
 80063e0:	e002      	b.n	80063e8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80063e2:	2300      	movs	r3, #0
 80063e4:	e000      	b.n	80063e8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80063e6:	2302      	movs	r3, #2
  }
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3730      	adds	r7, #48	@ 0x30
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}

080063f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b084      	sub	sp, #16
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	691b      	ldr	r3, [r3, #16]
 80063fe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	68da      	ldr	r2, [r3, #12]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	430a      	orrs	r2, r1
 800640c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	689a      	ldr	r2, [r3, #8]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	691b      	ldr	r3, [r3, #16]
 8006416:	431a      	orrs	r2, r3
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	695b      	ldr	r3, [r3, #20]
 800641c:	4313      	orrs	r3, r2
 800641e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800642a:	f023 030c 	bic.w	r3, r3, #12
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	6812      	ldr	r2, [r2, #0]
 8006432:	68b9      	ldr	r1, [r7, #8]
 8006434:	430b      	orrs	r3, r1
 8006436:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	695b      	ldr	r3, [r3, #20]
 800643e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	699a      	ldr	r2, [r3, #24]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	430a      	orrs	r2, r1
 800644c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a2c      	ldr	r2, [pc, #176]	@ (8006504 <UART_SetConfig+0x114>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d103      	bne.n	8006460 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006458:	f7ff f824 	bl	80054a4 <HAL_RCC_GetPCLK2Freq>
 800645c:	60f8      	str	r0, [r7, #12]
 800645e:	e002      	b.n	8006466 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006460:	f7ff f80c 	bl	800547c <HAL_RCC_GetPCLK1Freq>
 8006464:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006466:	68fa      	ldr	r2, [r7, #12]
 8006468:	4613      	mov	r3, r2
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	4413      	add	r3, r2
 800646e:	009a      	lsls	r2, r3, #2
 8006470:	441a      	add	r2, r3
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	009b      	lsls	r3, r3, #2
 8006478:	fbb2 f3f3 	udiv	r3, r2, r3
 800647c:	4a22      	ldr	r2, [pc, #136]	@ (8006508 <UART_SetConfig+0x118>)
 800647e:	fba2 2303 	umull	r2, r3, r2, r3
 8006482:	095b      	lsrs	r3, r3, #5
 8006484:	0119      	lsls	r1, r3, #4
 8006486:	68fa      	ldr	r2, [r7, #12]
 8006488:	4613      	mov	r3, r2
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	4413      	add	r3, r2
 800648e:	009a      	lsls	r2, r3, #2
 8006490:	441a      	add	r2, r3
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	fbb2 f2f3 	udiv	r2, r2, r3
 800649c:	4b1a      	ldr	r3, [pc, #104]	@ (8006508 <UART_SetConfig+0x118>)
 800649e:	fba3 0302 	umull	r0, r3, r3, r2
 80064a2:	095b      	lsrs	r3, r3, #5
 80064a4:	2064      	movs	r0, #100	@ 0x64
 80064a6:	fb00 f303 	mul.w	r3, r0, r3
 80064aa:	1ad3      	subs	r3, r2, r3
 80064ac:	011b      	lsls	r3, r3, #4
 80064ae:	3332      	adds	r3, #50	@ 0x32
 80064b0:	4a15      	ldr	r2, [pc, #84]	@ (8006508 <UART_SetConfig+0x118>)
 80064b2:	fba2 2303 	umull	r2, r3, r2, r3
 80064b6:	095b      	lsrs	r3, r3, #5
 80064b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80064bc:	4419      	add	r1, r3
 80064be:	68fa      	ldr	r2, [r7, #12]
 80064c0:	4613      	mov	r3, r2
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	4413      	add	r3, r2
 80064c6:	009a      	lsls	r2, r3, #2
 80064c8:	441a      	add	r2, r3
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80064d4:	4b0c      	ldr	r3, [pc, #48]	@ (8006508 <UART_SetConfig+0x118>)
 80064d6:	fba3 0302 	umull	r0, r3, r3, r2
 80064da:	095b      	lsrs	r3, r3, #5
 80064dc:	2064      	movs	r0, #100	@ 0x64
 80064de:	fb00 f303 	mul.w	r3, r0, r3
 80064e2:	1ad3      	subs	r3, r2, r3
 80064e4:	011b      	lsls	r3, r3, #4
 80064e6:	3332      	adds	r3, #50	@ 0x32
 80064e8:	4a07      	ldr	r2, [pc, #28]	@ (8006508 <UART_SetConfig+0x118>)
 80064ea:	fba2 2303 	umull	r2, r3, r2, r3
 80064ee:	095b      	lsrs	r3, r3, #5
 80064f0:	f003 020f 	and.w	r2, r3, #15
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	440a      	add	r2, r1
 80064fa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80064fc:	bf00      	nop
 80064fe:	3710      	adds	r7, #16
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}
 8006504:	40013800 	.word	0x40013800
 8006508:	51eb851f 	.word	0x51eb851f

0800650c <sulp>:
 800650c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006510:	460f      	mov	r7, r1
 8006512:	4690      	mov	r8, r2
 8006514:	f002 f890 	bl	8008638 <__ulp>
 8006518:	4604      	mov	r4, r0
 800651a:	460d      	mov	r5, r1
 800651c:	f1b8 0f00 	cmp.w	r8, #0
 8006520:	d011      	beq.n	8006546 <sulp+0x3a>
 8006522:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006526:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800652a:	2b00      	cmp	r3, #0
 800652c:	dd0b      	ble.n	8006546 <sulp+0x3a>
 800652e:	2400      	movs	r4, #0
 8006530:	051b      	lsls	r3, r3, #20
 8006532:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006536:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800653a:	4622      	mov	r2, r4
 800653c:	462b      	mov	r3, r5
 800653e:	f7f9 ffcd 	bl	80004dc <__aeabi_dmul>
 8006542:	4604      	mov	r4, r0
 8006544:	460d      	mov	r5, r1
 8006546:	4620      	mov	r0, r4
 8006548:	4629      	mov	r1, r5
 800654a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08006550 <_strtod_l>:
 8006550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006554:	b09f      	sub	sp, #124	@ 0x7c
 8006556:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006558:	2200      	movs	r2, #0
 800655a:	460c      	mov	r4, r1
 800655c:	921a      	str	r2, [sp, #104]	@ 0x68
 800655e:	f04f 0a00 	mov.w	sl, #0
 8006562:	f04f 0b00 	mov.w	fp, #0
 8006566:	460a      	mov	r2, r1
 8006568:	9005      	str	r0, [sp, #20]
 800656a:	9219      	str	r2, [sp, #100]	@ 0x64
 800656c:	7811      	ldrb	r1, [r2, #0]
 800656e:	292b      	cmp	r1, #43	@ 0x2b
 8006570:	d048      	beq.n	8006604 <_strtod_l+0xb4>
 8006572:	d836      	bhi.n	80065e2 <_strtod_l+0x92>
 8006574:	290d      	cmp	r1, #13
 8006576:	d830      	bhi.n	80065da <_strtod_l+0x8a>
 8006578:	2908      	cmp	r1, #8
 800657a:	d830      	bhi.n	80065de <_strtod_l+0x8e>
 800657c:	2900      	cmp	r1, #0
 800657e:	d039      	beq.n	80065f4 <_strtod_l+0xa4>
 8006580:	2200      	movs	r2, #0
 8006582:	920b      	str	r2, [sp, #44]	@ 0x2c
 8006584:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8006586:	782a      	ldrb	r2, [r5, #0]
 8006588:	2a30      	cmp	r2, #48	@ 0x30
 800658a:	f040 80b1 	bne.w	80066f0 <_strtod_l+0x1a0>
 800658e:	786a      	ldrb	r2, [r5, #1]
 8006590:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006594:	2a58      	cmp	r2, #88	@ 0x58
 8006596:	d16c      	bne.n	8006672 <_strtod_l+0x122>
 8006598:	9302      	str	r3, [sp, #8]
 800659a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800659c:	4a8e      	ldr	r2, [pc, #568]	@ (80067d8 <_strtod_l+0x288>)
 800659e:	9301      	str	r3, [sp, #4]
 80065a0:	ab1a      	add	r3, sp, #104	@ 0x68
 80065a2:	9300      	str	r3, [sp, #0]
 80065a4:	9805      	ldr	r0, [sp, #20]
 80065a6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80065a8:	a919      	add	r1, sp, #100	@ 0x64
 80065aa:	f001 f941 	bl	8007830 <__gethex>
 80065ae:	f010 060f 	ands.w	r6, r0, #15
 80065b2:	4604      	mov	r4, r0
 80065b4:	d005      	beq.n	80065c2 <_strtod_l+0x72>
 80065b6:	2e06      	cmp	r6, #6
 80065b8:	d126      	bne.n	8006608 <_strtod_l+0xb8>
 80065ba:	2300      	movs	r3, #0
 80065bc:	3501      	adds	r5, #1
 80065be:	9519      	str	r5, [sp, #100]	@ 0x64
 80065c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80065c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	f040 8584 	bne.w	80070d2 <_strtod_l+0xb82>
 80065ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80065cc:	b1bb      	cbz	r3, 80065fe <_strtod_l+0xae>
 80065ce:	4650      	mov	r0, sl
 80065d0:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 80065d4:	b01f      	add	sp, #124	@ 0x7c
 80065d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065da:	2920      	cmp	r1, #32
 80065dc:	d1d0      	bne.n	8006580 <_strtod_l+0x30>
 80065de:	3201      	adds	r2, #1
 80065e0:	e7c3      	b.n	800656a <_strtod_l+0x1a>
 80065e2:	292d      	cmp	r1, #45	@ 0x2d
 80065e4:	d1cc      	bne.n	8006580 <_strtod_l+0x30>
 80065e6:	2101      	movs	r1, #1
 80065e8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80065ea:	1c51      	adds	r1, r2, #1
 80065ec:	9119      	str	r1, [sp, #100]	@ 0x64
 80065ee:	7852      	ldrb	r2, [r2, #1]
 80065f0:	2a00      	cmp	r2, #0
 80065f2:	d1c7      	bne.n	8006584 <_strtod_l+0x34>
 80065f4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80065f6:	9419      	str	r4, [sp, #100]	@ 0x64
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	f040 8568 	bne.w	80070ce <_strtod_l+0xb7e>
 80065fe:	4650      	mov	r0, sl
 8006600:	4659      	mov	r1, fp
 8006602:	e7e7      	b.n	80065d4 <_strtod_l+0x84>
 8006604:	2100      	movs	r1, #0
 8006606:	e7ef      	b.n	80065e8 <_strtod_l+0x98>
 8006608:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800660a:	b13a      	cbz	r2, 800661c <_strtod_l+0xcc>
 800660c:	2135      	movs	r1, #53	@ 0x35
 800660e:	a81c      	add	r0, sp, #112	@ 0x70
 8006610:	f002 f902 	bl	8008818 <__copybits>
 8006614:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006616:	9805      	ldr	r0, [sp, #20]
 8006618:	f001 fcdc 	bl	8007fd4 <_Bfree>
 800661c:	3e01      	subs	r6, #1
 800661e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006620:	2e04      	cmp	r6, #4
 8006622:	d806      	bhi.n	8006632 <_strtod_l+0xe2>
 8006624:	e8df f006 	tbb	[pc, r6]
 8006628:	201d0314 	.word	0x201d0314
 800662c:	14          	.byte	0x14
 800662d:	00          	.byte	0x00
 800662e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8006632:	05e1      	lsls	r1, r4, #23
 8006634:	bf48      	it	mi
 8006636:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800663a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800663e:	0d1b      	lsrs	r3, r3, #20
 8006640:	051b      	lsls	r3, r3, #20
 8006642:	2b00      	cmp	r3, #0
 8006644:	d1bd      	bne.n	80065c2 <_strtod_l+0x72>
 8006646:	f000 fff5 	bl	8007634 <__errno>
 800664a:	2322      	movs	r3, #34	@ 0x22
 800664c:	6003      	str	r3, [r0, #0]
 800664e:	e7b8      	b.n	80065c2 <_strtod_l+0x72>
 8006650:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006654:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006658:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800665c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006660:	e7e7      	b.n	8006632 <_strtod_l+0xe2>
 8006662:	f8df b178 	ldr.w	fp, [pc, #376]	@ 80067dc <_strtod_l+0x28c>
 8006666:	e7e4      	b.n	8006632 <_strtod_l+0xe2>
 8006668:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800666c:	f04f 3aff 	mov.w	sl, #4294967295
 8006670:	e7df      	b.n	8006632 <_strtod_l+0xe2>
 8006672:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006674:	1c5a      	adds	r2, r3, #1
 8006676:	9219      	str	r2, [sp, #100]	@ 0x64
 8006678:	785b      	ldrb	r3, [r3, #1]
 800667a:	2b30      	cmp	r3, #48	@ 0x30
 800667c:	d0f9      	beq.n	8006672 <_strtod_l+0x122>
 800667e:	2b00      	cmp	r3, #0
 8006680:	d09f      	beq.n	80065c2 <_strtod_l+0x72>
 8006682:	2301      	movs	r3, #1
 8006684:	9309      	str	r3, [sp, #36]	@ 0x24
 8006686:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006688:	220a      	movs	r2, #10
 800668a:	930c      	str	r3, [sp, #48]	@ 0x30
 800668c:	2300      	movs	r3, #0
 800668e:	461f      	mov	r7, r3
 8006690:	9308      	str	r3, [sp, #32]
 8006692:	930a      	str	r3, [sp, #40]	@ 0x28
 8006694:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006696:	7805      	ldrb	r5, [r0, #0]
 8006698:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800669c:	b2d9      	uxtb	r1, r3
 800669e:	2909      	cmp	r1, #9
 80066a0:	d928      	bls.n	80066f4 <_strtod_l+0x1a4>
 80066a2:	2201      	movs	r2, #1
 80066a4:	494e      	ldr	r1, [pc, #312]	@ (80067e0 <_strtod_l+0x290>)
 80066a6:	f000 ff41 	bl	800752c <strncmp>
 80066aa:	2800      	cmp	r0, #0
 80066ac:	d032      	beq.n	8006714 <_strtod_l+0x1c4>
 80066ae:	2000      	movs	r0, #0
 80066b0:	462a      	mov	r2, r5
 80066b2:	4681      	mov	r9, r0
 80066b4:	463d      	mov	r5, r7
 80066b6:	4603      	mov	r3, r0
 80066b8:	2a65      	cmp	r2, #101	@ 0x65
 80066ba:	d001      	beq.n	80066c0 <_strtod_l+0x170>
 80066bc:	2a45      	cmp	r2, #69	@ 0x45
 80066be:	d114      	bne.n	80066ea <_strtod_l+0x19a>
 80066c0:	b91d      	cbnz	r5, 80066ca <_strtod_l+0x17a>
 80066c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80066c4:	4302      	orrs	r2, r0
 80066c6:	d095      	beq.n	80065f4 <_strtod_l+0xa4>
 80066c8:	2500      	movs	r5, #0
 80066ca:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80066cc:	1c62      	adds	r2, r4, #1
 80066ce:	9219      	str	r2, [sp, #100]	@ 0x64
 80066d0:	7862      	ldrb	r2, [r4, #1]
 80066d2:	2a2b      	cmp	r2, #43	@ 0x2b
 80066d4:	d077      	beq.n	80067c6 <_strtod_l+0x276>
 80066d6:	2a2d      	cmp	r2, #45	@ 0x2d
 80066d8:	d07b      	beq.n	80067d2 <_strtod_l+0x282>
 80066da:	f04f 0c00 	mov.w	ip, #0
 80066de:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80066e2:	2909      	cmp	r1, #9
 80066e4:	f240 8082 	bls.w	80067ec <_strtod_l+0x29c>
 80066e8:	9419      	str	r4, [sp, #100]	@ 0x64
 80066ea:	f04f 0800 	mov.w	r8, #0
 80066ee:	e0a2      	b.n	8006836 <_strtod_l+0x2e6>
 80066f0:	2300      	movs	r3, #0
 80066f2:	e7c7      	b.n	8006684 <_strtod_l+0x134>
 80066f4:	2f08      	cmp	r7, #8
 80066f6:	bfd5      	itete	le
 80066f8:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80066fa:	9908      	ldrgt	r1, [sp, #32]
 80066fc:	fb02 3301 	mlale	r3, r2, r1, r3
 8006700:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006704:	f100 0001 	add.w	r0, r0, #1
 8006708:	bfd4      	ite	le
 800670a:	930a      	strle	r3, [sp, #40]	@ 0x28
 800670c:	9308      	strgt	r3, [sp, #32]
 800670e:	3701      	adds	r7, #1
 8006710:	9019      	str	r0, [sp, #100]	@ 0x64
 8006712:	e7bf      	b.n	8006694 <_strtod_l+0x144>
 8006714:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006716:	1c5a      	adds	r2, r3, #1
 8006718:	9219      	str	r2, [sp, #100]	@ 0x64
 800671a:	785a      	ldrb	r2, [r3, #1]
 800671c:	b37f      	cbz	r7, 800677e <_strtod_l+0x22e>
 800671e:	4681      	mov	r9, r0
 8006720:	463d      	mov	r5, r7
 8006722:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006726:	2b09      	cmp	r3, #9
 8006728:	d912      	bls.n	8006750 <_strtod_l+0x200>
 800672a:	2301      	movs	r3, #1
 800672c:	e7c4      	b.n	80066b8 <_strtod_l+0x168>
 800672e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006730:	3001      	adds	r0, #1
 8006732:	1c5a      	adds	r2, r3, #1
 8006734:	9219      	str	r2, [sp, #100]	@ 0x64
 8006736:	785a      	ldrb	r2, [r3, #1]
 8006738:	2a30      	cmp	r2, #48	@ 0x30
 800673a:	d0f8      	beq.n	800672e <_strtod_l+0x1de>
 800673c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006740:	2b08      	cmp	r3, #8
 8006742:	f200 84cb 	bhi.w	80070dc <_strtod_l+0xb8c>
 8006746:	4681      	mov	r9, r0
 8006748:	2000      	movs	r0, #0
 800674a:	4605      	mov	r5, r0
 800674c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800674e:	930c      	str	r3, [sp, #48]	@ 0x30
 8006750:	3a30      	subs	r2, #48	@ 0x30
 8006752:	f100 0301 	add.w	r3, r0, #1
 8006756:	d02a      	beq.n	80067ae <_strtod_l+0x25e>
 8006758:	4499      	add	r9, r3
 800675a:	210a      	movs	r1, #10
 800675c:	462b      	mov	r3, r5
 800675e:	eb00 0c05 	add.w	ip, r0, r5
 8006762:	4563      	cmp	r3, ip
 8006764:	d10d      	bne.n	8006782 <_strtod_l+0x232>
 8006766:	1c69      	adds	r1, r5, #1
 8006768:	4401      	add	r1, r0
 800676a:	4428      	add	r0, r5
 800676c:	2808      	cmp	r0, #8
 800676e:	dc16      	bgt.n	800679e <_strtod_l+0x24e>
 8006770:	230a      	movs	r3, #10
 8006772:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006774:	fb03 2300 	mla	r3, r3, r0, r2
 8006778:	930a      	str	r3, [sp, #40]	@ 0x28
 800677a:	2300      	movs	r3, #0
 800677c:	e018      	b.n	80067b0 <_strtod_l+0x260>
 800677e:	4638      	mov	r0, r7
 8006780:	e7da      	b.n	8006738 <_strtod_l+0x1e8>
 8006782:	2b08      	cmp	r3, #8
 8006784:	f103 0301 	add.w	r3, r3, #1
 8006788:	dc03      	bgt.n	8006792 <_strtod_l+0x242>
 800678a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800678c:	434e      	muls	r6, r1
 800678e:	960a      	str	r6, [sp, #40]	@ 0x28
 8006790:	e7e7      	b.n	8006762 <_strtod_l+0x212>
 8006792:	2b10      	cmp	r3, #16
 8006794:	bfde      	ittt	le
 8006796:	9e08      	ldrle	r6, [sp, #32]
 8006798:	434e      	mulle	r6, r1
 800679a:	9608      	strle	r6, [sp, #32]
 800679c:	e7e1      	b.n	8006762 <_strtod_l+0x212>
 800679e:	280f      	cmp	r0, #15
 80067a0:	dceb      	bgt.n	800677a <_strtod_l+0x22a>
 80067a2:	230a      	movs	r3, #10
 80067a4:	9808      	ldr	r0, [sp, #32]
 80067a6:	fb03 2300 	mla	r3, r3, r0, r2
 80067aa:	9308      	str	r3, [sp, #32]
 80067ac:	e7e5      	b.n	800677a <_strtod_l+0x22a>
 80067ae:	4629      	mov	r1, r5
 80067b0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80067b2:	460d      	mov	r5, r1
 80067b4:	1c50      	adds	r0, r2, #1
 80067b6:	9019      	str	r0, [sp, #100]	@ 0x64
 80067b8:	7852      	ldrb	r2, [r2, #1]
 80067ba:	4618      	mov	r0, r3
 80067bc:	e7b1      	b.n	8006722 <_strtod_l+0x1d2>
 80067be:	f04f 0900 	mov.w	r9, #0
 80067c2:	2301      	movs	r3, #1
 80067c4:	e77d      	b.n	80066c2 <_strtod_l+0x172>
 80067c6:	f04f 0c00 	mov.w	ip, #0
 80067ca:	1ca2      	adds	r2, r4, #2
 80067cc:	9219      	str	r2, [sp, #100]	@ 0x64
 80067ce:	78a2      	ldrb	r2, [r4, #2]
 80067d0:	e785      	b.n	80066de <_strtod_l+0x18e>
 80067d2:	f04f 0c01 	mov.w	ip, #1
 80067d6:	e7f8      	b.n	80067ca <_strtod_l+0x27a>
 80067d8:	080098e0 	.word	0x080098e0
 80067dc:	7ff00000 	.word	0x7ff00000
 80067e0:	080098be 	.word	0x080098be
 80067e4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80067e6:	1c51      	adds	r1, r2, #1
 80067e8:	9119      	str	r1, [sp, #100]	@ 0x64
 80067ea:	7852      	ldrb	r2, [r2, #1]
 80067ec:	2a30      	cmp	r2, #48	@ 0x30
 80067ee:	d0f9      	beq.n	80067e4 <_strtod_l+0x294>
 80067f0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80067f4:	2908      	cmp	r1, #8
 80067f6:	f63f af78 	bhi.w	80066ea <_strtod_l+0x19a>
 80067fa:	f04f 080a 	mov.w	r8, #10
 80067fe:	3a30      	subs	r2, #48	@ 0x30
 8006800:	920e      	str	r2, [sp, #56]	@ 0x38
 8006802:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006804:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006806:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006808:	1c56      	adds	r6, r2, #1
 800680a:	9619      	str	r6, [sp, #100]	@ 0x64
 800680c:	7852      	ldrb	r2, [r2, #1]
 800680e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006812:	f1be 0f09 	cmp.w	lr, #9
 8006816:	d939      	bls.n	800688c <_strtod_l+0x33c>
 8006818:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800681a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800681e:	1a76      	subs	r6, r6, r1
 8006820:	2e08      	cmp	r6, #8
 8006822:	dc03      	bgt.n	800682c <_strtod_l+0x2dc>
 8006824:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006826:	4588      	cmp	r8, r1
 8006828:	bfa8      	it	ge
 800682a:	4688      	movge	r8, r1
 800682c:	f1bc 0f00 	cmp.w	ip, #0
 8006830:	d001      	beq.n	8006836 <_strtod_l+0x2e6>
 8006832:	f1c8 0800 	rsb	r8, r8, #0
 8006836:	2d00      	cmp	r5, #0
 8006838:	d14e      	bne.n	80068d8 <_strtod_l+0x388>
 800683a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800683c:	4308      	orrs	r0, r1
 800683e:	f47f aec0 	bne.w	80065c2 <_strtod_l+0x72>
 8006842:	2b00      	cmp	r3, #0
 8006844:	f47f aed6 	bne.w	80065f4 <_strtod_l+0xa4>
 8006848:	2a69      	cmp	r2, #105	@ 0x69
 800684a:	d028      	beq.n	800689e <_strtod_l+0x34e>
 800684c:	dc25      	bgt.n	800689a <_strtod_l+0x34a>
 800684e:	2a49      	cmp	r2, #73	@ 0x49
 8006850:	d025      	beq.n	800689e <_strtod_l+0x34e>
 8006852:	2a4e      	cmp	r2, #78	@ 0x4e
 8006854:	f47f aece 	bne.w	80065f4 <_strtod_l+0xa4>
 8006858:	499a      	ldr	r1, [pc, #616]	@ (8006ac4 <_strtod_l+0x574>)
 800685a:	a819      	add	r0, sp, #100	@ 0x64
 800685c:	f001 fa0a 	bl	8007c74 <__match>
 8006860:	2800      	cmp	r0, #0
 8006862:	f43f aec7 	beq.w	80065f4 <_strtod_l+0xa4>
 8006866:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	2b28      	cmp	r3, #40	@ 0x28
 800686c:	d12e      	bne.n	80068cc <_strtod_l+0x37c>
 800686e:	4996      	ldr	r1, [pc, #600]	@ (8006ac8 <_strtod_l+0x578>)
 8006870:	aa1c      	add	r2, sp, #112	@ 0x70
 8006872:	a819      	add	r0, sp, #100	@ 0x64
 8006874:	f001 fa12 	bl	8007c9c <__hexnan>
 8006878:	2805      	cmp	r0, #5
 800687a:	d127      	bne.n	80068cc <_strtod_l+0x37c>
 800687c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800687e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8006882:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8006886:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800688a:	e69a      	b.n	80065c2 <_strtod_l+0x72>
 800688c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800688e:	fb08 2101 	mla	r1, r8, r1, r2
 8006892:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8006896:	920e      	str	r2, [sp, #56]	@ 0x38
 8006898:	e7b5      	b.n	8006806 <_strtod_l+0x2b6>
 800689a:	2a6e      	cmp	r2, #110	@ 0x6e
 800689c:	e7da      	b.n	8006854 <_strtod_l+0x304>
 800689e:	498b      	ldr	r1, [pc, #556]	@ (8006acc <_strtod_l+0x57c>)
 80068a0:	a819      	add	r0, sp, #100	@ 0x64
 80068a2:	f001 f9e7 	bl	8007c74 <__match>
 80068a6:	2800      	cmp	r0, #0
 80068a8:	f43f aea4 	beq.w	80065f4 <_strtod_l+0xa4>
 80068ac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80068ae:	4988      	ldr	r1, [pc, #544]	@ (8006ad0 <_strtod_l+0x580>)
 80068b0:	3b01      	subs	r3, #1
 80068b2:	a819      	add	r0, sp, #100	@ 0x64
 80068b4:	9319      	str	r3, [sp, #100]	@ 0x64
 80068b6:	f001 f9dd 	bl	8007c74 <__match>
 80068ba:	b910      	cbnz	r0, 80068c2 <_strtod_l+0x372>
 80068bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80068be:	3301      	adds	r3, #1
 80068c0:	9319      	str	r3, [sp, #100]	@ 0x64
 80068c2:	f04f 0a00 	mov.w	sl, #0
 80068c6:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8006ad4 <_strtod_l+0x584>
 80068ca:	e67a      	b.n	80065c2 <_strtod_l+0x72>
 80068cc:	4882      	ldr	r0, [pc, #520]	@ (8006ad8 <_strtod_l+0x588>)
 80068ce:	f000 fef5 	bl	80076bc <nan>
 80068d2:	4682      	mov	sl, r0
 80068d4:	468b      	mov	fp, r1
 80068d6:	e674      	b.n	80065c2 <_strtod_l+0x72>
 80068d8:	eba8 0309 	sub.w	r3, r8, r9
 80068dc:	2f00      	cmp	r7, #0
 80068de:	bf08      	it	eq
 80068e0:	462f      	moveq	r7, r5
 80068e2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80068e4:	2d10      	cmp	r5, #16
 80068e6:	462c      	mov	r4, r5
 80068e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80068ea:	bfa8      	it	ge
 80068ec:	2410      	movge	r4, #16
 80068ee:	f7f9 fd7b 	bl	80003e8 <__aeabi_ui2d>
 80068f2:	2d09      	cmp	r5, #9
 80068f4:	4682      	mov	sl, r0
 80068f6:	468b      	mov	fp, r1
 80068f8:	dc11      	bgt.n	800691e <_strtod_l+0x3ce>
 80068fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	f43f ae60 	beq.w	80065c2 <_strtod_l+0x72>
 8006902:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006904:	dd76      	ble.n	80069f4 <_strtod_l+0x4a4>
 8006906:	2b16      	cmp	r3, #22
 8006908:	dc5d      	bgt.n	80069c6 <_strtod_l+0x476>
 800690a:	4974      	ldr	r1, [pc, #464]	@ (8006adc <_strtod_l+0x58c>)
 800690c:	4652      	mov	r2, sl
 800690e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006912:	465b      	mov	r3, fp
 8006914:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006918:	f7f9 fde0 	bl	80004dc <__aeabi_dmul>
 800691c:	e7d9      	b.n	80068d2 <_strtod_l+0x382>
 800691e:	4b6f      	ldr	r3, [pc, #444]	@ (8006adc <_strtod_l+0x58c>)
 8006920:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006924:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006928:	f7f9 fdd8 	bl	80004dc <__aeabi_dmul>
 800692c:	4682      	mov	sl, r0
 800692e:	9808      	ldr	r0, [sp, #32]
 8006930:	468b      	mov	fp, r1
 8006932:	f7f9 fd59 	bl	80003e8 <__aeabi_ui2d>
 8006936:	4602      	mov	r2, r0
 8006938:	460b      	mov	r3, r1
 800693a:	4650      	mov	r0, sl
 800693c:	4659      	mov	r1, fp
 800693e:	f7f9 fc17 	bl	8000170 <__adddf3>
 8006942:	2d0f      	cmp	r5, #15
 8006944:	4682      	mov	sl, r0
 8006946:	468b      	mov	fp, r1
 8006948:	ddd7      	ble.n	80068fa <_strtod_l+0x3aa>
 800694a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800694c:	1b2c      	subs	r4, r5, r4
 800694e:	441c      	add	r4, r3
 8006950:	2c00      	cmp	r4, #0
 8006952:	f340 8096 	ble.w	8006a82 <_strtod_l+0x532>
 8006956:	f014 030f 	ands.w	r3, r4, #15
 800695a:	d00a      	beq.n	8006972 <_strtod_l+0x422>
 800695c:	495f      	ldr	r1, [pc, #380]	@ (8006adc <_strtod_l+0x58c>)
 800695e:	4652      	mov	r2, sl
 8006960:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006964:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006968:	465b      	mov	r3, fp
 800696a:	f7f9 fdb7 	bl	80004dc <__aeabi_dmul>
 800696e:	4682      	mov	sl, r0
 8006970:	468b      	mov	fp, r1
 8006972:	f034 040f 	bics.w	r4, r4, #15
 8006976:	d073      	beq.n	8006a60 <_strtod_l+0x510>
 8006978:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800697c:	dd48      	ble.n	8006a10 <_strtod_l+0x4c0>
 800697e:	2400      	movs	r4, #0
 8006980:	46a0      	mov	r8, r4
 8006982:	46a1      	mov	r9, r4
 8006984:	940a      	str	r4, [sp, #40]	@ 0x28
 8006986:	2322      	movs	r3, #34	@ 0x22
 8006988:	f04f 0a00 	mov.w	sl, #0
 800698c:	9a05      	ldr	r2, [sp, #20]
 800698e:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8006ad4 <_strtod_l+0x584>
 8006992:	6013      	str	r3, [r2, #0]
 8006994:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006996:	2b00      	cmp	r3, #0
 8006998:	f43f ae13 	beq.w	80065c2 <_strtod_l+0x72>
 800699c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800699e:	9805      	ldr	r0, [sp, #20]
 80069a0:	f001 fb18 	bl	8007fd4 <_Bfree>
 80069a4:	4649      	mov	r1, r9
 80069a6:	9805      	ldr	r0, [sp, #20]
 80069a8:	f001 fb14 	bl	8007fd4 <_Bfree>
 80069ac:	4641      	mov	r1, r8
 80069ae:	9805      	ldr	r0, [sp, #20]
 80069b0:	f001 fb10 	bl	8007fd4 <_Bfree>
 80069b4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80069b6:	9805      	ldr	r0, [sp, #20]
 80069b8:	f001 fb0c 	bl	8007fd4 <_Bfree>
 80069bc:	4621      	mov	r1, r4
 80069be:	9805      	ldr	r0, [sp, #20]
 80069c0:	f001 fb08 	bl	8007fd4 <_Bfree>
 80069c4:	e5fd      	b.n	80065c2 <_strtod_l+0x72>
 80069c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80069c8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80069cc:	4293      	cmp	r3, r2
 80069ce:	dbbc      	blt.n	800694a <_strtod_l+0x3fa>
 80069d0:	4c42      	ldr	r4, [pc, #264]	@ (8006adc <_strtod_l+0x58c>)
 80069d2:	f1c5 050f 	rsb	r5, r5, #15
 80069d6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80069da:	4652      	mov	r2, sl
 80069dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069e0:	465b      	mov	r3, fp
 80069e2:	f7f9 fd7b 	bl	80004dc <__aeabi_dmul>
 80069e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069e8:	1b5d      	subs	r5, r3, r5
 80069ea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80069ee:	e9d4 2300 	ldrd	r2, r3, [r4]
 80069f2:	e791      	b.n	8006918 <_strtod_l+0x3c8>
 80069f4:	3316      	adds	r3, #22
 80069f6:	dba8      	blt.n	800694a <_strtod_l+0x3fa>
 80069f8:	4b38      	ldr	r3, [pc, #224]	@ (8006adc <_strtod_l+0x58c>)
 80069fa:	eba9 0808 	sub.w	r8, r9, r8
 80069fe:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8006a02:	4650      	mov	r0, sl
 8006a04:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006a08:	4659      	mov	r1, fp
 8006a0a:	f7f9 fe91 	bl	8000730 <__aeabi_ddiv>
 8006a0e:	e760      	b.n	80068d2 <_strtod_l+0x382>
 8006a10:	4b33      	ldr	r3, [pc, #204]	@ (8006ae0 <_strtod_l+0x590>)
 8006a12:	4650      	mov	r0, sl
 8006a14:	9308      	str	r3, [sp, #32]
 8006a16:	2300      	movs	r3, #0
 8006a18:	4659      	mov	r1, fp
 8006a1a:	461e      	mov	r6, r3
 8006a1c:	1124      	asrs	r4, r4, #4
 8006a1e:	2c01      	cmp	r4, #1
 8006a20:	dc21      	bgt.n	8006a66 <_strtod_l+0x516>
 8006a22:	b10b      	cbz	r3, 8006a28 <_strtod_l+0x4d8>
 8006a24:	4682      	mov	sl, r0
 8006a26:	468b      	mov	fp, r1
 8006a28:	492d      	ldr	r1, [pc, #180]	@ (8006ae0 <_strtod_l+0x590>)
 8006a2a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8006a2e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8006a32:	4652      	mov	r2, sl
 8006a34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a38:	465b      	mov	r3, fp
 8006a3a:	f7f9 fd4f 	bl	80004dc <__aeabi_dmul>
 8006a3e:	4b25      	ldr	r3, [pc, #148]	@ (8006ad4 <_strtod_l+0x584>)
 8006a40:	460a      	mov	r2, r1
 8006a42:	400b      	ands	r3, r1
 8006a44:	4927      	ldr	r1, [pc, #156]	@ (8006ae4 <_strtod_l+0x594>)
 8006a46:	4682      	mov	sl, r0
 8006a48:	428b      	cmp	r3, r1
 8006a4a:	d898      	bhi.n	800697e <_strtod_l+0x42e>
 8006a4c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006a50:	428b      	cmp	r3, r1
 8006a52:	bf86      	itte	hi
 8006a54:	f04f 3aff 	movhi.w	sl, #4294967295
 8006a58:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8006ae8 <_strtod_l+0x598>
 8006a5c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006a60:	2300      	movs	r3, #0
 8006a62:	9308      	str	r3, [sp, #32]
 8006a64:	e07a      	b.n	8006b5c <_strtod_l+0x60c>
 8006a66:	07e2      	lsls	r2, r4, #31
 8006a68:	d505      	bpl.n	8006a76 <_strtod_l+0x526>
 8006a6a:	9b08      	ldr	r3, [sp, #32]
 8006a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a70:	f7f9 fd34 	bl	80004dc <__aeabi_dmul>
 8006a74:	2301      	movs	r3, #1
 8006a76:	9a08      	ldr	r2, [sp, #32]
 8006a78:	3601      	adds	r6, #1
 8006a7a:	3208      	adds	r2, #8
 8006a7c:	1064      	asrs	r4, r4, #1
 8006a7e:	9208      	str	r2, [sp, #32]
 8006a80:	e7cd      	b.n	8006a1e <_strtod_l+0x4ce>
 8006a82:	d0ed      	beq.n	8006a60 <_strtod_l+0x510>
 8006a84:	4264      	negs	r4, r4
 8006a86:	f014 020f 	ands.w	r2, r4, #15
 8006a8a:	d00a      	beq.n	8006aa2 <_strtod_l+0x552>
 8006a8c:	4b13      	ldr	r3, [pc, #76]	@ (8006adc <_strtod_l+0x58c>)
 8006a8e:	4650      	mov	r0, sl
 8006a90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a94:	4659      	mov	r1, fp
 8006a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a9a:	f7f9 fe49 	bl	8000730 <__aeabi_ddiv>
 8006a9e:	4682      	mov	sl, r0
 8006aa0:	468b      	mov	fp, r1
 8006aa2:	1124      	asrs	r4, r4, #4
 8006aa4:	d0dc      	beq.n	8006a60 <_strtod_l+0x510>
 8006aa6:	2c1f      	cmp	r4, #31
 8006aa8:	dd20      	ble.n	8006aec <_strtod_l+0x59c>
 8006aaa:	2400      	movs	r4, #0
 8006aac:	46a0      	mov	r8, r4
 8006aae:	46a1      	mov	r9, r4
 8006ab0:	940a      	str	r4, [sp, #40]	@ 0x28
 8006ab2:	2322      	movs	r3, #34	@ 0x22
 8006ab4:	9a05      	ldr	r2, [sp, #20]
 8006ab6:	f04f 0a00 	mov.w	sl, #0
 8006aba:	f04f 0b00 	mov.w	fp, #0
 8006abe:	6013      	str	r3, [r2, #0]
 8006ac0:	e768      	b.n	8006994 <_strtod_l+0x444>
 8006ac2:	bf00      	nop
 8006ac4:	080098c9 	.word	0x080098c9
 8006ac8:	080098cc 	.word	0x080098cc
 8006acc:	080098c0 	.word	0x080098c0
 8006ad0:	080098c3 	.word	0x080098c3
 8006ad4:	7ff00000 	.word	0x7ff00000
 8006ad8:	08009c76 	.word	0x08009c76
 8006adc:	08009b40 	.word	0x08009b40
 8006ae0:	08009b18 	.word	0x08009b18
 8006ae4:	7ca00000 	.word	0x7ca00000
 8006ae8:	7fefffff 	.word	0x7fefffff
 8006aec:	f014 0310 	ands.w	r3, r4, #16
 8006af0:	bf18      	it	ne
 8006af2:	236a      	movne	r3, #106	@ 0x6a
 8006af4:	4650      	mov	r0, sl
 8006af6:	9308      	str	r3, [sp, #32]
 8006af8:	4659      	mov	r1, fp
 8006afa:	2300      	movs	r3, #0
 8006afc:	4ea9      	ldr	r6, [pc, #676]	@ (8006da4 <_strtod_l+0x854>)
 8006afe:	07e2      	lsls	r2, r4, #31
 8006b00:	d504      	bpl.n	8006b0c <_strtod_l+0x5bc>
 8006b02:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006b06:	f7f9 fce9 	bl	80004dc <__aeabi_dmul>
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	1064      	asrs	r4, r4, #1
 8006b0e:	f106 0608 	add.w	r6, r6, #8
 8006b12:	d1f4      	bne.n	8006afe <_strtod_l+0x5ae>
 8006b14:	b10b      	cbz	r3, 8006b1a <_strtod_l+0x5ca>
 8006b16:	4682      	mov	sl, r0
 8006b18:	468b      	mov	fp, r1
 8006b1a:	9b08      	ldr	r3, [sp, #32]
 8006b1c:	b1b3      	cbz	r3, 8006b4c <_strtod_l+0x5fc>
 8006b1e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006b22:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	4659      	mov	r1, fp
 8006b2a:	dd0f      	ble.n	8006b4c <_strtod_l+0x5fc>
 8006b2c:	2b1f      	cmp	r3, #31
 8006b2e:	dd57      	ble.n	8006be0 <_strtod_l+0x690>
 8006b30:	2b34      	cmp	r3, #52	@ 0x34
 8006b32:	bfd8      	it	le
 8006b34:	f04f 33ff 	movle.w	r3, #4294967295
 8006b38:	f04f 0a00 	mov.w	sl, #0
 8006b3c:	bfcf      	iteee	gt
 8006b3e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006b42:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8006b46:	4093      	lslle	r3, r2
 8006b48:	ea03 0b01 	andle.w	fp, r3, r1
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	2300      	movs	r3, #0
 8006b50:	4650      	mov	r0, sl
 8006b52:	4659      	mov	r1, fp
 8006b54:	f7f9 ff2a 	bl	80009ac <__aeabi_dcmpeq>
 8006b58:	2800      	cmp	r0, #0
 8006b5a:	d1a6      	bne.n	8006aaa <_strtod_l+0x55a>
 8006b5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b5e:	463a      	mov	r2, r7
 8006b60:	9300      	str	r3, [sp, #0]
 8006b62:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006b64:	462b      	mov	r3, r5
 8006b66:	9805      	ldr	r0, [sp, #20]
 8006b68:	f001 fa9c 	bl	80080a4 <__s2b>
 8006b6c:	900a      	str	r0, [sp, #40]	@ 0x28
 8006b6e:	2800      	cmp	r0, #0
 8006b70:	f43f af05 	beq.w	800697e <_strtod_l+0x42e>
 8006b74:	2400      	movs	r4, #0
 8006b76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b78:	eba9 0308 	sub.w	r3, r9, r8
 8006b7c:	2a00      	cmp	r2, #0
 8006b7e:	bfa8      	it	ge
 8006b80:	2300      	movge	r3, #0
 8006b82:	46a0      	mov	r8, r4
 8006b84:	9312      	str	r3, [sp, #72]	@ 0x48
 8006b86:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006b8a:	9316      	str	r3, [sp, #88]	@ 0x58
 8006b8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b8e:	9805      	ldr	r0, [sp, #20]
 8006b90:	6859      	ldr	r1, [r3, #4]
 8006b92:	f001 f9df 	bl	8007f54 <_Balloc>
 8006b96:	4681      	mov	r9, r0
 8006b98:	2800      	cmp	r0, #0
 8006b9a:	f43f aef4 	beq.w	8006986 <_strtod_l+0x436>
 8006b9e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ba0:	300c      	adds	r0, #12
 8006ba2:	691a      	ldr	r2, [r3, #16]
 8006ba4:	f103 010c 	add.w	r1, r3, #12
 8006ba8:	3202      	adds	r2, #2
 8006baa:	0092      	lsls	r2, r2, #2
 8006bac:	f000 fd77 	bl	800769e <memcpy>
 8006bb0:	ab1c      	add	r3, sp, #112	@ 0x70
 8006bb2:	9301      	str	r3, [sp, #4]
 8006bb4:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006bb6:	9300      	str	r3, [sp, #0]
 8006bb8:	4652      	mov	r2, sl
 8006bba:	465b      	mov	r3, fp
 8006bbc:	9805      	ldr	r0, [sp, #20]
 8006bbe:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006bc2:	f001 fda1 	bl	8008708 <__d2b>
 8006bc6:	901a      	str	r0, [sp, #104]	@ 0x68
 8006bc8:	2800      	cmp	r0, #0
 8006bca:	f43f aedc 	beq.w	8006986 <_strtod_l+0x436>
 8006bce:	2101      	movs	r1, #1
 8006bd0:	9805      	ldr	r0, [sp, #20]
 8006bd2:	f001 fafd 	bl	80081d0 <__i2b>
 8006bd6:	4680      	mov	r8, r0
 8006bd8:	b948      	cbnz	r0, 8006bee <_strtod_l+0x69e>
 8006bda:	f04f 0800 	mov.w	r8, #0
 8006bde:	e6d2      	b.n	8006986 <_strtod_l+0x436>
 8006be0:	f04f 32ff 	mov.w	r2, #4294967295
 8006be4:	fa02 f303 	lsl.w	r3, r2, r3
 8006be8:	ea03 0a0a 	and.w	sl, r3, sl
 8006bec:	e7ae      	b.n	8006b4c <_strtod_l+0x5fc>
 8006bee:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006bf0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006bf2:	2d00      	cmp	r5, #0
 8006bf4:	bfab      	itete	ge
 8006bf6:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006bf8:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8006bfa:	18ef      	addge	r7, r5, r3
 8006bfc:	1b5e      	sublt	r6, r3, r5
 8006bfe:	9b08      	ldr	r3, [sp, #32]
 8006c00:	bfa8      	it	ge
 8006c02:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006c04:	eba5 0503 	sub.w	r5, r5, r3
 8006c08:	4415      	add	r5, r2
 8006c0a:	4b67      	ldr	r3, [pc, #412]	@ (8006da8 <_strtod_l+0x858>)
 8006c0c:	f105 35ff 	add.w	r5, r5, #4294967295
 8006c10:	bfb8      	it	lt
 8006c12:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8006c14:	429d      	cmp	r5, r3
 8006c16:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006c1a:	da50      	bge.n	8006cbe <_strtod_l+0x76e>
 8006c1c:	1b5b      	subs	r3, r3, r5
 8006c1e:	2b1f      	cmp	r3, #31
 8006c20:	f04f 0101 	mov.w	r1, #1
 8006c24:	eba2 0203 	sub.w	r2, r2, r3
 8006c28:	dc3d      	bgt.n	8006ca6 <_strtod_l+0x756>
 8006c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8006c2e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006c30:	2300      	movs	r3, #0
 8006c32:	9310      	str	r3, [sp, #64]	@ 0x40
 8006c34:	18bd      	adds	r5, r7, r2
 8006c36:	9b08      	ldr	r3, [sp, #32]
 8006c38:	42af      	cmp	r7, r5
 8006c3a:	4416      	add	r6, r2
 8006c3c:	441e      	add	r6, r3
 8006c3e:	463b      	mov	r3, r7
 8006c40:	bfa8      	it	ge
 8006c42:	462b      	movge	r3, r5
 8006c44:	42b3      	cmp	r3, r6
 8006c46:	bfa8      	it	ge
 8006c48:	4633      	movge	r3, r6
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	bfc2      	ittt	gt
 8006c4e:	1aed      	subgt	r5, r5, r3
 8006c50:	1af6      	subgt	r6, r6, r3
 8006c52:	1aff      	subgt	r7, r7, r3
 8006c54:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	dd16      	ble.n	8006c88 <_strtod_l+0x738>
 8006c5a:	4641      	mov	r1, r8
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	9805      	ldr	r0, [sp, #20]
 8006c60:	f001 fb74 	bl	800834c <__pow5mult>
 8006c64:	4680      	mov	r8, r0
 8006c66:	2800      	cmp	r0, #0
 8006c68:	d0b7      	beq.n	8006bda <_strtod_l+0x68a>
 8006c6a:	4601      	mov	r1, r0
 8006c6c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006c6e:	9805      	ldr	r0, [sp, #20]
 8006c70:	f001 fac4 	bl	80081fc <__multiply>
 8006c74:	900e      	str	r0, [sp, #56]	@ 0x38
 8006c76:	2800      	cmp	r0, #0
 8006c78:	f43f ae85 	beq.w	8006986 <_strtod_l+0x436>
 8006c7c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006c7e:	9805      	ldr	r0, [sp, #20]
 8006c80:	f001 f9a8 	bl	8007fd4 <_Bfree>
 8006c84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c86:	931a      	str	r3, [sp, #104]	@ 0x68
 8006c88:	2d00      	cmp	r5, #0
 8006c8a:	dc1d      	bgt.n	8006cc8 <_strtod_l+0x778>
 8006c8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	dd23      	ble.n	8006cda <_strtod_l+0x78a>
 8006c92:	4649      	mov	r1, r9
 8006c94:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006c96:	9805      	ldr	r0, [sp, #20]
 8006c98:	f001 fb58 	bl	800834c <__pow5mult>
 8006c9c:	4681      	mov	r9, r0
 8006c9e:	b9e0      	cbnz	r0, 8006cda <_strtod_l+0x78a>
 8006ca0:	f04f 0900 	mov.w	r9, #0
 8006ca4:	e66f      	b.n	8006986 <_strtod_l+0x436>
 8006ca6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006caa:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8006cae:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006cb2:	35e2      	adds	r5, #226	@ 0xe2
 8006cb4:	fa01 f305 	lsl.w	r3, r1, r5
 8006cb8:	9310      	str	r3, [sp, #64]	@ 0x40
 8006cba:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006cbc:	e7ba      	b.n	8006c34 <_strtod_l+0x6e4>
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	9310      	str	r3, [sp, #64]	@ 0x40
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006cc6:	e7b5      	b.n	8006c34 <_strtod_l+0x6e4>
 8006cc8:	462a      	mov	r2, r5
 8006cca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006ccc:	9805      	ldr	r0, [sp, #20]
 8006cce:	f001 fb97 	bl	8008400 <__lshift>
 8006cd2:	901a      	str	r0, [sp, #104]	@ 0x68
 8006cd4:	2800      	cmp	r0, #0
 8006cd6:	d1d9      	bne.n	8006c8c <_strtod_l+0x73c>
 8006cd8:	e655      	b.n	8006986 <_strtod_l+0x436>
 8006cda:	2e00      	cmp	r6, #0
 8006cdc:	dd07      	ble.n	8006cee <_strtod_l+0x79e>
 8006cde:	4649      	mov	r1, r9
 8006ce0:	4632      	mov	r2, r6
 8006ce2:	9805      	ldr	r0, [sp, #20]
 8006ce4:	f001 fb8c 	bl	8008400 <__lshift>
 8006ce8:	4681      	mov	r9, r0
 8006cea:	2800      	cmp	r0, #0
 8006cec:	d0d8      	beq.n	8006ca0 <_strtod_l+0x750>
 8006cee:	2f00      	cmp	r7, #0
 8006cf0:	dd08      	ble.n	8006d04 <_strtod_l+0x7b4>
 8006cf2:	4641      	mov	r1, r8
 8006cf4:	463a      	mov	r2, r7
 8006cf6:	9805      	ldr	r0, [sp, #20]
 8006cf8:	f001 fb82 	bl	8008400 <__lshift>
 8006cfc:	4680      	mov	r8, r0
 8006cfe:	2800      	cmp	r0, #0
 8006d00:	f43f ae41 	beq.w	8006986 <_strtod_l+0x436>
 8006d04:	464a      	mov	r2, r9
 8006d06:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006d08:	9805      	ldr	r0, [sp, #20]
 8006d0a:	f001 fc01 	bl	8008510 <__mdiff>
 8006d0e:	4604      	mov	r4, r0
 8006d10:	2800      	cmp	r0, #0
 8006d12:	f43f ae38 	beq.w	8006986 <_strtod_l+0x436>
 8006d16:	68c3      	ldr	r3, [r0, #12]
 8006d18:	4641      	mov	r1, r8
 8006d1a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	60c3      	str	r3, [r0, #12]
 8006d20:	f001 fbda 	bl	80084d8 <__mcmp>
 8006d24:	2800      	cmp	r0, #0
 8006d26:	da45      	bge.n	8006db4 <_strtod_l+0x864>
 8006d28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006d2a:	ea53 030a 	orrs.w	r3, r3, sl
 8006d2e:	d16b      	bne.n	8006e08 <_strtod_l+0x8b8>
 8006d30:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d167      	bne.n	8006e08 <_strtod_l+0x8b8>
 8006d38:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006d3c:	0d1b      	lsrs	r3, r3, #20
 8006d3e:	051b      	lsls	r3, r3, #20
 8006d40:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006d44:	d960      	bls.n	8006e08 <_strtod_l+0x8b8>
 8006d46:	6963      	ldr	r3, [r4, #20]
 8006d48:	b913      	cbnz	r3, 8006d50 <_strtod_l+0x800>
 8006d4a:	6923      	ldr	r3, [r4, #16]
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	dd5b      	ble.n	8006e08 <_strtod_l+0x8b8>
 8006d50:	4621      	mov	r1, r4
 8006d52:	2201      	movs	r2, #1
 8006d54:	9805      	ldr	r0, [sp, #20]
 8006d56:	f001 fb53 	bl	8008400 <__lshift>
 8006d5a:	4641      	mov	r1, r8
 8006d5c:	4604      	mov	r4, r0
 8006d5e:	f001 fbbb 	bl	80084d8 <__mcmp>
 8006d62:	2800      	cmp	r0, #0
 8006d64:	dd50      	ble.n	8006e08 <_strtod_l+0x8b8>
 8006d66:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006d6a:	9a08      	ldr	r2, [sp, #32]
 8006d6c:	0d1b      	lsrs	r3, r3, #20
 8006d6e:	051b      	lsls	r3, r3, #20
 8006d70:	2a00      	cmp	r2, #0
 8006d72:	d06a      	beq.n	8006e4a <_strtod_l+0x8fa>
 8006d74:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006d78:	d867      	bhi.n	8006e4a <_strtod_l+0x8fa>
 8006d7a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8006d7e:	f67f ae98 	bls.w	8006ab2 <_strtod_l+0x562>
 8006d82:	4650      	mov	r0, sl
 8006d84:	4659      	mov	r1, fp
 8006d86:	4b09      	ldr	r3, [pc, #36]	@ (8006dac <_strtod_l+0x85c>)
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f7f9 fba7 	bl	80004dc <__aeabi_dmul>
 8006d8e:	4b08      	ldr	r3, [pc, #32]	@ (8006db0 <_strtod_l+0x860>)
 8006d90:	4682      	mov	sl, r0
 8006d92:	400b      	ands	r3, r1
 8006d94:	468b      	mov	fp, r1
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	f47f ae00 	bne.w	800699c <_strtod_l+0x44c>
 8006d9c:	2322      	movs	r3, #34	@ 0x22
 8006d9e:	9a05      	ldr	r2, [sp, #20]
 8006da0:	6013      	str	r3, [r2, #0]
 8006da2:	e5fb      	b.n	800699c <_strtod_l+0x44c>
 8006da4:	080098f8 	.word	0x080098f8
 8006da8:	fffffc02 	.word	0xfffffc02
 8006dac:	39500000 	.word	0x39500000
 8006db0:	7ff00000 	.word	0x7ff00000
 8006db4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006db8:	d165      	bne.n	8006e86 <_strtod_l+0x936>
 8006dba:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006dbc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006dc0:	b35a      	cbz	r2, 8006e1a <_strtod_l+0x8ca>
 8006dc2:	4a99      	ldr	r2, [pc, #612]	@ (8007028 <_strtod_l+0xad8>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d12b      	bne.n	8006e20 <_strtod_l+0x8d0>
 8006dc8:	9b08      	ldr	r3, [sp, #32]
 8006dca:	4651      	mov	r1, sl
 8006dcc:	b303      	cbz	r3, 8006e10 <_strtod_l+0x8c0>
 8006dce:	465a      	mov	r2, fp
 8006dd0:	4b96      	ldr	r3, [pc, #600]	@ (800702c <_strtod_l+0xadc>)
 8006dd2:	4013      	ands	r3, r2
 8006dd4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8006ddc:	d81b      	bhi.n	8006e16 <_strtod_l+0x8c6>
 8006dde:	0d1b      	lsrs	r3, r3, #20
 8006de0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006de4:	fa02 f303 	lsl.w	r3, r2, r3
 8006de8:	4299      	cmp	r1, r3
 8006dea:	d119      	bne.n	8006e20 <_strtod_l+0x8d0>
 8006dec:	4b90      	ldr	r3, [pc, #576]	@ (8007030 <_strtod_l+0xae0>)
 8006dee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d102      	bne.n	8006dfa <_strtod_l+0x8aa>
 8006df4:	3101      	adds	r1, #1
 8006df6:	f43f adc6 	beq.w	8006986 <_strtod_l+0x436>
 8006dfa:	f04f 0a00 	mov.w	sl, #0
 8006dfe:	4b8b      	ldr	r3, [pc, #556]	@ (800702c <_strtod_l+0xadc>)
 8006e00:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006e02:	401a      	ands	r2, r3
 8006e04:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8006e08:	9b08      	ldr	r3, [sp, #32]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d1b9      	bne.n	8006d82 <_strtod_l+0x832>
 8006e0e:	e5c5      	b.n	800699c <_strtod_l+0x44c>
 8006e10:	f04f 33ff 	mov.w	r3, #4294967295
 8006e14:	e7e8      	b.n	8006de8 <_strtod_l+0x898>
 8006e16:	4613      	mov	r3, r2
 8006e18:	e7e6      	b.n	8006de8 <_strtod_l+0x898>
 8006e1a:	ea53 030a 	orrs.w	r3, r3, sl
 8006e1e:	d0a2      	beq.n	8006d66 <_strtod_l+0x816>
 8006e20:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006e22:	b1db      	cbz	r3, 8006e5c <_strtod_l+0x90c>
 8006e24:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006e26:	4213      	tst	r3, r2
 8006e28:	d0ee      	beq.n	8006e08 <_strtod_l+0x8b8>
 8006e2a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e2c:	4650      	mov	r0, sl
 8006e2e:	4659      	mov	r1, fp
 8006e30:	9a08      	ldr	r2, [sp, #32]
 8006e32:	b1bb      	cbz	r3, 8006e64 <_strtod_l+0x914>
 8006e34:	f7ff fb6a 	bl	800650c <sulp>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	460b      	mov	r3, r1
 8006e3c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006e40:	f7f9 f996 	bl	8000170 <__adddf3>
 8006e44:	4682      	mov	sl, r0
 8006e46:	468b      	mov	fp, r1
 8006e48:	e7de      	b.n	8006e08 <_strtod_l+0x8b8>
 8006e4a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8006e4e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006e52:	f04f 3aff 	mov.w	sl, #4294967295
 8006e56:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006e5a:	e7d5      	b.n	8006e08 <_strtod_l+0x8b8>
 8006e5c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006e5e:	ea13 0f0a 	tst.w	r3, sl
 8006e62:	e7e1      	b.n	8006e28 <_strtod_l+0x8d8>
 8006e64:	f7ff fb52 	bl	800650c <sulp>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	460b      	mov	r3, r1
 8006e6c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006e70:	f7f9 f97c 	bl	800016c <__aeabi_dsub>
 8006e74:	2200      	movs	r2, #0
 8006e76:	2300      	movs	r3, #0
 8006e78:	4682      	mov	sl, r0
 8006e7a:	468b      	mov	fp, r1
 8006e7c:	f7f9 fd96 	bl	80009ac <__aeabi_dcmpeq>
 8006e80:	2800      	cmp	r0, #0
 8006e82:	d0c1      	beq.n	8006e08 <_strtod_l+0x8b8>
 8006e84:	e615      	b.n	8006ab2 <_strtod_l+0x562>
 8006e86:	4641      	mov	r1, r8
 8006e88:	4620      	mov	r0, r4
 8006e8a:	f001 fc95 	bl	80087b8 <__ratio>
 8006e8e:	2200      	movs	r2, #0
 8006e90:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006e94:	4606      	mov	r6, r0
 8006e96:	460f      	mov	r7, r1
 8006e98:	f7f9 fd9c 	bl	80009d4 <__aeabi_dcmple>
 8006e9c:	2800      	cmp	r0, #0
 8006e9e:	d06d      	beq.n	8006f7c <_strtod_l+0xa2c>
 8006ea0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d178      	bne.n	8006f98 <_strtod_l+0xa48>
 8006ea6:	f1ba 0f00 	cmp.w	sl, #0
 8006eaa:	d156      	bne.n	8006f5a <_strtod_l+0xa0a>
 8006eac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006eae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d158      	bne.n	8006f68 <_strtod_l+0xa18>
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	4630      	mov	r0, r6
 8006eba:	4639      	mov	r1, r7
 8006ebc:	4b5d      	ldr	r3, [pc, #372]	@ (8007034 <_strtod_l+0xae4>)
 8006ebe:	f7f9 fd7f 	bl	80009c0 <__aeabi_dcmplt>
 8006ec2:	2800      	cmp	r0, #0
 8006ec4:	d157      	bne.n	8006f76 <_strtod_l+0xa26>
 8006ec6:	4630      	mov	r0, r6
 8006ec8:	4639      	mov	r1, r7
 8006eca:	2200      	movs	r2, #0
 8006ecc:	4b5a      	ldr	r3, [pc, #360]	@ (8007038 <_strtod_l+0xae8>)
 8006ece:	f7f9 fb05 	bl	80004dc <__aeabi_dmul>
 8006ed2:	4606      	mov	r6, r0
 8006ed4:	460f      	mov	r7, r1
 8006ed6:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8006eda:	9606      	str	r6, [sp, #24]
 8006edc:	9307      	str	r3, [sp, #28]
 8006ede:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006ee2:	4d52      	ldr	r5, [pc, #328]	@ (800702c <_strtod_l+0xadc>)
 8006ee4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006ee8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006eea:	401d      	ands	r5, r3
 8006eec:	4b53      	ldr	r3, [pc, #332]	@ (800703c <_strtod_l+0xaec>)
 8006eee:	429d      	cmp	r5, r3
 8006ef0:	f040 80aa 	bne.w	8007048 <_strtod_l+0xaf8>
 8006ef4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ef6:	4650      	mov	r0, sl
 8006ef8:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8006efc:	4659      	mov	r1, fp
 8006efe:	f001 fb9b 	bl	8008638 <__ulp>
 8006f02:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006f06:	f7f9 fae9 	bl	80004dc <__aeabi_dmul>
 8006f0a:	4652      	mov	r2, sl
 8006f0c:	465b      	mov	r3, fp
 8006f0e:	f7f9 f92f 	bl	8000170 <__adddf3>
 8006f12:	460b      	mov	r3, r1
 8006f14:	4945      	ldr	r1, [pc, #276]	@ (800702c <_strtod_l+0xadc>)
 8006f16:	4a4a      	ldr	r2, [pc, #296]	@ (8007040 <_strtod_l+0xaf0>)
 8006f18:	4019      	ands	r1, r3
 8006f1a:	4291      	cmp	r1, r2
 8006f1c:	4682      	mov	sl, r0
 8006f1e:	d942      	bls.n	8006fa6 <_strtod_l+0xa56>
 8006f20:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006f22:	4b43      	ldr	r3, [pc, #268]	@ (8007030 <_strtod_l+0xae0>)
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d103      	bne.n	8006f30 <_strtod_l+0x9e0>
 8006f28:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	f43f ad2b 	beq.w	8006986 <_strtod_l+0x436>
 8006f30:	f04f 3aff 	mov.w	sl, #4294967295
 8006f34:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8007030 <_strtod_l+0xae0>
 8006f38:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006f3a:	9805      	ldr	r0, [sp, #20]
 8006f3c:	f001 f84a 	bl	8007fd4 <_Bfree>
 8006f40:	4649      	mov	r1, r9
 8006f42:	9805      	ldr	r0, [sp, #20]
 8006f44:	f001 f846 	bl	8007fd4 <_Bfree>
 8006f48:	4641      	mov	r1, r8
 8006f4a:	9805      	ldr	r0, [sp, #20]
 8006f4c:	f001 f842 	bl	8007fd4 <_Bfree>
 8006f50:	4621      	mov	r1, r4
 8006f52:	9805      	ldr	r0, [sp, #20]
 8006f54:	f001 f83e 	bl	8007fd4 <_Bfree>
 8006f58:	e618      	b.n	8006b8c <_strtod_l+0x63c>
 8006f5a:	f1ba 0f01 	cmp.w	sl, #1
 8006f5e:	d103      	bne.n	8006f68 <_strtod_l+0xa18>
 8006f60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	f43f ada5 	beq.w	8006ab2 <_strtod_l+0x562>
 8006f68:	2200      	movs	r2, #0
 8006f6a:	4b36      	ldr	r3, [pc, #216]	@ (8007044 <_strtod_l+0xaf4>)
 8006f6c:	2600      	movs	r6, #0
 8006f6e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006f72:	4f30      	ldr	r7, [pc, #192]	@ (8007034 <_strtod_l+0xae4>)
 8006f74:	e7b3      	b.n	8006ede <_strtod_l+0x98e>
 8006f76:	2600      	movs	r6, #0
 8006f78:	4f2f      	ldr	r7, [pc, #188]	@ (8007038 <_strtod_l+0xae8>)
 8006f7a:	e7ac      	b.n	8006ed6 <_strtod_l+0x986>
 8006f7c:	4630      	mov	r0, r6
 8006f7e:	4639      	mov	r1, r7
 8006f80:	4b2d      	ldr	r3, [pc, #180]	@ (8007038 <_strtod_l+0xae8>)
 8006f82:	2200      	movs	r2, #0
 8006f84:	f7f9 faaa 	bl	80004dc <__aeabi_dmul>
 8006f88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f8a:	4606      	mov	r6, r0
 8006f8c:	460f      	mov	r7, r1
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d0a1      	beq.n	8006ed6 <_strtod_l+0x986>
 8006f92:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006f96:	e7a2      	b.n	8006ede <_strtod_l+0x98e>
 8006f98:	2200      	movs	r2, #0
 8006f9a:	4b26      	ldr	r3, [pc, #152]	@ (8007034 <_strtod_l+0xae4>)
 8006f9c:	4616      	mov	r6, r2
 8006f9e:	461f      	mov	r7, r3
 8006fa0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006fa4:	e79b      	b.n	8006ede <_strtod_l+0x98e>
 8006fa6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8006faa:	9b08      	ldr	r3, [sp, #32]
 8006fac:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d1c1      	bne.n	8006f38 <_strtod_l+0x9e8>
 8006fb4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006fb8:	0d1b      	lsrs	r3, r3, #20
 8006fba:	051b      	lsls	r3, r3, #20
 8006fbc:	429d      	cmp	r5, r3
 8006fbe:	d1bb      	bne.n	8006f38 <_strtod_l+0x9e8>
 8006fc0:	4630      	mov	r0, r6
 8006fc2:	4639      	mov	r1, r7
 8006fc4:	f7fa f8ba 	bl	800113c <__aeabi_d2lz>
 8006fc8:	f7f9 fa5a 	bl	8000480 <__aeabi_l2d>
 8006fcc:	4602      	mov	r2, r0
 8006fce:	460b      	mov	r3, r1
 8006fd0:	4630      	mov	r0, r6
 8006fd2:	4639      	mov	r1, r7
 8006fd4:	f7f9 f8ca 	bl	800016c <__aeabi_dsub>
 8006fd8:	460b      	mov	r3, r1
 8006fda:	4602      	mov	r2, r0
 8006fdc:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8006fe0:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006fe4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006fe6:	ea46 060a 	orr.w	r6, r6, sl
 8006fea:	431e      	orrs	r6, r3
 8006fec:	d069      	beq.n	80070c2 <_strtod_l+0xb72>
 8006fee:	a30a      	add	r3, pc, #40	@ (adr r3, 8007018 <_strtod_l+0xac8>)
 8006ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff4:	f7f9 fce4 	bl	80009c0 <__aeabi_dcmplt>
 8006ff8:	2800      	cmp	r0, #0
 8006ffa:	f47f accf 	bne.w	800699c <_strtod_l+0x44c>
 8006ffe:	a308      	add	r3, pc, #32	@ (adr r3, 8007020 <_strtod_l+0xad0>)
 8007000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007004:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007008:	f7f9 fcf8 	bl	80009fc <__aeabi_dcmpgt>
 800700c:	2800      	cmp	r0, #0
 800700e:	d093      	beq.n	8006f38 <_strtod_l+0x9e8>
 8007010:	e4c4      	b.n	800699c <_strtod_l+0x44c>
 8007012:	bf00      	nop
 8007014:	f3af 8000 	nop.w
 8007018:	94a03595 	.word	0x94a03595
 800701c:	3fdfffff 	.word	0x3fdfffff
 8007020:	35afe535 	.word	0x35afe535
 8007024:	3fe00000 	.word	0x3fe00000
 8007028:	000fffff 	.word	0x000fffff
 800702c:	7ff00000 	.word	0x7ff00000
 8007030:	7fefffff 	.word	0x7fefffff
 8007034:	3ff00000 	.word	0x3ff00000
 8007038:	3fe00000 	.word	0x3fe00000
 800703c:	7fe00000 	.word	0x7fe00000
 8007040:	7c9fffff 	.word	0x7c9fffff
 8007044:	bff00000 	.word	0xbff00000
 8007048:	9b08      	ldr	r3, [sp, #32]
 800704a:	b323      	cbz	r3, 8007096 <_strtod_l+0xb46>
 800704c:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007050:	d821      	bhi.n	8007096 <_strtod_l+0xb46>
 8007052:	a327      	add	r3, pc, #156	@ (adr r3, 80070f0 <_strtod_l+0xba0>)
 8007054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007058:	4630      	mov	r0, r6
 800705a:	4639      	mov	r1, r7
 800705c:	f7f9 fcba 	bl	80009d4 <__aeabi_dcmple>
 8007060:	b1a0      	cbz	r0, 800708c <_strtod_l+0xb3c>
 8007062:	4639      	mov	r1, r7
 8007064:	4630      	mov	r0, r6
 8007066:	f7f9 fce9 	bl	8000a3c <__aeabi_d2uiz>
 800706a:	2801      	cmp	r0, #1
 800706c:	bf38      	it	cc
 800706e:	2001      	movcc	r0, #1
 8007070:	f7f9 f9ba 	bl	80003e8 <__aeabi_ui2d>
 8007074:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007076:	4606      	mov	r6, r0
 8007078:	460f      	mov	r7, r1
 800707a:	b9fb      	cbnz	r3, 80070bc <_strtod_l+0xb6c>
 800707c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007080:	9014      	str	r0, [sp, #80]	@ 0x50
 8007082:	9315      	str	r3, [sp, #84]	@ 0x54
 8007084:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007088:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800708c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800708e:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007092:	1b5b      	subs	r3, r3, r5
 8007094:	9311      	str	r3, [sp, #68]	@ 0x44
 8007096:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800709a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800709e:	f001 facb 	bl	8008638 <__ulp>
 80070a2:	4602      	mov	r2, r0
 80070a4:	460b      	mov	r3, r1
 80070a6:	4650      	mov	r0, sl
 80070a8:	4659      	mov	r1, fp
 80070aa:	f7f9 fa17 	bl	80004dc <__aeabi_dmul>
 80070ae:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80070b2:	f7f9 f85d 	bl	8000170 <__adddf3>
 80070b6:	4682      	mov	sl, r0
 80070b8:	468b      	mov	fp, r1
 80070ba:	e776      	b.n	8006faa <_strtod_l+0xa5a>
 80070bc:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80070c0:	e7e0      	b.n	8007084 <_strtod_l+0xb34>
 80070c2:	a30d      	add	r3, pc, #52	@ (adr r3, 80070f8 <_strtod_l+0xba8>)
 80070c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c8:	f7f9 fc7a 	bl	80009c0 <__aeabi_dcmplt>
 80070cc:	e79e      	b.n	800700c <_strtod_l+0xabc>
 80070ce:	2300      	movs	r3, #0
 80070d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80070d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80070d4:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80070d6:	6013      	str	r3, [r2, #0]
 80070d8:	f7ff ba77 	b.w	80065ca <_strtod_l+0x7a>
 80070dc:	2a65      	cmp	r2, #101	@ 0x65
 80070de:	f43f ab6e 	beq.w	80067be <_strtod_l+0x26e>
 80070e2:	2a45      	cmp	r2, #69	@ 0x45
 80070e4:	f43f ab6b 	beq.w	80067be <_strtod_l+0x26e>
 80070e8:	2301      	movs	r3, #1
 80070ea:	f7ff bba6 	b.w	800683a <_strtod_l+0x2ea>
 80070ee:	bf00      	nop
 80070f0:	ffc00000 	.word	0xffc00000
 80070f4:	41dfffff 	.word	0x41dfffff
 80070f8:	94a03595 	.word	0x94a03595
 80070fc:	3fcfffff 	.word	0x3fcfffff

08007100 <strtof>:
 8007100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007104:	4d24      	ldr	r5, [pc, #144]	@ (8007198 <strtof+0x98>)
 8007106:	460a      	mov	r2, r1
 8007108:	4b24      	ldr	r3, [pc, #144]	@ (800719c <strtof+0x9c>)
 800710a:	4601      	mov	r1, r0
 800710c:	6828      	ldr	r0, [r5, #0]
 800710e:	f7ff fa1f 	bl	8006550 <_strtod_l>
 8007112:	4602      	mov	r2, r0
 8007114:	460b      	mov	r3, r1
 8007116:	4606      	mov	r6, r0
 8007118:	460f      	mov	r7, r1
 800711a:	f7f9 fc79 	bl	8000a10 <__aeabi_dcmpun>
 800711e:	b168      	cbz	r0, 800713c <strtof+0x3c>
 8007120:	2f00      	cmp	r7, #0
 8007122:	481f      	ldr	r0, [pc, #124]	@ (80071a0 <strtof+0xa0>)
 8007124:	da06      	bge.n	8007134 <strtof+0x34>
 8007126:	f000 facf 	bl	80076c8 <nanf>
 800712a:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 800712e:	4620      	mov	r0, r4
 8007130:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007134:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007138:	f000 bac6 	b.w	80076c8 <nanf>
 800713c:	4639      	mov	r1, r7
 800713e:	4630      	mov	r0, r6
 8007140:	f7f9 fc9c 	bl	8000a7c <__aeabi_d2f>
 8007144:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 8007148:	4604      	mov	r4, r0
 800714a:	4916      	ldr	r1, [pc, #88]	@ (80071a4 <strtof+0xa4>)
 800714c:	4640      	mov	r0, r8
 800714e:	f7f9 ffb9 	bl	80010c4 <__aeabi_fcmpun>
 8007152:	b9b0      	cbnz	r0, 8007182 <strtof+0x82>
 8007154:	4640      	mov	r0, r8
 8007156:	4913      	ldr	r1, [pc, #76]	@ (80071a4 <strtof+0xa4>)
 8007158:	f7f9 ff96 	bl	8001088 <__aeabi_fcmple>
 800715c:	b988      	cbnz	r0, 8007182 <strtof+0x82>
 800715e:	f027 4900 	bic.w	r9, r7, #2147483648	@ 0x80000000
 8007162:	f04f 32ff 	mov.w	r2, #4294967295
 8007166:	4630      	mov	r0, r6
 8007168:	4649      	mov	r1, r9
 800716a:	4b0f      	ldr	r3, [pc, #60]	@ (80071a8 <strtof+0xa8>)
 800716c:	f7f9 fc50 	bl	8000a10 <__aeabi_dcmpun>
 8007170:	b970      	cbnz	r0, 8007190 <strtof+0x90>
 8007172:	f04f 32ff 	mov.w	r2, #4294967295
 8007176:	4630      	mov	r0, r6
 8007178:	4649      	mov	r1, r9
 800717a:	4b0b      	ldr	r3, [pc, #44]	@ (80071a8 <strtof+0xa8>)
 800717c:	f7f9 fc2a 	bl	80009d4 <__aeabi_dcmple>
 8007180:	b930      	cbnz	r0, 8007190 <strtof+0x90>
 8007182:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 8007186:	d1d2      	bne.n	800712e <strtof+0x2e>
 8007188:	4b08      	ldr	r3, [pc, #32]	@ (80071ac <strtof+0xac>)
 800718a:	403b      	ands	r3, r7
 800718c:	2b00      	cmp	r3, #0
 800718e:	d0ce      	beq.n	800712e <strtof+0x2e>
 8007190:	2222      	movs	r2, #34	@ 0x22
 8007192:	682b      	ldr	r3, [r5, #0]
 8007194:	601a      	str	r2, [r3, #0]
 8007196:	e7ca      	b.n	800712e <strtof+0x2e>
 8007198:	20000190 	.word	0x20000190
 800719c:	20000024 	.word	0x20000024
 80071a0:	08009c76 	.word	0x08009c76
 80071a4:	7f7fffff 	.word	0x7f7fffff
 80071a8:	7fefffff 	.word	0x7fefffff
 80071ac:	7ff00000 	.word	0x7ff00000

080071b0 <_strtoul_l.constprop.0>:
 80071b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80071b4:	4686      	mov	lr, r0
 80071b6:	460d      	mov	r5, r1
 80071b8:	4e33      	ldr	r6, [pc, #204]	@ (8007288 <_strtoul_l.constprop.0+0xd8>)
 80071ba:	4628      	mov	r0, r5
 80071bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80071c0:	5d37      	ldrb	r7, [r6, r4]
 80071c2:	f017 0708 	ands.w	r7, r7, #8
 80071c6:	d1f8      	bne.n	80071ba <_strtoul_l.constprop.0+0xa>
 80071c8:	2c2d      	cmp	r4, #45	@ 0x2d
 80071ca:	d12f      	bne.n	800722c <_strtoul_l.constprop.0+0x7c>
 80071cc:	2701      	movs	r7, #1
 80071ce:	782c      	ldrb	r4, [r5, #0]
 80071d0:	1c85      	adds	r5, r0, #2
 80071d2:	f033 0010 	bics.w	r0, r3, #16
 80071d6:	d109      	bne.n	80071ec <_strtoul_l.constprop.0+0x3c>
 80071d8:	2c30      	cmp	r4, #48	@ 0x30
 80071da:	d12c      	bne.n	8007236 <_strtoul_l.constprop.0+0x86>
 80071dc:	7828      	ldrb	r0, [r5, #0]
 80071de:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80071e2:	2858      	cmp	r0, #88	@ 0x58
 80071e4:	d127      	bne.n	8007236 <_strtoul_l.constprop.0+0x86>
 80071e6:	2310      	movs	r3, #16
 80071e8:	786c      	ldrb	r4, [r5, #1]
 80071ea:	3502      	adds	r5, #2
 80071ec:	f04f 38ff 	mov.w	r8, #4294967295
 80071f0:	fbb8 f8f3 	udiv	r8, r8, r3
 80071f4:	2600      	movs	r6, #0
 80071f6:	fb03 f908 	mul.w	r9, r3, r8
 80071fa:	4630      	mov	r0, r6
 80071fc:	ea6f 0909 	mvn.w	r9, r9
 8007200:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8007204:	f1bc 0f09 	cmp.w	ip, #9
 8007208:	d81c      	bhi.n	8007244 <_strtoul_l.constprop.0+0x94>
 800720a:	4664      	mov	r4, ip
 800720c:	42a3      	cmp	r3, r4
 800720e:	dd2a      	ble.n	8007266 <_strtoul_l.constprop.0+0xb6>
 8007210:	f1b6 3fff 	cmp.w	r6, #4294967295
 8007214:	d007      	beq.n	8007226 <_strtoul_l.constprop.0+0x76>
 8007216:	4580      	cmp	r8, r0
 8007218:	d322      	bcc.n	8007260 <_strtoul_l.constprop.0+0xb0>
 800721a:	d101      	bne.n	8007220 <_strtoul_l.constprop.0+0x70>
 800721c:	45a1      	cmp	r9, r4
 800721e:	db1f      	blt.n	8007260 <_strtoul_l.constprop.0+0xb0>
 8007220:	2601      	movs	r6, #1
 8007222:	fb00 4003 	mla	r0, r0, r3, r4
 8007226:	f815 4b01 	ldrb.w	r4, [r5], #1
 800722a:	e7e9      	b.n	8007200 <_strtoul_l.constprop.0+0x50>
 800722c:	2c2b      	cmp	r4, #43	@ 0x2b
 800722e:	bf04      	itt	eq
 8007230:	782c      	ldrbeq	r4, [r5, #0]
 8007232:	1c85      	addeq	r5, r0, #2
 8007234:	e7cd      	b.n	80071d2 <_strtoul_l.constprop.0+0x22>
 8007236:	2b00      	cmp	r3, #0
 8007238:	d1d8      	bne.n	80071ec <_strtoul_l.constprop.0+0x3c>
 800723a:	2c30      	cmp	r4, #48	@ 0x30
 800723c:	bf0c      	ite	eq
 800723e:	2308      	moveq	r3, #8
 8007240:	230a      	movne	r3, #10
 8007242:	e7d3      	b.n	80071ec <_strtoul_l.constprop.0+0x3c>
 8007244:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8007248:	f1bc 0f19 	cmp.w	ip, #25
 800724c:	d801      	bhi.n	8007252 <_strtoul_l.constprop.0+0xa2>
 800724e:	3c37      	subs	r4, #55	@ 0x37
 8007250:	e7dc      	b.n	800720c <_strtoul_l.constprop.0+0x5c>
 8007252:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8007256:	f1bc 0f19 	cmp.w	ip, #25
 800725a:	d804      	bhi.n	8007266 <_strtoul_l.constprop.0+0xb6>
 800725c:	3c57      	subs	r4, #87	@ 0x57
 800725e:	e7d5      	b.n	800720c <_strtoul_l.constprop.0+0x5c>
 8007260:	f04f 36ff 	mov.w	r6, #4294967295
 8007264:	e7df      	b.n	8007226 <_strtoul_l.constprop.0+0x76>
 8007266:	1c73      	adds	r3, r6, #1
 8007268:	d106      	bne.n	8007278 <_strtoul_l.constprop.0+0xc8>
 800726a:	2322      	movs	r3, #34	@ 0x22
 800726c:	4630      	mov	r0, r6
 800726e:	f8ce 3000 	str.w	r3, [lr]
 8007272:	b932      	cbnz	r2, 8007282 <_strtoul_l.constprop.0+0xd2>
 8007274:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007278:	b107      	cbz	r7, 800727c <_strtoul_l.constprop.0+0xcc>
 800727a:	4240      	negs	r0, r0
 800727c:	2a00      	cmp	r2, #0
 800727e:	d0f9      	beq.n	8007274 <_strtoul_l.constprop.0+0xc4>
 8007280:	b106      	cbz	r6, 8007284 <_strtoul_l.constprop.0+0xd4>
 8007282:	1e69      	subs	r1, r5, #1
 8007284:	6011      	str	r1, [r2, #0]
 8007286:	e7f5      	b.n	8007274 <_strtoul_l.constprop.0+0xc4>
 8007288:	08009921 	.word	0x08009921

0800728c <strtoul>:
 800728c:	4613      	mov	r3, r2
 800728e:	460a      	mov	r2, r1
 8007290:	4601      	mov	r1, r0
 8007292:	4802      	ldr	r0, [pc, #8]	@ (800729c <strtoul+0x10>)
 8007294:	6800      	ldr	r0, [r0, #0]
 8007296:	f7ff bf8b 	b.w	80071b0 <_strtoul_l.constprop.0>
 800729a:	bf00      	nop
 800729c:	20000190 	.word	0x20000190

080072a0 <std>:
 80072a0:	2300      	movs	r3, #0
 80072a2:	b510      	push	{r4, lr}
 80072a4:	4604      	mov	r4, r0
 80072a6:	e9c0 3300 	strd	r3, r3, [r0]
 80072aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80072ae:	6083      	str	r3, [r0, #8]
 80072b0:	8181      	strh	r1, [r0, #12]
 80072b2:	6643      	str	r3, [r0, #100]	@ 0x64
 80072b4:	81c2      	strh	r2, [r0, #14]
 80072b6:	6183      	str	r3, [r0, #24]
 80072b8:	4619      	mov	r1, r3
 80072ba:	2208      	movs	r2, #8
 80072bc:	305c      	adds	r0, #92	@ 0x5c
 80072be:	f000 f92d 	bl	800751c <memset>
 80072c2:	4b0d      	ldr	r3, [pc, #52]	@ (80072f8 <std+0x58>)
 80072c4:	6224      	str	r4, [r4, #32]
 80072c6:	6263      	str	r3, [r4, #36]	@ 0x24
 80072c8:	4b0c      	ldr	r3, [pc, #48]	@ (80072fc <std+0x5c>)
 80072ca:	62a3      	str	r3, [r4, #40]	@ 0x28
 80072cc:	4b0c      	ldr	r3, [pc, #48]	@ (8007300 <std+0x60>)
 80072ce:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80072d0:	4b0c      	ldr	r3, [pc, #48]	@ (8007304 <std+0x64>)
 80072d2:	6323      	str	r3, [r4, #48]	@ 0x30
 80072d4:	4b0c      	ldr	r3, [pc, #48]	@ (8007308 <std+0x68>)
 80072d6:	429c      	cmp	r4, r3
 80072d8:	d006      	beq.n	80072e8 <std+0x48>
 80072da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80072de:	4294      	cmp	r4, r2
 80072e0:	d002      	beq.n	80072e8 <std+0x48>
 80072e2:	33d0      	adds	r3, #208	@ 0xd0
 80072e4:	429c      	cmp	r4, r3
 80072e6:	d105      	bne.n	80072f4 <std+0x54>
 80072e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80072ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072f0:	f000 b9ca 	b.w	8007688 <__retarget_lock_init_recursive>
 80072f4:	bd10      	pop	{r4, pc}
 80072f6:	bf00      	nop
 80072f8:	08007425 	.word	0x08007425
 80072fc:	08007447 	.word	0x08007447
 8007300:	0800747f 	.word	0x0800747f
 8007304:	080074a3 	.word	0x080074a3
 8007308:	200008c4 	.word	0x200008c4

0800730c <stdio_exit_handler>:
 800730c:	4a02      	ldr	r2, [pc, #8]	@ (8007318 <stdio_exit_handler+0xc>)
 800730e:	4903      	ldr	r1, [pc, #12]	@ (800731c <stdio_exit_handler+0x10>)
 8007310:	4803      	ldr	r0, [pc, #12]	@ (8007320 <stdio_exit_handler+0x14>)
 8007312:	f000 b869 	b.w	80073e8 <_fwalk_sglue>
 8007316:	bf00      	nop
 8007318:	20000018 	.word	0x20000018
 800731c:	08008f8d 	.word	0x08008f8d
 8007320:	20000194 	.word	0x20000194

08007324 <cleanup_stdio>:
 8007324:	6841      	ldr	r1, [r0, #4]
 8007326:	4b0c      	ldr	r3, [pc, #48]	@ (8007358 <cleanup_stdio+0x34>)
 8007328:	b510      	push	{r4, lr}
 800732a:	4299      	cmp	r1, r3
 800732c:	4604      	mov	r4, r0
 800732e:	d001      	beq.n	8007334 <cleanup_stdio+0x10>
 8007330:	f001 fe2c 	bl	8008f8c <_fflush_r>
 8007334:	68a1      	ldr	r1, [r4, #8]
 8007336:	4b09      	ldr	r3, [pc, #36]	@ (800735c <cleanup_stdio+0x38>)
 8007338:	4299      	cmp	r1, r3
 800733a:	d002      	beq.n	8007342 <cleanup_stdio+0x1e>
 800733c:	4620      	mov	r0, r4
 800733e:	f001 fe25 	bl	8008f8c <_fflush_r>
 8007342:	68e1      	ldr	r1, [r4, #12]
 8007344:	4b06      	ldr	r3, [pc, #24]	@ (8007360 <cleanup_stdio+0x3c>)
 8007346:	4299      	cmp	r1, r3
 8007348:	d004      	beq.n	8007354 <cleanup_stdio+0x30>
 800734a:	4620      	mov	r0, r4
 800734c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007350:	f001 be1c 	b.w	8008f8c <_fflush_r>
 8007354:	bd10      	pop	{r4, pc}
 8007356:	bf00      	nop
 8007358:	200008c4 	.word	0x200008c4
 800735c:	2000092c 	.word	0x2000092c
 8007360:	20000994 	.word	0x20000994

08007364 <global_stdio_init.part.0>:
 8007364:	b510      	push	{r4, lr}
 8007366:	4b0b      	ldr	r3, [pc, #44]	@ (8007394 <global_stdio_init.part.0+0x30>)
 8007368:	4c0b      	ldr	r4, [pc, #44]	@ (8007398 <global_stdio_init.part.0+0x34>)
 800736a:	4a0c      	ldr	r2, [pc, #48]	@ (800739c <global_stdio_init.part.0+0x38>)
 800736c:	4620      	mov	r0, r4
 800736e:	601a      	str	r2, [r3, #0]
 8007370:	2104      	movs	r1, #4
 8007372:	2200      	movs	r2, #0
 8007374:	f7ff ff94 	bl	80072a0 <std>
 8007378:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800737c:	2201      	movs	r2, #1
 800737e:	2109      	movs	r1, #9
 8007380:	f7ff ff8e 	bl	80072a0 <std>
 8007384:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007388:	2202      	movs	r2, #2
 800738a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800738e:	2112      	movs	r1, #18
 8007390:	f7ff bf86 	b.w	80072a0 <std>
 8007394:	200009fc 	.word	0x200009fc
 8007398:	200008c4 	.word	0x200008c4
 800739c:	0800730d 	.word	0x0800730d

080073a0 <__sfp_lock_acquire>:
 80073a0:	4801      	ldr	r0, [pc, #4]	@ (80073a8 <__sfp_lock_acquire+0x8>)
 80073a2:	f000 b972 	b.w	800768a <__retarget_lock_acquire_recursive>
 80073a6:	bf00      	nop
 80073a8:	20000a05 	.word	0x20000a05

080073ac <__sfp_lock_release>:
 80073ac:	4801      	ldr	r0, [pc, #4]	@ (80073b4 <__sfp_lock_release+0x8>)
 80073ae:	f000 b96d 	b.w	800768c <__retarget_lock_release_recursive>
 80073b2:	bf00      	nop
 80073b4:	20000a05 	.word	0x20000a05

080073b8 <__sinit>:
 80073b8:	b510      	push	{r4, lr}
 80073ba:	4604      	mov	r4, r0
 80073bc:	f7ff fff0 	bl	80073a0 <__sfp_lock_acquire>
 80073c0:	6a23      	ldr	r3, [r4, #32]
 80073c2:	b11b      	cbz	r3, 80073cc <__sinit+0x14>
 80073c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073c8:	f7ff bff0 	b.w	80073ac <__sfp_lock_release>
 80073cc:	4b04      	ldr	r3, [pc, #16]	@ (80073e0 <__sinit+0x28>)
 80073ce:	6223      	str	r3, [r4, #32]
 80073d0:	4b04      	ldr	r3, [pc, #16]	@ (80073e4 <__sinit+0x2c>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d1f5      	bne.n	80073c4 <__sinit+0xc>
 80073d8:	f7ff ffc4 	bl	8007364 <global_stdio_init.part.0>
 80073dc:	e7f2      	b.n	80073c4 <__sinit+0xc>
 80073de:	bf00      	nop
 80073e0:	08007325 	.word	0x08007325
 80073e4:	200009fc 	.word	0x200009fc

080073e8 <_fwalk_sglue>:
 80073e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073ec:	4607      	mov	r7, r0
 80073ee:	4688      	mov	r8, r1
 80073f0:	4614      	mov	r4, r2
 80073f2:	2600      	movs	r6, #0
 80073f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80073f8:	f1b9 0901 	subs.w	r9, r9, #1
 80073fc:	d505      	bpl.n	800740a <_fwalk_sglue+0x22>
 80073fe:	6824      	ldr	r4, [r4, #0]
 8007400:	2c00      	cmp	r4, #0
 8007402:	d1f7      	bne.n	80073f4 <_fwalk_sglue+0xc>
 8007404:	4630      	mov	r0, r6
 8007406:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800740a:	89ab      	ldrh	r3, [r5, #12]
 800740c:	2b01      	cmp	r3, #1
 800740e:	d907      	bls.n	8007420 <_fwalk_sglue+0x38>
 8007410:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007414:	3301      	adds	r3, #1
 8007416:	d003      	beq.n	8007420 <_fwalk_sglue+0x38>
 8007418:	4629      	mov	r1, r5
 800741a:	4638      	mov	r0, r7
 800741c:	47c0      	blx	r8
 800741e:	4306      	orrs	r6, r0
 8007420:	3568      	adds	r5, #104	@ 0x68
 8007422:	e7e9      	b.n	80073f8 <_fwalk_sglue+0x10>

08007424 <__sread>:
 8007424:	b510      	push	{r4, lr}
 8007426:	460c      	mov	r4, r1
 8007428:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800742c:	f000 f8de 	bl	80075ec <_read_r>
 8007430:	2800      	cmp	r0, #0
 8007432:	bfab      	itete	ge
 8007434:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007436:	89a3      	ldrhlt	r3, [r4, #12]
 8007438:	181b      	addge	r3, r3, r0
 800743a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800743e:	bfac      	ite	ge
 8007440:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007442:	81a3      	strhlt	r3, [r4, #12]
 8007444:	bd10      	pop	{r4, pc}

08007446 <__swrite>:
 8007446:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800744a:	461f      	mov	r7, r3
 800744c:	898b      	ldrh	r3, [r1, #12]
 800744e:	4605      	mov	r5, r0
 8007450:	05db      	lsls	r3, r3, #23
 8007452:	460c      	mov	r4, r1
 8007454:	4616      	mov	r6, r2
 8007456:	d505      	bpl.n	8007464 <__swrite+0x1e>
 8007458:	2302      	movs	r3, #2
 800745a:	2200      	movs	r2, #0
 800745c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007460:	f000 f8b2 	bl	80075c8 <_lseek_r>
 8007464:	89a3      	ldrh	r3, [r4, #12]
 8007466:	4632      	mov	r2, r6
 8007468:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800746c:	81a3      	strh	r3, [r4, #12]
 800746e:	4628      	mov	r0, r5
 8007470:	463b      	mov	r3, r7
 8007472:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007476:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800747a:	f000 b8c9 	b.w	8007610 <_write_r>

0800747e <__sseek>:
 800747e:	b510      	push	{r4, lr}
 8007480:	460c      	mov	r4, r1
 8007482:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007486:	f000 f89f 	bl	80075c8 <_lseek_r>
 800748a:	1c43      	adds	r3, r0, #1
 800748c:	89a3      	ldrh	r3, [r4, #12]
 800748e:	bf15      	itete	ne
 8007490:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007492:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007496:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800749a:	81a3      	strheq	r3, [r4, #12]
 800749c:	bf18      	it	ne
 800749e:	81a3      	strhne	r3, [r4, #12]
 80074a0:	bd10      	pop	{r4, pc}

080074a2 <__sclose>:
 80074a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074a6:	f000 b87f 	b.w	80075a8 <_close_r>

080074aa <_vsniprintf_r>:
 80074aa:	b530      	push	{r4, r5, lr}
 80074ac:	4614      	mov	r4, r2
 80074ae:	2c00      	cmp	r4, #0
 80074b0:	4605      	mov	r5, r0
 80074b2:	461a      	mov	r2, r3
 80074b4:	b09b      	sub	sp, #108	@ 0x6c
 80074b6:	da05      	bge.n	80074c4 <_vsniprintf_r+0x1a>
 80074b8:	238b      	movs	r3, #139	@ 0x8b
 80074ba:	6003      	str	r3, [r0, #0]
 80074bc:	f04f 30ff 	mov.w	r0, #4294967295
 80074c0:	b01b      	add	sp, #108	@ 0x6c
 80074c2:	bd30      	pop	{r4, r5, pc}
 80074c4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80074c8:	f8ad 300c 	strh.w	r3, [sp, #12]
 80074cc:	bf0c      	ite	eq
 80074ce:	4623      	moveq	r3, r4
 80074d0:	f104 33ff 	addne.w	r3, r4, #4294967295
 80074d4:	9302      	str	r3, [sp, #8]
 80074d6:	9305      	str	r3, [sp, #20]
 80074d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80074dc:	9100      	str	r1, [sp, #0]
 80074de:	9104      	str	r1, [sp, #16]
 80074e0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80074e4:	4669      	mov	r1, sp
 80074e6:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80074e8:	f001 fa42 	bl	8008970 <_svfiprintf_r>
 80074ec:	1c43      	adds	r3, r0, #1
 80074ee:	bfbc      	itt	lt
 80074f0:	238b      	movlt	r3, #139	@ 0x8b
 80074f2:	602b      	strlt	r3, [r5, #0]
 80074f4:	2c00      	cmp	r4, #0
 80074f6:	d0e3      	beq.n	80074c0 <_vsniprintf_r+0x16>
 80074f8:	2200      	movs	r2, #0
 80074fa:	9b00      	ldr	r3, [sp, #0]
 80074fc:	701a      	strb	r2, [r3, #0]
 80074fe:	e7df      	b.n	80074c0 <_vsniprintf_r+0x16>

08007500 <vsniprintf>:
 8007500:	b507      	push	{r0, r1, r2, lr}
 8007502:	9300      	str	r3, [sp, #0]
 8007504:	4613      	mov	r3, r2
 8007506:	460a      	mov	r2, r1
 8007508:	4601      	mov	r1, r0
 800750a:	4803      	ldr	r0, [pc, #12]	@ (8007518 <vsniprintf+0x18>)
 800750c:	6800      	ldr	r0, [r0, #0]
 800750e:	f7ff ffcc 	bl	80074aa <_vsniprintf_r>
 8007512:	b003      	add	sp, #12
 8007514:	f85d fb04 	ldr.w	pc, [sp], #4
 8007518:	20000190 	.word	0x20000190

0800751c <memset>:
 800751c:	4603      	mov	r3, r0
 800751e:	4402      	add	r2, r0
 8007520:	4293      	cmp	r3, r2
 8007522:	d100      	bne.n	8007526 <memset+0xa>
 8007524:	4770      	bx	lr
 8007526:	f803 1b01 	strb.w	r1, [r3], #1
 800752a:	e7f9      	b.n	8007520 <memset+0x4>

0800752c <strncmp>:
 800752c:	b510      	push	{r4, lr}
 800752e:	b16a      	cbz	r2, 800754c <strncmp+0x20>
 8007530:	3901      	subs	r1, #1
 8007532:	1884      	adds	r4, r0, r2
 8007534:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007538:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800753c:	429a      	cmp	r2, r3
 800753e:	d103      	bne.n	8007548 <strncmp+0x1c>
 8007540:	42a0      	cmp	r0, r4
 8007542:	d001      	beq.n	8007548 <strncmp+0x1c>
 8007544:	2a00      	cmp	r2, #0
 8007546:	d1f5      	bne.n	8007534 <strncmp+0x8>
 8007548:	1ad0      	subs	r0, r2, r3
 800754a:	bd10      	pop	{r4, pc}
 800754c:	4610      	mov	r0, r2
 800754e:	e7fc      	b.n	800754a <strncmp+0x1e>

08007550 <__strtok_r>:
 8007550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007552:	4604      	mov	r4, r0
 8007554:	b908      	cbnz	r0, 800755a <__strtok_r+0xa>
 8007556:	6814      	ldr	r4, [r2, #0]
 8007558:	b144      	cbz	r4, 800756c <__strtok_r+0x1c>
 800755a:	460f      	mov	r7, r1
 800755c:	4620      	mov	r0, r4
 800755e:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007562:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007566:	b91e      	cbnz	r6, 8007570 <__strtok_r+0x20>
 8007568:	b965      	cbnz	r5, 8007584 <__strtok_r+0x34>
 800756a:	6015      	str	r5, [r2, #0]
 800756c:	2000      	movs	r0, #0
 800756e:	e005      	b.n	800757c <__strtok_r+0x2c>
 8007570:	42b5      	cmp	r5, r6
 8007572:	d1f6      	bne.n	8007562 <__strtok_r+0x12>
 8007574:	2b00      	cmp	r3, #0
 8007576:	d1f0      	bne.n	800755a <__strtok_r+0xa>
 8007578:	6014      	str	r4, [r2, #0]
 800757a:	7003      	strb	r3, [r0, #0]
 800757c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800757e:	461c      	mov	r4, r3
 8007580:	e00c      	b.n	800759c <__strtok_r+0x4c>
 8007582:	b915      	cbnz	r5, 800758a <__strtok_r+0x3a>
 8007584:	460e      	mov	r6, r1
 8007586:	f814 3b01 	ldrb.w	r3, [r4], #1
 800758a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800758e:	42ab      	cmp	r3, r5
 8007590:	d1f7      	bne.n	8007582 <__strtok_r+0x32>
 8007592:	2b00      	cmp	r3, #0
 8007594:	d0f3      	beq.n	800757e <__strtok_r+0x2e>
 8007596:	2300      	movs	r3, #0
 8007598:	f804 3c01 	strb.w	r3, [r4, #-1]
 800759c:	6014      	str	r4, [r2, #0]
 800759e:	e7ed      	b.n	800757c <__strtok_r+0x2c>

080075a0 <strtok_r>:
 80075a0:	2301      	movs	r3, #1
 80075a2:	f7ff bfd5 	b.w	8007550 <__strtok_r>
	...

080075a8 <_close_r>:
 80075a8:	b538      	push	{r3, r4, r5, lr}
 80075aa:	2300      	movs	r3, #0
 80075ac:	4d05      	ldr	r5, [pc, #20]	@ (80075c4 <_close_r+0x1c>)
 80075ae:	4604      	mov	r4, r0
 80075b0:	4608      	mov	r0, r1
 80075b2:	602b      	str	r3, [r5, #0]
 80075b4:	f7fb fb91 	bl	8002cda <_close>
 80075b8:	1c43      	adds	r3, r0, #1
 80075ba:	d102      	bne.n	80075c2 <_close_r+0x1a>
 80075bc:	682b      	ldr	r3, [r5, #0]
 80075be:	b103      	cbz	r3, 80075c2 <_close_r+0x1a>
 80075c0:	6023      	str	r3, [r4, #0]
 80075c2:	bd38      	pop	{r3, r4, r5, pc}
 80075c4:	20000a00 	.word	0x20000a00

080075c8 <_lseek_r>:
 80075c8:	b538      	push	{r3, r4, r5, lr}
 80075ca:	4604      	mov	r4, r0
 80075cc:	4608      	mov	r0, r1
 80075ce:	4611      	mov	r1, r2
 80075d0:	2200      	movs	r2, #0
 80075d2:	4d05      	ldr	r5, [pc, #20]	@ (80075e8 <_lseek_r+0x20>)
 80075d4:	602a      	str	r2, [r5, #0]
 80075d6:	461a      	mov	r2, r3
 80075d8:	f7fb fba3 	bl	8002d22 <_lseek>
 80075dc:	1c43      	adds	r3, r0, #1
 80075de:	d102      	bne.n	80075e6 <_lseek_r+0x1e>
 80075e0:	682b      	ldr	r3, [r5, #0]
 80075e2:	b103      	cbz	r3, 80075e6 <_lseek_r+0x1e>
 80075e4:	6023      	str	r3, [r4, #0]
 80075e6:	bd38      	pop	{r3, r4, r5, pc}
 80075e8:	20000a00 	.word	0x20000a00

080075ec <_read_r>:
 80075ec:	b538      	push	{r3, r4, r5, lr}
 80075ee:	4604      	mov	r4, r0
 80075f0:	4608      	mov	r0, r1
 80075f2:	4611      	mov	r1, r2
 80075f4:	2200      	movs	r2, #0
 80075f6:	4d05      	ldr	r5, [pc, #20]	@ (800760c <_read_r+0x20>)
 80075f8:	602a      	str	r2, [r5, #0]
 80075fa:	461a      	mov	r2, r3
 80075fc:	f7fb fb34 	bl	8002c68 <_read>
 8007600:	1c43      	adds	r3, r0, #1
 8007602:	d102      	bne.n	800760a <_read_r+0x1e>
 8007604:	682b      	ldr	r3, [r5, #0]
 8007606:	b103      	cbz	r3, 800760a <_read_r+0x1e>
 8007608:	6023      	str	r3, [r4, #0]
 800760a:	bd38      	pop	{r3, r4, r5, pc}
 800760c:	20000a00 	.word	0x20000a00

08007610 <_write_r>:
 8007610:	b538      	push	{r3, r4, r5, lr}
 8007612:	4604      	mov	r4, r0
 8007614:	4608      	mov	r0, r1
 8007616:	4611      	mov	r1, r2
 8007618:	2200      	movs	r2, #0
 800761a:	4d05      	ldr	r5, [pc, #20]	@ (8007630 <_write_r+0x20>)
 800761c:	602a      	str	r2, [r5, #0]
 800761e:	461a      	mov	r2, r3
 8007620:	f7fb fb3f 	bl	8002ca2 <_write>
 8007624:	1c43      	adds	r3, r0, #1
 8007626:	d102      	bne.n	800762e <_write_r+0x1e>
 8007628:	682b      	ldr	r3, [r5, #0]
 800762a:	b103      	cbz	r3, 800762e <_write_r+0x1e>
 800762c:	6023      	str	r3, [r4, #0]
 800762e:	bd38      	pop	{r3, r4, r5, pc}
 8007630:	20000a00 	.word	0x20000a00

08007634 <__errno>:
 8007634:	4b01      	ldr	r3, [pc, #4]	@ (800763c <__errno+0x8>)
 8007636:	6818      	ldr	r0, [r3, #0]
 8007638:	4770      	bx	lr
 800763a:	bf00      	nop
 800763c:	20000190 	.word	0x20000190

08007640 <__libc_init_array>:
 8007640:	b570      	push	{r4, r5, r6, lr}
 8007642:	2600      	movs	r6, #0
 8007644:	4d0c      	ldr	r5, [pc, #48]	@ (8007678 <__libc_init_array+0x38>)
 8007646:	4c0d      	ldr	r4, [pc, #52]	@ (800767c <__libc_init_array+0x3c>)
 8007648:	1b64      	subs	r4, r4, r5
 800764a:	10a4      	asrs	r4, r4, #2
 800764c:	42a6      	cmp	r6, r4
 800764e:	d109      	bne.n	8007664 <__libc_init_array+0x24>
 8007650:	f002 f820 	bl	8009694 <_init>
 8007654:	2600      	movs	r6, #0
 8007656:	4d0a      	ldr	r5, [pc, #40]	@ (8007680 <__libc_init_array+0x40>)
 8007658:	4c0a      	ldr	r4, [pc, #40]	@ (8007684 <__libc_init_array+0x44>)
 800765a:	1b64      	subs	r4, r4, r5
 800765c:	10a4      	asrs	r4, r4, #2
 800765e:	42a6      	cmp	r6, r4
 8007660:	d105      	bne.n	800766e <__libc_init_array+0x2e>
 8007662:	bd70      	pop	{r4, r5, r6, pc}
 8007664:	f855 3b04 	ldr.w	r3, [r5], #4
 8007668:	4798      	blx	r3
 800766a:	3601      	adds	r6, #1
 800766c:	e7ee      	b.n	800764c <__libc_init_array+0xc>
 800766e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007672:	4798      	blx	r3
 8007674:	3601      	adds	r6, #1
 8007676:	e7f2      	b.n	800765e <__libc_init_array+0x1e>
 8007678:	08009c80 	.word	0x08009c80
 800767c:	08009c80 	.word	0x08009c80
 8007680:	08009c80 	.word	0x08009c80
 8007684:	08009c84 	.word	0x08009c84

08007688 <__retarget_lock_init_recursive>:
 8007688:	4770      	bx	lr

0800768a <__retarget_lock_acquire_recursive>:
 800768a:	4770      	bx	lr

0800768c <__retarget_lock_release_recursive>:
 800768c:	4770      	bx	lr

0800768e <strcpy>:
 800768e:	4603      	mov	r3, r0
 8007690:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007694:	f803 2b01 	strb.w	r2, [r3], #1
 8007698:	2a00      	cmp	r2, #0
 800769a:	d1f9      	bne.n	8007690 <strcpy+0x2>
 800769c:	4770      	bx	lr

0800769e <memcpy>:
 800769e:	440a      	add	r2, r1
 80076a0:	4291      	cmp	r1, r2
 80076a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80076a6:	d100      	bne.n	80076aa <memcpy+0xc>
 80076a8:	4770      	bx	lr
 80076aa:	b510      	push	{r4, lr}
 80076ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076b0:	4291      	cmp	r1, r2
 80076b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076b6:	d1f9      	bne.n	80076ac <memcpy+0xe>
 80076b8:	bd10      	pop	{r4, pc}
	...

080076bc <nan>:
 80076bc:	2000      	movs	r0, #0
 80076be:	4901      	ldr	r1, [pc, #4]	@ (80076c4 <nan+0x8>)
 80076c0:	4770      	bx	lr
 80076c2:	bf00      	nop
 80076c4:	7ff80000 	.word	0x7ff80000

080076c8 <nanf>:
 80076c8:	4800      	ldr	r0, [pc, #0]	@ (80076cc <nanf+0x4>)
 80076ca:	4770      	bx	lr
 80076cc:	7fc00000 	.word	0x7fc00000

080076d0 <_free_r>:
 80076d0:	b538      	push	{r3, r4, r5, lr}
 80076d2:	4605      	mov	r5, r0
 80076d4:	2900      	cmp	r1, #0
 80076d6:	d040      	beq.n	800775a <_free_r+0x8a>
 80076d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076dc:	1f0c      	subs	r4, r1, #4
 80076de:	2b00      	cmp	r3, #0
 80076e0:	bfb8      	it	lt
 80076e2:	18e4      	addlt	r4, r4, r3
 80076e4:	f000 fc2a 	bl	8007f3c <__malloc_lock>
 80076e8:	4a1c      	ldr	r2, [pc, #112]	@ (800775c <_free_r+0x8c>)
 80076ea:	6813      	ldr	r3, [r2, #0]
 80076ec:	b933      	cbnz	r3, 80076fc <_free_r+0x2c>
 80076ee:	6063      	str	r3, [r4, #4]
 80076f0:	6014      	str	r4, [r2, #0]
 80076f2:	4628      	mov	r0, r5
 80076f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076f8:	f000 bc26 	b.w	8007f48 <__malloc_unlock>
 80076fc:	42a3      	cmp	r3, r4
 80076fe:	d908      	bls.n	8007712 <_free_r+0x42>
 8007700:	6820      	ldr	r0, [r4, #0]
 8007702:	1821      	adds	r1, r4, r0
 8007704:	428b      	cmp	r3, r1
 8007706:	bf01      	itttt	eq
 8007708:	6819      	ldreq	r1, [r3, #0]
 800770a:	685b      	ldreq	r3, [r3, #4]
 800770c:	1809      	addeq	r1, r1, r0
 800770e:	6021      	streq	r1, [r4, #0]
 8007710:	e7ed      	b.n	80076ee <_free_r+0x1e>
 8007712:	461a      	mov	r2, r3
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	b10b      	cbz	r3, 800771c <_free_r+0x4c>
 8007718:	42a3      	cmp	r3, r4
 800771a:	d9fa      	bls.n	8007712 <_free_r+0x42>
 800771c:	6811      	ldr	r1, [r2, #0]
 800771e:	1850      	adds	r0, r2, r1
 8007720:	42a0      	cmp	r0, r4
 8007722:	d10b      	bne.n	800773c <_free_r+0x6c>
 8007724:	6820      	ldr	r0, [r4, #0]
 8007726:	4401      	add	r1, r0
 8007728:	1850      	adds	r0, r2, r1
 800772a:	4283      	cmp	r3, r0
 800772c:	6011      	str	r1, [r2, #0]
 800772e:	d1e0      	bne.n	80076f2 <_free_r+0x22>
 8007730:	6818      	ldr	r0, [r3, #0]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	4408      	add	r0, r1
 8007736:	6010      	str	r0, [r2, #0]
 8007738:	6053      	str	r3, [r2, #4]
 800773a:	e7da      	b.n	80076f2 <_free_r+0x22>
 800773c:	d902      	bls.n	8007744 <_free_r+0x74>
 800773e:	230c      	movs	r3, #12
 8007740:	602b      	str	r3, [r5, #0]
 8007742:	e7d6      	b.n	80076f2 <_free_r+0x22>
 8007744:	6820      	ldr	r0, [r4, #0]
 8007746:	1821      	adds	r1, r4, r0
 8007748:	428b      	cmp	r3, r1
 800774a:	bf01      	itttt	eq
 800774c:	6819      	ldreq	r1, [r3, #0]
 800774e:	685b      	ldreq	r3, [r3, #4]
 8007750:	1809      	addeq	r1, r1, r0
 8007752:	6021      	streq	r1, [r4, #0]
 8007754:	6063      	str	r3, [r4, #4]
 8007756:	6054      	str	r4, [r2, #4]
 8007758:	e7cb      	b.n	80076f2 <_free_r+0x22>
 800775a:	bd38      	pop	{r3, r4, r5, pc}
 800775c:	20000a0c 	.word	0x20000a0c

08007760 <rshift>:
 8007760:	6903      	ldr	r3, [r0, #16]
 8007762:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007766:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800776a:	f100 0414 	add.w	r4, r0, #20
 800776e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007772:	dd46      	ble.n	8007802 <rshift+0xa2>
 8007774:	f011 011f 	ands.w	r1, r1, #31
 8007778:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800777c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007780:	d10c      	bne.n	800779c <rshift+0x3c>
 8007782:	4629      	mov	r1, r5
 8007784:	f100 0710 	add.w	r7, r0, #16
 8007788:	42b1      	cmp	r1, r6
 800778a:	d335      	bcc.n	80077f8 <rshift+0x98>
 800778c:	1a9b      	subs	r3, r3, r2
 800778e:	009b      	lsls	r3, r3, #2
 8007790:	1eea      	subs	r2, r5, #3
 8007792:	4296      	cmp	r6, r2
 8007794:	bf38      	it	cc
 8007796:	2300      	movcc	r3, #0
 8007798:	4423      	add	r3, r4
 800779a:	e015      	b.n	80077c8 <rshift+0x68>
 800779c:	46a1      	mov	r9, r4
 800779e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80077a2:	f1c1 0820 	rsb	r8, r1, #32
 80077a6:	40cf      	lsrs	r7, r1
 80077a8:	f105 0e04 	add.w	lr, r5, #4
 80077ac:	4576      	cmp	r6, lr
 80077ae:	46f4      	mov	ip, lr
 80077b0:	d816      	bhi.n	80077e0 <rshift+0x80>
 80077b2:	1a9a      	subs	r2, r3, r2
 80077b4:	0092      	lsls	r2, r2, #2
 80077b6:	3a04      	subs	r2, #4
 80077b8:	3501      	adds	r5, #1
 80077ba:	42ae      	cmp	r6, r5
 80077bc:	bf38      	it	cc
 80077be:	2200      	movcc	r2, #0
 80077c0:	18a3      	adds	r3, r4, r2
 80077c2:	50a7      	str	r7, [r4, r2]
 80077c4:	b107      	cbz	r7, 80077c8 <rshift+0x68>
 80077c6:	3304      	adds	r3, #4
 80077c8:	42a3      	cmp	r3, r4
 80077ca:	eba3 0204 	sub.w	r2, r3, r4
 80077ce:	bf08      	it	eq
 80077d0:	2300      	moveq	r3, #0
 80077d2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80077d6:	6102      	str	r2, [r0, #16]
 80077d8:	bf08      	it	eq
 80077da:	6143      	streq	r3, [r0, #20]
 80077dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80077e0:	f8dc c000 	ldr.w	ip, [ip]
 80077e4:	fa0c fc08 	lsl.w	ip, ip, r8
 80077e8:	ea4c 0707 	orr.w	r7, ip, r7
 80077ec:	f849 7b04 	str.w	r7, [r9], #4
 80077f0:	f85e 7b04 	ldr.w	r7, [lr], #4
 80077f4:	40cf      	lsrs	r7, r1
 80077f6:	e7d9      	b.n	80077ac <rshift+0x4c>
 80077f8:	f851 cb04 	ldr.w	ip, [r1], #4
 80077fc:	f847 cf04 	str.w	ip, [r7, #4]!
 8007800:	e7c2      	b.n	8007788 <rshift+0x28>
 8007802:	4623      	mov	r3, r4
 8007804:	e7e0      	b.n	80077c8 <rshift+0x68>

08007806 <__hexdig_fun>:
 8007806:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800780a:	2b09      	cmp	r3, #9
 800780c:	d802      	bhi.n	8007814 <__hexdig_fun+0xe>
 800780e:	3820      	subs	r0, #32
 8007810:	b2c0      	uxtb	r0, r0
 8007812:	4770      	bx	lr
 8007814:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8007818:	2b05      	cmp	r3, #5
 800781a:	d801      	bhi.n	8007820 <__hexdig_fun+0x1a>
 800781c:	3847      	subs	r0, #71	@ 0x47
 800781e:	e7f7      	b.n	8007810 <__hexdig_fun+0xa>
 8007820:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8007824:	2b05      	cmp	r3, #5
 8007826:	d801      	bhi.n	800782c <__hexdig_fun+0x26>
 8007828:	3827      	subs	r0, #39	@ 0x27
 800782a:	e7f1      	b.n	8007810 <__hexdig_fun+0xa>
 800782c:	2000      	movs	r0, #0
 800782e:	4770      	bx	lr

08007830 <__gethex>:
 8007830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007834:	468a      	mov	sl, r1
 8007836:	4690      	mov	r8, r2
 8007838:	b085      	sub	sp, #20
 800783a:	9302      	str	r3, [sp, #8]
 800783c:	680b      	ldr	r3, [r1, #0]
 800783e:	9001      	str	r0, [sp, #4]
 8007840:	1c9c      	adds	r4, r3, #2
 8007842:	46a1      	mov	r9, r4
 8007844:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007848:	2830      	cmp	r0, #48	@ 0x30
 800784a:	d0fa      	beq.n	8007842 <__gethex+0x12>
 800784c:	eba9 0303 	sub.w	r3, r9, r3
 8007850:	f1a3 0b02 	sub.w	fp, r3, #2
 8007854:	f7ff ffd7 	bl	8007806 <__hexdig_fun>
 8007858:	4605      	mov	r5, r0
 800785a:	2800      	cmp	r0, #0
 800785c:	d168      	bne.n	8007930 <__gethex+0x100>
 800785e:	2201      	movs	r2, #1
 8007860:	4648      	mov	r0, r9
 8007862:	499f      	ldr	r1, [pc, #636]	@ (8007ae0 <__gethex+0x2b0>)
 8007864:	f7ff fe62 	bl	800752c <strncmp>
 8007868:	4607      	mov	r7, r0
 800786a:	2800      	cmp	r0, #0
 800786c:	d167      	bne.n	800793e <__gethex+0x10e>
 800786e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8007872:	4626      	mov	r6, r4
 8007874:	f7ff ffc7 	bl	8007806 <__hexdig_fun>
 8007878:	2800      	cmp	r0, #0
 800787a:	d062      	beq.n	8007942 <__gethex+0x112>
 800787c:	4623      	mov	r3, r4
 800787e:	7818      	ldrb	r0, [r3, #0]
 8007880:	4699      	mov	r9, r3
 8007882:	2830      	cmp	r0, #48	@ 0x30
 8007884:	f103 0301 	add.w	r3, r3, #1
 8007888:	d0f9      	beq.n	800787e <__gethex+0x4e>
 800788a:	f7ff ffbc 	bl	8007806 <__hexdig_fun>
 800788e:	fab0 f580 	clz	r5, r0
 8007892:	f04f 0b01 	mov.w	fp, #1
 8007896:	096d      	lsrs	r5, r5, #5
 8007898:	464a      	mov	r2, r9
 800789a:	4616      	mov	r6, r2
 800789c:	7830      	ldrb	r0, [r6, #0]
 800789e:	3201      	adds	r2, #1
 80078a0:	f7ff ffb1 	bl	8007806 <__hexdig_fun>
 80078a4:	2800      	cmp	r0, #0
 80078a6:	d1f8      	bne.n	800789a <__gethex+0x6a>
 80078a8:	2201      	movs	r2, #1
 80078aa:	4630      	mov	r0, r6
 80078ac:	498c      	ldr	r1, [pc, #560]	@ (8007ae0 <__gethex+0x2b0>)
 80078ae:	f7ff fe3d 	bl	800752c <strncmp>
 80078b2:	2800      	cmp	r0, #0
 80078b4:	d13f      	bne.n	8007936 <__gethex+0x106>
 80078b6:	b944      	cbnz	r4, 80078ca <__gethex+0x9a>
 80078b8:	1c74      	adds	r4, r6, #1
 80078ba:	4622      	mov	r2, r4
 80078bc:	4616      	mov	r6, r2
 80078be:	7830      	ldrb	r0, [r6, #0]
 80078c0:	3201      	adds	r2, #1
 80078c2:	f7ff ffa0 	bl	8007806 <__hexdig_fun>
 80078c6:	2800      	cmp	r0, #0
 80078c8:	d1f8      	bne.n	80078bc <__gethex+0x8c>
 80078ca:	1ba4      	subs	r4, r4, r6
 80078cc:	00a7      	lsls	r7, r4, #2
 80078ce:	7833      	ldrb	r3, [r6, #0]
 80078d0:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80078d4:	2b50      	cmp	r3, #80	@ 0x50
 80078d6:	d13e      	bne.n	8007956 <__gethex+0x126>
 80078d8:	7873      	ldrb	r3, [r6, #1]
 80078da:	2b2b      	cmp	r3, #43	@ 0x2b
 80078dc:	d033      	beq.n	8007946 <__gethex+0x116>
 80078de:	2b2d      	cmp	r3, #45	@ 0x2d
 80078e0:	d034      	beq.n	800794c <__gethex+0x11c>
 80078e2:	2400      	movs	r4, #0
 80078e4:	1c71      	adds	r1, r6, #1
 80078e6:	7808      	ldrb	r0, [r1, #0]
 80078e8:	f7ff ff8d 	bl	8007806 <__hexdig_fun>
 80078ec:	1e43      	subs	r3, r0, #1
 80078ee:	b2db      	uxtb	r3, r3
 80078f0:	2b18      	cmp	r3, #24
 80078f2:	d830      	bhi.n	8007956 <__gethex+0x126>
 80078f4:	f1a0 0210 	sub.w	r2, r0, #16
 80078f8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80078fc:	f7ff ff83 	bl	8007806 <__hexdig_fun>
 8007900:	f100 3cff 	add.w	ip, r0, #4294967295
 8007904:	fa5f fc8c 	uxtb.w	ip, ip
 8007908:	f1bc 0f18 	cmp.w	ip, #24
 800790c:	f04f 030a 	mov.w	r3, #10
 8007910:	d91e      	bls.n	8007950 <__gethex+0x120>
 8007912:	b104      	cbz	r4, 8007916 <__gethex+0xe6>
 8007914:	4252      	negs	r2, r2
 8007916:	4417      	add	r7, r2
 8007918:	f8ca 1000 	str.w	r1, [sl]
 800791c:	b1ed      	cbz	r5, 800795a <__gethex+0x12a>
 800791e:	f1bb 0f00 	cmp.w	fp, #0
 8007922:	bf0c      	ite	eq
 8007924:	2506      	moveq	r5, #6
 8007926:	2500      	movne	r5, #0
 8007928:	4628      	mov	r0, r5
 800792a:	b005      	add	sp, #20
 800792c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007930:	2500      	movs	r5, #0
 8007932:	462c      	mov	r4, r5
 8007934:	e7b0      	b.n	8007898 <__gethex+0x68>
 8007936:	2c00      	cmp	r4, #0
 8007938:	d1c7      	bne.n	80078ca <__gethex+0x9a>
 800793a:	4627      	mov	r7, r4
 800793c:	e7c7      	b.n	80078ce <__gethex+0x9e>
 800793e:	464e      	mov	r6, r9
 8007940:	462f      	mov	r7, r5
 8007942:	2501      	movs	r5, #1
 8007944:	e7c3      	b.n	80078ce <__gethex+0x9e>
 8007946:	2400      	movs	r4, #0
 8007948:	1cb1      	adds	r1, r6, #2
 800794a:	e7cc      	b.n	80078e6 <__gethex+0xb6>
 800794c:	2401      	movs	r4, #1
 800794e:	e7fb      	b.n	8007948 <__gethex+0x118>
 8007950:	fb03 0002 	mla	r0, r3, r2, r0
 8007954:	e7ce      	b.n	80078f4 <__gethex+0xc4>
 8007956:	4631      	mov	r1, r6
 8007958:	e7de      	b.n	8007918 <__gethex+0xe8>
 800795a:	4629      	mov	r1, r5
 800795c:	eba6 0309 	sub.w	r3, r6, r9
 8007960:	3b01      	subs	r3, #1
 8007962:	2b07      	cmp	r3, #7
 8007964:	dc0a      	bgt.n	800797c <__gethex+0x14c>
 8007966:	9801      	ldr	r0, [sp, #4]
 8007968:	f000 faf4 	bl	8007f54 <_Balloc>
 800796c:	4604      	mov	r4, r0
 800796e:	b940      	cbnz	r0, 8007982 <__gethex+0x152>
 8007970:	4602      	mov	r2, r0
 8007972:	21e4      	movs	r1, #228	@ 0xe4
 8007974:	4b5b      	ldr	r3, [pc, #364]	@ (8007ae4 <__gethex+0x2b4>)
 8007976:	485c      	ldr	r0, [pc, #368]	@ (8007ae8 <__gethex+0x2b8>)
 8007978:	f001 fb68 	bl	800904c <__assert_func>
 800797c:	3101      	adds	r1, #1
 800797e:	105b      	asrs	r3, r3, #1
 8007980:	e7ef      	b.n	8007962 <__gethex+0x132>
 8007982:	2300      	movs	r3, #0
 8007984:	f100 0a14 	add.w	sl, r0, #20
 8007988:	4655      	mov	r5, sl
 800798a:	469b      	mov	fp, r3
 800798c:	45b1      	cmp	r9, r6
 800798e:	d337      	bcc.n	8007a00 <__gethex+0x1d0>
 8007990:	f845 bb04 	str.w	fp, [r5], #4
 8007994:	eba5 050a 	sub.w	r5, r5, sl
 8007998:	10ad      	asrs	r5, r5, #2
 800799a:	6125      	str	r5, [r4, #16]
 800799c:	4658      	mov	r0, fp
 800799e:	f000 fbcb 	bl	8008138 <__hi0bits>
 80079a2:	016d      	lsls	r5, r5, #5
 80079a4:	f8d8 6000 	ldr.w	r6, [r8]
 80079a8:	1a2d      	subs	r5, r5, r0
 80079aa:	42b5      	cmp	r5, r6
 80079ac:	dd54      	ble.n	8007a58 <__gethex+0x228>
 80079ae:	1bad      	subs	r5, r5, r6
 80079b0:	4629      	mov	r1, r5
 80079b2:	4620      	mov	r0, r4
 80079b4:	f000 ff53 	bl	800885e <__any_on>
 80079b8:	4681      	mov	r9, r0
 80079ba:	b178      	cbz	r0, 80079dc <__gethex+0x1ac>
 80079bc:	f04f 0901 	mov.w	r9, #1
 80079c0:	1e6b      	subs	r3, r5, #1
 80079c2:	1159      	asrs	r1, r3, #5
 80079c4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80079c8:	f003 021f 	and.w	r2, r3, #31
 80079cc:	fa09 f202 	lsl.w	r2, r9, r2
 80079d0:	420a      	tst	r2, r1
 80079d2:	d003      	beq.n	80079dc <__gethex+0x1ac>
 80079d4:	454b      	cmp	r3, r9
 80079d6:	dc36      	bgt.n	8007a46 <__gethex+0x216>
 80079d8:	f04f 0902 	mov.w	r9, #2
 80079dc:	4629      	mov	r1, r5
 80079de:	4620      	mov	r0, r4
 80079e0:	f7ff febe 	bl	8007760 <rshift>
 80079e4:	442f      	add	r7, r5
 80079e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80079ea:	42bb      	cmp	r3, r7
 80079ec:	da42      	bge.n	8007a74 <__gethex+0x244>
 80079ee:	4621      	mov	r1, r4
 80079f0:	9801      	ldr	r0, [sp, #4]
 80079f2:	f000 faef 	bl	8007fd4 <_Bfree>
 80079f6:	2300      	movs	r3, #0
 80079f8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80079fa:	25a3      	movs	r5, #163	@ 0xa3
 80079fc:	6013      	str	r3, [r2, #0]
 80079fe:	e793      	b.n	8007928 <__gethex+0xf8>
 8007a00:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8007a04:	2a2e      	cmp	r2, #46	@ 0x2e
 8007a06:	d012      	beq.n	8007a2e <__gethex+0x1fe>
 8007a08:	2b20      	cmp	r3, #32
 8007a0a:	d104      	bne.n	8007a16 <__gethex+0x1e6>
 8007a0c:	f845 bb04 	str.w	fp, [r5], #4
 8007a10:	f04f 0b00 	mov.w	fp, #0
 8007a14:	465b      	mov	r3, fp
 8007a16:	7830      	ldrb	r0, [r6, #0]
 8007a18:	9303      	str	r3, [sp, #12]
 8007a1a:	f7ff fef4 	bl	8007806 <__hexdig_fun>
 8007a1e:	9b03      	ldr	r3, [sp, #12]
 8007a20:	f000 000f 	and.w	r0, r0, #15
 8007a24:	4098      	lsls	r0, r3
 8007a26:	ea4b 0b00 	orr.w	fp, fp, r0
 8007a2a:	3304      	adds	r3, #4
 8007a2c:	e7ae      	b.n	800798c <__gethex+0x15c>
 8007a2e:	45b1      	cmp	r9, r6
 8007a30:	d8ea      	bhi.n	8007a08 <__gethex+0x1d8>
 8007a32:	2201      	movs	r2, #1
 8007a34:	4630      	mov	r0, r6
 8007a36:	492a      	ldr	r1, [pc, #168]	@ (8007ae0 <__gethex+0x2b0>)
 8007a38:	9303      	str	r3, [sp, #12]
 8007a3a:	f7ff fd77 	bl	800752c <strncmp>
 8007a3e:	9b03      	ldr	r3, [sp, #12]
 8007a40:	2800      	cmp	r0, #0
 8007a42:	d1e1      	bne.n	8007a08 <__gethex+0x1d8>
 8007a44:	e7a2      	b.n	800798c <__gethex+0x15c>
 8007a46:	4620      	mov	r0, r4
 8007a48:	1ea9      	subs	r1, r5, #2
 8007a4a:	f000 ff08 	bl	800885e <__any_on>
 8007a4e:	2800      	cmp	r0, #0
 8007a50:	d0c2      	beq.n	80079d8 <__gethex+0x1a8>
 8007a52:	f04f 0903 	mov.w	r9, #3
 8007a56:	e7c1      	b.n	80079dc <__gethex+0x1ac>
 8007a58:	da09      	bge.n	8007a6e <__gethex+0x23e>
 8007a5a:	1b75      	subs	r5, r6, r5
 8007a5c:	4621      	mov	r1, r4
 8007a5e:	462a      	mov	r2, r5
 8007a60:	9801      	ldr	r0, [sp, #4]
 8007a62:	f000 fccd 	bl	8008400 <__lshift>
 8007a66:	4604      	mov	r4, r0
 8007a68:	1b7f      	subs	r7, r7, r5
 8007a6a:	f100 0a14 	add.w	sl, r0, #20
 8007a6e:	f04f 0900 	mov.w	r9, #0
 8007a72:	e7b8      	b.n	80079e6 <__gethex+0x1b6>
 8007a74:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007a78:	42bd      	cmp	r5, r7
 8007a7a:	dd6f      	ble.n	8007b5c <__gethex+0x32c>
 8007a7c:	1bed      	subs	r5, r5, r7
 8007a7e:	42ae      	cmp	r6, r5
 8007a80:	dc34      	bgt.n	8007aec <__gethex+0x2bc>
 8007a82:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007a86:	2b02      	cmp	r3, #2
 8007a88:	d022      	beq.n	8007ad0 <__gethex+0x2a0>
 8007a8a:	2b03      	cmp	r3, #3
 8007a8c:	d024      	beq.n	8007ad8 <__gethex+0x2a8>
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d115      	bne.n	8007abe <__gethex+0x28e>
 8007a92:	42ae      	cmp	r6, r5
 8007a94:	d113      	bne.n	8007abe <__gethex+0x28e>
 8007a96:	2e01      	cmp	r6, #1
 8007a98:	d10b      	bne.n	8007ab2 <__gethex+0x282>
 8007a9a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007a9e:	9a02      	ldr	r2, [sp, #8]
 8007aa0:	2562      	movs	r5, #98	@ 0x62
 8007aa2:	6013      	str	r3, [r2, #0]
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	6123      	str	r3, [r4, #16]
 8007aa8:	f8ca 3000 	str.w	r3, [sl]
 8007aac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007aae:	601c      	str	r4, [r3, #0]
 8007ab0:	e73a      	b.n	8007928 <__gethex+0xf8>
 8007ab2:	4620      	mov	r0, r4
 8007ab4:	1e71      	subs	r1, r6, #1
 8007ab6:	f000 fed2 	bl	800885e <__any_on>
 8007aba:	2800      	cmp	r0, #0
 8007abc:	d1ed      	bne.n	8007a9a <__gethex+0x26a>
 8007abe:	4621      	mov	r1, r4
 8007ac0:	9801      	ldr	r0, [sp, #4]
 8007ac2:	f000 fa87 	bl	8007fd4 <_Bfree>
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007aca:	2550      	movs	r5, #80	@ 0x50
 8007acc:	6013      	str	r3, [r2, #0]
 8007ace:	e72b      	b.n	8007928 <__gethex+0xf8>
 8007ad0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d1f3      	bne.n	8007abe <__gethex+0x28e>
 8007ad6:	e7e0      	b.n	8007a9a <__gethex+0x26a>
 8007ad8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d1dd      	bne.n	8007a9a <__gethex+0x26a>
 8007ade:	e7ee      	b.n	8007abe <__gethex+0x28e>
 8007ae0:	080098be 	.word	0x080098be
 8007ae4:	08009a29 	.word	0x08009a29
 8007ae8:	08009a3a 	.word	0x08009a3a
 8007aec:	1e6f      	subs	r7, r5, #1
 8007aee:	f1b9 0f00 	cmp.w	r9, #0
 8007af2:	d130      	bne.n	8007b56 <__gethex+0x326>
 8007af4:	b127      	cbz	r7, 8007b00 <__gethex+0x2d0>
 8007af6:	4639      	mov	r1, r7
 8007af8:	4620      	mov	r0, r4
 8007afa:	f000 feb0 	bl	800885e <__any_on>
 8007afe:	4681      	mov	r9, r0
 8007b00:	2301      	movs	r3, #1
 8007b02:	4629      	mov	r1, r5
 8007b04:	1b76      	subs	r6, r6, r5
 8007b06:	2502      	movs	r5, #2
 8007b08:	117a      	asrs	r2, r7, #5
 8007b0a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007b0e:	f007 071f 	and.w	r7, r7, #31
 8007b12:	40bb      	lsls	r3, r7
 8007b14:	4213      	tst	r3, r2
 8007b16:	4620      	mov	r0, r4
 8007b18:	bf18      	it	ne
 8007b1a:	f049 0902 	orrne.w	r9, r9, #2
 8007b1e:	f7ff fe1f 	bl	8007760 <rshift>
 8007b22:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8007b26:	f1b9 0f00 	cmp.w	r9, #0
 8007b2a:	d047      	beq.n	8007bbc <__gethex+0x38c>
 8007b2c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007b30:	2b02      	cmp	r3, #2
 8007b32:	d015      	beq.n	8007b60 <__gethex+0x330>
 8007b34:	2b03      	cmp	r3, #3
 8007b36:	d017      	beq.n	8007b68 <__gethex+0x338>
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d109      	bne.n	8007b50 <__gethex+0x320>
 8007b3c:	f019 0f02 	tst.w	r9, #2
 8007b40:	d006      	beq.n	8007b50 <__gethex+0x320>
 8007b42:	f8da 3000 	ldr.w	r3, [sl]
 8007b46:	ea49 0903 	orr.w	r9, r9, r3
 8007b4a:	f019 0f01 	tst.w	r9, #1
 8007b4e:	d10e      	bne.n	8007b6e <__gethex+0x33e>
 8007b50:	f045 0510 	orr.w	r5, r5, #16
 8007b54:	e032      	b.n	8007bbc <__gethex+0x38c>
 8007b56:	f04f 0901 	mov.w	r9, #1
 8007b5a:	e7d1      	b.n	8007b00 <__gethex+0x2d0>
 8007b5c:	2501      	movs	r5, #1
 8007b5e:	e7e2      	b.n	8007b26 <__gethex+0x2f6>
 8007b60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b62:	f1c3 0301 	rsb	r3, r3, #1
 8007b66:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007b68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d0f0      	beq.n	8007b50 <__gethex+0x320>
 8007b6e:	f04f 0c00 	mov.w	ip, #0
 8007b72:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007b76:	f104 0314 	add.w	r3, r4, #20
 8007b7a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007b7e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007b82:	4618      	mov	r0, r3
 8007b84:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b88:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007b8c:	d01b      	beq.n	8007bc6 <__gethex+0x396>
 8007b8e:	3201      	adds	r2, #1
 8007b90:	6002      	str	r2, [r0, #0]
 8007b92:	2d02      	cmp	r5, #2
 8007b94:	f104 0314 	add.w	r3, r4, #20
 8007b98:	d13c      	bne.n	8007c14 <__gethex+0x3e4>
 8007b9a:	f8d8 2000 	ldr.w	r2, [r8]
 8007b9e:	3a01      	subs	r2, #1
 8007ba0:	42b2      	cmp	r2, r6
 8007ba2:	d109      	bne.n	8007bb8 <__gethex+0x388>
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	1171      	asrs	r1, r6, #5
 8007ba8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007bac:	f006 061f 	and.w	r6, r6, #31
 8007bb0:	fa02 f606 	lsl.w	r6, r2, r6
 8007bb4:	421e      	tst	r6, r3
 8007bb6:	d13a      	bne.n	8007c2e <__gethex+0x3fe>
 8007bb8:	f045 0520 	orr.w	r5, r5, #32
 8007bbc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007bbe:	601c      	str	r4, [r3, #0]
 8007bc0:	9b02      	ldr	r3, [sp, #8]
 8007bc2:	601f      	str	r7, [r3, #0]
 8007bc4:	e6b0      	b.n	8007928 <__gethex+0xf8>
 8007bc6:	4299      	cmp	r1, r3
 8007bc8:	f843 cc04 	str.w	ip, [r3, #-4]
 8007bcc:	d8d9      	bhi.n	8007b82 <__gethex+0x352>
 8007bce:	68a3      	ldr	r3, [r4, #8]
 8007bd0:	459b      	cmp	fp, r3
 8007bd2:	db17      	blt.n	8007c04 <__gethex+0x3d4>
 8007bd4:	6861      	ldr	r1, [r4, #4]
 8007bd6:	9801      	ldr	r0, [sp, #4]
 8007bd8:	3101      	adds	r1, #1
 8007bda:	f000 f9bb 	bl	8007f54 <_Balloc>
 8007bde:	4681      	mov	r9, r0
 8007be0:	b918      	cbnz	r0, 8007bea <__gethex+0x3ba>
 8007be2:	4602      	mov	r2, r0
 8007be4:	2184      	movs	r1, #132	@ 0x84
 8007be6:	4b19      	ldr	r3, [pc, #100]	@ (8007c4c <__gethex+0x41c>)
 8007be8:	e6c5      	b.n	8007976 <__gethex+0x146>
 8007bea:	6922      	ldr	r2, [r4, #16]
 8007bec:	f104 010c 	add.w	r1, r4, #12
 8007bf0:	3202      	adds	r2, #2
 8007bf2:	0092      	lsls	r2, r2, #2
 8007bf4:	300c      	adds	r0, #12
 8007bf6:	f7ff fd52 	bl	800769e <memcpy>
 8007bfa:	4621      	mov	r1, r4
 8007bfc:	9801      	ldr	r0, [sp, #4]
 8007bfe:	f000 f9e9 	bl	8007fd4 <_Bfree>
 8007c02:	464c      	mov	r4, r9
 8007c04:	6923      	ldr	r3, [r4, #16]
 8007c06:	1c5a      	adds	r2, r3, #1
 8007c08:	6122      	str	r2, [r4, #16]
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007c10:	615a      	str	r2, [r3, #20]
 8007c12:	e7be      	b.n	8007b92 <__gethex+0x362>
 8007c14:	6922      	ldr	r2, [r4, #16]
 8007c16:	455a      	cmp	r2, fp
 8007c18:	dd0b      	ble.n	8007c32 <__gethex+0x402>
 8007c1a:	2101      	movs	r1, #1
 8007c1c:	4620      	mov	r0, r4
 8007c1e:	f7ff fd9f 	bl	8007760 <rshift>
 8007c22:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007c26:	3701      	adds	r7, #1
 8007c28:	42bb      	cmp	r3, r7
 8007c2a:	f6ff aee0 	blt.w	80079ee <__gethex+0x1be>
 8007c2e:	2501      	movs	r5, #1
 8007c30:	e7c2      	b.n	8007bb8 <__gethex+0x388>
 8007c32:	f016 061f 	ands.w	r6, r6, #31
 8007c36:	d0fa      	beq.n	8007c2e <__gethex+0x3fe>
 8007c38:	4453      	add	r3, sl
 8007c3a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007c3e:	f000 fa7b 	bl	8008138 <__hi0bits>
 8007c42:	f1c6 0620 	rsb	r6, r6, #32
 8007c46:	42b0      	cmp	r0, r6
 8007c48:	dbe7      	blt.n	8007c1a <__gethex+0x3ea>
 8007c4a:	e7f0      	b.n	8007c2e <__gethex+0x3fe>
 8007c4c:	08009a29 	.word	0x08009a29

08007c50 <L_shift>:
 8007c50:	f1c2 0208 	rsb	r2, r2, #8
 8007c54:	0092      	lsls	r2, r2, #2
 8007c56:	b570      	push	{r4, r5, r6, lr}
 8007c58:	f1c2 0620 	rsb	r6, r2, #32
 8007c5c:	6843      	ldr	r3, [r0, #4]
 8007c5e:	6804      	ldr	r4, [r0, #0]
 8007c60:	fa03 f506 	lsl.w	r5, r3, r6
 8007c64:	432c      	orrs	r4, r5
 8007c66:	40d3      	lsrs	r3, r2
 8007c68:	6004      	str	r4, [r0, #0]
 8007c6a:	f840 3f04 	str.w	r3, [r0, #4]!
 8007c6e:	4288      	cmp	r0, r1
 8007c70:	d3f4      	bcc.n	8007c5c <L_shift+0xc>
 8007c72:	bd70      	pop	{r4, r5, r6, pc}

08007c74 <__match>:
 8007c74:	b530      	push	{r4, r5, lr}
 8007c76:	6803      	ldr	r3, [r0, #0]
 8007c78:	3301      	adds	r3, #1
 8007c7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c7e:	b914      	cbnz	r4, 8007c86 <__match+0x12>
 8007c80:	6003      	str	r3, [r0, #0]
 8007c82:	2001      	movs	r0, #1
 8007c84:	bd30      	pop	{r4, r5, pc}
 8007c86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c8a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8007c8e:	2d19      	cmp	r5, #25
 8007c90:	bf98      	it	ls
 8007c92:	3220      	addls	r2, #32
 8007c94:	42a2      	cmp	r2, r4
 8007c96:	d0f0      	beq.n	8007c7a <__match+0x6>
 8007c98:	2000      	movs	r0, #0
 8007c9a:	e7f3      	b.n	8007c84 <__match+0x10>

08007c9c <__hexnan>:
 8007c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ca0:	2500      	movs	r5, #0
 8007ca2:	680b      	ldr	r3, [r1, #0]
 8007ca4:	4682      	mov	sl, r0
 8007ca6:	115e      	asrs	r6, r3, #5
 8007ca8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007cac:	f013 031f 	ands.w	r3, r3, #31
 8007cb0:	bf18      	it	ne
 8007cb2:	3604      	addne	r6, #4
 8007cb4:	1f37      	subs	r7, r6, #4
 8007cb6:	4690      	mov	r8, r2
 8007cb8:	46b9      	mov	r9, r7
 8007cba:	463c      	mov	r4, r7
 8007cbc:	46ab      	mov	fp, r5
 8007cbe:	b087      	sub	sp, #28
 8007cc0:	6801      	ldr	r1, [r0, #0]
 8007cc2:	9301      	str	r3, [sp, #4]
 8007cc4:	f846 5c04 	str.w	r5, [r6, #-4]
 8007cc8:	9502      	str	r5, [sp, #8]
 8007cca:	784a      	ldrb	r2, [r1, #1]
 8007ccc:	1c4b      	adds	r3, r1, #1
 8007cce:	9303      	str	r3, [sp, #12]
 8007cd0:	b342      	cbz	r2, 8007d24 <__hexnan+0x88>
 8007cd2:	4610      	mov	r0, r2
 8007cd4:	9105      	str	r1, [sp, #20]
 8007cd6:	9204      	str	r2, [sp, #16]
 8007cd8:	f7ff fd95 	bl	8007806 <__hexdig_fun>
 8007cdc:	2800      	cmp	r0, #0
 8007cde:	d151      	bne.n	8007d84 <__hexnan+0xe8>
 8007ce0:	9a04      	ldr	r2, [sp, #16]
 8007ce2:	9905      	ldr	r1, [sp, #20]
 8007ce4:	2a20      	cmp	r2, #32
 8007ce6:	d818      	bhi.n	8007d1a <__hexnan+0x7e>
 8007ce8:	9b02      	ldr	r3, [sp, #8]
 8007cea:	459b      	cmp	fp, r3
 8007cec:	dd13      	ble.n	8007d16 <__hexnan+0x7a>
 8007cee:	454c      	cmp	r4, r9
 8007cf0:	d206      	bcs.n	8007d00 <__hexnan+0x64>
 8007cf2:	2d07      	cmp	r5, #7
 8007cf4:	dc04      	bgt.n	8007d00 <__hexnan+0x64>
 8007cf6:	462a      	mov	r2, r5
 8007cf8:	4649      	mov	r1, r9
 8007cfa:	4620      	mov	r0, r4
 8007cfc:	f7ff ffa8 	bl	8007c50 <L_shift>
 8007d00:	4544      	cmp	r4, r8
 8007d02:	d952      	bls.n	8007daa <__hexnan+0x10e>
 8007d04:	2300      	movs	r3, #0
 8007d06:	f1a4 0904 	sub.w	r9, r4, #4
 8007d0a:	f844 3c04 	str.w	r3, [r4, #-4]
 8007d0e:	461d      	mov	r5, r3
 8007d10:	464c      	mov	r4, r9
 8007d12:	f8cd b008 	str.w	fp, [sp, #8]
 8007d16:	9903      	ldr	r1, [sp, #12]
 8007d18:	e7d7      	b.n	8007cca <__hexnan+0x2e>
 8007d1a:	2a29      	cmp	r2, #41	@ 0x29
 8007d1c:	d157      	bne.n	8007dce <__hexnan+0x132>
 8007d1e:	3102      	adds	r1, #2
 8007d20:	f8ca 1000 	str.w	r1, [sl]
 8007d24:	f1bb 0f00 	cmp.w	fp, #0
 8007d28:	d051      	beq.n	8007dce <__hexnan+0x132>
 8007d2a:	454c      	cmp	r4, r9
 8007d2c:	d206      	bcs.n	8007d3c <__hexnan+0xa0>
 8007d2e:	2d07      	cmp	r5, #7
 8007d30:	dc04      	bgt.n	8007d3c <__hexnan+0xa0>
 8007d32:	462a      	mov	r2, r5
 8007d34:	4649      	mov	r1, r9
 8007d36:	4620      	mov	r0, r4
 8007d38:	f7ff ff8a 	bl	8007c50 <L_shift>
 8007d3c:	4544      	cmp	r4, r8
 8007d3e:	d936      	bls.n	8007dae <__hexnan+0x112>
 8007d40:	4623      	mov	r3, r4
 8007d42:	f1a8 0204 	sub.w	r2, r8, #4
 8007d46:	f853 1b04 	ldr.w	r1, [r3], #4
 8007d4a:	429f      	cmp	r7, r3
 8007d4c:	f842 1f04 	str.w	r1, [r2, #4]!
 8007d50:	d2f9      	bcs.n	8007d46 <__hexnan+0xaa>
 8007d52:	1b3b      	subs	r3, r7, r4
 8007d54:	f023 0303 	bic.w	r3, r3, #3
 8007d58:	3304      	adds	r3, #4
 8007d5a:	3401      	adds	r4, #1
 8007d5c:	3e03      	subs	r6, #3
 8007d5e:	42b4      	cmp	r4, r6
 8007d60:	bf88      	it	hi
 8007d62:	2304      	movhi	r3, #4
 8007d64:	2200      	movs	r2, #0
 8007d66:	4443      	add	r3, r8
 8007d68:	f843 2b04 	str.w	r2, [r3], #4
 8007d6c:	429f      	cmp	r7, r3
 8007d6e:	d2fb      	bcs.n	8007d68 <__hexnan+0xcc>
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	b91b      	cbnz	r3, 8007d7c <__hexnan+0xe0>
 8007d74:	4547      	cmp	r7, r8
 8007d76:	d128      	bne.n	8007dca <__hexnan+0x12e>
 8007d78:	2301      	movs	r3, #1
 8007d7a:	603b      	str	r3, [r7, #0]
 8007d7c:	2005      	movs	r0, #5
 8007d7e:	b007      	add	sp, #28
 8007d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d84:	3501      	adds	r5, #1
 8007d86:	2d08      	cmp	r5, #8
 8007d88:	f10b 0b01 	add.w	fp, fp, #1
 8007d8c:	dd06      	ble.n	8007d9c <__hexnan+0x100>
 8007d8e:	4544      	cmp	r4, r8
 8007d90:	d9c1      	bls.n	8007d16 <__hexnan+0x7a>
 8007d92:	2300      	movs	r3, #0
 8007d94:	2501      	movs	r5, #1
 8007d96:	f844 3c04 	str.w	r3, [r4, #-4]
 8007d9a:	3c04      	subs	r4, #4
 8007d9c:	6822      	ldr	r2, [r4, #0]
 8007d9e:	f000 000f 	and.w	r0, r0, #15
 8007da2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007da6:	6020      	str	r0, [r4, #0]
 8007da8:	e7b5      	b.n	8007d16 <__hexnan+0x7a>
 8007daa:	2508      	movs	r5, #8
 8007dac:	e7b3      	b.n	8007d16 <__hexnan+0x7a>
 8007dae:	9b01      	ldr	r3, [sp, #4]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d0dd      	beq.n	8007d70 <__hexnan+0xd4>
 8007db4:	f04f 32ff 	mov.w	r2, #4294967295
 8007db8:	f1c3 0320 	rsb	r3, r3, #32
 8007dbc:	40da      	lsrs	r2, r3
 8007dbe:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007dc2:	4013      	ands	r3, r2
 8007dc4:	f846 3c04 	str.w	r3, [r6, #-4]
 8007dc8:	e7d2      	b.n	8007d70 <__hexnan+0xd4>
 8007dca:	3f04      	subs	r7, #4
 8007dcc:	e7d0      	b.n	8007d70 <__hexnan+0xd4>
 8007dce:	2004      	movs	r0, #4
 8007dd0:	e7d5      	b.n	8007d7e <__hexnan+0xe2>
	...

08007dd4 <sbrk_aligned>:
 8007dd4:	b570      	push	{r4, r5, r6, lr}
 8007dd6:	4e0f      	ldr	r6, [pc, #60]	@ (8007e14 <sbrk_aligned+0x40>)
 8007dd8:	460c      	mov	r4, r1
 8007dda:	6831      	ldr	r1, [r6, #0]
 8007ddc:	4605      	mov	r5, r0
 8007dde:	b911      	cbnz	r1, 8007de6 <sbrk_aligned+0x12>
 8007de0:	f001 f916 	bl	8009010 <_sbrk_r>
 8007de4:	6030      	str	r0, [r6, #0]
 8007de6:	4621      	mov	r1, r4
 8007de8:	4628      	mov	r0, r5
 8007dea:	f001 f911 	bl	8009010 <_sbrk_r>
 8007dee:	1c43      	adds	r3, r0, #1
 8007df0:	d103      	bne.n	8007dfa <sbrk_aligned+0x26>
 8007df2:	f04f 34ff 	mov.w	r4, #4294967295
 8007df6:	4620      	mov	r0, r4
 8007df8:	bd70      	pop	{r4, r5, r6, pc}
 8007dfa:	1cc4      	adds	r4, r0, #3
 8007dfc:	f024 0403 	bic.w	r4, r4, #3
 8007e00:	42a0      	cmp	r0, r4
 8007e02:	d0f8      	beq.n	8007df6 <sbrk_aligned+0x22>
 8007e04:	1a21      	subs	r1, r4, r0
 8007e06:	4628      	mov	r0, r5
 8007e08:	f001 f902 	bl	8009010 <_sbrk_r>
 8007e0c:	3001      	adds	r0, #1
 8007e0e:	d1f2      	bne.n	8007df6 <sbrk_aligned+0x22>
 8007e10:	e7ef      	b.n	8007df2 <sbrk_aligned+0x1e>
 8007e12:	bf00      	nop
 8007e14:	20000a08 	.word	0x20000a08

08007e18 <_malloc_r>:
 8007e18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e1c:	1ccd      	adds	r5, r1, #3
 8007e1e:	f025 0503 	bic.w	r5, r5, #3
 8007e22:	3508      	adds	r5, #8
 8007e24:	2d0c      	cmp	r5, #12
 8007e26:	bf38      	it	cc
 8007e28:	250c      	movcc	r5, #12
 8007e2a:	2d00      	cmp	r5, #0
 8007e2c:	4606      	mov	r6, r0
 8007e2e:	db01      	blt.n	8007e34 <_malloc_r+0x1c>
 8007e30:	42a9      	cmp	r1, r5
 8007e32:	d904      	bls.n	8007e3e <_malloc_r+0x26>
 8007e34:	230c      	movs	r3, #12
 8007e36:	6033      	str	r3, [r6, #0]
 8007e38:	2000      	movs	r0, #0
 8007e3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e3e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007f14 <_malloc_r+0xfc>
 8007e42:	f000 f87b 	bl	8007f3c <__malloc_lock>
 8007e46:	f8d8 3000 	ldr.w	r3, [r8]
 8007e4a:	461c      	mov	r4, r3
 8007e4c:	bb44      	cbnz	r4, 8007ea0 <_malloc_r+0x88>
 8007e4e:	4629      	mov	r1, r5
 8007e50:	4630      	mov	r0, r6
 8007e52:	f7ff ffbf 	bl	8007dd4 <sbrk_aligned>
 8007e56:	1c43      	adds	r3, r0, #1
 8007e58:	4604      	mov	r4, r0
 8007e5a:	d158      	bne.n	8007f0e <_malloc_r+0xf6>
 8007e5c:	f8d8 4000 	ldr.w	r4, [r8]
 8007e60:	4627      	mov	r7, r4
 8007e62:	2f00      	cmp	r7, #0
 8007e64:	d143      	bne.n	8007eee <_malloc_r+0xd6>
 8007e66:	2c00      	cmp	r4, #0
 8007e68:	d04b      	beq.n	8007f02 <_malloc_r+0xea>
 8007e6a:	6823      	ldr	r3, [r4, #0]
 8007e6c:	4639      	mov	r1, r7
 8007e6e:	4630      	mov	r0, r6
 8007e70:	eb04 0903 	add.w	r9, r4, r3
 8007e74:	f001 f8cc 	bl	8009010 <_sbrk_r>
 8007e78:	4581      	cmp	r9, r0
 8007e7a:	d142      	bne.n	8007f02 <_malloc_r+0xea>
 8007e7c:	6821      	ldr	r1, [r4, #0]
 8007e7e:	4630      	mov	r0, r6
 8007e80:	1a6d      	subs	r5, r5, r1
 8007e82:	4629      	mov	r1, r5
 8007e84:	f7ff ffa6 	bl	8007dd4 <sbrk_aligned>
 8007e88:	3001      	adds	r0, #1
 8007e8a:	d03a      	beq.n	8007f02 <_malloc_r+0xea>
 8007e8c:	6823      	ldr	r3, [r4, #0]
 8007e8e:	442b      	add	r3, r5
 8007e90:	6023      	str	r3, [r4, #0]
 8007e92:	f8d8 3000 	ldr.w	r3, [r8]
 8007e96:	685a      	ldr	r2, [r3, #4]
 8007e98:	bb62      	cbnz	r2, 8007ef4 <_malloc_r+0xdc>
 8007e9a:	f8c8 7000 	str.w	r7, [r8]
 8007e9e:	e00f      	b.n	8007ec0 <_malloc_r+0xa8>
 8007ea0:	6822      	ldr	r2, [r4, #0]
 8007ea2:	1b52      	subs	r2, r2, r5
 8007ea4:	d420      	bmi.n	8007ee8 <_malloc_r+0xd0>
 8007ea6:	2a0b      	cmp	r2, #11
 8007ea8:	d917      	bls.n	8007eda <_malloc_r+0xc2>
 8007eaa:	1961      	adds	r1, r4, r5
 8007eac:	42a3      	cmp	r3, r4
 8007eae:	6025      	str	r5, [r4, #0]
 8007eb0:	bf18      	it	ne
 8007eb2:	6059      	strne	r1, [r3, #4]
 8007eb4:	6863      	ldr	r3, [r4, #4]
 8007eb6:	bf08      	it	eq
 8007eb8:	f8c8 1000 	streq.w	r1, [r8]
 8007ebc:	5162      	str	r2, [r4, r5]
 8007ebe:	604b      	str	r3, [r1, #4]
 8007ec0:	4630      	mov	r0, r6
 8007ec2:	f000 f841 	bl	8007f48 <__malloc_unlock>
 8007ec6:	f104 000b 	add.w	r0, r4, #11
 8007eca:	1d23      	adds	r3, r4, #4
 8007ecc:	f020 0007 	bic.w	r0, r0, #7
 8007ed0:	1ac2      	subs	r2, r0, r3
 8007ed2:	bf1c      	itt	ne
 8007ed4:	1a1b      	subne	r3, r3, r0
 8007ed6:	50a3      	strne	r3, [r4, r2]
 8007ed8:	e7af      	b.n	8007e3a <_malloc_r+0x22>
 8007eda:	6862      	ldr	r2, [r4, #4]
 8007edc:	42a3      	cmp	r3, r4
 8007ede:	bf0c      	ite	eq
 8007ee0:	f8c8 2000 	streq.w	r2, [r8]
 8007ee4:	605a      	strne	r2, [r3, #4]
 8007ee6:	e7eb      	b.n	8007ec0 <_malloc_r+0xa8>
 8007ee8:	4623      	mov	r3, r4
 8007eea:	6864      	ldr	r4, [r4, #4]
 8007eec:	e7ae      	b.n	8007e4c <_malloc_r+0x34>
 8007eee:	463c      	mov	r4, r7
 8007ef0:	687f      	ldr	r7, [r7, #4]
 8007ef2:	e7b6      	b.n	8007e62 <_malloc_r+0x4a>
 8007ef4:	461a      	mov	r2, r3
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	42a3      	cmp	r3, r4
 8007efa:	d1fb      	bne.n	8007ef4 <_malloc_r+0xdc>
 8007efc:	2300      	movs	r3, #0
 8007efe:	6053      	str	r3, [r2, #4]
 8007f00:	e7de      	b.n	8007ec0 <_malloc_r+0xa8>
 8007f02:	230c      	movs	r3, #12
 8007f04:	4630      	mov	r0, r6
 8007f06:	6033      	str	r3, [r6, #0]
 8007f08:	f000 f81e 	bl	8007f48 <__malloc_unlock>
 8007f0c:	e794      	b.n	8007e38 <_malloc_r+0x20>
 8007f0e:	6005      	str	r5, [r0, #0]
 8007f10:	e7d6      	b.n	8007ec0 <_malloc_r+0xa8>
 8007f12:	bf00      	nop
 8007f14:	20000a0c 	.word	0x20000a0c

08007f18 <__ascii_mbtowc>:
 8007f18:	b082      	sub	sp, #8
 8007f1a:	b901      	cbnz	r1, 8007f1e <__ascii_mbtowc+0x6>
 8007f1c:	a901      	add	r1, sp, #4
 8007f1e:	b142      	cbz	r2, 8007f32 <__ascii_mbtowc+0x1a>
 8007f20:	b14b      	cbz	r3, 8007f36 <__ascii_mbtowc+0x1e>
 8007f22:	7813      	ldrb	r3, [r2, #0]
 8007f24:	600b      	str	r3, [r1, #0]
 8007f26:	7812      	ldrb	r2, [r2, #0]
 8007f28:	1e10      	subs	r0, r2, #0
 8007f2a:	bf18      	it	ne
 8007f2c:	2001      	movne	r0, #1
 8007f2e:	b002      	add	sp, #8
 8007f30:	4770      	bx	lr
 8007f32:	4610      	mov	r0, r2
 8007f34:	e7fb      	b.n	8007f2e <__ascii_mbtowc+0x16>
 8007f36:	f06f 0001 	mvn.w	r0, #1
 8007f3a:	e7f8      	b.n	8007f2e <__ascii_mbtowc+0x16>

08007f3c <__malloc_lock>:
 8007f3c:	4801      	ldr	r0, [pc, #4]	@ (8007f44 <__malloc_lock+0x8>)
 8007f3e:	f7ff bba4 	b.w	800768a <__retarget_lock_acquire_recursive>
 8007f42:	bf00      	nop
 8007f44:	20000a04 	.word	0x20000a04

08007f48 <__malloc_unlock>:
 8007f48:	4801      	ldr	r0, [pc, #4]	@ (8007f50 <__malloc_unlock+0x8>)
 8007f4a:	f7ff bb9f 	b.w	800768c <__retarget_lock_release_recursive>
 8007f4e:	bf00      	nop
 8007f50:	20000a04 	.word	0x20000a04

08007f54 <_Balloc>:
 8007f54:	b570      	push	{r4, r5, r6, lr}
 8007f56:	69c6      	ldr	r6, [r0, #28]
 8007f58:	4604      	mov	r4, r0
 8007f5a:	460d      	mov	r5, r1
 8007f5c:	b976      	cbnz	r6, 8007f7c <_Balloc+0x28>
 8007f5e:	2010      	movs	r0, #16
 8007f60:	f001 f8a6 	bl	80090b0 <malloc>
 8007f64:	4602      	mov	r2, r0
 8007f66:	61e0      	str	r0, [r4, #28]
 8007f68:	b920      	cbnz	r0, 8007f74 <_Balloc+0x20>
 8007f6a:	216b      	movs	r1, #107	@ 0x6b
 8007f6c:	4b17      	ldr	r3, [pc, #92]	@ (8007fcc <_Balloc+0x78>)
 8007f6e:	4818      	ldr	r0, [pc, #96]	@ (8007fd0 <_Balloc+0x7c>)
 8007f70:	f001 f86c 	bl	800904c <__assert_func>
 8007f74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f78:	6006      	str	r6, [r0, #0]
 8007f7a:	60c6      	str	r6, [r0, #12]
 8007f7c:	69e6      	ldr	r6, [r4, #28]
 8007f7e:	68f3      	ldr	r3, [r6, #12]
 8007f80:	b183      	cbz	r3, 8007fa4 <_Balloc+0x50>
 8007f82:	69e3      	ldr	r3, [r4, #28]
 8007f84:	68db      	ldr	r3, [r3, #12]
 8007f86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007f8a:	b9b8      	cbnz	r0, 8007fbc <_Balloc+0x68>
 8007f8c:	2101      	movs	r1, #1
 8007f8e:	fa01 f605 	lsl.w	r6, r1, r5
 8007f92:	1d72      	adds	r2, r6, #5
 8007f94:	4620      	mov	r0, r4
 8007f96:	0092      	lsls	r2, r2, #2
 8007f98:	f001 f876 	bl	8009088 <_calloc_r>
 8007f9c:	b160      	cbz	r0, 8007fb8 <_Balloc+0x64>
 8007f9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007fa2:	e00e      	b.n	8007fc2 <_Balloc+0x6e>
 8007fa4:	2221      	movs	r2, #33	@ 0x21
 8007fa6:	2104      	movs	r1, #4
 8007fa8:	4620      	mov	r0, r4
 8007faa:	f001 f86d 	bl	8009088 <_calloc_r>
 8007fae:	69e3      	ldr	r3, [r4, #28]
 8007fb0:	60f0      	str	r0, [r6, #12]
 8007fb2:	68db      	ldr	r3, [r3, #12]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d1e4      	bne.n	8007f82 <_Balloc+0x2e>
 8007fb8:	2000      	movs	r0, #0
 8007fba:	bd70      	pop	{r4, r5, r6, pc}
 8007fbc:	6802      	ldr	r2, [r0, #0]
 8007fbe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007fc8:	e7f7      	b.n	8007fba <_Balloc+0x66>
 8007fca:	bf00      	nop
 8007fcc:	08009a9a 	.word	0x08009a9a
 8007fd0:	08009ab1 	.word	0x08009ab1

08007fd4 <_Bfree>:
 8007fd4:	b570      	push	{r4, r5, r6, lr}
 8007fd6:	69c6      	ldr	r6, [r0, #28]
 8007fd8:	4605      	mov	r5, r0
 8007fda:	460c      	mov	r4, r1
 8007fdc:	b976      	cbnz	r6, 8007ffc <_Bfree+0x28>
 8007fde:	2010      	movs	r0, #16
 8007fe0:	f001 f866 	bl	80090b0 <malloc>
 8007fe4:	4602      	mov	r2, r0
 8007fe6:	61e8      	str	r0, [r5, #28]
 8007fe8:	b920      	cbnz	r0, 8007ff4 <_Bfree+0x20>
 8007fea:	218f      	movs	r1, #143	@ 0x8f
 8007fec:	4b08      	ldr	r3, [pc, #32]	@ (8008010 <_Bfree+0x3c>)
 8007fee:	4809      	ldr	r0, [pc, #36]	@ (8008014 <_Bfree+0x40>)
 8007ff0:	f001 f82c 	bl	800904c <__assert_func>
 8007ff4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ff8:	6006      	str	r6, [r0, #0]
 8007ffa:	60c6      	str	r6, [r0, #12]
 8007ffc:	b13c      	cbz	r4, 800800e <_Bfree+0x3a>
 8007ffe:	69eb      	ldr	r3, [r5, #28]
 8008000:	6862      	ldr	r2, [r4, #4]
 8008002:	68db      	ldr	r3, [r3, #12]
 8008004:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008008:	6021      	str	r1, [r4, #0]
 800800a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800800e:	bd70      	pop	{r4, r5, r6, pc}
 8008010:	08009a9a 	.word	0x08009a9a
 8008014:	08009ab1 	.word	0x08009ab1

08008018 <__multadd>:
 8008018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800801c:	4607      	mov	r7, r0
 800801e:	460c      	mov	r4, r1
 8008020:	461e      	mov	r6, r3
 8008022:	2000      	movs	r0, #0
 8008024:	690d      	ldr	r5, [r1, #16]
 8008026:	f101 0c14 	add.w	ip, r1, #20
 800802a:	f8dc 3000 	ldr.w	r3, [ip]
 800802e:	3001      	adds	r0, #1
 8008030:	b299      	uxth	r1, r3
 8008032:	fb02 6101 	mla	r1, r2, r1, r6
 8008036:	0c1e      	lsrs	r6, r3, #16
 8008038:	0c0b      	lsrs	r3, r1, #16
 800803a:	fb02 3306 	mla	r3, r2, r6, r3
 800803e:	b289      	uxth	r1, r1
 8008040:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008044:	4285      	cmp	r5, r0
 8008046:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800804a:	f84c 1b04 	str.w	r1, [ip], #4
 800804e:	dcec      	bgt.n	800802a <__multadd+0x12>
 8008050:	b30e      	cbz	r6, 8008096 <__multadd+0x7e>
 8008052:	68a3      	ldr	r3, [r4, #8]
 8008054:	42ab      	cmp	r3, r5
 8008056:	dc19      	bgt.n	800808c <__multadd+0x74>
 8008058:	6861      	ldr	r1, [r4, #4]
 800805a:	4638      	mov	r0, r7
 800805c:	3101      	adds	r1, #1
 800805e:	f7ff ff79 	bl	8007f54 <_Balloc>
 8008062:	4680      	mov	r8, r0
 8008064:	b928      	cbnz	r0, 8008072 <__multadd+0x5a>
 8008066:	4602      	mov	r2, r0
 8008068:	21ba      	movs	r1, #186	@ 0xba
 800806a:	4b0c      	ldr	r3, [pc, #48]	@ (800809c <__multadd+0x84>)
 800806c:	480c      	ldr	r0, [pc, #48]	@ (80080a0 <__multadd+0x88>)
 800806e:	f000 ffed 	bl	800904c <__assert_func>
 8008072:	6922      	ldr	r2, [r4, #16]
 8008074:	f104 010c 	add.w	r1, r4, #12
 8008078:	3202      	adds	r2, #2
 800807a:	0092      	lsls	r2, r2, #2
 800807c:	300c      	adds	r0, #12
 800807e:	f7ff fb0e 	bl	800769e <memcpy>
 8008082:	4621      	mov	r1, r4
 8008084:	4638      	mov	r0, r7
 8008086:	f7ff ffa5 	bl	8007fd4 <_Bfree>
 800808a:	4644      	mov	r4, r8
 800808c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008090:	3501      	adds	r5, #1
 8008092:	615e      	str	r6, [r3, #20]
 8008094:	6125      	str	r5, [r4, #16]
 8008096:	4620      	mov	r0, r4
 8008098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800809c:	08009a29 	.word	0x08009a29
 80080a0:	08009ab1 	.word	0x08009ab1

080080a4 <__s2b>:
 80080a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080a8:	4615      	mov	r5, r2
 80080aa:	2209      	movs	r2, #9
 80080ac:	461f      	mov	r7, r3
 80080ae:	3308      	adds	r3, #8
 80080b0:	460c      	mov	r4, r1
 80080b2:	fb93 f3f2 	sdiv	r3, r3, r2
 80080b6:	4606      	mov	r6, r0
 80080b8:	2201      	movs	r2, #1
 80080ba:	2100      	movs	r1, #0
 80080bc:	429a      	cmp	r2, r3
 80080be:	db09      	blt.n	80080d4 <__s2b+0x30>
 80080c0:	4630      	mov	r0, r6
 80080c2:	f7ff ff47 	bl	8007f54 <_Balloc>
 80080c6:	b940      	cbnz	r0, 80080da <__s2b+0x36>
 80080c8:	4602      	mov	r2, r0
 80080ca:	21d3      	movs	r1, #211	@ 0xd3
 80080cc:	4b18      	ldr	r3, [pc, #96]	@ (8008130 <__s2b+0x8c>)
 80080ce:	4819      	ldr	r0, [pc, #100]	@ (8008134 <__s2b+0x90>)
 80080d0:	f000 ffbc 	bl	800904c <__assert_func>
 80080d4:	0052      	lsls	r2, r2, #1
 80080d6:	3101      	adds	r1, #1
 80080d8:	e7f0      	b.n	80080bc <__s2b+0x18>
 80080da:	9b08      	ldr	r3, [sp, #32]
 80080dc:	2d09      	cmp	r5, #9
 80080de:	6143      	str	r3, [r0, #20]
 80080e0:	f04f 0301 	mov.w	r3, #1
 80080e4:	6103      	str	r3, [r0, #16]
 80080e6:	dd16      	ble.n	8008116 <__s2b+0x72>
 80080e8:	f104 0909 	add.w	r9, r4, #9
 80080ec:	46c8      	mov	r8, r9
 80080ee:	442c      	add	r4, r5
 80080f0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80080f4:	4601      	mov	r1, r0
 80080f6:	220a      	movs	r2, #10
 80080f8:	4630      	mov	r0, r6
 80080fa:	3b30      	subs	r3, #48	@ 0x30
 80080fc:	f7ff ff8c 	bl	8008018 <__multadd>
 8008100:	45a0      	cmp	r8, r4
 8008102:	d1f5      	bne.n	80080f0 <__s2b+0x4c>
 8008104:	f1a5 0408 	sub.w	r4, r5, #8
 8008108:	444c      	add	r4, r9
 800810a:	1b2d      	subs	r5, r5, r4
 800810c:	1963      	adds	r3, r4, r5
 800810e:	42bb      	cmp	r3, r7
 8008110:	db04      	blt.n	800811c <__s2b+0x78>
 8008112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008116:	2509      	movs	r5, #9
 8008118:	340a      	adds	r4, #10
 800811a:	e7f6      	b.n	800810a <__s2b+0x66>
 800811c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008120:	4601      	mov	r1, r0
 8008122:	220a      	movs	r2, #10
 8008124:	4630      	mov	r0, r6
 8008126:	3b30      	subs	r3, #48	@ 0x30
 8008128:	f7ff ff76 	bl	8008018 <__multadd>
 800812c:	e7ee      	b.n	800810c <__s2b+0x68>
 800812e:	bf00      	nop
 8008130:	08009a29 	.word	0x08009a29
 8008134:	08009ab1 	.word	0x08009ab1

08008138 <__hi0bits>:
 8008138:	4603      	mov	r3, r0
 800813a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800813e:	bf3a      	itte	cc
 8008140:	0403      	lslcc	r3, r0, #16
 8008142:	2010      	movcc	r0, #16
 8008144:	2000      	movcs	r0, #0
 8008146:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800814a:	bf3c      	itt	cc
 800814c:	021b      	lslcc	r3, r3, #8
 800814e:	3008      	addcc	r0, #8
 8008150:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008154:	bf3c      	itt	cc
 8008156:	011b      	lslcc	r3, r3, #4
 8008158:	3004      	addcc	r0, #4
 800815a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800815e:	bf3c      	itt	cc
 8008160:	009b      	lslcc	r3, r3, #2
 8008162:	3002      	addcc	r0, #2
 8008164:	2b00      	cmp	r3, #0
 8008166:	db05      	blt.n	8008174 <__hi0bits+0x3c>
 8008168:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800816c:	f100 0001 	add.w	r0, r0, #1
 8008170:	bf08      	it	eq
 8008172:	2020      	moveq	r0, #32
 8008174:	4770      	bx	lr

08008176 <__lo0bits>:
 8008176:	6803      	ldr	r3, [r0, #0]
 8008178:	4602      	mov	r2, r0
 800817a:	f013 0007 	ands.w	r0, r3, #7
 800817e:	d00b      	beq.n	8008198 <__lo0bits+0x22>
 8008180:	07d9      	lsls	r1, r3, #31
 8008182:	d421      	bmi.n	80081c8 <__lo0bits+0x52>
 8008184:	0798      	lsls	r0, r3, #30
 8008186:	bf49      	itett	mi
 8008188:	085b      	lsrmi	r3, r3, #1
 800818a:	089b      	lsrpl	r3, r3, #2
 800818c:	2001      	movmi	r0, #1
 800818e:	6013      	strmi	r3, [r2, #0]
 8008190:	bf5c      	itt	pl
 8008192:	2002      	movpl	r0, #2
 8008194:	6013      	strpl	r3, [r2, #0]
 8008196:	4770      	bx	lr
 8008198:	b299      	uxth	r1, r3
 800819a:	b909      	cbnz	r1, 80081a0 <__lo0bits+0x2a>
 800819c:	2010      	movs	r0, #16
 800819e:	0c1b      	lsrs	r3, r3, #16
 80081a0:	b2d9      	uxtb	r1, r3
 80081a2:	b909      	cbnz	r1, 80081a8 <__lo0bits+0x32>
 80081a4:	3008      	adds	r0, #8
 80081a6:	0a1b      	lsrs	r3, r3, #8
 80081a8:	0719      	lsls	r1, r3, #28
 80081aa:	bf04      	itt	eq
 80081ac:	091b      	lsreq	r3, r3, #4
 80081ae:	3004      	addeq	r0, #4
 80081b0:	0799      	lsls	r1, r3, #30
 80081b2:	bf04      	itt	eq
 80081b4:	089b      	lsreq	r3, r3, #2
 80081b6:	3002      	addeq	r0, #2
 80081b8:	07d9      	lsls	r1, r3, #31
 80081ba:	d403      	bmi.n	80081c4 <__lo0bits+0x4e>
 80081bc:	085b      	lsrs	r3, r3, #1
 80081be:	f100 0001 	add.w	r0, r0, #1
 80081c2:	d003      	beq.n	80081cc <__lo0bits+0x56>
 80081c4:	6013      	str	r3, [r2, #0]
 80081c6:	4770      	bx	lr
 80081c8:	2000      	movs	r0, #0
 80081ca:	4770      	bx	lr
 80081cc:	2020      	movs	r0, #32
 80081ce:	4770      	bx	lr

080081d0 <__i2b>:
 80081d0:	b510      	push	{r4, lr}
 80081d2:	460c      	mov	r4, r1
 80081d4:	2101      	movs	r1, #1
 80081d6:	f7ff febd 	bl	8007f54 <_Balloc>
 80081da:	4602      	mov	r2, r0
 80081dc:	b928      	cbnz	r0, 80081ea <__i2b+0x1a>
 80081de:	f240 1145 	movw	r1, #325	@ 0x145
 80081e2:	4b04      	ldr	r3, [pc, #16]	@ (80081f4 <__i2b+0x24>)
 80081e4:	4804      	ldr	r0, [pc, #16]	@ (80081f8 <__i2b+0x28>)
 80081e6:	f000 ff31 	bl	800904c <__assert_func>
 80081ea:	2301      	movs	r3, #1
 80081ec:	6144      	str	r4, [r0, #20]
 80081ee:	6103      	str	r3, [r0, #16]
 80081f0:	bd10      	pop	{r4, pc}
 80081f2:	bf00      	nop
 80081f4:	08009a29 	.word	0x08009a29
 80081f8:	08009ab1 	.word	0x08009ab1

080081fc <__multiply>:
 80081fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008200:	4614      	mov	r4, r2
 8008202:	690a      	ldr	r2, [r1, #16]
 8008204:	6923      	ldr	r3, [r4, #16]
 8008206:	460f      	mov	r7, r1
 8008208:	429a      	cmp	r2, r3
 800820a:	bfa2      	ittt	ge
 800820c:	4623      	movge	r3, r4
 800820e:	460c      	movge	r4, r1
 8008210:	461f      	movge	r7, r3
 8008212:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008216:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800821a:	68a3      	ldr	r3, [r4, #8]
 800821c:	6861      	ldr	r1, [r4, #4]
 800821e:	eb0a 0609 	add.w	r6, sl, r9
 8008222:	42b3      	cmp	r3, r6
 8008224:	b085      	sub	sp, #20
 8008226:	bfb8      	it	lt
 8008228:	3101      	addlt	r1, #1
 800822a:	f7ff fe93 	bl	8007f54 <_Balloc>
 800822e:	b930      	cbnz	r0, 800823e <__multiply+0x42>
 8008230:	4602      	mov	r2, r0
 8008232:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008236:	4b43      	ldr	r3, [pc, #268]	@ (8008344 <__multiply+0x148>)
 8008238:	4843      	ldr	r0, [pc, #268]	@ (8008348 <__multiply+0x14c>)
 800823a:	f000 ff07 	bl	800904c <__assert_func>
 800823e:	f100 0514 	add.w	r5, r0, #20
 8008242:	462b      	mov	r3, r5
 8008244:	2200      	movs	r2, #0
 8008246:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800824a:	4543      	cmp	r3, r8
 800824c:	d321      	bcc.n	8008292 <__multiply+0x96>
 800824e:	f107 0114 	add.w	r1, r7, #20
 8008252:	f104 0214 	add.w	r2, r4, #20
 8008256:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800825a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800825e:	9302      	str	r3, [sp, #8]
 8008260:	1b13      	subs	r3, r2, r4
 8008262:	3b15      	subs	r3, #21
 8008264:	f023 0303 	bic.w	r3, r3, #3
 8008268:	3304      	adds	r3, #4
 800826a:	f104 0715 	add.w	r7, r4, #21
 800826e:	42ba      	cmp	r2, r7
 8008270:	bf38      	it	cc
 8008272:	2304      	movcc	r3, #4
 8008274:	9301      	str	r3, [sp, #4]
 8008276:	9b02      	ldr	r3, [sp, #8]
 8008278:	9103      	str	r1, [sp, #12]
 800827a:	428b      	cmp	r3, r1
 800827c:	d80c      	bhi.n	8008298 <__multiply+0x9c>
 800827e:	2e00      	cmp	r6, #0
 8008280:	dd03      	ble.n	800828a <__multiply+0x8e>
 8008282:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008286:	2b00      	cmp	r3, #0
 8008288:	d05a      	beq.n	8008340 <__multiply+0x144>
 800828a:	6106      	str	r6, [r0, #16]
 800828c:	b005      	add	sp, #20
 800828e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008292:	f843 2b04 	str.w	r2, [r3], #4
 8008296:	e7d8      	b.n	800824a <__multiply+0x4e>
 8008298:	f8b1 a000 	ldrh.w	sl, [r1]
 800829c:	f1ba 0f00 	cmp.w	sl, #0
 80082a0:	d023      	beq.n	80082ea <__multiply+0xee>
 80082a2:	46a9      	mov	r9, r5
 80082a4:	f04f 0c00 	mov.w	ip, #0
 80082a8:	f104 0e14 	add.w	lr, r4, #20
 80082ac:	f85e 7b04 	ldr.w	r7, [lr], #4
 80082b0:	f8d9 3000 	ldr.w	r3, [r9]
 80082b4:	fa1f fb87 	uxth.w	fp, r7
 80082b8:	b29b      	uxth	r3, r3
 80082ba:	fb0a 330b 	mla	r3, sl, fp, r3
 80082be:	4463      	add	r3, ip
 80082c0:	f8d9 c000 	ldr.w	ip, [r9]
 80082c4:	0c3f      	lsrs	r7, r7, #16
 80082c6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80082ca:	fb0a c707 	mla	r7, sl, r7, ip
 80082ce:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80082d8:	4572      	cmp	r2, lr
 80082da:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80082de:	f849 3b04 	str.w	r3, [r9], #4
 80082e2:	d8e3      	bhi.n	80082ac <__multiply+0xb0>
 80082e4:	9b01      	ldr	r3, [sp, #4]
 80082e6:	f845 c003 	str.w	ip, [r5, r3]
 80082ea:	9b03      	ldr	r3, [sp, #12]
 80082ec:	3104      	adds	r1, #4
 80082ee:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80082f2:	f1b9 0f00 	cmp.w	r9, #0
 80082f6:	d021      	beq.n	800833c <__multiply+0x140>
 80082f8:	46ae      	mov	lr, r5
 80082fa:	f04f 0a00 	mov.w	sl, #0
 80082fe:	682b      	ldr	r3, [r5, #0]
 8008300:	f104 0c14 	add.w	ip, r4, #20
 8008304:	f8bc b000 	ldrh.w	fp, [ip]
 8008308:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800830c:	b29b      	uxth	r3, r3
 800830e:	fb09 770b 	mla	r7, r9, fp, r7
 8008312:	4457      	add	r7, sl
 8008314:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008318:	f84e 3b04 	str.w	r3, [lr], #4
 800831c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008320:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008324:	f8be 3000 	ldrh.w	r3, [lr]
 8008328:	4562      	cmp	r2, ip
 800832a:	fb09 330a 	mla	r3, r9, sl, r3
 800832e:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008332:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008336:	d8e5      	bhi.n	8008304 <__multiply+0x108>
 8008338:	9f01      	ldr	r7, [sp, #4]
 800833a:	51eb      	str	r3, [r5, r7]
 800833c:	3504      	adds	r5, #4
 800833e:	e79a      	b.n	8008276 <__multiply+0x7a>
 8008340:	3e01      	subs	r6, #1
 8008342:	e79c      	b.n	800827e <__multiply+0x82>
 8008344:	08009a29 	.word	0x08009a29
 8008348:	08009ab1 	.word	0x08009ab1

0800834c <__pow5mult>:
 800834c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008350:	4615      	mov	r5, r2
 8008352:	f012 0203 	ands.w	r2, r2, #3
 8008356:	4607      	mov	r7, r0
 8008358:	460e      	mov	r6, r1
 800835a:	d007      	beq.n	800836c <__pow5mult+0x20>
 800835c:	4c25      	ldr	r4, [pc, #148]	@ (80083f4 <__pow5mult+0xa8>)
 800835e:	3a01      	subs	r2, #1
 8008360:	2300      	movs	r3, #0
 8008362:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008366:	f7ff fe57 	bl	8008018 <__multadd>
 800836a:	4606      	mov	r6, r0
 800836c:	10ad      	asrs	r5, r5, #2
 800836e:	d03d      	beq.n	80083ec <__pow5mult+0xa0>
 8008370:	69fc      	ldr	r4, [r7, #28]
 8008372:	b97c      	cbnz	r4, 8008394 <__pow5mult+0x48>
 8008374:	2010      	movs	r0, #16
 8008376:	f000 fe9b 	bl	80090b0 <malloc>
 800837a:	4602      	mov	r2, r0
 800837c:	61f8      	str	r0, [r7, #28]
 800837e:	b928      	cbnz	r0, 800838c <__pow5mult+0x40>
 8008380:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008384:	4b1c      	ldr	r3, [pc, #112]	@ (80083f8 <__pow5mult+0xac>)
 8008386:	481d      	ldr	r0, [pc, #116]	@ (80083fc <__pow5mult+0xb0>)
 8008388:	f000 fe60 	bl	800904c <__assert_func>
 800838c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008390:	6004      	str	r4, [r0, #0]
 8008392:	60c4      	str	r4, [r0, #12]
 8008394:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008398:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800839c:	b94c      	cbnz	r4, 80083b2 <__pow5mult+0x66>
 800839e:	f240 2171 	movw	r1, #625	@ 0x271
 80083a2:	4638      	mov	r0, r7
 80083a4:	f7ff ff14 	bl	80081d0 <__i2b>
 80083a8:	2300      	movs	r3, #0
 80083aa:	4604      	mov	r4, r0
 80083ac:	f8c8 0008 	str.w	r0, [r8, #8]
 80083b0:	6003      	str	r3, [r0, #0]
 80083b2:	f04f 0900 	mov.w	r9, #0
 80083b6:	07eb      	lsls	r3, r5, #31
 80083b8:	d50a      	bpl.n	80083d0 <__pow5mult+0x84>
 80083ba:	4631      	mov	r1, r6
 80083bc:	4622      	mov	r2, r4
 80083be:	4638      	mov	r0, r7
 80083c0:	f7ff ff1c 	bl	80081fc <__multiply>
 80083c4:	4680      	mov	r8, r0
 80083c6:	4631      	mov	r1, r6
 80083c8:	4638      	mov	r0, r7
 80083ca:	f7ff fe03 	bl	8007fd4 <_Bfree>
 80083ce:	4646      	mov	r6, r8
 80083d0:	106d      	asrs	r5, r5, #1
 80083d2:	d00b      	beq.n	80083ec <__pow5mult+0xa0>
 80083d4:	6820      	ldr	r0, [r4, #0]
 80083d6:	b938      	cbnz	r0, 80083e8 <__pow5mult+0x9c>
 80083d8:	4622      	mov	r2, r4
 80083da:	4621      	mov	r1, r4
 80083dc:	4638      	mov	r0, r7
 80083de:	f7ff ff0d 	bl	80081fc <__multiply>
 80083e2:	6020      	str	r0, [r4, #0]
 80083e4:	f8c0 9000 	str.w	r9, [r0]
 80083e8:	4604      	mov	r4, r0
 80083ea:	e7e4      	b.n	80083b6 <__pow5mult+0x6a>
 80083ec:	4630      	mov	r0, r6
 80083ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083f2:	bf00      	nop
 80083f4:	08009b0c 	.word	0x08009b0c
 80083f8:	08009a9a 	.word	0x08009a9a
 80083fc:	08009ab1 	.word	0x08009ab1

08008400 <__lshift>:
 8008400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008404:	460c      	mov	r4, r1
 8008406:	4607      	mov	r7, r0
 8008408:	4691      	mov	r9, r2
 800840a:	6923      	ldr	r3, [r4, #16]
 800840c:	6849      	ldr	r1, [r1, #4]
 800840e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008412:	68a3      	ldr	r3, [r4, #8]
 8008414:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008418:	f108 0601 	add.w	r6, r8, #1
 800841c:	42b3      	cmp	r3, r6
 800841e:	db0b      	blt.n	8008438 <__lshift+0x38>
 8008420:	4638      	mov	r0, r7
 8008422:	f7ff fd97 	bl	8007f54 <_Balloc>
 8008426:	4605      	mov	r5, r0
 8008428:	b948      	cbnz	r0, 800843e <__lshift+0x3e>
 800842a:	4602      	mov	r2, r0
 800842c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008430:	4b27      	ldr	r3, [pc, #156]	@ (80084d0 <__lshift+0xd0>)
 8008432:	4828      	ldr	r0, [pc, #160]	@ (80084d4 <__lshift+0xd4>)
 8008434:	f000 fe0a 	bl	800904c <__assert_func>
 8008438:	3101      	adds	r1, #1
 800843a:	005b      	lsls	r3, r3, #1
 800843c:	e7ee      	b.n	800841c <__lshift+0x1c>
 800843e:	2300      	movs	r3, #0
 8008440:	f100 0114 	add.w	r1, r0, #20
 8008444:	f100 0210 	add.w	r2, r0, #16
 8008448:	4618      	mov	r0, r3
 800844a:	4553      	cmp	r3, sl
 800844c:	db33      	blt.n	80084b6 <__lshift+0xb6>
 800844e:	6920      	ldr	r0, [r4, #16]
 8008450:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008454:	f104 0314 	add.w	r3, r4, #20
 8008458:	f019 091f 	ands.w	r9, r9, #31
 800845c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008460:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008464:	d02b      	beq.n	80084be <__lshift+0xbe>
 8008466:	468a      	mov	sl, r1
 8008468:	2200      	movs	r2, #0
 800846a:	f1c9 0e20 	rsb	lr, r9, #32
 800846e:	6818      	ldr	r0, [r3, #0]
 8008470:	fa00 f009 	lsl.w	r0, r0, r9
 8008474:	4310      	orrs	r0, r2
 8008476:	f84a 0b04 	str.w	r0, [sl], #4
 800847a:	f853 2b04 	ldr.w	r2, [r3], #4
 800847e:	459c      	cmp	ip, r3
 8008480:	fa22 f20e 	lsr.w	r2, r2, lr
 8008484:	d8f3      	bhi.n	800846e <__lshift+0x6e>
 8008486:	ebac 0304 	sub.w	r3, ip, r4
 800848a:	3b15      	subs	r3, #21
 800848c:	f023 0303 	bic.w	r3, r3, #3
 8008490:	3304      	adds	r3, #4
 8008492:	f104 0015 	add.w	r0, r4, #21
 8008496:	4584      	cmp	ip, r0
 8008498:	bf38      	it	cc
 800849a:	2304      	movcc	r3, #4
 800849c:	50ca      	str	r2, [r1, r3]
 800849e:	b10a      	cbz	r2, 80084a4 <__lshift+0xa4>
 80084a0:	f108 0602 	add.w	r6, r8, #2
 80084a4:	3e01      	subs	r6, #1
 80084a6:	4638      	mov	r0, r7
 80084a8:	4621      	mov	r1, r4
 80084aa:	612e      	str	r6, [r5, #16]
 80084ac:	f7ff fd92 	bl	8007fd4 <_Bfree>
 80084b0:	4628      	mov	r0, r5
 80084b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084b6:	f842 0f04 	str.w	r0, [r2, #4]!
 80084ba:	3301      	adds	r3, #1
 80084bc:	e7c5      	b.n	800844a <__lshift+0x4a>
 80084be:	3904      	subs	r1, #4
 80084c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80084c4:	459c      	cmp	ip, r3
 80084c6:	f841 2f04 	str.w	r2, [r1, #4]!
 80084ca:	d8f9      	bhi.n	80084c0 <__lshift+0xc0>
 80084cc:	e7ea      	b.n	80084a4 <__lshift+0xa4>
 80084ce:	bf00      	nop
 80084d0:	08009a29 	.word	0x08009a29
 80084d4:	08009ab1 	.word	0x08009ab1

080084d8 <__mcmp>:
 80084d8:	4603      	mov	r3, r0
 80084da:	690a      	ldr	r2, [r1, #16]
 80084dc:	6900      	ldr	r0, [r0, #16]
 80084de:	b530      	push	{r4, r5, lr}
 80084e0:	1a80      	subs	r0, r0, r2
 80084e2:	d10e      	bne.n	8008502 <__mcmp+0x2a>
 80084e4:	3314      	adds	r3, #20
 80084e6:	3114      	adds	r1, #20
 80084e8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80084ec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80084f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80084f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80084f8:	4295      	cmp	r5, r2
 80084fa:	d003      	beq.n	8008504 <__mcmp+0x2c>
 80084fc:	d205      	bcs.n	800850a <__mcmp+0x32>
 80084fe:	f04f 30ff 	mov.w	r0, #4294967295
 8008502:	bd30      	pop	{r4, r5, pc}
 8008504:	42a3      	cmp	r3, r4
 8008506:	d3f3      	bcc.n	80084f0 <__mcmp+0x18>
 8008508:	e7fb      	b.n	8008502 <__mcmp+0x2a>
 800850a:	2001      	movs	r0, #1
 800850c:	e7f9      	b.n	8008502 <__mcmp+0x2a>
	...

08008510 <__mdiff>:
 8008510:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008514:	4689      	mov	r9, r1
 8008516:	4606      	mov	r6, r0
 8008518:	4611      	mov	r1, r2
 800851a:	4648      	mov	r0, r9
 800851c:	4614      	mov	r4, r2
 800851e:	f7ff ffdb 	bl	80084d8 <__mcmp>
 8008522:	1e05      	subs	r5, r0, #0
 8008524:	d112      	bne.n	800854c <__mdiff+0x3c>
 8008526:	4629      	mov	r1, r5
 8008528:	4630      	mov	r0, r6
 800852a:	f7ff fd13 	bl	8007f54 <_Balloc>
 800852e:	4602      	mov	r2, r0
 8008530:	b928      	cbnz	r0, 800853e <__mdiff+0x2e>
 8008532:	f240 2137 	movw	r1, #567	@ 0x237
 8008536:	4b3e      	ldr	r3, [pc, #248]	@ (8008630 <__mdiff+0x120>)
 8008538:	483e      	ldr	r0, [pc, #248]	@ (8008634 <__mdiff+0x124>)
 800853a:	f000 fd87 	bl	800904c <__assert_func>
 800853e:	2301      	movs	r3, #1
 8008540:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008544:	4610      	mov	r0, r2
 8008546:	b003      	add	sp, #12
 8008548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800854c:	bfbc      	itt	lt
 800854e:	464b      	movlt	r3, r9
 8008550:	46a1      	movlt	r9, r4
 8008552:	4630      	mov	r0, r6
 8008554:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008558:	bfba      	itte	lt
 800855a:	461c      	movlt	r4, r3
 800855c:	2501      	movlt	r5, #1
 800855e:	2500      	movge	r5, #0
 8008560:	f7ff fcf8 	bl	8007f54 <_Balloc>
 8008564:	4602      	mov	r2, r0
 8008566:	b918      	cbnz	r0, 8008570 <__mdiff+0x60>
 8008568:	f240 2145 	movw	r1, #581	@ 0x245
 800856c:	4b30      	ldr	r3, [pc, #192]	@ (8008630 <__mdiff+0x120>)
 800856e:	e7e3      	b.n	8008538 <__mdiff+0x28>
 8008570:	f100 0b14 	add.w	fp, r0, #20
 8008574:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008578:	f109 0310 	add.w	r3, r9, #16
 800857c:	60c5      	str	r5, [r0, #12]
 800857e:	f04f 0c00 	mov.w	ip, #0
 8008582:	f109 0514 	add.w	r5, r9, #20
 8008586:	46d9      	mov	r9, fp
 8008588:	6926      	ldr	r6, [r4, #16]
 800858a:	f104 0e14 	add.w	lr, r4, #20
 800858e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008592:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008596:	9301      	str	r3, [sp, #4]
 8008598:	9b01      	ldr	r3, [sp, #4]
 800859a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800859e:	f853 af04 	ldr.w	sl, [r3, #4]!
 80085a2:	b281      	uxth	r1, r0
 80085a4:	9301      	str	r3, [sp, #4]
 80085a6:	fa1f f38a 	uxth.w	r3, sl
 80085aa:	1a5b      	subs	r3, r3, r1
 80085ac:	0c00      	lsrs	r0, r0, #16
 80085ae:	4463      	add	r3, ip
 80085b0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80085b4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80085b8:	b29b      	uxth	r3, r3
 80085ba:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80085be:	4576      	cmp	r6, lr
 80085c0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80085c4:	f849 3b04 	str.w	r3, [r9], #4
 80085c8:	d8e6      	bhi.n	8008598 <__mdiff+0x88>
 80085ca:	1b33      	subs	r3, r6, r4
 80085cc:	3b15      	subs	r3, #21
 80085ce:	f023 0303 	bic.w	r3, r3, #3
 80085d2:	3415      	adds	r4, #21
 80085d4:	3304      	adds	r3, #4
 80085d6:	42a6      	cmp	r6, r4
 80085d8:	bf38      	it	cc
 80085da:	2304      	movcc	r3, #4
 80085dc:	441d      	add	r5, r3
 80085de:	445b      	add	r3, fp
 80085e0:	461e      	mov	r6, r3
 80085e2:	462c      	mov	r4, r5
 80085e4:	4544      	cmp	r4, r8
 80085e6:	d30e      	bcc.n	8008606 <__mdiff+0xf6>
 80085e8:	f108 0103 	add.w	r1, r8, #3
 80085ec:	1b49      	subs	r1, r1, r5
 80085ee:	f021 0103 	bic.w	r1, r1, #3
 80085f2:	3d03      	subs	r5, #3
 80085f4:	45a8      	cmp	r8, r5
 80085f6:	bf38      	it	cc
 80085f8:	2100      	movcc	r1, #0
 80085fa:	440b      	add	r3, r1
 80085fc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008600:	b199      	cbz	r1, 800862a <__mdiff+0x11a>
 8008602:	6117      	str	r7, [r2, #16]
 8008604:	e79e      	b.n	8008544 <__mdiff+0x34>
 8008606:	46e6      	mov	lr, ip
 8008608:	f854 1b04 	ldr.w	r1, [r4], #4
 800860c:	fa1f fc81 	uxth.w	ip, r1
 8008610:	44f4      	add	ip, lr
 8008612:	0c08      	lsrs	r0, r1, #16
 8008614:	4471      	add	r1, lr
 8008616:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800861a:	b289      	uxth	r1, r1
 800861c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008620:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008624:	f846 1b04 	str.w	r1, [r6], #4
 8008628:	e7dc      	b.n	80085e4 <__mdiff+0xd4>
 800862a:	3f01      	subs	r7, #1
 800862c:	e7e6      	b.n	80085fc <__mdiff+0xec>
 800862e:	bf00      	nop
 8008630:	08009a29 	.word	0x08009a29
 8008634:	08009ab1 	.word	0x08009ab1

08008638 <__ulp>:
 8008638:	4b0e      	ldr	r3, [pc, #56]	@ (8008674 <__ulp+0x3c>)
 800863a:	400b      	ands	r3, r1
 800863c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008640:	2b00      	cmp	r3, #0
 8008642:	dc08      	bgt.n	8008656 <__ulp+0x1e>
 8008644:	425b      	negs	r3, r3
 8008646:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800864a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800864e:	da04      	bge.n	800865a <__ulp+0x22>
 8008650:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008654:	4113      	asrs	r3, r2
 8008656:	2200      	movs	r2, #0
 8008658:	e008      	b.n	800866c <__ulp+0x34>
 800865a:	f1a2 0314 	sub.w	r3, r2, #20
 800865e:	2b1e      	cmp	r3, #30
 8008660:	bfd6      	itet	le
 8008662:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008666:	2201      	movgt	r2, #1
 8008668:	40da      	lsrle	r2, r3
 800866a:	2300      	movs	r3, #0
 800866c:	4619      	mov	r1, r3
 800866e:	4610      	mov	r0, r2
 8008670:	4770      	bx	lr
 8008672:	bf00      	nop
 8008674:	7ff00000 	.word	0x7ff00000

08008678 <__b2d>:
 8008678:	6902      	ldr	r2, [r0, #16]
 800867a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800867c:	f100 0614 	add.w	r6, r0, #20
 8008680:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8008684:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8008688:	4f1e      	ldr	r7, [pc, #120]	@ (8008704 <__b2d+0x8c>)
 800868a:	4620      	mov	r0, r4
 800868c:	f7ff fd54 	bl	8008138 <__hi0bits>
 8008690:	4603      	mov	r3, r0
 8008692:	f1c0 0020 	rsb	r0, r0, #32
 8008696:	2b0a      	cmp	r3, #10
 8008698:	f1a2 0504 	sub.w	r5, r2, #4
 800869c:	6008      	str	r0, [r1, #0]
 800869e:	dc12      	bgt.n	80086c6 <__b2d+0x4e>
 80086a0:	42ae      	cmp	r6, r5
 80086a2:	bf2c      	ite	cs
 80086a4:	2200      	movcs	r2, #0
 80086a6:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80086aa:	f1c3 0c0b 	rsb	ip, r3, #11
 80086ae:	3315      	adds	r3, #21
 80086b0:	fa24 fe0c 	lsr.w	lr, r4, ip
 80086b4:	fa04 f303 	lsl.w	r3, r4, r3
 80086b8:	fa22 f20c 	lsr.w	r2, r2, ip
 80086bc:	ea4e 0107 	orr.w	r1, lr, r7
 80086c0:	431a      	orrs	r2, r3
 80086c2:	4610      	mov	r0, r2
 80086c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086c6:	42ae      	cmp	r6, r5
 80086c8:	bf36      	itet	cc
 80086ca:	f1a2 0508 	subcc.w	r5, r2, #8
 80086ce:	2200      	movcs	r2, #0
 80086d0:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80086d4:	3b0b      	subs	r3, #11
 80086d6:	d012      	beq.n	80086fe <__b2d+0x86>
 80086d8:	f1c3 0720 	rsb	r7, r3, #32
 80086dc:	fa22 f107 	lsr.w	r1, r2, r7
 80086e0:	409c      	lsls	r4, r3
 80086e2:	430c      	orrs	r4, r1
 80086e4:	42b5      	cmp	r5, r6
 80086e6:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 80086ea:	bf94      	ite	ls
 80086ec:	2400      	movls	r4, #0
 80086ee:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 80086f2:	409a      	lsls	r2, r3
 80086f4:	40fc      	lsrs	r4, r7
 80086f6:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80086fa:	4322      	orrs	r2, r4
 80086fc:	e7e1      	b.n	80086c2 <__b2d+0x4a>
 80086fe:	ea44 0107 	orr.w	r1, r4, r7
 8008702:	e7de      	b.n	80086c2 <__b2d+0x4a>
 8008704:	3ff00000 	.word	0x3ff00000

08008708 <__d2b>:
 8008708:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800870c:	2101      	movs	r1, #1
 800870e:	4690      	mov	r8, r2
 8008710:	4699      	mov	r9, r3
 8008712:	9e08      	ldr	r6, [sp, #32]
 8008714:	f7ff fc1e 	bl	8007f54 <_Balloc>
 8008718:	4604      	mov	r4, r0
 800871a:	b930      	cbnz	r0, 800872a <__d2b+0x22>
 800871c:	4602      	mov	r2, r0
 800871e:	f240 310f 	movw	r1, #783	@ 0x30f
 8008722:	4b23      	ldr	r3, [pc, #140]	@ (80087b0 <__d2b+0xa8>)
 8008724:	4823      	ldr	r0, [pc, #140]	@ (80087b4 <__d2b+0xac>)
 8008726:	f000 fc91 	bl	800904c <__assert_func>
 800872a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800872e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008732:	b10d      	cbz	r5, 8008738 <__d2b+0x30>
 8008734:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008738:	9301      	str	r3, [sp, #4]
 800873a:	f1b8 0300 	subs.w	r3, r8, #0
 800873e:	d024      	beq.n	800878a <__d2b+0x82>
 8008740:	4668      	mov	r0, sp
 8008742:	9300      	str	r3, [sp, #0]
 8008744:	f7ff fd17 	bl	8008176 <__lo0bits>
 8008748:	e9dd 1200 	ldrd	r1, r2, [sp]
 800874c:	b1d8      	cbz	r0, 8008786 <__d2b+0x7e>
 800874e:	f1c0 0320 	rsb	r3, r0, #32
 8008752:	fa02 f303 	lsl.w	r3, r2, r3
 8008756:	430b      	orrs	r3, r1
 8008758:	40c2      	lsrs	r2, r0
 800875a:	6163      	str	r3, [r4, #20]
 800875c:	9201      	str	r2, [sp, #4]
 800875e:	9b01      	ldr	r3, [sp, #4]
 8008760:	2b00      	cmp	r3, #0
 8008762:	bf0c      	ite	eq
 8008764:	2201      	moveq	r2, #1
 8008766:	2202      	movne	r2, #2
 8008768:	61a3      	str	r3, [r4, #24]
 800876a:	6122      	str	r2, [r4, #16]
 800876c:	b1ad      	cbz	r5, 800879a <__d2b+0x92>
 800876e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008772:	4405      	add	r5, r0
 8008774:	6035      	str	r5, [r6, #0]
 8008776:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800877a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800877c:	6018      	str	r0, [r3, #0]
 800877e:	4620      	mov	r0, r4
 8008780:	b002      	add	sp, #8
 8008782:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8008786:	6161      	str	r1, [r4, #20]
 8008788:	e7e9      	b.n	800875e <__d2b+0x56>
 800878a:	a801      	add	r0, sp, #4
 800878c:	f7ff fcf3 	bl	8008176 <__lo0bits>
 8008790:	9b01      	ldr	r3, [sp, #4]
 8008792:	2201      	movs	r2, #1
 8008794:	6163      	str	r3, [r4, #20]
 8008796:	3020      	adds	r0, #32
 8008798:	e7e7      	b.n	800876a <__d2b+0x62>
 800879a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800879e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80087a2:	6030      	str	r0, [r6, #0]
 80087a4:	6918      	ldr	r0, [r3, #16]
 80087a6:	f7ff fcc7 	bl	8008138 <__hi0bits>
 80087aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80087ae:	e7e4      	b.n	800877a <__d2b+0x72>
 80087b0:	08009a29 	.word	0x08009a29
 80087b4:	08009ab1 	.word	0x08009ab1

080087b8 <__ratio>:
 80087b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087bc:	b085      	sub	sp, #20
 80087be:	e9cd 1000 	strd	r1, r0, [sp]
 80087c2:	a902      	add	r1, sp, #8
 80087c4:	f7ff ff58 	bl	8008678 <__b2d>
 80087c8:	468b      	mov	fp, r1
 80087ca:	4606      	mov	r6, r0
 80087cc:	460f      	mov	r7, r1
 80087ce:	9800      	ldr	r0, [sp, #0]
 80087d0:	a903      	add	r1, sp, #12
 80087d2:	f7ff ff51 	bl	8008678 <__b2d>
 80087d6:	460d      	mov	r5, r1
 80087d8:	9b01      	ldr	r3, [sp, #4]
 80087da:	4689      	mov	r9, r1
 80087dc:	6919      	ldr	r1, [r3, #16]
 80087de:	9b00      	ldr	r3, [sp, #0]
 80087e0:	4604      	mov	r4, r0
 80087e2:	691b      	ldr	r3, [r3, #16]
 80087e4:	4630      	mov	r0, r6
 80087e6:	1ac9      	subs	r1, r1, r3
 80087e8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80087ec:	1a9b      	subs	r3, r3, r2
 80087ee:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	bfcd      	iteet	gt
 80087f6:	463a      	movgt	r2, r7
 80087f8:	462a      	movle	r2, r5
 80087fa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80087fe:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8008802:	bfd8      	it	le
 8008804:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008808:	464b      	mov	r3, r9
 800880a:	4622      	mov	r2, r4
 800880c:	4659      	mov	r1, fp
 800880e:	f7f7 ff8f 	bl	8000730 <__aeabi_ddiv>
 8008812:	b005      	add	sp, #20
 8008814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008818 <__copybits>:
 8008818:	3901      	subs	r1, #1
 800881a:	b570      	push	{r4, r5, r6, lr}
 800881c:	1149      	asrs	r1, r1, #5
 800881e:	6914      	ldr	r4, [r2, #16]
 8008820:	3101      	adds	r1, #1
 8008822:	f102 0314 	add.w	r3, r2, #20
 8008826:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800882a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800882e:	1f05      	subs	r5, r0, #4
 8008830:	42a3      	cmp	r3, r4
 8008832:	d30c      	bcc.n	800884e <__copybits+0x36>
 8008834:	1aa3      	subs	r3, r4, r2
 8008836:	3b11      	subs	r3, #17
 8008838:	f023 0303 	bic.w	r3, r3, #3
 800883c:	3211      	adds	r2, #17
 800883e:	42a2      	cmp	r2, r4
 8008840:	bf88      	it	hi
 8008842:	2300      	movhi	r3, #0
 8008844:	4418      	add	r0, r3
 8008846:	2300      	movs	r3, #0
 8008848:	4288      	cmp	r0, r1
 800884a:	d305      	bcc.n	8008858 <__copybits+0x40>
 800884c:	bd70      	pop	{r4, r5, r6, pc}
 800884e:	f853 6b04 	ldr.w	r6, [r3], #4
 8008852:	f845 6f04 	str.w	r6, [r5, #4]!
 8008856:	e7eb      	b.n	8008830 <__copybits+0x18>
 8008858:	f840 3b04 	str.w	r3, [r0], #4
 800885c:	e7f4      	b.n	8008848 <__copybits+0x30>

0800885e <__any_on>:
 800885e:	f100 0214 	add.w	r2, r0, #20
 8008862:	6900      	ldr	r0, [r0, #16]
 8008864:	114b      	asrs	r3, r1, #5
 8008866:	4298      	cmp	r0, r3
 8008868:	b510      	push	{r4, lr}
 800886a:	db11      	blt.n	8008890 <__any_on+0x32>
 800886c:	dd0a      	ble.n	8008884 <__any_on+0x26>
 800886e:	f011 011f 	ands.w	r1, r1, #31
 8008872:	d007      	beq.n	8008884 <__any_on+0x26>
 8008874:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008878:	fa24 f001 	lsr.w	r0, r4, r1
 800887c:	fa00 f101 	lsl.w	r1, r0, r1
 8008880:	428c      	cmp	r4, r1
 8008882:	d10b      	bne.n	800889c <__any_on+0x3e>
 8008884:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008888:	4293      	cmp	r3, r2
 800888a:	d803      	bhi.n	8008894 <__any_on+0x36>
 800888c:	2000      	movs	r0, #0
 800888e:	bd10      	pop	{r4, pc}
 8008890:	4603      	mov	r3, r0
 8008892:	e7f7      	b.n	8008884 <__any_on+0x26>
 8008894:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008898:	2900      	cmp	r1, #0
 800889a:	d0f5      	beq.n	8008888 <__any_on+0x2a>
 800889c:	2001      	movs	r0, #1
 800889e:	e7f6      	b.n	800888e <__any_on+0x30>

080088a0 <__ascii_wctomb>:
 80088a0:	4603      	mov	r3, r0
 80088a2:	4608      	mov	r0, r1
 80088a4:	b141      	cbz	r1, 80088b8 <__ascii_wctomb+0x18>
 80088a6:	2aff      	cmp	r2, #255	@ 0xff
 80088a8:	d904      	bls.n	80088b4 <__ascii_wctomb+0x14>
 80088aa:	228a      	movs	r2, #138	@ 0x8a
 80088ac:	f04f 30ff 	mov.w	r0, #4294967295
 80088b0:	601a      	str	r2, [r3, #0]
 80088b2:	4770      	bx	lr
 80088b4:	2001      	movs	r0, #1
 80088b6:	700a      	strb	r2, [r1, #0]
 80088b8:	4770      	bx	lr

080088ba <__ssputs_r>:
 80088ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088be:	461f      	mov	r7, r3
 80088c0:	688e      	ldr	r6, [r1, #8]
 80088c2:	4682      	mov	sl, r0
 80088c4:	42be      	cmp	r6, r7
 80088c6:	460c      	mov	r4, r1
 80088c8:	4690      	mov	r8, r2
 80088ca:	680b      	ldr	r3, [r1, #0]
 80088cc:	d82d      	bhi.n	800892a <__ssputs_r+0x70>
 80088ce:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80088d2:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80088d6:	d026      	beq.n	8008926 <__ssputs_r+0x6c>
 80088d8:	6965      	ldr	r5, [r4, #20]
 80088da:	6909      	ldr	r1, [r1, #16]
 80088dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80088e0:	eba3 0901 	sub.w	r9, r3, r1
 80088e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80088e8:	1c7b      	adds	r3, r7, #1
 80088ea:	444b      	add	r3, r9
 80088ec:	106d      	asrs	r5, r5, #1
 80088ee:	429d      	cmp	r5, r3
 80088f0:	bf38      	it	cc
 80088f2:	461d      	movcc	r5, r3
 80088f4:	0553      	lsls	r3, r2, #21
 80088f6:	d527      	bpl.n	8008948 <__ssputs_r+0x8e>
 80088f8:	4629      	mov	r1, r5
 80088fa:	f7ff fa8d 	bl	8007e18 <_malloc_r>
 80088fe:	4606      	mov	r6, r0
 8008900:	b360      	cbz	r0, 800895c <__ssputs_r+0xa2>
 8008902:	464a      	mov	r2, r9
 8008904:	6921      	ldr	r1, [r4, #16]
 8008906:	f7fe feca 	bl	800769e <memcpy>
 800890a:	89a3      	ldrh	r3, [r4, #12]
 800890c:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008910:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008914:	81a3      	strh	r3, [r4, #12]
 8008916:	6126      	str	r6, [r4, #16]
 8008918:	444e      	add	r6, r9
 800891a:	6026      	str	r6, [r4, #0]
 800891c:	463e      	mov	r6, r7
 800891e:	6165      	str	r5, [r4, #20]
 8008920:	eba5 0509 	sub.w	r5, r5, r9
 8008924:	60a5      	str	r5, [r4, #8]
 8008926:	42be      	cmp	r6, r7
 8008928:	d900      	bls.n	800892c <__ssputs_r+0x72>
 800892a:	463e      	mov	r6, r7
 800892c:	4632      	mov	r2, r6
 800892e:	4641      	mov	r1, r8
 8008930:	6820      	ldr	r0, [r4, #0]
 8008932:	f000 fb53 	bl	8008fdc <memmove>
 8008936:	2000      	movs	r0, #0
 8008938:	68a3      	ldr	r3, [r4, #8]
 800893a:	1b9b      	subs	r3, r3, r6
 800893c:	60a3      	str	r3, [r4, #8]
 800893e:	6823      	ldr	r3, [r4, #0]
 8008940:	4433      	add	r3, r6
 8008942:	6023      	str	r3, [r4, #0]
 8008944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008948:	462a      	mov	r2, r5
 800894a:	f000 fbb9 	bl	80090c0 <_realloc_r>
 800894e:	4606      	mov	r6, r0
 8008950:	2800      	cmp	r0, #0
 8008952:	d1e0      	bne.n	8008916 <__ssputs_r+0x5c>
 8008954:	4650      	mov	r0, sl
 8008956:	6921      	ldr	r1, [r4, #16]
 8008958:	f7fe feba 	bl	80076d0 <_free_r>
 800895c:	230c      	movs	r3, #12
 800895e:	f8ca 3000 	str.w	r3, [sl]
 8008962:	89a3      	ldrh	r3, [r4, #12]
 8008964:	f04f 30ff 	mov.w	r0, #4294967295
 8008968:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800896c:	81a3      	strh	r3, [r4, #12]
 800896e:	e7e9      	b.n	8008944 <__ssputs_r+0x8a>

08008970 <_svfiprintf_r>:
 8008970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008974:	4698      	mov	r8, r3
 8008976:	898b      	ldrh	r3, [r1, #12]
 8008978:	4607      	mov	r7, r0
 800897a:	061b      	lsls	r3, r3, #24
 800897c:	460d      	mov	r5, r1
 800897e:	4614      	mov	r4, r2
 8008980:	b09d      	sub	sp, #116	@ 0x74
 8008982:	d510      	bpl.n	80089a6 <_svfiprintf_r+0x36>
 8008984:	690b      	ldr	r3, [r1, #16]
 8008986:	b973      	cbnz	r3, 80089a6 <_svfiprintf_r+0x36>
 8008988:	2140      	movs	r1, #64	@ 0x40
 800898a:	f7ff fa45 	bl	8007e18 <_malloc_r>
 800898e:	6028      	str	r0, [r5, #0]
 8008990:	6128      	str	r0, [r5, #16]
 8008992:	b930      	cbnz	r0, 80089a2 <_svfiprintf_r+0x32>
 8008994:	230c      	movs	r3, #12
 8008996:	603b      	str	r3, [r7, #0]
 8008998:	f04f 30ff 	mov.w	r0, #4294967295
 800899c:	b01d      	add	sp, #116	@ 0x74
 800899e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089a2:	2340      	movs	r3, #64	@ 0x40
 80089a4:	616b      	str	r3, [r5, #20]
 80089a6:	2300      	movs	r3, #0
 80089a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80089aa:	2320      	movs	r3, #32
 80089ac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80089b0:	2330      	movs	r3, #48	@ 0x30
 80089b2:	f04f 0901 	mov.w	r9, #1
 80089b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80089ba:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008b54 <_svfiprintf_r+0x1e4>
 80089be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80089c2:	4623      	mov	r3, r4
 80089c4:	469a      	mov	sl, r3
 80089c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089ca:	b10a      	cbz	r2, 80089d0 <_svfiprintf_r+0x60>
 80089cc:	2a25      	cmp	r2, #37	@ 0x25
 80089ce:	d1f9      	bne.n	80089c4 <_svfiprintf_r+0x54>
 80089d0:	ebba 0b04 	subs.w	fp, sl, r4
 80089d4:	d00b      	beq.n	80089ee <_svfiprintf_r+0x7e>
 80089d6:	465b      	mov	r3, fp
 80089d8:	4622      	mov	r2, r4
 80089da:	4629      	mov	r1, r5
 80089dc:	4638      	mov	r0, r7
 80089de:	f7ff ff6c 	bl	80088ba <__ssputs_r>
 80089e2:	3001      	adds	r0, #1
 80089e4:	f000 80a7 	beq.w	8008b36 <_svfiprintf_r+0x1c6>
 80089e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80089ea:	445a      	add	r2, fp
 80089ec:	9209      	str	r2, [sp, #36]	@ 0x24
 80089ee:	f89a 3000 	ldrb.w	r3, [sl]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	f000 809f 	beq.w	8008b36 <_svfiprintf_r+0x1c6>
 80089f8:	2300      	movs	r3, #0
 80089fa:	f04f 32ff 	mov.w	r2, #4294967295
 80089fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a02:	f10a 0a01 	add.w	sl, sl, #1
 8008a06:	9304      	str	r3, [sp, #16]
 8008a08:	9307      	str	r3, [sp, #28]
 8008a0a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008a0e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008a10:	4654      	mov	r4, sl
 8008a12:	2205      	movs	r2, #5
 8008a14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a18:	484e      	ldr	r0, [pc, #312]	@ (8008b54 <_svfiprintf_r+0x1e4>)
 8008a1a:	f000 fb09 	bl	8009030 <memchr>
 8008a1e:	9a04      	ldr	r2, [sp, #16]
 8008a20:	b9d8      	cbnz	r0, 8008a5a <_svfiprintf_r+0xea>
 8008a22:	06d0      	lsls	r0, r2, #27
 8008a24:	bf44      	itt	mi
 8008a26:	2320      	movmi	r3, #32
 8008a28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a2c:	0711      	lsls	r1, r2, #28
 8008a2e:	bf44      	itt	mi
 8008a30:	232b      	movmi	r3, #43	@ 0x2b
 8008a32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a36:	f89a 3000 	ldrb.w	r3, [sl]
 8008a3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a3c:	d015      	beq.n	8008a6a <_svfiprintf_r+0xfa>
 8008a3e:	4654      	mov	r4, sl
 8008a40:	2000      	movs	r0, #0
 8008a42:	f04f 0c0a 	mov.w	ip, #10
 8008a46:	9a07      	ldr	r2, [sp, #28]
 8008a48:	4621      	mov	r1, r4
 8008a4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a4e:	3b30      	subs	r3, #48	@ 0x30
 8008a50:	2b09      	cmp	r3, #9
 8008a52:	d94b      	bls.n	8008aec <_svfiprintf_r+0x17c>
 8008a54:	b1b0      	cbz	r0, 8008a84 <_svfiprintf_r+0x114>
 8008a56:	9207      	str	r2, [sp, #28]
 8008a58:	e014      	b.n	8008a84 <_svfiprintf_r+0x114>
 8008a5a:	eba0 0308 	sub.w	r3, r0, r8
 8008a5e:	fa09 f303 	lsl.w	r3, r9, r3
 8008a62:	4313      	orrs	r3, r2
 8008a64:	46a2      	mov	sl, r4
 8008a66:	9304      	str	r3, [sp, #16]
 8008a68:	e7d2      	b.n	8008a10 <_svfiprintf_r+0xa0>
 8008a6a:	9b03      	ldr	r3, [sp, #12]
 8008a6c:	1d19      	adds	r1, r3, #4
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	9103      	str	r1, [sp, #12]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	bfbb      	ittet	lt
 8008a76:	425b      	neglt	r3, r3
 8008a78:	f042 0202 	orrlt.w	r2, r2, #2
 8008a7c:	9307      	strge	r3, [sp, #28]
 8008a7e:	9307      	strlt	r3, [sp, #28]
 8008a80:	bfb8      	it	lt
 8008a82:	9204      	strlt	r2, [sp, #16]
 8008a84:	7823      	ldrb	r3, [r4, #0]
 8008a86:	2b2e      	cmp	r3, #46	@ 0x2e
 8008a88:	d10a      	bne.n	8008aa0 <_svfiprintf_r+0x130>
 8008a8a:	7863      	ldrb	r3, [r4, #1]
 8008a8c:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a8e:	d132      	bne.n	8008af6 <_svfiprintf_r+0x186>
 8008a90:	9b03      	ldr	r3, [sp, #12]
 8008a92:	3402      	adds	r4, #2
 8008a94:	1d1a      	adds	r2, r3, #4
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	9203      	str	r2, [sp, #12]
 8008a9a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008a9e:	9305      	str	r3, [sp, #20]
 8008aa0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008b58 <_svfiprintf_r+0x1e8>
 8008aa4:	2203      	movs	r2, #3
 8008aa6:	4650      	mov	r0, sl
 8008aa8:	7821      	ldrb	r1, [r4, #0]
 8008aaa:	f000 fac1 	bl	8009030 <memchr>
 8008aae:	b138      	cbz	r0, 8008ac0 <_svfiprintf_r+0x150>
 8008ab0:	2240      	movs	r2, #64	@ 0x40
 8008ab2:	9b04      	ldr	r3, [sp, #16]
 8008ab4:	eba0 000a 	sub.w	r0, r0, sl
 8008ab8:	4082      	lsls	r2, r0
 8008aba:	4313      	orrs	r3, r2
 8008abc:	3401      	adds	r4, #1
 8008abe:	9304      	str	r3, [sp, #16]
 8008ac0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ac4:	2206      	movs	r2, #6
 8008ac6:	4825      	ldr	r0, [pc, #148]	@ (8008b5c <_svfiprintf_r+0x1ec>)
 8008ac8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008acc:	f000 fab0 	bl	8009030 <memchr>
 8008ad0:	2800      	cmp	r0, #0
 8008ad2:	d036      	beq.n	8008b42 <_svfiprintf_r+0x1d2>
 8008ad4:	4b22      	ldr	r3, [pc, #136]	@ (8008b60 <_svfiprintf_r+0x1f0>)
 8008ad6:	bb1b      	cbnz	r3, 8008b20 <_svfiprintf_r+0x1b0>
 8008ad8:	9b03      	ldr	r3, [sp, #12]
 8008ada:	3307      	adds	r3, #7
 8008adc:	f023 0307 	bic.w	r3, r3, #7
 8008ae0:	3308      	adds	r3, #8
 8008ae2:	9303      	str	r3, [sp, #12]
 8008ae4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ae6:	4433      	add	r3, r6
 8008ae8:	9309      	str	r3, [sp, #36]	@ 0x24
 8008aea:	e76a      	b.n	80089c2 <_svfiprintf_r+0x52>
 8008aec:	460c      	mov	r4, r1
 8008aee:	2001      	movs	r0, #1
 8008af0:	fb0c 3202 	mla	r2, ip, r2, r3
 8008af4:	e7a8      	b.n	8008a48 <_svfiprintf_r+0xd8>
 8008af6:	2300      	movs	r3, #0
 8008af8:	f04f 0c0a 	mov.w	ip, #10
 8008afc:	4619      	mov	r1, r3
 8008afe:	3401      	adds	r4, #1
 8008b00:	9305      	str	r3, [sp, #20]
 8008b02:	4620      	mov	r0, r4
 8008b04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b08:	3a30      	subs	r2, #48	@ 0x30
 8008b0a:	2a09      	cmp	r2, #9
 8008b0c:	d903      	bls.n	8008b16 <_svfiprintf_r+0x1a6>
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d0c6      	beq.n	8008aa0 <_svfiprintf_r+0x130>
 8008b12:	9105      	str	r1, [sp, #20]
 8008b14:	e7c4      	b.n	8008aa0 <_svfiprintf_r+0x130>
 8008b16:	4604      	mov	r4, r0
 8008b18:	2301      	movs	r3, #1
 8008b1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b1e:	e7f0      	b.n	8008b02 <_svfiprintf_r+0x192>
 8008b20:	ab03      	add	r3, sp, #12
 8008b22:	9300      	str	r3, [sp, #0]
 8008b24:	462a      	mov	r2, r5
 8008b26:	4638      	mov	r0, r7
 8008b28:	4b0e      	ldr	r3, [pc, #56]	@ (8008b64 <_svfiprintf_r+0x1f4>)
 8008b2a:	a904      	add	r1, sp, #16
 8008b2c:	f3af 8000 	nop.w
 8008b30:	1c42      	adds	r2, r0, #1
 8008b32:	4606      	mov	r6, r0
 8008b34:	d1d6      	bne.n	8008ae4 <_svfiprintf_r+0x174>
 8008b36:	89ab      	ldrh	r3, [r5, #12]
 8008b38:	065b      	lsls	r3, r3, #25
 8008b3a:	f53f af2d 	bmi.w	8008998 <_svfiprintf_r+0x28>
 8008b3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008b40:	e72c      	b.n	800899c <_svfiprintf_r+0x2c>
 8008b42:	ab03      	add	r3, sp, #12
 8008b44:	9300      	str	r3, [sp, #0]
 8008b46:	462a      	mov	r2, r5
 8008b48:	4638      	mov	r0, r7
 8008b4a:	4b06      	ldr	r3, [pc, #24]	@ (8008b64 <_svfiprintf_r+0x1f4>)
 8008b4c:	a904      	add	r1, sp, #16
 8008b4e:	f000 f87d 	bl	8008c4c <_printf_i>
 8008b52:	e7ed      	b.n	8008b30 <_svfiprintf_r+0x1c0>
 8008b54:	08009c08 	.word	0x08009c08
 8008b58:	08009c0e 	.word	0x08009c0e
 8008b5c:	08009c12 	.word	0x08009c12
 8008b60:	00000000 	.word	0x00000000
 8008b64:	080088bb 	.word	0x080088bb

08008b68 <_printf_common>:
 8008b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b6c:	4616      	mov	r6, r2
 8008b6e:	4698      	mov	r8, r3
 8008b70:	688a      	ldr	r2, [r1, #8]
 8008b72:	690b      	ldr	r3, [r1, #16]
 8008b74:	4607      	mov	r7, r0
 8008b76:	4293      	cmp	r3, r2
 8008b78:	bfb8      	it	lt
 8008b7a:	4613      	movlt	r3, r2
 8008b7c:	6033      	str	r3, [r6, #0]
 8008b7e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008b82:	460c      	mov	r4, r1
 8008b84:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008b88:	b10a      	cbz	r2, 8008b8e <_printf_common+0x26>
 8008b8a:	3301      	adds	r3, #1
 8008b8c:	6033      	str	r3, [r6, #0]
 8008b8e:	6823      	ldr	r3, [r4, #0]
 8008b90:	0699      	lsls	r1, r3, #26
 8008b92:	bf42      	ittt	mi
 8008b94:	6833      	ldrmi	r3, [r6, #0]
 8008b96:	3302      	addmi	r3, #2
 8008b98:	6033      	strmi	r3, [r6, #0]
 8008b9a:	6825      	ldr	r5, [r4, #0]
 8008b9c:	f015 0506 	ands.w	r5, r5, #6
 8008ba0:	d106      	bne.n	8008bb0 <_printf_common+0x48>
 8008ba2:	f104 0a19 	add.w	sl, r4, #25
 8008ba6:	68e3      	ldr	r3, [r4, #12]
 8008ba8:	6832      	ldr	r2, [r6, #0]
 8008baa:	1a9b      	subs	r3, r3, r2
 8008bac:	42ab      	cmp	r3, r5
 8008bae:	dc2b      	bgt.n	8008c08 <_printf_common+0xa0>
 8008bb0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008bb4:	6822      	ldr	r2, [r4, #0]
 8008bb6:	3b00      	subs	r3, #0
 8008bb8:	bf18      	it	ne
 8008bba:	2301      	movne	r3, #1
 8008bbc:	0692      	lsls	r2, r2, #26
 8008bbe:	d430      	bmi.n	8008c22 <_printf_common+0xba>
 8008bc0:	4641      	mov	r1, r8
 8008bc2:	4638      	mov	r0, r7
 8008bc4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008bc8:	47c8      	blx	r9
 8008bca:	3001      	adds	r0, #1
 8008bcc:	d023      	beq.n	8008c16 <_printf_common+0xae>
 8008bce:	6823      	ldr	r3, [r4, #0]
 8008bd0:	6922      	ldr	r2, [r4, #16]
 8008bd2:	f003 0306 	and.w	r3, r3, #6
 8008bd6:	2b04      	cmp	r3, #4
 8008bd8:	bf14      	ite	ne
 8008bda:	2500      	movne	r5, #0
 8008bdc:	6833      	ldreq	r3, [r6, #0]
 8008bde:	f04f 0600 	mov.w	r6, #0
 8008be2:	bf08      	it	eq
 8008be4:	68e5      	ldreq	r5, [r4, #12]
 8008be6:	f104 041a 	add.w	r4, r4, #26
 8008bea:	bf08      	it	eq
 8008bec:	1aed      	subeq	r5, r5, r3
 8008bee:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008bf2:	bf08      	it	eq
 8008bf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	bfc4      	itt	gt
 8008bfc:	1a9b      	subgt	r3, r3, r2
 8008bfe:	18ed      	addgt	r5, r5, r3
 8008c00:	42b5      	cmp	r5, r6
 8008c02:	d11a      	bne.n	8008c3a <_printf_common+0xd2>
 8008c04:	2000      	movs	r0, #0
 8008c06:	e008      	b.n	8008c1a <_printf_common+0xb2>
 8008c08:	2301      	movs	r3, #1
 8008c0a:	4652      	mov	r2, sl
 8008c0c:	4641      	mov	r1, r8
 8008c0e:	4638      	mov	r0, r7
 8008c10:	47c8      	blx	r9
 8008c12:	3001      	adds	r0, #1
 8008c14:	d103      	bne.n	8008c1e <_printf_common+0xb6>
 8008c16:	f04f 30ff 	mov.w	r0, #4294967295
 8008c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c1e:	3501      	adds	r5, #1
 8008c20:	e7c1      	b.n	8008ba6 <_printf_common+0x3e>
 8008c22:	2030      	movs	r0, #48	@ 0x30
 8008c24:	18e1      	adds	r1, r4, r3
 8008c26:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008c2a:	1c5a      	adds	r2, r3, #1
 8008c2c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008c30:	4422      	add	r2, r4
 8008c32:	3302      	adds	r3, #2
 8008c34:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008c38:	e7c2      	b.n	8008bc0 <_printf_common+0x58>
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	4622      	mov	r2, r4
 8008c3e:	4641      	mov	r1, r8
 8008c40:	4638      	mov	r0, r7
 8008c42:	47c8      	blx	r9
 8008c44:	3001      	adds	r0, #1
 8008c46:	d0e6      	beq.n	8008c16 <_printf_common+0xae>
 8008c48:	3601      	adds	r6, #1
 8008c4a:	e7d9      	b.n	8008c00 <_printf_common+0x98>

08008c4c <_printf_i>:
 8008c4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c50:	7e0f      	ldrb	r7, [r1, #24]
 8008c52:	4691      	mov	r9, r2
 8008c54:	2f78      	cmp	r7, #120	@ 0x78
 8008c56:	4680      	mov	r8, r0
 8008c58:	460c      	mov	r4, r1
 8008c5a:	469a      	mov	sl, r3
 8008c5c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008c5e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008c62:	d807      	bhi.n	8008c74 <_printf_i+0x28>
 8008c64:	2f62      	cmp	r7, #98	@ 0x62
 8008c66:	d80a      	bhi.n	8008c7e <_printf_i+0x32>
 8008c68:	2f00      	cmp	r7, #0
 8008c6a:	f000 80d3 	beq.w	8008e14 <_printf_i+0x1c8>
 8008c6e:	2f58      	cmp	r7, #88	@ 0x58
 8008c70:	f000 80ba 	beq.w	8008de8 <_printf_i+0x19c>
 8008c74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008c78:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008c7c:	e03a      	b.n	8008cf4 <_printf_i+0xa8>
 8008c7e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008c82:	2b15      	cmp	r3, #21
 8008c84:	d8f6      	bhi.n	8008c74 <_printf_i+0x28>
 8008c86:	a101      	add	r1, pc, #4	@ (adr r1, 8008c8c <_printf_i+0x40>)
 8008c88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c8c:	08008ce5 	.word	0x08008ce5
 8008c90:	08008cf9 	.word	0x08008cf9
 8008c94:	08008c75 	.word	0x08008c75
 8008c98:	08008c75 	.word	0x08008c75
 8008c9c:	08008c75 	.word	0x08008c75
 8008ca0:	08008c75 	.word	0x08008c75
 8008ca4:	08008cf9 	.word	0x08008cf9
 8008ca8:	08008c75 	.word	0x08008c75
 8008cac:	08008c75 	.word	0x08008c75
 8008cb0:	08008c75 	.word	0x08008c75
 8008cb4:	08008c75 	.word	0x08008c75
 8008cb8:	08008dfb 	.word	0x08008dfb
 8008cbc:	08008d23 	.word	0x08008d23
 8008cc0:	08008db5 	.word	0x08008db5
 8008cc4:	08008c75 	.word	0x08008c75
 8008cc8:	08008c75 	.word	0x08008c75
 8008ccc:	08008e1d 	.word	0x08008e1d
 8008cd0:	08008c75 	.word	0x08008c75
 8008cd4:	08008d23 	.word	0x08008d23
 8008cd8:	08008c75 	.word	0x08008c75
 8008cdc:	08008c75 	.word	0x08008c75
 8008ce0:	08008dbd 	.word	0x08008dbd
 8008ce4:	6833      	ldr	r3, [r6, #0]
 8008ce6:	1d1a      	adds	r2, r3, #4
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	6032      	str	r2, [r6, #0]
 8008cec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008cf0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	e09e      	b.n	8008e36 <_printf_i+0x1ea>
 8008cf8:	6833      	ldr	r3, [r6, #0]
 8008cfa:	6820      	ldr	r0, [r4, #0]
 8008cfc:	1d19      	adds	r1, r3, #4
 8008cfe:	6031      	str	r1, [r6, #0]
 8008d00:	0606      	lsls	r6, r0, #24
 8008d02:	d501      	bpl.n	8008d08 <_printf_i+0xbc>
 8008d04:	681d      	ldr	r5, [r3, #0]
 8008d06:	e003      	b.n	8008d10 <_printf_i+0xc4>
 8008d08:	0645      	lsls	r5, r0, #25
 8008d0a:	d5fb      	bpl.n	8008d04 <_printf_i+0xb8>
 8008d0c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008d10:	2d00      	cmp	r5, #0
 8008d12:	da03      	bge.n	8008d1c <_printf_i+0xd0>
 8008d14:	232d      	movs	r3, #45	@ 0x2d
 8008d16:	426d      	negs	r5, r5
 8008d18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d1c:	230a      	movs	r3, #10
 8008d1e:	4859      	ldr	r0, [pc, #356]	@ (8008e84 <_printf_i+0x238>)
 8008d20:	e011      	b.n	8008d46 <_printf_i+0xfa>
 8008d22:	6821      	ldr	r1, [r4, #0]
 8008d24:	6833      	ldr	r3, [r6, #0]
 8008d26:	0608      	lsls	r0, r1, #24
 8008d28:	f853 5b04 	ldr.w	r5, [r3], #4
 8008d2c:	d402      	bmi.n	8008d34 <_printf_i+0xe8>
 8008d2e:	0649      	lsls	r1, r1, #25
 8008d30:	bf48      	it	mi
 8008d32:	b2ad      	uxthmi	r5, r5
 8008d34:	2f6f      	cmp	r7, #111	@ 0x6f
 8008d36:	6033      	str	r3, [r6, #0]
 8008d38:	bf14      	ite	ne
 8008d3a:	230a      	movne	r3, #10
 8008d3c:	2308      	moveq	r3, #8
 8008d3e:	4851      	ldr	r0, [pc, #324]	@ (8008e84 <_printf_i+0x238>)
 8008d40:	2100      	movs	r1, #0
 8008d42:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008d46:	6866      	ldr	r6, [r4, #4]
 8008d48:	2e00      	cmp	r6, #0
 8008d4a:	bfa8      	it	ge
 8008d4c:	6821      	ldrge	r1, [r4, #0]
 8008d4e:	60a6      	str	r6, [r4, #8]
 8008d50:	bfa4      	itt	ge
 8008d52:	f021 0104 	bicge.w	r1, r1, #4
 8008d56:	6021      	strge	r1, [r4, #0]
 8008d58:	b90d      	cbnz	r5, 8008d5e <_printf_i+0x112>
 8008d5a:	2e00      	cmp	r6, #0
 8008d5c:	d04b      	beq.n	8008df6 <_printf_i+0x1aa>
 8008d5e:	4616      	mov	r6, r2
 8008d60:	fbb5 f1f3 	udiv	r1, r5, r3
 8008d64:	fb03 5711 	mls	r7, r3, r1, r5
 8008d68:	5dc7      	ldrb	r7, [r0, r7]
 8008d6a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008d6e:	462f      	mov	r7, r5
 8008d70:	42bb      	cmp	r3, r7
 8008d72:	460d      	mov	r5, r1
 8008d74:	d9f4      	bls.n	8008d60 <_printf_i+0x114>
 8008d76:	2b08      	cmp	r3, #8
 8008d78:	d10b      	bne.n	8008d92 <_printf_i+0x146>
 8008d7a:	6823      	ldr	r3, [r4, #0]
 8008d7c:	07df      	lsls	r7, r3, #31
 8008d7e:	d508      	bpl.n	8008d92 <_printf_i+0x146>
 8008d80:	6923      	ldr	r3, [r4, #16]
 8008d82:	6861      	ldr	r1, [r4, #4]
 8008d84:	4299      	cmp	r1, r3
 8008d86:	bfde      	ittt	le
 8008d88:	2330      	movle	r3, #48	@ 0x30
 8008d8a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008d8e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008d92:	1b92      	subs	r2, r2, r6
 8008d94:	6122      	str	r2, [r4, #16]
 8008d96:	464b      	mov	r3, r9
 8008d98:	4621      	mov	r1, r4
 8008d9a:	4640      	mov	r0, r8
 8008d9c:	f8cd a000 	str.w	sl, [sp]
 8008da0:	aa03      	add	r2, sp, #12
 8008da2:	f7ff fee1 	bl	8008b68 <_printf_common>
 8008da6:	3001      	adds	r0, #1
 8008da8:	d14a      	bne.n	8008e40 <_printf_i+0x1f4>
 8008daa:	f04f 30ff 	mov.w	r0, #4294967295
 8008dae:	b004      	add	sp, #16
 8008db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008db4:	6823      	ldr	r3, [r4, #0]
 8008db6:	f043 0320 	orr.w	r3, r3, #32
 8008dba:	6023      	str	r3, [r4, #0]
 8008dbc:	2778      	movs	r7, #120	@ 0x78
 8008dbe:	4832      	ldr	r0, [pc, #200]	@ (8008e88 <_printf_i+0x23c>)
 8008dc0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008dc4:	6823      	ldr	r3, [r4, #0]
 8008dc6:	6831      	ldr	r1, [r6, #0]
 8008dc8:	061f      	lsls	r7, r3, #24
 8008dca:	f851 5b04 	ldr.w	r5, [r1], #4
 8008dce:	d402      	bmi.n	8008dd6 <_printf_i+0x18a>
 8008dd0:	065f      	lsls	r7, r3, #25
 8008dd2:	bf48      	it	mi
 8008dd4:	b2ad      	uxthmi	r5, r5
 8008dd6:	6031      	str	r1, [r6, #0]
 8008dd8:	07d9      	lsls	r1, r3, #31
 8008dda:	bf44      	itt	mi
 8008ddc:	f043 0320 	orrmi.w	r3, r3, #32
 8008de0:	6023      	strmi	r3, [r4, #0]
 8008de2:	b11d      	cbz	r5, 8008dec <_printf_i+0x1a0>
 8008de4:	2310      	movs	r3, #16
 8008de6:	e7ab      	b.n	8008d40 <_printf_i+0xf4>
 8008de8:	4826      	ldr	r0, [pc, #152]	@ (8008e84 <_printf_i+0x238>)
 8008dea:	e7e9      	b.n	8008dc0 <_printf_i+0x174>
 8008dec:	6823      	ldr	r3, [r4, #0]
 8008dee:	f023 0320 	bic.w	r3, r3, #32
 8008df2:	6023      	str	r3, [r4, #0]
 8008df4:	e7f6      	b.n	8008de4 <_printf_i+0x198>
 8008df6:	4616      	mov	r6, r2
 8008df8:	e7bd      	b.n	8008d76 <_printf_i+0x12a>
 8008dfa:	6833      	ldr	r3, [r6, #0]
 8008dfc:	6825      	ldr	r5, [r4, #0]
 8008dfe:	1d18      	adds	r0, r3, #4
 8008e00:	6961      	ldr	r1, [r4, #20]
 8008e02:	6030      	str	r0, [r6, #0]
 8008e04:	062e      	lsls	r6, r5, #24
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	d501      	bpl.n	8008e0e <_printf_i+0x1c2>
 8008e0a:	6019      	str	r1, [r3, #0]
 8008e0c:	e002      	b.n	8008e14 <_printf_i+0x1c8>
 8008e0e:	0668      	lsls	r0, r5, #25
 8008e10:	d5fb      	bpl.n	8008e0a <_printf_i+0x1be>
 8008e12:	8019      	strh	r1, [r3, #0]
 8008e14:	2300      	movs	r3, #0
 8008e16:	4616      	mov	r6, r2
 8008e18:	6123      	str	r3, [r4, #16]
 8008e1a:	e7bc      	b.n	8008d96 <_printf_i+0x14a>
 8008e1c:	6833      	ldr	r3, [r6, #0]
 8008e1e:	2100      	movs	r1, #0
 8008e20:	1d1a      	adds	r2, r3, #4
 8008e22:	6032      	str	r2, [r6, #0]
 8008e24:	681e      	ldr	r6, [r3, #0]
 8008e26:	6862      	ldr	r2, [r4, #4]
 8008e28:	4630      	mov	r0, r6
 8008e2a:	f000 f901 	bl	8009030 <memchr>
 8008e2e:	b108      	cbz	r0, 8008e34 <_printf_i+0x1e8>
 8008e30:	1b80      	subs	r0, r0, r6
 8008e32:	6060      	str	r0, [r4, #4]
 8008e34:	6863      	ldr	r3, [r4, #4]
 8008e36:	6123      	str	r3, [r4, #16]
 8008e38:	2300      	movs	r3, #0
 8008e3a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e3e:	e7aa      	b.n	8008d96 <_printf_i+0x14a>
 8008e40:	4632      	mov	r2, r6
 8008e42:	4649      	mov	r1, r9
 8008e44:	4640      	mov	r0, r8
 8008e46:	6923      	ldr	r3, [r4, #16]
 8008e48:	47d0      	blx	sl
 8008e4a:	3001      	adds	r0, #1
 8008e4c:	d0ad      	beq.n	8008daa <_printf_i+0x15e>
 8008e4e:	6823      	ldr	r3, [r4, #0]
 8008e50:	079b      	lsls	r3, r3, #30
 8008e52:	d413      	bmi.n	8008e7c <_printf_i+0x230>
 8008e54:	68e0      	ldr	r0, [r4, #12]
 8008e56:	9b03      	ldr	r3, [sp, #12]
 8008e58:	4298      	cmp	r0, r3
 8008e5a:	bfb8      	it	lt
 8008e5c:	4618      	movlt	r0, r3
 8008e5e:	e7a6      	b.n	8008dae <_printf_i+0x162>
 8008e60:	2301      	movs	r3, #1
 8008e62:	4632      	mov	r2, r6
 8008e64:	4649      	mov	r1, r9
 8008e66:	4640      	mov	r0, r8
 8008e68:	47d0      	blx	sl
 8008e6a:	3001      	adds	r0, #1
 8008e6c:	d09d      	beq.n	8008daa <_printf_i+0x15e>
 8008e6e:	3501      	adds	r5, #1
 8008e70:	68e3      	ldr	r3, [r4, #12]
 8008e72:	9903      	ldr	r1, [sp, #12]
 8008e74:	1a5b      	subs	r3, r3, r1
 8008e76:	42ab      	cmp	r3, r5
 8008e78:	dcf2      	bgt.n	8008e60 <_printf_i+0x214>
 8008e7a:	e7eb      	b.n	8008e54 <_printf_i+0x208>
 8008e7c:	2500      	movs	r5, #0
 8008e7e:	f104 0619 	add.w	r6, r4, #25
 8008e82:	e7f5      	b.n	8008e70 <_printf_i+0x224>
 8008e84:	08009c19 	.word	0x08009c19
 8008e88:	08009c2a 	.word	0x08009c2a

08008e8c <__sflush_r>:
 8008e8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e92:	0716      	lsls	r6, r2, #28
 8008e94:	4605      	mov	r5, r0
 8008e96:	460c      	mov	r4, r1
 8008e98:	d454      	bmi.n	8008f44 <__sflush_r+0xb8>
 8008e9a:	684b      	ldr	r3, [r1, #4]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	dc02      	bgt.n	8008ea6 <__sflush_r+0x1a>
 8008ea0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	dd48      	ble.n	8008f38 <__sflush_r+0xac>
 8008ea6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008ea8:	2e00      	cmp	r6, #0
 8008eaa:	d045      	beq.n	8008f38 <__sflush_r+0xac>
 8008eac:	2300      	movs	r3, #0
 8008eae:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008eb2:	682f      	ldr	r7, [r5, #0]
 8008eb4:	6a21      	ldr	r1, [r4, #32]
 8008eb6:	602b      	str	r3, [r5, #0]
 8008eb8:	d030      	beq.n	8008f1c <__sflush_r+0x90>
 8008eba:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008ebc:	89a3      	ldrh	r3, [r4, #12]
 8008ebe:	0759      	lsls	r1, r3, #29
 8008ec0:	d505      	bpl.n	8008ece <__sflush_r+0x42>
 8008ec2:	6863      	ldr	r3, [r4, #4]
 8008ec4:	1ad2      	subs	r2, r2, r3
 8008ec6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008ec8:	b10b      	cbz	r3, 8008ece <__sflush_r+0x42>
 8008eca:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008ecc:	1ad2      	subs	r2, r2, r3
 8008ece:	2300      	movs	r3, #0
 8008ed0:	4628      	mov	r0, r5
 8008ed2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008ed4:	6a21      	ldr	r1, [r4, #32]
 8008ed6:	47b0      	blx	r6
 8008ed8:	1c43      	adds	r3, r0, #1
 8008eda:	89a3      	ldrh	r3, [r4, #12]
 8008edc:	d106      	bne.n	8008eec <__sflush_r+0x60>
 8008ede:	6829      	ldr	r1, [r5, #0]
 8008ee0:	291d      	cmp	r1, #29
 8008ee2:	d82b      	bhi.n	8008f3c <__sflush_r+0xb0>
 8008ee4:	4a28      	ldr	r2, [pc, #160]	@ (8008f88 <__sflush_r+0xfc>)
 8008ee6:	410a      	asrs	r2, r1
 8008ee8:	07d6      	lsls	r6, r2, #31
 8008eea:	d427      	bmi.n	8008f3c <__sflush_r+0xb0>
 8008eec:	2200      	movs	r2, #0
 8008eee:	6062      	str	r2, [r4, #4]
 8008ef0:	6922      	ldr	r2, [r4, #16]
 8008ef2:	04d9      	lsls	r1, r3, #19
 8008ef4:	6022      	str	r2, [r4, #0]
 8008ef6:	d504      	bpl.n	8008f02 <__sflush_r+0x76>
 8008ef8:	1c42      	adds	r2, r0, #1
 8008efa:	d101      	bne.n	8008f00 <__sflush_r+0x74>
 8008efc:	682b      	ldr	r3, [r5, #0]
 8008efe:	b903      	cbnz	r3, 8008f02 <__sflush_r+0x76>
 8008f00:	6560      	str	r0, [r4, #84]	@ 0x54
 8008f02:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008f04:	602f      	str	r7, [r5, #0]
 8008f06:	b1b9      	cbz	r1, 8008f38 <__sflush_r+0xac>
 8008f08:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008f0c:	4299      	cmp	r1, r3
 8008f0e:	d002      	beq.n	8008f16 <__sflush_r+0x8a>
 8008f10:	4628      	mov	r0, r5
 8008f12:	f7fe fbdd 	bl	80076d0 <_free_r>
 8008f16:	2300      	movs	r3, #0
 8008f18:	6363      	str	r3, [r4, #52]	@ 0x34
 8008f1a:	e00d      	b.n	8008f38 <__sflush_r+0xac>
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	4628      	mov	r0, r5
 8008f20:	47b0      	blx	r6
 8008f22:	4602      	mov	r2, r0
 8008f24:	1c50      	adds	r0, r2, #1
 8008f26:	d1c9      	bne.n	8008ebc <__sflush_r+0x30>
 8008f28:	682b      	ldr	r3, [r5, #0]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d0c6      	beq.n	8008ebc <__sflush_r+0x30>
 8008f2e:	2b1d      	cmp	r3, #29
 8008f30:	d001      	beq.n	8008f36 <__sflush_r+0xaa>
 8008f32:	2b16      	cmp	r3, #22
 8008f34:	d11d      	bne.n	8008f72 <__sflush_r+0xe6>
 8008f36:	602f      	str	r7, [r5, #0]
 8008f38:	2000      	movs	r0, #0
 8008f3a:	e021      	b.n	8008f80 <__sflush_r+0xf4>
 8008f3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f40:	b21b      	sxth	r3, r3
 8008f42:	e01a      	b.n	8008f7a <__sflush_r+0xee>
 8008f44:	690f      	ldr	r7, [r1, #16]
 8008f46:	2f00      	cmp	r7, #0
 8008f48:	d0f6      	beq.n	8008f38 <__sflush_r+0xac>
 8008f4a:	0793      	lsls	r3, r2, #30
 8008f4c:	bf18      	it	ne
 8008f4e:	2300      	movne	r3, #0
 8008f50:	680e      	ldr	r6, [r1, #0]
 8008f52:	bf08      	it	eq
 8008f54:	694b      	ldreq	r3, [r1, #20]
 8008f56:	1bf6      	subs	r6, r6, r7
 8008f58:	600f      	str	r7, [r1, #0]
 8008f5a:	608b      	str	r3, [r1, #8]
 8008f5c:	2e00      	cmp	r6, #0
 8008f5e:	ddeb      	ble.n	8008f38 <__sflush_r+0xac>
 8008f60:	4633      	mov	r3, r6
 8008f62:	463a      	mov	r2, r7
 8008f64:	4628      	mov	r0, r5
 8008f66:	6a21      	ldr	r1, [r4, #32]
 8008f68:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008f6c:	47e0      	blx	ip
 8008f6e:	2800      	cmp	r0, #0
 8008f70:	dc07      	bgt.n	8008f82 <__sflush_r+0xf6>
 8008f72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f7a:	f04f 30ff 	mov.w	r0, #4294967295
 8008f7e:	81a3      	strh	r3, [r4, #12]
 8008f80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f82:	4407      	add	r7, r0
 8008f84:	1a36      	subs	r6, r6, r0
 8008f86:	e7e9      	b.n	8008f5c <__sflush_r+0xd0>
 8008f88:	dfbffffe 	.word	0xdfbffffe

08008f8c <_fflush_r>:
 8008f8c:	b538      	push	{r3, r4, r5, lr}
 8008f8e:	690b      	ldr	r3, [r1, #16]
 8008f90:	4605      	mov	r5, r0
 8008f92:	460c      	mov	r4, r1
 8008f94:	b913      	cbnz	r3, 8008f9c <_fflush_r+0x10>
 8008f96:	2500      	movs	r5, #0
 8008f98:	4628      	mov	r0, r5
 8008f9a:	bd38      	pop	{r3, r4, r5, pc}
 8008f9c:	b118      	cbz	r0, 8008fa6 <_fflush_r+0x1a>
 8008f9e:	6a03      	ldr	r3, [r0, #32]
 8008fa0:	b90b      	cbnz	r3, 8008fa6 <_fflush_r+0x1a>
 8008fa2:	f7fe fa09 	bl	80073b8 <__sinit>
 8008fa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d0f3      	beq.n	8008f96 <_fflush_r+0xa>
 8008fae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008fb0:	07d0      	lsls	r0, r2, #31
 8008fb2:	d404      	bmi.n	8008fbe <_fflush_r+0x32>
 8008fb4:	0599      	lsls	r1, r3, #22
 8008fb6:	d402      	bmi.n	8008fbe <_fflush_r+0x32>
 8008fb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008fba:	f7fe fb66 	bl	800768a <__retarget_lock_acquire_recursive>
 8008fbe:	4628      	mov	r0, r5
 8008fc0:	4621      	mov	r1, r4
 8008fc2:	f7ff ff63 	bl	8008e8c <__sflush_r>
 8008fc6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008fc8:	4605      	mov	r5, r0
 8008fca:	07da      	lsls	r2, r3, #31
 8008fcc:	d4e4      	bmi.n	8008f98 <_fflush_r+0xc>
 8008fce:	89a3      	ldrh	r3, [r4, #12]
 8008fd0:	059b      	lsls	r3, r3, #22
 8008fd2:	d4e1      	bmi.n	8008f98 <_fflush_r+0xc>
 8008fd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008fd6:	f7fe fb59 	bl	800768c <__retarget_lock_release_recursive>
 8008fda:	e7dd      	b.n	8008f98 <_fflush_r+0xc>

08008fdc <memmove>:
 8008fdc:	4288      	cmp	r0, r1
 8008fde:	b510      	push	{r4, lr}
 8008fe0:	eb01 0402 	add.w	r4, r1, r2
 8008fe4:	d902      	bls.n	8008fec <memmove+0x10>
 8008fe6:	4284      	cmp	r4, r0
 8008fe8:	4623      	mov	r3, r4
 8008fea:	d807      	bhi.n	8008ffc <memmove+0x20>
 8008fec:	1e43      	subs	r3, r0, #1
 8008fee:	42a1      	cmp	r1, r4
 8008ff0:	d008      	beq.n	8009004 <memmove+0x28>
 8008ff2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ff6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008ffa:	e7f8      	b.n	8008fee <memmove+0x12>
 8008ffc:	4601      	mov	r1, r0
 8008ffe:	4402      	add	r2, r0
 8009000:	428a      	cmp	r2, r1
 8009002:	d100      	bne.n	8009006 <memmove+0x2a>
 8009004:	bd10      	pop	{r4, pc}
 8009006:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800900a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800900e:	e7f7      	b.n	8009000 <memmove+0x24>

08009010 <_sbrk_r>:
 8009010:	b538      	push	{r3, r4, r5, lr}
 8009012:	2300      	movs	r3, #0
 8009014:	4d05      	ldr	r5, [pc, #20]	@ (800902c <_sbrk_r+0x1c>)
 8009016:	4604      	mov	r4, r0
 8009018:	4608      	mov	r0, r1
 800901a:	602b      	str	r3, [r5, #0]
 800901c:	f7f9 fe8e 	bl	8002d3c <_sbrk>
 8009020:	1c43      	adds	r3, r0, #1
 8009022:	d102      	bne.n	800902a <_sbrk_r+0x1a>
 8009024:	682b      	ldr	r3, [r5, #0]
 8009026:	b103      	cbz	r3, 800902a <_sbrk_r+0x1a>
 8009028:	6023      	str	r3, [r4, #0]
 800902a:	bd38      	pop	{r3, r4, r5, pc}
 800902c:	20000a00 	.word	0x20000a00

08009030 <memchr>:
 8009030:	4603      	mov	r3, r0
 8009032:	b510      	push	{r4, lr}
 8009034:	b2c9      	uxtb	r1, r1
 8009036:	4402      	add	r2, r0
 8009038:	4293      	cmp	r3, r2
 800903a:	4618      	mov	r0, r3
 800903c:	d101      	bne.n	8009042 <memchr+0x12>
 800903e:	2000      	movs	r0, #0
 8009040:	e003      	b.n	800904a <memchr+0x1a>
 8009042:	7804      	ldrb	r4, [r0, #0]
 8009044:	3301      	adds	r3, #1
 8009046:	428c      	cmp	r4, r1
 8009048:	d1f6      	bne.n	8009038 <memchr+0x8>
 800904a:	bd10      	pop	{r4, pc}

0800904c <__assert_func>:
 800904c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800904e:	4614      	mov	r4, r2
 8009050:	461a      	mov	r2, r3
 8009052:	4b09      	ldr	r3, [pc, #36]	@ (8009078 <__assert_func+0x2c>)
 8009054:	4605      	mov	r5, r0
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	68d8      	ldr	r0, [r3, #12]
 800905a:	b954      	cbnz	r4, 8009072 <__assert_func+0x26>
 800905c:	4b07      	ldr	r3, [pc, #28]	@ (800907c <__assert_func+0x30>)
 800905e:	461c      	mov	r4, r3
 8009060:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009064:	9100      	str	r1, [sp, #0]
 8009066:	462b      	mov	r3, r5
 8009068:	4905      	ldr	r1, [pc, #20]	@ (8009080 <__assert_func+0x34>)
 800906a:	f000 f857 	bl	800911c <fiprintf>
 800906e:	f000 f867 	bl	8009140 <abort>
 8009072:	4b04      	ldr	r3, [pc, #16]	@ (8009084 <__assert_func+0x38>)
 8009074:	e7f4      	b.n	8009060 <__assert_func+0x14>
 8009076:	bf00      	nop
 8009078:	20000190 	.word	0x20000190
 800907c:	08009c76 	.word	0x08009c76
 8009080:	08009c48 	.word	0x08009c48
 8009084:	08009c3b 	.word	0x08009c3b

08009088 <_calloc_r>:
 8009088:	b570      	push	{r4, r5, r6, lr}
 800908a:	fba1 5402 	umull	r5, r4, r1, r2
 800908e:	b93c      	cbnz	r4, 80090a0 <_calloc_r+0x18>
 8009090:	4629      	mov	r1, r5
 8009092:	f7fe fec1 	bl	8007e18 <_malloc_r>
 8009096:	4606      	mov	r6, r0
 8009098:	b928      	cbnz	r0, 80090a6 <_calloc_r+0x1e>
 800909a:	2600      	movs	r6, #0
 800909c:	4630      	mov	r0, r6
 800909e:	bd70      	pop	{r4, r5, r6, pc}
 80090a0:	220c      	movs	r2, #12
 80090a2:	6002      	str	r2, [r0, #0]
 80090a4:	e7f9      	b.n	800909a <_calloc_r+0x12>
 80090a6:	462a      	mov	r2, r5
 80090a8:	4621      	mov	r1, r4
 80090aa:	f7fe fa37 	bl	800751c <memset>
 80090ae:	e7f5      	b.n	800909c <_calloc_r+0x14>

080090b0 <malloc>:
 80090b0:	4b02      	ldr	r3, [pc, #8]	@ (80090bc <malloc+0xc>)
 80090b2:	4601      	mov	r1, r0
 80090b4:	6818      	ldr	r0, [r3, #0]
 80090b6:	f7fe beaf 	b.w	8007e18 <_malloc_r>
 80090ba:	bf00      	nop
 80090bc:	20000190 	.word	0x20000190

080090c0 <_realloc_r>:
 80090c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090c4:	4680      	mov	r8, r0
 80090c6:	4615      	mov	r5, r2
 80090c8:	460c      	mov	r4, r1
 80090ca:	b921      	cbnz	r1, 80090d6 <_realloc_r+0x16>
 80090cc:	4611      	mov	r1, r2
 80090ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090d2:	f7fe bea1 	b.w	8007e18 <_malloc_r>
 80090d6:	b92a      	cbnz	r2, 80090e4 <_realloc_r+0x24>
 80090d8:	f7fe fafa 	bl	80076d0 <_free_r>
 80090dc:	2400      	movs	r4, #0
 80090de:	4620      	mov	r0, r4
 80090e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090e4:	f000 f833 	bl	800914e <_malloc_usable_size_r>
 80090e8:	4285      	cmp	r5, r0
 80090ea:	4606      	mov	r6, r0
 80090ec:	d802      	bhi.n	80090f4 <_realloc_r+0x34>
 80090ee:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80090f2:	d8f4      	bhi.n	80090de <_realloc_r+0x1e>
 80090f4:	4629      	mov	r1, r5
 80090f6:	4640      	mov	r0, r8
 80090f8:	f7fe fe8e 	bl	8007e18 <_malloc_r>
 80090fc:	4607      	mov	r7, r0
 80090fe:	2800      	cmp	r0, #0
 8009100:	d0ec      	beq.n	80090dc <_realloc_r+0x1c>
 8009102:	42b5      	cmp	r5, r6
 8009104:	462a      	mov	r2, r5
 8009106:	4621      	mov	r1, r4
 8009108:	bf28      	it	cs
 800910a:	4632      	movcs	r2, r6
 800910c:	f7fe fac7 	bl	800769e <memcpy>
 8009110:	4621      	mov	r1, r4
 8009112:	4640      	mov	r0, r8
 8009114:	f7fe fadc 	bl	80076d0 <_free_r>
 8009118:	463c      	mov	r4, r7
 800911a:	e7e0      	b.n	80090de <_realloc_r+0x1e>

0800911c <fiprintf>:
 800911c:	b40e      	push	{r1, r2, r3}
 800911e:	b503      	push	{r0, r1, lr}
 8009120:	4601      	mov	r1, r0
 8009122:	ab03      	add	r3, sp, #12
 8009124:	4805      	ldr	r0, [pc, #20]	@ (800913c <fiprintf+0x20>)
 8009126:	f853 2b04 	ldr.w	r2, [r3], #4
 800912a:	6800      	ldr	r0, [r0, #0]
 800912c:	9301      	str	r3, [sp, #4]
 800912e:	f000 f83d 	bl	80091ac <_vfiprintf_r>
 8009132:	b002      	add	sp, #8
 8009134:	f85d eb04 	ldr.w	lr, [sp], #4
 8009138:	b003      	add	sp, #12
 800913a:	4770      	bx	lr
 800913c:	20000190 	.word	0x20000190

08009140 <abort>:
 8009140:	2006      	movs	r0, #6
 8009142:	b508      	push	{r3, lr}
 8009144:	f000 fa06 	bl	8009554 <raise>
 8009148:	2001      	movs	r0, #1
 800914a:	f7f9 fd82 	bl	8002c52 <_exit>

0800914e <_malloc_usable_size_r>:
 800914e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009152:	1f18      	subs	r0, r3, #4
 8009154:	2b00      	cmp	r3, #0
 8009156:	bfbc      	itt	lt
 8009158:	580b      	ldrlt	r3, [r1, r0]
 800915a:	18c0      	addlt	r0, r0, r3
 800915c:	4770      	bx	lr

0800915e <__sfputc_r>:
 800915e:	6893      	ldr	r3, [r2, #8]
 8009160:	b410      	push	{r4}
 8009162:	3b01      	subs	r3, #1
 8009164:	2b00      	cmp	r3, #0
 8009166:	6093      	str	r3, [r2, #8]
 8009168:	da07      	bge.n	800917a <__sfputc_r+0x1c>
 800916a:	6994      	ldr	r4, [r2, #24]
 800916c:	42a3      	cmp	r3, r4
 800916e:	db01      	blt.n	8009174 <__sfputc_r+0x16>
 8009170:	290a      	cmp	r1, #10
 8009172:	d102      	bne.n	800917a <__sfputc_r+0x1c>
 8009174:	bc10      	pop	{r4}
 8009176:	f000 b931 	b.w	80093dc <__swbuf_r>
 800917a:	6813      	ldr	r3, [r2, #0]
 800917c:	1c58      	adds	r0, r3, #1
 800917e:	6010      	str	r0, [r2, #0]
 8009180:	7019      	strb	r1, [r3, #0]
 8009182:	4608      	mov	r0, r1
 8009184:	bc10      	pop	{r4}
 8009186:	4770      	bx	lr

08009188 <__sfputs_r>:
 8009188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800918a:	4606      	mov	r6, r0
 800918c:	460f      	mov	r7, r1
 800918e:	4614      	mov	r4, r2
 8009190:	18d5      	adds	r5, r2, r3
 8009192:	42ac      	cmp	r4, r5
 8009194:	d101      	bne.n	800919a <__sfputs_r+0x12>
 8009196:	2000      	movs	r0, #0
 8009198:	e007      	b.n	80091aa <__sfputs_r+0x22>
 800919a:	463a      	mov	r2, r7
 800919c:	4630      	mov	r0, r6
 800919e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091a2:	f7ff ffdc 	bl	800915e <__sfputc_r>
 80091a6:	1c43      	adds	r3, r0, #1
 80091a8:	d1f3      	bne.n	8009192 <__sfputs_r+0xa>
 80091aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080091ac <_vfiprintf_r>:
 80091ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091b0:	460d      	mov	r5, r1
 80091b2:	4614      	mov	r4, r2
 80091b4:	4698      	mov	r8, r3
 80091b6:	4606      	mov	r6, r0
 80091b8:	b09d      	sub	sp, #116	@ 0x74
 80091ba:	b118      	cbz	r0, 80091c4 <_vfiprintf_r+0x18>
 80091bc:	6a03      	ldr	r3, [r0, #32]
 80091be:	b90b      	cbnz	r3, 80091c4 <_vfiprintf_r+0x18>
 80091c0:	f7fe f8fa 	bl	80073b8 <__sinit>
 80091c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80091c6:	07d9      	lsls	r1, r3, #31
 80091c8:	d405      	bmi.n	80091d6 <_vfiprintf_r+0x2a>
 80091ca:	89ab      	ldrh	r3, [r5, #12]
 80091cc:	059a      	lsls	r2, r3, #22
 80091ce:	d402      	bmi.n	80091d6 <_vfiprintf_r+0x2a>
 80091d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80091d2:	f7fe fa5a 	bl	800768a <__retarget_lock_acquire_recursive>
 80091d6:	89ab      	ldrh	r3, [r5, #12]
 80091d8:	071b      	lsls	r3, r3, #28
 80091da:	d501      	bpl.n	80091e0 <_vfiprintf_r+0x34>
 80091dc:	692b      	ldr	r3, [r5, #16]
 80091de:	b99b      	cbnz	r3, 8009208 <_vfiprintf_r+0x5c>
 80091e0:	4629      	mov	r1, r5
 80091e2:	4630      	mov	r0, r6
 80091e4:	f000 f938 	bl	8009458 <__swsetup_r>
 80091e8:	b170      	cbz	r0, 8009208 <_vfiprintf_r+0x5c>
 80091ea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80091ec:	07dc      	lsls	r4, r3, #31
 80091ee:	d504      	bpl.n	80091fa <_vfiprintf_r+0x4e>
 80091f0:	f04f 30ff 	mov.w	r0, #4294967295
 80091f4:	b01d      	add	sp, #116	@ 0x74
 80091f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091fa:	89ab      	ldrh	r3, [r5, #12]
 80091fc:	0598      	lsls	r0, r3, #22
 80091fe:	d4f7      	bmi.n	80091f0 <_vfiprintf_r+0x44>
 8009200:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009202:	f7fe fa43 	bl	800768c <__retarget_lock_release_recursive>
 8009206:	e7f3      	b.n	80091f0 <_vfiprintf_r+0x44>
 8009208:	2300      	movs	r3, #0
 800920a:	9309      	str	r3, [sp, #36]	@ 0x24
 800920c:	2320      	movs	r3, #32
 800920e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009212:	2330      	movs	r3, #48	@ 0x30
 8009214:	f04f 0901 	mov.w	r9, #1
 8009218:	f8cd 800c 	str.w	r8, [sp, #12]
 800921c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80093c8 <_vfiprintf_r+0x21c>
 8009220:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009224:	4623      	mov	r3, r4
 8009226:	469a      	mov	sl, r3
 8009228:	f813 2b01 	ldrb.w	r2, [r3], #1
 800922c:	b10a      	cbz	r2, 8009232 <_vfiprintf_r+0x86>
 800922e:	2a25      	cmp	r2, #37	@ 0x25
 8009230:	d1f9      	bne.n	8009226 <_vfiprintf_r+0x7a>
 8009232:	ebba 0b04 	subs.w	fp, sl, r4
 8009236:	d00b      	beq.n	8009250 <_vfiprintf_r+0xa4>
 8009238:	465b      	mov	r3, fp
 800923a:	4622      	mov	r2, r4
 800923c:	4629      	mov	r1, r5
 800923e:	4630      	mov	r0, r6
 8009240:	f7ff ffa2 	bl	8009188 <__sfputs_r>
 8009244:	3001      	adds	r0, #1
 8009246:	f000 80a7 	beq.w	8009398 <_vfiprintf_r+0x1ec>
 800924a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800924c:	445a      	add	r2, fp
 800924e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009250:	f89a 3000 	ldrb.w	r3, [sl]
 8009254:	2b00      	cmp	r3, #0
 8009256:	f000 809f 	beq.w	8009398 <_vfiprintf_r+0x1ec>
 800925a:	2300      	movs	r3, #0
 800925c:	f04f 32ff 	mov.w	r2, #4294967295
 8009260:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009264:	f10a 0a01 	add.w	sl, sl, #1
 8009268:	9304      	str	r3, [sp, #16]
 800926a:	9307      	str	r3, [sp, #28]
 800926c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009270:	931a      	str	r3, [sp, #104]	@ 0x68
 8009272:	4654      	mov	r4, sl
 8009274:	2205      	movs	r2, #5
 8009276:	f814 1b01 	ldrb.w	r1, [r4], #1
 800927a:	4853      	ldr	r0, [pc, #332]	@ (80093c8 <_vfiprintf_r+0x21c>)
 800927c:	f7ff fed8 	bl	8009030 <memchr>
 8009280:	9a04      	ldr	r2, [sp, #16]
 8009282:	b9d8      	cbnz	r0, 80092bc <_vfiprintf_r+0x110>
 8009284:	06d1      	lsls	r1, r2, #27
 8009286:	bf44      	itt	mi
 8009288:	2320      	movmi	r3, #32
 800928a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800928e:	0713      	lsls	r3, r2, #28
 8009290:	bf44      	itt	mi
 8009292:	232b      	movmi	r3, #43	@ 0x2b
 8009294:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009298:	f89a 3000 	ldrb.w	r3, [sl]
 800929c:	2b2a      	cmp	r3, #42	@ 0x2a
 800929e:	d015      	beq.n	80092cc <_vfiprintf_r+0x120>
 80092a0:	4654      	mov	r4, sl
 80092a2:	2000      	movs	r0, #0
 80092a4:	f04f 0c0a 	mov.w	ip, #10
 80092a8:	9a07      	ldr	r2, [sp, #28]
 80092aa:	4621      	mov	r1, r4
 80092ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092b0:	3b30      	subs	r3, #48	@ 0x30
 80092b2:	2b09      	cmp	r3, #9
 80092b4:	d94b      	bls.n	800934e <_vfiprintf_r+0x1a2>
 80092b6:	b1b0      	cbz	r0, 80092e6 <_vfiprintf_r+0x13a>
 80092b8:	9207      	str	r2, [sp, #28]
 80092ba:	e014      	b.n	80092e6 <_vfiprintf_r+0x13a>
 80092bc:	eba0 0308 	sub.w	r3, r0, r8
 80092c0:	fa09 f303 	lsl.w	r3, r9, r3
 80092c4:	4313      	orrs	r3, r2
 80092c6:	46a2      	mov	sl, r4
 80092c8:	9304      	str	r3, [sp, #16]
 80092ca:	e7d2      	b.n	8009272 <_vfiprintf_r+0xc6>
 80092cc:	9b03      	ldr	r3, [sp, #12]
 80092ce:	1d19      	adds	r1, r3, #4
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	9103      	str	r1, [sp, #12]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	bfbb      	ittet	lt
 80092d8:	425b      	neglt	r3, r3
 80092da:	f042 0202 	orrlt.w	r2, r2, #2
 80092de:	9307      	strge	r3, [sp, #28]
 80092e0:	9307      	strlt	r3, [sp, #28]
 80092e2:	bfb8      	it	lt
 80092e4:	9204      	strlt	r2, [sp, #16]
 80092e6:	7823      	ldrb	r3, [r4, #0]
 80092e8:	2b2e      	cmp	r3, #46	@ 0x2e
 80092ea:	d10a      	bne.n	8009302 <_vfiprintf_r+0x156>
 80092ec:	7863      	ldrb	r3, [r4, #1]
 80092ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80092f0:	d132      	bne.n	8009358 <_vfiprintf_r+0x1ac>
 80092f2:	9b03      	ldr	r3, [sp, #12]
 80092f4:	3402      	adds	r4, #2
 80092f6:	1d1a      	adds	r2, r3, #4
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	9203      	str	r2, [sp, #12]
 80092fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009300:	9305      	str	r3, [sp, #20]
 8009302:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80093cc <_vfiprintf_r+0x220>
 8009306:	2203      	movs	r2, #3
 8009308:	4650      	mov	r0, sl
 800930a:	7821      	ldrb	r1, [r4, #0]
 800930c:	f7ff fe90 	bl	8009030 <memchr>
 8009310:	b138      	cbz	r0, 8009322 <_vfiprintf_r+0x176>
 8009312:	2240      	movs	r2, #64	@ 0x40
 8009314:	9b04      	ldr	r3, [sp, #16]
 8009316:	eba0 000a 	sub.w	r0, r0, sl
 800931a:	4082      	lsls	r2, r0
 800931c:	4313      	orrs	r3, r2
 800931e:	3401      	adds	r4, #1
 8009320:	9304      	str	r3, [sp, #16]
 8009322:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009326:	2206      	movs	r2, #6
 8009328:	4829      	ldr	r0, [pc, #164]	@ (80093d0 <_vfiprintf_r+0x224>)
 800932a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800932e:	f7ff fe7f 	bl	8009030 <memchr>
 8009332:	2800      	cmp	r0, #0
 8009334:	d03f      	beq.n	80093b6 <_vfiprintf_r+0x20a>
 8009336:	4b27      	ldr	r3, [pc, #156]	@ (80093d4 <_vfiprintf_r+0x228>)
 8009338:	bb1b      	cbnz	r3, 8009382 <_vfiprintf_r+0x1d6>
 800933a:	9b03      	ldr	r3, [sp, #12]
 800933c:	3307      	adds	r3, #7
 800933e:	f023 0307 	bic.w	r3, r3, #7
 8009342:	3308      	adds	r3, #8
 8009344:	9303      	str	r3, [sp, #12]
 8009346:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009348:	443b      	add	r3, r7
 800934a:	9309      	str	r3, [sp, #36]	@ 0x24
 800934c:	e76a      	b.n	8009224 <_vfiprintf_r+0x78>
 800934e:	460c      	mov	r4, r1
 8009350:	2001      	movs	r0, #1
 8009352:	fb0c 3202 	mla	r2, ip, r2, r3
 8009356:	e7a8      	b.n	80092aa <_vfiprintf_r+0xfe>
 8009358:	2300      	movs	r3, #0
 800935a:	f04f 0c0a 	mov.w	ip, #10
 800935e:	4619      	mov	r1, r3
 8009360:	3401      	adds	r4, #1
 8009362:	9305      	str	r3, [sp, #20]
 8009364:	4620      	mov	r0, r4
 8009366:	f810 2b01 	ldrb.w	r2, [r0], #1
 800936a:	3a30      	subs	r2, #48	@ 0x30
 800936c:	2a09      	cmp	r2, #9
 800936e:	d903      	bls.n	8009378 <_vfiprintf_r+0x1cc>
 8009370:	2b00      	cmp	r3, #0
 8009372:	d0c6      	beq.n	8009302 <_vfiprintf_r+0x156>
 8009374:	9105      	str	r1, [sp, #20]
 8009376:	e7c4      	b.n	8009302 <_vfiprintf_r+0x156>
 8009378:	4604      	mov	r4, r0
 800937a:	2301      	movs	r3, #1
 800937c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009380:	e7f0      	b.n	8009364 <_vfiprintf_r+0x1b8>
 8009382:	ab03      	add	r3, sp, #12
 8009384:	9300      	str	r3, [sp, #0]
 8009386:	462a      	mov	r2, r5
 8009388:	4630      	mov	r0, r6
 800938a:	4b13      	ldr	r3, [pc, #76]	@ (80093d8 <_vfiprintf_r+0x22c>)
 800938c:	a904      	add	r1, sp, #16
 800938e:	f3af 8000 	nop.w
 8009392:	4607      	mov	r7, r0
 8009394:	1c78      	adds	r0, r7, #1
 8009396:	d1d6      	bne.n	8009346 <_vfiprintf_r+0x19a>
 8009398:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800939a:	07d9      	lsls	r1, r3, #31
 800939c:	d405      	bmi.n	80093aa <_vfiprintf_r+0x1fe>
 800939e:	89ab      	ldrh	r3, [r5, #12]
 80093a0:	059a      	lsls	r2, r3, #22
 80093a2:	d402      	bmi.n	80093aa <_vfiprintf_r+0x1fe>
 80093a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80093a6:	f7fe f971 	bl	800768c <__retarget_lock_release_recursive>
 80093aa:	89ab      	ldrh	r3, [r5, #12]
 80093ac:	065b      	lsls	r3, r3, #25
 80093ae:	f53f af1f 	bmi.w	80091f0 <_vfiprintf_r+0x44>
 80093b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80093b4:	e71e      	b.n	80091f4 <_vfiprintf_r+0x48>
 80093b6:	ab03      	add	r3, sp, #12
 80093b8:	9300      	str	r3, [sp, #0]
 80093ba:	462a      	mov	r2, r5
 80093bc:	4630      	mov	r0, r6
 80093be:	4b06      	ldr	r3, [pc, #24]	@ (80093d8 <_vfiprintf_r+0x22c>)
 80093c0:	a904      	add	r1, sp, #16
 80093c2:	f7ff fc43 	bl	8008c4c <_printf_i>
 80093c6:	e7e4      	b.n	8009392 <_vfiprintf_r+0x1e6>
 80093c8:	08009c08 	.word	0x08009c08
 80093cc:	08009c0e 	.word	0x08009c0e
 80093d0:	08009c12 	.word	0x08009c12
 80093d4:	00000000 	.word	0x00000000
 80093d8:	08009189 	.word	0x08009189

080093dc <__swbuf_r>:
 80093dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093de:	460e      	mov	r6, r1
 80093e0:	4614      	mov	r4, r2
 80093e2:	4605      	mov	r5, r0
 80093e4:	b118      	cbz	r0, 80093ee <__swbuf_r+0x12>
 80093e6:	6a03      	ldr	r3, [r0, #32]
 80093e8:	b90b      	cbnz	r3, 80093ee <__swbuf_r+0x12>
 80093ea:	f7fd ffe5 	bl	80073b8 <__sinit>
 80093ee:	69a3      	ldr	r3, [r4, #24]
 80093f0:	60a3      	str	r3, [r4, #8]
 80093f2:	89a3      	ldrh	r3, [r4, #12]
 80093f4:	071a      	lsls	r2, r3, #28
 80093f6:	d501      	bpl.n	80093fc <__swbuf_r+0x20>
 80093f8:	6923      	ldr	r3, [r4, #16]
 80093fa:	b943      	cbnz	r3, 800940e <__swbuf_r+0x32>
 80093fc:	4621      	mov	r1, r4
 80093fe:	4628      	mov	r0, r5
 8009400:	f000 f82a 	bl	8009458 <__swsetup_r>
 8009404:	b118      	cbz	r0, 800940e <__swbuf_r+0x32>
 8009406:	f04f 37ff 	mov.w	r7, #4294967295
 800940a:	4638      	mov	r0, r7
 800940c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800940e:	6823      	ldr	r3, [r4, #0]
 8009410:	6922      	ldr	r2, [r4, #16]
 8009412:	b2f6      	uxtb	r6, r6
 8009414:	1a98      	subs	r0, r3, r2
 8009416:	6963      	ldr	r3, [r4, #20]
 8009418:	4637      	mov	r7, r6
 800941a:	4283      	cmp	r3, r0
 800941c:	dc05      	bgt.n	800942a <__swbuf_r+0x4e>
 800941e:	4621      	mov	r1, r4
 8009420:	4628      	mov	r0, r5
 8009422:	f7ff fdb3 	bl	8008f8c <_fflush_r>
 8009426:	2800      	cmp	r0, #0
 8009428:	d1ed      	bne.n	8009406 <__swbuf_r+0x2a>
 800942a:	68a3      	ldr	r3, [r4, #8]
 800942c:	3b01      	subs	r3, #1
 800942e:	60a3      	str	r3, [r4, #8]
 8009430:	6823      	ldr	r3, [r4, #0]
 8009432:	1c5a      	adds	r2, r3, #1
 8009434:	6022      	str	r2, [r4, #0]
 8009436:	701e      	strb	r6, [r3, #0]
 8009438:	6962      	ldr	r2, [r4, #20]
 800943a:	1c43      	adds	r3, r0, #1
 800943c:	429a      	cmp	r2, r3
 800943e:	d004      	beq.n	800944a <__swbuf_r+0x6e>
 8009440:	89a3      	ldrh	r3, [r4, #12]
 8009442:	07db      	lsls	r3, r3, #31
 8009444:	d5e1      	bpl.n	800940a <__swbuf_r+0x2e>
 8009446:	2e0a      	cmp	r6, #10
 8009448:	d1df      	bne.n	800940a <__swbuf_r+0x2e>
 800944a:	4621      	mov	r1, r4
 800944c:	4628      	mov	r0, r5
 800944e:	f7ff fd9d 	bl	8008f8c <_fflush_r>
 8009452:	2800      	cmp	r0, #0
 8009454:	d0d9      	beq.n	800940a <__swbuf_r+0x2e>
 8009456:	e7d6      	b.n	8009406 <__swbuf_r+0x2a>

08009458 <__swsetup_r>:
 8009458:	b538      	push	{r3, r4, r5, lr}
 800945a:	4b29      	ldr	r3, [pc, #164]	@ (8009500 <__swsetup_r+0xa8>)
 800945c:	4605      	mov	r5, r0
 800945e:	6818      	ldr	r0, [r3, #0]
 8009460:	460c      	mov	r4, r1
 8009462:	b118      	cbz	r0, 800946c <__swsetup_r+0x14>
 8009464:	6a03      	ldr	r3, [r0, #32]
 8009466:	b90b      	cbnz	r3, 800946c <__swsetup_r+0x14>
 8009468:	f7fd ffa6 	bl	80073b8 <__sinit>
 800946c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009470:	0719      	lsls	r1, r3, #28
 8009472:	d422      	bmi.n	80094ba <__swsetup_r+0x62>
 8009474:	06da      	lsls	r2, r3, #27
 8009476:	d407      	bmi.n	8009488 <__swsetup_r+0x30>
 8009478:	2209      	movs	r2, #9
 800947a:	602a      	str	r2, [r5, #0]
 800947c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009480:	f04f 30ff 	mov.w	r0, #4294967295
 8009484:	81a3      	strh	r3, [r4, #12]
 8009486:	e033      	b.n	80094f0 <__swsetup_r+0x98>
 8009488:	0758      	lsls	r0, r3, #29
 800948a:	d512      	bpl.n	80094b2 <__swsetup_r+0x5a>
 800948c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800948e:	b141      	cbz	r1, 80094a2 <__swsetup_r+0x4a>
 8009490:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009494:	4299      	cmp	r1, r3
 8009496:	d002      	beq.n	800949e <__swsetup_r+0x46>
 8009498:	4628      	mov	r0, r5
 800949a:	f7fe f919 	bl	80076d0 <_free_r>
 800949e:	2300      	movs	r3, #0
 80094a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80094a2:	89a3      	ldrh	r3, [r4, #12]
 80094a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80094a8:	81a3      	strh	r3, [r4, #12]
 80094aa:	2300      	movs	r3, #0
 80094ac:	6063      	str	r3, [r4, #4]
 80094ae:	6923      	ldr	r3, [r4, #16]
 80094b0:	6023      	str	r3, [r4, #0]
 80094b2:	89a3      	ldrh	r3, [r4, #12]
 80094b4:	f043 0308 	orr.w	r3, r3, #8
 80094b8:	81a3      	strh	r3, [r4, #12]
 80094ba:	6923      	ldr	r3, [r4, #16]
 80094bc:	b94b      	cbnz	r3, 80094d2 <__swsetup_r+0x7a>
 80094be:	89a3      	ldrh	r3, [r4, #12]
 80094c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80094c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80094c8:	d003      	beq.n	80094d2 <__swsetup_r+0x7a>
 80094ca:	4621      	mov	r1, r4
 80094cc:	4628      	mov	r0, r5
 80094ce:	f000 f882 	bl	80095d6 <__smakebuf_r>
 80094d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094d6:	f013 0201 	ands.w	r2, r3, #1
 80094da:	d00a      	beq.n	80094f2 <__swsetup_r+0x9a>
 80094dc:	2200      	movs	r2, #0
 80094de:	60a2      	str	r2, [r4, #8]
 80094e0:	6962      	ldr	r2, [r4, #20]
 80094e2:	4252      	negs	r2, r2
 80094e4:	61a2      	str	r2, [r4, #24]
 80094e6:	6922      	ldr	r2, [r4, #16]
 80094e8:	b942      	cbnz	r2, 80094fc <__swsetup_r+0xa4>
 80094ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80094ee:	d1c5      	bne.n	800947c <__swsetup_r+0x24>
 80094f0:	bd38      	pop	{r3, r4, r5, pc}
 80094f2:	0799      	lsls	r1, r3, #30
 80094f4:	bf58      	it	pl
 80094f6:	6962      	ldrpl	r2, [r4, #20]
 80094f8:	60a2      	str	r2, [r4, #8]
 80094fa:	e7f4      	b.n	80094e6 <__swsetup_r+0x8e>
 80094fc:	2000      	movs	r0, #0
 80094fe:	e7f7      	b.n	80094f0 <__swsetup_r+0x98>
 8009500:	20000190 	.word	0x20000190

08009504 <_raise_r>:
 8009504:	291f      	cmp	r1, #31
 8009506:	b538      	push	{r3, r4, r5, lr}
 8009508:	4605      	mov	r5, r0
 800950a:	460c      	mov	r4, r1
 800950c:	d904      	bls.n	8009518 <_raise_r+0x14>
 800950e:	2316      	movs	r3, #22
 8009510:	6003      	str	r3, [r0, #0]
 8009512:	f04f 30ff 	mov.w	r0, #4294967295
 8009516:	bd38      	pop	{r3, r4, r5, pc}
 8009518:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800951a:	b112      	cbz	r2, 8009522 <_raise_r+0x1e>
 800951c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009520:	b94b      	cbnz	r3, 8009536 <_raise_r+0x32>
 8009522:	4628      	mov	r0, r5
 8009524:	f000 f830 	bl	8009588 <_getpid_r>
 8009528:	4622      	mov	r2, r4
 800952a:	4601      	mov	r1, r0
 800952c:	4628      	mov	r0, r5
 800952e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009532:	f000 b817 	b.w	8009564 <_kill_r>
 8009536:	2b01      	cmp	r3, #1
 8009538:	d00a      	beq.n	8009550 <_raise_r+0x4c>
 800953a:	1c59      	adds	r1, r3, #1
 800953c:	d103      	bne.n	8009546 <_raise_r+0x42>
 800953e:	2316      	movs	r3, #22
 8009540:	6003      	str	r3, [r0, #0]
 8009542:	2001      	movs	r0, #1
 8009544:	e7e7      	b.n	8009516 <_raise_r+0x12>
 8009546:	2100      	movs	r1, #0
 8009548:	4620      	mov	r0, r4
 800954a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800954e:	4798      	blx	r3
 8009550:	2000      	movs	r0, #0
 8009552:	e7e0      	b.n	8009516 <_raise_r+0x12>

08009554 <raise>:
 8009554:	4b02      	ldr	r3, [pc, #8]	@ (8009560 <raise+0xc>)
 8009556:	4601      	mov	r1, r0
 8009558:	6818      	ldr	r0, [r3, #0]
 800955a:	f7ff bfd3 	b.w	8009504 <_raise_r>
 800955e:	bf00      	nop
 8009560:	20000190 	.word	0x20000190

08009564 <_kill_r>:
 8009564:	b538      	push	{r3, r4, r5, lr}
 8009566:	2300      	movs	r3, #0
 8009568:	4d06      	ldr	r5, [pc, #24]	@ (8009584 <_kill_r+0x20>)
 800956a:	4604      	mov	r4, r0
 800956c:	4608      	mov	r0, r1
 800956e:	4611      	mov	r1, r2
 8009570:	602b      	str	r3, [r5, #0]
 8009572:	f7f9 fb5e 	bl	8002c32 <_kill>
 8009576:	1c43      	adds	r3, r0, #1
 8009578:	d102      	bne.n	8009580 <_kill_r+0x1c>
 800957a:	682b      	ldr	r3, [r5, #0]
 800957c:	b103      	cbz	r3, 8009580 <_kill_r+0x1c>
 800957e:	6023      	str	r3, [r4, #0]
 8009580:	bd38      	pop	{r3, r4, r5, pc}
 8009582:	bf00      	nop
 8009584:	20000a00 	.word	0x20000a00

08009588 <_getpid_r>:
 8009588:	f7f9 bb4c 	b.w	8002c24 <_getpid>

0800958c <__swhatbuf_r>:
 800958c:	b570      	push	{r4, r5, r6, lr}
 800958e:	460c      	mov	r4, r1
 8009590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009594:	4615      	mov	r5, r2
 8009596:	2900      	cmp	r1, #0
 8009598:	461e      	mov	r6, r3
 800959a:	b096      	sub	sp, #88	@ 0x58
 800959c:	da0c      	bge.n	80095b8 <__swhatbuf_r+0x2c>
 800959e:	89a3      	ldrh	r3, [r4, #12]
 80095a0:	2100      	movs	r1, #0
 80095a2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80095a6:	bf14      	ite	ne
 80095a8:	2340      	movne	r3, #64	@ 0x40
 80095aa:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80095ae:	2000      	movs	r0, #0
 80095b0:	6031      	str	r1, [r6, #0]
 80095b2:	602b      	str	r3, [r5, #0]
 80095b4:	b016      	add	sp, #88	@ 0x58
 80095b6:	bd70      	pop	{r4, r5, r6, pc}
 80095b8:	466a      	mov	r2, sp
 80095ba:	f000 f849 	bl	8009650 <_fstat_r>
 80095be:	2800      	cmp	r0, #0
 80095c0:	dbed      	blt.n	800959e <__swhatbuf_r+0x12>
 80095c2:	9901      	ldr	r1, [sp, #4]
 80095c4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80095c8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80095cc:	4259      	negs	r1, r3
 80095ce:	4159      	adcs	r1, r3
 80095d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80095d4:	e7eb      	b.n	80095ae <__swhatbuf_r+0x22>

080095d6 <__smakebuf_r>:
 80095d6:	898b      	ldrh	r3, [r1, #12]
 80095d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80095da:	079d      	lsls	r5, r3, #30
 80095dc:	4606      	mov	r6, r0
 80095de:	460c      	mov	r4, r1
 80095e0:	d507      	bpl.n	80095f2 <__smakebuf_r+0x1c>
 80095e2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80095e6:	6023      	str	r3, [r4, #0]
 80095e8:	6123      	str	r3, [r4, #16]
 80095ea:	2301      	movs	r3, #1
 80095ec:	6163      	str	r3, [r4, #20]
 80095ee:	b003      	add	sp, #12
 80095f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095f2:	466a      	mov	r2, sp
 80095f4:	ab01      	add	r3, sp, #4
 80095f6:	f7ff ffc9 	bl	800958c <__swhatbuf_r>
 80095fa:	9f00      	ldr	r7, [sp, #0]
 80095fc:	4605      	mov	r5, r0
 80095fe:	4639      	mov	r1, r7
 8009600:	4630      	mov	r0, r6
 8009602:	f7fe fc09 	bl	8007e18 <_malloc_r>
 8009606:	b948      	cbnz	r0, 800961c <__smakebuf_r+0x46>
 8009608:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800960c:	059a      	lsls	r2, r3, #22
 800960e:	d4ee      	bmi.n	80095ee <__smakebuf_r+0x18>
 8009610:	f023 0303 	bic.w	r3, r3, #3
 8009614:	f043 0302 	orr.w	r3, r3, #2
 8009618:	81a3      	strh	r3, [r4, #12]
 800961a:	e7e2      	b.n	80095e2 <__smakebuf_r+0xc>
 800961c:	89a3      	ldrh	r3, [r4, #12]
 800961e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009622:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009626:	81a3      	strh	r3, [r4, #12]
 8009628:	9b01      	ldr	r3, [sp, #4]
 800962a:	6020      	str	r0, [r4, #0]
 800962c:	b15b      	cbz	r3, 8009646 <__smakebuf_r+0x70>
 800962e:	4630      	mov	r0, r6
 8009630:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009634:	f000 f81e 	bl	8009674 <_isatty_r>
 8009638:	b128      	cbz	r0, 8009646 <__smakebuf_r+0x70>
 800963a:	89a3      	ldrh	r3, [r4, #12]
 800963c:	f023 0303 	bic.w	r3, r3, #3
 8009640:	f043 0301 	orr.w	r3, r3, #1
 8009644:	81a3      	strh	r3, [r4, #12]
 8009646:	89a3      	ldrh	r3, [r4, #12]
 8009648:	431d      	orrs	r5, r3
 800964a:	81a5      	strh	r5, [r4, #12]
 800964c:	e7cf      	b.n	80095ee <__smakebuf_r+0x18>
	...

08009650 <_fstat_r>:
 8009650:	b538      	push	{r3, r4, r5, lr}
 8009652:	2300      	movs	r3, #0
 8009654:	4d06      	ldr	r5, [pc, #24]	@ (8009670 <_fstat_r+0x20>)
 8009656:	4604      	mov	r4, r0
 8009658:	4608      	mov	r0, r1
 800965a:	4611      	mov	r1, r2
 800965c:	602b      	str	r3, [r5, #0]
 800965e:	f7f9 fb47 	bl	8002cf0 <_fstat>
 8009662:	1c43      	adds	r3, r0, #1
 8009664:	d102      	bne.n	800966c <_fstat_r+0x1c>
 8009666:	682b      	ldr	r3, [r5, #0]
 8009668:	b103      	cbz	r3, 800966c <_fstat_r+0x1c>
 800966a:	6023      	str	r3, [r4, #0]
 800966c:	bd38      	pop	{r3, r4, r5, pc}
 800966e:	bf00      	nop
 8009670:	20000a00 	.word	0x20000a00

08009674 <_isatty_r>:
 8009674:	b538      	push	{r3, r4, r5, lr}
 8009676:	2300      	movs	r3, #0
 8009678:	4d05      	ldr	r5, [pc, #20]	@ (8009690 <_isatty_r+0x1c>)
 800967a:	4604      	mov	r4, r0
 800967c:	4608      	mov	r0, r1
 800967e:	602b      	str	r3, [r5, #0]
 8009680:	f7f9 fb45 	bl	8002d0e <_isatty>
 8009684:	1c43      	adds	r3, r0, #1
 8009686:	d102      	bne.n	800968e <_isatty_r+0x1a>
 8009688:	682b      	ldr	r3, [r5, #0]
 800968a:	b103      	cbz	r3, 800968e <_isatty_r+0x1a>
 800968c:	6023      	str	r3, [r4, #0]
 800968e:	bd38      	pop	{r3, r4, r5, pc}
 8009690:	20000a00 	.word	0x20000a00

08009694 <_init>:
 8009694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009696:	bf00      	nop
 8009698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800969a:	bc08      	pop	{r3}
 800969c:	469e      	mov	lr, r3
 800969e:	4770      	bx	lr

080096a0 <_fini>:
 80096a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096a2:	bf00      	nop
 80096a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096a6:	bc08      	pop	{r3}
 80096a8:	469e      	mov	lr, r3
 80096aa:	4770      	bx	lr
