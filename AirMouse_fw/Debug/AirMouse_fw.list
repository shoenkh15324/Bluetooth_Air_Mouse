
AirMouse_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c0f4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000680  0800c208  0800c208  0000d208  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c888  0800c888  0000e1e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c888  0800c888  0000d888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c890  0800c890  0000e1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c890  0800c890  0000d890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c894  0800c894  0000d894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800c898  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008d0  200001e0  0800ca78  0000e1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ab0  0800ca78  0000eab0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012d80  00000000  00000000  0000e209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000337f  00000000  00000000  00020f89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001288  00000000  00000000  00024308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e68  00000000  00000000  00025590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005353  00000000  00000000  000263f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017a73  00000000  00000000  0002b74b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091f4d  00000000  00000000  000431be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d510b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064a8  00000000  00000000  000d5150  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  000db5f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c1ec 	.word	0x0800c1ec

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800c1ec 	.word	0x0800c1ec

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	@ 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_frsub>:
 8000b7c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b80:	e002      	b.n	8000b88 <__addsf3>
 8000b82:	bf00      	nop

08000b84 <__aeabi_fsub>:
 8000b84:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b88 <__addsf3>:
 8000b88:	0042      	lsls	r2, r0, #1
 8000b8a:	bf1f      	itttt	ne
 8000b8c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b90:	ea92 0f03 	teqne	r2, r3
 8000b94:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b98:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b9c:	d06a      	beq.n	8000c74 <__addsf3+0xec>
 8000b9e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ba2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ba6:	bfc1      	itttt	gt
 8000ba8:	18d2      	addgt	r2, r2, r3
 8000baa:	4041      	eorgt	r1, r0
 8000bac:	4048      	eorgt	r0, r1
 8000bae:	4041      	eorgt	r1, r0
 8000bb0:	bfb8      	it	lt
 8000bb2:	425b      	neglt	r3, r3
 8000bb4:	2b19      	cmp	r3, #25
 8000bb6:	bf88      	it	hi
 8000bb8:	4770      	bxhi	lr
 8000bba:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000bbe:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bc2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bc6:	bf18      	it	ne
 8000bc8:	4240      	negne	r0, r0
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bd2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bd6:	bf18      	it	ne
 8000bd8:	4249      	negne	r1, r1
 8000bda:	ea92 0f03 	teq	r2, r3
 8000bde:	d03f      	beq.n	8000c60 <__addsf3+0xd8>
 8000be0:	f1a2 0201 	sub.w	r2, r2, #1
 8000be4:	fa41 fc03 	asr.w	ip, r1, r3
 8000be8:	eb10 000c 	adds.w	r0, r0, ip
 8000bec:	f1c3 0320 	rsb	r3, r3, #32
 8000bf0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bf4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bf8:	d502      	bpl.n	8000c00 <__addsf3+0x78>
 8000bfa:	4249      	negs	r1, r1
 8000bfc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c00:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c04:	d313      	bcc.n	8000c2e <__addsf3+0xa6>
 8000c06:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c0a:	d306      	bcc.n	8000c1a <__addsf3+0x92>
 8000c0c:	0840      	lsrs	r0, r0, #1
 8000c0e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c12:	f102 0201 	add.w	r2, r2, #1
 8000c16:	2afe      	cmp	r2, #254	@ 0xfe
 8000c18:	d251      	bcs.n	8000cbe <__addsf3+0x136>
 8000c1a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c22:	bf08      	it	eq
 8000c24:	f020 0001 	biceq.w	r0, r0, #1
 8000c28:	ea40 0003 	orr.w	r0, r0, r3
 8000c2c:	4770      	bx	lr
 8000c2e:	0049      	lsls	r1, r1, #1
 8000c30:	eb40 0000 	adc.w	r0, r0, r0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	bf28      	it	cs
 8000c38:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c3c:	d2ed      	bcs.n	8000c1a <__addsf3+0x92>
 8000c3e:	fab0 fc80 	clz	ip, r0
 8000c42:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c46:	ebb2 020c 	subs.w	r2, r2, ip
 8000c4a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c4e:	bfaa      	itet	ge
 8000c50:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c54:	4252      	neglt	r2, r2
 8000c56:	4318      	orrge	r0, r3
 8000c58:	bfbc      	itt	lt
 8000c5a:	40d0      	lsrlt	r0, r2
 8000c5c:	4318      	orrlt	r0, r3
 8000c5e:	4770      	bx	lr
 8000c60:	f092 0f00 	teq	r2, #0
 8000c64:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c68:	bf06      	itte	eq
 8000c6a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c6e:	3201      	addeq	r2, #1
 8000c70:	3b01      	subne	r3, #1
 8000c72:	e7b5      	b.n	8000be0 <__addsf3+0x58>
 8000c74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c7c:	bf18      	it	ne
 8000c7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c82:	d021      	beq.n	8000cc8 <__addsf3+0x140>
 8000c84:	ea92 0f03 	teq	r2, r3
 8000c88:	d004      	beq.n	8000c94 <__addsf3+0x10c>
 8000c8a:	f092 0f00 	teq	r2, #0
 8000c8e:	bf08      	it	eq
 8000c90:	4608      	moveq	r0, r1
 8000c92:	4770      	bx	lr
 8000c94:	ea90 0f01 	teq	r0, r1
 8000c98:	bf1c      	itt	ne
 8000c9a:	2000      	movne	r0, #0
 8000c9c:	4770      	bxne	lr
 8000c9e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000ca2:	d104      	bne.n	8000cae <__addsf3+0x126>
 8000ca4:	0040      	lsls	r0, r0, #1
 8000ca6:	bf28      	it	cs
 8000ca8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000cac:	4770      	bx	lr
 8000cae:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cb2:	bf3c      	itt	cc
 8000cb4:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000cb8:	4770      	bxcc	lr
 8000cba:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cbe:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cc2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc6:	4770      	bx	lr
 8000cc8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ccc:	bf16      	itet	ne
 8000cce:	4608      	movne	r0, r1
 8000cd0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cd4:	4601      	movne	r1, r0
 8000cd6:	0242      	lsls	r2, r0, #9
 8000cd8:	bf06      	itte	eq
 8000cda:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cde:	ea90 0f01 	teqeq	r0, r1
 8000ce2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_ui2f>:
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e004      	b.n	8000cf8 <__aeabi_i2f+0x8>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_i2f>:
 8000cf0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cf4:	bf48      	it	mi
 8000cf6:	4240      	negmi	r0, r0
 8000cf8:	ea5f 0c00 	movs.w	ip, r0
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d04:	4601      	mov	r1, r0
 8000d06:	f04f 0000 	mov.w	r0, #0
 8000d0a:	e01c      	b.n	8000d46 <__aeabi_l2f+0x2a>

08000d0c <__aeabi_ul2f>:
 8000d0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e00a      	b.n	8000d30 <__aeabi_l2f+0x14>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_l2f>:
 8000d1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d28:	d502      	bpl.n	8000d30 <__aeabi_l2f+0x14>
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d30:	ea5f 0c01 	movs.w	ip, r1
 8000d34:	bf02      	ittt	eq
 8000d36:	4684      	moveq	ip, r0
 8000d38:	4601      	moveq	r1, r0
 8000d3a:	2000      	moveq	r0, #0
 8000d3c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d40:	bf08      	it	eq
 8000d42:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d46:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d4a:	fabc f28c 	clz	r2, ip
 8000d4e:	3a08      	subs	r2, #8
 8000d50:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d54:	db10      	blt.n	8000d78 <__aeabi_l2f+0x5c>
 8000d56:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d60:	f1c2 0220 	rsb	r2, r2, #32
 8000d64:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d68:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6c:	eb43 0002 	adc.w	r0, r3, r2
 8000d70:	bf08      	it	eq
 8000d72:	f020 0001 	biceq.w	r0, r0, #1
 8000d76:	4770      	bx	lr
 8000d78:	f102 0220 	add.w	r2, r2, #32
 8000d7c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d80:	f1c2 0220 	rsb	r2, r2, #32
 8000d84:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d88:	fa21 f202 	lsr.w	r2, r1, r2
 8000d8c:	eb43 0002 	adc.w	r0, r3, r2
 8000d90:	bf08      	it	eq
 8000d92:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_fmul>:
 8000d98:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000da0:	bf1e      	ittt	ne
 8000da2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000da6:	ea92 0f0c 	teqne	r2, ip
 8000daa:	ea93 0f0c 	teqne	r3, ip
 8000dae:	d06f      	beq.n	8000e90 <__aeabi_fmul+0xf8>
 8000db0:	441a      	add	r2, r3
 8000db2:	ea80 0c01 	eor.w	ip, r0, r1
 8000db6:	0240      	lsls	r0, r0, #9
 8000db8:	bf18      	it	ne
 8000dba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dbe:	d01e      	beq.n	8000dfe <__aeabi_fmul+0x66>
 8000dc0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000dc4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dc8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dcc:	fba0 3101 	umull	r3, r1, r0, r1
 8000dd0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dd4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dd8:	bf3e      	ittt	cc
 8000dda:	0049      	lslcc	r1, r1, #1
 8000ddc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000de0:	005b      	lslcc	r3, r3, #1
 8000de2:	ea40 0001 	orr.w	r0, r0, r1
 8000de6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dea:	2afd      	cmp	r2, #253	@ 0xfd
 8000dec:	d81d      	bhi.n	8000e2a <__aeabi_fmul+0x92>
 8000dee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000df2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df6:	bf08      	it	eq
 8000df8:	f020 0001 	biceq.w	r0, r0, #1
 8000dfc:	4770      	bx	lr
 8000dfe:	f090 0f00 	teq	r0, #0
 8000e02:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000e06:	bf08      	it	eq
 8000e08:	0249      	lsleq	r1, r1, #9
 8000e0a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e0e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e12:	3a7f      	subs	r2, #127	@ 0x7f
 8000e14:	bfc2      	ittt	gt
 8000e16:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e1a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e1e:	4770      	bxgt	lr
 8000e20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	3a01      	subs	r2, #1
 8000e2a:	dc5d      	bgt.n	8000ee8 <__aeabi_fmul+0x150>
 8000e2c:	f112 0f19 	cmn.w	r2, #25
 8000e30:	bfdc      	itt	le
 8000e32:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e36:	4770      	bxle	lr
 8000e38:	f1c2 0200 	rsb	r2, r2, #0
 8000e3c:	0041      	lsls	r1, r0, #1
 8000e3e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e42:	f1c2 0220 	rsb	r2, r2, #32
 8000e46:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e4a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e4e:	f140 0000 	adc.w	r0, r0, #0
 8000e52:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e56:	bf08      	it	eq
 8000e58:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5c:	4770      	bx	lr
 8000e5e:	f092 0f00 	teq	r2, #0
 8000e62:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e66:	bf02      	ittt	eq
 8000e68:	0040      	lsleq	r0, r0, #1
 8000e6a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e6e:	3a01      	subeq	r2, #1
 8000e70:	d0f9      	beq.n	8000e66 <__aeabi_fmul+0xce>
 8000e72:	ea40 000c 	orr.w	r0, r0, ip
 8000e76:	f093 0f00 	teq	r3, #0
 8000e7a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e7e:	bf02      	ittt	eq
 8000e80:	0049      	lsleq	r1, r1, #1
 8000e82:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e86:	3b01      	subeq	r3, #1
 8000e88:	d0f9      	beq.n	8000e7e <__aeabi_fmul+0xe6>
 8000e8a:	ea41 010c 	orr.w	r1, r1, ip
 8000e8e:	e78f      	b.n	8000db0 <__aeabi_fmul+0x18>
 8000e90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e94:	ea92 0f0c 	teq	r2, ip
 8000e98:	bf18      	it	ne
 8000e9a:	ea93 0f0c 	teqne	r3, ip
 8000e9e:	d00a      	beq.n	8000eb6 <__aeabi_fmul+0x11e>
 8000ea0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ea4:	bf18      	it	ne
 8000ea6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000eaa:	d1d8      	bne.n	8000e5e <__aeabi_fmul+0xc6>
 8000eac:	ea80 0001 	eor.w	r0, r0, r1
 8000eb0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000eb4:	4770      	bx	lr
 8000eb6:	f090 0f00 	teq	r0, #0
 8000eba:	bf17      	itett	ne
 8000ebc:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000ec0:	4608      	moveq	r0, r1
 8000ec2:	f091 0f00 	teqne	r1, #0
 8000ec6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eca:	d014      	beq.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ecc:	ea92 0f0c 	teq	r2, ip
 8000ed0:	d101      	bne.n	8000ed6 <__aeabi_fmul+0x13e>
 8000ed2:	0242      	lsls	r2, r0, #9
 8000ed4:	d10f      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ed6:	ea93 0f0c 	teq	r3, ip
 8000eda:	d103      	bne.n	8000ee4 <__aeabi_fmul+0x14c>
 8000edc:	024b      	lsls	r3, r1, #9
 8000ede:	bf18      	it	ne
 8000ee0:	4608      	movne	r0, r1
 8000ee2:	d108      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ee4:	ea80 0001 	eor.w	r0, r0, r1
 8000ee8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000eec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ef0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ef4:	4770      	bx	lr
 8000ef6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000efa:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000efe:	4770      	bx	lr

08000f00 <__aeabi_fdiv>:
 8000f00:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000f04:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f08:	bf1e      	ittt	ne
 8000f0a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f0e:	ea92 0f0c 	teqne	r2, ip
 8000f12:	ea93 0f0c 	teqne	r3, ip
 8000f16:	d069      	beq.n	8000fec <__aeabi_fdiv+0xec>
 8000f18:	eba2 0203 	sub.w	r2, r2, r3
 8000f1c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f20:	0249      	lsls	r1, r1, #9
 8000f22:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f26:	d037      	beq.n	8000f98 <__aeabi_fdiv+0x98>
 8000f28:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f2c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f30:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f34:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f38:	428b      	cmp	r3, r1
 8000f3a:	bf38      	it	cc
 8000f3c:	005b      	lslcc	r3, r3, #1
 8000f3e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f42:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f46:	428b      	cmp	r3, r1
 8000f48:	bf24      	itt	cs
 8000f4a:	1a5b      	subcs	r3, r3, r1
 8000f4c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f50:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f5a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f5e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f62:	bf24      	itt	cs
 8000f64:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f68:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f6c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f76:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f7a:	011b      	lsls	r3, r3, #4
 8000f7c:	bf18      	it	ne
 8000f7e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f82:	d1e0      	bne.n	8000f46 <__aeabi_fdiv+0x46>
 8000f84:	2afd      	cmp	r2, #253	@ 0xfd
 8000f86:	f63f af50 	bhi.w	8000e2a <__aeabi_fmul+0x92>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f90:	bf08      	it	eq
 8000f92:	f020 0001 	biceq.w	r0, r0, #1
 8000f96:	4770      	bx	lr
 8000f98:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f9c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fa0:	327f      	adds	r2, #127	@ 0x7f
 8000fa2:	bfc2      	ittt	gt
 8000fa4:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000fa8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fac:	4770      	bxgt	lr
 8000fae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000fb2:	f04f 0300 	mov.w	r3, #0
 8000fb6:	3a01      	subs	r2, #1
 8000fb8:	e737      	b.n	8000e2a <__aeabi_fmul+0x92>
 8000fba:	f092 0f00 	teq	r2, #0
 8000fbe:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fc2:	bf02      	ittt	eq
 8000fc4:	0040      	lsleq	r0, r0, #1
 8000fc6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fca:	3a01      	subeq	r2, #1
 8000fcc:	d0f9      	beq.n	8000fc2 <__aeabi_fdiv+0xc2>
 8000fce:	ea40 000c 	orr.w	r0, r0, ip
 8000fd2:	f093 0f00 	teq	r3, #0
 8000fd6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fda:	bf02      	ittt	eq
 8000fdc:	0049      	lsleq	r1, r1, #1
 8000fde:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fe2:	3b01      	subeq	r3, #1
 8000fe4:	d0f9      	beq.n	8000fda <__aeabi_fdiv+0xda>
 8000fe6:	ea41 010c 	orr.w	r1, r1, ip
 8000fea:	e795      	b.n	8000f18 <__aeabi_fdiv+0x18>
 8000fec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ff0:	ea92 0f0c 	teq	r2, ip
 8000ff4:	d108      	bne.n	8001008 <__aeabi_fdiv+0x108>
 8000ff6:	0242      	lsls	r2, r0, #9
 8000ff8:	f47f af7d 	bne.w	8000ef6 <__aeabi_fmul+0x15e>
 8000ffc:	ea93 0f0c 	teq	r3, ip
 8001000:	f47f af70 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 8001004:	4608      	mov	r0, r1
 8001006:	e776      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001008:	ea93 0f0c 	teq	r3, ip
 800100c:	d104      	bne.n	8001018 <__aeabi_fdiv+0x118>
 800100e:	024b      	lsls	r3, r1, #9
 8001010:	f43f af4c 	beq.w	8000eac <__aeabi_fmul+0x114>
 8001014:	4608      	mov	r0, r1
 8001016:	e76e      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001018:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800101c:	bf18      	it	ne
 800101e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8001022:	d1ca      	bne.n	8000fba <__aeabi_fdiv+0xba>
 8001024:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001028:	f47f af5c 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 800102c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8001030:	f47f af3c 	bne.w	8000eac <__aeabi_fmul+0x114>
 8001034:	e75f      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001036:	bf00      	nop

08001038 <__gesf2>:
 8001038:	f04f 3cff 	mov.w	ip, #4294967295
 800103c:	e006      	b.n	800104c <__cmpsf2+0x4>
 800103e:	bf00      	nop

08001040 <__lesf2>:
 8001040:	f04f 0c01 	mov.w	ip, #1
 8001044:	e002      	b.n	800104c <__cmpsf2+0x4>
 8001046:	bf00      	nop

08001048 <__cmpsf2>:
 8001048:	f04f 0c01 	mov.w	ip, #1
 800104c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001050:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001054:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001058:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800105c:	bf18      	it	ne
 800105e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001062:	d011      	beq.n	8001088 <__cmpsf2+0x40>
 8001064:	b001      	add	sp, #4
 8001066:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800106a:	bf18      	it	ne
 800106c:	ea90 0f01 	teqne	r0, r1
 8001070:	bf58      	it	pl
 8001072:	ebb2 0003 	subspl.w	r0, r2, r3
 8001076:	bf88      	it	hi
 8001078:	17c8      	asrhi	r0, r1, #31
 800107a:	bf38      	it	cc
 800107c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001080:	bf18      	it	ne
 8001082:	f040 0001 	orrne.w	r0, r0, #1
 8001086:	4770      	bx	lr
 8001088:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800108c:	d102      	bne.n	8001094 <__cmpsf2+0x4c>
 800108e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001092:	d105      	bne.n	80010a0 <__cmpsf2+0x58>
 8001094:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001098:	d1e4      	bne.n	8001064 <__cmpsf2+0x1c>
 800109a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800109e:	d0e1      	beq.n	8001064 <__cmpsf2+0x1c>
 80010a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop

080010a8 <__aeabi_cfrcmple>:
 80010a8:	4684      	mov	ip, r0
 80010aa:	4608      	mov	r0, r1
 80010ac:	4661      	mov	r1, ip
 80010ae:	e7ff      	b.n	80010b0 <__aeabi_cfcmpeq>

080010b0 <__aeabi_cfcmpeq>:
 80010b0:	b50f      	push	{r0, r1, r2, r3, lr}
 80010b2:	f7ff ffc9 	bl	8001048 <__cmpsf2>
 80010b6:	2800      	cmp	r0, #0
 80010b8:	bf48      	it	mi
 80010ba:	f110 0f00 	cmnmi.w	r0, #0
 80010be:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010c0 <__aeabi_fcmpeq>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff fff4 	bl	80010b0 <__aeabi_cfcmpeq>
 80010c8:	bf0c      	ite	eq
 80010ca:	2001      	moveq	r0, #1
 80010cc:	2000      	movne	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmplt>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffea 	bl	80010b0 <__aeabi_cfcmpeq>
 80010dc:	bf34      	ite	cc
 80010de:	2001      	movcc	r0, #1
 80010e0:	2000      	movcs	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmple>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffe0 	bl	80010b0 <__aeabi_cfcmpeq>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpge>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffd2 	bl	80010a8 <__aeabi_cfrcmple>
 8001104:	bf94      	ite	ls
 8001106:	2001      	movls	r0, #1
 8001108:	2000      	movhi	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpgt>:
 8001110:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001114:	f7ff ffc8 	bl	80010a8 <__aeabi_cfrcmple>
 8001118:	bf34      	ite	cc
 800111a:	2001      	movcc	r0, #1
 800111c:	2000      	movcs	r0, #0
 800111e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001122:	bf00      	nop

08001124 <__aeabi_fcmpun>:
 8001124:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001128:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800112c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001130:	d102      	bne.n	8001138 <__aeabi_fcmpun+0x14>
 8001132:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001136:	d108      	bne.n	800114a <__aeabi_fcmpun+0x26>
 8001138:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800113c:	d102      	bne.n	8001144 <__aeabi_fcmpun+0x20>
 800113e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001142:	d102      	bne.n	800114a <__aeabi_fcmpun+0x26>
 8001144:	f04f 0000 	mov.w	r0, #0
 8001148:	4770      	bx	lr
 800114a:	f04f 0001 	mov.w	r0, #1
 800114e:	4770      	bx	lr

08001150 <__aeabi_f2iz>:
 8001150:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001154:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001158:	d30f      	bcc.n	800117a <__aeabi_f2iz+0x2a>
 800115a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800115e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001162:	d90d      	bls.n	8001180 <__aeabi_f2iz+0x30>
 8001164:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001168:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800116c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001170:	fa23 f002 	lsr.w	r0, r3, r2
 8001174:	bf18      	it	ne
 8001176:	4240      	negne	r0, r0
 8001178:	4770      	bx	lr
 800117a:	f04f 0000 	mov.w	r0, #0
 800117e:	4770      	bx	lr
 8001180:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001184:	d101      	bne.n	800118a <__aeabi_f2iz+0x3a>
 8001186:	0242      	lsls	r2, r0, #9
 8001188:	d105      	bne.n	8001196 <__aeabi_f2iz+0x46>
 800118a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800118e:	bf08      	it	eq
 8001190:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001194:	4770      	bx	lr
 8001196:	f04f 0000 	mov.w	r0, #0
 800119a:	4770      	bx	lr

0800119c <__aeabi_d2lz>:
 800119c:	b538      	push	{r3, r4, r5, lr}
 800119e:	2200      	movs	r2, #0
 80011a0:	2300      	movs	r3, #0
 80011a2:	4604      	mov	r4, r0
 80011a4:	460d      	mov	r5, r1
 80011a6:	f7ff fc13 	bl	80009d0 <__aeabi_dcmplt>
 80011aa:	b928      	cbnz	r0, 80011b8 <__aeabi_d2lz+0x1c>
 80011ac:	4620      	mov	r0, r4
 80011ae:	4629      	mov	r1, r5
 80011b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80011b4:	f000 b80a 	b.w	80011cc <__aeabi_d2ulz>
 80011b8:	4620      	mov	r0, r4
 80011ba:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 80011be:	f000 f805 	bl	80011cc <__aeabi_d2ulz>
 80011c2:	4240      	negs	r0, r0
 80011c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011c8:	bd38      	pop	{r3, r4, r5, pc}
 80011ca:	bf00      	nop

080011cc <__aeabi_d2ulz>:
 80011cc:	b5d0      	push	{r4, r6, r7, lr}
 80011ce:	2200      	movs	r2, #0
 80011d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001200 <__aeabi_d2ulz+0x34>)
 80011d2:	4606      	mov	r6, r0
 80011d4:	460f      	mov	r7, r1
 80011d6:	f7ff f989 	bl	80004ec <__aeabi_dmul>
 80011da:	f7ff fc5f 	bl	8000a9c <__aeabi_d2uiz>
 80011de:	4604      	mov	r4, r0
 80011e0:	f7ff f90a 	bl	80003f8 <__aeabi_ui2d>
 80011e4:	2200      	movs	r2, #0
 80011e6:	4b07      	ldr	r3, [pc, #28]	@ (8001204 <__aeabi_d2ulz+0x38>)
 80011e8:	f7ff f980 	bl	80004ec <__aeabi_dmul>
 80011ec:	4602      	mov	r2, r0
 80011ee:	460b      	mov	r3, r1
 80011f0:	4630      	mov	r0, r6
 80011f2:	4639      	mov	r1, r7
 80011f4:	f7fe ffc2 	bl	800017c <__aeabi_dsub>
 80011f8:	f7ff fc50 	bl	8000a9c <__aeabi_d2uiz>
 80011fc:	4621      	mov	r1, r4
 80011fe:	bdd0      	pop	{r4, r6, r7, pc}
 8001200:	3df00000 	.word	0x3df00000
 8001204:	41f00000 	.word	0x41f00000

08001208 <buttonInit>:
static uint32_t lastDebounceTime_LEFT = 0;
static uint32_t lastDebounceTime_RIGHT = 0;


void buttonInit()
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  // Registering 'button' command in CLI.
  cliAdd("button", cliButton);
 800120c:	4902      	ldr	r1, [pc, #8]	@ (8001218 <buttonInit+0x10>)
 800120e:	4803      	ldr	r0, [pc, #12]	@ (800121c <buttonInit+0x14>)
 8001210:	f000 ff0a 	bl	8002028 <cliAdd>
}
 8001214:	bf00      	nop
 8001216:	bd80      	pop	{r7, pc}
 8001218:	0800130d 	.word	0x0800130d
 800121c:	0800c208 	.word	0x0800c208

08001220 <isButtonPressed>:

uint8_t isButtonPressed(GPIO_TypeDef *port, uint32_t pin)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
  if (port == LEFT_BTN_GPIO_Port && pin == LEFT_BTN_Pin)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a12      	ldr	r2, [pc, #72]	@ (8001278 <isButtonPressed+0x58>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d10b      	bne.n	800124a <isButtonPressed+0x2a>
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	2b10      	cmp	r3, #16
 8001236:	d108      	bne.n	800124a <isButtonPressed+0x2a>
  {
    if (isLeftButtonPressed)
 8001238:	4b10      	ldr	r3, [pc, #64]	@ (800127c <isButtonPressed+0x5c>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d014      	beq.n	800126a <isButtonPressed+0x4a>
    {
      isLeftButtonPressed = 0;
 8001240:	4b0e      	ldr	r3, [pc, #56]	@ (800127c <isButtonPressed+0x5c>)
 8001242:	2200      	movs	r2, #0
 8001244:	701a      	strb	r2, [r3, #0]
      return 1;
 8001246:	2301      	movs	r3, #1
 8001248:	e010      	b.n	800126c <isButtonPressed+0x4c>
    }
  }
  else if (port == RIGHT_BTN_GPIO_Port && pin == RIGHT_BTN_Pin)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a0a      	ldr	r2, [pc, #40]	@ (8001278 <isButtonPressed+0x58>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d10b      	bne.n	800126a <isButtonPressed+0x4a>
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	2b08      	cmp	r3, #8
 8001256:	d108      	bne.n	800126a <isButtonPressed+0x4a>
  {
    if (isRightButtonPressed)
 8001258:	4b09      	ldr	r3, [pc, #36]	@ (8001280 <isButtonPressed+0x60>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d004      	beq.n	800126a <isButtonPressed+0x4a>
    {
      isRightButtonPressed = 0;
 8001260:	4b07      	ldr	r3, [pc, #28]	@ (8001280 <isButtonPressed+0x60>)
 8001262:	2200      	movs	r2, #0
 8001264:	701a      	strb	r2, [r3, #0]
      return 1;
 8001266:	2301      	movs	r3, #1
 8001268:	e000      	b.n	800126c <isButtonPressed+0x4c>
    }
  }

  return 0;
 800126a:	2300      	movs	r3, #0
}
 800126c:	4618      	mov	r0, r3
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	bc80      	pop	{r7}
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	40010c00 	.word	0x40010c00
 800127c:	200001fc 	.word	0x200001fc
 8001280:	200001fd 	.word	0x200001fd

08001284 <buttonRead>:

void buttonRead(GPIO_TypeDef *port, uint32_t pin)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
  uint32_t currentTime = HAL_GetTick();
 800128e:	f002 fbb1 	bl	80039f4 <HAL_GetTick>
 8001292:	60f8      	str	r0, [r7, #12]

  if (pin == LEFT_BTN_Pin)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	2b10      	cmp	r3, #16
 8001298:	d129      	bne.n	80012ee <buttonRead+0x6a>
  {
    // left button debouncing.
    if ((currentTime - lastDebounceTime_LEFT) > DEBOUNCE_DELAY)
 800129a:	4b17      	ldr	r3, [pc, #92]	@ (80012f8 <buttonRead+0x74>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	68fa      	ldr	r2, [r7, #12]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	2b0f      	cmp	r3, #15
 80012a4:	d90d      	bls.n	80012c2 <buttonRead+0x3e>
    {
      lastDebounceTime_LEFT = currentTime;
 80012a6:	4a14      	ldr	r2, [pc, #80]	@ (80012f8 <buttonRead+0x74>)
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	6013      	str	r3, [r2, #0]

      if (HAL_GPIO_ReadPin(LEFT_BTN_GPIO_Port, LEFT_BTN_Pin) == GPIO_PIN_SET)
 80012ac:	2110      	movs	r1, #16
 80012ae:	4813      	ldr	r0, [pc, #76]	@ (80012fc <buttonRead+0x78>)
 80012b0:	f003 f902 	bl	80044b8 <HAL_GPIO_ReadPin>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d119      	bne.n	80012ee <buttonRead+0x6a>
      {
        isLeftButtonPressed = 1;
 80012ba:	4b11      	ldr	r3, [pc, #68]	@ (8001300 <buttonRead+0x7c>)
 80012bc:	2201      	movs	r2, #1
 80012be:	701a      	strb	r2, [r3, #0]
          isRightButtonPressed = 1;
        }
      }
    }
  }
}
 80012c0:	e015      	b.n	80012ee <buttonRead+0x6a>
    else if (pin == RIGHT_BTN_Pin)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	2b08      	cmp	r3, #8
 80012c6:	d112      	bne.n	80012ee <buttonRead+0x6a>
      if ((currentTime - lastDebounceTime_RIGHT) > DEBOUNCE_DELAY)
 80012c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001304 <buttonRead+0x80>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	68fa      	ldr	r2, [r7, #12]
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	2b0f      	cmp	r3, #15
 80012d2:	d90c      	bls.n	80012ee <buttonRead+0x6a>
        lastDebounceTime_RIGHT = currentTime;
 80012d4:	4a0b      	ldr	r2, [pc, #44]	@ (8001304 <buttonRead+0x80>)
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	6013      	str	r3, [r2, #0]
        if (HAL_GPIO_ReadPin(RIGHT_BTN_GPIO_Port, RIGHT_BTN_Pin) == GPIO_PIN_SET)
 80012da:	2108      	movs	r1, #8
 80012dc:	4807      	ldr	r0, [pc, #28]	@ (80012fc <buttonRead+0x78>)
 80012de:	f003 f8eb 	bl	80044b8 <HAL_GPIO_ReadPin>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d102      	bne.n	80012ee <buttonRead+0x6a>
          isRightButtonPressed = 1;
 80012e8:	4b07      	ldr	r3, [pc, #28]	@ (8001308 <buttonRead+0x84>)
 80012ea:	2201      	movs	r2, #1
 80012ec:	701a      	strb	r2, [r3, #0]
}
 80012ee:	bf00      	nop
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000200 	.word	0x20000200
 80012fc:	40010c00 	.word	0x40010c00
 8001300:	200001fc 	.word	0x200001fc
 8001304:	20000204 	.word	0x20000204
 8001308:	200001fd 	.word	0x200001fd

0800130c <cliButton>:

void cliButton(cli_args_t *args)
{
 800130c:	b590      	push	{r4, r7, lr}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8001314:	2300      	movs	r3, #0
 8001316:	73fb      	strb	r3, [r7, #15]

  if(args->argc == 1 && args->isStr(0, "show"))
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	881b      	ldrh	r3, [r3, #0]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d12e      	bne.n	800137e <cliButton+0x72>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	695b      	ldr	r3, [r3, #20]
 8001324:	491c      	ldr	r1, [pc, #112]	@ (8001398 <cliButton+0x8c>)
 8001326:	2000      	movs	r0, #0
 8001328:	4798      	blx	r3
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d026      	beq.n	800137e <cliButton+0x72>
  {
    uint8_t str = 0;
 8001330:	2300      	movs	r3, #0
 8001332:	73bb      	strb	r3, [r7, #14]

    while(cliKeepLoop())
 8001334:	e01a      	b.n	800136c <cliButton+0x60>
    {
      str = uartRead(CH_USART1);
 8001336:	2001      	movs	r0, #1
 8001338:	f001 f824 	bl	8002384 <uartRead>
 800133c:	4603      	mov	r3, r0
 800133e:	73bb      	strb	r3, [r7, #14]

      if(str == 0x0D) break;
 8001340:	7bbb      	ldrb	r3, [r7, #14]
 8001342:	2b0d      	cmp	r3, #13
 8001344:	d018      	beq.n	8001378 <cliButton+0x6c>

      cliPrintf("%d %d\n", HAL_GPIO_ReadPin(LEFT_BTN_GPIO_Port, LEFT_BTN_Pin), HAL_GPIO_ReadPin(RIGHT_BTN_GPIO_Port, RIGHT_BTN_Pin));
 8001346:	2110      	movs	r1, #16
 8001348:	4814      	ldr	r0, [pc, #80]	@ (800139c <cliButton+0x90>)
 800134a:	f003 f8b5 	bl	80044b8 <HAL_GPIO_ReadPin>
 800134e:	4603      	mov	r3, r0
 8001350:	461c      	mov	r4, r3
 8001352:	2108      	movs	r1, #8
 8001354:	4811      	ldr	r0, [pc, #68]	@ (800139c <cliButton+0x90>)
 8001356:	f003 f8af 	bl	80044b8 <HAL_GPIO_ReadPin>
 800135a:	4603      	mov	r3, r0
 800135c:	461a      	mov	r2, r3
 800135e:	4621      	mov	r1, r4
 8001360:	480f      	ldr	r0, [pc, #60]	@ (80013a0 <cliButton+0x94>)
 8001362:	f000 fd5f 	bl	8001e24 <cliPrintf>

      HAL_Delay(50);
 8001366:	2032      	movs	r0, #50	@ 0x32
 8001368:	f002 fb4e 	bl	8003a08 <HAL_Delay>
    while(cliKeepLoop())
 800136c:	f000 fe4e 	bl	800200c <cliKeepLoop>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d1df      	bne.n	8001336 <cliButton+0x2a>
 8001376:	e000      	b.n	800137a <cliButton+0x6e>
      if(str == 0x0D) break;
 8001378:	bf00      	nop
    }

    ret = true;
 800137a:	2301      	movs	r3, #1
 800137c:	73fb      	strb	r3, [r7, #15]
  }

  if(ret != true)
 800137e:	7bfb      	ldrb	r3, [r7, #15]
 8001380:	f083 0301 	eor.w	r3, r3, #1
 8001384:	b2db      	uxtb	r3, r3
 8001386:	2b00      	cmp	r3, #0
 8001388:	d002      	beq.n	8001390 <cliButton+0x84>
  {
    cliPrintf("button show\n");
 800138a:	4806      	ldr	r0, [pc, #24]	@ (80013a4 <cliButton+0x98>)
 800138c:	f000 fd4a 	bl	8001e24 <cliPrintf>
  }
}
 8001390:	bf00      	nop
 8001392:	3714      	adds	r7, #20
 8001394:	46bd      	mov	sp, r7
 8001396:	bd90      	pop	{r4, r7, pc}
 8001398:	0800c210 	.word	0x0800c210
 800139c:	40010c00 	.word	0x40010c00
 80013a0:	0800c218 	.word	0x0800c218
 80013a4:	0800c220 	.word	0x0800c220

080013a8 <cliInit>:
void cliShowList(cli_args_t *args);
void cliMemoryDump(cli_args_t *args);


bool cliInit(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  cli_node.is_open = false;
 80013ac:	4b1b      	ldr	r3, [pc, #108]	@ (800141c <cliInit+0x74>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	721a      	strb	r2, [r3, #8]
  cli_node.is_log  = false;
 80013b2:	4b1a      	ldr	r3, [pc, #104]	@ (800141c <cliInit+0x74>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	725a      	strb	r2, [r3, #9]
  cli_node.state   = CLI_RX_IDLE;
 80013b8:	4b18      	ldr	r3, [pc, #96]	@ (800141c <cliInit+0x74>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	741a      	strb	r2, [r3, #16]

  cli_node.hist_line_i     = 0;
 80013be:	4b17      	ldr	r3, [pc, #92]	@ (800141c <cliInit+0x74>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
  cli_node.hist_line_last  = 0;
 80013c6:	4b15      	ldr	r3, [pc, #84]	@ (800141c <cliInit+0x74>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
  cli_node.hist_line_count = 0;
 80013ce:	4b13      	ldr	r3, [pc, #76]	@ (800141c <cliInit+0x74>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	f883 2197 	strb.w	r2, [r3, #407]	@ 0x197
  cli_node.hist_line_new   = false;
 80013d6:	4b11      	ldr	r3, [pc, #68]	@ (800141c <cliInit+0x74>)
 80013d8:	2200      	movs	r2, #0
 80013da:	f883 2194 	strb.w	r2, [r3, #404]	@ 0x194

  cli_node.cmd_args.getData  = cliArgsGetData;
 80013de:	4b0f      	ldr	r3, [pc, #60]	@ (800141c <cliInit+0x74>)
 80013e0:	4a0f      	ldr	r2, [pc, #60]	@ (8001420 <cliInit+0x78>)
 80013e2:	f8c3 2434 	str.w	r2, [r3, #1076]	@ 0x434
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 80013e6:	4b0d      	ldr	r3, [pc, #52]	@ (800141c <cliInit+0x74>)
 80013e8:	4a0e      	ldr	r2, [pc, #56]	@ (8001424 <cliInit+0x7c>)
 80013ea:	f8c3 2438 	str.w	r2, [r3, #1080]	@ 0x438
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 80013ee:	4b0b      	ldr	r3, [pc, #44]	@ (800141c <cliInit+0x74>)
 80013f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001428 <cliInit+0x80>)
 80013f2:	f8c3 243c 	str.w	r2, [r3, #1084]	@ 0x43c
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 80013f6:	4b09      	ldr	r3, [pc, #36]	@ (800141c <cliInit+0x74>)
 80013f8:	4a0c      	ldr	r2, [pc, #48]	@ (800142c <cliInit+0x84>)
 80013fa:	f8c3 2440 	str.w	r2, [r3, #1088]	@ 0x440

  cliLineClean(&cli_node);
 80013fe:	4807      	ldr	r0, [pc, #28]	@ (800141c <cliInit+0x74>)
 8001400:	f000 fb86 	bl	8001b10 <cliLineClean>

  cliAdd("help", cliShowList);
 8001404:	490a      	ldr	r1, [pc, #40]	@ (8001430 <cliInit+0x88>)
 8001406:	480b      	ldr	r0, [pc, #44]	@ (8001434 <cliInit+0x8c>)
 8001408:	f000 fe0e 	bl	8002028 <cliAdd>
  cliAdd("md"  , cliMemoryDump);
 800140c:	490a      	ldr	r1, [pc, #40]	@ (8001438 <cliInit+0x90>)
 800140e:	480b      	ldr	r0, [pc, #44]	@ (800143c <cliInit+0x94>)
 8001410:	f000 fe0a 	bl	8002028 <cliAdd>

  return true;
 8001414:	2301      	movs	r3, #1
}
 8001416:	4618      	mov	r0, r3
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20000208 	.word	0x20000208
 8001420:	08001ed5 	.word	0x08001ed5
 8001424:	08001f25 	.word	0x08001f25
 8001428:	08001f75 	.word	0x08001f75
 800142c:	08001fb9 	.word	0x08001fb9
 8001430:	080020bd 	.word	0x080020bd
 8001434:	0800c230 	.word	0x0800c230
 8001438:	0800212d 	.word	0x0800212d
 800143c:	0800c238 	.word	0x0800c238

08001440 <cliOpen>:

bool cliOpen(uint8_t ch, uint32_t baud)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	6039      	str	r1, [r7, #0]
 800144a:	71fb      	strb	r3, [r7, #7]
  cli_node.ch = ch;
 800144c:	4a1c      	ldr	r2, [pc, #112]	@ (80014c0 <cliOpen+0x80>)
 800144e:	79fb      	ldrb	r3, [r7, #7]
 8001450:	7013      	strb	r3, [r2, #0]
  cli_node.baud = baud;
 8001452:	4a1b      	ldr	r2, [pc, #108]	@ (80014c0 <cliOpen+0x80>)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	6053      	str	r3, [r2, #4]

  qbuffer.in = 0;
 8001458:	4b1a      	ldr	r3, [pc, #104]	@ (80014c4 <cliOpen+0x84>)
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
  qbuffer.out = 0;
 800145e:	4b19      	ldr	r3, [pc, #100]	@ (80014c4 <cliOpen+0x84>)
 8001460:	2200      	movs	r2, #0
 8001462:	605a      	str	r2, [r3, #4]
  qbuffer.len = 256;
 8001464:	4b17      	ldr	r3, [pc, #92]	@ (80014c4 <cliOpen+0x84>)
 8001466:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800146a:	609a      	str	r2, [r3, #8]
  qbuffer.p_buf = &uart_buf[0];
 800146c:	4b15      	ldr	r3, [pc, #84]	@ (80014c4 <cliOpen+0x84>)
 800146e:	4a16      	ldr	r2, [pc, #88]	@ (80014c8 <cliOpen+0x88>)
 8001470:	60da      	str	r2, [r3, #12]

  cli_node.is_open = true;
 8001472:	4b13      	ldr	r3, [pc, #76]	@ (80014c0 <cliOpen+0x80>)
 8001474:	2201      	movs	r2, #1
 8001476:	721a      	strb	r2, [r3, #8]

  if(ch == CH_CDC)
 8001478:	79fb      	ldrb	r3, [r7, #7]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d01a      	beq.n	80014b4 <cliOpen+0x74>
  {
  }
  else if(ch == CH_USART1)
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d117      	bne.n	80014b4 <cliOpen+0x74>
  {
    if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&uart_buf, 256) != HAL_OK)
 8001484:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001488:	490f      	ldr	r1, [pc, #60]	@ (80014c8 <cliOpen+0x88>)
 800148a:	4810      	ldr	r0, [pc, #64]	@ (80014cc <cliOpen+0x8c>)
 800148c:	f005 f8cd 	bl	800662a <HAL_UART_Receive_DMA>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d002      	beq.n	800149c <cliOpen+0x5c>
    {
      cli_node.is_open = false;
 8001496:	4b0a      	ldr	r3, [pc, #40]	@ (80014c0 <cliOpen+0x80>)
 8001498:	2200      	movs	r2, #0
 800149a:	721a      	strb	r2, [r3, #8]
    }

    qbuffer.in = qbuffer.len - hdma_usart1_rx.Instance->CNDTR;
 800149c:	4b09      	ldr	r3, [pc, #36]	@ (80014c4 <cliOpen+0x84>)
 800149e:	689a      	ldr	r2, [r3, #8]
 80014a0:	4b0b      	ldr	r3, [pc, #44]	@ (80014d0 <cliOpen+0x90>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	4a06      	ldr	r2, [pc, #24]	@ (80014c4 <cliOpen+0x84>)
 80014aa:	6013      	str	r3, [r2, #0]
    qbuffer.out = qbuffer.in;
 80014ac:	4b05      	ldr	r3, [pc, #20]	@ (80014c4 <cliOpen+0x84>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a04      	ldr	r2, [pc, #16]	@ (80014c4 <cliOpen+0x84>)
 80014b2:	6053      	str	r3, [r2, #4]
  }

  return cli_node.is_open;
 80014b4:	4b02      	ldr	r3, [pc, #8]	@ (80014c0 <cliOpen+0x80>)
 80014b6:	7a1b      	ldrb	r3, [r3, #8]
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	20000208 	.word	0x20000208
 80014c4:	2000064c 	.word	0x2000064c
 80014c8:	2000065c 	.word	0x2000065c
 80014cc:	20000848 	.word	0x20000848
 80014d0:	200008d8 	.word	0x200008d8

080014d4 <cliShowLog>:
  cli_node.is_log = false;
  return true;
}

void cliShowLog(cli_t *p_cli)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  if (cli_node.is_log == true)
 80014dc:	4b34      	ldr	r3, [pc, #208]	@ (80015b0 <cliShowLog+0xdc>)
 80014de:	7a5b      	ldrb	r3, [r3, #9]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d061      	beq.n	80015a8 <cliShowLog+0xd4>
  {
    uartPrintf(p_cli->log_ch, "Cursor  : %d\n", p_cli->line.cursor);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	7a98      	ldrb	r0, [r3, #10]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
 80014ee:	461a      	mov	r2, r3
 80014f0:	4930      	ldr	r1, [pc, #192]	@ (80015b4 <cliShowLog+0xe0>)
 80014f2:	f000 feeb 	bl	80022cc <uartPrintf>
    uartPrintf(p_cli->log_ch, "Count   : %d\n", p_cli->line.count);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	7a98      	ldrb	r0, [r3, #10]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
 8001500:	461a      	mov	r2, r3
 8001502:	492d      	ldr	r1, [pc, #180]	@ (80015b8 <cliShowLog+0xe4>)
 8001504:	f000 fee2 	bl	80022cc <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf_len : %d\n", p_cli->line.buf_len);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	7a98      	ldrb	r0, [r3, #10]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f893 32e4 	ldrb.w	r3, [r3, #740]	@ 0x2e4
 8001512:	461a      	mov	r2, r3
 8001514:	4929      	ldr	r1, [pc, #164]	@ (80015bc <cliShowLog+0xe8>)
 8001516:	f000 fed9 	bl	80022cc <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf     : %s\n", p_cli->line.buf);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	7a98      	ldrb	r0, [r3, #10]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 8001524:	461a      	mov	r2, r3
 8001526:	4926      	ldr	r1, [pc, #152]	@ (80015c0 <cliShowLog+0xec>)
 8001528:	f000 fed0 	bl	80022cc <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_i  : %d\n", p_cli->hist_line_i);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	7a98      	ldrb	r0, [r3, #10]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f993 3195 	ldrsb.w	r3, [r3, #405]	@ 0x195
 8001536:	461a      	mov	r2, r3
 8001538:	4922      	ldr	r1, [pc, #136]	@ (80015c4 <cliShowLog+0xf0>)
 800153a:	f000 fec7 	bl	80022cc <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_lt : %d\n", p_cli->hist_line_last);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	7a98      	ldrb	r0, [r3, #10]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8001548:	461a      	mov	r2, r3
 800154a:	491f      	ldr	r1, [pc, #124]	@ (80015c8 <cliShowLog+0xf4>)
 800154c:	f000 febe 	bl	80022cc <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_c  : %d\n", p_cli->hist_line_count);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	7a98      	ldrb	r0, [r3, #10]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 800155a:	461a      	mov	r2, r3
 800155c:	491b      	ldr	r1, [pc, #108]	@ (80015cc <cliShowLog+0xf8>)
 800155e:	f000 feb5 	bl	80022cc <uartPrintf>

    for (int i=0; i<p_cli->hist_line_count; i++)
 8001562:	2300      	movs	r3, #0
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	e012      	b.n	800158e <cliShowLog+0xba>
    {
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	7a98      	ldrb	r0, [r3, #10]
 800156c:	68fa      	ldr	r2, [r7, #12]
 800156e:	4613      	mov	r3, r2
 8001570:	015b      	lsls	r3, r3, #5
 8001572:	4413      	add	r3, r2
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	4413      	add	r3, r2
 8001578:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	4413      	add	r3, r2
 8001580:	68fa      	ldr	r2, [r7, #12]
 8001582:	4913      	ldr	r1, [pc, #76]	@ (80015d0 <cliShowLog+0xfc>)
 8001584:	f000 fea2 	bl	80022cc <uartPrintf>
    for (int i=0; i<p_cli->hist_line_count; i++)
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	3301      	adds	r3, #1
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 8001594:	461a      	mov	r2, r3
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	4293      	cmp	r3, r2
 800159a:	dbe5      	blt.n	8001568 <cliShowLog+0x94>
    }
    uartPrintf(p_cli->log_ch, "\n");
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	7a9b      	ldrb	r3, [r3, #10]
 80015a0:	490c      	ldr	r1, [pc, #48]	@ (80015d4 <cliShowLog+0x100>)
 80015a2:	4618      	mov	r0, r3
 80015a4:	f000 fe92 	bl	80022cc <uartPrintf>
  }
}
 80015a8:	bf00      	nop
 80015aa:	3710      	adds	r7, #16
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	20000208 	.word	0x20000208
 80015b4:	0800c23c 	.word	0x0800c23c
 80015b8:	0800c24c 	.word	0x0800c24c
 80015bc:	0800c25c 	.word	0x0800c25c
 80015c0:	0800c26c 	.word	0x0800c26c
 80015c4:	0800c27c 	.word	0x0800c27c
 80015c8:	0800c28c 	.word	0x0800c28c
 80015cc:	0800c29c 	.word	0x0800c29c
 80015d0:	0800c2ac 	.word	0x0800c2ac
 80015d4:	0800c2bc 	.word	0x0800c2bc

080015d8 <cliShowPrompt>:

void cliShowPrompt(cli_t *p_cli)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  uartPrintf(p_cli->ch, "\n\r");
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	4906      	ldr	r1, [pc, #24]	@ (8001600 <cliShowPrompt+0x28>)
 80015e6:	4618      	mov	r0, r3
 80015e8:	f000 fe70 	bl	80022cc <uartPrintf>
  uartPrintf(p_cli->ch, CLI_PROMPT_STR);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	4904      	ldr	r1, [pc, #16]	@ (8001604 <cliShowPrompt+0x2c>)
 80015f2:	4618      	mov	r0, r3
 80015f4:	f000 fe6a 	bl	80022cc <uartPrintf>
}
 80015f8:	bf00      	nop
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	0800c2c0 	.word	0x0800c2c0
 8001604:	0800c2c4 	.word	0x0800c2c4

08001608 <cliMain>:

bool cliMain(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  if (cli_node.is_open != true)
 800160c:	4b0e      	ldr	r3, [pc, #56]	@ (8001648 <cliMain+0x40>)
 800160e:	7a1b      	ldrb	r3, [r3, #8]
 8001610:	f083 0301 	eor.w	r3, r3, #1
 8001614:	b2db      	uxtb	r3, r3
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <cliMain+0x16>
  {
    return false;
 800161a:	2300      	movs	r3, #0
 800161c:	e012      	b.n	8001644 <cliMain+0x3c>
  }

  if(uartAvailable(cli_node.ch) > 0)
 800161e:	4b0a      	ldr	r3, [pc, #40]	@ (8001648 <cliMain+0x40>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	4618      	mov	r0, r3
 8001624:	f000 fe24 	bl	8002270 <uartAvailable>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d009      	beq.n	8001642 <cliMain+0x3a>
  {
    cliUpdate(&cli_node, uartRead(cli_node.ch));
 800162e:	4b06      	ldr	r3, [pc, #24]	@ (8001648 <cliMain+0x40>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	4618      	mov	r0, r3
 8001634:	f000 fea6 	bl	8002384 <uartRead>
 8001638:	4603      	mov	r3, r0
 800163a:	4619      	mov	r1, r3
 800163c:	4802      	ldr	r0, [pc, #8]	@ (8001648 <cliMain+0x40>)
 800163e:	f000 f805 	bl	800164c <cliUpdate>
  }

  return true;
 8001642:	2301      	movs	r3, #1
}
 8001644:	4618      	mov	r0, r3
 8001646:	bd80      	pop	{r7, pc}
 8001648:	20000208 	.word	0x20000208

0800164c <cliUpdate>:
{
  return uartWrite(cli_node.ch, p_data, length);
}

bool cliUpdate(cli_t *p_cli, uint8_t rx_data)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b08c      	sub	sp, #48	@ 0x30
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	460b      	mov	r3, r1
 8001656:	70fb      	strb	r3, [r7, #3]
  bool ret = false;
 8001658:	2300      	movs	r3, #0
 800165a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t tx_buf[8];
  cli_line_t *line;

  line = &p_cli->line;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 8001664:	61fb      	str	r3, [r7, #28]


  if (p_cli->state == CLI_RX_IDLE)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	7c1b      	ldrb	r3, [r3, #16]
 800166a:	2b00      	cmp	r3, #0
 800166c:	f040 816d 	bne.w	800194a <cliUpdate+0x2fe>
  {
    switch(rx_data)
 8001670:	78fb      	ldrb	r3, [r7, #3]
 8001672:	2b7f      	cmp	r3, #127	@ 0x7f
 8001674:	d02a      	beq.n	80016cc <cliUpdate+0x80>
 8001676:	2b7f      	cmp	r3, #127	@ 0x7f
 8001678:	f300 80da 	bgt.w	8001830 <cliUpdate+0x1e4>
 800167c:	2b1b      	cmp	r3, #27
 800167e:	d021      	beq.n	80016c4 <cliUpdate+0x78>
 8001680:	2b1b      	cmp	r3, #27
 8001682:	f300 80d5 	bgt.w	8001830 <cliUpdate+0x1e4>
 8001686:	2b08      	cmp	r3, #8
 8001688:	d062      	beq.n	8001750 <cliUpdate+0x104>
 800168a:	2b0d      	cmp	r3, #13
 800168c:	f040 80d0 	bne.w	8001830 <cliUpdate+0x1e4>
    {
      // 엔터
      //
      case CLI_KEY_ENTER:
        if (line->count > 0)
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001696:	2b00      	cmp	r3, #0
 8001698:	d005      	beq.n	80016a6 <cliUpdate+0x5a>
        {
          cliLineAdd(p_cli);
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f000 fa51 	bl	8001b42 <cliLineAdd>
          cliRunCmd(p_cli);
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f000 fb1d 	bl	8001ce0 <cliRunCmd>
        }

        line->count = 0;
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	2200      	movs	r2, #0
 80016aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        line->cursor = 0;
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	2200      	movs	r2, #0
 80016b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        line->buf[0] = 0;
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	2200      	movs	r2, #0
 80016ba:	701a      	strb	r2, [r3, #0]
        cliShowPrompt(p_cli);
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f7ff ff8b 	bl	80015d8 <cliShowPrompt>
        break;
 80016c2:	e142      	b.n	800194a <cliUpdate+0x2fe>


      case CLI_KEY_ESC:
        p_cli->state = CLI_RX_SP1;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2201      	movs	r2, #1
 80016c8:	741a      	strb	r2, [r3, #16]
        break;
 80016ca:	e13e      	b.n	800194a <cliUpdate+0x2fe>


      // DEL
      //
      case CLI_KEY_DEL:
        if (line->cursor < line->count)
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80016d8:	429a      	cmp	r2, r3
 80016da:	f080 8131 	bcs.w	8001940 <cliUpdate+0x2f4>
        {
          uint8_t mov_len;

          mov_len = line->count - line->cursor;
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	76fb      	strb	r3, [r7, #27]
          for (int i=1; i<mov_len; i++)
 80016ee:	2301      	movs	r3, #1
 80016f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016f2:	e013      	b.n	800171c <cliUpdate+0xd0>
          {
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80016fa:	461a      	mov	r2, r3
 80016fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016fe:	441a      	add	r2, r3
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001706:	4619      	mov	r1, r3
 8001708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800170a:	440b      	add	r3, r1
 800170c:	3b01      	subs	r3, #1
 800170e:	69f9      	ldr	r1, [r7, #28]
 8001710:	5c89      	ldrb	r1, [r1, r2]
 8001712:	69fa      	ldr	r2, [r7, #28]
 8001714:	54d1      	strb	r1, [r2, r3]
          for (int i=1; i<mov_len; i++)
 8001716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001718:	3301      	adds	r3, #1
 800171a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800171c:	7efb      	ldrb	r3, [r7, #27]
 800171e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001720:	429a      	cmp	r2, r3
 8001722:	dbe7      	blt.n	80016f4 <cliUpdate+0xa8>
          }

          line->count--;
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800172a:	3b01      	subs	r3, #1
 800172c:	b2da      	uxtb	r2, r3
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          line->buf[line->count] = 0;
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800173a:	461a      	mov	r2, r3
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	2100      	movs	r1, #0
 8001740:	5499      	strb	r1, [r3, r2]

          uartPrintf(p_cli->ch, "\x1B[1P");
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	498d      	ldr	r1, [pc, #564]	@ (800197c <cliUpdate+0x330>)
 8001748:	4618      	mov	r0, r3
 800174a:	f000 fdbf 	bl	80022cc <uartPrintf>
        }
        break;
 800174e:	e0f7      	b.n	8001940 <cliUpdate+0x2f4>


      // 백스페이스
      //
      case CLI_KEY_BACK:
        if (line->count > 0 && line->cursor > 0)
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001756:	2b00      	cmp	r3, #0
 8001758:	d055      	beq.n	8001806 <cliUpdate+0x1ba>
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001760:	2b00      	cmp	r3, #0
 8001762:	d050      	beq.n	8001806 <cliUpdate+0x1ba>
        {
          if (line->cursor == line->count)
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001770:	429a      	cmp	r2, r3
 8001772:	d10e      	bne.n	8001792 <cliUpdate+0x146>
          {
            line->count--;
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800177a:	3b01      	subs	r3, #1
 800177c:	b2da      	uxtb	r2, r3
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
            line->buf[line->count] = 0;
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800178a:	461a      	mov	r2, r3
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	2100      	movs	r1, #0
 8001790:	5499      	strb	r1, [r3, r2]
          }

          if (line->cursor < line->count)
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800179e:	429a      	cmp	r2, r3
 80017a0:	d231      	bcs.n	8001806 <cliUpdate+0x1ba>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	76bb      	strb	r3, [r7, #26]

            for (int i=0; i<mov_len; i++)
 80017b2:	2300      	movs	r3, #0
 80017b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80017b6:	e013      	b.n	80017e0 <cliUpdate+0x194>
            {
              line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80017be:	461a      	mov	r2, r3
 80017c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017c2:	441a      	add	r2, r3
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80017ca:	4619      	mov	r1, r3
 80017cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017ce:	440b      	add	r3, r1
 80017d0:	3b01      	subs	r3, #1
 80017d2:	69f9      	ldr	r1, [r7, #28]
 80017d4:	5c89      	ldrb	r1, [r1, r2]
 80017d6:	69fa      	ldr	r2, [r7, #28]
 80017d8:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 80017da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017dc:	3301      	adds	r3, #1
 80017de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80017e0:	7ebb      	ldrb	r3, [r7, #26]
 80017e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80017e4:	429a      	cmp	r2, r3
 80017e6:	dbe7      	blt.n	80017b8 <cliUpdate+0x16c>
            }

            line->count--;
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80017ee:	3b01      	subs	r3, #1
 80017f0:	b2da      	uxtb	r2, r3
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
            line->buf[line->count] = 0;
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80017fe:	461a      	mov	r2, r3
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	2100      	movs	r1, #0
 8001804:	5499      	strb	r1, [r3, r2]
          }
        }

        if (line->cursor > 0)
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800180c:	2b00      	cmp	r3, #0
 800180e:	f000 8099 	beq.w	8001944 <cliUpdate+0x2f8>
        {
          line->cursor--;
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001818:	3b01      	subs	r3, #1
 800181a:	b2da      	uxtb	r2, r3
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	4956      	ldr	r1, [pc, #344]	@ (8001980 <cliUpdate+0x334>)
 8001828:	4618      	mov	r0, r3
 800182a:	f000 fd4f 	bl	80022cc <uartPrintf>
        }
        break;
 800182e:	e089      	b.n	8001944 <cliUpdate+0x2f8>


      default:
        if ((line->count + 1) < line->buf_len)
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001836:	3301      	adds	r3, #1
 8001838:	69fa      	ldr	r2, [r7, #28]
 800183a:	f892 2040 	ldrb.w	r2, [r2, #64]	@ 0x40
 800183e:	4293      	cmp	r3, r2
 8001840:	f280 8082 	bge.w	8001948 <cliUpdate+0x2fc>
        {
          if (line->cursor == line->count)
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001850:	429a      	cmp	r2, r3
 8001852:	d124      	bne.n	800189e <cliUpdate+0x252>
          {
            uartWrite(p_cli->ch, &rx_data, 1);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	1cf9      	adds	r1, r7, #3
 800185a:	2201      	movs	r2, #1
 800185c:	4618      	mov	r0, r3
 800185e:	f000 fd6d 	bl	800233c <uartWrite>

            line->buf[line->cursor] = rx_data;
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001868:	461a      	mov	r2, r3
 800186a:	78f9      	ldrb	r1, [r7, #3]
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	5499      	strb	r1, [r3, r2]
            line->count++;
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001876:	3301      	adds	r3, #1
 8001878:	b2da      	uxtb	r2, r3
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
            line->cursor++;
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001886:	3301      	adds	r3, #1
 8001888:	b2da      	uxtb	r2, r3
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
            line->buf[line->count] = 0;
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001896:	461a      	mov	r2, r3
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	2100      	movs	r1, #0
 800189c:	5499      	strb	r1, [r3, r2]
          }
          if (line->cursor < line->count)
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d24c      	bcs.n	8001948 <cliUpdate+0x2fc>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	767b      	strb	r3, [r7, #25]
            for (int i=0; i<mov_len; i++)
 80018be:	2300      	movs	r3, #0
 80018c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80018c2:	e013      	b.n	80018ec <cliUpdate+0x2a0>
            {
              line->buf[line->count - i] = line->buf[line->count - i - 1];
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80018ca:	461a      	mov	r2, r3
 80018cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	1e5a      	subs	r2, r3, #1
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80018d8:	4619      	mov	r1, r3
 80018da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018dc:	1acb      	subs	r3, r1, r3
 80018de:	69f9      	ldr	r1, [r7, #28]
 80018e0:	5c89      	ldrb	r1, [r1, r2]
 80018e2:	69fa      	ldr	r2, [r7, #28]
 80018e4:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 80018e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e8:	3301      	adds	r3, #1
 80018ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80018ec:	7e7b      	ldrb	r3, [r7, #25]
 80018ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018f0:	429a      	cmp	r2, r3
 80018f2:	dbe7      	blt.n	80018c4 <cliUpdate+0x278>
            }
            line->buf[line->cursor] = rx_data;
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80018fa:	461a      	mov	r2, r3
 80018fc:	78f9      	ldrb	r1, [r7, #3]
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	5499      	strb	r1, [r3, r2]
            line->count++;
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001908:	3301      	adds	r3, #1
 800190a:	b2da      	uxtb	r2, r3
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
            line->cursor++;
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001918:	3301      	adds	r3, #1
 800191a:	b2da      	uxtb	r2, r3
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
            line->buf[line->count] = 0;
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001928:	461a      	mov	r2, r3
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	2100      	movs	r1, #0
 800192e:	5499      	strb	r1, [r3, r2]

            uartPrintf(p_cli->ch, "\x1B[4h%c\x1B[4l", rx_data);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	78fa      	ldrb	r2, [r7, #3]
 8001936:	4913      	ldr	r1, [pc, #76]	@ (8001984 <cliUpdate+0x338>)
 8001938:	4618      	mov	r0, r3
 800193a:	f000 fcc7 	bl	80022cc <uartPrintf>
          }
        }
        break;
 800193e:	e003      	b.n	8001948 <cliUpdate+0x2fc>
        break;
 8001940:	bf00      	nop
 8001942:	e002      	b.n	800194a <cliUpdate+0x2fe>
        break;
 8001944:	bf00      	nop
 8001946:	e000      	b.n	800194a <cliUpdate+0x2fe>
        break;
 8001948:	bf00      	nop
    }
  }

  switch(p_cli->state)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	7c1b      	ldrb	r3, [r3, #16]
 800194e:	3b01      	subs	r3, #1
 8001950:	2b03      	cmp	r3, #3
 8001952:	f200 80d0 	bhi.w	8001af6 <cliUpdate+0x4aa>
 8001956:	a201      	add	r2, pc, #4	@ (adr r2, 800195c <cliUpdate+0x310>)
 8001958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800195c:	0800196d 	.word	0x0800196d
 8001960:	08001975 	.word	0x08001975
 8001964:	08001989 	.word	0x08001989
 8001968:	08001aed 	.word	0x08001aed
  {
    case CLI_RX_SP1:
      p_cli->state = CLI_RX_SP2;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2202      	movs	r2, #2
 8001970:	741a      	strb	r2, [r3, #16]
      break;
 8001972:	e0c0      	b.n	8001af6 <cliUpdate+0x4aa>

    case CLI_RX_SP2:
      p_cli->state = CLI_RX_SP3;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2203      	movs	r2, #3
 8001978:	741a      	strb	r2, [r3, #16]
      break;
 800197a:	e0bc      	b.n	8001af6 <cliUpdate+0x4aa>
 800197c:	0800c2cc 	.word	0x0800c2cc
 8001980:	0800c2d4 	.word	0x0800c2d4
 8001984:	0800c2dc 	.word	0x0800c2dc

    case CLI_RX_SP3:
      p_cli->state = CLI_RX_IDLE;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	741a      	strb	r2, [r3, #16]

      if (rx_data == CLI_KEY_LEFT)
 800198e:	78fb      	ldrb	r3, [r7, #3]
 8001990:	2b44      	cmp	r3, #68	@ 0x44
 8001992:	d11a      	bne.n	80019ca <cliUpdate+0x37e>
      {
        if (line->cursor > 0)
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800199a:	2b00      	cmp	r3, #0
 800199c:	d015      	beq.n	80019ca <cliUpdate+0x37e>
        {
          line->cursor--;
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019a4:	3b01      	subs	r3, #1
 80019a6:	b2da      	uxtb	r2, r3
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          tx_buf[0] = 0x1B;
 80019ae:	231b      	movs	r3, #27
 80019b0:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 80019b2:	235b      	movs	r3, #91	@ 0x5b
 80019b4:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 80019b6:	78fb      	ldrb	r3, [r7, #3]
 80019b8:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	f107 010c 	add.w	r1, r7, #12
 80019c2:	2203      	movs	r2, #3
 80019c4:	4618      	mov	r0, r3
 80019c6:	f000 fcb9 	bl	800233c <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_RIGHT)
 80019ca:	78fb      	ldrb	r3, [r7, #3]
 80019cc:	2b43      	cmp	r3, #67	@ 0x43
 80019ce:	d11d      	bne.n	8001a0c <cliUpdate+0x3c0>
      {
        if (line->cursor < line->count)
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80019dc:	429a      	cmp	r2, r3
 80019de:	d215      	bcs.n	8001a0c <cliUpdate+0x3c0>
        {
          line->cursor++;
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019e6:	3301      	adds	r3, #1
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

          tx_buf[0] = 0x1B;
 80019f0:	231b      	movs	r3, #27
 80019f2:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 80019f4:	235b      	movs	r3, #91	@ 0x5b
 80019f6:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 80019f8:	78fb      	ldrb	r3, [r7, #3]
 80019fa:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	f107 010c 	add.w	r1, r7, #12
 8001a04:	2203      	movs	r2, #3
 8001a06:	4618      	mov	r0, r3
 8001a08:	f000 fc98 	bl	800233c <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_UP)
 8001a0c:	78fb      	ldrb	r3, [r7, #3]
 8001a0e:	2b41      	cmp	r3, #65	@ 0x41
 8001a10:	d10c      	bne.n	8001a2c <cliUpdate+0x3e0>
      {
        cliLineChange(p_cli, true);
 8001a12:	2101      	movs	r1, #1
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f000 f8d9 	bl	8001bcc <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	781a      	ldrb	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 8001a24:	4619      	mov	r1, r3
 8001a26:	4610      	mov	r0, r2
 8001a28:	f000 fc50 	bl	80022cc <uartPrintf>
      }

      if (rx_data == CLI_KEY_DOWN)
 8001a2c:	78fb      	ldrb	r3, [r7, #3]
 8001a2e:	2b42      	cmp	r3, #66	@ 0x42
 8001a30:	d10c      	bne.n	8001a4c <cliUpdate+0x400>
      {
        cliLineChange(p_cli, false);
 8001a32:	2100      	movs	r1, #0
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f000 f8c9 	bl	8001bcc <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	781a      	ldrb	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 8001a44:	4619      	mov	r1, r3
 8001a46:	4610      	mov	r0, r2
 8001a48:	f000 fc40 	bl	80022cc <uartPrintf>
      }

      if (rx_data == CLI_KEY_HOME)
 8001a4c:	78fb      	ldrb	r3, [r7, #3]
 8001a4e:	2b31      	cmp	r3, #49	@ 0x31
 8001a50:	d10f      	bne.n	8001a72 <cliUpdate+0x426>
      {
        uartPrintf(p_cli->ch, "\x1B[%dD", line->cursor);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	7818      	ldrb	r0, [r3, #0]
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	492a      	ldr	r1, [pc, #168]	@ (8001b08 <cliUpdate+0x4bc>)
 8001a60:	f000 fc34 	bl	80022cc <uartPrintf>
        line->cursor = 0;
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	2200      	movs	r2, #0
 8001a68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        p_cli->state = CLI_RX_SP4;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2204      	movs	r2, #4
 8001a70:	741a      	strb	r2, [r3, #16]
      }

      if (rx_data == CLI_KEY_END)
 8001a72:	78fb      	ldrb	r3, [r7, #3]
 8001a74:	2b34      	cmp	r3, #52	@ 0x34
 8001a76:	d13d      	bne.n	8001af4 <cliUpdate+0x4a8>
      {
        uint16_t mov_len;

        if (line->cursor < line->count)
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d20f      	bcs.n	8001aa8 <cliUpdate+0x45c>
        {
          mov_len = line->count - line->cursor;
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001a8e:	461a      	mov	r2, r3
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dC", mov_len);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	8afa      	ldrh	r2, [r7, #22]
 8001aa0:	491a      	ldr	r1, [pc, #104]	@ (8001b0c <cliUpdate+0x4c0>)
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f000 fc12 	bl	80022cc <uartPrintf>
        }
        if (line->cursor > line->count)
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d90f      	bls.n	8001ad8 <cliUpdate+0x48c>
        {
          mov_len = line->cursor - line->count;
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001abe:	461a      	mov	r2, r3
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dD", mov_len);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	8afa      	ldrh	r2, [r7, #22]
 8001ad0:	490d      	ldr	r1, [pc, #52]	@ (8001b08 <cliUpdate+0x4bc>)
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f000 fbfa 	bl	80022cc <uartPrintf>
        }
        line->cursor = line->count;
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        p_cli->state = CLI_RX_SP4;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2204      	movs	r2, #4
 8001ae8:	741a      	strb	r2, [r3, #16]
      }
      break;
 8001aea:	e003      	b.n	8001af4 <cliUpdate+0x4a8>

    case CLI_RX_SP4:
      p_cli->state = CLI_RX_IDLE;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	741a      	strb	r2, [r3, #16]
      break;
 8001af2:	e000      	b.n	8001af6 <cliUpdate+0x4aa>
      break;
 8001af4:	bf00      	nop
  }



  cliShowLog(p_cli);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f7ff fcec 	bl	80014d4 <cliShowLog>

  return ret;
 8001afc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3730      	adds	r7, #48	@ 0x30
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	0800c2e8 	.word	0x0800c2e8
 8001b0c:	0800c2f0 	.word	0x0800c2f0

08001b10 <cliLineClean>:

void cliLineClean(cli_t *p_cli)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  p_cli->line.count   = 0;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f883 22e6 	strb.w	r2, [r3, #742]	@ 0x2e6
  p_cli->line.cursor  = 0;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	f883 22e5 	strb.w	r2, [r3, #741]	@ 0x2e5
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	223f      	movs	r2, #63	@ 0x3f
 8001b2c:	f883 22e4 	strb.w	r2, [r3, #740]	@ 0x2e4
  p_cli->line.buf[0]  = 0;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	f883 22a4 	strb.w	r2, [r3, #676]	@ 0x2a4
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bc80      	pop	{r7}
 8001b40:	4770      	bx	lr

08001b42 <cliLineAdd>:

void cliLineAdd(cli_t *p_cli)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b082      	sub	sp, #8
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]

  p_cli->line_buf[p_cli->hist_line_last] = p_cli->line;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8001b50:	461a      	mov	r2, r3
 8001b52:	6879      	ldr	r1, [r7, #4]
 8001b54:	4613      	mov	r3, r2
 8001b56:	015b      	lsls	r3, r3, #5
 8001b58:	4413      	add	r3, r2
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	4413      	add	r3, r2
 8001b5e:	440b      	add	r3, r1
 8001b60:	f503 72cc 	add.w	r2, r3, #408	@ 0x198
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	4610      	mov	r0, r2
 8001b68:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 8001b6c:	2243      	movs	r2, #67	@ 0x43
 8001b6e:	4619      	mov	r1, r3
 8001b70:	f007 fbf1 	bl	8009356 <memcpy>

  if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 8001b7a:	2b03      	cmp	r3, #3
 8001b7c:	d807      	bhi.n	8001b8e <cliLineAdd+0x4c>
  {
    p_cli->hist_line_count++;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 8001b84:	3301      	adds	r3, #1
 8001b86:	b2da      	uxtb	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f883 2197 	strb.w	r2, [r3, #407]	@ 0x197
  }

  p_cli->hist_line_i    = p_cli->hist_line_last;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8001b94:	b25a      	sxtb	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
  p_cli->hist_line_last = (p_cli->hist_line_last + 1) % CLI_LINE_HIS_MAX;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	425a      	negs	r2, r3
 8001ba6:	f003 0303 	and.w	r3, r3, #3
 8001baa:	f002 0203 	and.w	r2, r2, #3
 8001bae:	bf58      	it	pl
 8001bb0:	4253      	negpl	r3, r2
 8001bb2:	b2da      	uxtb	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
  p_cli->hist_line_new  = true;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	f883 2194 	strb.w	r2, [r3, #404]	@ 0x194
}
 8001bc2:	bf00      	nop
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
	...

08001bcc <cliLineChange>:

void cliLineChange(cli_t *p_cli, int8_t key_up)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	70fb      	strb	r3, [r7, #3]
  uint8_t change_i;


  if (p_cli->hist_line_count == 0)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d076      	beq.n	8001cd0 <cliLineChange+0x104>
  {
    return;
  }


  if (p_cli->line.cursor > 0)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d008      	beq.n	8001bfe <cliLineChange+0x32>
  {
    uartPrintf(p_cli->ch, "\x1B[%dD", p_cli->line.cursor);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	7818      	ldrb	r0, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	4937      	ldr	r1, [pc, #220]	@ (8001cd8 <cliLineChange+0x10c>)
 8001bfa:	f000 fb67 	bl	80022cc <uartPrintf>
  }
  if (p_cli->line.count > 0)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d008      	beq.n	8001c1a <cliLineChange+0x4e>
  {
    uartPrintf(p_cli->ch, "\x1B[%dP", p_cli->line.count);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	7818      	ldrb	r0, [r3, #0]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
 8001c12:	461a      	mov	r2, r3
 8001c14:	4931      	ldr	r1, [pc, #196]	@ (8001cdc <cliLineChange+0x110>)
 8001c16:	f000 fb59 	bl	80022cc <uartPrintf>
  }


  if (key_up == true)
 8001c1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d125      	bne.n	8001c6e <cliLineChange+0xa2>
  {
    if (p_cli->hist_line_new == true)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f893 3194 	ldrb.w	r3, [r3, #404]	@ 0x194
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d006      	beq.n	8001c3a <cliLineChange+0x6e>
    {
      p_cli->hist_line_i = p_cli->hist_line_last;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8001c32:	b25a      	sxtb	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
    }
    p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) % p_cli->hist_line_count;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f993 3195 	ldrsb.w	r3, [r3, #405]	@ 0x195
 8001c40:	461a      	mov	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 8001c48:	4413      	add	r3, r2
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	f892 2197 	ldrb.w	r2, [r2, #407]	@ 0x197
 8001c52:	fb93 f1f2 	sdiv	r1, r3, r2
 8001c56:	fb01 f202 	mul.w	r2, r1, r2
 8001c5a:	1a9b      	subs	r3, r3, r2
 8001c5c:	b25a      	sxtb	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
    change_i = p_cli->hist_line_i;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f993 3195 	ldrsb.w	r3, [r3, #405]	@ 0x195
 8001c6a:	73fb      	strb	r3, [r7, #15]
 8001c6c:	e013      	b.n	8001c96 <cliLineChange+0xca>
  }
  else
  {
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f993 3195 	ldrsb.w	r3, [r3, #405]	@ 0x195
 8001c74:	3301      	adds	r3, #1
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	f892 2197 	ldrb.w	r2, [r2, #407]	@ 0x197
 8001c7c:	fb93 f1f2 	sdiv	r1, r3, r2
 8001c80:	fb01 f202 	mul.w	r2, r1, r2
 8001c84:	1a9b      	subs	r3, r3, r2
 8001c86:	b25a      	sxtb	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
    change_i = p_cli->hist_line_i;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f993 3195 	ldrsb.w	r3, [r3, #405]	@ 0x195
 8001c94:	73fb      	strb	r3, [r7, #15]
  }

  p_cli->line = p_cli->line_buf[change_i];
 8001c96:	7bfa      	ldrb	r2, [r7, #15]
 8001c98:	6879      	ldr	r1, [r7, #4]
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	015b      	lsls	r3, r3, #5
 8001ca0:	4413      	add	r3, r2
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	4413      	add	r3, r2
 8001ca6:	4403      	add	r3, r0
 8001ca8:	f503 72cc 	add.w	r2, r3, #408	@ 0x198
 8001cac:	f501 7329 	add.w	r3, r1, #676	@ 0x2a4
 8001cb0:	4611      	mov	r1, r2
 8001cb2:	2243      	movs	r2, #67	@ 0x43
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f007 fb4e 	bl	8009356 <memcpy>
  p_cli->line.cursor = p_cli->line.count;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f893 22e6 	ldrb.w	r2, [r3, #742]	@ 0x2e6
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f883 22e5 	strb.w	r2, [r3, #741]	@ 0x2e5

  p_cli->hist_line_new = false;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 2194 	strb.w	r2, [r3, #404]	@ 0x194
 8001cce:	e000      	b.n	8001cd2 <cliLineChange+0x106>
    return;
 8001cd0:	bf00      	nop
}
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	0800c2e8 	.word	0x0800c2e8
 8001cdc:	0800c2f8 	.word	0x0800c2f8

08001ce0 <cliRunCmd>:

bool cliRunCmd(cli_t *p_cli)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	72fb      	strb	r3, [r7, #11]


  if (cliParseArgs(p_cli) == true)
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f000 f851 	bl	8001d94 <cliParseArgs>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d046      	beq.n	8001d86 <cliRunCmd+0xa6>
  {
    cliPrintf("\r\n");
 8001cf8:	4825      	ldr	r0, [pc, #148]	@ (8001d90 <cliRunCmd+0xb0>)
 8001cfa:	f000 f893 	bl	8001e24 <cliPrintf>

    cliToUpper(p_cli->argv[0]);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8001d04:	4618      	mov	r0, r3
 8001d06:	f000 f8b1 	bl	8001e6c <cliToUpper>

    for (int i=0; i<p_cli->cmd_count; i++)
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60fb      	str	r3, [r7, #12]
 8001d0e:	e033      	b.n	8001d78 <cliRunCmd+0x98>
    {
      if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f8d3 0114 	ldr.w	r0, [r3, #276]	@ 0x114
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	4413      	add	r3, r2
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	4413      	add	r3, r2
 8001d28:	3304      	adds	r3, #4
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	f7fe fa10 	bl	8000150 <strcmp>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d11d      	bne.n	8001d72 <cliRunCmd+0x92>
      {
        p_cli->cmd_args.argc =  p_cli->argc - 1;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f8b3 3112 	ldrh.w	r3, [r3, #274]	@ 0x112
 8001d3c:	3b01      	subs	r3, #1
 8001d3e:	b29a      	uxth	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f8a3 242c 	strh.w	r2, [r3, #1068]	@ 0x42c
        p_cli->cmd_args.argv = &p_cli->argv[1];
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f503 728c 	add.w	r2, r3, #280	@ 0x118
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
        p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);
 8001d52:	6879      	ldr	r1, [r7, #4]
 8001d54:	68fa      	ldr	r2, [r7, #12]
 8001d56:	4613      	mov	r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	4413      	add	r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	440b      	add	r3, r1
 8001d60:	f503 733f 	add.w	r3, r3, #764	@ 0x2fc
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	f202 422c 	addw	r2, r2, #1068	@ 0x42c
 8001d6c:	4610      	mov	r0, r2
 8001d6e:	4798      	blx	r3
        break;
 8001d70:	e009      	b.n	8001d86 <cliRunCmd+0xa6>
    for (int i=0; i<p_cli->cmd_count; i++)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	3301      	adds	r3, #1
 8001d76:	60fb      	str	r3, [r7, #12]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	@ 0x2e8
 8001d7e:	461a      	mov	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	4293      	cmp	r3, r2
 8001d84:	dbc4      	blt.n	8001d10 <cliRunCmd+0x30>
      }
    }
  }

  return ret;
 8001d86:	7afb      	ldrb	r3, [r7, #11]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3710      	adds	r7, #16
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	0800c300 	.word	0x0800c300

08001d94 <cliParseArgs>:

bool cliParseArgs(cli_t *p_cli)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b088      	sub	sp, #32
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	77fb      	strb	r3, [r7, #31]
  char *tok;
  char *next_ptr;
  uint16_t argc = 0;
 8001da0:	2300      	movs	r3, #0
 8001da2:	82fb      	strh	r3, [r7, #22]
  static const char *delim = " \f\n\r\t\v";
  char *cmdline;
  char **argv;

  p_cli->argc = 0;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	f8a3 2112 	strh.w	r2, [r3, #274]	@ 0x112

  cmdline = (char *)p_cli->line.buf;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 8001db2:	613b      	str	r3, [r7, #16]
  argv    = p_cli->argv;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 8001dba:	60fb      	str	r3, [r7, #12]

  argv[argc] = NULL;
 8001dbc:	8afb      	ldrh	r3, [r7, #22]
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	68fa      	ldr	r2, [r7, #12]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]

  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8001dc8:	4b15      	ldr	r3, [pc, #84]	@ (8001e20 <cliParseArgs+0x8c>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f107 0208 	add.w	r2, r7, #8
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	6938      	ldr	r0, [r7, #16]
 8001dd4:	f007 fa2e 	bl	8009234 <strtok_r>
 8001dd8:	61b8      	str	r0, [r7, #24]
 8001dda:	e010      	b.n	8001dfe <cliParseArgs+0x6a>
  {
    argv[argc++] = tok;
 8001ddc:	8afb      	ldrh	r3, [r7, #22]
 8001dde:	1c5a      	adds	r2, r3, #1
 8001de0:	82fa      	strh	r2, [r7, #22]
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	68fa      	ldr	r2, [r7, #12]
 8001de6:	4413      	add	r3, r2
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	601a      	str	r2, [r3, #0]
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8001dec:	4b0c      	ldr	r3, [pc, #48]	@ (8001e20 <cliParseArgs+0x8c>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f107 0208 	add.w	r2, r7, #8
 8001df4:	4619      	mov	r1, r3
 8001df6:	2000      	movs	r0, #0
 8001df8:	f007 fa1c 	bl	8009234 <strtok_r>
 8001dfc:	61b8      	str	r0, [r7, #24]
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d1eb      	bne.n	8001ddc <cliParseArgs+0x48>
  }

  p_cli->argc = argc;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	8afa      	ldrh	r2, [r7, #22]
 8001e08:	f8a3 2112 	strh.w	r2, [r3, #274]	@ 0x112

  if (argc > 0)
 8001e0c:	8afb      	ldrh	r3, [r7, #22]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <cliParseArgs+0x82>
  {
    ret = true;
 8001e12:	2301      	movs	r3, #1
 8001e14:	77fb      	strb	r3, [r7, #31]
  }

  return ret;
 8001e16:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3720      	adds	r7, #32
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	20000000 	.word	0x20000000

08001e24 <cliPrintf>:

void cliPrintf(const char *fmt, ...)
{
 8001e24:	b40f      	push	{r0, r1, r2, r3}
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b084      	sub	sp, #16
 8001e2a:	af00      	add	r7, sp, #0
  va_list arg;
  va_start (arg, fmt);
 8001e2c:	f107 031c 	add.w	r3, r7, #28
 8001e30:	607b      	str	r3, [r7, #4]
  int32_t len;
  cli_t *p_cli = &cli_node;
 8001e32:	4b0d      	ldr	r3, [pc, #52]	@ (8001e68 <cliPrintf+0x44>)
 8001e34:	60fb      	str	r3, [r7, #12]


  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f103 0011 	add.w	r0, r3, #17
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e44:	f007 f9a6 	bl	8009194 <vsniprintf>
 8001e48:	60b8      	str	r0, [r7, #8]
  va_end(arg);

  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	7818      	ldrb	r0, [r3, #0]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	3311      	adds	r3, #17
 8001e52:	68ba      	ldr	r2, [r7, #8]
 8001e54:	4619      	mov	r1, r3
 8001e56:	f000 fa71 	bl	800233c <uartWrite>
}
 8001e5a:	bf00      	nop
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001e64:	b004      	add	sp, #16
 8001e66:	4770      	bx	lr
 8001e68:	20000208 	.word	0x20000208

08001e6c <cliToUpper>:

void cliToUpper(char *str)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  uint16_t i;
  uint8_t  str_ch;

  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8001e74:	2300      	movs	r3, #0
 8001e76:	81fb      	strh	r3, [r7, #14]
 8001e78:	e018      	b.n	8001eac <cliToUpper+0x40>
  {
    str_ch = str[i];
 8001e7a:	89fb      	ldrh	r3, [r7, #14]
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	4413      	add	r3, r2
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	737b      	strb	r3, [r7, #13]

    if (str_ch == 0)
 8001e84:	7b7b      	ldrb	r3, [r7, #13]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d014      	beq.n	8001eb4 <cliToUpper+0x48>
    {
      break;
    }

    if ((str_ch >= 'a') && (str_ch <= 'z'))
 8001e8a:	7b7b      	ldrb	r3, [r7, #13]
 8001e8c:	2b60      	cmp	r3, #96	@ 0x60
 8001e8e:	d905      	bls.n	8001e9c <cliToUpper+0x30>
 8001e90:	7b7b      	ldrb	r3, [r7, #13]
 8001e92:	2b7a      	cmp	r3, #122	@ 0x7a
 8001e94:	d802      	bhi.n	8001e9c <cliToUpper+0x30>
    {
      str_ch = str_ch - 'a' + 'A';
 8001e96:	7b7b      	ldrb	r3, [r7, #13]
 8001e98:	3b20      	subs	r3, #32
 8001e9a:	737b      	strb	r3, [r7, #13]
    }
    str[i] = str_ch;
 8001e9c:	89fb      	ldrh	r3, [r7, #14]
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	7b7a      	ldrb	r2, [r7, #13]
 8001ea4:	701a      	strb	r2, [r3, #0]
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8001ea6:	89fb      	ldrh	r3, [r7, #14]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	81fb      	strh	r3, [r7, #14]
 8001eac:	89fb      	ldrh	r3, [r7, #14]
 8001eae:	2b0f      	cmp	r3, #15
 8001eb0:	d9e3      	bls.n	8001e7a <cliToUpper+0xe>
 8001eb2:	e000      	b.n	8001eb6 <cliToUpper+0x4a>
      break;
 8001eb4:	bf00      	nop
  }

  if (i == CLI_CMD_NAME_MAX)
 8001eb6:	89fb      	ldrh	r3, [r7, #14]
 8001eb8:	2b10      	cmp	r3, #16
 8001eba:	d105      	bne.n	8001ec8 <cliToUpper+0x5c>
  {
    str[i-1] = 0;
 8001ebc:	89fb      	ldrh	r3, [r7, #14]
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	701a      	strb	r2, [r3, #0]
  }
}
 8001ec8:	bf00      	nop
 8001eca:	3714      	adds	r7, #20
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bc80      	pop	{r7}
 8001ed0:	4770      	bx	lr
	...

08001ed4 <cliArgsGetData>:

int32_t cliArgsGetData(uint8_t index)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	4603      	mov	r3, r0
 8001edc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = 0;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8001ee2:	4b0f      	ldr	r3, [pc, #60]	@ (8001f20 <cliArgsGetData+0x4c>)
 8001ee4:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8001ee6:	79fb      	ldrb	r3, [r7, #7]
 8001ee8:	b29a      	uxth	r2, r3
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	@ 0x42c
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d301      	bcc.n	8001ef8 <cliArgsGetData+0x24>
  {
    return 0;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	e00e      	b.n	8001f16 <cliArgsGetData+0x42>
  }

  ret = (int32_t)strtoul((const char * ) p_cli->cmd_args.argv[index], (char **)NULL, (int) 0);
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8001efe:	79fb      	ldrb	r3, [r7, #7]
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	4413      	add	r3, r2
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2200      	movs	r2, #0
 8001f08:	2100      	movs	r1, #0
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f006 f97c 	bl	8008208 <strtoul>
 8001f10:	4603      	mov	r3, r0
 8001f12:	60fb      	str	r3, [r7, #12]

  return ret;
 8001f14:	68fb      	ldr	r3, [r7, #12]
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	20000208 	.word	0x20000208

08001f24 <cliArgsGetFloat>:

float cliArgsGetFloat(uint8_t index)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	71fb      	strb	r3, [r7, #7]
  float ret = 0.0;
 8001f2e:	f04f 0300 	mov.w	r3, #0
 8001f32:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8001f34:	4b0e      	ldr	r3, [pc, #56]	@ (8001f70 <cliArgsGetFloat+0x4c>)
 8001f36:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8001f38:	79fb      	ldrb	r3, [r7, #7]
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	@ 0x42c
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d302      	bcc.n	8001f4c <cliArgsGetFloat+0x28>
  {
    return 0;
 8001f46:	f04f 0300 	mov.w	r3, #0
 8001f4a:	e00c      	b.n	8001f66 <cliArgsGetFloat+0x42>
  }

  ret = (float)strtof((const char * ) p_cli->cmd_args.argv[index], (char **)NULL);
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8001f52:	79fb      	ldrb	r3, [r7, #7]
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	4413      	add	r3, r2
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f006 f88d 	bl	800807c <strtof>
 8001f62:	60f8      	str	r0, [r7, #12]

  return ret;
 8001f64:	68fb      	ldr	r3, [r7, #12]
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3710      	adds	r7, #16
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	20000208 	.word	0x20000208

08001f74 <cliArgsGetStr>:

char *cliArgsGetStr(uint8_t index)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b085      	sub	sp, #20
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	71fb      	strb	r3, [r7, #7]
  char *ret = NULL;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8001f82:	4b0c      	ldr	r3, [pc, #48]	@ (8001fb4 <cliArgsGetStr+0x40>)
 8001f84:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8001f86:	79fb      	ldrb	r3, [r7, #7]
 8001f88:	b29a      	uxth	r2, r3
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	@ 0x42c
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d301      	bcc.n	8001f98 <cliArgsGetStr+0x24>
  {
    return 0;
 8001f94:	2300      	movs	r3, #0
 8001f96:	e008      	b.n	8001faa <cliArgsGetStr+0x36>
  }

  ret = p_cli->cmd_args.argv[index];
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8001f9e:	79fb      	ldrb	r3, [r7, #7]
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	4413      	add	r3, r2
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	60fb      	str	r3, [r7, #12]

  return ret;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3714      	adds	r7, #20
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bc80      	pop	{r7}
 8001fb2:	4770      	bx	lr
 8001fb4:	20000208 	.word	0x20000208

08001fb8 <cliArgsIsStr>:

bool cliArgsIsStr(uint8_t index, char *p_str)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	6039      	str	r1, [r7, #0]
 8001fc2:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	73fb      	strb	r3, [r7, #15]
  cli_t *p_cli = &cli_node;
 8001fc8:	4b0f      	ldr	r3, [pc, #60]	@ (8002008 <cliArgsIsStr+0x50>)
 8001fca:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8001fcc:	79fb      	ldrb	r3, [r7, #7]
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	@ 0x42c
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d301      	bcc.n	8001fde <cliArgsIsStr+0x26>
  {
    return 0;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	e010      	b.n	8002000 <cliArgsIsStr+0x48>
  }

  if(strcmp(p_str, p_cli->cmd_args.argv[index]) == 0)
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8001fe4:	79fb      	ldrb	r3, [r7, #7]
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	4413      	add	r3, r2
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4619      	mov	r1, r3
 8001fee:	6838      	ldr	r0, [r7, #0]
 8001ff0:	f7fe f8ae 	bl	8000150 <strcmp>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d101      	bne.n	8001ffe <cliArgsIsStr+0x46>
  {
    ret = true;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002000:	4618      	mov	r0, r3
 8002002:	3710      	adds	r7, #16
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	20000208 	.word	0x20000208

0800200c <cliKeepLoop>:

bool cliKeepLoop(void)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
  cli_t *p_cli = &cli_node;
 8002012:	4b04      	ldr	r3, [pc, #16]	@ (8002024 <cliKeepLoop+0x18>)
 8002014:	607b      	str	r3, [r7, #4]

  if(p_cli->ch != -1)
  {
    return true;
 8002016:	2301      	movs	r3, #1
  }
  else
  {
    return false;
  }
}
 8002018:	4618      	mov	r0, r3
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	bc80      	pop	{r7}
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	20000208 	.word	0x20000208

08002028 <cliAdd>:

bool cliAdd(const char *cmd_str, void (*p_func)(cli_args_t *))
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b086      	sub	sp, #24
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  bool ret = true;
 8002032:	2301      	movs	r3, #1
 8002034:	75fb      	strb	r3, [r7, #23]
  cli_t *p_cli = &cli_node;
 8002036:	4b20      	ldr	r3, [pc, #128]	@ (80020b8 <cliAdd+0x90>)
 8002038:	613b      	str	r3, [r7, #16]
  uint16_t index;

  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	@ 0x2e8
 8002040:	2b0f      	cmp	r3, #15
 8002042:	d901      	bls.n	8002048 <cliAdd+0x20>
  {
    return false;
 8002044:	2300      	movs	r3, #0
 8002046:	e032      	b.n	80020ae <cliAdd+0x86>
  }

  index = p_cli->cmd_count;
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	@ 0x2e8
 800204e:	81fb      	strh	r3, [r7, #14]

  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 8002050:	89fa      	ldrh	r2, [r7, #14]
 8002052:	4613      	mov	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	4413      	add	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 800205e:	693a      	ldr	r2, [r7, #16]
 8002060:	4413      	add	r3, r2
 8002062:	3304      	adds	r3, #4
 8002064:	6879      	ldr	r1, [r7, #4]
 8002066:	4618      	mov	r0, r3
 8002068:	f007 f95f 	bl	800932a <strcpy>
  p_cli->cmd_list[index].cmd_func = p_func;
 800206c:	89fa      	ldrh	r2, [r7, #14]
 800206e:	6939      	ldr	r1, [r7, #16]
 8002070:	4613      	mov	r3, r2
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	4413      	add	r3, r2
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	440b      	add	r3, r1
 800207a:	f503 733f 	add.w	r3, r3, #764	@ 0x2fc
 800207e:	683a      	ldr	r2, [r7, #0]
 8002080:	601a      	str	r2, [r3, #0]

  cliToUpper(p_cli->cmd_list[index].cmd_str);
 8002082:	89fa      	ldrh	r2, [r7, #14]
 8002084:	4613      	mov	r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	4413      	add	r3, r2
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	4413      	add	r3, r2
 8002094:	3304      	adds	r3, #4
 8002096:	4618      	mov	r0, r3
 8002098:	f7ff fee8 	bl	8001e6c <cliToUpper>

  p_cli->cmd_count++;
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	@ 0x2e8
 80020a2:	3301      	adds	r3, #1
 80020a4:	b29a      	uxth	r2, r3
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	f8a3 22e8 	strh.w	r2, [r3, #744]	@ 0x2e8

  return ret;
 80020ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3718      	adds	r7, #24
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	20000208 	.word	0x20000208

080020bc <cliShowList>:

void cliShowList(cli_args_t *args)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  cli_t *p_cli = &cli_node;
 80020c4:	4b15      	ldr	r3, [pc, #84]	@ (800211c <cliShowList+0x60>)
 80020c6:	60bb      	str	r3, [r7, #8]


  cliPrintf("\r\n");
 80020c8:	4815      	ldr	r0, [pc, #84]	@ (8002120 <cliShowList+0x64>)
 80020ca:	f7ff feab 	bl	8001e24 <cliPrintf>
  cliPrintf("---------- cmd list ---------\r\n");
 80020ce:	4815      	ldr	r0, [pc, #84]	@ (8002124 <cliShowList+0x68>)
 80020d0:	f7ff fea8 	bl	8001e24 <cliPrintf>

  for (int i=0; i<p_cli->cmd_count; i++)
 80020d4:	2300      	movs	r3, #0
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	e012      	b.n	8002100 <cliShowList+0x44>
  {
    cliPrintf(p_cli->cmd_list[i].cmd_str);
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	4613      	mov	r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	4413      	add	r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 80020e8:	68ba      	ldr	r2, [r7, #8]
 80020ea:	4413      	add	r3, r2
 80020ec:	3304      	adds	r3, #4
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7ff fe98 	bl	8001e24 <cliPrintf>
    cliPrintf("\r\n");
 80020f4:	480a      	ldr	r0, [pc, #40]	@ (8002120 <cliShowList+0x64>)
 80020f6:	f7ff fe95 	bl	8001e24 <cliPrintf>
  for (int i=0; i<p_cli->cmd_count; i++)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	3301      	adds	r3, #1
 80020fe:	60fb      	str	r3, [r7, #12]
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	@ 0x2e8
 8002106:	461a      	mov	r2, r3
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	4293      	cmp	r3, r2
 800210c:	dbe5      	blt.n	80020da <cliShowList+0x1e>
  }

  cliPrintf("-----------------------------\r\n");
 800210e:	4806      	ldr	r0, [pc, #24]	@ (8002128 <cliShowList+0x6c>)
 8002110:	f7ff fe88 	bl	8001e24 <cliPrintf>
}
 8002114:	bf00      	nop
 8002116:	3710      	adds	r7, #16
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	20000208 	.word	0x20000208
 8002120:	0800c300 	.word	0x0800c300
 8002124:	0800c304 	.word	0x0800c304
 8002128:	0800c324 	.word	0x0800c324

0800212c <cliMemoryDump>:

void cliMemoryDump(cli_args_t *args)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b08c      	sub	sp, #48	@ 0x30
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  int idx, size = 16;
 8002134:	2310      	movs	r3, #16
 8002136:	62bb      	str	r3, [r7, #40]	@ 0x28
  unsigned int *addr;
  int idx1, i;
  unsigned int *ascptr;
  unsigned char asc[4];

  int    argc = args->argc;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	881b      	ldrh	r3, [r3, #0]
 800213c:	617b      	str	r3, [r7, #20]
  char **argv = args->argv;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	613b      	str	r3, [r7, #16]


  if(args->argc < 1)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	881b      	ldrh	r3, [r3, #0]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d103      	bne.n	8002154 <cliMemoryDump+0x28>
  {
    cliPrintf(">> md addr [size] \n");
 800214c:	4840      	ldr	r0, [pc, #256]	@ (8002250 <cliMemoryDump+0x124>)
 800214e:	f7ff fe69 	bl	8001e24 <cliPrintf>
 8002152:	e07a      	b.n	800224a <cliMemoryDump+0x11e>
    return;
  }

  if(argc > 1)
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	2b01      	cmp	r3, #1
 8002158:	dd09      	ble.n	800216e <cliMemoryDump+0x42>
  {
    size = (int)strtoul((const char * ) argv[1], (char **)NULL, (int) 0);
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	3304      	adds	r3, #4
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2200      	movs	r2, #0
 8002162:	2100      	movs	r1, #0
 8002164:	4618      	mov	r0, r3
 8002166:	f006 f84f 	bl	8008208 <strtoul>
 800216a:	4603      	mov	r3, r0
 800216c:	62bb      	str	r3, [r7, #40]	@ 0x28
  }
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2200      	movs	r2, #0
 8002174:	2100      	movs	r1, #0
 8002176:	4618      	mov	r0, r3
 8002178:	f006 f846 	bl	8008208 <strtoul>
 800217c:	4603      	mov	r3, r0
 800217e:	627b      	str	r3, [r7, #36]	@ 0x24
  ascptr = (unsigned int *)addr;
 8002180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002182:	61bb      	str	r3, [r7, #24]

  cliPrintf("\n   ");
 8002184:	4833      	ldr	r0, [pc, #204]	@ (8002254 <cliMemoryDump+0x128>)
 8002186:	f7ff fe4d 	bl	8001e24 <cliPrintf>
  for (idx = 0; idx<size; idx++)
 800218a:	2300      	movs	r3, #0
 800218c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800218e:	e058      	b.n	8002242 <cliMemoryDump+0x116>
  {
    if((idx%4) == 0)
 8002190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002192:	f003 0303 	and.w	r3, r3, #3
 8002196:	2b00      	cmp	r3, #0
 8002198:	d104      	bne.n	80021a4 <cliMemoryDump+0x78>
    {
      cliPrintf(" 0x%08X: ", (unsigned int)addr);
 800219a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800219c:	4619      	mov	r1, r3
 800219e:	482e      	ldr	r0, [pc, #184]	@ (8002258 <cliMemoryDump+0x12c>)
 80021a0:	f7ff fe40 	bl	8001e24 <cliPrintf>
    }
    cliPrintf(" 0x%08X", *(addr));
 80021a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4619      	mov	r1, r3
 80021aa:	482c      	ldr	r0, [pc, #176]	@ (800225c <cliMemoryDump+0x130>)
 80021ac:	f7ff fe3a 	bl	8001e24 <cliPrintf>

    if ((idx%4) == 3)
 80021b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021b2:	425a      	negs	r2, r3
 80021b4:	f003 0303 	and.w	r3, r3, #3
 80021b8:	f002 0203 	and.w	r2, r2, #3
 80021bc:	bf58      	it	pl
 80021be:	4253      	negpl	r3, r2
 80021c0:	2b03      	cmp	r3, #3
 80021c2:	d138      	bne.n	8002236 <cliMemoryDump+0x10a>
    {
      cliPrintf ("  |");
 80021c4:	4826      	ldr	r0, [pc, #152]	@ (8002260 <cliMemoryDump+0x134>)
 80021c6:	f7ff fe2d 	bl	8001e24 <cliPrintf>
      for (idx1= 0; idx1< 4; idx1++)
 80021ca:	2300      	movs	r3, #0
 80021cc:	623b      	str	r3, [r7, #32]
 80021ce:	e02c      	b.n	800222a <cliMemoryDump+0xfe>
      {
        memcpy((char *)asc, (char *)ascptr, 4);
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	60fb      	str	r3, [r7, #12]
        for (i=0;i<4;i++)
 80021d6:	2300      	movs	r3, #0
 80021d8:	61fb      	str	r3, [r7, #28]
 80021da:	e01d      	b.n	8002218 <cliMemoryDump+0xec>
        {
          if (asc[i] > 0x1f && asc[i] < 0x7f)
 80021dc:	f107 020c 	add.w	r2, r7, #12
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	4413      	add	r3, r2
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	2b1f      	cmp	r3, #31
 80021e8:	d910      	bls.n	800220c <cliMemoryDump+0xe0>
 80021ea:	f107 020c 	add.w	r2, r7, #12
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	4413      	add	r3, r2
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	2b7e      	cmp	r3, #126	@ 0x7e
 80021f6:	d809      	bhi.n	800220c <cliMemoryDump+0xe0>
          {
            cliPrintf("%c", asc[i]);
 80021f8:	f107 020c 	add.w	r2, r7, #12
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	4413      	add	r3, r2
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	4619      	mov	r1, r3
 8002204:	4817      	ldr	r0, [pc, #92]	@ (8002264 <cliMemoryDump+0x138>)
 8002206:	f7ff fe0d 	bl	8001e24 <cliPrintf>
 800220a:	e002      	b.n	8002212 <cliMemoryDump+0xe6>
          }
          else
          {
            cliPrintf(".");
 800220c:	4816      	ldr	r0, [pc, #88]	@ (8002268 <cliMemoryDump+0x13c>)
 800220e:	f7ff fe09 	bl	8001e24 <cliPrintf>
        for (i=0;i<4;i++)
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	3301      	adds	r3, #1
 8002216:	61fb      	str	r3, [r7, #28]
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	2b03      	cmp	r3, #3
 800221c:	ddde      	ble.n	80021dc <cliMemoryDump+0xb0>
          }
        }
        ascptr+=1;
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	3304      	adds	r3, #4
 8002222:	61bb      	str	r3, [r7, #24]
      for (idx1= 0; idx1< 4; idx1++)
 8002224:	6a3b      	ldr	r3, [r7, #32]
 8002226:	3301      	adds	r3, #1
 8002228:	623b      	str	r3, [r7, #32]
 800222a:	6a3b      	ldr	r3, [r7, #32]
 800222c:	2b03      	cmp	r3, #3
 800222e:	ddcf      	ble.n	80021d0 <cliMemoryDump+0xa4>
      }
      cliPrintf("|\n   ");
 8002230:	480e      	ldr	r0, [pc, #56]	@ (800226c <cliMemoryDump+0x140>)
 8002232:	f7ff fdf7 	bl	8001e24 <cliPrintf>
    }
    addr++;
 8002236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002238:	3304      	adds	r3, #4
 800223a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (idx = 0; idx<size; idx++)
 800223c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800223e:	3301      	adds	r3, #1
 8002240:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002242:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002246:	429a      	cmp	r2, r3
 8002248:	dba2      	blt.n	8002190 <cliMemoryDump+0x64>
  }
}
 800224a:	3730      	adds	r7, #48	@ 0x30
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	0800c344 	.word	0x0800c344
 8002254:	0800c358 	.word	0x0800c358
 8002258:	0800c360 	.word	0x0800c360
 800225c:	0800c36c 	.word	0x0800c36c
 8002260:	0800c374 	.word	0x0800c374
 8002264:	0800c378 	.word	0x0800c378
 8002268:	0800c37c 	.word	0x0800c37c
 800226c:	0800c380 	.word	0x0800c380

08002270 <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	4603      	mov	r3, r0
 8002278:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 800227a:	2300      	movs	r3, #0
 800227c:	60fb      	str	r3, [r7, #12]

  switch(ch)
 800227e:	79fb      	ldrb	r3, [r7, #7]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d017      	beq.n	80022b4 <uartAvailable+0x44>
 8002284:	2b01      	cmp	r3, #1
 8002286:	d116      	bne.n	80022b6 <uartAvailable+0x46>
    case CH_CDC:
      //ret = cdcAvailable();
      break;

    case CH_USART1:
      qbuffer.in = (qbuffer.len - hdma_usart1_rx.Instance->CNDTR);
 8002288:	4b0e      	ldr	r3, [pc, #56]	@ (80022c4 <uartAvailable+0x54>)
 800228a:	689a      	ldr	r2, [r3, #8]
 800228c:	4b0e      	ldr	r3, [pc, #56]	@ (80022c8 <uartAvailable+0x58>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	4a0b      	ldr	r2, [pc, #44]	@ (80022c4 <uartAvailable+0x54>)
 8002296:	6013      	str	r3, [r2, #0]
      ret = (qbuffer.in - qbuffer.out) % qbuffer.len;
 8002298:	4b0a      	ldr	r3, [pc, #40]	@ (80022c4 <uartAvailable+0x54>)
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	4b09      	ldr	r3, [pc, #36]	@ (80022c4 <uartAvailable+0x54>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	4a08      	ldr	r2, [pc, #32]	@ (80022c4 <uartAvailable+0x54>)
 80022a4:	6892      	ldr	r2, [r2, #8]
 80022a6:	fbb3 f1f2 	udiv	r1, r3, r2
 80022aa:	fb01 f202 	mul.w	r2, r1, r2
 80022ae:	1a9b      	subs	r3, r3, r2
 80022b0:	60fb      	str	r3, [r7, #12]
      break;
 80022b2:	e000      	b.n	80022b6 <uartAvailable+0x46>
      break;
 80022b4:	bf00      	nop
  }

  return ret;
 80022b6:	68fb      	ldr	r3, [r7, #12]
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3714      	adds	r7, #20
 80022bc:	46bd      	mov	sp, r7
 80022be:	bc80      	pop	{r7}
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	2000064c 	.word	0x2000064c
 80022c8:	200008d8 	.word	0x200008d8

080022cc <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
 80022cc:	b40e      	push	{r1, r2, r3}
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b0c7      	sub	sp, #284	@ 0x11c
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	4602      	mov	r2, r0
 80022d6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80022da:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 80022de:	701a      	strb	r2, [r3, #0]
  char buf[256];
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
 80022e0:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 80022e4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80022e8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80022ec:	601a      	str	r2, [r3, #0]
  len = vsnprintf(buf, 256, fmt, args);
 80022ee:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80022f2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80022f6:	f107 0010 	add.w	r0, r7, #16
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8002300:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002304:	f006 ff46 	bl	8009194 <vsniprintf>
 8002308:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

  ret = uartWrite(ch, (uint8_t *)buf, len);
 800230c:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002310:	f107 0110 	add.w	r1, r7, #16
 8002314:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002318:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	4618      	mov	r0, r3
 8002320:	f000 f80c 	bl	800233c <uartWrite>
 8002324:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

  va_end(args);


  return ret;
 8002328:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 800232c:	4618      	mov	r0, r3
 800232e:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 8002332:	46bd      	mov	sp, r7
 8002334:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002338:	b003      	add	sp, #12
 800233a:	4770      	bx	lr

0800233c <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af00      	add	r7, sp, #0
 8002342:	4603      	mov	r3, r0
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	607a      	str	r2, [r7, #4]
 8002348:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 800234a:	2300      	movs	r3, #0
 800234c:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  if(ch == CH_CDC)
 800234e:	7bfb      	ldrb	r3, [r7, #15]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d010      	beq.n	8002376 <uartWrite+0x3a>
  {
    //ret = cdcWrite(p_data, length);
  }
  else if(ch == CH_USART1)
 8002354:	7bfb      	ldrb	r3, [r7, #15]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d10d      	bne.n	8002376 <uartWrite+0x3a>
  {
    status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	b29a      	uxth	r2, r3
 800235e:	2364      	movs	r3, #100	@ 0x64
 8002360:	68b9      	ldr	r1, [r7, #8]
 8002362:	4807      	ldr	r0, [pc, #28]	@ (8002380 <uartWrite+0x44>)
 8002364:	f004 f8d6 	bl	8006514 <HAL_UART_Transmit>
 8002368:	4603      	mov	r3, r0
 800236a:	74fb      	strb	r3, [r7, #19]
    if (status == HAL_OK)
 800236c:	7cfb      	ldrb	r3, [r7, #19]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <uartWrite+0x3a>
    {
      ret = length;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8002376:	697b      	ldr	r3, [r7, #20]
}
 8002378:	4618      	mov	r0, r3
 800237a:	3718      	adds	r7, #24
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	20000848 	.word	0x20000848

08002384 <uartRead>:

uint8_t uartRead(uint8_t ch)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	4603      	mov	r3, r0
 800238c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = 0;
 800238e:	2300      	movs	r3, #0
 8002390:	73fb      	strb	r3, [r7, #15]

  if(ch == CH_CDC)
 8002392:	79fb      	ldrb	r3, [r7, #7]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d009      	beq.n	80023ac <uartRead+0x28>
  {
    //data = cdcRead();
  }
  else if(ch == CH_USART1)
 8002398:	79fb      	ldrb	r3, [r7, #7]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d106      	bne.n	80023ac <uartRead+0x28>
  {
     qbufferRead(&qbuffer, &data,1);
 800239e:	f107 030f 	add.w	r3, r7, #15
 80023a2:	2201      	movs	r2, #1
 80023a4:	4619      	mov	r1, r3
 80023a6:	4804      	ldr	r0, [pc, #16]	@ (80023b8 <uartRead+0x34>)
 80023a8:	f000 f808 	bl	80023bc <qbufferRead>
  }

  return data;
 80023ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	2000064c 	.word	0x2000064c

080023bc <qbufferRead>:

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 80023bc:	b480      	push	{r7}
 80023be:	b087      	sub	sp, #28
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	607a      	str	r2, [r7, #4]
  bool ret = true;
 80023c8:	2301      	movs	r3, #1
 80023ca:	75fb      	strb	r3, [r7, #23]

  for(int i=0; i<length; i++)
 80023cc:	2300      	movs	r3, #0
 80023ce:	613b      	str	r3, [r7, #16]
 80023d0:	e026      	b.n	8002420 <qbufferRead+0x64>
  {
    if(p_node->p_buf != NULL)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d009      	beq.n	80023ee <qbufferRead+0x32>
    {
      p_data[i] = p_node->p_buf[p_node->out];
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	68da      	ldr	r2, [r3, #12]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	441a      	add	r2, r3
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	68b9      	ldr	r1, [r7, #8]
 80023e8:	440b      	add	r3, r1
 80023ea:	7812      	ldrb	r2, [r2, #0]
 80023ec:	701a      	strb	r2, [r3, #0]
    }

    if(p_node->out != p_node->in)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	685a      	ldr	r2, [r3, #4]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d00c      	beq.n	8002414 <qbufferRead+0x58>
    {
      p_node->out = (p_node->out + 1) % p_node->len;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	3301      	adds	r3, #1
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	6892      	ldr	r2, [r2, #8]
 8002404:	fbb3 f1f2 	udiv	r1, r3, r2
 8002408:	fb01 f202 	mul.w	r2, r1, r2
 800240c:	1a9a      	subs	r2, r3, r2
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	605a      	str	r2, [r3, #4]
 8002412:	e002      	b.n	800241a <qbufferRead+0x5e>
    }
    else
    {
      ret = false;
 8002414:	2300      	movs	r3, #0
 8002416:	75fb      	strb	r3, [r7, #23]
      break;
 8002418:	e006      	b.n	8002428 <qbufferRead+0x6c>
  for(int i=0; i<length; i++)
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	3301      	adds	r3, #1
 800241e:	613b      	str	r3, [r7, #16]
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	429a      	cmp	r2, r3
 8002426:	d8d4      	bhi.n	80023d2 <qbufferRead+0x16>
    }
  }

  return ret;
 8002428:	7dfb      	ldrb	r3, [r7, #23]
}
 800242a:	4618      	mov	r0, r3
 800242c:	371c      	adds	r7, #28
 800242e:	46bd      	mov	sp, r7
 8002430:	bc80      	pop	{r7}
 8002432:	4770      	bx	lr

08002434 <ComplementaryFilter_Init>:

#include "complementary_filter.h"


void ComplementaryFilter_Init(ComplementaryFilter *cf, float alpha, float initial_angle)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
  cf->alpha = alpha;  // 상보 필터 계수 설정
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	68ba      	ldr	r2, [r7, #8]
 8002444:	605a      	str	r2, [r3, #4]
  cf->angle = initial_angle;  // 초기 각도 값 설정
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	601a      	str	r2, [r3, #0]
}
 800244c:	bf00      	nop
 800244e:	3714      	adds	r7, #20
 8002450:	46bd      	mov	sp, r7
 8002452:	bc80      	pop	{r7}
 8002454:	4770      	bx	lr

08002456 <ComplementaryFilter_Update>:

float ComplementaryFilter_Update(ComplementaryFilter *cf,
                                  float accel_angle,
                                  float gyro_rate,
                                  float dt)
{
 8002456:	b5b0      	push	{r4, r5, r7, lr}
 8002458:	b084      	sub	sp, #16
 800245a:	af00      	add	r7, sp, #0
 800245c:	60f8      	str	r0, [r7, #12]
 800245e:	60b9      	str	r1, [r7, #8]
 8002460:	607a      	str	r2, [r7, #4]
 8002462:	603b      	str	r3, [r7, #0]
  // 상보 필터 방정식: 필터링된 각도 = (자이로 각속도 기반 각도) + (가속도계 기반 각도)
  cf->angle = cf->alpha * (cf->angle + gyro_rate * dt) + (1.0f - cf->alpha) * accel_angle;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	685c      	ldr	r4, [r3, #4]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681d      	ldr	r5, [r3, #0]
 800246c:	6839      	ldr	r1, [r7, #0]
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f7fe fc92 	bl	8000d98 <__aeabi_fmul>
 8002474:	4603      	mov	r3, r0
 8002476:	4619      	mov	r1, r3
 8002478:	4628      	mov	r0, r5
 800247a:	f7fe fb85 	bl	8000b88 <__addsf3>
 800247e:	4603      	mov	r3, r0
 8002480:	4619      	mov	r1, r3
 8002482:	4620      	mov	r0, r4
 8002484:	f7fe fc88 	bl	8000d98 <__aeabi_fmul>
 8002488:	4603      	mov	r3, r0
 800248a:	461c      	mov	r4, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	4619      	mov	r1, r3
 8002492:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8002496:	f7fe fb75 	bl	8000b84 <__aeabi_fsub>
 800249a:	4603      	mov	r3, r0
 800249c:	68b9      	ldr	r1, [r7, #8]
 800249e:	4618      	mov	r0, r3
 80024a0:	f7fe fc7a 	bl	8000d98 <__aeabi_fmul>
 80024a4:	4603      	mov	r3, r0
 80024a6:	4619      	mov	r1, r3
 80024a8:	4620      	mov	r0, r4
 80024aa:	f7fe fb6d 	bl	8000b88 <__addsf3>
 80024ae:	4603      	mov	r3, r0
 80024b0:	461a      	mov	r2, r3
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	601a      	str	r2, [r3, #0]
  return cf->angle;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bdb0      	pop	{r4, r5, r7, pc}

080024c2 <dataProcessingInit>:

int32_t prev_wheel = 0;


void dataProcessingInit()
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	af00      	add	r7, sp, #0
  // Initialize filters.
  filterInit();
 80024c6:	f000 f803 	bl	80024d0 <filterInit>
}
 80024ca:	bf00      	nop
 80024cc:	bd80      	pop	{r7, pc}
	...

080024d0 <filterInit>:

// Initialize kalman filter and complementary filter.
void filterInit()
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
    KalmanFilter_Init(&kf_z, 0.01f, 0.1f, 0.0f);
 80024d4:	f04f 0300 	mov.w	r3, #0
 80024d8:	4a0c      	ldr	r2, [pc, #48]	@ (800250c <filterInit+0x3c>)
 80024da:	490d      	ldr	r1, [pc, #52]	@ (8002510 <filterInit+0x40>)
 80024dc:	480d      	ldr	r0, [pc, #52]	@ (8002514 <filterInit+0x44>)
 80024de:	f000 fa91 	bl	8002a04 <KalmanFilter_Init>
    KalmanFilter_Init(&kf_y, 0.01f, 0.1f, 0.0f);
 80024e2:	f04f 0300 	mov.w	r3, #0
 80024e6:	4a09      	ldr	r2, [pc, #36]	@ (800250c <filterInit+0x3c>)
 80024e8:	4909      	ldr	r1, [pc, #36]	@ (8002510 <filterInit+0x40>)
 80024ea:	480b      	ldr	r0, [pc, #44]	@ (8002518 <filterInit+0x48>)
 80024ec:	f000 fa8a 	bl	8002a04 <KalmanFilter_Init>
    ComplementaryFilter_Init(&cf_z, 0.98f, 0.0f);
 80024f0:	f04f 0200 	mov.w	r2, #0
 80024f4:	4909      	ldr	r1, [pc, #36]	@ (800251c <filterInit+0x4c>)
 80024f6:	480a      	ldr	r0, [pc, #40]	@ (8002520 <filterInit+0x50>)
 80024f8:	f7ff ff9c 	bl	8002434 <ComplementaryFilter_Init>
    ComplementaryFilter_Init(&cf_y, 0.98f, 0.0f);
 80024fc:	f04f 0200 	mov.w	r2, #0
 8002500:	4906      	ldr	r1, [pc, #24]	@ (800251c <filterInit+0x4c>)
 8002502:	4808      	ldr	r0, [pc, #32]	@ (8002524 <filterInit+0x54>)
 8002504:	f7ff ff96 	bl	8002434 <ComplementaryFilter_Init>
}
 8002508:	bf00      	nop
 800250a:	bd80      	pop	{r7, pc}
 800250c:	3dcccccd 	.word	0x3dcccccd
 8002510:	3c23d70a 	.word	0x3c23d70a
 8002514:	2000076c 	.word	0x2000076c
 8002518:	20000780 	.word	0x20000780
 800251c:	3f7ae148 	.word	0x3f7ae148
 8002520:	20000794 	.word	0x20000794
 8002524:	2000079c 	.word	0x2000079c

08002528 <calculateMouseX>:

// X-axis movement can be obtained wity yaw.
int8_t calculateMouseX()
{
 8002528:	b5b0      	push	{r4, r5, r7, lr}
 800252a:	b086      	sub	sp, #24
 800252c:	af00      	add	r7, sp, #0
  // Read MPU6050 Datasheet.
  float gz = (float)raw_gz / 32.8;
 800252e:	4b24      	ldr	r3, [pc, #144]	@ (80025c0 <calculateMouseX+0x98>)
 8002530:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002534:	4618      	mov	r0, r3
 8002536:	f7fe fbdb 	bl	8000cf0 <__aeabi_i2f>
 800253a:	4603      	mov	r3, r0
 800253c:	4618      	mov	r0, r3
 800253e:	f7fd ff7d 	bl	800043c <__aeabi_f2d>
 8002542:	a31d      	add	r3, pc, #116	@ (adr r3, 80025b8 <calculateMouseX+0x90>)
 8002544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002548:	f7fe f8fa 	bl	8000740 <__aeabi_ddiv>
 800254c:	4602      	mov	r2, r0
 800254e:	460b      	mov	r3, r1
 8002550:	4610      	mov	r0, r2
 8002552:	4619      	mov	r1, r3
 8002554:	f7fe fac2 	bl	8000adc <__aeabi_d2f>
 8002558:	4603      	mov	r3, r0
 800255a:	617b      	str	r3, [r7, #20]

  // Calculate yaw (rad)
  float yaw = gz * TIME_INTERVAL;
 800255c:	4919      	ldr	r1, [pc, #100]	@ (80025c4 <calculateMouseX+0x9c>)
 800255e:	6978      	ldr	r0, [r7, #20]
 8002560:	f7fe fc1a 	bl	8000d98 <__aeabi_fmul>
 8002564:	4603      	mov	r3, r0
 8002566:	613b      	str	r3, [r7, #16]

  // Apply complementary filter
  float c_filtered_yaw = ComplementaryFilter_Update(&cf_z, yaw, gz, TIME_INTERVAL);
 8002568:	4b16      	ldr	r3, [pc, #88]	@ (80025c4 <calculateMouseX+0x9c>)
 800256a:	697a      	ldr	r2, [r7, #20]
 800256c:	6939      	ldr	r1, [r7, #16]
 800256e:	4816      	ldr	r0, [pc, #88]	@ (80025c8 <calculateMouseX+0xa0>)
 8002570:	f7ff ff71 	bl	8002456 <ComplementaryFilter_Update>
 8002574:	60f8      	str	r0, [r7, #12]

  // Apply kalman filter
  float k_filtered_yaw = KalmanFilter_Update(&kf_z, c_filtered_yaw);
 8002576:	68f9      	ldr	r1, [r7, #12]
 8002578:	4814      	ldr	r0, [pc, #80]	@ (80025cc <calculateMouseX+0xa4>)
 800257a:	f000 fa60 	bl	8002a3e <KalmanFilter_Update>
 800257e:	60b8      	str	r0, [r7, #8]

  // Apply SENSITIVITY
  int mouse_x = (int)(k_filtered_yaw * SCALE_X * (-1));
 8002580:	68b8      	ldr	r0, [r7, #8]
 8002582:	f7fd ff5b 	bl	800043c <__aeabi_f2d>
 8002586:	f04f 0200 	mov.w	r2, #0
 800258a:	4b11      	ldr	r3, [pc, #68]	@ (80025d0 <calculateMouseX+0xa8>)
 800258c:	f7fd ffae 	bl	80004ec <__aeabi_dmul>
 8002590:	4602      	mov	r2, r0
 8002592:	460b      	mov	r3, r1
 8002594:	4614      	mov	r4, r2
 8002596:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800259a:	4620      	mov	r0, r4
 800259c:	4629      	mov	r1, r5
 800259e:	f7fe fa55 	bl	8000a4c <__aeabi_d2iz>
 80025a2:	4603      	mov	r3, r0
 80025a4:	607b      	str	r3, [r7, #4]

  return mouse_x;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	b25b      	sxtb	r3, r3
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3718      	adds	r7, #24
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bdb0      	pop	{r4, r5, r7, pc}
 80025b2:	bf00      	nop
 80025b4:	f3af 8000 	nop.w
 80025b8:	66666666 	.word	0x66666666
 80025bc:	40406666 	.word	0x40406666
 80025c0:	20000766 	.word	0x20000766
 80025c4:	3dcccccd 	.word	0x3dcccccd
 80025c8:	20000794 	.word	0x20000794
 80025cc:	2000076c 	.word	0x2000076c
 80025d0:	40240000 	.word	0x40240000
 80025d4:	00000000 	.word	0x00000000

080025d8 <calculateMouseY>:

// Y-axis movement can be obtained with roll.
int8_t calculateMouseY()
{
 80025d8:	b590      	push	{r4, r7, lr}
 80025da:	b089      	sub	sp, #36	@ 0x24
 80025dc:	af00      	add	r7, sp, #0
  // Read MPU6050 Datasheet.
  float ax = (float)raw_ax / 4096;
 80025de:	4b40      	ldr	r3, [pc, #256]	@ (80026e0 <calculateMouseY+0x108>)
 80025e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7fe fb83 	bl	8000cf0 <__aeabi_i2f>
 80025ea:	4603      	mov	r3, r0
 80025ec:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7fe fc85 	bl	8000f00 <__aeabi_fdiv>
 80025f6:	4603      	mov	r3, r0
 80025f8:	61fb      	str	r3, [r7, #28]
  float ay = (float)raw_ay / 4096;
 80025fa:	4b3a      	ldr	r3, [pc, #232]	@ (80026e4 <calculateMouseY+0x10c>)
 80025fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002600:	4618      	mov	r0, r3
 8002602:	f7fe fb75 	bl	8000cf0 <__aeabi_i2f>
 8002606:	4603      	mov	r3, r0
 8002608:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 800260c:	4618      	mov	r0, r3
 800260e:	f7fe fc77 	bl	8000f00 <__aeabi_fdiv>
 8002612:	4603      	mov	r3, r0
 8002614:	61bb      	str	r3, [r7, #24]
  float az = (float)raw_az / 4096;
 8002616:	4b34      	ldr	r3, [pc, #208]	@ (80026e8 <calculateMouseY+0x110>)
 8002618:	f9b3 3000 	ldrsh.w	r3, [r3]
 800261c:	4618      	mov	r0, r3
 800261e:	f7fe fb67 	bl	8000cf0 <__aeabi_i2f>
 8002622:	4603      	mov	r3, r0
 8002624:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 8002628:	4618      	mov	r0, r3
 800262a:	f7fe fc69 	bl	8000f00 <__aeabi_fdiv>
 800262e:	4603      	mov	r3, r0
 8002630:	617b      	str	r3, [r7, #20]
  float gy = (float)raw_gy / 32.8;
 8002632:	4b2e      	ldr	r3, [pc, #184]	@ (80026ec <calculateMouseY+0x114>)
 8002634:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002638:	4618      	mov	r0, r3
 800263a:	f7fe fb59 	bl	8000cf0 <__aeabi_i2f>
 800263e:	4603      	mov	r3, r0
 8002640:	4618      	mov	r0, r3
 8002642:	f7fd fefb 	bl	800043c <__aeabi_f2d>
 8002646:	a324      	add	r3, pc, #144	@ (adr r3, 80026d8 <calculateMouseY+0x100>)
 8002648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800264c:	f7fe f878 	bl	8000740 <__aeabi_ddiv>
 8002650:	4602      	mov	r2, r0
 8002652:	460b      	mov	r3, r1
 8002654:	4610      	mov	r0, r2
 8002656:	4619      	mov	r1, r3
 8002658:	f7fe fa40 	bl	8000adc <__aeabi_d2f>
 800265c:	4603      	mov	r3, r0
 800265e:	613b      	str	r3, [r7, #16]

  // Calculate roll (rad)
  float roll = atan2f(ax, sqrtf(ay * ay + az * az));
 8002660:	69b9      	ldr	r1, [r7, #24]
 8002662:	69b8      	ldr	r0, [r7, #24]
 8002664:	f7fe fb98 	bl	8000d98 <__aeabi_fmul>
 8002668:	4603      	mov	r3, r0
 800266a:	461c      	mov	r4, r3
 800266c:	6979      	ldr	r1, [r7, #20]
 800266e:	6978      	ldr	r0, [r7, #20]
 8002670:	f7fe fb92 	bl	8000d98 <__aeabi_fmul>
 8002674:	4603      	mov	r3, r0
 8002676:	4619      	mov	r1, r3
 8002678:	4620      	mov	r0, r4
 800267a:	f7fe fa85 	bl	8000b88 <__addsf3>
 800267e:	4603      	mov	r3, r0
 8002680:	4618      	mov	r0, r3
 8002682:	f009 fb91 	bl	800bda8 <sqrtf>
 8002686:	4603      	mov	r3, r0
 8002688:	4619      	mov	r1, r3
 800268a:	69f8      	ldr	r0, [r7, #28]
 800268c:	f009 fb8a 	bl	800bda4 <atan2f>
 8002690:	60f8      	str	r0, [r7, #12]

  // Apply complementary filter
  float c_filtered_roll = ComplementaryFilter_Update(&cf_y, roll, gy, (float)TIME_INTERVAL);
 8002692:	4b17      	ldr	r3, [pc, #92]	@ (80026f0 <calculateMouseY+0x118>)
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	68f9      	ldr	r1, [r7, #12]
 8002698:	4816      	ldr	r0, [pc, #88]	@ (80026f4 <calculateMouseY+0x11c>)
 800269a:	f7ff fedc 	bl	8002456 <ComplementaryFilter_Update>
 800269e:	60b8      	str	r0, [r7, #8]

  // Apply kalman filter
  float k_filtered_roll = KalmanFilter_Update(&kf_y, c_filtered_roll);
 80026a0:	68b9      	ldr	r1, [r7, #8]
 80026a2:	4815      	ldr	r0, [pc, #84]	@ (80026f8 <calculateMouseY+0x120>)
 80026a4:	f000 f9cb 	bl	8002a3e <KalmanFilter_Update>
 80026a8:	6078      	str	r0, [r7, #4]

  // Apply SENSITIVITY
  int mouse_y = (int)(k_filtered_roll * SCALE_Y);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f7fd fec6 	bl	800043c <__aeabi_f2d>
 80026b0:	f04f 0200 	mov.w	r2, #0
 80026b4:	4b11      	ldr	r3, [pc, #68]	@ (80026fc <calculateMouseY+0x124>)
 80026b6:	f7fd ff19 	bl	80004ec <__aeabi_dmul>
 80026ba:	4602      	mov	r2, r0
 80026bc:	460b      	mov	r3, r1
 80026be:	4610      	mov	r0, r2
 80026c0:	4619      	mov	r1, r3
 80026c2:	f7fe f9c3 	bl	8000a4c <__aeabi_d2iz>
 80026c6:	4603      	mov	r3, r0
 80026c8:	603b      	str	r3, [r7, #0]

  return mouse_y;
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	b25b      	sxtb	r3, r3
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3724      	adds	r7, #36	@ 0x24
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd90      	pop	{r4, r7, pc}
 80026d6:	bf00      	nop
 80026d8:	66666666 	.word	0x66666666
 80026dc:	40406666 	.word	0x40406666
 80026e0:	2000075c 	.word	0x2000075c
 80026e4:	2000075e 	.word	0x2000075e
 80026e8:	20000760 	.word	0x20000760
 80026ec:	20000764 	.word	0x20000764
 80026f0:	3dcccccd 	.word	0x3dcccccd
 80026f4:	2000079c 	.word	0x2000079c
 80026f8:	20000780 	.word	0x20000780
 80026fc:	40240000 	.word	0x40240000

08002700 <calculateMouseWheel>:

int8_t calculateMouseWheel()
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
  int16_t curr_wheel = __HAL_TIM_GET_COUNTER(&htim3);
 8002706:	4b20      	ldr	r3, [pc, #128]	@ (8002788 <calculateMouseWheel+0x88>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800270c:	80fb      	strh	r3, [r7, #6]

  // wrap-around 처리 (128 -> 0 or 0 -> 128)
  if (curr_wheel == 0 && prev_wheel == 128)
 800270e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d109      	bne.n	800272a <calculateMouseWheel+0x2a>
 8002716:	4b1d      	ldr	r3, [pc, #116]	@ (800278c <calculateMouseWheel+0x8c>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2b80      	cmp	r3, #128	@ 0x80
 800271c:	d105      	bne.n	800272a <calculateMouseWheel+0x2a>
  {
    prev_wheel = curr_wheel;
 800271e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002722:	4a1a      	ldr	r2, [pc, #104]	@ (800278c <calculateMouseWheel+0x8c>)
 8002724:	6013      	str	r3, [r2, #0]
    return 1;  // 시계 방향 회전, 휠 위로 스크롤
 8002726:	2301      	movs	r3, #1
 8002728:	e028      	b.n	800277c <calculateMouseWheel+0x7c>
  }
  else if (curr_wheel == 128 && prev_wheel == 0)
 800272a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800272e:	2b80      	cmp	r3, #128	@ 0x80
 8002730:	d10a      	bne.n	8002748 <calculateMouseWheel+0x48>
 8002732:	4b16      	ldr	r3, [pc, #88]	@ (800278c <calculateMouseWheel+0x8c>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d106      	bne.n	8002748 <calculateMouseWheel+0x48>
  {
    prev_wheel = curr_wheel;
 800273a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800273e:	4a13      	ldr	r2, [pc, #76]	@ (800278c <calculateMouseWheel+0x8c>)
 8002740:	6013      	str	r3, [r2, #0]
    return -1;  // 반시계 방향 회전, 휠 아래로 스크롤
 8002742:	f04f 33ff 	mov.w	r3, #4294967295
 8002746:	e019      	b.n	800277c <calculateMouseWheel+0x7c>
  }

  // 일반적인 값 증가/감소 처리
  if (curr_wheel > prev_wheel)
 8002748:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800274c:	4b0f      	ldr	r3, [pc, #60]	@ (800278c <calculateMouseWheel+0x8c>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	429a      	cmp	r2, r3
 8002752:	dd05      	ble.n	8002760 <calculateMouseWheel+0x60>
  {
    prev_wheel = curr_wheel;
 8002754:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002758:	4a0c      	ldr	r2, [pc, #48]	@ (800278c <calculateMouseWheel+0x8c>)
 800275a:	6013      	str	r3, [r2, #0]
    return 1;  // 휠 위로 스크롤
 800275c:	2301      	movs	r3, #1
 800275e:	e00d      	b.n	800277c <calculateMouseWheel+0x7c>
  }
  else if (curr_wheel < prev_wheel)
 8002760:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002764:	4b09      	ldr	r3, [pc, #36]	@ (800278c <calculateMouseWheel+0x8c>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	429a      	cmp	r2, r3
 800276a:	da06      	bge.n	800277a <calculateMouseWheel+0x7a>
  {
    prev_wheel = curr_wheel;
 800276c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002770:	4a06      	ldr	r2, [pc, #24]	@ (800278c <calculateMouseWheel+0x8c>)
 8002772:	6013      	str	r3, [r2, #0]
    return -1;  // 휠 아래로 스크롤
 8002774:	f04f 33ff 	mov.w	r3, #4294967295
 8002778:	e000      	b.n	800277c <calculateMouseWheel+0x7c>
  }

  // 변화가 없을 때
  return 0;
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	bc80      	pop	{r7}
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	20000800 	.word	0x20000800
 800278c:	200007a4 	.word	0x200007a4

08002790 <readData>:

void readData()
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af04      	add	r7, sp, #16
  // Read MPU6050 data.
  MPU6050_GetData(&raw_ax, &raw_ay, &raw_az, &raw_gx, &raw_gy, &raw_gz, &raw_temp);
 8002796:	4b0b      	ldr	r3, [pc, #44]	@ (80027c4 <readData+0x34>)
 8002798:	9302      	str	r3, [sp, #8]
 800279a:	4b0b      	ldr	r3, [pc, #44]	@ (80027c8 <readData+0x38>)
 800279c:	9301      	str	r3, [sp, #4]
 800279e:	4b0b      	ldr	r3, [pc, #44]	@ (80027cc <readData+0x3c>)
 80027a0:	9300      	str	r3, [sp, #0]
 80027a2:	4b0b      	ldr	r3, [pc, #44]	@ (80027d0 <readData+0x40>)
 80027a4:	4a0b      	ldr	r2, [pc, #44]	@ (80027d4 <readData+0x44>)
 80027a6:	490c      	ldr	r1, [pc, #48]	@ (80027d8 <readData+0x48>)
 80027a8:	480c      	ldr	r0, [pc, #48]	@ (80027dc <readData+0x4c>)
 80027aa:	f000 fb5b 	bl	8002e64 <MPU6050_GetData>

  // Read button data
  buttonRead(LEFT_BTN_GPIO_Port, LEFT_BTN_Pin);
 80027ae:	2110      	movs	r1, #16
 80027b0:	480b      	ldr	r0, [pc, #44]	@ (80027e0 <readData+0x50>)
 80027b2:	f7fe fd67 	bl	8001284 <buttonRead>
  buttonRead(RIGHT_BTN_GPIO_Port, RIGHT_BTN_Pin);
 80027b6:	2108      	movs	r1, #8
 80027b8:	4809      	ldr	r0, [pc, #36]	@ (80027e0 <readData+0x50>)
 80027ba:	f7fe fd63 	bl	8001284 <buttonRead>
}
 80027be:	bf00      	nop
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	20000768 	.word	0x20000768
 80027c8:	20000766 	.word	0x20000766
 80027cc:	20000764 	.word	0x20000764
 80027d0:	20000762 	.word	0x20000762
 80027d4:	20000760 	.word	0x20000760
 80027d8:	2000075e 	.word	0x2000075e
 80027dc:	2000075c 	.word	0x2000075c
 80027e0:	40010c00 	.word	0x40010c00

080027e4 <dataProcessing>:

bool dataProcessing()
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
  // USB HID Data
  int8_t HID_report[4];

  // Initialize USB HID Data.
  HID_report[0] = 0x00; // Mouse Button State (0x01: Left Button Clicked, 0x02: Right Button Clicked)
 80027ea:	2300      	movs	r3, #0
 80027ec:	713b      	strb	r3, [r7, #4]
  HID_report[1] = 0x00; // Mouse X-axis Movement.
 80027ee:	2300      	movs	r3, #0
 80027f0:	717b      	strb	r3, [r7, #5]
  HID_report[2] = 0x00; // Mouse Y-axis Movement.
 80027f2:	2300      	movs	r3, #0
 80027f4:	71bb      	strb	r3, [r7, #6]
  HID_report[3] = 0x00; // Mouse Wheel Movement.
 80027f6:	2300      	movs	r3, #0
 80027f8:	71fb      	strb	r3, [r7, #7]

  // Calculate Mouse X, Y Movement.
  HID_report[1] = calculateMouseX();
 80027fa:	f7ff fe95 	bl	8002528 <calculateMouseX>
 80027fe:	4603      	mov	r3, r0
 8002800:	717b      	strb	r3, [r7, #5]
  HID_report[2] = calculateMouseY();
 8002802:	f7ff fee9 	bl	80025d8 <calculateMouseY>
 8002806:	4603      	mov	r3, r0
 8002808:	71bb      	strb	r3, [r7, #6]

  // Mouse Left Button Clicked.
  if(isButtonPressed(LEFT_BTN_GPIO_Port, LEFT_BTN_Pin))
 800280a:	2110      	movs	r1, #16
 800280c:	4811      	ldr	r0, [pc, #68]	@ (8002854 <dataProcessing+0x70>)
 800280e:	f7fe fd07 	bl	8001220 <isButtonPressed>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d002      	beq.n	800281e <dataProcessing+0x3a>
  {
    HID_report[0] = 0x01;
 8002818:	2301      	movs	r3, #1
 800281a:	713b      	strb	r3, [r7, #4]
 800281c:	e008      	b.n	8002830 <dataProcessing+0x4c>
  }
  // Mouse Right Button Clicked.
  else if(isButtonPressed(RIGHT_BTN_GPIO_Port, RIGHT_BTN_Pin))
 800281e:	2108      	movs	r1, #8
 8002820:	480c      	ldr	r0, [pc, #48]	@ (8002854 <dataProcessing+0x70>)
 8002822:	f7fe fcfd 	bl	8001220 <isButtonPressed>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <dataProcessing+0x4c>
  {
    HID_report[0] = 0x02;
 800282c:	2302      	movs	r3, #2
 800282e:	713b      	strb	r3, [r7, #4]
  }

  // Mouse Wheel
  HID_report[3] = calculateMouseWheel();
 8002830:	f7ff ff66 	bl	8002700 <calculateMouseWheel>
 8002834:	4603      	mov	r3, r0
 8002836:	71fb      	strb	r3, [r7, #7]

  // Data Transmit.
  HAL_UART_Transmit(&huart2, (uint8_t *)HID_report, sizeof(HID_report), 10);
 8002838:	1d39      	adds	r1, r7, #4
 800283a:	230a      	movs	r3, #10
 800283c:	2204      	movs	r2, #4
 800283e:	4806      	ldr	r0, [pc, #24]	@ (8002858 <dataProcessing+0x74>)
 8002840:	f003 fe68 	bl	8006514 <HAL_UART_Transmit>

  // Print HID_report data on cli terminal.
  //cliPrintf("%d %d %d %d (encoder : %d)\n", HID_report[0], HID_report[1], HID_report[2], HID_report[3], prev_wheel);

  // Data Processing delay.
  HAL_Delay((uint32_t)(TIME_INTERVAL * 10));
 8002844:	2001      	movs	r0, #1
 8002846:	f001 f8df 	bl	8003a08 <HAL_Delay>

  return 1;
 800284a:	2301      	movs	r3, #1
}
 800284c:	4618      	mov	r0, r3
 800284e:	3708      	adds	r7, #8
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40010c00 	.word	0x40010c00
 8002858:	20000890 	.word	0x20000890

0800285c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002862:	4b10      	ldr	r3, [pc, #64]	@ (80028a4 <MX_DMA_Init+0x48>)
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	4a0f      	ldr	r2, [pc, #60]	@ (80028a4 <MX_DMA_Init+0x48>)
 8002868:	f043 0301 	orr.w	r3, r3, #1
 800286c:	6153      	str	r3, [r2, #20]
 800286e:	4b0d      	ldr	r3, [pc, #52]	@ (80028a4 <MX_DMA_Init+0x48>)
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	607b      	str	r3, [r7, #4]
 8002878:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800287a:	2200      	movs	r2, #0
 800287c:	2100      	movs	r1, #0
 800287e:	200f      	movs	r0, #15
 8002880:	f001 f9bd 	bl	8003bfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002884:	200f      	movs	r0, #15
 8002886:	f001 f9d6 	bl	8003c36 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800288a:	2200      	movs	r2, #0
 800288c:	2100      	movs	r1, #0
 800288e:	2010      	movs	r0, #16
 8002890:	f001 f9b5 	bl	8003bfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8002894:	2010      	movs	r0, #16
 8002896:	f001 f9ce 	bl	8003c36 <HAL_NVIC_EnableIRQ>

}
 800289a:	bf00      	nop
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	40021000 	.word	0x40021000

080028a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b088      	sub	sp, #32
 80028ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028ae:	f107 0310 	add.w	r3, r7, #16
 80028b2:	2200      	movs	r2, #0
 80028b4:	601a      	str	r2, [r3, #0]
 80028b6:	605a      	str	r2, [r3, #4]
 80028b8:	609a      	str	r2, [r3, #8]
 80028ba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028bc:	4b19      	ldr	r3, [pc, #100]	@ (8002924 <MX_GPIO_Init+0x7c>)
 80028be:	699b      	ldr	r3, [r3, #24]
 80028c0:	4a18      	ldr	r2, [pc, #96]	@ (8002924 <MX_GPIO_Init+0x7c>)
 80028c2:	f043 0320 	orr.w	r3, r3, #32
 80028c6:	6193      	str	r3, [r2, #24]
 80028c8:	4b16      	ldr	r3, [pc, #88]	@ (8002924 <MX_GPIO_Init+0x7c>)
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	f003 0320 	and.w	r3, r3, #32
 80028d0:	60fb      	str	r3, [r7, #12]
 80028d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028d4:	4b13      	ldr	r3, [pc, #76]	@ (8002924 <MX_GPIO_Init+0x7c>)
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	4a12      	ldr	r2, [pc, #72]	@ (8002924 <MX_GPIO_Init+0x7c>)
 80028da:	f043 0304 	orr.w	r3, r3, #4
 80028de:	6193      	str	r3, [r2, #24]
 80028e0:	4b10      	ldr	r3, [pc, #64]	@ (8002924 <MX_GPIO_Init+0x7c>)
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	f003 0304 	and.w	r3, r3, #4
 80028e8:	60bb      	str	r3, [r7, #8]
 80028ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ec:	4b0d      	ldr	r3, [pc, #52]	@ (8002924 <MX_GPIO_Init+0x7c>)
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	4a0c      	ldr	r2, [pc, #48]	@ (8002924 <MX_GPIO_Init+0x7c>)
 80028f2:	f043 0308 	orr.w	r3, r3, #8
 80028f6:	6193      	str	r3, [r2, #24]
 80028f8:	4b0a      	ldr	r3, [pc, #40]	@ (8002924 <MX_GPIO_Init+0x7c>)
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	f003 0308 	and.w	r3, r3, #8
 8002900:	607b      	str	r3, [r7, #4]
 8002902:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = RIGHT_BTN_Pin|LEFT_BTN_Pin;
 8002904:	2318      	movs	r3, #24
 8002906:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002908:	2300      	movs	r3, #0
 800290a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800290c:	2302      	movs	r3, #2
 800290e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002910:	f107 0310 	add.w	r3, r7, #16
 8002914:	4619      	mov	r1, r3
 8002916:	4804      	ldr	r0, [pc, #16]	@ (8002928 <MX_GPIO_Init+0x80>)
 8002918:	f001 fc4a 	bl	80041b0 <HAL_GPIO_Init>

}
 800291c:	bf00      	nop
 800291e:	3720      	adds	r7, #32
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40021000 	.word	0x40021000
 8002928:	40010c00 	.word	0x40010c00

0800292c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002930:	4b12      	ldr	r3, [pc, #72]	@ (800297c <MX_I2C1_Init+0x50>)
 8002932:	4a13      	ldr	r2, [pc, #76]	@ (8002980 <MX_I2C1_Init+0x54>)
 8002934:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002936:	4b11      	ldr	r3, [pc, #68]	@ (800297c <MX_I2C1_Init+0x50>)
 8002938:	4a12      	ldr	r2, [pc, #72]	@ (8002984 <MX_I2C1_Init+0x58>)
 800293a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800293c:	4b0f      	ldr	r3, [pc, #60]	@ (800297c <MX_I2C1_Init+0x50>)
 800293e:	2200      	movs	r2, #0
 8002940:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002942:	4b0e      	ldr	r3, [pc, #56]	@ (800297c <MX_I2C1_Init+0x50>)
 8002944:	2200      	movs	r2, #0
 8002946:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002948:	4b0c      	ldr	r3, [pc, #48]	@ (800297c <MX_I2C1_Init+0x50>)
 800294a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800294e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002950:	4b0a      	ldr	r3, [pc, #40]	@ (800297c <MX_I2C1_Init+0x50>)
 8002952:	2200      	movs	r2, #0
 8002954:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002956:	4b09      	ldr	r3, [pc, #36]	@ (800297c <MX_I2C1_Init+0x50>)
 8002958:	2200      	movs	r2, #0
 800295a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800295c:	4b07      	ldr	r3, [pc, #28]	@ (800297c <MX_I2C1_Init+0x50>)
 800295e:	2200      	movs	r2, #0
 8002960:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002962:	4b06      	ldr	r3, [pc, #24]	@ (800297c <MX_I2C1_Init+0x50>)
 8002964:	2200      	movs	r2, #0
 8002966:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002968:	4804      	ldr	r0, [pc, #16]	@ (800297c <MX_I2C1_Init+0x50>)
 800296a:	f001 fdbd 	bl	80044e8 <HAL_I2C_Init>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d001      	beq.n	8002978 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002974:	f000 f92b 	bl	8002bce <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002978:	bf00      	nop
 800297a:	bd80      	pop	{r7, pc}
 800297c:	200007a8 	.word	0x200007a8
 8002980:	40005400 	.word	0x40005400
 8002984:	000186a0 	.word	0x000186a0

08002988 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b088      	sub	sp, #32
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002990:	f107 0310 	add.w	r3, r7, #16
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]
 8002998:	605a      	str	r2, [r3, #4]
 800299a:	609a      	str	r2, [r3, #8]
 800299c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a15      	ldr	r2, [pc, #84]	@ (80029f8 <HAL_I2C_MspInit+0x70>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d123      	bne.n	80029f0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029a8:	4b14      	ldr	r3, [pc, #80]	@ (80029fc <HAL_I2C_MspInit+0x74>)
 80029aa:	699b      	ldr	r3, [r3, #24]
 80029ac:	4a13      	ldr	r2, [pc, #76]	@ (80029fc <HAL_I2C_MspInit+0x74>)
 80029ae:	f043 0308 	orr.w	r3, r3, #8
 80029b2:	6193      	str	r3, [r2, #24]
 80029b4:	4b11      	ldr	r3, [pc, #68]	@ (80029fc <HAL_I2C_MspInit+0x74>)
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	f003 0308 	and.w	r3, r3, #8
 80029bc:	60fb      	str	r3, [r7, #12]
 80029be:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80029c0:	23c0      	movs	r3, #192	@ 0xc0
 80029c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029c4:	2312      	movs	r3, #18
 80029c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029c8:	2303      	movs	r3, #3
 80029ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029cc:	f107 0310 	add.w	r3, r7, #16
 80029d0:	4619      	mov	r1, r3
 80029d2:	480b      	ldr	r0, [pc, #44]	@ (8002a00 <HAL_I2C_MspInit+0x78>)
 80029d4:	f001 fbec 	bl	80041b0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80029d8:	4b08      	ldr	r3, [pc, #32]	@ (80029fc <HAL_I2C_MspInit+0x74>)
 80029da:	69db      	ldr	r3, [r3, #28]
 80029dc:	4a07      	ldr	r2, [pc, #28]	@ (80029fc <HAL_I2C_MspInit+0x74>)
 80029de:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80029e2:	61d3      	str	r3, [r2, #28]
 80029e4:	4b05      	ldr	r3, [pc, #20]	@ (80029fc <HAL_I2C_MspInit+0x74>)
 80029e6:	69db      	ldr	r3, [r3, #28]
 80029e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029ec:	60bb      	str	r3, [r7, #8]
 80029ee:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80029f0:	bf00      	nop
 80029f2:	3720      	adds	r7, #32
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	40005400 	.word	0x40005400
 80029fc:	40021000 	.word	0x40021000
 8002a00:	40010c00 	.word	0x40010c00

08002a04 <KalmanFilter_Init>:

void KalmanFilter_Init(KalmanFilter *kf,
                       float process_noise,
                       float measurement_noise,
                       float initial_value)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]
 8002a10:	603b      	str	r3, [r7, #0]
    kf->q = process_noise;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	68ba      	ldr	r2, [r7, #8]
 8002a16:	601a      	str	r2, [r3, #0]
    kf->r = measurement_noise;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	605a      	str	r2, [r3, #4]
    kf->x = initial_value;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	683a      	ldr	r2, [r7, #0]
 8002a22:	609a      	str	r2, [r3, #8]
    kf->p = 1.0f;  // 초기 공분산 값을 1로 설정
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002a2a:	60da      	str	r2, [r3, #12]
    kf->k = 0.0f;  // 초기 칼만 이득 값
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f04f 0200 	mov.w	r2, #0
 8002a32:	611a      	str	r2, [r3, #16]
}
 8002a34:	bf00      	nop
 8002a36:	3714      	adds	r7, #20
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bc80      	pop	{r7}
 8002a3c:	4770      	bx	lr

08002a3e <KalmanFilter_Update>:

float KalmanFilter_Update(KalmanFilter *kf, float measurement)
{
 8002a3e:	b5b0      	push	{r4, r5, r7, lr}
 8002a40:	b082      	sub	sp, #8
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
 8002a46:	6039      	str	r1, [r7, #0]
    // 1. 예측 단계
    kf->p += kf->q;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	68da      	ldr	r2, [r3, #12]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4619      	mov	r1, r3
 8002a52:	4610      	mov	r0, r2
 8002a54:	f7fe f898 	bl	8000b88 <__addsf3>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	60da      	str	r2, [r3, #12]

    // 2. 칼만 이득 계산
    kf->k = kf->p / (kf->p + kf->r);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	68dc      	ldr	r4, [r3, #12]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	68da      	ldr	r2, [r3, #12]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	4610      	mov	r0, r2
 8002a70:	f7fe f88a 	bl	8000b88 <__addsf3>
 8002a74:	4603      	mov	r3, r0
 8002a76:	4619      	mov	r1, r3
 8002a78:	4620      	mov	r0, r4
 8002a7a:	f7fe fa41 	bl	8000f00 <__aeabi_fdiv>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	461a      	mov	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	611a      	str	r2, [r3, #16]

    // 3. 값 업데이트
    kf->x += kf->k * (measurement - kf->x);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	689c      	ldr	r4, [r3, #8]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	691d      	ldr	r5, [r3, #16]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	4619      	mov	r1, r3
 8002a94:	6838      	ldr	r0, [r7, #0]
 8002a96:	f7fe f875 	bl	8000b84 <__aeabi_fsub>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	4628      	mov	r0, r5
 8002aa0:	f7fe f97a 	bl	8000d98 <__aeabi_fmul>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	4620      	mov	r0, r4
 8002aaa:	f7fe f86d 	bl	8000b88 <__addsf3>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	609a      	str	r2, [r3, #8]

    // 4. 공분산 갱신
    kf->p *= (1.0f - kf->k);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	68dc      	ldr	r4, [r3, #12]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	4619      	mov	r1, r3
 8002ac0:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8002ac4:	f7fe f85e 	bl	8000b84 <__aeabi_fsub>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	4619      	mov	r1, r3
 8002acc:	4620      	mov	r0, r4
 8002ace:	f7fe f963 	bl	8000d98 <__aeabi_fmul>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	60da      	str	r2, [r3, #12]

    return kf->x;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	689b      	ldr	r3, [r3, #8]
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002ae8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002aec:	f000 ff2a 	bl	8003944 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002af0:	f000 f828 	bl	8002b44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002af4:	f7ff fed8 	bl	80028a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002af8:	f7ff feb0 	bl	800285c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002afc:	f000 fdc0 	bl	8003680 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8002b00:	f7ff ff14 	bl	800292c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8002b04:	f000 fde6 	bl	80036d4 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8002b08:	f000 fd20 	bl	800354c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  cliInit();
 8002b0c:	f7fe fc4c 	bl	80013a8 <cliInit>
  MPU6050_Init(0x06);
 8002b10:	2006      	movs	r0, #6
 8002b12:	f000 fa69 	bl	8002fe8 <MPU6050_Init>
  dataProcessingInit();
 8002b16:	f7ff fcd4 	bl	80024c2 <dataProcessingInit>
  buttonInit();
 8002b1a:	f7fe fb75 	bl	8001208 <buttonInit>
  //bluetoothInit();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  cliOpen(CH_USART1, 11520);
 8002b1e:	f44f 5134 	mov.w	r1, #11520	@ 0x2d00
 8002b22:	2001      	movs	r0, #1
 8002b24:	f7fe fc8c 	bl	8001440 <cliOpen>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8002b28:	213c      	movs	r1, #60	@ 0x3c
 8002b2a:	4805      	ldr	r0, [pc, #20]	@ (8002b40 <main+0x58>)
 8002b2c:	f003 f9f4 	bl	8005f18 <HAL_TIM_Encoder_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    readData();
 8002b30:	f7ff fe2e 	bl	8002790 <readData>

    dataProcessing();
 8002b34:	f7ff fe56 	bl	80027e4 <dataProcessing>

    cliMain();
 8002b38:	f7fe fd66 	bl	8001608 <cliMain>
    readData();
 8002b3c:	bf00      	nop
 8002b3e:	e7f7      	b.n	8002b30 <main+0x48>
 8002b40:	20000800 	.word	0x20000800

08002b44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b090      	sub	sp, #64	@ 0x40
 8002b48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b4a:	f107 0318 	add.w	r3, r7, #24
 8002b4e:	2228      	movs	r2, #40	@ 0x28
 8002b50:	2100      	movs	r1, #0
 8002b52:	4618      	mov	r0, r3
 8002b54:	f006 fb2c 	bl	80091b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b58:	1d3b      	adds	r3, r7, #4
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	601a      	str	r2, [r3, #0]
 8002b5e:	605a      	str	r2, [r3, #4]
 8002b60:	609a      	str	r2, [r3, #8]
 8002b62:	60da      	str	r2, [r3, #12]
 8002b64:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002b66:	2301      	movs	r3, #1
 8002b68:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002b6a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002b6e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002b70:	2300      	movs	r3, #0
 8002b72:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b74:	2301      	movs	r3, #1
 8002b76:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b78:	2302      	movs	r3, #2
 8002b7a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b7c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002b80:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002b82:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8002b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b88:	f107 0318 	add.w	r3, r7, #24
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f002 fd11 	bl	80055b4 <HAL_RCC_OscConfig>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d001      	beq.n	8002b9c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002b98:	f000 f819 	bl	8002bce <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b9c:	230f      	movs	r3, #15
 8002b9e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002ba8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002bac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002bb2:	1d3b      	adds	r3, r7, #4
 8002bb4:	2102      	movs	r1, #2
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f002 ff7e 	bl	8005ab8 <HAL_RCC_ClockConfig>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002bc2:	f000 f804 	bl	8002bce <Error_Handler>
  }
}
 8002bc6:	bf00      	nop
 8002bc8:	3740      	adds	r7, #64	@ 0x40
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bce:	b480      	push	{r7}
 8002bd0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bd2:	b672      	cpsid	i
}
 8002bd4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002bd6:	bf00      	nop
 8002bd8:	e7fd      	b.n	8002bd6 <Error_Handler+0x8>
	...

08002bdc <MPU6050_ReadOneByte>:
//������ ���� 1����Ʈ �б� 
// �Ķ����1 : ���� ��巹��, �Ķ���� 2 : ������ �������� ��巹��
// ���ϰ� : �������䰪

uint8_t MPU6050_ReadOneByte(uint8_t RegAddr)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b088      	sub	sp, #32
 8002be0:	af04      	add	r7, sp, #16
 8002be2:	4603      	mov	r3, r0
 8002be4:	71fb      	strb	r3, [r7, #7]
	uint8_t Data = 0;
 8002be6:	2300      	movs	r3, #0
 8002be8:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(&MPU6050_I2C_PORT,MPU6050_DEVICE_ADDR,RegAddr,1,&Data,1,1000);
 8002bea:	79fb      	ldrb	r3, [r7, #7]
 8002bec:	b29a      	uxth	r2, r3
 8002bee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002bf2:	9302      	str	r3, [sp, #8]
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	9301      	str	r3, [sp, #4]
 8002bf8:	f107 030f 	add.w	r3, r7, #15
 8002bfc:	9300      	str	r3, [sp, #0]
 8002bfe:	2301      	movs	r3, #1
 8002c00:	21d0      	movs	r1, #208	@ 0xd0
 8002c02:	4804      	ldr	r0, [pc, #16]	@ (8002c14 <MPU6050_ReadOneByte+0x38>)
 8002c04:	f001 feae 	bl	8004964 <HAL_I2C_Mem_Read>
	return Data;
 8002c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3710      	adds	r7, #16
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	200007a8 	.word	0x200007a8

08002c18 <MPU6050_WriteOneByte>:

//������  1����Ʈ ���� 
// �Ķ����1 : ���� ��巹��, �Ķ���� 2 : ������ �������� ��巹��
// ���ϰ� : �������䰪
void MPU6050_WriteOneByte(uint8_t RegAddr, uint8_t Data)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af04      	add	r7, sp, #16
 8002c1e:	4603      	mov	r3, r0
 8002c20:	460a      	mov	r2, r1
 8002c22:	71fb      	strb	r3, [r7, #7]
 8002c24:	4613      	mov	r3, r2
 8002c26:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&MPU6050_I2C_PORT,MPU6050_DEVICE_ADDR,RegAddr,I2C_MEMADD_SIZE_8BIT,&Data,1,1000);
 8002c28:	79fb      	ldrb	r3, [r7, #7]
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c30:	9302      	str	r3, [sp, #8]
 8002c32:	2301      	movs	r3, #1
 8002c34:	9301      	str	r3, [sp, #4]
 8002c36:	1dbb      	adds	r3, r7, #6
 8002c38:	9300      	str	r3, [sp, #0]
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	21d0      	movs	r1, #208	@ 0xd0
 8002c3e:	4803      	ldr	r0, [pc, #12]	@ (8002c4c <MPU6050_WriteOneByte+0x34>)
 8002c40:	f001 fd96 	bl	8004770 <HAL_I2C_Mem_Write>
}
 8002c44:	bf00      	nop
 8002c46:	3708      	adds	r7, #8
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	200007a8 	.word	0x200007a8

08002c50 <MPU6050_WriteBits>:

bool MPU6050_WriteBits(uint8_t RegAddr, uint8_t BitStart, uint8_t Length, uint8_t Data)
{
 8002c50:	b590      	push	{r4, r7, lr}
 8002c52:	b085      	sub	sp, #20
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	4604      	mov	r4, r0
 8002c58:	4608      	mov	r0, r1
 8002c5a:	4611      	mov	r1, r2
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	4623      	mov	r3, r4
 8002c60:	71fb      	strb	r3, [r7, #7]
 8002c62:	4603      	mov	r3, r0
 8002c64:	71bb      	strb	r3, [r7, #6]
 8002c66:	460b      	mov	r3, r1
 8002c68:	717b      	strb	r3, [r7, #5]
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	713b      	strb	r3, [r7, #4]

   uint8_t Dat, Mask;
    
		Dat = MPU6050_ReadOneByte(RegAddr);
 8002c6e:	79fb      	ldrb	r3, [r7, #7]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7ff ffb3 	bl	8002bdc <MPU6050_ReadOneByte>
 8002c76:	4603      	mov	r3, r0
 8002c78:	73fb      	strb	r3, [r7, #15]
    Mask = (0xFF << (BitStart + 1)) | 0xFF >> ((8 - BitStart) + Length - 1);
 8002c7a:	79bb      	ldrb	r3, [r7, #6]
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	22ff      	movs	r2, #255	@ 0xff
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	b25a      	sxtb	r2, r3
 8002c86:	79bb      	ldrb	r3, [r7, #6]
 8002c88:	f1c3 0108 	rsb	r1, r3, #8
 8002c8c:	797b      	ldrb	r3, [r7, #5]
 8002c8e:	440b      	add	r3, r1
 8002c90:	3b01      	subs	r3, #1
 8002c92:	21ff      	movs	r1, #255	@ 0xff
 8002c94:	fa41 f303 	asr.w	r3, r1, r3
 8002c98:	b25b      	sxtb	r3, r3
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	b25b      	sxtb	r3, r3
 8002c9e:	73bb      	strb	r3, [r7, #14]
    Data <<= (8 - Length);
 8002ca0:	793a      	ldrb	r2, [r7, #4]
 8002ca2:	797b      	ldrb	r3, [r7, #5]
 8002ca4:	f1c3 0308 	rsb	r3, r3, #8
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	713b      	strb	r3, [r7, #4]
    Data >>= (7 - BitStart);
 8002cae:	793a      	ldrb	r2, [r7, #4]
 8002cb0:	79bb      	ldrb	r3, [r7, #6]
 8002cb2:	f1c3 0307 	rsb	r3, r3, #7
 8002cb6:	fa42 f303 	asr.w	r3, r2, r3
 8002cba:	713b      	strb	r3, [r7, #4]
    Dat &= Mask;
 8002cbc:	7bfa      	ldrb	r2, [r7, #15]
 8002cbe:	7bbb      	ldrb	r3, [r7, #14]
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	73fb      	strb	r3, [r7, #15]
    Dat |= Data;
 8002cc4:	7bfa      	ldrb	r2, [r7, #15]
 8002cc6:	793b      	ldrb	r3, [r7, #4]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteOneByte(RegAddr, Dat);
 8002ccc:	7bfa      	ldrb	r2, [r7, #15]
 8002cce:	79fb      	ldrb	r3, [r7, #7]
 8002cd0:	4611      	mov	r1, r2
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7ff ffa0 	bl	8002c18 <MPU6050_WriteOneByte>
    
    return true;
 8002cd8:	2301      	movs	r3, #1
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3714      	adds	r7, #20
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd90      	pop	{r4, r7, pc}

08002ce2 <MPU6050_WriteOneBit>:

bool MPU6050_WriteOneBit(uint8_t RegAddr, uint8_t BitNum, uint8_t Data)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b084      	sub	sp, #16
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	4603      	mov	r3, r0
 8002cea:	71fb      	strb	r3, [r7, #7]
 8002cec:	460b      	mov	r3, r1
 8002cee:	71bb      	strb	r3, [r7, #6]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	717b      	strb	r3, [r7, #5]
    uint8_t Dat;
    
    Dat = MPU6050_ReadOneByte(RegAddr);
 8002cf4:	79fb      	ldrb	r3, [r7, #7]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7ff ff70 	bl	8002bdc <MPU6050_ReadOneByte>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	73fb      	strb	r3, [r7, #15]
    Dat = (Data != 0) ? (Dat | (1 << BitNum)) : (Dat & ~(1 << BitNum));
 8002d00:	797b      	ldrb	r3, [r7, #5]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00a      	beq.n	8002d1c <MPU6050_WriteOneBit+0x3a>
 8002d06:	79bb      	ldrb	r3, [r7, #6]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0e:	b25a      	sxtb	r2, r3
 8002d10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	b25b      	sxtb	r3, r3
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	e00b      	b.n	8002d34 <MPU6050_WriteOneBit+0x52>
 8002d1c:	79bb      	ldrb	r3, [r7, #6]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	b25b      	sxtb	r3, r3
 8002d26:	43db      	mvns	r3, r3
 8002d28:	b25a      	sxtb	r2, r3
 8002d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d2e:	4013      	ands	r3, r2
 8002d30:	b25b      	sxtb	r3, r3
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteOneByte(RegAddr, Dat);
 8002d36:	7bfa      	ldrb	r2, [r7, #15]
 8002d38:	79fb      	ldrb	r3, [r7, #7]
 8002d3a:	4611      	mov	r1, r2
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7ff ff6b 	bl	8002c18 <MPU6050_WriteOneByte>
    
    return true;
 8002d42:	2301      	movs	r3, #1
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3710      	adds	r7, #16
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <MPU6050_ReadBuff>:

//�����б� (����̽� ��巹��, �������� ��巹��, ������ ũ��, ���� ������)
bool MPU6050_ReadBuff(uint8_t RegAddr, uint8_t Num, uint8_t *pBuff)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b086      	sub	sp, #24
 8002d50:	af04      	add	r7, sp, #16
 8002d52:	4603      	mov	r3, r0
 8002d54:	603a      	str	r2, [r7, #0]
 8002d56:	71fb      	strb	r3, [r7, #7]
 8002d58:	460b      	mov	r3, r1
 8002d5a:	71bb      	strb	r3, [r7, #6]
	// �޸� �б�(����̽� ��巹��, 8��Ʈ ��巹�� �޸� ũ��, ���� ������, ���ۼ���, �õ�Ƚ��)
	return HAL_I2C_Mem_Read(&MPU6050_I2C_PORT,MPU6050_DEVICE_ADDR,RegAddr,I2C_MEMADD_SIZE_8BIT,pBuff,Num,1000);
 8002d5c:	79fb      	ldrb	r3, [r7, #7]
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	79bb      	ldrb	r3, [r7, #6]
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002d68:	9102      	str	r1, [sp, #8]
 8002d6a:	9301      	str	r3, [sp, #4]
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	9300      	str	r3, [sp, #0]
 8002d70:	2301      	movs	r3, #1
 8002d72:	21d0      	movs	r1, #208	@ 0xd0
 8002d74:	4806      	ldr	r0, [pc, #24]	@ (8002d90 <MPU6050_ReadBuff+0x44>)
 8002d76:	f001 fdf5 	bl	8004964 <HAL_I2C_Mem_Read>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	bf14      	ite	ne
 8002d80:	2301      	movne	r3, #1
 8002d82:	2300      	moveq	r3, #0
 8002d84:	b2db      	uxtb	r3, r3
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3708      	adds	r7, #8
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	200007a8 	.word	0x200007a8

08002d94 <MPU6050_SetClockSource>:
  	}
  	*pOutVal >>= 3;
}

void MPU6050_SetClockSource(uint8_t source)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	71fb      	strb	r3, [r7, #7]
    MPU6050_WriteBits(MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, source);
 8002d9e:	79fb      	ldrb	r3, [r7, #7]
 8002da0:	2203      	movs	r2, #3
 8002da2:	2102      	movs	r1, #2
 8002da4:	206b      	movs	r0, #107	@ 0x6b
 8002da6:	f7ff ff53 	bl	8002c50 <MPU6050_WriteBits>
}
 8002daa:	bf00      	nop
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <MPU6050_SetFullScaleGyroRange>:

void MPU6050_SetFullScaleGyroRange(uint8_t range)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b082      	sub	sp, #8
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	4603      	mov	r3, r0
 8002dba:	71fb      	strb	r3, [r7, #7]
    MPU6050_WriteBits(MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, range);
 8002dbc:	79fb      	ldrb	r3, [r7, #7]
 8002dbe:	2202      	movs	r2, #2
 8002dc0:	2104      	movs	r1, #4
 8002dc2:	201b      	movs	r0, #27
 8002dc4:	f7ff ff44 	bl	8002c50 <MPU6050_WriteBits>
}
 8002dc8:	bf00      	nop
 8002dca:	3708      	adds	r7, #8
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <MPU6050_SetLPF>:

void MPU6050_SetLPF(uint8_t	LowPassFilter)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	71fb      	strb	r3, [r7, #7]
   MPU6050_WriteOneByte(MPU6050_RA_CONFIG, LowPassFilter);
 8002dda:	79fb      	ldrb	r3, [r7, #7]
 8002ddc:	4619      	mov	r1, r3
 8002dde:	201a      	movs	r0, #26
 8002de0:	f7ff ff1a 	bl	8002c18 <MPU6050_WriteOneByte>
}
 8002de4:	bf00      	nop
 8002de6:	3708      	adds	r7, #8
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <MPU6050_SetFullScaleAccelRange>:

void MPU6050_SetFullScaleAccelRange(uint8_t range)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	4603      	mov	r3, r0
 8002df4:	71fb      	strb	r3, [r7, #7]
    MPU6050_WriteBits(MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, range);
 8002df6:	79fb      	ldrb	r3, [r7, #7]
 8002df8:	2202      	movs	r2, #2
 8002dfa:	2104      	movs	r1, #4
 8002dfc:	201c      	movs	r0, #28
 8002dfe:	f7ff ff27 	bl	8002c50 <MPU6050_WriteBits>
}
 8002e02:	bf00      	nop
 8002e04:	3708      	adds	r7, #8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <MPU6050_SetSleepEnabled>:

void MPU6050_SetSleepEnabled(uint8_t enabled) 
{
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	b082      	sub	sp, #8
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	4603      	mov	r3, r0
 8002e12:	71fb      	strb	r3, [r7, #7]
    MPU6050_WriteOneBit(MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, enabled);
 8002e14:	79fb      	ldrb	r3, [r7, #7]
 8002e16:	461a      	mov	r2, r3
 8002e18:	2106      	movs	r1, #6
 8002e1a:	206b      	movs	r0, #107	@ 0x6b
 8002e1c:	f7ff ff61 	bl	8002ce2 <MPU6050_WriteOneBit>
}
 8002e20:	bf00      	nop
 8002e22:	3708      	adds	r7, #8
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <MPU6050_SetI2CMasterModeEnabled>:

void MPU6050_SetI2CMasterModeEnabled(uint8_t enabled) 
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	4603      	mov	r3, r0
 8002e30:	71fb      	strb	r3, [r7, #7]
    MPU6050_WriteOneBit(MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_EN_BIT, enabled);
 8002e32:	79fb      	ldrb	r3, [r7, #7]
 8002e34:	461a      	mov	r2, r3
 8002e36:	2105      	movs	r1, #5
 8002e38:	206a      	movs	r0, #106	@ 0x6a
 8002e3a:	f7ff ff52 	bl	8002ce2 <MPU6050_WriteOneBit>
}
 8002e3e:	bf00      	nop
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <MPU6050_SetI2CBypassEnabled>:

void MPU6050_SetI2CBypassEnabled(uint8_t enabled) 
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b082      	sub	sp, #8
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	71fb      	strb	r3, [r7, #7]
    MPU6050_WriteOneBit(MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_I2C_BYPASS_EN_BIT, enabled);
 8002e50:	79fb      	ldrb	r3, [r7, #7]
 8002e52:	461a      	mov	r2, r3
 8002e54:	2101      	movs	r1, #1
 8002e56:	2037      	movs	r0, #55	@ 0x37
 8002e58:	f7ff ff43 	bl	8002ce2 <MPU6050_WriteOneBit>
}
 8002e5c:	bf00      	nop
 8002e5e:	3708      	adds	r7, #8
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <MPU6050_GetData>:

void MPU6050_GetData(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz, int16_t* tmpr) 
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b08c      	sub	sp, #48	@ 0x30
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]
 8002e70:	603b      	str	r3, [r7, #0]
	uint8_t Buffer[14] = {0};
 8002e72:	2300      	movs	r3, #0
 8002e74:	623b      	str	r3, [r7, #32]
 8002e76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	601a      	str	r2, [r3, #0]
 8002e7e:	605a      	str	r2, [r3, #4]
 8002e80:	811a      	strh	r2, [r3, #8]
	int16_t InBuffer[7] = {0};
 8002e82:	f107 0310 	add.w	r3, r7, #16
 8002e86:	2200      	movs	r2, #0
 8002e88:	601a      	str	r2, [r3, #0]
 8002e8a:	605a      	str	r2, [r3, #4]
 8002e8c:	609a      	str	r2, [r3, #8]
 8002e8e:	819a      	strh	r2, [r3, #12]
	int16_t temp;
	
	MPU6050_ReadBuff(MPU6050_RA_ACCEL_XOUT_H, 14, Buffer);
 8002e90:	f107 0320 	add.w	r3, r7, #32
 8002e94:	461a      	mov	r2, r3
 8002e96:	210e      	movs	r1, #14
 8002e98:	203b      	movs	r0, #59	@ 0x3b
 8002e9a:	f7ff ff57 	bl	8002d4c <MPU6050_ReadBuff>
		
  InBuffer[0] = (((int16_t)Buffer[0]) << 8) | Buffer[1];
 8002e9e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002ea2:	021b      	lsls	r3, r3, #8
 8002ea4:	b21a      	sxth	r2, r3
 8002ea6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002eaa:	b21b      	sxth	r3, r3
 8002eac:	4313      	orrs	r3, r2
 8002eae:	b21b      	sxth	r3, r3
 8002eb0:	823b      	strh	r3, [r7, #16]
  InBuffer[1] = (((int16_t)Buffer[2]) << 8) | Buffer[3];
 8002eb2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8002eb6:	021b      	lsls	r3, r3, #8
 8002eb8:	b21a      	sxth	r2, r3
 8002eba:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002ebe:	b21b      	sxth	r3, r3
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	b21b      	sxth	r3, r3
 8002ec4:	827b      	strh	r3, [r7, #18]
  InBuffer[2] = (((int16_t)Buffer[4]) << 8) | Buffer[5];
 8002ec6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002eca:	021b      	lsls	r3, r3, #8
 8002ecc:	b21a      	sxth	r2, r3
 8002ece:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002ed2:	b21b      	sxth	r3, r3
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	b21b      	sxth	r3, r3
 8002ed8:	82bb      	strh	r3, [r7, #20]

  InBuffer[3] = (((int16_t)Buffer[8]) << 8) | Buffer[9];
 8002eda:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002ede:	021b      	lsls	r3, r3, #8
 8002ee0:	b21a      	sxth	r2, r3
 8002ee2:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8002ee6:	b21b      	sxth	r3, r3
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	b21b      	sxth	r3, r3
 8002eec:	82fb      	strh	r3, [r7, #22]
  InBuffer[4] = (((int16_t)Buffer[10]) << 8) | Buffer[11];
 8002eee:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8002ef2:	021b      	lsls	r3, r3, #8
 8002ef4:	b21a      	sxth	r2, r3
 8002ef6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002efa:	b21b      	sxth	r3, r3
 8002efc:	4313      	orrs	r3, r2
 8002efe:	b21b      	sxth	r3, r3
 8002f00:	833b      	strh	r3, [r7, #24]
  InBuffer[5] = (((int16_t)Buffer[12]) << 8) | Buffer[13];
 8002f02:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002f06:	021b      	lsls	r3, r3, #8
 8002f08:	b21a      	sxth	r2, r3
 8002f0a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8002f0e:	b21b      	sxth	r3, r3
 8002f10:	4313      	orrs	r3, r2
 8002f12:	b21b      	sxth	r3, r3
 8002f14:	837b      	strh	r3, [r7, #26]
	
	temp = (((int16_t)Buffer[6]) << 8) | Buffer[7];
 8002f16:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002f1a:	021b      	lsls	r3, r3, #8
 8002f1c:	b21a      	sxth	r2, r3
 8002f1e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002f22:	b21b      	sxth	r3, r3
 8002f24:	4313      	orrs	r3, r2
 8002f26:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	InBuffer[6] = (int16_t)(temp* 10L / 34) + 3653;
 8002f28:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	@ 0x2e
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	4413      	add	r3, r2
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	4a2a      	ldr	r2, [pc, #168]	@ (8002fe0 <MPU6050_GetData+0x17c>)
 8002f36:	fb82 1203 	smull	r1, r2, r2, r3
 8002f3a:	1112      	asrs	r2, r2, #4
 8002f3c:	17db      	asrs	r3, r3, #31
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	f603 6345 	addw	r3, r3, #3653	@ 0xe45
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	b21b      	sxth	r3, r3
 8002f4a:	83bb      	strh	r3, [r7, #28]
	
	*ax = *(InBuffer + 0);
 8002f4c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	801a      	strh	r2, [r3, #0]
	*ay = *(InBuffer + 1);
 8002f54:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	801a      	strh	r2, [r3, #0]
	*az = *(InBuffer + 2);
 8002f5c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	801a      	strh	r2, [r3, #0]
	*gx = *(InBuffer + 3) / 32.8f;
 8002f64:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7fd fec1 	bl	8000cf0 <__aeabi_i2f>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	491c      	ldr	r1, [pc, #112]	@ (8002fe4 <MPU6050_GetData+0x180>)
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7fd ffc4 	bl	8000f00 <__aeabi_fdiv>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7fe f8e8 	bl	8001150 <__aeabi_f2iz>
 8002f80:	4603      	mov	r3, r0
 8002f82:	b21a      	sxth	r2, r3
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	801a      	strh	r2, [r3, #0]
	*gy = *(InBuffer + 4) / 32.8f;
 8002f88:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7fd feaf 	bl	8000cf0 <__aeabi_i2f>
 8002f92:	4603      	mov	r3, r0
 8002f94:	4913      	ldr	r1, [pc, #76]	@ (8002fe4 <MPU6050_GetData+0x180>)
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7fd ffb2 	bl	8000f00 <__aeabi_fdiv>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7fe f8d6 	bl	8001150 <__aeabi_f2iz>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	b21a      	sxth	r2, r3
 8002fa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002faa:	801a      	strh	r2, [r3, #0]
	*gz = *(InBuffer + 5) / 32.8f;
 8002fac:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7fd fe9d 	bl	8000cf0 <__aeabi_i2f>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	490a      	ldr	r1, [pc, #40]	@ (8002fe4 <MPU6050_GetData+0x180>)
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7fd ffa0 	bl	8000f00 <__aeabi_fdiv>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7fe f8c4 	bl	8001150 <__aeabi_f2iz>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	b21a      	sxth	r2, r3
 8002fcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fce:	801a      	strh	r2, [r3, #0]
	*tmpr = *(InBuffer + 6);
 8002fd0:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8002fd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fd6:	801a      	strh	r2, [r3, #0]
}
 8002fd8:	bf00      	nop
 8002fda:	3730      	adds	r7, #48	@ 0x30
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	78787879 	.word	0x78787879
 8002fe4:	42033333 	.word	0x42033333

08002fe8 <MPU6050_Init>:
	MPU6050_GyroOffset.Z = TempGz >> 5;

}

void MPU6050_Init(uint8_t	lpf)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	4603      	mov	r3, r0
 8002ff0:	71fb      	strb	r3, [r7, #7]
  MPU6050_SetClockSource(MPU6050_CLOCK_PLL_XGYRO); 
 8002ff2:	2001      	movs	r0, #1
 8002ff4:	f7ff fece 	bl	8002d94 <MPU6050_SetClockSource>
  MPU6050_SetFullScaleGyroRange(MPU6050_GYRO_FS_1000);
 8002ff8:	2002      	movs	r0, #2
 8002ffa:	f7ff feda 	bl	8002db2 <MPU6050_SetFullScaleGyroRange>
  MPU6050_SetFullScaleAccelRange(MPU6050_ACCEL_FS_2);	
 8002ffe:	2000      	movs	r0, #0
 8003000:	f7ff fef4 	bl	8002dec <MPU6050_SetFullScaleAccelRange>
		MPU6050_DLPF_BW_42          0x03
		MPU6050_DLPF_BW_20          0x04
		MPU6050_DLPF_BW_10          0x05
		MPU6050_DLPF_BW_5           0x06
	*/
	MPU6050_SetLPF(lpf);
 8003004:	79fb      	ldrb	r3, [r7, #7]
 8003006:	4618      	mov	r0, r3
 8003008:	f7ff fee2 	bl	8002dd0 <MPU6050_SetLPF>
	
  MPU6050_SetSleepEnabled(0); 
 800300c:	2000      	movs	r0, #0
 800300e:	f7ff fefc 	bl	8002e0a <MPU6050_SetSleepEnabled>
	MPU6050_SetI2CMasterModeEnabled(0);	 
 8003012:	2000      	movs	r0, #0
 8003014:	f7ff ff08 	bl	8002e28 <MPU6050_SetI2CMasterModeEnabled>
	MPU6050_SetI2CBypassEnabled(1);	 
 8003018:	2001      	movs	r0, #1
 800301a:	f7ff ff14 	bl	8002e46 <MPU6050_SetI2CBypassEnabled>
	
	MPU6050_WriteOneBit(MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_INT_LEVEL_BIT, 0);
 800301e:	2200      	movs	r2, #0
 8003020:	2107      	movs	r1, #7
 8003022:	2037      	movs	r0, #55	@ 0x37
 8003024:	f7ff fe5d 	bl	8002ce2 <MPU6050_WriteOneBit>
	MPU6050_WriteOneBit( MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_INT_OPEN_BIT, 0);
 8003028:	2200      	movs	r2, #0
 800302a:	2106      	movs	r1, #6
 800302c:	2037      	movs	r0, #55	@ 0x37
 800302e:	f7ff fe58 	bl	8002ce2 <MPU6050_WriteOneBit>
	MPU6050_WriteOneBit(MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_LATCH_INT_EN_BIT, 1);
 8003032:	2201      	movs	r2, #1
 8003034:	2105      	movs	r1, #5
 8003036:	2037      	movs	r0, #55	@ 0x37
 8003038:	f7ff fe53 	bl	8002ce2 <MPU6050_WriteOneBit>
	MPU6050_WriteOneBit(MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_INT_RD_CLEAR_BIT, 1);
 800303c:	2201      	movs	r2, #1
 800303e:	2104      	movs	r1, #4
 8003040:	2037      	movs	r0, #55	@ 0x37
 8003042:	f7ff fe4e 	bl	8002ce2 <MPU6050_WriteOneBit>
  MPU6050_WriteOneBit(MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_DATA_RDY_BIT, 1);
 8003046:	2201      	movs	r2, #1
 8003048:	2100      	movs	r1, #0
 800304a:	2038      	movs	r0, #56	@ 0x38
 800304c:	f7ff fe49 	bl	8002ce2 <MPU6050_WriteOneBit>
	HAL_Delay(100);  // ���̷� ����ȭ ���
 8003050:	2064      	movs	r0, #100	@ 0x64
 8003052:	f000 fcd9 	bl	8003a08 <HAL_Delay>

	cliAdd("mpu6050", cliMPU6050);
 8003056:	4904      	ldr	r1, [pc, #16]	@ (8003068 <MPU6050_Init+0x80>)
 8003058:	4804      	ldr	r0, [pc, #16]	@ (800306c <MPU6050_Init+0x84>)
 800305a:	f7fe ffe5 	bl	8002028 <cliAdd>
}
 800305e:	bf00      	nop
 8003060:	3708      	adds	r7, #8
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	08003071 	.word	0x08003071
 800306c:	0800c390 	.word	0x0800c390

08003070 <cliMPU6050>:

void cliMPU6050(cli_args_t *args)
{
 8003070:	b590      	push	{r4, r7, lr}
 8003072:	b0a3      	sub	sp, #140	@ 0x8c
 8003074:	af0c      	add	r7, sp, #48	@ 0x30
 8003076:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8003078:	2300      	movs	r3, #0
 800307a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

  if(args->argc == 1 && args->isStr(0, "show"))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	881b      	ldrh	r3, [r3, #0]
 8003082:	2b01      	cmp	r3, #1
 8003084:	f040 80ee 	bne.w	8003264 <cliMPU6050+0x1f4>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	695b      	ldr	r3, [r3, #20]
 800308c:	497e      	ldr	r1, [pc, #504]	@ (8003288 <cliMPU6050+0x218>)
 800308e:	2000      	movs	r0, #0
 8003090:	4798      	blx	r3
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	f000 80e5 	beq.w	8003264 <cliMPU6050+0x1f4>
  {
    int16_t raw_ax = 0, raw_ay = 0, raw_az = 0;
 800309a:	2300      	movs	r3, #0
 800309c:	82bb      	strh	r3, [r7, #20]
 800309e:	2300      	movs	r3, #0
 80030a0:	827b      	strh	r3, [r7, #18]
 80030a2:	2300      	movs	r3, #0
 80030a4:	823b      	strh	r3, [r7, #16]
    int16_t raw_gx = 0, raw_gy = 0, raw_gz = 0;
 80030a6:	2300      	movs	r3, #0
 80030a8:	81fb      	strh	r3, [r7, #14]
 80030aa:	2300      	movs	r3, #0
 80030ac:	81bb      	strh	r3, [r7, #12]
 80030ae:	2300      	movs	r3, #0
 80030b0:	817b      	strh	r3, [r7, #10]
    int16_t raw_temp = 0;
 80030b2:	2300      	movs	r3, #0
 80030b4:	813b      	strh	r3, [r7, #8]

    double ax = 0.0, ay = 0.0, az = 0.0;
 80030b6:	f04f 0200 	mov.w	r2, #0
 80030ba:	f04f 0300 	mov.w	r3, #0
 80030be:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 80030c2:	f04f 0200 	mov.w	r2, #0
 80030c6:	f04f 0300 	mov.w	r3, #0
 80030ca:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 80030ce:	f04f 0200 	mov.w	r2, #0
 80030d2:	f04f 0300 	mov.w	r3, #0
 80030d6:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double gx = 0.0, gy = 0.0, gz = 0.0;
 80030da:	f04f 0200 	mov.w	r2, #0
 80030de:	f04f 0300 	mov.w	r3, #0
 80030e2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 80030e6:	f04f 0200 	mov.w	r2, #0
 80030ea:	f04f 0300 	mov.w	r3, #0
 80030ee:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 80030f2:	f04f 0200 	mov.w	r2, #0
 80030f6:	f04f 0300 	mov.w	r3, #0
 80030fa:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double temp = 0.0;
 80030fe:	f04f 0200 	mov.w	r2, #0
 8003102:	f04f 0300 	mov.w	r3, #0
 8003106:	e9c7 2306 	strd	r2, r3, [r7, #24]

    uint8_t str = 0;
 800310a:	2300      	movs	r3, #0
 800310c:	75fb      	strb	r3, [r7, #23]

    while(cliKeepLoop())
 800310e:	e09e      	b.n	800324e <cliMPU6050+0x1de>
    {
      str = uartRead(CH_USART1);
 8003110:	2001      	movs	r0, #1
 8003112:	f7ff f937 	bl	8002384 <uartRead>
 8003116:	4603      	mov	r3, r0
 8003118:	75fb      	strb	r3, [r7, #23]

      if(str == 0x0D)
 800311a:	7dfb      	ldrb	r3, [r7, #23]
 800311c:	2b0d      	cmp	r3, #13
 800311e:	f000 809d 	beq.w	800325c <cliMPU6050+0x1ec>
        break;

      MPU6050_GetData(&raw_ax, &raw_ay, &raw_az, &raw_gx, &raw_gy, &raw_gz, &raw_temp);
 8003122:	f107 040e 	add.w	r4, r7, #14
 8003126:	f107 0210 	add.w	r2, r7, #16
 800312a:	f107 0112 	add.w	r1, r7, #18
 800312e:	f107 0014 	add.w	r0, r7, #20
 8003132:	f107 0308 	add.w	r3, r7, #8
 8003136:	9302      	str	r3, [sp, #8]
 8003138:	f107 030a 	add.w	r3, r7, #10
 800313c:	9301      	str	r3, [sp, #4]
 800313e:	f107 030c 	add.w	r3, r7, #12
 8003142:	9300      	str	r3, [sp, #0]
 8003144:	4623      	mov	r3, r4
 8003146:	f7ff fe8d 	bl	8002e64 <MPU6050_GetData>

      ax = (double)raw_ax / 4096;
 800314a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800314e:	4618      	mov	r0, r3
 8003150:	f7fd f962 	bl	8000418 <__aeabi_i2d>
 8003154:	f04f 0200 	mov.w	r2, #0
 8003158:	4b4c      	ldr	r3, [pc, #304]	@ (800328c <cliMPU6050+0x21c>)
 800315a:	f7fd faf1 	bl	8000740 <__aeabi_ddiv>
 800315e:	4602      	mov	r2, r0
 8003160:	460b      	mov	r3, r1
 8003162:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
      ay = (double)raw_ay / 4096;
 8003166:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800316a:	4618      	mov	r0, r3
 800316c:	f7fd f954 	bl	8000418 <__aeabi_i2d>
 8003170:	f04f 0200 	mov.w	r2, #0
 8003174:	4b45      	ldr	r3, [pc, #276]	@ (800328c <cliMPU6050+0x21c>)
 8003176:	f7fd fae3 	bl	8000740 <__aeabi_ddiv>
 800317a:	4602      	mov	r2, r0
 800317c:	460b      	mov	r3, r1
 800317e:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
      az = (double)raw_az / 4096;
 8003182:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003186:	4618      	mov	r0, r3
 8003188:	f7fd f946 	bl	8000418 <__aeabi_i2d>
 800318c:	f04f 0200 	mov.w	r2, #0
 8003190:	4b3e      	ldr	r3, [pc, #248]	@ (800328c <cliMPU6050+0x21c>)
 8003192:	f7fd fad5 	bl	8000740 <__aeabi_ddiv>
 8003196:	4602      	mov	r2, r0
 8003198:	460b      	mov	r3, r1
 800319a:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
      gx = (double)raw_gx / 32.8;
 800319e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7fd f938 	bl	8000418 <__aeabi_i2d>
 80031a8:	a335      	add	r3, pc, #212	@ (adr r3, 8003280 <cliMPU6050+0x210>)
 80031aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ae:	f7fd fac7 	bl	8000740 <__aeabi_ddiv>
 80031b2:	4602      	mov	r2, r0
 80031b4:	460b      	mov	r3, r1
 80031b6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
      gy = (double)raw_gy / 32.8;
 80031ba:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80031be:	4618      	mov	r0, r3
 80031c0:	f7fd f92a 	bl	8000418 <__aeabi_i2d>
 80031c4:	a32e      	add	r3, pc, #184	@ (adr r3, 8003280 <cliMPU6050+0x210>)
 80031c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ca:	f7fd fab9 	bl	8000740 <__aeabi_ddiv>
 80031ce:	4602      	mov	r2, r0
 80031d0:	460b      	mov	r3, r1
 80031d2:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
      gz = (double)raw_gz / 32.8;
 80031d6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80031da:	4618      	mov	r0, r3
 80031dc:	f7fd f91c 	bl	8000418 <__aeabi_i2d>
 80031e0:	a327      	add	r3, pc, #156	@ (adr r3, 8003280 <cliMPU6050+0x210>)
 80031e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031e6:	f7fd faab 	bl	8000740 <__aeabi_ddiv>
 80031ea:	4602      	mov	r2, r0
 80031ec:	460b      	mov	r3, r1
 80031ee:	e9c7 2308 	strd	r2, r3, [r7, #32]
      temp = (double)raw_temp / 100;
 80031f2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7fd f90e 	bl	8000418 <__aeabi_i2d>
 80031fc:	f04f 0200 	mov.w	r2, #0
 8003200:	4b23      	ldr	r3, [pc, #140]	@ (8003290 <cliMPU6050+0x220>)
 8003202:	f7fd fa9d 	bl	8000740 <__aeabi_ddiv>
 8003206:	4602      	mov	r2, r0
 8003208:	460b      	mov	r3, r1
 800320a:	e9c7 2306 	strd	r2, r3, [r7, #24]

      cliPrintf("ax: %.2f, ay: %.2f, az: %.2f, gx: %.2f, gy: %.2f, gz: %.2f, temp: %.2f\n", ax, ay, az, gx, gy, gz, temp);
 800320e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003212:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8003216:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800321a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800321e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003222:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003226:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800322a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800322e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003232:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003236:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800323a:	e9cd 2300 	strd	r2, r3, [sp]
 800323e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003242:	4814      	ldr	r0, [pc, #80]	@ (8003294 <cliMPU6050+0x224>)
 8003244:	f7fe fdee 	bl	8001e24 <cliPrintf>

      HAL_Delay(200);
 8003248:	20c8      	movs	r0, #200	@ 0xc8
 800324a:	f000 fbdd 	bl	8003a08 <HAL_Delay>
    while(cliKeepLoop())
 800324e:	f7fe fedd 	bl	800200c <cliKeepLoop>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	f47f af5b 	bne.w	8003110 <cliMPU6050+0xa0>
 800325a:	e000      	b.n	800325e <cliMPU6050+0x1ee>
        break;
 800325c:	bf00      	nop
    }

    ret = true;
 800325e:	2301      	movs	r3, #1
 8003260:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
  }

  if(ret != true)
 8003264:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8003268:	f083 0301 	eor.w	r3, r3, #1
 800326c:	b2db      	uxtb	r3, r3
 800326e:	2b00      	cmp	r3, #0
 8003270:	d002      	beq.n	8003278 <cliMPU6050+0x208>
  {
    cliPrintf("mpu6050 show\n");
 8003272:	4809      	ldr	r0, [pc, #36]	@ (8003298 <cliMPU6050+0x228>)
 8003274:	f7fe fdd6 	bl	8001e24 <cliPrintf>
  }
}
 8003278:	bf00      	nop
 800327a:	375c      	adds	r7, #92	@ 0x5c
 800327c:	46bd      	mov	sp, r7
 800327e:	bd90      	pop	{r4, r7, pc}
 8003280:	66666666 	.word	0x66666666
 8003284:	40406666 	.word	0x40406666
 8003288:	0800c398 	.word	0x0800c398
 800328c:	40b00000 	.word	0x40b00000
 8003290:	40590000 	.word	0x40590000
 8003294:	0800c3a0 	.word	0x0800c3a0
 8003298:	0800c3e8 	.word	0x0800c3e8

0800329c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80032a2:	4b15      	ldr	r3, [pc, #84]	@ (80032f8 <HAL_MspInit+0x5c>)
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	4a14      	ldr	r2, [pc, #80]	@ (80032f8 <HAL_MspInit+0x5c>)
 80032a8:	f043 0301 	orr.w	r3, r3, #1
 80032ac:	6193      	str	r3, [r2, #24]
 80032ae:	4b12      	ldr	r3, [pc, #72]	@ (80032f8 <HAL_MspInit+0x5c>)
 80032b0:	699b      	ldr	r3, [r3, #24]
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	60bb      	str	r3, [r7, #8]
 80032b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80032ba:	4b0f      	ldr	r3, [pc, #60]	@ (80032f8 <HAL_MspInit+0x5c>)
 80032bc:	69db      	ldr	r3, [r3, #28]
 80032be:	4a0e      	ldr	r2, [pc, #56]	@ (80032f8 <HAL_MspInit+0x5c>)
 80032c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032c4:	61d3      	str	r3, [r2, #28]
 80032c6:	4b0c      	ldr	r3, [pc, #48]	@ (80032f8 <HAL_MspInit+0x5c>)
 80032c8:	69db      	ldr	r3, [r3, #28]
 80032ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032ce:	607b      	str	r3, [r7, #4]
 80032d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80032d2:	4b0a      	ldr	r3, [pc, #40]	@ (80032fc <HAL_MspInit+0x60>)
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	60fb      	str	r3, [r7, #12]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80032de:	60fb      	str	r3, [r7, #12]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80032e6:	60fb      	str	r3, [r7, #12]
 80032e8:	4a04      	ldr	r2, [pc, #16]	@ (80032fc <HAL_MspInit+0x60>)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032ee:	bf00      	nop
 80032f0:	3714      	adds	r7, #20
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bc80      	pop	{r7}
 80032f6:	4770      	bx	lr
 80032f8:	40021000 	.word	0x40021000
 80032fc:	40010000 	.word	0x40010000

08003300 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003304:	bf00      	nop
 8003306:	e7fd      	b.n	8003304 <NMI_Handler+0x4>

08003308 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003308:	b480      	push	{r7}
 800330a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800330c:	bf00      	nop
 800330e:	e7fd      	b.n	800330c <HardFault_Handler+0x4>

08003310 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003310:	b480      	push	{r7}
 8003312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003314:	bf00      	nop
 8003316:	e7fd      	b.n	8003314 <MemManage_Handler+0x4>

08003318 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800331c:	bf00      	nop
 800331e:	e7fd      	b.n	800331c <BusFault_Handler+0x4>

08003320 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003320:	b480      	push	{r7}
 8003322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003324:	bf00      	nop
 8003326:	e7fd      	b.n	8003324 <UsageFault_Handler+0x4>

08003328 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003328:	b480      	push	{r7}
 800332a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800332c:	bf00      	nop
 800332e:	46bd      	mov	sp, r7
 8003330:	bc80      	pop	{r7}
 8003332:	4770      	bx	lr

08003334 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003338:	bf00      	nop
 800333a:	46bd      	mov	sp, r7
 800333c:	bc80      	pop	{r7}
 800333e:	4770      	bx	lr

08003340 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003344:	bf00      	nop
 8003346:	46bd      	mov	sp, r7
 8003348:	bc80      	pop	{r7}
 800334a:	4770      	bx	lr

0800334c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003350:	f000 fb3e 	bl	80039d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003354:	bf00      	nop
 8003356:	bd80      	pop	{r7, pc}

08003358 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800335c:	4802      	ldr	r0, [pc, #8]	@ (8003368 <DMA1_Channel5_IRQHandler+0x10>)
 800335e:	f000 fdf3 	bl	8003f48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8003362:	bf00      	nop
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	200008d8 	.word	0x200008d8

0800336c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003370:	4802      	ldr	r0, [pc, #8]	@ (800337c <DMA1_Channel6_IRQHandler+0x10>)
 8003372:	f000 fde9 	bl	8003f48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8003376:	bf00      	nop
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	2000091c 	.word	0x2000091c

08003380 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003384:	4802      	ldr	r0, [pc, #8]	@ (8003390 <TIM3_IRQHandler+0x10>)
 8003386:	f002 fe55 	bl	8006034 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800338a:	bf00      	nop
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	20000800 	.word	0x20000800

08003394 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003398:	4802      	ldr	r0, [pc, #8]	@ (80033a4 <USART1_IRQHandler+0x10>)
 800339a:	f003 f96b 	bl	8006674 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800339e:	bf00      	nop
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	20000848 	.word	0x20000848

080033a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80033ac:	4802      	ldr	r0, [pc, #8]	@ (80033b8 <USART2_IRQHandler+0x10>)
 80033ae:	f003 f961 	bl	8006674 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80033b2:	bf00      	nop
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	20000890 	.word	0x20000890

080033bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80033bc:	b480      	push	{r7}
 80033be:	af00      	add	r7, sp, #0
  return 1;
 80033c0:	2301      	movs	r3, #1
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bc80      	pop	{r7}
 80033c8:	4770      	bx	lr

080033ca <_kill>:

int _kill(int pid, int sig)
{
 80033ca:	b580      	push	{r7, lr}
 80033cc:	b082      	sub	sp, #8
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
 80033d2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80033d4:	f005 ff7c 	bl	80092d0 <__errno>
 80033d8:	4603      	mov	r3, r0
 80033da:	2216      	movs	r2, #22
 80033dc:	601a      	str	r2, [r3, #0]
  return -1;
 80033de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3708      	adds	r7, #8
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <_exit>:

void _exit (int status)
{
 80033ea:	b580      	push	{r7, lr}
 80033ec:	b082      	sub	sp, #8
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80033f2:	f04f 31ff 	mov.w	r1, #4294967295
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f7ff ffe7 	bl	80033ca <_kill>
  while (1) {}    /* Make sure we hang here */
 80033fc:	bf00      	nop
 80033fe:	e7fd      	b.n	80033fc <_exit+0x12>

08003400 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b086      	sub	sp, #24
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800340c:	2300      	movs	r3, #0
 800340e:	617b      	str	r3, [r7, #20]
 8003410:	e00a      	b.n	8003428 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003412:	f3af 8000 	nop.w
 8003416:	4601      	mov	r1, r0
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	1c5a      	adds	r2, r3, #1
 800341c:	60ba      	str	r2, [r7, #8]
 800341e:	b2ca      	uxtb	r2, r1
 8003420:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	3301      	adds	r3, #1
 8003426:	617b      	str	r3, [r7, #20]
 8003428:	697a      	ldr	r2, [r7, #20]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	429a      	cmp	r2, r3
 800342e:	dbf0      	blt.n	8003412 <_read+0x12>
  }

  return len;
 8003430:	687b      	ldr	r3, [r7, #4]
}
 8003432:	4618      	mov	r0, r3
 8003434:	3718      	adds	r7, #24
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800343a:	b580      	push	{r7, lr}
 800343c:	b086      	sub	sp, #24
 800343e:	af00      	add	r7, sp, #0
 8003440:	60f8      	str	r0, [r7, #12]
 8003442:	60b9      	str	r1, [r7, #8]
 8003444:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003446:	2300      	movs	r3, #0
 8003448:	617b      	str	r3, [r7, #20]
 800344a:	e009      	b.n	8003460 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	1c5a      	adds	r2, r3, #1
 8003450:	60ba      	str	r2, [r7, #8]
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	4618      	mov	r0, r3
 8003456:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	3301      	adds	r3, #1
 800345e:	617b      	str	r3, [r7, #20]
 8003460:	697a      	ldr	r2, [r7, #20]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	429a      	cmp	r2, r3
 8003466:	dbf1      	blt.n	800344c <_write+0x12>
  }
  return len;
 8003468:	687b      	ldr	r3, [r7, #4]
}
 800346a:	4618      	mov	r0, r3
 800346c:	3718      	adds	r7, #24
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <_close>:

int _close(int file)
{
 8003472:	b480      	push	{r7}
 8003474:	b083      	sub	sp, #12
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800347a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800347e:	4618      	mov	r0, r3
 8003480:	370c      	adds	r7, #12
 8003482:	46bd      	mov	sp, r7
 8003484:	bc80      	pop	{r7}
 8003486:	4770      	bx	lr

08003488 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003498:	605a      	str	r2, [r3, #4]
  return 0;
 800349a:	2300      	movs	r3, #0
}
 800349c:	4618      	mov	r0, r3
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bc80      	pop	{r7}
 80034a4:	4770      	bx	lr

080034a6 <_isatty>:

int _isatty(int file)
{
 80034a6:	b480      	push	{r7}
 80034a8:	b083      	sub	sp, #12
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80034ae:	2301      	movs	r3, #1
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bc80      	pop	{r7}
 80034b8:	4770      	bx	lr

080034ba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80034ba:	b480      	push	{r7}
 80034bc:	b085      	sub	sp, #20
 80034be:	af00      	add	r7, sp, #0
 80034c0:	60f8      	str	r0, [r7, #12]
 80034c2:	60b9      	str	r1, [r7, #8]
 80034c4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80034c6:	2300      	movs	r3, #0
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3714      	adds	r7, #20
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bc80      	pop	{r7}
 80034d0:	4770      	bx	lr
	...

080034d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b086      	sub	sp, #24
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034dc:	4a14      	ldr	r2, [pc, #80]	@ (8003530 <_sbrk+0x5c>)
 80034de:	4b15      	ldr	r3, [pc, #84]	@ (8003534 <_sbrk+0x60>)
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80034e8:	4b13      	ldr	r3, [pc, #76]	@ (8003538 <_sbrk+0x64>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d102      	bne.n	80034f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80034f0:	4b11      	ldr	r3, [pc, #68]	@ (8003538 <_sbrk+0x64>)
 80034f2:	4a12      	ldr	r2, [pc, #72]	@ (800353c <_sbrk+0x68>)
 80034f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80034f6:	4b10      	ldr	r3, [pc, #64]	@ (8003538 <_sbrk+0x64>)
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4413      	add	r3, r2
 80034fe:	693a      	ldr	r2, [r7, #16]
 8003500:	429a      	cmp	r2, r3
 8003502:	d207      	bcs.n	8003514 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003504:	f005 fee4 	bl	80092d0 <__errno>
 8003508:	4603      	mov	r3, r0
 800350a:	220c      	movs	r2, #12
 800350c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800350e:	f04f 33ff 	mov.w	r3, #4294967295
 8003512:	e009      	b.n	8003528 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003514:	4b08      	ldr	r3, [pc, #32]	@ (8003538 <_sbrk+0x64>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800351a:	4b07      	ldr	r3, [pc, #28]	@ (8003538 <_sbrk+0x64>)
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4413      	add	r3, r2
 8003522:	4a05      	ldr	r2, [pc, #20]	@ (8003538 <_sbrk+0x64>)
 8003524:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003526:	68fb      	ldr	r3, [r7, #12]
}
 8003528:	4618      	mov	r0, r3
 800352a:	3718      	adds	r7, #24
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	20005000 	.word	0x20005000
 8003534:	00000400 	.word	0x00000400
 8003538:	200007fc 	.word	0x200007fc
 800353c:	20000ab0 	.word	0x20000ab0

08003540 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003540:	b480      	push	{r7}
 8003542:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003544:	bf00      	nop
 8003546:	46bd      	mov	sp, r7
 8003548:	bc80      	pop	{r7}
 800354a:	4770      	bx	lr

0800354c <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b08c      	sub	sp, #48	@ 0x30
 8003550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003552:	f107 030c 	add.w	r3, r7, #12
 8003556:	2224      	movs	r2, #36	@ 0x24
 8003558:	2100      	movs	r1, #0
 800355a:	4618      	mov	r0, r3
 800355c:	f005 fe28 	bl	80091b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003560:	1d3b      	adds	r3, r7, #4
 8003562:	2200      	movs	r2, #0
 8003564:	601a      	str	r2, [r3, #0]
 8003566:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003568:	4b20      	ldr	r3, [pc, #128]	@ (80035ec <MX_TIM3_Init+0xa0>)
 800356a:	4a21      	ldr	r2, [pc, #132]	@ (80035f0 <MX_TIM3_Init+0xa4>)
 800356c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800356e:	4b1f      	ldr	r3, [pc, #124]	@ (80035ec <MX_TIM3_Init+0xa0>)
 8003570:	2200      	movs	r2, #0
 8003572:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003574:	4b1d      	ldr	r3, [pc, #116]	@ (80035ec <MX_TIM3_Init+0xa0>)
 8003576:	2200      	movs	r2, #0
 8003578:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 128;
 800357a:	4b1c      	ldr	r3, [pc, #112]	@ (80035ec <MX_TIM3_Init+0xa0>)
 800357c:	2280      	movs	r2, #128	@ 0x80
 800357e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003580:	4b1a      	ldr	r3, [pc, #104]	@ (80035ec <MX_TIM3_Init+0xa0>)
 8003582:	2200      	movs	r2, #0
 8003584:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003586:	4b19      	ldr	r3, [pc, #100]	@ (80035ec <MX_TIM3_Init+0xa0>)
 8003588:	2200      	movs	r2, #0
 800358a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800358c:	2301      	movs	r3, #1
 800358e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003590:	2300      	movs	r3, #0
 8003592:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003594:	2301      	movs	r3, #1
 8003596:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003598:	2300      	movs	r3, #0
 800359a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800359c:	2300      	movs	r3, #0
 800359e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80035a0:	2300      	movs	r3, #0
 80035a2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80035a4:	2301      	movs	r3, #1
 80035a6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80035a8:	2300      	movs	r3, #0
 80035aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80035ac:	2300      	movs	r3, #0
 80035ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80035b0:	f107 030c 	add.w	r3, r7, #12
 80035b4:	4619      	mov	r1, r3
 80035b6:	480d      	ldr	r0, [pc, #52]	@ (80035ec <MX_TIM3_Init+0xa0>)
 80035b8:	f002 fc0c 	bl	8005dd4 <HAL_TIM_Encoder_Init>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d001      	beq.n	80035c6 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80035c2:	f7ff fb04 	bl	8002bce <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035c6:	2300      	movs	r3, #0
 80035c8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035ca:	2300      	movs	r3, #0
 80035cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80035ce:	1d3b      	adds	r3, r7, #4
 80035d0:	4619      	mov	r1, r3
 80035d2:	4806      	ldr	r0, [pc, #24]	@ (80035ec <MX_TIM3_Init+0xa0>)
 80035d4:	f002 fede 	bl	8006394 <HAL_TIMEx_MasterConfigSynchronization>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d001      	beq.n	80035e2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80035de:	f7ff faf6 	bl	8002bce <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80035e2:	bf00      	nop
 80035e4:	3730      	adds	r7, #48	@ 0x30
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	20000800 	.word	0x20000800
 80035f0:	40000400 	.word	0x40000400

080035f4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b088      	sub	sp, #32
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035fc:	f107 0310 	add.w	r3, r7, #16
 8003600:	2200      	movs	r2, #0
 8003602:	601a      	str	r2, [r3, #0]
 8003604:	605a      	str	r2, [r3, #4]
 8003606:	609a      	str	r2, [r3, #8]
 8003608:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM3)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a19      	ldr	r2, [pc, #100]	@ (8003674 <HAL_TIM_Encoder_MspInit+0x80>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d12b      	bne.n	800366c <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003614:	4b18      	ldr	r3, [pc, #96]	@ (8003678 <HAL_TIM_Encoder_MspInit+0x84>)
 8003616:	69db      	ldr	r3, [r3, #28]
 8003618:	4a17      	ldr	r2, [pc, #92]	@ (8003678 <HAL_TIM_Encoder_MspInit+0x84>)
 800361a:	f043 0302 	orr.w	r3, r3, #2
 800361e:	61d3      	str	r3, [r2, #28]
 8003620:	4b15      	ldr	r3, [pc, #84]	@ (8003678 <HAL_TIM_Encoder_MspInit+0x84>)
 8003622:	69db      	ldr	r3, [r3, #28]
 8003624:	f003 0302 	and.w	r3, r3, #2
 8003628:	60fb      	str	r3, [r7, #12]
 800362a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800362c:	4b12      	ldr	r3, [pc, #72]	@ (8003678 <HAL_TIM_Encoder_MspInit+0x84>)
 800362e:	699b      	ldr	r3, [r3, #24]
 8003630:	4a11      	ldr	r2, [pc, #68]	@ (8003678 <HAL_TIM_Encoder_MspInit+0x84>)
 8003632:	f043 0304 	orr.w	r3, r3, #4
 8003636:	6193      	str	r3, [r2, #24]
 8003638:	4b0f      	ldr	r3, [pc, #60]	@ (8003678 <HAL_TIM_Encoder_MspInit+0x84>)
 800363a:	699b      	ldr	r3, [r3, #24]
 800363c:	f003 0304 	and.w	r3, r3, #4
 8003640:	60bb      	str	r3, [r7, #8]
 8003642:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_OTB_Pin|ENCODER_OTA_Pin;
 8003644:	23c0      	movs	r3, #192	@ 0xc0
 8003646:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003648:	2300      	movs	r3, #0
 800364a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800364c:	2300      	movs	r3, #0
 800364e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003650:	f107 0310 	add.w	r3, r7, #16
 8003654:	4619      	mov	r1, r3
 8003656:	4809      	ldr	r0, [pc, #36]	@ (800367c <HAL_TIM_Encoder_MspInit+0x88>)
 8003658:	f000 fdaa 	bl	80041b0 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800365c:	2200      	movs	r2, #0
 800365e:	2100      	movs	r1, #0
 8003660:	201d      	movs	r0, #29
 8003662:	f000 facc 	bl	8003bfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003666:	201d      	movs	r0, #29
 8003668:	f000 fae5 	bl	8003c36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800366c:	bf00      	nop
 800366e:	3720      	adds	r7, #32
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	40000400 	.word	0x40000400
 8003678:	40021000 	.word	0x40021000
 800367c:	40010800 	.word	0x40010800

08003680 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003684:	4b11      	ldr	r3, [pc, #68]	@ (80036cc <MX_USART1_UART_Init+0x4c>)
 8003686:	4a12      	ldr	r2, [pc, #72]	@ (80036d0 <MX_USART1_UART_Init+0x50>)
 8003688:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800368a:	4b10      	ldr	r3, [pc, #64]	@ (80036cc <MX_USART1_UART_Init+0x4c>)
 800368c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003690:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003692:	4b0e      	ldr	r3, [pc, #56]	@ (80036cc <MX_USART1_UART_Init+0x4c>)
 8003694:	2200      	movs	r2, #0
 8003696:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003698:	4b0c      	ldr	r3, [pc, #48]	@ (80036cc <MX_USART1_UART_Init+0x4c>)
 800369a:	2200      	movs	r2, #0
 800369c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800369e:	4b0b      	ldr	r3, [pc, #44]	@ (80036cc <MX_USART1_UART_Init+0x4c>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80036a4:	4b09      	ldr	r3, [pc, #36]	@ (80036cc <MX_USART1_UART_Init+0x4c>)
 80036a6:	220c      	movs	r2, #12
 80036a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80036aa:	4b08      	ldr	r3, [pc, #32]	@ (80036cc <MX_USART1_UART_Init+0x4c>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80036b0:	4b06      	ldr	r3, [pc, #24]	@ (80036cc <MX_USART1_UART_Init+0x4c>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80036b6:	4805      	ldr	r0, [pc, #20]	@ (80036cc <MX_USART1_UART_Init+0x4c>)
 80036b8:	f002 fedc 	bl	8006474 <HAL_UART_Init>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d001      	beq.n	80036c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80036c2:	f7ff fa84 	bl	8002bce <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80036c6:	bf00      	nop
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	20000848 	.word	0x20000848
 80036d0:	40013800 	.word	0x40013800

080036d4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80036d8:	4b11      	ldr	r3, [pc, #68]	@ (8003720 <MX_USART2_UART_Init+0x4c>)
 80036da:	4a12      	ldr	r2, [pc, #72]	@ (8003724 <MX_USART2_UART_Init+0x50>)
 80036dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80036de:	4b10      	ldr	r3, [pc, #64]	@ (8003720 <MX_USART2_UART_Init+0x4c>)
 80036e0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80036e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80036e6:	4b0e      	ldr	r3, [pc, #56]	@ (8003720 <MX_USART2_UART_Init+0x4c>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80036ec:	4b0c      	ldr	r3, [pc, #48]	@ (8003720 <MX_USART2_UART_Init+0x4c>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80036f2:	4b0b      	ldr	r3, [pc, #44]	@ (8003720 <MX_USART2_UART_Init+0x4c>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80036f8:	4b09      	ldr	r3, [pc, #36]	@ (8003720 <MX_USART2_UART_Init+0x4c>)
 80036fa:	220c      	movs	r2, #12
 80036fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80036fe:	4b08      	ldr	r3, [pc, #32]	@ (8003720 <MX_USART2_UART_Init+0x4c>)
 8003700:	2200      	movs	r2, #0
 8003702:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003704:	4b06      	ldr	r3, [pc, #24]	@ (8003720 <MX_USART2_UART_Init+0x4c>)
 8003706:	2200      	movs	r2, #0
 8003708:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800370a:	4805      	ldr	r0, [pc, #20]	@ (8003720 <MX_USART2_UART_Init+0x4c>)
 800370c:	f002 feb2 	bl	8006474 <HAL_UART_Init>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d001      	beq.n	800371a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003716:	f7ff fa5a 	bl	8002bce <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800371a:	bf00      	nop
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	20000890 	.word	0x20000890
 8003724:	40004400 	.word	0x40004400

08003728 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b08a      	sub	sp, #40	@ 0x28
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003730:	f107 0318 	add.w	r3, r7, #24
 8003734:	2200      	movs	r2, #0
 8003736:	601a      	str	r2, [r3, #0]
 8003738:	605a      	str	r2, [r3, #4]
 800373a:	609a      	str	r2, [r3, #8]
 800373c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a65      	ldr	r2, [pc, #404]	@ (80038d8 <HAL_UART_MspInit+0x1b0>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d160      	bne.n	800380a <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003748:	4b64      	ldr	r3, [pc, #400]	@ (80038dc <HAL_UART_MspInit+0x1b4>)
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	4a63      	ldr	r2, [pc, #396]	@ (80038dc <HAL_UART_MspInit+0x1b4>)
 800374e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003752:	6193      	str	r3, [r2, #24]
 8003754:	4b61      	ldr	r3, [pc, #388]	@ (80038dc <HAL_UART_MspInit+0x1b4>)
 8003756:	699b      	ldr	r3, [r3, #24]
 8003758:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800375c:	617b      	str	r3, [r7, #20]
 800375e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003760:	4b5e      	ldr	r3, [pc, #376]	@ (80038dc <HAL_UART_MspInit+0x1b4>)
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	4a5d      	ldr	r2, [pc, #372]	@ (80038dc <HAL_UART_MspInit+0x1b4>)
 8003766:	f043 0304 	orr.w	r3, r3, #4
 800376a:	6193      	str	r3, [r2, #24]
 800376c:	4b5b      	ldr	r3, [pc, #364]	@ (80038dc <HAL_UART_MspInit+0x1b4>)
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	f003 0304 	and.w	r3, r3, #4
 8003774:	613b      	str	r3, [r7, #16]
 8003776:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = UART_CLI_TX_Pin;
 8003778:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800377c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800377e:	2302      	movs	r3, #2
 8003780:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003782:	2303      	movs	r3, #3
 8003784:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(UART_CLI_TX_GPIO_Port, &GPIO_InitStruct);
 8003786:	f107 0318 	add.w	r3, r7, #24
 800378a:	4619      	mov	r1, r3
 800378c:	4854      	ldr	r0, [pc, #336]	@ (80038e0 <HAL_UART_MspInit+0x1b8>)
 800378e:	f000 fd0f 	bl	80041b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = UART_CLI_RX_Pin;
 8003792:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003796:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003798:	2300      	movs	r3, #0
 800379a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800379c:	2300      	movs	r3, #0
 800379e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(UART_CLI_RX_GPIO_Port, &GPIO_InitStruct);
 80037a0:	f107 0318 	add.w	r3, r7, #24
 80037a4:	4619      	mov	r1, r3
 80037a6:	484e      	ldr	r0, [pc, #312]	@ (80038e0 <HAL_UART_MspInit+0x1b8>)
 80037a8:	f000 fd02 	bl	80041b0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80037ac:	4b4d      	ldr	r3, [pc, #308]	@ (80038e4 <HAL_UART_MspInit+0x1bc>)
 80037ae:	4a4e      	ldr	r2, [pc, #312]	@ (80038e8 <HAL_UART_MspInit+0x1c0>)
 80037b0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80037b2:	4b4c      	ldr	r3, [pc, #304]	@ (80038e4 <HAL_UART_MspInit+0x1bc>)
 80037b4:	2200      	movs	r2, #0
 80037b6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037b8:	4b4a      	ldr	r3, [pc, #296]	@ (80038e4 <HAL_UART_MspInit+0x1bc>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80037be:	4b49      	ldr	r3, [pc, #292]	@ (80038e4 <HAL_UART_MspInit+0x1bc>)
 80037c0:	2280      	movs	r2, #128	@ 0x80
 80037c2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80037c4:	4b47      	ldr	r3, [pc, #284]	@ (80038e4 <HAL_UART_MspInit+0x1bc>)
 80037c6:	2200      	movs	r2, #0
 80037c8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80037ca:	4b46      	ldr	r3, [pc, #280]	@ (80038e4 <HAL_UART_MspInit+0x1bc>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80037d0:	4b44      	ldr	r3, [pc, #272]	@ (80038e4 <HAL_UART_MspInit+0x1bc>)
 80037d2:	2220      	movs	r2, #32
 80037d4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80037d6:	4b43      	ldr	r3, [pc, #268]	@ (80038e4 <HAL_UART_MspInit+0x1bc>)
 80037d8:	2200      	movs	r2, #0
 80037da:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80037dc:	4841      	ldr	r0, [pc, #260]	@ (80038e4 <HAL_UART_MspInit+0x1bc>)
 80037de:	f000 fa45 	bl	8003c6c <HAL_DMA_Init>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d001      	beq.n	80037ec <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80037e8:	f7ff f9f1 	bl	8002bce <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4a3d      	ldr	r2, [pc, #244]	@ (80038e4 <HAL_UART_MspInit+0x1bc>)
 80037f0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80037f2:	4a3c      	ldr	r2, [pc, #240]	@ (80038e4 <HAL_UART_MspInit+0x1bc>)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80037f8:	2200      	movs	r2, #0
 80037fa:	2100      	movs	r1, #0
 80037fc:	2025      	movs	r0, #37	@ 0x25
 80037fe:	f000 f9fe 	bl	8003bfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003802:	2025      	movs	r0, #37	@ 0x25
 8003804:	f000 fa17 	bl	8003c36 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003808:	e062      	b.n	80038d0 <HAL_UART_MspInit+0x1a8>
  else if(uartHandle->Instance==USART2)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a37      	ldr	r2, [pc, #220]	@ (80038ec <HAL_UART_MspInit+0x1c4>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d15d      	bne.n	80038d0 <HAL_UART_MspInit+0x1a8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003814:	4b31      	ldr	r3, [pc, #196]	@ (80038dc <HAL_UART_MspInit+0x1b4>)
 8003816:	69db      	ldr	r3, [r3, #28]
 8003818:	4a30      	ldr	r2, [pc, #192]	@ (80038dc <HAL_UART_MspInit+0x1b4>)
 800381a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800381e:	61d3      	str	r3, [r2, #28]
 8003820:	4b2e      	ldr	r3, [pc, #184]	@ (80038dc <HAL_UART_MspInit+0x1b4>)
 8003822:	69db      	ldr	r3, [r3, #28]
 8003824:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003828:	60fb      	str	r3, [r7, #12]
 800382a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800382c:	4b2b      	ldr	r3, [pc, #172]	@ (80038dc <HAL_UART_MspInit+0x1b4>)
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	4a2a      	ldr	r2, [pc, #168]	@ (80038dc <HAL_UART_MspInit+0x1b4>)
 8003832:	f043 0304 	orr.w	r3, r3, #4
 8003836:	6193      	str	r3, [r2, #24]
 8003838:	4b28      	ldr	r3, [pc, #160]	@ (80038dc <HAL_UART_MspInit+0x1b4>)
 800383a:	699b      	ldr	r3, [r3, #24]
 800383c:	f003 0304 	and.w	r3, r3, #4
 8003840:	60bb      	str	r3, [r7, #8]
 8003842:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = UART_BT_TX_Pin;
 8003844:	2304      	movs	r3, #4
 8003846:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003848:	2302      	movs	r3, #2
 800384a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800384c:	2303      	movs	r3, #3
 800384e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(UART_BT_TX_GPIO_Port, &GPIO_InitStruct);
 8003850:	f107 0318 	add.w	r3, r7, #24
 8003854:	4619      	mov	r1, r3
 8003856:	4822      	ldr	r0, [pc, #136]	@ (80038e0 <HAL_UART_MspInit+0x1b8>)
 8003858:	f000 fcaa 	bl	80041b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART_BT_RX_Pin;
 800385c:	2308      	movs	r3, #8
 800385e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003860:	2300      	movs	r3, #0
 8003862:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003864:	2300      	movs	r3, #0
 8003866:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(UART_BT_RX_GPIO_Port, &GPIO_InitStruct);
 8003868:	f107 0318 	add.w	r3, r7, #24
 800386c:	4619      	mov	r1, r3
 800386e:	481c      	ldr	r0, [pc, #112]	@ (80038e0 <HAL_UART_MspInit+0x1b8>)
 8003870:	f000 fc9e 	bl	80041b0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8003874:	4b1e      	ldr	r3, [pc, #120]	@ (80038f0 <HAL_UART_MspInit+0x1c8>)
 8003876:	4a1f      	ldr	r2, [pc, #124]	@ (80038f4 <HAL_UART_MspInit+0x1cc>)
 8003878:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800387a:	4b1d      	ldr	r3, [pc, #116]	@ (80038f0 <HAL_UART_MspInit+0x1c8>)
 800387c:	2200      	movs	r2, #0
 800387e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003880:	4b1b      	ldr	r3, [pc, #108]	@ (80038f0 <HAL_UART_MspInit+0x1c8>)
 8003882:	2200      	movs	r2, #0
 8003884:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003886:	4b1a      	ldr	r3, [pc, #104]	@ (80038f0 <HAL_UART_MspInit+0x1c8>)
 8003888:	2280      	movs	r2, #128	@ 0x80
 800388a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800388c:	4b18      	ldr	r3, [pc, #96]	@ (80038f0 <HAL_UART_MspInit+0x1c8>)
 800388e:	2200      	movs	r2, #0
 8003890:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003892:	4b17      	ldr	r3, [pc, #92]	@ (80038f0 <HAL_UART_MspInit+0x1c8>)
 8003894:	2200      	movs	r2, #0
 8003896:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003898:	4b15      	ldr	r3, [pc, #84]	@ (80038f0 <HAL_UART_MspInit+0x1c8>)
 800389a:	2220      	movs	r2, #32
 800389c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800389e:	4b14      	ldr	r3, [pc, #80]	@ (80038f0 <HAL_UART_MspInit+0x1c8>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80038a4:	4812      	ldr	r0, [pc, #72]	@ (80038f0 <HAL_UART_MspInit+0x1c8>)
 80038a6:	f000 f9e1 	bl	8003c6c <HAL_DMA_Init>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d001      	beq.n	80038b4 <HAL_UART_MspInit+0x18c>
      Error_Handler();
 80038b0:	f7ff f98d 	bl	8002bce <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a0e      	ldr	r2, [pc, #56]	@ (80038f0 <HAL_UART_MspInit+0x1c8>)
 80038b8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80038ba:	4a0d      	ldr	r2, [pc, #52]	@ (80038f0 <HAL_UART_MspInit+0x1c8>)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80038c0:	2200      	movs	r2, #0
 80038c2:	2100      	movs	r1, #0
 80038c4:	2026      	movs	r0, #38	@ 0x26
 80038c6:	f000 f99a 	bl	8003bfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80038ca:	2026      	movs	r0, #38	@ 0x26
 80038cc:	f000 f9b3 	bl	8003c36 <HAL_NVIC_EnableIRQ>
}
 80038d0:	bf00      	nop
 80038d2:	3728      	adds	r7, #40	@ 0x28
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	40013800 	.word	0x40013800
 80038dc:	40021000 	.word	0x40021000
 80038e0:	40010800 	.word	0x40010800
 80038e4:	200008d8 	.word	0x200008d8
 80038e8:	40020058 	.word	0x40020058
 80038ec:	40004400 	.word	0x40004400
 80038f0:	2000091c 	.word	0x2000091c
 80038f4:	4002006c 	.word	0x4002006c

080038f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80038f8:	f7ff fe22 	bl	8003540 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80038fc:	480b      	ldr	r0, [pc, #44]	@ (800392c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80038fe:	490c      	ldr	r1, [pc, #48]	@ (8003930 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003900:	4a0c      	ldr	r2, [pc, #48]	@ (8003934 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003902:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003904:	e002      	b.n	800390c <LoopCopyDataInit>

08003906 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003906:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003908:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800390a:	3304      	adds	r3, #4

0800390c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800390c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800390e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003910:	d3f9      	bcc.n	8003906 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003912:	4a09      	ldr	r2, [pc, #36]	@ (8003938 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003914:	4c09      	ldr	r4, [pc, #36]	@ (800393c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003916:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003918:	e001      	b.n	800391e <LoopFillZerobss>

0800391a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800391a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800391c:	3204      	adds	r2, #4

0800391e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800391e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003920:	d3fb      	bcc.n	800391a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003922:	f005 fcdb 	bl	80092dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003926:	f7ff f8df 	bl	8002ae8 <main>
  bx lr
 800392a:	4770      	bx	lr
  ldr r0, =_sdata
 800392c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003930:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8003934:	0800c898 	.word	0x0800c898
  ldr r2, =_sbss
 8003938:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800393c:	20000ab0 	.word	0x20000ab0

08003940 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003940:	e7fe      	b.n	8003940 <ADC1_2_IRQHandler>
	...

08003944 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003948:	4b08      	ldr	r3, [pc, #32]	@ (800396c <HAL_Init+0x28>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a07      	ldr	r2, [pc, #28]	@ (800396c <HAL_Init+0x28>)
 800394e:	f043 0310 	orr.w	r3, r3, #16
 8003952:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003954:	2003      	movs	r0, #3
 8003956:	f000 f947 	bl	8003be8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800395a:	200f      	movs	r0, #15
 800395c:	f000 f808 	bl	8003970 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003960:	f7ff fc9c 	bl	800329c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	40022000 	.word	0x40022000

08003970 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003978:	4b12      	ldr	r3, [pc, #72]	@ (80039c4 <HAL_InitTick+0x54>)
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	4b12      	ldr	r3, [pc, #72]	@ (80039c8 <HAL_InitTick+0x58>)
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	4619      	mov	r1, r3
 8003982:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003986:	fbb3 f3f1 	udiv	r3, r3, r1
 800398a:	fbb2 f3f3 	udiv	r3, r2, r3
 800398e:	4618      	mov	r0, r3
 8003990:	f000 f95f 	bl	8003c52 <HAL_SYSTICK_Config>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d001      	beq.n	800399e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e00e      	b.n	80039bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2b0f      	cmp	r3, #15
 80039a2:	d80a      	bhi.n	80039ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80039a4:	2200      	movs	r2, #0
 80039a6:	6879      	ldr	r1, [r7, #4]
 80039a8:	f04f 30ff 	mov.w	r0, #4294967295
 80039ac:	f000 f927 	bl	8003bfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80039b0:	4a06      	ldr	r2, [pc, #24]	@ (80039cc <HAL_InitTick+0x5c>)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80039b6:	2300      	movs	r3, #0
 80039b8:	e000      	b.n	80039bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3708      	adds	r7, #8
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	20000004 	.word	0x20000004
 80039c8:	2000000c 	.word	0x2000000c
 80039cc:	20000008 	.word	0x20000008

080039d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039d0:	b480      	push	{r7}
 80039d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80039d4:	4b05      	ldr	r3, [pc, #20]	@ (80039ec <HAL_IncTick+0x1c>)
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	461a      	mov	r2, r3
 80039da:	4b05      	ldr	r3, [pc, #20]	@ (80039f0 <HAL_IncTick+0x20>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4413      	add	r3, r2
 80039e0:	4a03      	ldr	r2, [pc, #12]	@ (80039f0 <HAL_IncTick+0x20>)
 80039e2:	6013      	str	r3, [r2, #0]
}
 80039e4:	bf00      	nop
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bc80      	pop	{r7}
 80039ea:	4770      	bx	lr
 80039ec:	2000000c 	.word	0x2000000c
 80039f0:	20000960 	.word	0x20000960

080039f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039f4:	b480      	push	{r7}
 80039f6:	af00      	add	r7, sp, #0
  return uwTick;
 80039f8:	4b02      	ldr	r3, [pc, #8]	@ (8003a04 <HAL_GetTick+0x10>)
 80039fa:	681b      	ldr	r3, [r3, #0]
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bc80      	pop	{r7}
 8003a02:	4770      	bx	lr
 8003a04:	20000960 	.word	0x20000960

08003a08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a10:	f7ff fff0 	bl	80039f4 <HAL_GetTick>
 8003a14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a20:	d005      	beq.n	8003a2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a22:	4b0a      	ldr	r3, [pc, #40]	@ (8003a4c <HAL_Delay+0x44>)
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	461a      	mov	r2, r3
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003a2e:	bf00      	nop
 8003a30:	f7ff ffe0 	bl	80039f4 <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d8f7      	bhi.n	8003a30 <HAL_Delay+0x28>
  {
  }
}
 8003a40:	bf00      	nop
 8003a42:	bf00      	nop
 8003a44:	3710      	adds	r7, #16
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	2000000c 	.word	0x2000000c

08003a50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b085      	sub	sp, #20
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f003 0307 	and.w	r3, r3, #7
 8003a5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a60:	4b0c      	ldr	r3, [pc, #48]	@ (8003a94 <__NVIC_SetPriorityGrouping+0x44>)
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a66:	68ba      	ldr	r2, [r7, #8]
 8003a68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003a7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a82:	4a04      	ldr	r2, [pc, #16]	@ (8003a94 <__NVIC_SetPriorityGrouping+0x44>)
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	60d3      	str	r3, [r2, #12]
}
 8003a88:	bf00      	nop
 8003a8a:	3714      	adds	r7, #20
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bc80      	pop	{r7}
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	e000ed00 	.word	0xe000ed00

08003a98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a9c:	4b04      	ldr	r3, [pc, #16]	@ (8003ab0 <__NVIC_GetPriorityGrouping+0x18>)
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	0a1b      	lsrs	r3, r3, #8
 8003aa2:	f003 0307 	and.w	r3, r3, #7
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bc80      	pop	{r7}
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	e000ed00 	.word	0xe000ed00

08003ab4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	4603      	mov	r3, r0
 8003abc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	db0b      	blt.n	8003ade <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ac6:	79fb      	ldrb	r3, [r7, #7]
 8003ac8:	f003 021f 	and.w	r2, r3, #31
 8003acc:	4906      	ldr	r1, [pc, #24]	@ (8003ae8 <__NVIC_EnableIRQ+0x34>)
 8003ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ad2:	095b      	lsrs	r3, r3, #5
 8003ad4:	2001      	movs	r0, #1
 8003ad6:	fa00 f202 	lsl.w	r2, r0, r2
 8003ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003ade:	bf00      	nop
 8003ae0:	370c      	adds	r7, #12
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bc80      	pop	{r7}
 8003ae6:	4770      	bx	lr
 8003ae8:	e000e100 	.word	0xe000e100

08003aec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	4603      	mov	r3, r0
 8003af4:	6039      	str	r1, [r7, #0]
 8003af6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	db0a      	blt.n	8003b16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	b2da      	uxtb	r2, r3
 8003b04:	490c      	ldr	r1, [pc, #48]	@ (8003b38 <__NVIC_SetPriority+0x4c>)
 8003b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b0a:	0112      	lsls	r2, r2, #4
 8003b0c:	b2d2      	uxtb	r2, r2
 8003b0e:	440b      	add	r3, r1
 8003b10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b14:	e00a      	b.n	8003b2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	b2da      	uxtb	r2, r3
 8003b1a:	4908      	ldr	r1, [pc, #32]	@ (8003b3c <__NVIC_SetPriority+0x50>)
 8003b1c:	79fb      	ldrb	r3, [r7, #7]
 8003b1e:	f003 030f 	and.w	r3, r3, #15
 8003b22:	3b04      	subs	r3, #4
 8003b24:	0112      	lsls	r2, r2, #4
 8003b26:	b2d2      	uxtb	r2, r2
 8003b28:	440b      	add	r3, r1
 8003b2a:	761a      	strb	r2, [r3, #24]
}
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bc80      	pop	{r7}
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	e000e100 	.word	0xe000e100
 8003b3c:	e000ed00 	.word	0xe000ed00

08003b40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b089      	sub	sp, #36	@ 0x24
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f003 0307 	and.w	r3, r3, #7
 8003b52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	f1c3 0307 	rsb	r3, r3, #7
 8003b5a:	2b04      	cmp	r3, #4
 8003b5c:	bf28      	it	cs
 8003b5e:	2304      	movcs	r3, #4
 8003b60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	3304      	adds	r3, #4
 8003b66:	2b06      	cmp	r3, #6
 8003b68:	d902      	bls.n	8003b70 <NVIC_EncodePriority+0x30>
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	3b03      	subs	r3, #3
 8003b6e:	e000      	b.n	8003b72 <NVIC_EncodePriority+0x32>
 8003b70:	2300      	movs	r3, #0
 8003b72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b74:	f04f 32ff 	mov.w	r2, #4294967295
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7e:	43da      	mvns	r2, r3
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	401a      	ands	r2, r3
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b88:	f04f 31ff 	mov.w	r1, #4294967295
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b92:	43d9      	mvns	r1, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b98:	4313      	orrs	r3, r2
         );
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3724      	adds	r7, #36	@ 0x24
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bc80      	pop	{r7}
 8003ba2:	4770      	bx	lr

08003ba4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003bb4:	d301      	bcc.n	8003bba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e00f      	b.n	8003bda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003bba:	4a0a      	ldr	r2, [pc, #40]	@ (8003be4 <SysTick_Config+0x40>)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003bc2:	210f      	movs	r1, #15
 8003bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8003bc8:	f7ff ff90 	bl	8003aec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003bcc:	4b05      	ldr	r3, [pc, #20]	@ (8003be4 <SysTick_Config+0x40>)
 8003bce:	2200      	movs	r2, #0
 8003bd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003bd2:	4b04      	ldr	r3, [pc, #16]	@ (8003be4 <SysTick_Config+0x40>)
 8003bd4:	2207      	movs	r2, #7
 8003bd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3708      	adds	r7, #8
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	e000e010 	.word	0xe000e010

08003be8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f7ff ff2d 	bl	8003a50 <__NVIC_SetPriorityGrouping>
}
 8003bf6:	bf00      	nop
 8003bf8:	3708      	adds	r7, #8
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003bfe:	b580      	push	{r7, lr}
 8003c00:	b086      	sub	sp, #24
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	4603      	mov	r3, r0
 8003c06:	60b9      	str	r1, [r7, #8]
 8003c08:	607a      	str	r2, [r7, #4]
 8003c0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c10:	f7ff ff42 	bl	8003a98 <__NVIC_GetPriorityGrouping>
 8003c14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	68b9      	ldr	r1, [r7, #8]
 8003c1a:	6978      	ldr	r0, [r7, #20]
 8003c1c:	f7ff ff90 	bl	8003b40 <NVIC_EncodePriority>
 8003c20:	4602      	mov	r2, r0
 8003c22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c26:	4611      	mov	r1, r2
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f7ff ff5f 	bl	8003aec <__NVIC_SetPriority>
}
 8003c2e:	bf00      	nop
 8003c30:	3718      	adds	r7, #24
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}

08003c36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c36:	b580      	push	{r7, lr}
 8003c38:	b082      	sub	sp, #8
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c44:	4618      	mov	r0, r3
 8003c46:	f7ff ff35 	bl	8003ab4 <__NVIC_EnableIRQ>
}
 8003c4a:	bf00      	nop
 8003c4c:	3708      	adds	r7, #8
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}

08003c52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c52:	b580      	push	{r7, lr}
 8003c54:	b082      	sub	sp, #8
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f7ff ffa2 	bl	8003ba4 <SysTick_Config>
 8003c60:	4603      	mov	r3, r0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3708      	adds	r7, #8
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
	...

08003c6c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b085      	sub	sp, #20
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003c74:	2300      	movs	r3, #0
 8003c76:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d101      	bne.n	8003c82 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e043      	b.n	8003d0a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	461a      	mov	r2, r3
 8003c88:	4b22      	ldr	r3, [pc, #136]	@ (8003d14 <HAL_DMA_Init+0xa8>)
 8003c8a:	4413      	add	r3, r2
 8003c8c:	4a22      	ldr	r2, [pc, #136]	@ (8003d18 <HAL_DMA_Init+0xac>)
 8003c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c92:	091b      	lsrs	r3, r3, #4
 8003c94:	009a      	lsls	r2, r3, #2
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a1f      	ldr	r2, [pc, #124]	@ (8003d1c <HAL_DMA_Init+0xb0>)
 8003c9e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2202      	movs	r2, #2
 8003ca4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003cb6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003cba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003cc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cdc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	69db      	ldr	r3, [r3, #28]
 8003ce2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003ce4:	68fa      	ldr	r2, [r7, #12]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3714      	adds	r7, #20
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bc80      	pop	{r7}
 8003d12:	4770      	bx	lr
 8003d14:	bffdfff8 	.word	0xbffdfff8
 8003d18:	cccccccd 	.word	0xcccccccd
 8003d1c:	40020000 	.word	0x40020000

08003d20 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b086      	sub	sp, #24
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	607a      	str	r2, [r7, #4]
 8003d2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d101      	bne.n	8003d40 <HAL_DMA_Start_IT+0x20>
 8003d3c:	2302      	movs	r3, #2
 8003d3e:	e04b      	b.n	8003dd8 <HAL_DMA_Start_IT+0xb8>
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d13a      	bne.n	8003dca <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2202      	movs	r2, #2
 8003d58:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f022 0201 	bic.w	r2, r2, #1
 8003d70:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	68b9      	ldr	r1, [r7, #8]
 8003d78:	68f8      	ldr	r0, [r7, #12]
 8003d7a:	f000 f9eb 	bl	8004154 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d008      	beq.n	8003d98 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f042 020e 	orr.w	r2, r2, #14
 8003d94:	601a      	str	r2, [r3, #0]
 8003d96:	e00f      	b.n	8003db8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f022 0204 	bic.w	r2, r2, #4
 8003da6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f042 020a 	orr.w	r2, r2, #10
 8003db6:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f042 0201 	orr.w	r2, r2, #1
 8003dc6:	601a      	str	r2, [r3, #0]
 8003dc8:	e005      	b.n	8003dd6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003dd2:	2302      	movs	r3, #2
 8003dd4:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003dd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3718      	adds	r7, #24
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b085      	sub	sp, #20
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003de8:	2300      	movs	r3, #0
 8003dea:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d008      	beq.n	8003e0a <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2204      	movs	r2, #4
 8003dfc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e020      	b.n	8003e4c <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f022 020e 	bic.w	r2, r2, #14
 8003e18:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f022 0201 	bic.w	r2, r2, #1
 8003e28:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e32:	2101      	movs	r1, #1
 8003e34:	fa01 f202 	lsl.w	r2, r1, r2
 8003e38:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3714      	adds	r7, #20
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bc80      	pop	{r7}
 8003e54:	4770      	bx	lr
	...

08003e58 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e60:	2300      	movs	r3, #0
 8003e62:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d005      	beq.n	8003e7c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2204      	movs	r2, #4
 8003e74:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	73fb      	strb	r3, [r7, #15]
 8003e7a:	e051      	b.n	8003f20 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f022 020e 	bic.w	r2, r2, #14
 8003e8a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f022 0201 	bic.w	r2, r2, #1
 8003e9a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a22      	ldr	r2, [pc, #136]	@ (8003f2c <HAL_DMA_Abort_IT+0xd4>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d029      	beq.n	8003efa <HAL_DMA_Abort_IT+0xa2>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a21      	ldr	r2, [pc, #132]	@ (8003f30 <HAL_DMA_Abort_IT+0xd8>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d022      	beq.n	8003ef6 <HAL_DMA_Abort_IT+0x9e>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a1f      	ldr	r2, [pc, #124]	@ (8003f34 <HAL_DMA_Abort_IT+0xdc>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d01a      	beq.n	8003ef0 <HAL_DMA_Abort_IT+0x98>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a1e      	ldr	r2, [pc, #120]	@ (8003f38 <HAL_DMA_Abort_IT+0xe0>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d012      	beq.n	8003eea <HAL_DMA_Abort_IT+0x92>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a1c      	ldr	r2, [pc, #112]	@ (8003f3c <HAL_DMA_Abort_IT+0xe4>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d00a      	beq.n	8003ee4 <HAL_DMA_Abort_IT+0x8c>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a1b      	ldr	r2, [pc, #108]	@ (8003f40 <HAL_DMA_Abort_IT+0xe8>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d102      	bne.n	8003ede <HAL_DMA_Abort_IT+0x86>
 8003ed8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003edc:	e00e      	b.n	8003efc <HAL_DMA_Abort_IT+0xa4>
 8003ede:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003ee2:	e00b      	b.n	8003efc <HAL_DMA_Abort_IT+0xa4>
 8003ee4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003ee8:	e008      	b.n	8003efc <HAL_DMA_Abort_IT+0xa4>
 8003eea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003eee:	e005      	b.n	8003efc <HAL_DMA_Abort_IT+0xa4>
 8003ef0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003ef4:	e002      	b.n	8003efc <HAL_DMA_Abort_IT+0xa4>
 8003ef6:	2310      	movs	r3, #16
 8003ef8:	e000      	b.n	8003efc <HAL_DMA_Abort_IT+0xa4>
 8003efa:	2301      	movs	r3, #1
 8003efc:	4a11      	ldr	r2, [pc, #68]	@ (8003f44 <HAL_DMA_Abort_IT+0xec>)
 8003efe:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d003      	beq.n	8003f20 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	4798      	blx	r3
    } 
  }
  return status;
 8003f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3710      	adds	r7, #16
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	40020008 	.word	0x40020008
 8003f30:	4002001c 	.word	0x4002001c
 8003f34:	40020030 	.word	0x40020030
 8003f38:	40020044 	.word	0x40020044
 8003f3c:	40020058 	.word	0x40020058
 8003f40:	4002006c 	.word	0x4002006c
 8003f44:	40020000 	.word	0x40020000

08003f48 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f64:	2204      	movs	r2, #4
 8003f66:	409a      	lsls	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d04f      	beq.n	8004010 <HAL_DMA_IRQHandler+0xc8>
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	f003 0304 	and.w	r3, r3, #4
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d04a      	beq.n	8004010 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0320 	and.w	r3, r3, #32
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d107      	bne.n	8003f98 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f022 0204 	bic.w	r2, r2, #4
 8003f96:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a66      	ldr	r2, [pc, #408]	@ (8004138 <HAL_DMA_IRQHandler+0x1f0>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d029      	beq.n	8003ff6 <HAL_DMA_IRQHandler+0xae>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a65      	ldr	r2, [pc, #404]	@ (800413c <HAL_DMA_IRQHandler+0x1f4>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d022      	beq.n	8003ff2 <HAL_DMA_IRQHandler+0xaa>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a63      	ldr	r2, [pc, #396]	@ (8004140 <HAL_DMA_IRQHandler+0x1f8>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d01a      	beq.n	8003fec <HAL_DMA_IRQHandler+0xa4>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a62      	ldr	r2, [pc, #392]	@ (8004144 <HAL_DMA_IRQHandler+0x1fc>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d012      	beq.n	8003fe6 <HAL_DMA_IRQHandler+0x9e>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a60      	ldr	r2, [pc, #384]	@ (8004148 <HAL_DMA_IRQHandler+0x200>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d00a      	beq.n	8003fe0 <HAL_DMA_IRQHandler+0x98>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a5f      	ldr	r2, [pc, #380]	@ (800414c <HAL_DMA_IRQHandler+0x204>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d102      	bne.n	8003fda <HAL_DMA_IRQHandler+0x92>
 8003fd4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003fd8:	e00e      	b.n	8003ff8 <HAL_DMA_IRQHandler+0xb0>
 8003fda:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003fde:	e00b      	b.n	8003ff8 <HAL_DMA_IRQHandler+0xb0>
 8003fe0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003fe4:	e008      	b.n	8003ff8 <HAL_DMA_IRQHandler+0xb0>
 8003fe6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003fea:	e005      	b.n	8003ff8 <HAL_DMA_IRQHandler+0xb0>
 8003fec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003ff0:	e002      	b.n	8003ff8 <HAL_DMA_IRQHandler+0xb0>
 8003ff2:	2340      	movs	r3, #64	@ 0x40
 8003ff4:	e000      	b.n	8003ff8 <HAL_DMA_IRQHandler+0xb0>
 8003ff6:	2304      	movs	r3, #4
 8003ff8:	4a55      	ldr	r2, [pc, #340]	@ (8004150 <HAL_DMA_IRQHandler+0x208>)
 8003ffa:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004000:	2b00      	cmp	r3, #0
 8004002:	f000 8094 	beq.w	800412e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800400e:	e08e      	b.n	800412e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004014:	2202      	movs	r2, #2
 8004016:	409a      	lsls	r2, r3
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	4013      	ands	r3, r2
 800401c:	2b00      	cmp	r3, #0
 800401e:	d056      	beq.n	80040ce <HAL_DMA_IRQHandler+0x186>
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	f003 0302 	and.w	r3, r3, #2
 8004026:	2b00      	cmp	r3, #0
 8004028:	d051      	beq.n	80040ce <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0320 	and.w	r3, r3, #32
 8004034:	2b00      	cmp	r3, #0
 8004036:	d10b      	bne.n	8004050 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f022 020a 	bic.w	r2, r2, #10
 8004046:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a38      	ldr	r2, [pc, #224]	@ (8004138 <HAL_DMA_IRQHandler+0x1f0>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d029      	beq.n	80040ae <HAL_DMA_IRQHandler+0x166>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a37      	ldr	r2, [pc, #220]	@ (800413c <HAL_DMA_IRQHandler+0x1f4>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d022      	beq.n	80040aa <HAL_DMA_IRQHandler+0x162>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a35      	ldr	r2, [pc, #212]	@ (8004140 <HAL_DMA_IRQHandler+0x1f8>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d01a      	beq.n	80040a4 <HAL_DMA_IRQHandler+0x15c>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a34      	ldr	r2, [pc, #208]	@ (8004144 <HAL_DMA_IRQHandler+0x1fc>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d012      	beq.n	800409e <HAL_DMA_IRQHandler+0x156>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a32      	ldr	r2, [pc, #200]	@ (8004148 <HAL_DMA_IRQHandler+0x200>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d00a      	beq.n	8004098 <HAL_DMA_IRQHandler+0x150>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a31      	ldr	r2, [pc, #196]	@ (800414c <HAL_DMA_IRQHandler+0x204>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d102      	bne.n	8004092 <HAL_DMA_IRQHandler+0x14a>
 800408c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004090:	e00e      	b.n	80040b0 <HAL_DMA_IRQHandler+0x168>
 8004092:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004096:	e00b      	b.n	80040b0 <HAL_DMA_IRQHandler+0x168>
 8004098:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800409c:	e008      	b.n	80040b0 <HAL_DMA_IRQHandler+0x168>
 800409e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80040a2:	e005      	b.n	80040b0 <HAL_DMA_IRQHandler+0x168>
 80040a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80040a8:	e002      	b.n	80040b0 <HAL_DMA_IRQHandler+0x168>
 80040aa:	2320      	movs	r3, #32
 80040ac:	e000      	b.n	80040b0 <HAL_DMA_IRQHandler+0x168>
 80040ae:	2302      	movs	r3, #2
 80040b0:	4a27      	ldr	r2, [pc, #156]	@ (8004150 <HAL_DMA_IRQHandler+0x208>)
 80040b2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d034      	beq.n	800412e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80040cc:	e02f      	b.n	800412e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040d2:	2208      	movs	r2, #8
 80040d4:	409a      	lsls	r2, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	4013      	ands	r3, r2
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d028      	beq.n	8004130 <HAL_DMA_IRQHandler+0x1e8>
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	f003 0308 	and.w	r3, r3, #8
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d023      	beq.n	8004130 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f022 020e 	bic.w	r2, r2, #14
 80040f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004100:	2101      	movs	r1, #1
 8004102:	fa01 f202 	lsl.w	r2, r1, r2
 8004106:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2201      	movs	r2, #1
 8004112:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004122:	2b00      	cmp	r3, #0
 8004124:	d004      	beq.n	8004130 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	4798      	blx	r3
    }
  }
  return;
 800412e:	bf00      	nop
 8004130:	bf00      	nop
}
 8004132:	3710      	adds	r7, #16
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}
 8004138:	40020008 	.word	0x40020008
 800413c:	4002001c 	.word	0x4002001c
 8004140:	40020030 	.word	0x40020030
 8004144:	40020044 	.word	0x40020044
 8004148:	40020058 	.word	0x40020058
 800414c:	4002006c 	.word	0x4002006c
 8004150:	40020000 	.word	0x40020000

08004154 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004154:	b480      	push	{r7}
 8004156:	b085      	sub	sp, #20
 8004158:	af00      	add	r7, sp, #0
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	607a      	str	r2, [r7, #4]
 8004160:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800416a:	2101      	movs	r1, #1
 800416c:	fa01 f202 	lsl.w	r2, r1, r2
 8004170:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	683a      	ldr	r2, [r7, #0]
 8004178:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	2b10      	cmp	r3, #16
 8004180:	d108      	bne.n	8004194 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68ba      	ldr	r2, [r7, #8]
 8004190:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004192:	e007      	b.n	80041a4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68ba      	ldr	r2, [r7, #8]
 800419a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	60da      	str	r2, [r3, #12]
}
 80041a4:	bf00      	nop
 80041a6:	3714      	adds	r7, #20
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bc80      	pop	{r7}
 80041ac:	4770      	bx	lr
	...

080041b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b08b      	sub	sp, #44	@ 0x2c
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80041ba:	2300      	movs	r3, #0
 80041bc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80041be:	2300      	movs	r3, #0
 80041c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80041c2:	e169      	b.n	8004498 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80041c4:	2201      	movs	r2, #1
 80041c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c8:	fa02 f303 	lsl.w	r3, r2, r3
 80041cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	69fa      	ldr	r2, [r7, #28]
 80041d4:	4013      	ands	r3, r2
 80041d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80041d8:	69ba      	ldr	r2, [r7, #24]
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	429a      	cmp	r2, r3
 80041de:	f040 8158 	bne.w	8004492 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	4a9a      	ldr	r2, [pc, #616]	@ (8004450 <HAL_GPIO_Init+0x2a0>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d05e      	beq.n	80042aa <HAL_GPIO_Init+0xfa>
 80041ec:	4a98      	ldr	r2, [pc, #608]	@ (8004450 <HAL_GPIO_Init+0x2a0>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d875      	bhi.n	80042de <HAL_GPIO_Init+0x12e>
 80041f2:	4a98      	ldr	r2, [pc, #608]	@ (8004454 <HAL_GPIO_Init+0x2a4>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d058      	beq.n	80042aa <HAL_GPIO_Init+0xfa>
 80041f8:	4a96      	ldr	r2, [pc, #600]	@ (8004454 <HAL_GPIO_Init+0x2a4>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d86f      	bhi.n	80042de <HAL_GPIO_Init+0x12e>
 80041fe:	4a96      	ldr	r2, [pc, #600]	@ (8004458 <HAL_GPIO_Init+0x2a8>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d052      	beq.n	80042aa <HAL_GPIO_Init+0xfa>
 8004204:	4a94      	ldr	r2, [pc, #592]	@ (8004458 <HAL_GPIO_Init+0x2a8>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d869      	bhi.n	80042de <HAL_GPIO_Init+0x12e>
 800420a:	4a94      	ldr	r2, [pc, #592]	@ (800445c <HAL_GPIO_Init+0x2ac>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d04c      	beq.n	80042aa <HAL_GPIO_Init+0xfa>
 8004210:	4a92      	ldr	r2, [pc, #584]	@ (800445c <HAL_GPIO_Init+0x2ac>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d863      	bhi.n	80042de <HAL_GPIO_Init+0x12e>
 8004216:	4a92      	ldr	r2, [pc, #584]	@ (8004460 <HAL_GPIO_Init+0x2b0>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d046      	beq.n	80042aa <HAL_GPIO_Init+0xfa>
 800421c:	4a90      	ldr	r2, [pc, #576]	@ (8004460 <HAL_GPIO_Init+0x2b0>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d85d      	bhi.n	80042de <HAL_GPIO_Init+0x12e>
 8004222:	2b12      	cmp	r3, #18
 8004224:	d82a      	bhi.n	800427c <HAL_GPIO_Init+0xcc>
 8004226:	2b12      	cmp	r3, #18
 8004228:	d859      	bhi.n	80042de <HAL_GPIO_Init+0x12e>
 800422a:	a201      	add	r2, pc, #4	@ (adr r2, 8004230 <HAL_GPIO_Init+0x80>)
 800422c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004230:	080042ab 	.word	0x080042ab
 8004234:	08004285 	.word	0x08004285
 8004238:	08004297 	.word	0x08004297
 800423c:	080042d9 	.word	0x080042d9
 8004240:	080042df 	.word	0x080042df
 8004244:	080042df 	.word	0x080042df
 8004248:	080042df 	.word	0x080042df
 800424c:	080042df 	.word	0x080042df
 8004250:	080042df 	.word	0x080042df
 8004254:	080042df 	.word	0x080042df
 8004258:	080042df 	.word	0x080042df
 800425c:	080042df 	.word	0x080042df
 8004260:	080042df 	.word	0x080042df
 8004264:	080042df 	.word	0x080042df
 8004268:	080042df 	.word	0x080042df
 800426c:	080042df 	.word	0x080042df
 8004270:	080042df 	.word	0x080042df
 8004274:	0800428d 	.word	0x0800428d
 8004278:	080042a1 	.word	0x080042a1
 800427c:	4a79      	ldr	r2, [pc, #484]	@ (8004464 <HAL_GPIO_Init+0x2b4>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d013      	beq.n	80042aa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004282:	e02c      	b.n	80042de <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	623b      	str	r3, [r7, #32]
          break;
 800428a:	e029      	b.n	80042e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	3304      	adds	r3, #4
 8004292:	623b      	str	r3, [r7, #32]
          break;
 8004294:	e024      	b.n	80042e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	3308      	adds	r3, #8
 800429c:	623b      	str	r3, [r7, #32]
          break;
 800429e:	e01f      	b.n	80042e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	330c      	adds	r3, #12
 80042a6:	623b      	str	r3, [r7, #32]
          break;
 80042a8:	e01a      	b.n	80042e0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d102      	bne.n	80042b8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80042b2:	2304      	movs	r3, #4
 80042b4:	623b      	str	r3, [r7, #32]
          break;
 80042b6:	e013      	b.n	80042e0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d105      	bne.n	80042cc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80042c0:	2308      	movs	r3, #8
 80042c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	69fa      	ldr	r2, [r7, #28]
 80042c8:	611a      	str	r2, [r3, #16]
          break;
 80042ca:	e009      	b.n	80042e0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80042cc:	2308      	movs	r3, #8
 80042ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	69fa      	ldr	r2, [r7, #28]
 80042d4:	615a      	str	r2, [r3, #20]
          break;
 80042d6:	e003      	b.n	80042e0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80042d8:	2300      	movs	r3, #0
 80042da:	623b      	str	r3, [r7, #32]
          break;
 80042dc:	e000      	b.n	80042e0 <HAL_GPIO_Init+0x130>
          break;
 80042de:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	2bff      	cmp	r3, #255	@ 0xff
 80042e4:	d801      	bhi.n	80042ea <HAL_GPIO_Init+0x13a>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	e001      	b.n	80042ee <HAL_GPIO_Init+0x13e>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	3304      	adds	r3, #4
 80042ee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	2bff      	cmp	r3, #255	@ 0xff
 80042f4:	d802      	bhi.n	80042fc <HAL_GPIO_Init+0x14c>
 80042f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	e002      	b.n	8004302 <HAL_GPIO_Init+0x152>
 80042fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042fe:	3b08      	subs	r3, #8
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	210f      	movs	r1, #15
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	fa01 f303 	lsl.w	r3, r1, r3
 8004310:	43db      	mvns	r3, r3
 8004312:	401a      	ands	r2, r3
 8004314:	6a39      	ldr	r1, [r7, #32]
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	fa01 f303 	lsl.w	r3, r1, r3
 800431c:	431a      	orrs	r2, r3
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800432a:	2b00      	cmp	r3, #0
 800432c:	f000 80b1 	beq.w	8004492 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004330:	4b4d      	ldr	r3, [pc, #308]	@ (8004468 <HAL_GPIO_Init+0x2b8>)
 8004332:	699b      	ldr	r3, [r3, #24]
 8004334:	4a4c      	ldr	r2, [pc, #304]	@ (8004468 <HAL_GPIO_Init+0x2b8>)
 8004336:	f043 0301 	orr.w	r3, r3, #1
 800433a:	6193      	str	r3, [r2, #24]
 800433c:	4b4a      	ldr	r3, [pc, #296]	@ (8004468 <HAL_GPIO_Init+0x2b8>)
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	f003 0301 	and.w	r3, r3, #1
 8004344:	60bb      	str	r3, [r7, #8]
 8004346:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004348:	4a48      	ldr	r2, [pc, #288]	@ (800446c <HAL_GPIO_Init+0x2bc>)
 800434a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800434c:	089b      	lsrs	r3, r3, #2
 800434e:	3302      	adds	r3, #2
 8004350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004354:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004358:	f003 0303 	and.w	r3, r3, #3
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	220f      	movs	r2, #15
 8004360:	fa02 f303 	lsl.w	r3, r2, r3
 8004364:	43db      	mvns	r3, r3
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	4013      	ands	r3, r2
 800436a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a40      	ldr	r2, [pc, #256]	@ (8004470 <HAL_GPIO_Init+0x2c0>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d013      	beq.n	800439c <HAL_GPIO_Init+0x1ec>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4a3f      	ldr	r2, [pc, #252]	@ (8004474 <HAL_GPIO_Init+0x2c4>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d00d      	beq.n	8004398 <HAL_GPIO_Init+0x1e8>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a3e      	ldr	r2, [pc, #248]	@ (8004478 <HAL_GPIO_Init+0x2c8>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d007      	beq.n	8004394 <HAL_GPIO_Init+0x1e4>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4a3d      	ldr	r2, [pc, #244]	@ (800447c <HAL_GPIO_Init+0x2cc>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d101      	bne.n	8004390 <HAL_GPIO_Init+0x1e0>
 800438c:	2303      	movs	r3, #3
 800438e:	e006      	b.n	800439e <HAL_GPIO_Init+0x1ee>
 8004390:	2304      	movs	r3, #4
 8004392:	e004      	b.n	800439e <HAL_GPIO_Init+0x1ee>
 8004394:	2302      	movs	r3, #2
 8004396:	e002      	b.n	800439e <HAL_GPIO_Init+0x1ee>
 8004398:	2301      	movs	r3, #1
 800439a:	e000      	b.n	800439e <HAL_GPIO_Init+0x1ee>
 800439c:	2300      	movs	r3, #0
 800439e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043a0:	f002 0203 	and.w	r2, r2, #3
 80043a4:	0092      	lsls	r2, r2, #2
 80043a6:	4093      	lsls	r3, r2
 80043a8:	68fa      	ldr	r2, [r7, #12]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80043ae:	492f      	ldr	r1, [pc, #188]	@ (800446c <HAL_GPIO_Init+0x2bc>)
 80043b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b2:	089b      	lsrs	r3, r3, #2
 80043b4:	3302      	adds	r3, #2
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d006      	beq.n	80043d6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80043c8:	4b2d      	ldr	r3, [pc, #180]	@ (8004480 <HAL_GPIO_Init+0x2d0>)
 80043ca:	689a      	ldr	r2, [r3, #8]
 80043cc:	492c      	ldr	r1, [pc, #176]	@ (8004480 <HAL_GPIO_Init+0x2d0>)
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	608b      	str	r3, [r1, #8]
 80043d4:	e006      	b.n	80043e4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80043d6:	4b2a      	ldr	r3, [pc, #168]	@ (8004480 <HAL_GPIO_Init+0x2d0>)
 80043d8:	689a      	ldr	r2, [r3, #8]
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	43db      	mvns	r3, r3
 80043de:	4928      	ldr	r1, [pc, #160]	@ (8004480 <HAL_GPIO_Init+0x2d0>)
 80043e0:	4013      	ands	r3, r2
 80043e2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d006      	beq.n	80043fe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80043f0:	4b23      	ldr	r3, [pc, #140]	@ (8004480 <HAL_GPIO_Init+0x2d0>)
 80043f2:	68da      	ldr	r2, [r3, #12]
 80043f4:	4922      	ldr	r1, [pc, #136]	@ (8004480 <HAL_GPIO_Init+0x2d0>)
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	60cb      	str	r3, [r1, #12]
 80043fc:	e006      	b.n	800440c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80043fe:	4b20      	ldr	r3, [pc, #128]	@ (8004480 <HAL_GPIO_Init+0x2d0>)
 8004400:	68da      	ldr	r2, [r3, #12]
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	43db      	mvns	r3, r3
 8004406:	491e      	ldr	r1, [pc, #120]	@ (8004480 <HAL_GPIO_Init+0x2d0>)
 8004408:	4013      	ands	r3, r2
 800440a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d006      	beq.n	8004426 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004418:	4b19      	ldr	r3, [pc, #100]	@ (8004480 <HAL_GPIO_Init+0x2d0>)
 800441a:	685a      	ldr	r2, [r3, #4]
 800441c:	4918      	ldr	r1, [pc, #96]	@ (8004480 <HAL_GPIO_Init+0x2d0>)
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	4313      	orrs	r3, r2
 8004422:	604b      	str	r3, [r1, #4]
 8004424:	e006      	b.n	8004434 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004426:	4b16      	ldr	r3, [pc, #88]	@ (8004480 <HAL_GPIO_Init+0x2d0>)
 8004428:	685a      	ldr	r2, [r3, #4]
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	43db      	mvns	r3, r3
 800442e:	4914      	ldr	r1, [pc, #80]	@ (8004480 <HAL_GPIO_Init+0x2d0>)
 8004430:	4013      	ands	r3, r2
 8004432:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d021      	beq.n	8004484 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004440:	4b0f      	ldr	r3, [pc, #60]	@ (8004480 <HAL_GPIO_Init+0x2d0>)
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	490e      	ldr	r1, [pc, #56]	@ (8004480 <HAL_GPIO_Init+0x2d0>)
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	4313      	orrs	r3, r2
 800444a:	600b      	str	r3, [r1, #0]
 800444c:	e021      	b.n	8004492 <HAL_GPIO_Init+0x2e2>
 800444e:	bf00      	nop
 8004450:	10320000 	.word	0x10320000
 8004454:	10310000 	.word	0x10310000
 8004458:	10220000 	.word	0x10220000
 800445c:	10210000 	.word	0x10210000
 8004460:	10120000 	.word	0x10120000
 8004464:	10110000 	.word	0x10110000
 8004468:	40021000 	.word	0x40021000
 800446c:	40010000 	.word	0x40010000
 8004470:	40010800 	.word	0x40010800
 8004474:	40010c00 	.word	0x40010c00
 8004478:	40011000 	.word	0x40011000
 800447c:	40011400 	.word	0x40011400
 8004480:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004484:	4b0b      	ldr	r3, [pc, #44]	@ (80044b4 <HAL_GPIO_Init+0x304>)
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	43db      	mvns	r3, r3
 800448c:	4909      	ldr	r1, [pc, #36]	@ (80044b4 <HAL_GPIO_Init+0x304>)
 800448e:	4013      	ands	r3, r2
 8004490:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004494:	3301      	adds	r3, #1
 8004496:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800449e:	fa22 f303 	lsr.w	r3, r2, r3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	f47f ae8e 	bne.w	80041c4 <HAL_GPIO_Init+0x14>
  }
}
 80044a8:	bf00      	nop
 80044aa:	bf00      	nop
 80044ac:	372c      	adds	r7, #44	@ 0x2c
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bc80      	pop	{r7}
 80044b2:	4770      	bx	lr
 80044b4:	40010400 	.word	0x40010400

080044b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b085      	sub	sp, #20
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	460b      	mov	r3, r1
 80044c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	689a      	ldr	r2, [r3, #8]
 80044c8:	887b      	ldrh	r3, [r7, #2]
 80044ca:	4013      	ands	r3, r2
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d002      	beq.n	80044d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80044d0:	2301      	movs	r3, #1
 80044d2:	73fb      	strb	r3, [r7, #15]
 80044d4:	e001      	b.n	80044da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80044d6:	2300      	movs	r3, #0
 80044d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80044da:	7bfb      	ldrb	r3, [r7, #15]
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3714      	adds	r7, #20
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bc80      	pop	{r7}
 80044e4:	4770      	bx	lr
	...

080044e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d101      	bne.n	80044fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e12b      	b.n	8004752 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004500:	b2db      	uxtb	r3, r3
 8004502:	2b00      	cmp	r3, #0
 8004504:	d106      	bne.n	8004514 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f7fe fa3a 	bl	8002988 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2224      	movs	r2, #36	@ 0x24
 8004518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f022 0201 	bic.w	r2, r2, #1
 800452a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800453a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800454a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800454c:	f001 fbfc 	bl	8005d48 <HAL_RCC_GetPCLK1Freq>
 8004550:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	4a81      	ldr	r2, [pc, #516]	@ (800475c <HAL_I2C_Init+0x274>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d807      	bhi.n	800456c <HAL_I2C_Init+0x84>
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	4a80      	ldr	r2, [pc, #512]	@ (8004760 <HAL_I2C_Init+0x278>)
 8004560:	4293      	cmp	r3, r2
 8004562:	bf94      	ite	ls
 8004564:	2301      	movls	r3, #1
 8004566:	2300      	movhi	r3, #0
 8004568:	b2db      	uxtb	r3, r3
 800456a:	e006      	b.n	800457a <HAL_I2C_Init+0x92>
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	4a7d      	ldr	r2, [pc, #500]	@ (8004764 <HAL_I2C_Init+0x27c>)
 8004570:	4293      	cmp	r3, r2
 8004572:	bf94      	ite	ls
 8004574:	2301      	movls	r3, #1
 8004576:	2300      	movhi	r3, #0
 8004578:	b2db      	uxtb	r3, r3
 800457a:	2b00      	cmp	r3, #0
 800457c:	d001      	beq.n	8004582 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e0e7      	b.n	8004752 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	4a78      	ldr	r2, [pc, #480]	@ (8004768 <HAL_I2C_Init+0x280>)
 8004586:	fba2 2303 	umull	r2, r3, r2, r3
 800458a:	0c9b      	lsrs	r3, r3, #18
 800458c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	68ba      	ldr	r2, [r7, #8]
 800459e:	430a      	orrs	r2, r1
 80045a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	6a1b      	ldr	r3, [r3, #32]
 80045a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	4a6a      	ldr	r2, [pc, #424]	@ (800475c <HAL_I2C_Init+0x274>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d802      	bhi.n	80045bc <HAL_I2C_Init+0xd4>
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	3301      	adds	r3, #1
 80045ba:	e009      	b.n	80045d0 <HAL_I2C_Init+0xe8>
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80045c2:	fb02 f303 	mul.w	r3, r2, r3
 80045c6:	4a69      	ldr	r2, [pc, #420]	@ (800476c <HAL_I2C_Init+0x284>)
 80045c8:	fba2 2303 	umull	r2, r3, r2, r3
 80045cc:	099b      	lsrs	r3, r3, #6
 80045ce:	3301      	adds	r3, #1
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	6812      	ldr	r2, [r2, #0]
 80045d4:	430b      	orrs	r3, r1
 80045d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	69db      	ldr	r3, [r3, #28]
 80045de:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80045e2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	495c      	ldr	r1, [pc, #368]	@ (800475c <HAL_I2C_Init+0x274>)
 80045ec:	428b      	cmp	r3, r1
 80045ee:	d819      	bhi.n	8004624 <HAL_I2C_Init+0x13c>
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	1e59      	subs	r1, r3, #1
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	005b      	lsls	r3, r3, #1
 80045fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80045fe:	1c59      	adds	r1, r3, #1
 8004600:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004604:	400b      	ands	r3, r1
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00a      	beq.n	8004620 <HAL_I2C_Init+0x138>
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	1e59      	subs	r1, r3, #1
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	005b      	lsls	r3, r3, #1
 8004614:	fbb1 f3f3 	udiv	r3, r1, r3
 8004618:	3301      	adds	r3, #1
 800461a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800461e:	e051      	b.n	80046c4 <HAL_I2C_Init+0x1dc>
 8004620:	2304      	movs	r3, #4
 8004622:	e04f      	b.n	80046c4 <HAL_I2C_Init+0x1dc>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d111      	bne.n	8004650 <HAL_I2C_Init+0x168>
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	1e58      	subs	r0, r3, #1
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6859      	ldr	r1, [r3, #4]
 8004634:	460b      	mov	r3, r1
 8004636:	005b      	lsls	r3, r3, #1
 8004638:	440b      	add	r3, r1
 800463a:	fbb0 f3f3 	udiv	r3, r0, r3
 800463e:	3301      	adds	r3, #1
 8004640:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004644:	2b00      	cmp	r3, #0
 8004646:	bf0c      	ite	eq
 8004648:	2301      	moveq	r3, #1
 800464a:	2300      	movne	r3, #0
 800464c:	b2db      	uxtb	r3, r3
 800464e:	e012      	b.n	8004676 <HAL_I2C_Init+0x18e>
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	1e58      	subs	r0, r3, #1
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6859      	ldr	r1, [r3, #4]
 8004658:	460b      	mov	r3, r1
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	440b      	add	r3, r1
 800465e:	0099      	lsls	r1, r3, #2
 8004660:	440b      	add	r3, r1
 8004662:	fbb0 f3f3 	udiv	r3, r0, r3
 8004666:	3301      	adds	r3, #1
 8004668:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800466c:	2b00      	cmp	r3, #0
 800466e:	bf0c      	ite	eq
 8004670:	2301      	moveq	r3, #1
 8004672:	2300      	movne	r3, #0
 8004674:	b2db      	uxtb	r3, r3
 8004676:	2b00      	cmp	r3, #0
 8004678:	d001      	beq.n	800467e <HAL_I2C_Init+0x196>
 800467a:	2301      	movs	r3, #1
 800467c:	e022      	b.n	80046c4 <HAL_I2C_Init+0x1dc>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d10e      	bne.n	80046a4 <HAL_I2C_Init+0x1bc>
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	1e58      	subs	r0, r3, #1
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6859      	ldr	r1, [r3, #4]
 800468e:	460b      	mov	r3, r1
 8004690:	005b      	lsls	r3, r3, #1
 8004692:	440b      	add	r3, r1
 8004694:	fbb0 f3f3 	udiv	r3, r0, r3
 8004698:	3301      	adds	r3, #1
 800469a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800469e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046a2:	e00f      	b.n	80046c4 <HAL_I2C_Init+0x1dc>
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	1e58      	subs	r0, r3, #1
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6859      	ldr	r1, [r3, #4]
 80046ac:	460b      	mov	r3, r1
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	440b      	add	r3, r1
 80046b2:	0099      	lsls	r1, r3, #2
 80046b4:	440b      	add	r3, r1
 80046b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80046ba:	3301      	adds	r3, #1
 80046bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80046c4:	6879      	ldr	r1, [r7, #4]
 80046c6:	6809      	ldr	r1, [r1, #0]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	69da      	ldr	r2, [r3, #28]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a1b      	ldr	r3, [r3, #32]
 80046de:	431a      	orrs	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	430a      	orrs	r2, r1
 80046e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80046f2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	6911      	ldr	r1, [r2, #16]
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	68d2      	ldr	r2, [r2, #12]
 80046fe:	4311      	orrs	r1, r2
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	6812      	ldr	r2, [r2, #0]
 8004704:	430b      	orrs	r3, r1
 8004706:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	695a      	ldr	r2, [r3, #20]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	699b      	ldr	r3, [r3, #24]
 800471a:	431a      	orrs	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	430a      	orrs	r2, r1
 8004722:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f042 0201 	orr.w	r2, r2, #1
 8004732:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2220      	movs	r2, #32
 800473e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3710      	adds	r7, #16
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	000186a0 	.word	0x000186a0
 8004760:	001e847f 	.word	0x001e847f
 8004764:	003d08ff 	.word	0x003d08ff
 8004768:	431bde83 	.word	0x431bde83
 800476c:	10624dd3 	.word	0x10624dd3

08004770 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b088      	sub	sp, #32
 8004774:	af02      	add	r7, sp, #8
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	4608      	mov	r0, r1
 800477a:	4611      	mov	r1, r2
 800477c:	461a      	mov	r2, r3
 800477e:	4603      	mov	r3, r0
 8004780:	817b      	strh	r3, [r7, #10]
 8004782:	460b      	mov	r3, r1
 8004784:	813b      	strh	r3, [r7, #8]
 8004786:	4613      	mov	r3, r2
 8004788:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800478a:	f7ff f933 	bl	80039f4 <HAL_GetTick>
 800478e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004796:	b2db      	uxtb	r3, r3
 8004798:	2b20      	cmp	r3, #32
 800479a:	f040 80d9 	bne.w	8004950 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	9300      	str	r3, [sp, #0]
 80047a2:	2319      	movs	r3, #25
 80047a4:	2201      	movs	r2, #1
 80047a6:	496d      	ldr	r1, [pc, #436]	@ (800495c <HAL_I2C_Mem_Write+0x1ec>)
 80047a8:	68f8      	ldr	r0, [r7, #12]
 80047aa:	f000 fccd 	bl	8005148 <I2C_WaitOnFlagUntilTimeout>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d001      	beq.n	80047b8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80047b4:	2302      	movs	r3, #2
 80047b6:	e0cc      	b.n	8004952 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d101      	bne.n	80047c6 <HAL_I2C_Mem_Write+0x56>
 80047c2:	2302      	movs	r3, #2
 80047c4:	e0c5      	b.n	8004952 <HAL_I2C_Mem_Write+0x1e2>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2201      	movs	r2, #1
 80047ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0301 	and.w	r3, r3, #1
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d007      	beq.n	80047ec <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f042 0201 	orr.w	r2, r2, #1
 80047ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80047fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2221      	movs	r2, #33	@ 0x21
 8004800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2240      	movs	r2, #64	@ 0x40
 8004808:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2200      	movs	r2, #0
 8004810:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6a3a      	ldr	r2, [r7, #32]
 8004816:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800481c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004822:	b29a      	uxth	r2, r3
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	4a4d      	ldr	r2, [pc, #308]	@ (8004960 <HAL_I2C_Mem_Write+0x1f0>)
 800482c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800482e:	88f8      	ldrh	r0, [r7, #6]
 8004830:	893a      	ldrh	r2, [r7, #8]
 8004832:	8979      	ldrh	r1, [r7, #10]
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	9301      	str	r3, [sp, #4]
 8004838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800483a:	9300      	str	r3, [sp, #0]
 800483c:	4603      	mov	r3, r0
 800483e:	68f8      	ldr	r0, [r7, #12]
 8004840:	f000 fb04 	bl	8004e4c <I2C_RequestMemoryWrite>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d052      	beq.n	80048f0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e081      	b.n	8004952 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004852:	68f8      	ldr	r0, [r7, #12]
 8004854:	f000 fd92 	bl	800537c <I2C_WaitOnTXEFlagUntilTimeout>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d00d      	beq.n	800487a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004862:	2b04      	cmp	r3, #4
 8004864:	d107      	bne.n	8004876 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004874:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e06b      	b.n	8004952 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800487e:	781a      	ldrb	r2, [r3, #0]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800488a:	1c5a      	adds	r2, r3, #1
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004894:	3b01      	subs	r3, #1
 8004896:	b29a      	uxth	r2, r3
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	3b01      	subs	r3, #1
 80048a4:	b29a      	uxth	r2, r3
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	695b      	ldr	r3, [r3, #20]
 80048b0:	f003 0304 	and.w	r3, r3, #4
 80048b4:	2b04      	cmp	r3, #4
 80048b6:	d11b      	bne.n	80048f0 <HAL_I2C_Mem_Write+0x180>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d017      	beq.n	80048f0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c4:	781a      	ldrb	r2, [r3, #0]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048d0:	1c5a      	adds	r2, r3, #1
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048da:	3b01      	subs	r3, #1
 80048dc:	b29a      	uxth	r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	3b01      	subs	r3, #1
 80048ea:	b29a      	uxth	r2, r3
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d1aa      	bne.n	800484e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048f8:	697a      	ldr	r2, [r7, #20]
 80048fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80048fc:	68f8      	ldr	r0, [r7, #12]
 80048fe:	f000 fd85 	bl	800540c <I2C_WaitOnBTFFlagUntilTimeout>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d00d      	beq.n	8004924 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800490c:	2b04      	cmp	r3, #4
 800490e:	d107      	bne.n	8004920 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800491e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	e016      	b.n	8004952 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004932:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2220      	movs	r2, #32
 8004938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2200      	movs	r2, #0
 8004948:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800494c:	2300      	movs	r3, #0
 800494e:	e000      	b.n	8004952 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004950:	2302      	movs	r3, #2
  }
}
 8004952:	4618      	mov	r0, r3
 8004954:	3718      	adds	r7, #24
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	00100002 	.word	0x00100002
 8004960:	ffff0000 	.word	0xffff0000

08004964 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b08c      	sub	sp, #48	@ 0x30
 8004968:	af02      	add	r7, sp, #8
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	4608      	mov	r0, r1
 800496e:	4611      	mov	r1, r2
 8004970:	461a      	mov	r2, r3
 8004972:	4603      	mov	r3, r0
 8004974:	817b      	strh	r3, [r7, #10]
 8004976:	460b      	mov	r3, r1
 8004978:	813b      	strh	r3, [r7, #8]
 800497a:	4613      	mov	r3, r2
 800497c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800497e:	2300      	movs	r3, #0
 8004980:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004982:	f7ff f837 	bl	80039f4 <HAL_GetTick>
 8004986:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800498e:	b2db      	uxtb	r3, r3
 8004990:	2b20      	cmp	r3, #32
 8004992:	f040 8250 	bne.w	8004e36 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004998:	9300      	str	r3, [sp, #0]
 800499a:	2319      	movs	r3, #25
 800499c:	2201      	movs	r2, #1
 800499e:	4982      	ldr	r1, [pc, #520]	@ (8004ba8 <HAL_I2C_Mem_Read+0x244>)
 80049a0:	68f8      	ldr	r0, [r7, #12]
 80049a2:	f000 fbd1 	bl	8005148 <I2C_WaitOnFlagUntilTimeout>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d001      	beq.n	80049b0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80049ac:	2302      	movs	r3, #2
 80049ae:	e243      	b.n	8004e38 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d101      	bne.n	80049be <HAL_I2C_Mem_Read+0x5a>
 80049ba:	2302      	movs	r3, #2
 80049bc:	e23c      	b.n	8004e38 <HAL_I2C_Mem_Read+0x4d4>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0301 	and.w	r3, r3, #1
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d007      	beq.n	80049e4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f042 0201 	orr.w	r2, r2, #1
 80049e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80049f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2222      	movs	r2, #34	@ 0x22
 80049f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2240      	movs	r2, #64	@ 0x40
 8004a00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2200      	movs	r2, #0
 8004a08:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a0e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004a14:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a1a:	b29a      	uxth	r2, r3
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	4a62      	ldr	r2, [pc, #392]	@ (8004bac <HAL_I2C_Mem_Read+0x248>)
 8004a24:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a26:	88f8      	ldrh	r0, [r7, #6]
 8004a28:	893a      	ldrh	r2, [r7, #8]
 8004a2a:	8979      	ldrh	r1, [r7, #10]
 8004a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a2e:	9301      	str	r3, [sp, #4]
 8004a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a32:	9300      	str	r3, [sp, #0]
 8004a34:	4603      	mov	r3, r0
 8004a36:	68f8      	ldr	r0, [r7, #12]
 8004a38:	f000 fa9e 	bl	8004f78 <I2C_RequestMemoryRead>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d001      	beq.n	8004a46 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e1f8      	b.n	8004e38 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d113      	bne.n	8004a76 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a4e:	2300      	movs	r3, #0
 8004a50:	61fb      	str	r3, [r7, #28]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	695b      	ldr	r3, [r3, #20]
 8004a58:	61fb      	str	r3, [r7, #28]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	699b      	ldr	r3, [r3, #24]
 8004a60:	61fb      	str	r3, [r7, #28]
 8004a62:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a72:	601a      	str	r2, [r3, #0]
 8004a74:	e1cc      	b.n	8004e10 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d11e      	bne.n	8004abc <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a8c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004a8e:	b672      	cpsid	i
}
 8004a90:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a92:	2300      	movs	r3, #0
 8004a94:	61bb      	str	r3, [r7, #24]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	695b      	ldr	r3, [r3, #20]
 8004a9c:	61bb      	str	r3, [r7, #24]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	699b      	ldr	r3, [r3, #24]
 8004aa4:	61bb      	str	r3, [r7, #24]
 8004aa6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ab6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004ab8:	b662      	cpsie	i
}
 8004aba:	e035      	b.n	8004b28 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	d11e      	bne.n	8004b02 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ad2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004ad4:	b672      	cpsid	i
}
 8004ad6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ad8:	2300      	movs	r3, #0
 8004ada:	617b      	str	r3, [r7, #20]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	695b      	ldr	r3, [r3, #20]
 8004ae2:	617b      	str	r3, [r7, #20]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	699b      	ldr	r3, [r3, #24]
 8004aea:	617b      	str	r3, [r7, #20]
 8004aec:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004afc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004afe:	b662      	cpsie	i
}
 8004b00:	e012      	b.n	8004b28 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004b10:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b12:	2300      	movs	r3, #0
 8004b14:	613b      	str	r3, [r7, #16]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	695b      	ldr	r3, [r3, #20]
 8004b1c:	613b      	str	r3, [r7, #16]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	699b      	ldr	r3, [r3, #24]
 8004b24:	613b      	str	r3, [r7, #16]
 8004b26:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004b28:	e172      	b.n	8004e10 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b2e:	2b03      	cmp	r3, #3
 8004b30:	f200 811f 	bhi.w	8004d72 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d123      	bne.n	8004b84 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b3e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004b40:	68f8      	ldr	r0, [r7, #12]
 8004b42:	f000 fcab 	bl	800549c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d001      	beq.n	8004b50 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e173      	b.n	8004e38 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	691a      	ldr	r2, [r3, #16]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b5a:	b2d2      	uxtb	r2, r2
 8004b5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b62:	1c5a      	adds	r2, r3, #1
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b6c:	3b01      	subs	r3, #1
 8004b6e:	b29a      	uxth	r2, r3
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	b29a      	uxth	r2, r3
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004b82:	e145      	b.n	8004e10 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d152      	bne.n	8004c32 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b8e:	9300      	str	r3, [sp, #0]
 8004b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b92:	2200      	movs	r2, #0
 8004b94:	4906      	ldr	r1, [pc, #24]	@ (8004bb0 <HAL_I2C_Mem_Read+0x24c>)
 8004b96:	68f8      	ldr	r0, [r7, #12]
 8004b98:	f000 fad6 	bl	8005148 <I2C_WaitOnFlagUntilTimeout>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d008      	beq.n	8004bb4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e148      	b.n	8004e38 <HAL_I2C_Mem_Read+0x4d4>
 8004ba6:	bf00      	nop
 8004ba8:	00100002 	.word	0x00100002
 8004bac:	ffff0000 	.word	0xffff0000
 8004bb0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004bb4:	b672      	cpsid	i
}
 8004bb6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bc6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	691a      	ldr	r2, [r3, #16]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bd2:	b2d2      	uxtb	r2, r2
 8004bd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bda:	1c5a      	adds	r2, r3, #1
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004be4:	3b01      	subs	r3, #1
 8004be6:	b29a      	uxth	r2, r3
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	3b01      	subs	r3, #1
 8004bf4:	b29a      	uxth	r2, r3
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004bfa:	b662      	cpsie	i
}
 8004bfc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	691a      	ldr	r2, [r3, #16]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c08:	b2d2      	uxtb	r2, r2
 8004c0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c10:	1c5a      	adds	r2, r3, #1
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	b29a      	uxth	r2, r3
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	3b01      	subs	r3, #1
 8004c2a:	b29a      	uxth	r2, r3
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004c30:	e0ee      	b.n	8004e10 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c34:	9300      	str	r3, [sp, #0]
 8004c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c38:	2200      	movs	r2, #0
 8004c3a:	4981      	ldr	r1, [pc, #516]	@ (8004e40 <HAL_I2C_Mem_Read+0x4dc>)
 8004c3c:	68f8      	ldr	r0, [r7, #12]
 8004c3e:	f000 fa83 	bl	8005148 <I2C_WaitOnFlagUntilTimeout>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d001      	beq.n	8004c4c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e0f5      	b.n	8004e38 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c5a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004c5c:	b672      	cpsid	i
}
 8004c5e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	691a      	ldr	r2, [r3, #16]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c6a:	b2d2      	uxtb	r2, r2
 8004c6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c72:	1c5a      	adds	r2, r3, #1
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c7c:	3b01      	subs	r3, #1
 8004c7e:	b29a      	uxth	r2, r3
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	b29a      	uxth	r2, r3
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004c92:	4b6c      	ldr	r3, [pc, #432]	@ (8004e44 <HAL_I2C_Mem_Read+0x4e0>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	08db      	lsrs	r3, r3, #3
 8004c98:	4a6b      	ldr	r2, [pc, #428]	@ (8004e48 <HAL_I2C_Mem_Read+0x4e4>)
 8004c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c9e:	0a1a      	lsrs	r2, r3, #8
 8004ca0:	4613      	mov	r3, r2
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	4413      	add	r3, r2
 8004ca6:	00da      	lsls	r2, r3, #3
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004cac:	6a3b      	ldr	r3, [r7, #32]
 8004cae:	3b01      	subs	r3, #1
 8004cb0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004cb2:	6a3b      	ldr	r3, [r7, #32]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d118      	bne.n	8004cea <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2220      	movs	r2, #32
 8004cc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cd2:	f043 0220 	orr.w	r2, r3, #32
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004cda:	b662      	cpsie	i
}
 8004cdc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e0a6      	b.n	8004e38 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	695b      	ldr	r3, [r3, #20]
 8004cf0:	f003 0304 	and.w	r3, r3, #4
 8004cf4:	2b04      	cmp	r3, #4
 8004cf6:	d1d9      	bne.n	8004cac <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	691a      	ldr	r2, [r3, #16]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d12:	b2d2      	uxtb	r2, r2
 8004d14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d1a:	1c5a      	adds	r2, r3, #1
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d24:	3b01      	subs	r3, #1
 8004d26:	b29a      	uxth	r2, r3
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	3b01      	subs	r3, #1
 8004d34:	b29a      	uxth	r2, r3
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004d3a:	b662      	cpsie	i
}
 8004d3c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	691a      	ldr	r2, [r3, #16]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d48:	b2d2      	uxtb	r2, r2
 8004d4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d50:	1c5a      	adds	r2, r3, #1
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	b29a      	uxth	r2, r3
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	b29a      	uxth	r2, r3
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004d70:	e04e      	b.n	8004e10 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d74:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004d76:	68f8      	ldr	r0, [r7, #12]
 8004d78:	f000 fb90 	bl	800549c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d001      	beq.n	8004d86 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e058      	b.n	8004e38 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	691a      	ldr	r2, [r3, #16]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d90:	b2d2      	uxtb	r2, r2
 8004d92:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d98:	1c5a      	adds	r2, r3, #1
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004da2:	3b01      	subs	r3, #1
 8004da4:	b29a      	uxth	r2, r3
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	3b01      	subs	r3, #1
 8004db2:	b29a      	uxth	r2, r3
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	695b      	ldr	r3, [r3, #20]
 8004dbe:	f003 0304 	and.w	r3, r3, #4
 8004dc2:	2b04      	cmp	r3, #4
 8004dc4:	d124      	bne.n	8004e10 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dca:	2b03      	cmp	r3, #3
 8004dcc:	d107      	bne.n	8004dde <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ddc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	691a      	ldr	r2, [r3, #16]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004de8:	b2d2      	uxtb	r2, r2
 8004dea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df0:	1c5a      	adds	r2, r3, #1
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dfa:	3b01      	subs	r3, #1
 8004dfc:	b29a      	uxth	r2, r3
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	3b01      	subs	r3, #1
 8004e0a:	b29a      	uxth	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	f47f ae88 	bne.w	8004b2a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2220      	movs	r2, #32
 8004e1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004e32:	2300      	movs	r3, #0
 8004e34:	e000      	b.n	8004e38 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8004e36:	2302      	movs	r3, #2
  }
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3728      	adds	r7, #40	@ 0x28
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	00010004 	.word	0x00010004
 8004e44:	20000004 	.word	0x20000004
 8004e48:	14f8b589 	.word	0x14f8b589

08004e4c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b088      	sub	sp, #32
 8004e50:	af02      	add	r7, sp, #8
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	4608      	mov	r0, r1
 8004e56:	4611      	mov	r1, r2
 8004e58:	461a      	mov	r2, r3
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	817b      	strh	r3, [r7, #10]
 8004e5e:	460b      	mov	r3, r1
 8004e60:	813b      	strh	r3, [r7, #8]
 8004e62:	4613      	mov	r3, r2
 8004e64:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e74:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e78:	9300      	str	r3, [sp, #0]
 8004e7a:	6a3b      	ldr	r3, [r7, #32]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004e82:	68f8      	ldr	r0, [r7, #12]
 8004e84:	f000 f960 	bl	8005148 <I2C_WaitOnFlagUntilTimeout>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00d      	beq.n	8004eaa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e9c:	d103      	bne.n	8004ea6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ea4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e05f      	b.n	8004f6a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004eaa:	897b      	ldrh	r3, [r7, #10]
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	461a      	mov	r2, r3
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004eb8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ebc:	6a3a      	ldr	r2, [r7, #32]
 8004ebe:	492d      	ldr	r1, [pc, #180]	@ (8004f74 <I2C_RequestMemoryWrite+0x128>)
 8004ec0:	68f8      	ldr	r0, [r7, #12]
 8004ec2:	f000 f9bb 	bl	800523c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d001      	beq.n	8004ed0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e04c      	b.n	8004f6a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	617b      	str	r3, [r7, #20]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	695b      	ldr	r3, [r3, #20]
 8004eda:	617b      	str	r3, [r7, #20]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	699b      	ldr	r3, [r3, #24]
 8004ee2:	617b      	str	r3, [r7, #20]
 8004ee4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ee6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ee8:	6a39      	ldr	r1, [r7, #32]
 8004eea:	68f8      	ldr	r0, [r7, #12]
 8004eec:	f000 fa46 	bl	800537c <I2C_WaitOnTXEFlagUntilTimeout>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d00d      	beq.n	8004f12 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004efa:	2b04      	cmp	r3, #4
 8004efc:	d107      	bne.n	8004f0e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f0c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e02b      	b.n	8004f6a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f12:	88fb      	ldrh	r3, [r7, #6]
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d105      	bne.n	8004f24 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f18:	893b      	ldrh	r3, [r7, #8]
 8004f1a:	b2da      	uxtb	r2, r3
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	611a      	str	r2, [r3, #16]
 8004f22:	e021      	b.n	8004f68 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004f24:	893b      	ldrh	r3, [r7, #8]
 8004f26:	0a1b      	lsrs	r3, r3, #8
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	b2da      	uxtb	r2, r3
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f34:	6a39      	ldr	r1, [r7, #32]
 8004f36:	68f8      	ldr	r0, [r7, #12]
 8004f38:	f000 fa20 	bl	800537c <I2C_WaitOnTXEFlagUntilTimeout>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00d      	beq.n	8004f5e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f46:	2b04      	cmp	r3, #4
 8004f48:	d107      	bne.n	8004f5a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f58:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e005      	b.n	8004f6a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f5e:	893b      	ldrh	r3, [r7, #8]
 8004f60:	b2da      	uxtb	r2, r3
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3718      	adds	r7, #24
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	00010002 	.word	0x00010002

08004f78 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b088      	sub	sp, #32
 8004f7c:	af02      	add	r7, sp, #8
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	4608      	mov	r0, r1
 8004f82:	4611      	mov	r1, r2
 8004f84:	461a      	mov	r2, r3
 8004f86:	4603      	mov	r3, r0
 8004f88:	817b      	strh	r3, [r7, #10]
 8004f8a:	460b      	mov	r3, r1
 8004f8c:	813b      	strh	r3, [r7, #8]
 8004f8e:	4613      	mov	r3, r2
 8004f90:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004fa0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004fb0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb4:	9300      	str	r3, [sp, #0]
 8004fb6:	6a3b      	ldr	r3, [r7, #32]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004fbe:	68f8      	ldr	r0, [r7, #12]
 8004fc0:	f000 f8c2 	bl	8005148 <I2C_WaitOnFlagUntilTimeout>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00d      	beq.n	8004fe6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fd4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fd8:	d103      	bne.n	8004fe2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004fe0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e0aa      	b.n	800513c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004fe6:	897b      	ldrh	r3, [r7, #10]
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	461a      	mov	r2, r3
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004ff4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff8:	6a3a      	ldr	r2, [r7, #32]
 8004ffa:	4952      	ldr	r1, [pc, #328]	@ (8005144 <I2C_RequestMemoryRead+0x1cc>)
 8004ffc:	68f8      	ldr	r0, [r7, #12]
 8004ffe:	f000 f91d 	bl	800523c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d001      	beq.n	800500c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e097      	b.n	800513c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800500c:	2300      	movs	r3, #0
 800500e:	617b      	str	r3, [r7, #20]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	695b      	ldr	r3, [r3, #20]
 8005016:	617b      	str	r3, [r7, #20]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	617b      	str	r3, [r7, #20]
 8005020:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005022:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005024:	6a39      	ldr	r1, [r7, #32]
 8005026:	68f8      	ldr	r0, [r7, #12]
 8005028:	f000 f9a8 	bl	800537c <I2C_WaitOnTXEFlagUntilTimeout>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d00d      	beq.n	800504e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005036:	2b04      	cmp	r3, #4
 8005038:	d107      	bne.n	800504a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005048:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e076      	b.n	800513c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800504e:	88fb      	ldrh	r3, [r7, #6]
 8005050:	2b01      	cmp	r3, #1
 8005052:	d105      	bne.n	8005060 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005054:	893b      	ldrh	r3, [r7, #8]
 8005056:	b2da      	uxtb	r2, r3
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	611a      	str	r2, [r3, #16]
 800505e:	e021      	b.n	80050a4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005060:	893b      	ldrh	r3, [r7, #8]
 8005062:	0a1b      	lsrs	r3, r3, #8
 8005064:	b29b      	uxth	r3, r3
 8005066:	b2da      	uxtb	r2, r3
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800506e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005070:	6a39      	ldr	r1, [r7, #32]
 8005072:	68f8      	ldr	r0, [r7, #12]
 8005074:	f000 f982 	bl	800537c <I2C_WaitOnTXEFlagUntilTimeout>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d00d      	beq.n	800509a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005082:	2b04      	cmp	r3, #4
 8005084:	d107      	bne.n	8005096 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005094:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e050      	b.n	800513c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800509a:	893b      	ldrh	r3, [r7, #8]
 800509c:	b2da      	uxtb	r2, r3
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050a6:	6a39      	ldr	r1, [r7, #32]
 80050a8:	68f8      	ldr	r0, [r7, #12]
 80050aa:	f000 f967 	bl	800537c <I2C_WaitOnTXEFlagUntilTimeout>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d00d      	beq.n	80050d0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050b8:	2b04      	cmp	r3, #4
 80050ba:	d107      	bne.n	80050cc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050ca:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e035      	b.n	800513c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80050de:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e2:	9300      	str	r3, [sp, #0]
 80050e4:	6a3b      	ldr	r3, [r7, #32]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80050ec:	68f8      	ldr	r0, [r7, #12]
 80050ee:	f000 f82b 	bl	8005148 <I2C_WaitOnFlagUntilTimeout>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d00d      	beq.n	8005114 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005102:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005106:	d103      	bne.n	8005110 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800510e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	e013      	b.n	800513c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005114:	897b      	ldrh	r3, [r7, #10]
 8005116:	b2db      	uxtb	r3, r3
 8005118:	f043 0301 	orr.w	r3, r3, #1
 800511c:	b2da      	uxtb	r2, r3
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005126:	6a3a      	ldr	r2, [r7, #32]
 8005128:	4906      	ldr	r1, [pc, #24]	@ (8005144 <I2C_RequestMemoryRead+0x1cc>)
 800512a:	68f8      	ldr	r0, [r7, #12]
 800512c:	f000 f886 	bl	800523c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d001      	beq.n	800513a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e000      	b.n	800513c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800513a:	2300      	movs	r3, #0
}
 800513c:	4618      	mov	r0, r3
 800513e:	3718      	adds	r7, #24
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}
 8005144:	00010002 	.word	0x00010002

08005148 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	60f8      	str	r0, [r7, #12]
 8005150:	60b9      	str	r1, [r7, #8]
 8005152:	603b      	str	r3, [r7, #0]
 8005154:	4613      	mov	r3, r2
 8005156:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005158:	e048      	b.n	80051ec <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005160:	d044      	beq.n	80051ec <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005162:	f7fe fc47 	bl	80039f4 <HAL_GetTick>
 8005166:	4602      	mov	r2, r0
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	683a      	ldr	r2, [r7, #0]
 800516e:	429a      	cmp	r2, r3
 8005170:	d302      	bcc.n	8005178 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d139      	bne.n	80051ec <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	0c1b      	lsrs	r3, r3, #16
 800517c:	b2db      	uxtb	r3, r3
 800517e:	2b01      	cmp	r3, #1
 8005180:	d10d      	bne.n	800519e <I2C_WaitOnFlagUntilTimeout+0x56>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	695b      	ldr	r3, [r3, #20]
 8005188:	43da      	mvns	r2, r3
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	4013      	ands	r3, r2
 800518e:	b29b      	uxth	r3, r3
 8005190:	2b00      	cmp	r3, #0
 8005192:	bf0c      	ite	eq
 8005194:	2301      	moveq	r3, #1
 8005196:	2300      	movne	r3, #0
 8005198:	b2db      	uxtb	r3, r3
 800519a:	461a      	mov	r2, r3
 800519c:	e00c      	b.n	80051b8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	699b      	ldr	r3, [r3, #24]
 80051a4:	43da      	mvns	r2, r3
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	4013      	ands	r3, r2
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	bf0c      	ite	eq
 80051b0:	2301      	moveq	r3, #1
 80051b2:	2300      	movne	r3, #0
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	461a      	mov	r2, r3
 80051b8:	79fb      	ldrb	r3, [r7, #7]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d116      	bne.n	80051ec <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2200      	movs	r2, #0
 80051c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2220      	movs	r2, #32
 80051c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051d8:	f043 0220 	orr.w	r2, r3, #32
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	e023      	b.n	8005234 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	0c1b      	lsrs	r3, r3, #16
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d10d      	bne.n	8005212 <I2C_WaitOnFlagUntilTimeout+0xca>
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	695b      	ldr	r3, [r3, #20]
 80051fc:	43da      	mvns	r2, r3
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	4013      	ands	r3, r2
 8005202:	b29b      	uxth	r3, r3
 8005204:	2b00      	cmp	r3, #0
 8005206:	bf0c      	ite	eq
 8005208:	2301      	moveq	r3, #1
 800520a:	2300      	movne	r3, #0
 800520c:	b2db      	uxtb	r3, r3
 800520e:	461a      	mov	r2, r3
 8005210:	e00c      	b.n	800522c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	699b      	ldr	r3, [r3, #24]
 8005218:	43da      	mvns	r2, r3
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	4013      	ands	r3, r2
 800521e:	b29b      	uxth	r3, r3
 8005220:	2b00      	cmp	r3, #0
 8005222:	bf0c      	ite	eq
 8005224:	2301      	moveq	r3, #1
 8005226:	2300      	movne	r3, #0
 8005228:	b2db      	uxtb	r3, r3
 800522a:	461a      	mov	r2, r3
 800522c:	79fb      	ldrb	r3, [r7, #7]
 800522e:	429a      	cmp	r2, r3
 8005230:	d093      	beq.n	800515a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005232:	2300      	movs	r3, #0
}
 8005234:	4618      	mov	r0, r3
 8005236:	3710      	adds	r7, #16
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	607a      	str	r2, [r7, #4]
 8005248:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800524a:	e071      	b.n	8005330 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	695b      	ldr	r3, [r3, #20]
 8005252:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005256:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800525a:	d123      	bne.n	80052a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800526a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005274:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2200      	movs	r2, #0
 800527a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2220      	movs	r2, #32
 8005280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2200      	movs	r2, #0
 8005288:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005290:	f043 0204 	orr.w	r2, r3, #4
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2200      	movs	r2, #0
 800529c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e067      	b.n	8005374 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052aa:	d041      	beq.n	8005330 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052ac:	f7fe fba2 	bl	80039f4 <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d302      	bcc.n	80052c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d136      	bne.n	8005330 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	0c1b      	lsrs	r3, r3, #16
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d10c      	bne.n	80052e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	43da      	mvns	r2, r3
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	4013      	ands	r3, r2
 80052d8:	b29b      	uxth	r3, r3
 80052da:	2b00      	cmp	r3, #0
 80052dc:	bf14      	ite	ne
 80052de:	2301      	movne	r3, #1
 80052e0:	2300      	moveq	r3, #0
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	e00b      	b.n	80052fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	699b      	ldr	r3, [r3, #24]
 80052ec:	43da      	mvns	r2, r3
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	4013      	ands	r3, r2
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	bf14      	ite	ne
 80052f8:	2301      	movne	r3, #1
 80052fa:	2300      	moveq	r3, #0
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d016      	beq.n	8005330 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2200      	movs	r2, #0
 8005306:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2220      	movs	r2, #32
 800530c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2200      	movs	r2, #0
 8005314:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800531c:	f043 0220 	orr.w	r2, r3, #32
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2200      	movs	r2, #0
 8005328:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	e021      	b.n	8005374 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	0c1b      	lsrs	r3, r3, #16
 8005334:	b2db      	uxtb	r3, r3
 8005336:	2b01      	cmp	r3, #1
 8005338:	d10c      	bne.n	8005354 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	695b      	ldr	r3, [r3, #20]
 8005340:	43da      	mvns	r2, r3
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	4013      	ands	r3, r2
 8005346:	b29b      	uxth	r3, r3
 8005348:	2b00      	cmp	r3, #0
 800534a:	bf14      	ite	ne
 800534c:	2301      	movne	r3, #1
 800534e:	2300      	moveq	r3, #0
 8005350:	b2db      	uxtb	r3, r3
 8005352:	e00b      	b.n	800536c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	699b      	ldr	r3, [r3, #24]
 800535a:	43da      	mvns	r2, r3
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	4013      	ands	r3, r2
 8005360:	b29b      	uxth	r3, r3
 8005362:	2b00      	cmp	r3, #0
 8005364:	bf14      	ite	ne
 8005366:	2301      	movne	r3, #1
 8005368:	2300      	moveq	r3, #0
 800536a:	b2db      	uxtb	r3, r3
 800536c:	2b00      	cmp	r3, #0
 800536e:	f47f af6d 	bne.w	800524c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005372:	2300      	movs	r3, #0
}
 8005374:	4618      	mov	r0, r3
 8005376:	3710      	adds	r7, #16
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005388:	e034      	b.n	80053f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800538a:	68f8      	ldr	r0, [r7, #12]
 800538c:	f000 f8e3 	bl	8005556 <I2C_IsAcknowledgeFailed>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d001      	beq.n	800539a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e034      	b.n	8005404 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053a0:	d028      	beq.n	80053f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053a2:	f7fe fb27 	bl	80039f4 <HAL_GetTick>
 80053a6:	4602      	mov	r2, r0
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	68ba      	ldr	r2, [r7, #8]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d302      	bcc.n	80053b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d11d      	bne.n	80053f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	695b      	ldr	r3, [r3, #20]
 80053be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053c2:	2b80      	cmp	r3, #128	@ 0x80
 80053c4:	d016      	beq.n	80053f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2200      	movs	r2, #0
 80053ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2220      	movs	r2, #32
 80053d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2200      	movs	r2, #0
 80053d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053e0:	f043 0220 	orr.w	r2, r3, #32
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e007      	b.n	8005404 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053fe:	2b80      	cmp	r3, #128	@ 0x80
 8005400:	d1c3      	bne.n	800538a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005402:	2300      	movs	r3, #0
}
 8005404:	4618      	mov	r0, r3
 8005406:	3710      	adds	r7, #16
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005418:	e034      	b.n	8005484 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800541a:	68f8      	ldr	r0, [r7, #12]
 800541c:	f000 f89b 	bl	8005556 <I2C_IsAcknowledgeFailed>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d001      	beq.n	800542a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e034      	b.n	8005494 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005430:	d028      	beq.n	8005484 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005432:	f7fe fadf 	bl	80039f4 <HAL_GetTick>
 8005436:	4602      	mov	r2, r0
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	68ba      	ldr	r2, [r7, #8]
 800543e:	429a      	cmp	r2, r3
 8005440:	d302      	bcc.n	8005448 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d11d      	bne.n	8005484 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	695b      	ldr	r3, [r3, #20]
 800544e:	f003 0304 	and.w	r3, r3, #4
 8005452:	2b04      	cmp	r3, #4
 8005454:	d016      	beq.n	8005484 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2200      	movs	r2, #0
 800545a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2220      	movs	r2, #32
 8005460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2200      	movs	r2, #0
 8005468:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005470:	f043 0220 	orr.w	r2, r3, #32
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2200      	movs	r2, #0
 800547c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e007      	b.n	8005494 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	695b      	ldr	r3, [r3, #20]
 800548a:	f003 0304 	and.w	r3, r3, #4
 800548e:	2b04      	cmp	r3, #4
 8005490:	d1c3      	bne.n	800541a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005492:	2300      	movs	r3, #0
}
 8005494:	4618      	mov	r0, r3
 8005496:	3710      	adds	r7, #16
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}

0800549c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80054a8:	e049      	b.n	800553e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	695b      	ldr	r3, [r3, #20]
 80054b0:	f003 0310 	and.w	r3, r3, #16
 80054b4:	2b10      	cmp	r3, #16
 80054b6:	d119      	bne.n	80054ec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f06f 0210 	mvn.w	r2, #16
 80054c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2200      	movs	r2, #0
 80054c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2220      	movs	r2, #32
 80054cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e030      	b.n	800554e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054ec:	f7fe fa82 	bl	80039f4 <HAL_GetTick>
 80054f0:	4602      	mov	r2, r0
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	68ba      	ldr	r2, [r7, #8]
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d302      	bcc.n	8005502 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d11d      	bne.n	800553e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	695b      	ldr	r3, [r3, #20]
 8005508:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800550c:	2b40      	cmp	r3, #64	@ 0x40
 800550e:	d016      	beq.n	800553e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2200      	movs	r2, #0
 8005514:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2220      	movs	r2, #32
 800551a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2200      	movs	r2, #0
 8005522:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800552a:	f043 0220 	orr.w	r2, r3, #32
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2200      	movs	r2, #0
 8005536:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e007      	b.n	800554e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	695b      	ldr	r3, [r3, #20]
 8005544:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005548:	2b40      	cmp	r3, #64	@ 0x40
 800554a:	d1ae      	bne.n	80054aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	3710      	adds	r7, #16
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}

08005556 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005556:	b480      	push	{r7}
 8005558:	b083      	sub	sp, #12
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	695b      	ldr	r3, [r3, #20]
 8005564:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005568:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800556c:	d11b      	bne.n	80055a6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005576:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2200      	movs	r2, #0
 800557c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2220      	movs	r2, #32
 8005582:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005592:	f043 0204 	orr.w	r2, r3, #4
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e000      	b.n	80055a8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80055a6:	2300      	movs	r3, #0
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	370c      	adds	r7, #12
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bc80      	pop	{r7}
 80055b0:	4770      	bx	lr
	...

080055b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b086      	sub	sp, #24
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d101      	bne.n	80055c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e272      	b.n	8005aac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 0301 	and.w	r3, r3, #1
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	f000 8087 	beq.w	80056e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80055d4:	4b92      	ldr	r3, [pc, #584]	@ (8005820 <HAL_RCC_OscConfig+0x26c>)
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	f003 030c 	and.w	r3, r3, #12
 80055dc:	2b04      	cmp	r3, #4
 80055de:	d00c      	beq.n	80055fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80055e0:	4b8f      	ldr	r3, [pc, #572]	@ (8005820 <HAL_RCC_OscConfig+0x26c>)
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	f003 030c 	and.w	r3, r3, #12
 80055e8:	2b08      	cmp	r3, #8
 80055ea:	d112      	bne.n	8005612 <HAL_RCC_OscConfig+0x5e>
 80055ec:	4b8c      	ldr	r3, [pc, #560]	@ (8005820 <HAL_RCC_OscConfig+0x26c>)
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80055f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055f8:	d10b      	bne.n	8005612 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055fa:	4b89      	ldr	r3, [pc, #548]	@ (8005820 <HAL_RCC_OscConfig+0x26c>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005602:	2b00      	cmp	r3, #0
 8005604:	d06c      	beq.n	80056e0 <HAL_RCC_OscConfig+0x12c>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d168      	bne.n	80056e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e24c      	b.n	8005aac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800561a:	d106      	bne.n	800562a <HAL_RCC_OscConfig+0x76>
 800561c:	4b80      	ldr	r3, [pc, #512]	@ (8005820 <HAL_RCC_OscConfig+0x26c>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a7f      	ldr	r2, [pc, #508]	@ (8005820 <HAL_RCC_OscConfig+0x26c>)
 8005622:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005626:	6013      	str	r3, [r2, #0]
 8005628:	e02e      	b.n	8005688 <HAL_RCC_OscConfig+0xd4>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d10c      	bne.n	800564c <HAL_RCC_OscConfig+0x98>
 8005632:	4b7b      	ldr	r3, [pc, #492]	@ (8005820 <HAL_RCC_OscConfig+0x26c>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a7a      	ldr	r2, [pc, #488]	@ (8005820 <HAL_RCC_OscConfig+0x26c>)
 8005638:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800563c:	6013      	str	r3, [r2, #0]
 800563e:	4b78      	ldr	r3, [pc, #480]	@ (8005820 <HAL_RCC_OscConfig+0x26c>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a77      	ldr	r2, [pc, #476]	@ (8005820 <HAL_RCC_OscConfig+0x26c>)
 8005644:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005648:	6013      	str	r3, [r2, #0]
 800564a:	e01d      	b.n	8005688 <HAL_RCC_OscConfig+0xd4>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005654:	d10c      	bne.n	8005670 <HAL_RCC_OscConfig+0xbc>
 8005656:	4b72      	ldr	r3, [pc, #456]	@ (8005820 <HAL_RCC_OscConfig+0x26c>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a71      	ldr	r2, [pc, #452]	@ (8005820 <HAL_RCC_OscConfig+0x26c>)
 800565c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005660:	6013      	str	r3, [r2, #0]
 8005662:	4b6f      	ldr	r3, [pc, #444]	@ (8005820 <HAL_RCC_OscConfig+0x26c>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a6e      	ldr	r2, [pc, #440]	@ (8005820 <HAL_RCC_OscConfig+0x26c>)
 8005668:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800566c:	6013      	str	r3, [r2, #0]
 800566e:	e00b      	b.n	8005688 <HAL_RCC_OscConfig+0xd4>
 8005670:	4b6b      	ldr	r3, [pc, #428]	@ (8005820 <HAL_RCC_OscConfig+0x26c>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a6a      	ldr	r2, [pc, #424]	@ (8005820 <HAL_RCC_OscConfig+0x26c>)
 8005676:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800567a:	6013      	str	r3, [r2, #0]
 800567c:	4b68      	ldr	r3, [pc, #416]	@ (8005820 <HAL_RCC_OscConfig+0x26c>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a67      	ldr	r2, [pc, #412]	@ (8005820 <HAL_RCC_OscConfig+0x26c>)
 8005682:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005686:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d013      	beq.n	80056b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005690:	f7fe f9b0 	bl	80039f4 <HAL_GetTick>
 8005694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005696:	e008      	b.n	80056aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005698:	f7fe f9ac 	bl	80039f4 <HAL_GetTick>
 800569c:	4602      	mov	r2, r0
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	2b64      	cmp	r3, #100	@ 0x64
 80056a4:	d901      	bls.n	80056aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	e200      	b.n	8005aac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056aa:	4b5d      	ldr	r3, [pc, #372]	@ (8005820 <HAL_RCC_OscConfig+0x26c>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d0f0      	beq.n	8005698 <HAL_RCC_OscConfig+0xe4>
 80056b6:	e014      	b.n	80056e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056b8:	f7fe f99c 	bl	80039f4 <HAL_GetTick>
 80056bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056be:	e008      	b.n	80056d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056c0:	f7fe f998 	bl	80039f4 <HAL_GetTick>
 80056c4:	4602      	mov	r2, r0
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	1ad3      	subs	r3, r2, r3
 80056ca:	2b64      	cmp	r3, #100	@ 0x64
 80056cc:	d901      	bls.n	80056d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80056ce:	2303      	movs	r3, #3
 80056d0:	e1ec      	b.n	8005aac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056d2:	4b53      	ldr	r3, [pc, #332]	@ (8005820 <HAL_RCC_OscConfig+0x26c>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1f0      	bne.n	80056c0 <HAL_RCC_OscConfig+0x10c>
 80056de:	e000      	b.n	80056e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f003 0302 	and.w	r3, r3, #2
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d063      	beq.n	80057b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80056ee:	4b4c      	ldr	r3, [pc, #304]	@ (8005820 <HAL_RCC_OscConfig+0x26c>)
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	f003 030c 	and.w	r3, r3, #12
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d00b      	beq.n	8005712 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80056fa:	4b49      	ldr	r3, [pc, #292]	@ (8005820 <HAL_RCC_OscConfig+0x26c>)
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	f003 030c 	and.w	r3, r3, #12
 8005702:	2b08      	cmp	r3, #8
 8005704:	d11c      	bne.n	8005740 <HAL_RCC_OscConfig+0x18c>
 8005706:	4b46      	ldr	r3, [pc, #280]	@ (8005820 <HAL_RCC_OscConfig+0x26c>)
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800570e:	2b00      	cmp	r3, #0
 8005710:	d116      	bne.n	8005740 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005712:	4b43      	ldr	r3, [pc, #268]	@ (8005820 <HAL_RCC_OscConfig+0x26c>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 0302 	and.w	r3, r3, #2
 800571a:	2b00      	cmp	r3, #0
 800571c:	d005      	beq.n	800572a <HAL_RCC_OscConfig+0x176>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	2b01      	cmp	r3, #1
 8005724:	d001      	beq.n	800572a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e1c0      	b.n	8005aac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800572a:	4b3d      	ldr	r3, [pc, #244]	@ (8005820 <HAL_RCC_OscConfig+0x26c>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	695b      	ldr	r3, [r3, #20]
 8005736:	00db      	lsls	r3, r3, #3
 8005738:	4939      	ldr	r1, [pc, #228]	@ (8005820 <HAL_RCC_OscConfig+0x26c>)
 800573a:	4313      	orrs	r3, r2
 800573c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800573e:	e03a      	b.n	80057b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	691b      	ldr	r3, [r3, #16]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d020      	beq.n	800578a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005748:	4b36      	ldr	r3, [pc, #216]	@ (8005824 <HAL_RCC_OscConfig+0x270>)
 800574a:	2201      	movs	r2, #1
 800574c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800574e:	f7fe f951 	bl	80039f4 <HAL_GetTick>
 8005752:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005754:	e008      	b.n	8005768 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005756:	f7fe f94d 	bl	80039f4 <HAL_GetTick>
 800575a:	4602      	mov	r2, r0
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	1ad3      	subs	r3, r2, r3
 8005760:	2b02      	cmp	r3, #2
 8005762:	d901      	bls.n	8005768 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005764:	2303      	movs	r3, #3
 8005766:	e1a1      	b.n	8005aac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005768:	4b2d      	ldr	r3, [pc, #180]	@ (8005820 <HAL_RCC_OscConfig+0x26c>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 0302 	and.w	r3, r3, #2
 8005770:	2b00      	cmp	r3, #0
 8005772:	d0f0      	beq.n	8005756 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005774:	4b2a      	ldr	r3, [pc, #168]	@ (8005820 <HAL_RCC_OscConfig+0x26c>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	695b      	ldr	r3, [r3, #20]
 8005780:	00db      	lsls	r3, r3, #3
 8005782:	4927      	ldr	r1, [pc, #156]	@ (8005820 <HAL_RCC_OscConfig+0x26c>)
 8005784:	4313      	orrs	r3, r2
 8005786:	600b      	str	r3, [r1, #0]
 8005788:	e015      	b.n	80057b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800578a:	4b26      	ldr	r3, [pc, #152]	@ (8005824 <HAL_RCC_OscConfig+0x270>)
 800578c:	2200      	movs	r2, #0
 800578e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005790:	f7fe f930 	bl	80039f4 <HAL_GetTick>
 8005794:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005796:	e008      	b.n	80057aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005798:	f7fe f92c 	bl	80039f4 <HAL_GetTick>
 800579c:	4602      	mov	r2, r0
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	2b02      	cmp	r3, #2
 80057a4:	d901      	bls.n	80057aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e180      	b.n	8005aac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057aa:	4b1d      	ldr	r3, [pc, #116]	@ (8005820 <HAL_RCC_OscConfig+0x26c>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 0302 	and.w	r3, r3, #2
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d1f0      	bne.n	8005798 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 0308 	and.w	r3, r3, #8
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d03a      	beq.n	8005838 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	699b      	ldr	r3, [r3, #24]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d019      	beq.n	80057fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057ca:	4b17      	ldr	r3, [pc, #92]	@ (8005828 <HAL_RCC_OscConfig+0x274>)
 80057cc:	2201      	movs	r2, #1
 80057ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057d0:	f7fe f910 	bl	80039f4 <HAL_GetTick>
 80057d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057d6:	e008      	b.n	80057ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057d8:	f7fe f90c 	bl	80039f4 <HAL_GetTick>
 80057dc:	4602      	mov	r2, r0
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	1ad3      	subs	r3, r2, r3
 80057e2:	2b02      	cmp	r3, #2
 80057e4:	d901      	bls.n	80057ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80057e6:	2303      	movs	r3, #3
 80057e8:	e160      	b.n	8005aac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057ea:	4b0d      	ldr	r3, [pc, #52]	@ (8005820 <HAL_RCC_OscConfig+0x26c>)
 80057ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ee:	f003 0302 	and.w	r3, r3, #2
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d0f0      	beq.n	80057d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80057f6:	2001      	movs	r0, #1
 80057f8:	f000 face 	bl	8005d98 <RCC_Delay>
 80057fc:	e01c      	b.n	8005838 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057fe:	4b0a      	ldr	r3, [pc, #40]	@ (8005828 <HAL_RCC_OscConfig+0x274>)
 8005800:	2200      	movs	r2, #0
 8005802:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005804:	f7fe f8f6 	bl	80039f4 <HAL_GetTick>
 8005808:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800580a:	e00f      	b.n	800582c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800580c:	f7fe f8f2 	bl	80039f4 <HAL_GetTick>
 8005810:	4602      	mov	r2, r0
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	2b02      	cmp	r3, #2
 8005818:	d908      	bls.n	800582c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800581a:	2303      	movs	r3, #3
 800581c:	e146      	b.n	8005aac <HAL_RCC_OscConfig+0x4f8>
 800581e:	bf00      	nop
 8005820:	40021000 	.word	0x40021000
 8005824:	42420000 	.word	0x42420000
 8005828:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800582c:	4b92      	ldr	r3, [pc, #584]	@ (8005a78 <HAL_RCC_OscConfig+0x4c4>)
 800582e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005830:	f003 0302 	and.w	r3, r3, #2
 8005834:	2b00      	cmp	r3, #0
 8005836:	d1e9      	bne.n	800580c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 0304 	and.w	r3, r3, #4
 8005840:	2b00      	cmp	r3, #0
 8005842:	f000 80a6 	beq.w	8005992 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005846:	2300      	movs	r3, #0
 8005848:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800584a:	4b8b      	ldr	r3, [pc, #556]	@ (8005a78 <HAL_RCC_OscConfig+0x4c4>)
 800584c:	69db      	ldr	r3, [r3, #28]
 800584e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005852:	2b00      	cmp	r3, #0
 8005854:	d10d      	bne.n	8005872 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005856:	4b88      	ldr	r3, [pc, #544]	@ (8005a78 <HAL_RCC_OscConfig+0x4c4>)
 8005858:	69db      	ldr	r3, [r3, #28]
 800585a:	4a87      	ldr	r2, [pc, #540]	@ (8005a78 <HAL_RCC_OscConfig+0x4c4>)
 800585c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005860:	61d3      	str	r3, [r2, #28]
 8005862:	4b85      	ldr	r3, [pc, #532]	@ (8005a78 <HAL_RCC_OscConfig+0x4c4>)
 8005864:	69db      	ldr	r3, [r3, #28]
 8005866:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800586a:	60bb      	str	r3, [r7, #8]
 800586c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800586e:	2301      	movs	r3, #1
 8005870:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005872:	4b82      	ldr	r3, [pc, #520]	@ (8005a7c <HAL_RCC_OscConfig+0x4c8>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800587a:	2b00      	cmp	r3, #0
 800587c:	d118      	bne.n	80058b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800587e:	4b7f      	ldr	r3, [pc, #508]	@ (8005a7c <HAL_RCC_OscConfig+0x4c8>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a7e      	ldr	r2, [pc, #504]	@ (8005a7c <HAL_RCC_OscConfig+0x4c8>)
 8005884:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005888:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800588a:	f7fe f8b3 	bl	80039f4 <HAL_GetTick>
 800588e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005890:	e008      	b.n	80058a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005892:	f7fe f8af 	bl	80039f4 <HAL_GetTick>
 8005896:	4602      	mov	r2, r0
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	1ad3      	subs	r3, r2, r3
 800589c:	2b64      	cmp	r3, #100	@ 0x64
 800589e:	d901      	bls.n	80058a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80058a0:	2303      	movs	r3, #3
 80058a2:	e103      	b.n	8005aac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058a4:	4b75      	ldr	r3, [pc, #468]	@ (8005a7c <HAL_RCC_OscConfig+0x4c8>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d0f0      	beq.n	8005892 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d106      	bne.n	80058c6 <HAL_RCC_OscConfig+0x312>
 80058b8:	4b6f      	ldr	r3, [pc, #444]	@ (8005a78 <HAL_RCC_OscConfig+0x4c4>)
 80058ba:	6a1b      	ldr	r3, [r3, #32]
 80058bc:	4a6e      	ldr	r2, [pc, #440]	@ (8005a78 <HAL_RCC_OscConfig+0x4c4>)
 80058be:	f043 0301 	orr.w	r3, r3, #1
 80058c2:	6213      	str	r3, [r2, #32]
 80058c4:	e02d      	b.n	8005922 <HAL_RCC_OscConfig+0x36e>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d10c      	bne.n	80058e8 <HAL_RCC_OscConfig+0x334>
 80058ce:	4b6a      	ldr	r3, [pc, #424]	@ (8005a78 <HAL_RCC_OscConfig+0x4c4>)
 80058d0:	6a1b      	ldr	r3, [r3, #32]
 80058d2:	4a69      	ldr	r2, [pc, #420]	@ (8005a78 <HAL_RCC_OscConfig+0x4c4>)
 80058d4:	f023 0301 	bic.w	r3, r3, #1
 80058d8:	6213      	str	r3, [r2, #32]
 80058da:	4b67      	ldr	r3, [pc, #412]	@ (8005a78 <HAL_RCC_OscConfig+0x4c4>)
 80058dc:	6a1b      	ldr	r3, [r3, #32]
 80058de:	4a66      	ldr	r2, [pc, #408]	@ (8005a78 <HAL_RCC_OscConfig+0x4c4>)
 80058e0:	f023 0304 	bic.w	r3, r3, #4
 80058e4:	6213      	str	r3, [r2, #32]
 80058e6:	e01c      	b.n	8005922 <HAL_RCC_OscConfig+0x36e>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	2b05      	cmp	r3, #5
 80058ee:	d10c      	bne.n	800590a <HAL_RCC_OscConfig+0x356>
 80058f0:	4b61      	ldr	r3, [pc, #388]	@ (8005a78 <HAL_RCC_OscConfig+0x4c4>)
 80058f2:	6a1b      	ldr	r3, [r3, #32]
 80058f4:	4a60      	ldr	r2, [pc, #384]	@ (8005a78 <HAL_RCC_OscConfig+0x4c4>)
 80058f6:	f043 0304 	orr.w	r3, r3, #4
 80058fa:	6213      	str	r3, [r2, #32]
 80058fc:	4b5e      	ldr	r3, [pc, #376]	@ (8005a78 <HAL_RCC_OscConfig+0x4c4>)
 80058fe:	6a1b      	ldr	r3, [r3, #32]
 8005900:	4a5d      	ldr	r2, [pc, #372]	@ (8005a78 <HAL_RCC_OscConfig+0x4c4>)
 8005902:	f043 0301 	orr.w	r3, r3, #1
 8005906:	6213      	str	r3, [r2, #32]
 8005908:	e00b      	b.n	8005922 <HAL_RCC_OscConfig+0x36e>
 800590a:	4b5b      	ldr	r3, [pc, #364]	@ (8005a78 <HAL_RCC_OscConfig+0x4c4>)
 800590c:	6a1b      	ldr	r3, [r3, #32]
 800590e:	4a5a      	ldr	r2, [pc, #360]	@ (8005a78 <HAL_RCC_OscConfig+0x4c4>)
 8005910:	f023 0301 	bic.w	r3, r3, #1
 8005914:	6213      	str	r3, [r2, #32]
 8005916:	4b58      	ldr	r3, [pc, #352]	@ (8005a78 <HAL_RCC_OscConfig+0x4c4>)
 8005918:	6a1b      	ldr	r3, [r3, #32]
 800591a:	4a57      	ldr	r2, [pc, #348]	@ (8005a78 <HAL_RCC_OscConfig+0x4c4>)
 800591c:	f023 0304 	bic.w	r3, r3, #4
 8005920:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d015      	beq.n	8005956 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800592a:	f7fe f863 	bl	80039f4 <HAL_GetTick>
 800592e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005930:	e00a      	b.n	8005948 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005932:	f7fe f85f 	bl	80039f4 <HAL_GetTick>
 8005936:	4602      	mov	r2, r0
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	1ad3      	subs	r3, r2, r3
 800593c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005940:	4293      	cmp	r3, r2
 8005942:	d901      	bls.n	8005948 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005944:	2303      	movs	r3, #3
 8005946:	e0b1      	b.n	8005aac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005948:	4b4b      	ldr	r3, [pc, #300]	@ (8005a78 <HAL_RCC_OscConfig+0x4c4>)
 800594a:	6a1b      	ldr	r3, [r3, #32]
 800594c:	f003 0302 	and.w	r3, r3, #2
 8005950:	2b00      	cmp	r3, #0
 8005952:	d0ee      	beq.n	8005932 <HAL_RCC_OscConfig+0x37e>
 8005954:	e014      	b.n	8005980 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005956:	f7fe f84d 	bl	80039f4 <HAL_GetTick>
 800595a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800595c:	e00a      	b.n	8005974 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800595e:	f7fe f849 	bl	80039f4 <HAL_GetTick>
 8005962:	4602      	mov	r2, r0
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	1ad3      	subs	r3, r2, r3
 8005968:	f241 3288 	movw	r2, #5000	@ 0x1388
 800596c:	4293      	cmp	r3, r2
 800596e:	d901      	bls.n	8005974 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005970:	2303      	movs	r3, #3
 8005972:	e09b      	b.n	8005aac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005974:	4b40      	ldr	r3, [pc, #256]	@ (8005a78 <HAL_RCC_OscConfig+0x4c4>)
 8005976:	6a1b      	ldr	r3, [r3, #32]
 8005978:	f003 0302 	and.w	r3, r3, #2
 800597c:	2b00      	cmp	r3, #0
 800597e:	d1ee      	bne.n	800595e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005980:	7dfb      	ldrb	r3, [r7, #23]
 8005982:	2b01      	cmp	r3, #1
 8005984:	d105      	bne.n	8005992 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005986:	4b3c      	ldr	r3, [pc, #240]	@ (8005a78 <HAL_RCC_OscConfig+0x4c4>)
 8005988:	69db      	ldr	r3, [r3, #28]
 800598a:	4a3b      	ldr	r2, [pc, #236]	@ (8005a78 <HAL_RCC_OscConfig+0x4c4>)
 800598c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005990:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	69db      	ldr	r3, [r3, #28]
 8005996:	2b00      	cmp	r3, #0
 8005998:	f000 8087 	beq.w	8005aaa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800599c:	4b36      	ldr	r3, [pc, #216]	@ (8005a78 <HAL_RCC_OscConfig+0x4c4>)
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	f003 030c 	and.w	r3, r3, #12
 80059a4:	2b08      	cmp	r3, #8
 80059a6:	d061      	beq.n	8005a6c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	69db      	ldr	r3, [r3, #28]
 80059ac:	2b02      	cmp	r3, #2
 80059ae:	d146      	bne.n	8005a3e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059b0:	4b33      	ldr	r3, [pc, #204]	@ (8005a80 <HAL_RCC_OscConfig+0x4cc>)
 80059b2:	2200      	movs	r2, #0
 80059b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059b6:	f7fe f81d 	bl	80039f4 <HAL_GetTick>
 80059ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059bc:	e008      	b.n	80059d0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059be:	f7fe f819 	bl	80039f4 <HAL_GetTick>
 80059c2:	4602      	mov	r2, r0
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	1ad3      	subs	r3, r2, r3
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d901      	bls.n	80059d0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80059cc:	2303      	movs	r3, #3
 80059ce:	e06d      	b.n	8005aac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059d0:	4b29      	ldr	r3, [pc, #164]	@ (8005a78 <HAL_RCC_OscConfig+0x4c4>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d1f0      	bne.n	80059be <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6a1b      	ldr	r3, [r3, #32]
 80059e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059e4:	d108      	bne.n	80059f8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80059e6:	4b24      	ldr	r3, [pc, #144]	@ (8005a78 <HAL_RCC_OscConfig+0x4c4>)
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	4921      	ldr	r1, [pc, #132]	@ (8005a78 <HAL_RCC_OscConfig+0x4c4>)
 80059f4:	4313      	orrs	r3, r2
 80059f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80059f8:	4b1f      	ldr	r3, [pc, #124]	@ (8005a78 <HAL_RCC_OscConfig+0x4c4>)
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6a19      	ldr	r1, [r3, #32]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a08:	430b      	orrs	r3, r1
 8005a0a:	491b      	ldr	r1, [pc, #108]	@ (8005a78 <HAL_RCC_OscConfig+0x4c4>)
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a10:	4b1b      	ldr	r3, [pc, #108]	@ (8005a80 <HAL_RCC_OscConfig+0x4cc>)
 8005a12:	2201      	movs	r2, #1
 8005a14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a16:	f7fd ffed 	bl	80039f4 <HAL_GetTick>
 8005a1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005a1c:	e008      	b.n	8005a30 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a1e:	f7fd ffe9 	bl	80039f4 <HAL_GetTick>
 8005a22:	4602      	mov	r2, r0
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	1ad3      	subs	r3, r2, r3
 8005a28:	2b02      	cmp	r3, #2
 8005a2a:	d901      	bls.n	8005a30 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	e03d      	b.n	8005aac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005a30:	4b11      	ldr	r3, [pc, #68]	@ (8005a78 <HAL_RCC_OscConfig+0x4c4>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d0f0      	beq.n	8005a1e <HAL_RCC_OscConfig+0x46a>
 8005a3c:	e035      	b.n	8005aaa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a3e:	4b10      	ldr	r3, [pc, #64]	@ (8005a80 <HAL_RCC_OscConfig+0x4cc>)
 8005a40:	2200      	movs	r2, #0
 8005a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a44:	f7fd ffd6 	bl	80039f4 <HAL_GetTick>
 8005a48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a4a:	e008      	b.n	8005a5e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a4c:	f7fd ffd2 	bl	80039f4 <HAL_GetTick>
 8005a50:	4602      	mov	r2, r0
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	1ad3      	subs	r3, r2, r3
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d901      	bls.n	8005a5e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005a5a:	2303      	movs	r3, #3
 8005a5c:	e026      	b.n	8005aac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a5e:	4b06      	ldr	r3, [pc, #24]	@ (8005a78 <HAL_RCC_OscConfig+0x4c4>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d1f0      	bne.n	8005a4c <HAL_RCC_OscConfig+0x498>
 8005a6a:	e01e      	b.n	8005aaa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	69db      	ldr	r3, [r3, #28]
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d107      	bne.n	8005a84 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	e019      	b.n	8005aac <HAL_RCC_OscConfig+0x4f8>
 8005a78:	40021000 	.word	0x40021000
 8005a7c:	40007000 	.word	0x40007000
 8005a80:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005a84:	4b0b      	ldr	r3, [pc, #44]	@ (8005ab4 <HAL_RCC_OscConfig+0x500>)
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6a1b      	ldr	r3, [r3, #32]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d106      	bne.n	8005aa6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d001      	beq.n	8005aaa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e000      	b.n	8005aac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005aaa:	2300      	movs	r3, #0
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3718      	adds	r7, #24
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}
 8005ab4:	40021000 	.word	0x40021000

08005ab8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d101      	bne.n	8005acc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e0d0      	b.n	8005c6e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005acc:	4b6a      	ldr	r3, [pc, #424]	@ (8005c78 <HAL_RCC_ClockConfig+0x1c0>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 0307 	and.w	r3, r3, #7
 8005ad4:	683a      	ldr	r2, [r7, #0]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d910      	bls.n	8005afc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ada:	4b67      	ldr	r3, [pc, #412]	@ (8005c78 <HAL_RCC_ClockConfig+0x1c0>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f023 0207 	bic.w	r2, r3, #7
 8005ae2:	4965      	ldr	r1, [pc, #404]	@ (8005c78 <HAL_RCC_ClockConfig+0x1c0>)
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005aea:	4b63      	ldr	r3, [pc, #396]	@ (8005c78 <HAL_RCC_ClockConfig+0x1c0>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f003 0307 	and.w	r3, r3, #7
 8005af2:	683a      	ldr	r2, [r7, #0]
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d001      	beq.n	8005afc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	e0b8      	b.n	8005c6e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 0302 	and.w	r3, r3, #2
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d020      	beq.n	8005b4a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 0304 	and.w	r3, r3, #4
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d005      	beq.n	8005b20 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b14:	4b59      	ldr	r3, [pc, #356]	@ (8005c7c <HAL_RCC_ClockConfig+0x1c4>)
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	4a58      	ldr	r2, [pc, #352]	@ (8005c7c <HAL_RCC_ClockConfig+0x1c4>)
 8005b1a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005b1e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 0308 	and.w	r3, r3, #8
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d005      	beq.n	8005b38 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b2c:	4b53      	ldr	r3, [pc, #332]	@ (8005c7c <HAL_RCC_ClockConfig+0x1c4>)
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	4a52      	ldr	r2, [pc, #328]	@ (8005c7c <HAL_RCC_ClockConfig+0x1c4>)
 8005b32:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8005b36:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b38:	4b50      	ldr	r3, [pc, #320]	@ (8005c7c <HAL_RCC_ClockConfig+0x1c4>)
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	494d      	ldr	r1, [pc, #308]	@ (8005c7c <HAL_RCC_ClockConfig+0x1c4>)
 8005b46:	4313      	orrs	r3, r2
 8005b48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 0301 	and.w	r3, r3, #1
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d040      	beq.n	8005bd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d107      	bne.n	8005b6e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b5e:	4b47      	ldr	r3, [pc, #284]	@ (8005c7c <HAL_RCC_ClockConfig+0x1c4>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d115      	bne.n	8005b96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e07f      	b.n	8005c6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d107      	bne.n	8005b86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b76:	4b41      	ldr	r3, [pc, #260]	@ (8005c7c <HAL_RCC_ClockConfig+0x1c4>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d109      	bne.n	8005b96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e073      	b.n	8005c6e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b86:	4b3d      	ldr	r3, [pc, #244]	@ (8005c7c <HAL_RCC_ClockConfig+0x1c4>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 0302 	and.w	r3, r3, #2
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d101      	bne.n	8005b96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e06b      	b.n	8005c6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b96:	4b39      	ldr	r3, [pc, #228]	@ (8005c7c <HAL_RCC_ClockConfig+0x1c4>)
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	f023 0203 	bic.w	r2, r3, #3
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	4936      	ldr	r1, [pc, #216]	@ (8005c7c <HAL_RCC_ClockConfig+0x1c4>)
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ba8:	f7fd ff24 	bl	80039f4 <HAL_GetTick>
 8005bac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bae:	e00a      	b.n	8005bc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bb0:	f7fd ff20 	bl	80039f4 <HAL_GetTick>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	1ad3      	subs	r3, r2, r3
 8005bba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d901      	bls.n	8005bc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005bc2:	2303      	movs	r3, #3
 8005bc4:	e053      	b.n	8005c6e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bc6:	4b2d      	ldr	r3, [pc, #180]	@ (8005c7c <HAL_RCC_ClockConfig+0x1c4>)
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	f003 020c 	and.w	r2, r3, #12
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d1eb      	bne.n	8005bb0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005bd8:	4b27      	ldr	r3, [pc, #156]	@ (8005c78 <HAL_RCC_ClockConfig+0x1c0>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 0307 	and.w	r3, r3, #7
 8005be0:	683a      	ldr	r2, [r7, #0]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d210      	bcs.n	8005c08 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005be6:	4b24      	ldr	r3, [pc, #144]	@ (8005c78 <HAL_RCC_ClockConfig+0x1c0>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f023 0207 	bic.w	r2, r3, #7
 8005bee:	4922      	ldr	r1, [pc, #136]	@ (8005c78 <HAL_RCC_ClockConfig+0x1c0>)
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bf6:	4b20      	ldr	r3, [pc, #128]	@ (8005c78 <HAL_RCC_ClockConfig+0x1c0>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 0307 	and.w	r3, r3, #7
 8005bfe:	683a      	ldr	r2, [r7, #0]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d001      	beq.n	8005c08 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	e032      	b.n	8005c6e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 0304 	and.w	r3, r3, #4
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d008      	beq.n	8005c26 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c14:	4b19      	ldr	r3, [pc, #100]	@ (8005c7c <HAL_RCC_ClockConfig+0x1c4>)
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	4916      	ldr	r1, [pc, #88]	@ (8005c7c <HAL_RCC_ClockConfig+0x1c4>)
 8005c22:	4313      	orrs	r3, r2
 8005c24:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f003 0308 	and.w	r3, r3, #8
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d009      	beq.n	8005c46 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005c32:	4b12      	ldr	r3, [pc, #72]	@ (8005c7c <HAL_RCC_ClockConfig+0x1c4>)
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	00db      	lsls	r3, r3, #3
 8005c40:	490e      	ldr	r1, [pc, #56]	@ (8005c7c <HAL_RCC_ClockConfig+0x1c4>)
 8005c42:	4313      	orrs	r3, r2
 8005c44:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005c46:	f000 f821 	bl	8005c8c <HAL_RCC_GetSysClockFreq>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8005c7c <HAL_RCC_ClockConfig+0x1c4>)
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	091b      	lsrs	r3, r3, #4
 8005c52:	f003 030f 	and.w	r3, r3, #15
 8005c56:	490a      	ldr	r1, [pc, #40]	@ (8005c80 <HAL_RCC_ClockConfig+0x1c8>)
 8005c58:	5ccb      	ldrb	r3, [r1, r3]
 8005c5a:	fa22 f303 	lsr.w	r3, r2, r3
 8005c5e:	4a09      	ldr	r2, [pc, #36]	@ (8005c84 <HAL_RCC_ClockConfig+0x1cc>)
 8005c60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005c62:	4b09      	ldr	r3, [pc, #36]	@ (8005c88 <HAL_RCC_ClockConfig+0x1d0>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4618      	mov	r0, r3
 8005c68:	f7fd fe82 	bl	8003970 <HAL_InitTick>

  return HAL_OK;
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3710      	adds	r7, #16
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	40022000 	.word	0x40022000
 8005c7c:	40021000 	.word	0x40021000
 8005c80:	0800c3f8 	.word	0x0800c3f8
 8005c84:	20000004 	.word	0x20000004
 8005c88:	20000008 	.word	0x20000008

08005c8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b087      	sub	sp, #28
 8005c90:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005c92:	2300      	movs	r3, #0
 8005c94:	60fb      	str	r3, [r7, #12]
 8005c96:	2300      	movs	r3, #0
 8005c98:	60bb      	str	r3, [r7, #8]
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	617b      	str	r3, [r7, #20]
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005ca6:	4b1e      	ldr	r3, [pc, #120]	@ (8005d20 <HAL_RCC_GetSysClockFreq+0x94>)
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f003 030c 	and.w	r3, r3, #12
 8005cb2:	2b04      	cmp	r3, #4
 8005cb4:	d002      	beq.n	8005cbc <HAL_RCC_GetSysClockFreq+0x30>
 8005cb6:	2b08      	cmp	r3, #8
 8005cb8:	d003      	beq.n	8005cc2 <HAL_RCC_GetSysClockFreq+0x36>
 8005cba:	e027      	b.n	8005d0c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005cbc:	4b19      	ldr	r3, [pc, #100]	@ (8005d24 <HAL_RCC_GetSysClockFreq+0x98>)
 8005cbe:	613b      	str	r3, [r7, #16]
      break;
 8005cc0:	e027      	b.n	8005d12 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	0c9b      	lsrs	r3, r3, #18
 8005cc6:	f003 030f 	and.w	r3, r3, #15
 8005cca:	4a17      	ldr	r2, [pc, #92]	@ (8005d28 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005ccc:	5cd3      	ldrb	r3, [r2, r3]
 8005cce:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d010      	beq.n	8005cfc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005cda:	4b11      	ldr	r3, [pc, #68]	@ (8005d20 <HAL_RCC_GetSysClockFreq+0x94>)
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	0c5b      	lsrs	r3, r3, #17
 8005ce0:	f003 0301 	and.w	r3, r3, #1
 8005ce4:	4a11      	ldr	r2, [pc, #68]	@ (8005d2c <HAL_RCC_GetSysClockFreq+0xa0>)
 8005ce6:	5cd3      	ldrb	r3, [r2, r3]
 8005ce8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a0d      	ldr	r2, [pc, #52]	@ (8005d24 <HAL_RCC_GetSysClockFreq+0x98>)
 8005cee:	fb03 f202 	mul.w	r2, r3, r2
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cf8:	617b      	str	r3, [r7, #20]
 8005cfa:	e004      	b.n	8005d06 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a0c      	ldr	r2, [pc, #48]	@ (8005d30 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005d00:	fb02 f303 	mul.w	r3, r2, r3
 8005d04:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	613b      	str	r3, [r7, #16]
      break;
 8005d0a:	e002      	b.n	8005d12 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005d0c:	4b05      	ldr	r3, [pc, #20]	@ (8005d24 <HAL_RCC_GetSysClockFreq+0x98>)
 8005d0e:	613b      	str	r3, [r7, #16]
      break;
 8005d10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d12:	693b      	ldr	r3, [r7, #16]
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	371c      	adds	r7, #28
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bc80      	pop	{r7}
 8005d1c:	4770      	bx	lr
 8005d1e:	bf00      	nop
 8005d20:	40021000 	.word	0x40021000
 8005d24:	007a1200 	.word	0x007a1200
 8005d28:	0800c410 	.word	0x0800c410
 8005d2c:	0800c420 	.word	0x0800c420
 8005d30:	003d0900 	.word	0x003d0900

08005d34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d34:	b480      	push	{r7}
 8005d36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d38:	4b02      	ldr	r3, [pc, #8]	@ (8005d44 <HAL_RCC_GetHCLKFreq+0x10>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bc80      	pop	{r7}
 8005d42:	4770      	bx	lr
 8005d44:	20000004 	.word	0x20000004

08005d48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005d4c:	f7ff fff2 	bl	8005d34 <HAL_RCC_GetHCLKFreq>
 8005d50:	4602      	mov	r2, r0
 8005d52:	4b05      	ldr	r3, [pc, #20]	@ (8005d68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	0a1b      	lsrs	r3, r3, #8
 8005d58:	f003 0307 	and.w	r3, r3, #7
 8005d5c:	4903      	ldr	r1, [pc, #12]	@ (8005d6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d5e:	5ccb      	ldrb	r3, [r1, r3]
 8005d60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	40021000 	.word	0x40021000
 8005d6c:	0800c408 	.word	0x0800c408

08005d70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005d74:	f7ff ffde 	bl	8005d34 <HAL_RCC_GetHCLKFreq>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	4b05      	ldr	r3, [pc, #20]	@ (8005d90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	0adb      	lsrs	r3, r3, #11
 8005d80:	f003 0307 	and.w	r3, r3, #7
 8005d84:	4903      	ldr	r1, [pc, #12]	@ (8005d94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d86:	5ccb      	ldrb	r3, [r1, r3]
 8005d88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	40021000 	.word	0x40021000
 8005d94:	0800c408 	.word	0x0800c408

08005d98 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b085      	sub	sp, #20
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005da0:	4b0a      	ldr	r3, [pc, #40]	@ (8005dcc <RCC_Delay+0x34>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a0a      	ldr	r2, [pc, #40]	@ (8005dd0 <RCC_Delay+0x38>)
 8005da6:	fba2 2303 	umull	r2, r3, r2, r3
 8005daa:	0a5b      	lsrs	r3, r3, #9
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	fb02 f303 	mul.w	r3, r2, r3
 8005db2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005db4:	bf00      	nop
  }
  while (Delay --);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	1e5a      	subs	r2, r3, #1
 8005dba:	60fa      	str	r2, [r7, #12]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d1f9      	bne.n	8005db4 <RCC_Delay+0x1c>
}
 8005dc0:	bf00      	nop
 8005dc2:	bf00      	nop
 8005dc4:	3714      	adds	r7, #20
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bc80      	pop	{r7}
 8005dca:	4770      	bx	lr
 8005dcc:	20000004 	.word	0x20000004
 8005dd0:	10624dd3 	.word	0x10624dd3

08005dd4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b086      	sub	sp, #24
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d101      	bne.n	8005de8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	e093      	b.n	8005f10 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d106      	bne.n	8005e02 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f7fd fbf9 	bl	80035f4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2202      	movs	r2, #2
 8005e06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	6812      	ldr	r2, [r2, #0]
 8005e14:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e18:	f023 0307 	bic.w	r3, r3, #7
 8005e1c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	3304      	adds	r3, #4
 8005e26:	4619      	mov	r1, r3
 8005e28:	4610      	mov	r0, r2
 8005e2a:	f000 fa21 	bl	8006270 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	699b      	ldr	r3, [r3, #24]
 8005e3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	6a1b      	ldr	r3, [r3, #32]
 8005e44:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	697a      	ldr	r2, [r7, #20]
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e56:	f023 0303 	bic.w	r3, r3, #3
 8005e5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	689a      	ldr	r2, [r3, #8]
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	699b      	ldr	r3, [r3, #24]
 8005e64:	021b      	lsls	r3, r3, #8
 8005e66:	4313      	orrs	r3, r2
 8005e68:	693a      	ldr	r2, [r7, #16]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005e74:	f023 030c 	bic.w	r3, r3, #12
 8005e78:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005e80:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e84:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	68da      	ldr	r2, [r3, #12]
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	69db      	ldr	r3, [r3, #28]
 8005e8e:	021b      	lsls	r3, r3, #8
 8005e90:	4313      	orrs	r3, r2
 8005e92:	693a      	ldr	r2, [r7, #16]
 8005e94:	4313      	orrs	r3, r2
 8005e96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	691b      	ldr	r3, [r3, #16]
 8005e9c:	011a      	lsls	r2, r3, #4
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	6a1b      	ldr	r3, [r3, #32]
 8005ea2:	031b      	lsls	r3, r3, #12
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	693a      	ldr	r2, [r7, #16]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005eb2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	685a      	ldr	r2, [r3, #4]
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	695b      	ldr	r3, [r3, #20]
 8005ebc:	011b      	lsls	r3, r3, #4
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	68fa      	ldr	r2, [r7, #12]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	697a      	ldr	r2, [r7, #20]
 8005ecc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	693a      	ldr	r2, [r7, #16]
 8005ed4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	68fa      	ldr	r2, [r7, #12]
 8005edc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2201      	movs	r2, #1
 8005eea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2201      	movs	r2, #1
 8005f02:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f0e:	2300      	movs	r3, #0
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3718      	adds	r7, #24
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b084      	sub	sp, #16
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005f28:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005f30:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f38:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005f40:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d110      	bne.n	8005f6a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f48:	7bfb      	ldrb	r3, [r7, #15]
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d102      	bne.n	8005f54 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005f4e:	7b7b      	ldrb	r3, [r7, #13]
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d001      	beq.n	8005f58 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	e069      	b.n	800602c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2202      	movs	r2, #2
 8005f5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2202      	movs	r2, #2
 8005f64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f68:	e031      	b.n	8005fce <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	2b04      	cmp	r3, #4
 8005f6e:	d110      	bne.n	8005f92 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f70:	7bbb      	ldrb	r3, [r7, #14]
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d102      	bne.n	8005f7c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005f76:	7b3b      	ldrb	r3, [r7, #12]
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d001      	beq.n	8005f80 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e055      	b.n	800602c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2202      	movs	r2, #2
 8005f84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2202      	movs	r2, #2
 8005f8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005f90:	e01d      	b.n	8005fce <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f92:	7bfb      	ldrb	r3, [r7, #15]
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d108      	bne.n	8005faa <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f98:	7bbb      	ldrb	r3, [r7, #14]
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d105      	bne.n	8005faa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f9e:	7b7b      	ldrb	r3, [r7, #13]
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d102      	bne.n	8005faa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005fa4:	7b3b      	ldrb	r3, [r7, #12]
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d001      	beq.n	8005fae <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	e03e      	b.n	800602c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2202      	movs	r2, #2
 8005fb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2202      	movs	r2, #2
 8005fba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2202      	movs	r2, #2
 8005fc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2202      	movs	r2, #2
 8005fca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d003      	beq.n	8005fdc <HAL_TIM_Encoder_Start+0xc4>
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	2b04      	cmp	r3, #4
 8005fd8:	d008      	beq.n	8005fec <HAL_TIM_Encoder_Start+0xd4>
 8005fda:	e00f      	b.n	8005ffc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	2100      	movs	r1, #0
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f000 f9b1 	bl	800634c <TIM_CCxChannelCmd>
      break;
 8005fea:	e016      	b.n	800601a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	2104      	movs	r1, #4
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f000 f9a9 	bl	800634c <TIM_CCxChannelCmd>
      break;
 8005ffa:	e00e      	b.n	800601a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	2201      	movs	r2, #1
 8006002:	2100      	movs	r1, #0
 8006004:	4618      	mov	r0, r3
 8006006:	f000 f9a1 	bl	800634c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	2201      	movs	r2, #1
 8006010:	2104      	movs	r1, #4
 8006012:	4618      	mov	r0, r3
 8006014:	f000 f99a 	bl	800634c <TIM_CCxChannelCmd>
      break;
 8006018:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f042 0201 	orr.w	r2, r2, #1
 8006028:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800602a:	2300      	movs	r3, #0
}
 800602c:	4618      	mov	r0, r3
 800602e:	3710      	adds	r7, #16
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	68db      	ldr	r3, [r3, #12]
 8006042:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	691b      	ldr	r3, [r3, #16]
 800604a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	f003 0302 	and.w	r3, r3, #2
 8006052:	2b00      	cmp	r3, #0
 8006054:	d020      	beq.n	8006098 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f003 0302 	and.w	r3, r3, #2
 800605c:	2b00      	cmp	r3, #0
 800605e:	d01b      	beq.n	8006098 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f06f 0202 	mvn.w	r2, #2
 8006068:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2201      	movs	r2, #1
 800606e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	699b      	ldr	r3, [r3, #24]
 8006076:	f003 0303 	and.w	r3, r3, #3
 800607a:	2b00      	cmp	r3, #0
 800607c:	d003      	beq.n	8006086 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 f8da 	bl	8006238 <HAL_TIM_IC_CaptureCallback>
 8006084:	e005      	b.n	8006092 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 f8cd 	bl	8006226 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 f8dc 	bl	800624a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	f003 0304 	and.w	r3, r3, #4
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d020      	beq.n	80060e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f003 0304 	and.w	r3, r3, #4
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d01b      	beq.n	80060e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f06f 0204 	mvn.w	r2, #4
 80060b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2202      	movs	r2, #2
 80060ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	699b      	ldr	r3, [r3, #24]
 80060c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d003      	beq.n	80060d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 f8b4 	bl	8006238 <HAL_TIM_IC_CaptureCallback>
 80060d0:	e005      	b.n	80060de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 f8a7 	bl	8006226 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f000 f8b6 	bl	800624a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2200      	movs	r2, #0
 80060e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	f003 0308 	and.w	r3, r3, #8
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d020      	beq.n	8006130 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f003 0308 	and.w	r3, r3, #8
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d01b      	beq.n	8006130 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f06f 0208 	mvn.w	r2, #8
 8006100:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2204      	movs	r2, #4
 8006106:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	69db      	ldr	r3, [r3, #28]
 800610e:	f003 0303 	and.w	r3, r3, #3
 8006112:	2b00      	cmp	r3, #0
 8006114:	d003      	beq.n	800611e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f000 f88e 	bl	8006238 <HAL_TIM_IC_CaptureCallback>
 800611c:	e005      	b.n	800612a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 f881 	bl	8006226 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f000 f890 	bl	800624a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2200      	movs	r2, #0
 800612e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	f003 0310 	and.w	r3, r3, #16
 8006136:	2b00      	cmp	r3, #0
 8006138:	d020      	beq.n	800617c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f003 0310 	and.w	r3, r3, #16
 8006140:	2b00      	cmp	r3, #0
 8006142:	d01b      	beq.n	800617c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f06f 0210 	mvn.w	r2, #16
 800614c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2208      	movs	r2, #8
 8006152:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	69db      	ldr	r3, [r3, #28]
 800615a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800615e:	2b00      	cmp	r3, #0
 8006160:	d003      	beq.n	800616a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 f868 	bl	8006238 <HAL_TIM_IC_CaptureCallback>
 8006168:	e005      	b.n	8006176 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 f85b 	bl	8006226 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f000 f86a 	bl	800624a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	f003 0301 	and.w	r3, r3, #1
 8006182:	2b00      	cmp	r3, #0
 8006184:	d00c      	beq.n	80061a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f003 0301 	and.w	r3, r3, #1
 800618c:	2b00      	cmp	r3, #0
 800618e:	d007      	beq.n	80061a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f06f 0201 	mvn.w	r2, #1
 8006198:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 f83a 	bl	8006214 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d00c      	beq.n	80061c4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d007      	beq.n	80061c4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80061bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 f94f 	bl	8006462 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d00c      	beq.n	80061e8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d007      	beq.n	80061e8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80061e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 f83a 	bl	800625c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	f003 0320 	and.w	r3, r3, #32
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00c      	beq.n	800620c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f003 0320 	and.w	r3, r3, #32
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d007      	beq.n	800620c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f06f 0220 	mvn.w	r2, #32
 8006204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 f922 	bl	8006450 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800620c:	bf00      	nop
 800620e:	3710      	adds	r7, #16
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006214:	b480      	push	{r7}
 8006216:	b083      	sub	sp, #12
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800621c:	bf00      	nop
 800621e:	370c      	adds	r7, #12
 8006220:	46bd      	mov	sp, r7
 8006222:	bc80      	pop	{r7}
 8006224:	4770      	bx	lr

08006226 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006226:	b480      	push	{r7}
 8006228:	b083      	sub	sp, #12
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800622e:	bf00      	nop
 8006230:	370c      	adds	r7, #12
 8006232:	46bd      	mov	sp, r7
 8006234:	bc80      	pop	{r7}
 8006236:	4770      	bx	lr

08006238 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006238:	b480      	push	{r7}
 800623a:	b083      	sub	sp, #12
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006240:	bf00      	nop
 8006242:	370c      	adds	r7, #12
 8006244:	46bd      	mov	sp, r7
 8006246:	bc80      	pop	{r7}
 8006248:	4770      	bx	lr

0800624a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800624a:	b480      	push	{r7}
 800624c:	b083      	sub	sp, #12
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006252:	bf00      	nop
 8006254:	370c      	adds	r7, #12
 8006256:	46bd      	mov	sp, r7
 8006258:	bc80      	pop	{r7}
 800625a:	4770      	bx	lr

0800625c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006264:	bf00      	nop
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	bc80      	pop	{r7}
 800626c:	4770      	bx	lr
	...

08006270 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006270:	b480      	push	{r7}
 8006272:	b085      	sub	sp, #20
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	4a2f      	ldr	r2, [pc, #188]	@ (8006340 <TIM_Base_SetConfig+0xd0>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d00b      	beq.n	80062a0 <TIM_Base_SetConfig+0x30>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800628e:	d007      	beq.n	80062a0 <TIM_Base_SetConfig+0x30>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	4a2c      	ldr	r2, [pc, #176]	@ (8006344 <TIM_Base_SetConfig+0xd4>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d003      	beq.n	80062a0 <TIM_Base_SetConfig+0x30>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	4a2b      	ldr	r2, [pc, #172]	@ (8006348 <TIM_Base_SetConfig+0xd8>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d108      	bne.n	80062b2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	68fa      	ldr	r2, [r7, #12]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	4a22      	ldr	r2, [pc, #136]	@ (8006340 <TIM_Base_SetConfig+0xd0>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d00b      	beq.n	80062d2 <TIM_Base_SetConfig+0x62>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062c0:	d007      	beq.n	80062d2 <TIM_Base_SetConfig+0x62>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	4a1f      	ldr	r2, [pc, #124]	@ (8006344 <TIM_Base_SetConfig+0xd4>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d003      	beq.n	80062d2 <TIM_Base_SetConfig+0x62>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	4a1e      	ldr	r2, [pc, #120]	@ (8006348 <TIM_Base_SetConfig+0xd8>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d108      	bne.n	80062e4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	68db      	ldr	r3, [r3, #12]
 80062de:	68fa      	ldr	r2, [r7, #12]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	695b      	ldr	r3, [r3, #20]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	68fa      	ldr	r2, [r7, #12]
 80062f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	689a      	ldr	r2, [r3, #8]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	4a0d      	ldr	r2, [pc, #52]	@ (8006340 <TIM_Base_SetConfig+0xd0>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d103      	bne.n	8006318 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	691a      	ldr	r2, [r3, #16]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2201      	movs	r2, #1
 800631c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	f003 0301 	and.w	r3, r3, #1
 8006326:	2b00      	cmp	r3, #0
 8006328:	d005      	beq.n	8006336 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	691b      	ldr	r3, [r3, #16]
 800632e:	f023 0201 	bic.w	r2, r3, #1
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	611a      	str	r2, [r3, #16]
  }
}
 8006336:	bf00      	nop
 8006338:	3714      	adds	r7, #20
 800633a:	46bd      	mov	sp, r7
 800633c:	bc80      	pop	{r7}
 800633e:	4770      	bx	lr
 8006340:	40012c00 	.word	0x40012c00
 8006344:	40000400 	.word	0x40000400
 8006348:	40000800 	.word	0x40000800

0800634c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800634c:	b480      	push	{r7}
 800634e:	b087      	sub	sp, #28
 8006350:	af00      	add	r7, sp, #0
 8006352:	60f8      	str	r0, [r7, #12]
 8006354:	60b9      	str	r1, [r7, #8]
 8006356:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	f003 031f 	and.w	r3, r3, #31
 800635e:	2201      	movs	r2, #1
 8006360:	fa02 f303 	lsl.w	r3, r2, r3
 8006364:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6a1a      	ldr	r2, [r3, #32]
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	43db      	mvns	r3, r3
 800636e:	401a      	ands	r2, r3
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	6a1a      	ldr	r2, [r3, #32]
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	f003 031f 	and.w	r3, r3, #31
 800637e:	6879      	ldr	r1, [r7, #4]
 8006380:	fa01 f303 	lsl.w	r3, r1, r3
 8006384:	431a      	orrs	r2, r3
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	621a      	str	r2, [r3, #32]
}
 800638a:	bf00      	nop
 800638c:	371c      	adds	r7, #28
 800638e:	46bd      	mov	sp, r7
 8006390:	bc80      	pop	{r7}
 8006392:	4770      	bx	lr

08006394 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006394:	b480      	push	{r7}
 8006396:	b085      	sub	sp, #20
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d101      	bne.n	80063ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063a8:	2302      	movs	r3, #2
 80063aa:	e046      	b.n	800643a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2202      	movs	r2, #2
 80063b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	68fa      	ldr	r2, [r7, #12]
 80063da:	4313      	orrs	r3, r2
 80063dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	68fa      	ldr	r2, [r7, #12]
 80063e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a16      	ldr	r2, [pc, #88]	@ (8006444 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d00e      	beq.n	800640e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063f8:	d009      	beq.n	800640e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a12      	ldr	r2, [pc, #72]	@ (8006448 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d004      	beq.n	800640e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a10      	ldr	r2, [pc, #64]	@ (800644c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d10c      	bne.n	8006428 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006414:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	68ba      	ldr	r2, [r7, #8]
 800641c:	4313      	orrs	r3, r2
 800641e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	68ba      	ldr	r2, [r7, #8]
 8006426:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2201      	movs	r2, #1
 800642c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2200      	movs	r2, #0
 8006434:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006438:	2300      	movs	r3, #0
}
 800643a:	4618      	mov	r0, r3
 800643c:	3714      	adds	r7, #20
 800643e:	46bd      	mov	sp, r7
 8006440:	bc80      	pop	{r7}
 8006442:	4770      	bx	lr
 8006444:	40012c00 	.word	0x40012c00
 8006448:	40000400 	.word	0x40000400
 800644c:	40000800 	.word	0x40000800

08006450 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006450:	b480      	push	{r7}
 8006452:	b083      	sub	sp, #12
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006458:	bf00      	nop
 800645a:	370c      	adds	r7, #12
 800645c:	46bd      	mov	sp, r7
 800645e:	bc80      	pop	{r7}
 8006460:	4770      	bx	lr

08006462 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006462:	b480      	push	{r7}
 8006464:	b083      	sub	sp, #12
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800646a:	bf00      	nop
 800646c:	370c      	adds	r7, #12
 800646e:	46bd      	mov	sp, r7
 8006470:	bc80      	pop	{r7}
 8006472:	4770      	bx	lr

08006474 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b082      	sub	sp, #8
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d101      	bne.n	8006486 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	e042      	b.n	800650c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800648c:	b2db      	uxtb	r3, r3
 800648e:	2b00      	cmp	r3, #0
 8006490:	d106      	bne.n	80064a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2200      	movs	r2, #0
 8006496:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f7fd f944 	bl	8003728 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2224      	movs	r2, #36	@ 0x24
 80064a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	68da      	ldr	r2, [r3, #12]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80064b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 ff4f 	bl	800735c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	691a      	ldr	r2, [r3, #16]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80064cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	695a      	ldr	r2, [r3, #20]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80064dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	68da      	ldr	r2, [r3, #12]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80064ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2220      	movs	r2, #32
 80064f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2220      	movs	r2, #32
 8006500:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800650a:	2300      	movs	r3, #0
}
 800650c:	4618      	mov	r0, r3
 800650e:	3708      	adds	r7, #8
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}

08006514 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b08a      	sub	sp, #40	@ 0x28
 8006518:	af02      	add	r7, sp, #8
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	603b      	str	r3, [r7, #0]
 8006520:	4613      	mov	r3, r2
 8006522:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006524:	2300      	movs	r3, #0
 8006526:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800652e:	b2db      	uxtb	r3, r3
 8006530:	2b20      	cmp	r3, #32
 8006532:	d175      	bne.n	8006620 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d002      	beq.n	8006540 <HAL_UART_Transmit+0x2c>
 800653a:	88fb      	ldrh	r3, [r7, #6]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d101      	bne.n	8006544 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	e06e      	b.n	8006622 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2200      	movs	r2, #0
 8006548:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2221      	movs	r2, #33	@ 0x21
 800654e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006552:	f7fd fa4f 	bl	80039f4 <HAL_GetTick>
 8006556:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	88fa      	ldrh	r2, [r7, #6]
 800655c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	88fa      	ldrh	r2, [r7, #6]
 8006562:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800656c:	d108      	bne.n	8006580 <HAL_UART_Transmit+0x6c>
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d104      	bne.n	8006580 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006576:	2300      	movs	r3, #0
 8006578:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	61bb      	str	r3, [r7, #24]
 800657e:	e003      	b.n	8006588 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006584:	2300      	movs	r3, #0
 8006586:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006588:	e02e      	b.n	80065e8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	9300      	str	r3, [sp, #0]
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	2200      	movs	r2, #0
 8006592:	2180      	movs	r1, #128	@ 0x80
 8006594:	68f8      	ldr	r0, [r7, #12]
 8006596:	f000 fc2c 	bl	8006df2 <UART_WaitOnFlagUntilTimeout>
 800659a:	4603      	mov	r3, r0
 800659c:	2b00      	cmp	r3, #0
 800659e:	d005      	beq.n	80065ac <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2220      	movs	r2, #32
 80065a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80065a8:	2303      	movs	r3, #3
 80065aa:	e03a      	b.n	8006622 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80065ac:	69fb      	ldr	r3, [r7, #28]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d10b      	bne.n	80065ca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80065b2:	69bb      	ldr	r3, [r7, #24]
 80065b4:	881b      	ldrh	r3, [r3, #0]
 80065b6:	461a      	mov	r2, r3
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80065c2:	69bb      	ldr	r3, [r7, #24]
 80065c4:	3302      	adds	r3, #2
 80065c6:	61bb      	str	r3, [r7, #24]
 80065c8:	e007      	b.n	80065da <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80065ca:	69fb      	ldr	r3, [r7, #28]
 80065cc:	781a      	ldrb	r2, [r3, #0]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80065d4:	69fb      	ldr	r3, [r7, #28]
 80065d6:	3301      	adds	r3, #1
 80065d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80065de:	b29b      	uxth	r3, r3
 80065e0:	3b01      	subs	r3, #1
 80065e2:	b29a      	uxth	r2, r3
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d1cb      	bne.n	800658a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	9300      	str	r3, [sp, #0]
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	2200      	movs	r2, #0
 80065fa:	2140      	movs	r1, #64	@ 0x40
 80065fc:	68f8      	ldr	r0, [r7, #12]
 80065fe:	f000 fbf8 	bl	8006df2 <UART_WaitOnFlagUntilTimeout>
 8006602:	4603      	mov	r3, r0
 8006604:	2b00      	cmp	r3, #0
 8006606:	d005      	beq.n	8006614 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2220      	movs	r2, #32
 800660c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006610:	2303      	movs	r3, #3
 8006612:	e006      	b.n	8006622 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2220      	movs	r2, #32
 8006618:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800661c:	2300      	movs	r3, #0
 800661e:	e000      	b.n	8006622 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006620:	2302      	movs	r3, #2
  }
}
 8006622:	4618      	mov	r0, r3
 8006624:	3720      	adds	r7, #32
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}

0800662a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800662a:	b580      	push	{r7, lr}
 800662c:	b084      	sub	sp, #16
 800662e:	af00      	add	r7, sp, #0
 8006630:	60f8      	str	r0, [r7, #12]
 8006632:	60b9      	str	r1, [r7, #8]
 8006634:	4613      	mov	r3, r2
 8006636:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800663e:	b2db      	uxtb	r3, r3
 8006640:	2b20      	cmp	r3, #32
 8006642:	d112      	bne.n	800666a <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d002      	beq.n	8006650 <HAL_UART_Receive_DMA+0x26>
 800664a:	88fb      	ldrh	r3, [r7, #6]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d101      	bne.n	8006654 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	e00b      	b.n	800666c <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2200      	movs	r2, #0
 8006658:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800665a:	88fb      	ldrh	r3, [r7, #6]
 800665c:	461a      	mov	r2, r3
 800665e:	68b9      	ldr	r1, [r7, #8]
 8006660:	68f8      	ldr	r0, [r7, #12]
 8006662:	f000 fc1f 	bl	8006ea4 <UART_Start_Receive_DMA>
 8006666:	4603      	mov	r3, r0
 8006668:	e000      	b.n	800666c <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800666a:	2302      	movs	r3, #2
  }
}
 800666c:	4618      	mov	r0, r3
 800666e:	3710      	adds	r7, #16
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}

08006674 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b0ba      	sub	sp, #232	@ 0xe8
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	695b      	ldr	r3, [r3, #20]
 8006696:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800669a:	2300      	movs	r3, #0
 800669c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80066a0:	2300      	movs	r3, #0
 80066a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80066a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066aa:	f003 030f 	and.w	r3, r3, #15
 80066ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80066b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d10f      	bne.n	80066da <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80066ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066be:	f003 0320 	and.w	r3, r3, #32
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d009      	beq.n	80066da <HAL_UART_IRQHandler+0x66>
 80066c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066ca:	f003 0320 	and.w	r3, r3, #32
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d003      	beq.n	80066da <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 fd84 	bl	80071e0 <UART_Receive_IT>
      return;
 80066d8:	e25b      	b.n	8006b92 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80066da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80066de:	2b00      	cmp	r3, #0
 80066e0:	f000 80de 	beq.w	80068a0 <HAL_UART_IRQHandler+0x22c>
 80066e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066e8:	f003 0301 	and.w	r3, r3, #1
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d106      	bne.n	80066fe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80066f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066f4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	f000 80d1 	beq.w	80068a0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80066fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006702:	f003 0301 	and.w	r3, r3, #1
 8006706:	2b00      	cmp	r3, #0
 8006708:	d00b      	beq.n	8006722 <HAL_UART_IRQHandler+0xae>
 800670a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800670e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006712:	2b00      	cmp	r3, #0
 8006714:	d005      	beq.n	8006722 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800671a:	f043 0201 	orr.w	r2, r3, #1
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006726:	f003 0304 	and.w	r3, r3, #4
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00b      	beq.n	8006746 <HAL_UART_IRQHandler+0xd2>
 800672e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006732:	f003 0301 	and.w	r3, r3, #1
 8006736:	2b00      	cmp	r3, #0
 8006738:	d005      	beq.n	8006746 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800673e:	f043 0202 	orr.w	r2, r3, #2
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800674a:	f003 0302 	and.w	r3, r3, #2
 800674e:	2b00      	cmp	r3, #0
 8006750:	d00b      	beq.n	800676a <HAL_UART_IRQHandler+0xf6>
 8006752:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006756:	f003 0301 	and.w	r3, r3, #1
 800675a:	2b00      	cmp	r3, #0
 800675c:	d005      	beq.n	800676a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006762:	f043 0204 	orr.w	r2, r3, #4
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800676a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800676e:	f003 0308 	and.w	r3, r3, #8
 8006772:	2b00      	cmp	r3, #0
 8006774:	d011      	beq.n	800679a <HAL_UART_IRQHandler+0x126>
 8006776:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800677a:	f003 0320 	and.w	r3, r3, #32
 800677e:	2b00      	cmp	r3, #0
 8006780:	d105      	bne.n	800678e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006782:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006786:	f003 0301 	and.w	r3, r3, #1
 800678a:	2b00      	cmp	r3, #0
 800678c:	d005      	beq.n	800679a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006792:	f043 0208 	orr.w	r2, r3, #8
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800679e:	2b00      	cmp	r3, #0
 80067a0:	f000 81f2 	beq.w	8006b88 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80067a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067a8:	f003 0320 	and.w	r3, r3, #32
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d008      	beq.n	80067c2 <HAL_UART_IRQHandler+0x14e>
 80067b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067b4:	f003 0320 	and.w	r3, r3, #32
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d002      	beq.n	80067c2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f000 fd0f 	bl	80071e0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	695b      	ldr	r3, [r3, #20]
 80067c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	bf14      	ite	ne
 80067d0:	2301      	movne	r3, #1
 80067d2:	2300      	moveq	r3, #0
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067de:	f003 0308 	and.w	r3, r3, #8
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d103      	bne.n	80067ee <HAL_UART_IRQHandler+0x17a>
 80067e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d04f      	beq.n	800688e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f000 fc19 	bl	8007026 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	695b      	ldr	r3, [r3, #20]
 80067fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d041      	beq.n	8006886 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	3314      	adds	r3, #20
 8006808:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800680c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006810:	e853 3f00 	ldrex	r3, [r3]
 8006814:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006818:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800681c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006820:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	3314      	adds	r3, #20
 800682a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800682e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006832:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006836:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800683a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800683e:	e841 2300 	strex	r3, r2, [r1]
 8006842:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006846:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800684a:	2b00      	cmp	r3, #0
 800684c:	d1d9      	bne.n	8006802 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006852:	2b00      	cmp	r3, #0
 8006854:	d013      	beq.n	800687e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800685a:	4a7e      	ldr	r2, [pc, #504]	@ (8006a54 <HAL_UART_IRQHandler+0x3e0>)
 800685c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006862:	4618      	mov	r0, r3
 8006864:	f7fd faf8 	bl	8003e58 <HAL_DMA_Abort_IT>
 8006868:	4603      	mov	r3, r0
 800686a:	2b00      	cmp	r3, #0
 800686c:	d016      	beq.n	800689c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006872:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006878:	4610      	mov	r0, r2
 800687a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800687c:	e00e      	b.n	800689c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 f9a5 	bl	8006bce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006884:	e00a      	b.n	800689c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f000 f9a1 	bl	8006bce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800688c:	e006      	b.n	800689c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f000 f99d 	bl	8006bce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800689a:	e175      	b.n	8006b88 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800689c:	bf00      	nop
    return;
 800689e:	e173      	b.n	8006b88 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	f040 814f 	bne.w	8006b48 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80068aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068ae:	f003 0310 	and.w	r3, r3, #16
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	f000 8148 	beq.w	8006b48 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80068b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068bc:	f003 0310 	and.w	r3, r3, #16
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	f000 8141 	beq.w	8006b48 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80068c6:	2300      	movs	r3, #0
 80068c8:	60bb      	str	r3, [r7, #8]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	60bb      	str	r3, [r7, #8]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	60bb      	str	r3, [r7, #8]
 80068da:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	695b      	ldr	r3, [r3, #20]
 80068e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	f000 80b6 	beq.w	8006a58 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80068f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	f000 8145 	beq.w	8006b8c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006906:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800690a:	429a      	cmp	r2, r3
 800690c:	f080 813e 	bcs.w	8006b8c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006916:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800691c:	699b      	ldr	r3, [r3, #24]
 800691e:	2b20      	cmp	r3, #32
 8006920:	f000 8088 	beq.w	8006a34 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	330c      	adds	r3, #12
 800692a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006932:	e853 3f00 	ldrex	r3, [r3]
 8006936:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800693a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800693e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006942:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	330c      	adds	r3, #12
 800694c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006950:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006954:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006958:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800695c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006960:	e841 2300 	strex	r3, r2, [r1]
 8006964:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006968:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800696c:	2b00      	cmp	r3, #0
 800696e:	d1d9      	bne.n	8006924 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	3314      	adds	r3, #20
 8006976:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006978:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800697a:	e853 3f00 	ldrex	r3, [r3]
 800697e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006980:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006982:	f023 0301 	bic.w	r3, r3, #1
 8006986:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	3314      	adds	r3, #20
 8006990:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006994:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006998:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800699a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800699c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80069a0:	e841 2300 	strex	r3, r2, [r1]
 80069a4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80069a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d1e1      	bne.n	8006970 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	3314      	adds	r3, #20
 80069b2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80069b6:	e853 3f00 	ldrex	r3, [r3]
 80069ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80069bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80069be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	3314      	adds	r3, #20
 80069cc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80069d0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80069d2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80069d6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80069d8:	e841 2300 	strex	r3, r2, [r1]
 80069dc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80069de:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d1e3      	bne.n	80069ac <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2220      	movs	r2, #32
 80069e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2200      	movs	r2, #0
 80069f0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	330c      	adds	r3, #12
 80069f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069fc:	e853 3f00 	ldrex	r3, [r3]
 8006a00:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006a02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a04:	f023 0310 	bic.w	r3, r3, #16
 8006a08:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	330c      	adds	r3, #12
 8006a12:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006a16:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006a18:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a1a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006a1c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006a1e:	e841 2300 	strex	r3, r2, [r1]
 8006a22:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006a24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d1e3      	bne.n	80069f2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f7fd f9d6 	bl	8003de0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2202      	movs	r2, #2
 8006a38:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	1ad3      	subs	r3, r2, r3
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	4619      	mov	r1, r3
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 f8c8 	bl	8006be0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006a50:	e09c      	b.n	8006b8c <HAL_UART_IRQHandler+0x518>
 8006a52:	bf00      	nop
 8006a54:	080070eb 	.word	0x080070eb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	1ad3      	subs	r3, r2, r3
 8006a64:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	f000 808e 	beq.w	8006b90 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006a74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	f000 8089 	beq.w	8006b90 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	330c      	adds	r3, #12
 8006a84:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a88:	e853 3f00 	ldrex	r3, [r3]
 8006a8c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006a8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a94:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	330c      	adds	r3, #12
 8006a9e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006aa2:	647a      	str	r2, [r7, #68]	@ 0x44
 8006aa4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006aa8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006aaa:	e841 2300 	strex	r3, r2, [r1]
 8006aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006ab0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d1e3      	bne.n	8006a7e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	3314      	adds	r3, #20
 8006abc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac0:	e853 3f00 	ldrex	r3, [r3]
 8006ac4:	623b      	str	r3, [r7, #32]
   return(result);
 8006ac6:	6a3b      	ldr	r3, [r7, #32]
 8006ac8:	f023 0301 	bic.w	r3, r3, #1
 8006acc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	3314      	adds	r3, #20
 8006ad6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006ada:	633a      	str	r2, [r7, #48]	@ 0x30
 8006adc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ade:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ae0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ae2:	e841 2300 	strex	r3, r2, [r1]
 8006ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006ae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d1e3      	bne.n	8006ab6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2220      	movs	r2, #32
 8006af2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2200      	movs	r2, #0
 8006afa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	330c      	adds	r3, #12
 8006b02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	e853 3f00 	ldrex	r3, [r3]
 8006b0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f023 0310 	bic.w	r3, r3, #16
 8006b12:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	330c      	adds	r3, #12
 8006b1c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006b20:	61fa      	str	r2, [r7, #28]
 8006b22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b24:	69b9      	ldr	r1, [r7, #24]
 8006b26:	69fa      	ldr	r2, [r7, #28]
 8006b28:	e841 2300 	strex	r3, r2, [r1]
 8006b2c:	617b      	str	r3, [r7, #20]
   return(result);
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d1e3      	bne.n	8006afc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2202      	movs	r2, #2
 8006b38:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006b3a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006b3e:	4619      	mov	r1, r3
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f000 f84d 	bl	8006be0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006b46:	e023      	b.n	8006b90 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006b48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d009      	beq.n	8006b68 <HAL_UART_IRQHandler+0x4f4>
 8006b54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d003      	beq.n	8006b68 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 fad6 	bl	8007112 <UART_Transmit_IT>
    return;
 8006b66:	e014      	b.n	8006b92 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006b68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d00e      	beq.n	8006b92 <HAL_UART_IRQHandler+0x51e>
 8006b74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d008      	beq.n	8006b92 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f000 fb15 	bl	80071b0 <UART_EndTransmit_IT>
    return;
 8006b86:	e004      	b.n	8006b92 <HAL_UART_IRQHandler+0x51e>
    return;
 8006b88:	bf00      	nop
 8006b8a:	e002      	b.n	8006b92 <HAL_UART_IRQHandler+0x51e>
      return;
 8006b8c:	bf00      	nop
 8006b8e:	e000      	b.n	8006b92 <HAL_UART_IRQHandler+0x51e>
      return;
 8006b90:	bf00      	nop
  }
}
 8006b92:	37e8      	adds	r7, #232	@ 0xe8
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}

08006b98 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006ba0:	bf00      	nop
 8006ba2:	370c      	adds	r7, #12
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bc80      	pop	{r7}
 8006ba8:	4770      	bx	lr

08006baa <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006baa:	b480      	push	{r7}
 8006bac:	b083      	sub	sp, #12
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006bb2:	bf00      	nop
 8006bb4:	370c      	adds	r7, #12
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bc80      	pop	{r7}
 8006bba:	4770      	bx	lr

08006bbc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b083      	sub	sp, #12
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006bc4:	bf00      	nop
 8006bc6:	370c      	adds	r7, #12
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bc80      	pop	{r7}
 8006bcc:	4770      	bx	lr

08006bce <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006bce:	b480      	push	{r7}
 8006bd0:	b083      	sub	sp, #12
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006bd6:	bf00      	nop
 8006bd8:	370c      	adds	r7, #12
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bc80      	pop	{r7}
 8006bde:	4770      	bx	lr

08006be0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	460b      	mov	r3, r1
 8006bea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006bec:	bf00      	nop
 8006bee:	370c      	adds	r7, #12
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bc80      	pop	{r7}
 8006bf4:	4770      	bx	lr

08006bf6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006bf6:	b580      	push	{r7, lr}
 8006bf8:	b09c      	sub	sp, #112	@ 0x70
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c02:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f003 0320 	and.w	r3, r3, #32
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d172      	bne.n	8006cf8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006c12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c14:	2200      	movs	r2, #0
 8006c16:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	330c      	adds	r3, #12
 8006c1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c22:	e853 3f00 	ldrex	r3, [r3]
 8006c26:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006c28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c2a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c2e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006c30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	330c      	adds	r3, #12
 8006c36:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006c38:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006c3a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c3c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006c3e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006c40:	e841 2300 	strex	r3, r2, [r1]
 8006c44:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006c46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d1e5      	bne.n	8006c18 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	3314      	adds	r3, #20
 8006c52:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c56:	e853 3f00 	ldrex	r3, [r3]
 8006c5a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006c5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c5e:	f023 0301 	bic.w	r3, r3, #1
 8006c62:	667b      	str	r3, [r7, #100]	@ 0x64
 8006c64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	3314      	adds	r3, #20
 8006c6a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006c6c:	647a      	str	r2, [r7, #68]	@ 0x44
 8006c6e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c70:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006c72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c74:	e841 2300 	strex	r3, r2, [r1]
 8006c78:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006c7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d1e5      	bne.n	8006c4c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	3314      	adds	r3, #20
 8006c86:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c8a:	e853 3f00 	ldrex	r3, [r3]
 8006c8e:	623b      	str	r3, [r7, #32]
   return(result);
 8006c90:	6a3b      	ldr	r3, [r7, #32]
 8006c92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c96:	663b      	str	r3, [r7, #96]	@ 0x60
 8006c98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	3314      	adds	r3, #20
 8006c9e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006ca0:	633a      	str	r2, [r7, #48]	@ 0x30
 8006ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ca6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ca8:	e841 2300 	strex	r3, r2, [r1]
 8006cac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d1e5      	bne.n	8006c80 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006cb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006cb6:	2220      	movs	r2, #32
 8006cb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d119      	bne.n	8006cf8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cc4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	330c      	adds	r3, #12
 8006cca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	e853 3f00 	ldrex	r3, [r3]
 8006cd2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f023 0310 	bic.w	r3, r3, #16
 8006cda:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006cdc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	330c      	adds	r3, #12
 8006ce2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006ce4:	61fa      	str	r2, [r7, #28]
 8006ce6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce8:	69b9      	ldr	r1, [r7, #24]
 8006cea:	69fa      	ldr	r2, [r7, #28]
 8006cec:	e841 2300 	strex	r3, r2, [r1]
 8006cf0:	617b      	str	r3, [r7, #20]
   return(result);
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d1e5      	bne.n	8006cc4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006cf8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cfe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	d106      	bne.n	8006d14 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d08:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006d0a:	4619      	mov	r1, r3
 8006d0c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006d0e:	f7ff ff67 	bl	8006be0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006d12:	e002      	b.n	8006d1a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006d14:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006d16:	f7ff ff48 	bl	8006baa <HAL_UART_RxCpltCallback>
}
 8006d1a:	bf00      	nop
 8006d1c:	3770      	adds	r7, #112	@ 0x70
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}

08006d22 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006d22:	b580      	push	{r7, lr}
 8006d24:	b084      	sub	sp, #16
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d2e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2201      	movs	r2, #1
 8006d34:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	d108      	bne.n	8006d50 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006d42:	085b      	lsrs	r3, r3, #1
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	4619      	mov	r1, r3
 8006d48:	68f8      	ldr	r0, [r7, #12]
 8006d4a:	f7ff ff49 	bl	8006be0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006d4e:	e002      	b.n	8006d56 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006d50:	68f8      	ldr	r0, [r7, #12]
 8006d52:	f7ff ff33 	bl	8006bbc <HAL_UART_RxHalfCpltCallback>
}
 8006d56:	bf00      	nop
 8006d58:	3710      	adds	r7, #16
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}

08006d5e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006d5e:	b580      	push	{r7, lr}
 8006d60:	b084      	sub	sp, #16
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006d66:	2300      	movs	r3, #0
 8006d68:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d6e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	695b      	ldr	r3, [r3, #20]
 8006d76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	bf14      	ite	ne
 8006d7e:	2301      	movne	r3, #1
 8006d80:	2300      	moveq	r3, #0
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	2b21      	cmp	r3, #33	@ 0x21
 8006d90:	d108      	bne.n	8006da4 <UART_DMAError+0x46>
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d005      	beq.n	8006da4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006d9e:	68b8      	ldr	r0, [r7, #8]
 8006da0:	f000 f91a 	bl	8006fd8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	695b      	ldr	r3, [r3, #20]
 8006daa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	bf14      	ite	ne
 8006db2:	2301      	movne	r3, #1
 8006db4:	2300      	moveq	r3, #0
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006dc0:	b2db      	uxtb	r3, r3
 8006dc2:	2b22      	cmp	r3, #34	@ 0x22
 8006dc4:	d108      	bne.n	8006dd8 <UART_DMAError+0x7a>
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d005      	beq.n	8006dd8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006dd2:	68b8      	ldr	r0, [r7, #8]
 8006dd4:	f000 f927 	bl	8007026 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ddc:	f043 0210 	orr.w	r2, r3, #16
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006de4:	68b8      	ldr	r0, [r7, #8]
 8006de6:	f7ff fef2 	bl	8006bce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006dea:	bf00      	nop
 8006dec:	3710      	adds	r7, #16
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}

08006df2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006df2:	b580      	push	{r7, lr}
 8006df4:	b086      	sub	sp, #24
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	60f8      	str	r0, [r7, #12]
 8006dfa:	60b9      	str	r1, [r7, #8]
 8006dfc:	603b      	str	r3, [r7, #0]
 8006dfe:	4613      	mov	r3, r2
 8006e00:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e02:	e03b      	b.n	8006e7c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e04:	6a3b      	ldr	r3, [r7, #32]
 8006e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e0a:	d037      	beq.n	8006e7c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e0c:	f7fc fdf2 	bl	80039f4 <HAL_GetTick>
 8006e10:	4602      	mov	r2, r0
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	1ad3      	subs	r3, r2, r3
 8006e16:	6a3a      	ldr	r2, [r7, #32]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d302      	bcc.n	8006e22 <UART_WaitOnFlagUntilTimeout+0x30>
 8006e1c:	6a3b      	ldr	r3, [r7, #32]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d101      	bne.n	8006e26 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006e22:	2303      	movs	r3, #3
 8006e24:	e03a      	b.n	8006e9c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	68db      	ldr	r3, [r3, #12]
 8006e2c:	f003 0304 	and.w	r3, r3, #4
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d023      	beq.n	8006e7c <UART_WaitOnFlagUntilTimeout+0x8a>
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	2b80      	cmp	r3, #128	@ 0x80
 8006e38:	d020      	beq.n	8006e7c <UART_WaitOnFlagUntilTimeout+0x8a>
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	2b40      	cmp	r3, #64	@ 0x40
 8006e3e:	d01d      	beq.n	8006e7c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f003 0308 	and.w	r3, r3, #8
 8006e4a:	2b08      	cmp	r3, #8
 8006e4c:	d116      	bne.n	8006e7c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006e4e:	2300      	movs	r3, #0
 8006e50:	617b      	str	r3, [r7, #20]
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	617b      	str	r3, [r7, #20]
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	617b      	str	r3, [r7, #20]
 8006e62:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e64:	68f8      	ldr	r0, [r7, #12]
 8006e66:	f000 f8de 	bl	8007026 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2208      	movs	r2, #8
 8006e6e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2200      	movs	r2, #0
 8006e74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	e00f      	b.n	8006e9c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	4013      	ands	r3, r2
 8006e86:	68ba      	ldr	r2, [r7, #8]
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	bf0c      	ite	eq
 8006e8c:	2301      	moveq	r3, #1
 8006e8e:	2300      	movne	r3, #0
 8006e90:	b2db      	uxtb	r3, r3
 8006e92:	461a      	mov	r2, r3
 8006e94:	79fb      	ldrb	r3, [r7, #7]
 8006e96:	429a      	cmp	r2, r3
 8006e98:	d0b4      	beq.n	8006e04 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e9a:	2300      	movs	r3, #0
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3718      	adds	r7, #24
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b098      	sub	sp, #96	@ 0x60
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	60f8      	str	r0, [r7, #12]
 8006eac:	60b9      	str	r1, [r7, #8]
 8006eae:	4613      	mov	r3, r2
 8006eb0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006eb2:	68ba      	ldr	r2, [r7, #8]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	88fa      	ldrh	r2, [r7, #6]
 8006ebc:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2222      	movs	r2, #34	@ 0x22
 8006ec8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ed0:	4a3e      	ldr	r2, [pc, #248]	@ (8006fcc <UART_Start_Receive_DMA+0x128>)
 8006ed2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ed8:	4a3d      	ldr	r2, [pc, #244]	@ (8006fd0 <UART_Start_Receive_DMA+0x12c>)
 8006eda:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ee0:	4a3c      	ldr	r2, [pc, #240]	@ (8006fd4 <UART_Start_Receive_DMA+0x130>)
 8006ee2:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ee8:	2200      	movs	r2, #0
 8006eea:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006eec:	f107 0308 	add.w	r3, r7, #8
 8006ef0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	3304      	adds	r3, #4
 8006efc:	4619      	mov	r1, r3
 8006efe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	88fb      	ldrh	r3, [r7, #6]
 8006f04:	f7fc ff0c 	bl	8003d20 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006f08:	2300      	movs	r3, #0
 8006f0a:	613b      	str	r3, [r7, #16]
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	613b      	str	r3, [r7, #16]
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	613b      	str	r3, [r7, #16]
 8006f1c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	691b      	ldr	r3, [r3, #16]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d019      	beq.n	8006f5a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	330c      	adds	r3, #12
 8006f2c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f30:	e853 3f00 	ldrex	r3, [r3]
 8006f34:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006f36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f3c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	330c      	adds	r3, #12
 8006f44:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006f46:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006f48:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f4a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006f4c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006f4e:	e841 2300 	strex	r3, r2, [r1]
 8006f52:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006f54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d1e5      	bne.n	8006f26 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	3314      	adds	r3, #20
 8006f60:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f64:	e853 3f00 	ldrex	r3, [r3]
 8006f68:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f6c:	f043 0301 	orr.w	r3, r3, #1
 8006f70:	657b      	str	r3, [r7, #84]	@ 0x54
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	3314      	adds	r3, #20
 8006f78:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006f7a:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006f7c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f7e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006f80:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006f82:	e841 2300 	strex	r3, r2, [r1]
 8006f86:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d1e5      	bne.n	8006f5a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	3314      	adds	r3, #20
 8006f94:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f96:	69bb      	ldr	r3, [r7, #24]
 8006f98:	e853 3f00 	ldrex	r3, [r3]
 8006f9c:	617b      	str	r3, [r7, #20]
   return(result);
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006fa4:	653b      	str	r3, [r7, #80]	@ 0x50
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	3314      	adds	r3, #20
 8006fac:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006fae:	627a      	str	r2, [r7, #36]	@ 0x24
 8006fb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb2:	6a39      	ldr	r1, [r7, #32]
 8006fb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fb6:	e841 2300 	strex	r3, r2, [r1]
 8006fba:	61fb      	str	r3, [r7, #28]
   return(result);
 8006fbc:	69fb      	ldr	r3, [r7, #28]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d1e5      	bne.n	8006f8e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006fc2:	2300      	movs	r3, #0
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3760      	adds	r7, #96	@ 0x60
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}
 8006fcc:	08006bf7 	.word	0x08006bf7
 8006fd0:	08006d23 	.word	0x08006d23
 8006fd4:	08006d5f 	.word	0x08006d5f

08006fd8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b089      	sub	sp, #36	@ 0x24
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	330c      	adds	r3, #12
 8006fe6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	e853 3f00 	ldrex	r3, [r3]
 8006fee:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006ff6:	61fb      	str	r3, [r7, #28]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	330c      	adds	r3, #12
 8006ffe:	69fa      	ldr	r2, [r7, #28]
 8007000:	61ba      	str	r2, [r7, #24]
 8007002:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007004:	6979      	ldr	r1, [r7, #20]
 8007006:	69ba      	ldr	r2, [r7, #24]
 8007008:	e841 2300 	strex	r3, r2, [r1]
 800700c:	613b      	str	r3, [r7, #16]
   return(result);
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d1e5      	bne.n	8006fe0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2220      	movs	r2, #32
 8007018:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800701c:	bf00      	nop
 800701e:	3724      	adds	r7, #36	@ 0x24
 8007020:	46bd      	mov	sp, r7
 8007022:	bc80      	pop	{r7}
 8007024:	4770      	bx	lr

08007026 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007026:	b480      	push	{r7}
 8007028:	b095      	sub	sp, #84	@ 0x54
 800702a:	af00      	add	r7, sp, #0
 800702c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	330c      	adds	r3, #12
 8007034:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007036:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007038:	e853 3f00 	ldrex	r3, [r3]
 800703c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800703e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007040:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007044:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	330c      	adds	r3, #12
 800704c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800704e:	643a      	str	r2, [r7, #64]	@ 0x40
 8007050:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007052:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007054:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007056:	e841 2300 	strex	r3, r2, [r1]
 800705a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800705c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800705e:	2b00      	cmp	r3, #0
 8007060:	d1e5      	bne.n	800702e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	3314      	adds	r3, #20
 8007068:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800706a:	6a3b      	ldr	r3, [r7, #32]
 800706c:	e853 3f00 	ldrex	r3, [r3]
 8007070:	61fb      	str	r3, [r7, #28]
   return(result);
 8007072:	69fb      	ldr	r3, [r7, #28]
 8007074:	f023 0301 	bic.w	r3, r3, #1
 8007078:	64bb      	str	r3, [r7, #72]	@ 0x48
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	3314      	adds	r3, #20
 8007080:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007082:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007084:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007086:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007088:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800708a:	e841 2300 	strex	r3, r2, [r1]
 800708e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007092:	2b00      	cmp	r3, #0
 8007094:	d1e5      	bne.n	8007062 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800709a:	2b01      	cmp	r3, #1
 800709c:	d119      	bne.n	80070d2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	330c      	adds	r3, #12
 80070a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	e853 3f00 	ldrex	r3, [r3]
 80070ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	f023 0310 	bic.w	r3, r3, #16
 80070b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	330c      	adds	r3, #12
 80070bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80070be:	61ba      	str	r2, [r7, #24]
 80070c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c2:	6979      	ldr	r1, [r7, #20]
 80070c4:	69ba      	ldr	r2, [r7, #24]
 80070c6:	e841 2300 	strex	r3, r2, [r1]
 80070ca:	613b      	str	r3, [r7, #16]
   return(result);
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d1e5      	bne.n	800709e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2220      	movs	r2, #32
 80070d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80070e0:	bf00      	nop
 80070e2:	3754      	adds	r7, #84	@ 0x54
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bc80      	pop	{r7}
 80070e8:	4770      	bx	lr

080070ea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80070ea:	b580      	push	{r7, lr}
 80070ec:	b084      	sub	sp, #16
 80070ee:	af00      	add	r7, sp, #0
 80070f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	2200      	movs	r2, #0
 80070fc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2200      	movs	r2, #0
 8007102:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007104:	68f8      	ldr	r0, [r7, #12]
 8007106:	f7ff fd62 	bl	8006bce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800710a:	bf00      	nop
 800710c:	3710      	adds	r7, #16
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}

08007112 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007112:	b480      	push	{r7}
 8007114:	b085      	sub	sp, #20
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007120:	b2db      	uxtb	r3, r3
 8007122:	2b21      	cmp	r3, #33	@ 0x21
 8007124:	d13e      	bne.n	80071a4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800712e:	d114      	bne.n	800715a <UART_Transmit_IT+0x48>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	691b      	ldr	r3, [r3, #16]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d110      	bne.n	800715a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6a1b      	ldr	r3, [r3, #32]
 800713c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	881b      	ldrh	r3, [r3, #0]
 8007142:	461a      	mov	r2, r3
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800714c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6a1b      	ldr	r3, [r3, #32]
 8007152:	1c9a      	adds	r2, r3, #2
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	621a      	str	r2, [r3, #32]
 8007158:	e008      	b.n	800716c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6a1b      	ldr	r3, [r3, #32]
 800715e:	1c59      	adds	r1, r3, #1
 8007160:	687a      	ldr	r2, [r7, #4]
 8007162:	6211      	str	r1, [r2, #32]
 8007164:	781a      	ldrb	r2, [r3, #0]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007170:	b29b      	uxth	r3, r3
 8007172:	3b01      	subs	r3, #1
 8007174:	b29b      	uxth	r3, r3
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	4619      	mov	r1, r3
 800717a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800717c:	2b00      	cmp	r3, #0
 800717e:	d10f      	bne.n	80071a0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	68da      	ldr	r2, [r3, #12]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800718e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	68da      	ldr	r2, [r3, #12]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800719e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80071a0:	2300      	movs	r3, #0
 80071a2:	e000      	b.n	80071a6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80071a4:	2302      	movs	r3, #2
  }
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3714      	adds	r7, #20
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bc80      	pop	{r7}
 80071ae:	4770      	bx	lr

080071b0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b082      	sub	sp, #8
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	68da      	ldr	r2, [r3, #12]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80071c6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2220      	movs	r2, #32
 80071cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f7ff fce1 	bl	8006b98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80071d6:	2300      	movs	r3, #0
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3708      	adds	r7, #8
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b08c      	sub	sp, #48	@ 0x30
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80071ee:	b2db      	uxtb	r3, r3
 80071f0:	2b22      	cmp	r3, #34	@ 0x22
 80071f2:	f040 80ae 	bne.w	8007352 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071fe:	d117      	bne.n	8007230 <UART_Receive_IT+0x50>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	691b      	ldr	r3, [r3, #16]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d113      	bne.n	8007230 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007208:	2300      	movs	r3, #0
 800720a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007210:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	b29b      	uxth	r3, r3
 800721a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800721e:	b29a      	uxth	r2, r3
 8007220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007222:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007228:	1c9a      	adds	r2, r3, #2
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	629a      	str	r2, [r3, #40]	@ 0x28
 800722e:	e026      	b.n	800727e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007234:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007236:	2300      	movs	r3, #0
 8007238:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	689b      	ldr	r3, [r3, #8]
 800723e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007242:	d007      	beq.n	8007254 <UART_Receive_IT+0x74>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d10a      	bne.n	8007262 <UART_Receive_IT+0x82>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	691b      	ldr	r3, [r3, #16]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d106      	bne.n	8007262 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	b2da      	uxtb	r2, r3
 800725c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800725e:	701a      	strb	r2, [r3, #0]
 8007260:	e008      	b.n	8007274 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	b2db      	uxtb	r3, r3
 800726a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800726e:	b2da      	uxtb	r2, r3
 8007270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007272:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007278:	1c5a      	adds	r2, r3, #1
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007282:	b29b      	uxth	r3, r3
 8007284:	3b01      	subs	r3, #1
 8007286:	b29b      	uxth	r3, r3
 8007288:	687a      	ldr	r2, [r7, #4]
 800728a:	4619      	mov	r1, r3
 800728c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800728e:	2b00      	cmp	r3, #0
 8007290:	d15d      	bne.n	800734e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	68da      	ldr	r2, [r3, #12]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f022 0220 	bic.w	r2, r2, #32
 80072a0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	68da      	ldr	r2, [r3, #12]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80072b0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	695a      	ldr	r2, [r3, #20]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f022 0201 	bic.w	r2, r2, #1
 80072c0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2220      	movs	r2, #32
 80072c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2200      	movs	r2, #0
 80072ce:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d135      	bne.n	8007344 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2200      	movs	r2, #0
 80072dc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	330c      	adds	r3, #12
 80072e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	e853 3f00 	ldrex	r3, [r3]
 80072ec:	613b      	str	r3, [r7, #16]
   return(result);
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	f023 0310 	bic.w	r3, r3, #16
 80072f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	330c      	adds	r3, #12
 80072fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072fe:	623a      	str	r2, [r7, #32]
 8007300:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007302:	69f9      	ldr	r1, [r7, #28]
 8007304:	6a3a      	ldr	r2, [r7, #32]
 8007306:	e841 2300 	strex	r3, r2, [r1]
 800730a:	61bb      	str	r3, [r7, #24]
   return(result);
 800730c:	69bb      	ldr	r3, [r7, #24]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d1e5      	bne.n	80072de <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f003 0310 	and.w	r3, r3, #16
 800731c:	2b10      	cmp	r3, #16
 800731e:	d10a      	bne.n	8007336 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007320:	2300      	movs	r3, #0
 8007322:	60fb      	str	r3, [r7, #12]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	60fb      	str	r3, [r7, #12]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	60fb      	str	r3, [r7, #12]
 8007334:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800733a:	4619      	mov	r1, r3
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f7ff fc4f 	bl	8006be0 <HAL_UARTEx_RxEventCallback>
 8007342:	e002      	b.n	800734a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f7ff fc30 	bl	8006baa <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800734a:	2300      	movs	r3, #0
 800734c:	e002      	b.n	8007354 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800734e:	2300      	movs	r3, #0
 8007350:	e000      	b.n	8007354 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007352:	2302      	movs	r3, #2
  }
}
 8007354:	4618      	mov	r0, r3
 8007356:	3730      	adds	r7, #48	@ 0x30
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}

0800735c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b084      	sub	sp, #16
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	691b      	ldr	r3, [r3, #16]
 800736a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	68da      	ldr	r2, [r3, #12]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	430a      	orrs	r2, r1
 8007378:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	689a      	ldr	r2, [r3, #8]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	691b      	ldr	r3, [r3, #16]
 8007382:	431a      	orrs	r2, r3
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	695b      	ldr	r3, [r3, #20]
 8007388:	4313      	orrs	r3, r2
 800738a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	68db      	ldr	r3, [r3, #12]
 8007392:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8007396:	f023 030c 	bic.w	r3, r3, #12
 800739a:	687a      	ldr	r2, [r7, #4]
 800739c:	6812      	ldr	r2, [r2, #0]
 800739e:	68b9      	ldr	r1, [r7, #8]
 80073a0:	430b      	orrs	r3, r1
 80073a2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	695b      	ldr	r3, [r3, #20]
 80073aa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	699a      	ldr	r2, [r3, #24]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	430a      	orrs	r2, r1
 80073b8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a2c      	ldr	r2, [pc, #176]	@ (8007470 <UART_SetConfig+0x114>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d103      	bne.n	80073cc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80073c4:	f7fe fcd4 	bl	8005d70 <HAL_RCC_GetPCLK2Freq>
 80073c8:	60f8      	str	r0, [r7, #12]
 80073ca:	e002      	b.n	80073d2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80073cc:	f7fe fcbc 	bl	8005d48 <HAL_RCC_GetPCLK1Freq>
 80073d0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80073d2:	68fa      	ldr	r2, [r7, #12]
 80073d4:	4613      	mov	r3, r2
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	4413      	add	r3, r2
 80073da:	009a      	lsls	r2, r3, #2
 80073dc:	441a      	add	r2, r3
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80073e8:	4a22      	ldr	r2, [pc, #136]	@ (8007474 <UART_SetConfig+0x118>)
 80073ea:	fba2 2303 	umull	r2, r3, r2, r3
 80073ee:	095b      	lsrs	r3, r3, #5
 80073f0:	0119      	lsls	r1, r3, #4
 80073f2:	68fa      	ldr	r2, [r7, #12]
 80073f4:	4613      	mov	r3, r2
 80073f6:	009b      	lsls	r3, r3, #2
 80073f8:	4413      	add	r3, r2
 80073fa:	009a      	lsls	r2, r3, #2
 80073fc:	441a      	add	r2, r3
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	009b      	lsls	r3, r3, #2
 8007404:	fbb2 f2f3 	udiv	r2, r2, r3
 8007408:	4b1a      	ldr	r3, [pc, #104]	@ (8007474 <UART_SetConfig+0x118>)
 800740a:	fba3 0302 	umull	r0, r3, r3, r2
 800740e:	095b      	lsrs	r3, r3, #5
 8007410:	2064      	movs	r0, #100	@ 0x64
 8007412:	fb00 f303 	mul.w	r3, r0, r3
 8007416:	1ad3      	subs	r3, r2, r3
 8007418:	011b      	lsls	r3, r3, #4
 800741a:	3332      	adds	r3, #50	@ 0x32
 800741c:	4a15      	ldr	r2, [pc, #84]	@ (8007474 <UART_SetConfig+0x118>)
 800741e:	fba2 2303 	umull	r2, r3, r2, r3
 8007422:	095b      	lsrs	r3, r3, #5
 8007424:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007428:	4419      	add	r1, r3
 800742a:	68fa      	ldr	r2, [r7, #12]
 800742c:	4613      	mov	r3, r2
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	4413      	add	r3, r2
 8007432:	009a      	lsls	r2, r3, #2
 8007434:	441a      	add	r2, r3
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	009b      	lsls	r3, r3, #2
 800743c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007440:	4b0c      	ldr	r3, [pc, #48]	@ (8007474 <UART_SetConfig+0x118>)
 8007442:	fba3 0302 	umull	r0, r3, r3, r2
 8007446:	095b      	lsrs	r3, r3, #5
 8007448:	2064      	movs	r0, #100	@ 0x64
 800744a:	fb00 f303 	mul.w	r3, r0, r3
 800744e:	1ad3      	subs	r3, r2, r3
 8007450:	011b      	lsls	r3, r3, #4
 8007452:	3332      	adds	r3, #50	@ 0x32
 8007454:	4a07      	ldr	r2, [pc, #28]	@ (8007474 <UART_SetConfig+0x118>)
 8007456:	fba2 2303 	umull	r2, r3, r2, r3
 800745a:	095b      	lsrs	r3, r3, #5
 800745c:	f003 020f 	and.w	r2, r3, #15
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	440a      	add	r2, r1
 8007466:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007468:	bf00      	nop
 800746a:	3710      	adds	r7, #16
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}
 8007470:	40013800 	.word	0x40013800
 8007474:	51eb851f 	.word	0x51eb851f

08007478 <sulp>:
 8007478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800747c:	460f      	mov	r7, r1
 800747e:	4690      	mov	r8, r2
 8007480:	f003 fd8e 	bl	800afa0 <__ulp>
 8007484:	4604      	mov	r4, r0
 8007486:	460d      	mov	r5, r1
 8007488:	f1b8 0f00 	cmp.w	r8, #0
 800748c:	d011      	beq.n	80074b2 <sulp+0x3a>
 800748e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8007492:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007496:	2b00      	cmp	r3, #0
 8007498:	dd0b      	ble.n	80074b2 <sulp+0x3a>
 800749a:	2400      	movs	r4, #0
 800749c:	051b      	lsls	r3, r3, #20
 800749e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80074a2:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80074a6:	4622      	mov	r2, r4
 80074a8:	462b      	mov	r3, r5
 80074aa:	f7f9 f81f 	bl	80004ec <__aeabi_dmul>
 80074ae:	4604      	mov	r4, r0
 80074b0:	460d      	mov	r5, r1
 80074b2:	4620      	mov	r0, r4
 80074b4:	4629      	mov	r1, r5
 80074b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074ba:	0000      	movs	r0, r0
 80074bc:	0000      	movs	r0, r0
	...

080074c0 <_strtod_l>:
 80074c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074c4:	b09f      	sub	sp, #124	@ 0x7c
 80074c6:	9217      	str	r2, [sp, #92]	@ 0x5c
 80074c8:	2200      	movs	r2, #0
 80074ca:	460c      	mov	r4, r1
 80074cc:	921a      	str	r2, [sp, #104]	@ 0x68
 80074ce:	f04f 0a00 	mov.w	sl, #0
 80074d2:	f04f 0b00 	mov.w	fp, #0
 80074d6:	460a      	mov	r2, r1
 80074d8:	9005      	str	r0, [sp, #20]
 80074da:	9219      	str	r2, [sp, #100]	@ 0x64
 80074dc:	7811      	ldrb	r1, [r2, #0]
 80074de:	292b      	cmp	r1, #43	@ 0x2b
 80074e0:	d048      	beq.n	8007574 <_strtod_l+0xb4>
 80074e2:	d836      	bhi.n	8007552 <_strtod_l+0x92>
 80074e4:	290d      	cmp	r1, #13
 80074e6:	d830      	bhi.n	800754a <_strtod_l+0x8a>
 80074e8:	2908      	cmp	r1, #8
 80074ea:	d830      	bhi.n	800754e <_strtod_l+0x8e>
 80074ec:	2900      	cmp	r1, #0
 80074ee:	d039      	beq.n	8007564 <_strtod_l+0xa4>
 80074f0:	2200      	movs	r2, #0
 80074f2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80074f4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80074f6:	782a      	ldrb	r2, [r5, #0]
 80074f8:	2a30      	cmp	r2, #48	@ 0x30
 80074fa:	f040 80b1 	bne.w	8007660 <_strtod_l+0x1a0>
 80074fe:	786a      	ldrb	r2, [r5, #1]
 8007500:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007504:	2a58      	cmp	r2, #88	@ 0x58
 8007506:	d16c      	bne.n	80075e2 <_strtod_l+0x122>
 8007508:	9302      	str	r3, [sp, #8]
 800750a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800750c:	4a8e      	ldr	r2, [pc, #568]	@ (8007748 <_strtod_l+0x288>)
 800750e:	9301      	str	r3, [sp, #4]
 8007510:	ab1a      	add	r3, sp, #104	@ 0x68
 8007512:	9300      	str	r3, [sp, #0]
 8007514:	9805      	ldr	r0, [sp, #20]
 8007516:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007518:	a919      	add	r1, sp, #100	@ 0x64
 800751a:	f002 fe35 	bl	800a188 <__gethex>
 800751e:	f010 060f 	ands.w	r6, r0, #15
 8007522:	4604      	mov	r4, r0
 8007524:	d005      	beq.n	8007532 <_strtod_l+0x72>
 8007526:	2e06      	cmp	r6, #6
 8007528:	d126      	bne.n	8007578 <_strtod_l+0xb8>
 800752a:	2300      	movs	r3, #0
 800752c:	3501      	adds	r5, #1
 800752e:	9519      	str	r5, [sp, #100]	@ 0x64
 8007530:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007532:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007534:	2b00      	cmp	r3, #0
 8007536:	f040 8584 	bne.w	8008042 <_strtod_l+0xb82>
 800753a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800753c:	b1bb      	cbz	r3, 800756e <_strtod_l+0xae>
 800753e:	4650      	mov	r0, sl
 8007540:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8007544:	b01f      	add	sp, #124	@ 0x7c
 8007546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800754a:	2920      	cmp	r1, #32
 800754c:	d1d0      	bne.n	80074f0 <_strtod_l+0x30>
 800754e:	3201      	adds	r2, #1
 8007550:	e7c3      	b.n	80074da <_strtod_l+0x1a>
 8007552:	292d      	cmp	r1, #45	@ 0x2d
 8007554:	d1cc      	bne.n	80074f0 <_strtod_l+0x30>
 8007556:	2101      	movs	r1, #1
 8007558:	910b      	str	r1, [sp, #44]	@ 0x2c
 800755a:	1c51      	adds	r1, r2, #1
 800755c:	9119      	str	r1, [sp, #100]	@ 0x64
 800755e:	7852      	ldrb	r2, [r2, #1]
 8007560:	2a00      	cmp	r2, #0
 8007562:	d1c7      	bne.n	80074f4 <_strtod_l+0x34>
 8007564:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007566:	9419      	str	r4, [sp, #100]	@ 0x64
 8007568:	2b00      	cmp	r3, #0
 800756a:	f040 8568 	bne.w	800803e <_strtod_l+0xb7e>
 800756e:	4650      	mov	r0, sl
 8007570:	4659      	mov	r1, fp
 8007572:	e7e7      	b.n	8007544 <_strtod_l+0x84>
 8007574:	2100      	movs	r1, #0
 8007576:	e7ef      	b.n	8007558 <_strtod_l+0x98>
 8007578:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800757a:	b13a      	cbz	r2, 800758c <_strtod_l+0xcc>
 800757c:	2135      	movs	r1, #53	@ 0x35
 800757e:	a81c      	add	r0, sp, #112	@ 0x70
 8007580:	f003 fdfe 	bl	800b180 <__copybits>
 8007584:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007586:	9805      	ldr	r0, [sp, #20]
 8007588:	f003 f9d8 	bl	800a93c <_Bfree>
 800758c:	3e01      	subs	r6, #1
 800758e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007590:	2e04      	cmp	r6, #4
 8007592:	d806      	bhi.n	80075a2 <_strtod_l+0xe2>
 8007594:	e8df f006 	tbb	[pc, r6]
 8007598:	201d0314 	.word	0x201d0314
 800759c:	14          	.byte	0x14
 800759d:	00          	.byte	0x00
 800759e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80075a2:	05e1      	lsls	r1, r4, #23
 80075a4:	bf48      	it	mi
 80075a6:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80075aa:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80075ae:	0d1b      	lsrs	r3, r3, #20
 80075b0:	051b      	lsls	r3, r3, #20
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d1bd      	bne.n	8007532 <_strtod_l+0x72>
 80075b6:	f001 fe8b 	bl	80092d0 <__errno>
 80075ba:	2322      	movs	r3, #34	@ 0x22
 80075bc:	6003      	str	r3, [r0, #0]
 80075be:	e7b8      	b.n	8007532 <_strtod_l+0x72>
 80075c0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80075c4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80075c8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80075cc:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80075d0:	e7e7      	b.n	80075a2 <_strtod_l+0xe2>
 80075d2:	f8df b178 	ldr.w	fp, [pc, #376]	@ 800774c <_strtod_l+0x28c>
 80075d6:	e7e4      	b.n	80075a2 <_strtod_l+0xe2>
 80075d8:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80075dc:	f04f 3aff 	mov.w	sl, #4294967295
 80075e0:	e7df      	b.n	80075a2 <_strtod_l+0xe2>
 80075e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80075e4:	1c5a      	adds	r2, r3, #1
 80075e6:	9219      	str	r2, [sp, #100]	@ 0x64
 80075e8:	785b      	ldrb	r3, [r3, #1]
 80075ea:	2b30      	cmp	r3, #48	@ 0x30
 80075ec:	d0f9      	beq.n	80075e2 <_strtod_l+0x122>
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d09f      	beq.n	8007532 <_strtod_l+0x72>
 80075f2:	2301      	movs	r3, #1
 80075f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80075f6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80075f8:	220a      	movs	r2, #10
 80075fa:	930c      	str	r3, [sp, #48]	@ 0x30
 80075fc:	2300      	movs	r3, #0
 80075fe:	461f      	mov	r7, r3
 8007600:	9308      	str	r3, [sp, #32]
 8007602:	930a      	str	r3, [sp, #40]	@ 0x28
 8007604:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007606:	7805      	ldrb	r5, [r0, #0]
 8007608:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800760c:	b2d9      	uxtb	r1, r3
 800760e:	2909      	cmp	r1, #9
 8007610:	d928      	bls.n	8007664 <_strtod_l+0x1a4>
 8007612:	2201      	movs	r2, #1
 8007614:	494e      	ldr	r1, [pc, #312]	@ (8007750 <_strtod_l+0x290>)
 8007616:	f001 fdd3 	bl	80091c0 <strncmp>
 800761a:	2800      	cmp	r0, #0
 800761c:	d032      	beq.n	8007684 <_strtod_l+0x1c4>
 800761e:	2000      	movs	r0, #0
 8007620:	462a      	mov	r2, r5
 8007622:	4681      	mov	r9, r0
 8007624:	463d      	mov	r5, r7
 8007626:	4603      	mov	r3, r0
 8007628:	2a65      	cmp	r2, #101	@ 0x65
 800762a:	d001      	beq.n	8007630 <_strtod_l+0x170>
 800762c:	2a45      	cmp	r2, #69	@ 0x45
 800762e:	d114      	bne.n	800765a <_strtod_l+0x19a>
 8007630:	b91d      	cbnz	r5, 800763a <_strtod_l+0x17a>
 8007632:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007634:	4302      	orrs	r2, r0
 8007636:	d095      	beq.n	8007564 <_strtod_l+0xa4>
 8007638:	2500      	movs	r5, #0
 800763a:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800763c:	1c62      	adds	r2, r4, #1
 800763e:	9219      	str	r2, [sp, #100]	@ 0x64
 8007640:	7862      	ldrb	r2, [r4, #1]
 8007642:	2a2b      	cmp	r2, #43	@ 0x2b
 8007644:	d077      	beq.n	8007736 <_strtod_l+0x276>
 8007646:	2a2d      	cmp	r2, #45	@ 0x2d
 8007648:	d07b      	beq.n	8007742 <_strtod_l+0x282>
 800764a:	f04f 0c00 	mov.w	ip, #0
 800764e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007652:	2909      	cmp	r1, #9
 8007654:	f240 8082 	bls.w	800775c <_strtod_l+0x29c>
 8007658:	9419      	str	r4, [sp, #100]	@ 0x64
 800765a:	f04f 0800 	mov.w	r8, #0
 800765e:	e0a2      	b.n	80077a6 <_strtod_l+0x2e6>
 8007660:	2300      	movs	r3, #0
 8007662:	e7c7      	b.n	80075f4 <_strtod_l+0x134>
 8007664:	2f08      	cmp	r7, #8
 8007666:	bfd5      	itete	le
 8007668:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800766a:	9908      	ldrgt	r1, [sp, #32]
 800766c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007670:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007674:	f100 0001 	add.w	r0, r0, #1
 8007678:	bfd4      	ite	le
 800767a:	930a      	strle	r3, [sp, #40]	@ 0x28
 800767c:	9308      	strgt	r3, [sp, #32]
 800767e:	3701      	adds	r7, #1
 8007680:	9019      	str	r0, [sp, #100]	@ 0x64
 8007682:	e7bf      	b.n	8007604 <_strtod_l+0x144>
 8007684:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007686:	1c5a      	adds	r2, r3, #1
 8007688:	9219      	str	r2, [sp, #100]	@ 0x64
 800768a:	785a      	ldrb	r2, [r3, #1]
 800768c:	b37f      	cbz	r7, 80076ee <_strtod_l+0x22e>
 800768e:	4681      	mov	r9, r0
 8007690:	463d      	mov	r5, r7
 8007692:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007696:	2b09      	cmp	r3, #9
 8007698:	d912      	bls.n	80076c0 <_strtod_l+0x200>
 800769a:	2301      	movs	r3, #1
 800769c:	e7c4      	b.n	8007628 <_strtod_l+0x168>
 800769e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80076a0:	3001      	adds	r0, #1
 80076a2:	1c5a      	adds	r2, r3, #1
 80076a4:	9219      	str	r2, [sp, #100]	@ 0x64
 80076a6:	785a      	ldrb	r2, [r3, #1]
 80076a8:	2a30      	cmp	r2, #48	@ 0x30
 80076aa:	d0f8      	beq.n	800769e <_strtod_l+0x1de>
 80076ac:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80076b0:	2b08      	cmp	r3, #8
 80076b2:	f200 84cb 	bhi.w	800804c <_strtod_l+0xb8c>
 80076b6:	4681      	mov	r9, r0
 80076b8:	2000      	movs	r0, #0
 80076ba:	4605      	mov	r5, r0
 80076bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80076be:	930c      	str	r3, [sp, #48]	@ 0x30
 80076c0:	3a30      	subs	r2, #48	@ 0x30
 80076c2:	f100 0301 	add.w	r3, r0, #1
 80076c6:	d02a      	beq.n	800771e <_strtod_l+0x25e>
 80076c8:	4499      	add	r9, r3
 80076ca:	210a      	movs	r1, #10
 80076cc:	462b      	mov	r3, r5
 80076ce:	eb00 0c05 	add.w	ip, r0, r5
 80076d2:	4563      	cmp	r3, ip
 80076d4:	d10d      	bne.n	80076f2 <_strtod_l+0x232>
 80076d6:	1c69      	adds	r1, r5, #1
 80076d8:	4401      	add	r1, r0
 80076da:	4428      	add	r0, r5
 80076dc:	2808      	cmp	r0, #8
 80076de:	dc16      	bgt.n	800770e <_strtod_l+0x24e>
 80076e0:	230a      	movs	r3, #10
 80076e2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80076e4:	fb03 2300 	mla	r3, r3, r0, r2
 80076e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80076ea:	2300      	movs	r3, #0
 80076ec:	e018      	b.n	8007720 <_strtod_l+0x260>
 80076ee:	4638      	mov	r0, r7
 80076f0:	e7da      	b.n	80076a8 <_strtod_l+0x1e8>
 80076f2:	2b08      	cmp	r3, #8
 80076f4:	f103 0301 	add.w	r3, r3, #1
 80076f8:	dc03      	bgt.n	8007702 <_strtod_l+0x242>
 80076fa:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80076fc:	434e      	muls	r6, r1
 80076fe:	960a      	str	r6, [sp, #40]	@ 0x28
 8007700:	e7e7      	b.n	80076d2 <_strtod_l+0x212>
 8007702:	2b10      	cmp	r3, #16
 8007704:	bfde      	ittt	le
 8007706:	9e08      	ldrle	r6, [sp, #32]
 8007708:	434e      	mulle	r6, r1
 800770a:	9608      	strle	r6, [sp, #32]
 800770c:	e7e1      	b.n	80076d2 <_strtod_l+0x212>
 800770e:	280f      	cmp	r0, #15
 8007710:	dceb      	bgt.n	80076ea <_strtod_l+0x22a>
 8007712:	230a      	movs	r3, #10
 8007714:	9808      	ldr	r0, [sp, #32]
 8007716:	fb03 2300 	mla	r3, r3, r0, r2
 800771a:	9308      	str	r3, [sp, #32]
 800771c:	e7e5      	b.n	80076ea <_strtod_l+0x22a>
 800771e:	4629      	mov	r1, r5
 8007720:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007722:	460d      	mov	r5, r1
 8007724:	1c50      	adds	r0, r2, #1
 8007726:	9019      	str	r0, [sp, #100]	@ 0x64
 8007728:	7852      	ldrb	r2, [r2, #1]
 800772a:	4618      	mov	r0, r3
 800772c:	e7b1      	b.n	8007692 <_strtod_l+0x1d2>
 800772e:	f04f 0900 	mov.w	r9, #0
 8007732:	2301      	movs	r3, #1
 8007734:	e77d      	b.n	8007632 <_strtod_l+0x172>
 8007736:	f04f 0c00 	mov.w	ip, #0
 800773a:	1ca2      	adds	r2, r4, #2
 800773c:	9219      	str	r2, [sp, #100]	@ 0x64
 800773e:	78a2      	ldrb	r2, [r4, #2]
 8007740:	e785      	b.n	800764e <_strtod_l+0x18e>
 8007742:	f04f 0c01 	mov.w	ip, #1
 8007746:	e7f8      	b.n	800773a <_strtod_l+0x27a>
 8007748:	0800c438 	.word	0x0800c438
 800774c:	7ff00000 	.word	0x7ff00000
 8007750:	0800c422 	.word	0x0800c422
 8007754:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007756:	1c51      	adds	r1, r2, #1
 8007758:	9119      	str	r1, [sp, #100]	@ 0x64
 800775a:	7852      	ldrb	r2, [r2, #1]
 800775c:	2a30      	cmp	r2, #48	@ 0x30
 800775e:	d0f9      	beq.n	8007754 <_strtod_l+0x294>
 8007760:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007764:	2908      	cmp	r1, #8
 8007766:	f63f af78 	bhi.w	800765a <_strtod_l+0x19a>
 800776a:	f04f 080a 	mov.w	r8, #10
 800776e:	3a30      	subs	r2, #48	@ 0x30
 8007770:	920e      	str	r2, [sp, #56]	@ 0x38
 8007772:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007774:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007776:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007778:	1c56      	adds	r6, r2, #1
 800777a:	9619      	str	r6, [sp, #100]	@ 0x64
 800777c:	7852      	ldrb	r2, [r2, #1]
 800777e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007782:	f1be 0f09 	cmp.w	lr, #9
 8007786:	d939      	bls.n	80077fc <_strtod_l+0x33c>
 8007788:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800778a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800778e:	1a76      	subs	r6, r6, r1
 8007790:	2e08      	cmp	r6, #8
 8007792:	dc03      	bgt.n	800779c <_strtod_l+0x2dc>
 8007794:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007796:	4588      	cmp	r8, r1
 8007798:	bfa8      	it	ge
 800779a:	4688      	movge	r8, r1
 800779c:	f1bc 0f00 	cmp.w	ip, #0
 80077a0:	d001      	beq.n	80077a6 <_strtod_l+0x2e6>
 80077a2:	f1c8 0800 	rsb	r8, r8, #0
 80077a6:	2d00      	cmp	r5, #0
 80077a8:	d14e      	bne.n	8007848 <_strtod_l+0x388>
 80077aa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80077ac:	4308      	orrs	r0, r1
 80077ae:	f47f aec0 	bne.w	8007532 <_strtod_l+0x72>
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	f47f aed6 	bne.w	8007564 <_strtod_l+0xa4>
 80077b8:	2a69      	cmp	r2, #105	@ 0x69
 80077ba:	d028      	beq.n	800780e <_strtod_l+0x34e>
 80077bc:	dc25      	bgt.n	800780a <_strtod_l+0x34a>
 80077be:	2a49      	cmp	r2, #73	@ 0x49
 80077c0:	d025      	beq.n	800780e <_strtod_l+0x34e>
 80077c2:	2a4e      	cmp	r2, #78	@ 0x4e
 80077c4:	f47f aece 	bne.w	8007564 <_strtod_l+0xa4>
 80077c8:	499a      	ldr	r1, [pc, #616]	@ (8007a34 <_strtod_l+0x574>)
 80077ca:	a819      	add	r0, sp, #100	@ 0x64
 80077cc:	f002 fefe 	bl	800a5cc <__match>
 80077d0:	2800      	cmp	r0, #0
 80077d2:	f43f aec7 	beq.w	8007564 <_strtod_l+0xa4>
 80077d6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	2b28      	cmp	r3, #40	@ 0x28
 80077dc:	d12e      	bne.n	800783c <_strtod_l+0x37c>
 80077de:	4996      	ldr	r1, [pc, #600]	@ (8007a38 <_strtod_l+0x578>)
 80077e0:	aa1c      	add	r2, sp, #112	@ 0x70
 80077e2:	a819      	add	r0, sp, #100	@ 0x64
 80077e4:	f002 ff06 	bl	800a5f4 <__hexnan>
 80077e8:	2805      	cmp	r0, #5
 80077ea:	d127      	bne.n	800783c <_strtod_l+0x37c>
 80077ec:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80077ee:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80077f2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80077f6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80077fa:	e69a      	b.n	8007532 <_strtod_l+0x72>
 80077fc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80077fe:	fb08 2101 	mla	r1, r8, r1, r2
 8007802:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007806:	920e      	str	r2, [sp, #56]	@ 0x38
 8007808:	e7b5      	b.n	8007776 <_strtod_l+0x2b6>
 800780a:	2a6e      	cmp	r2, #110	@ 0x6e
 800780c:	e7da      	b.n	80077c4 <_strtod_l+0x304>
 800780e:	498b      	ldr	r1, [pc, #556]	@ (8007a3c <_strtod_l+0x57c>)
 8007810:	a819      	add	r0, sp, #100	@ 0x64
 8007812:	f002 fedb 	bl	800a5cc <__match>
 8007816:	2800      	cmp	r0, #0
 8007818:	f43f aea4 	beq.w	8007564 <_strtod_l+0xa4>
 800781c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800781e:	4988      	ldr	r1, [pc, #544]	@ (8007a40 <_strtod_l+0x580>)
 8007820:	3b01      	subs	r3, #1
 8007822:	a819      	add	r0, sp, #100	@ 0x64
 8007824:	9319      	str	r3, [sp, #100]	@ 0x64
 8007826:	f002 fed1 	bl	800a5cc <__match>
 800782a:	b910      	cbnz	r0, 8007832 <_strtod_l+0x372>
 800782c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800782e:	3301      	adds	r3, #1
 8007830:	9319      	str	r3, [sp, #100]	@ 0x64
 8007832:	f04f 0a00 	mov.w	sl, #0
 8007836:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8007a44 <_strtod_l+0x584>
 800783a:	e67a      	b.n	8007532 <_strtod_l+0x72>
 800783c:	4882      	ldr	r0, [pc, #520]	@ (8007a48 <_strtod_l+0x588>)
 800783e:	f001 fd99 	bl	8009374 <nan>
 8007842:	4682      	mov	sl, r0
 8007844:	468b      	mov	fp, r1
 8007846:	e674      	b.n	8007532 <_strtod_l+0x72>
 8007848:	eba8 0309 	sub.w	r3, r8, r9
 800784c:	2f00      	cmp	r7, #0
 800784e:	bf08      	it	eq
 8007850:	462f      	moveq	r7, r5
 8007852:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007854:	2d10      	cmp	r5, #16
 8007856:	462c      	mov	r4, r5
 8007858:	9309      	str	r3, [sp, #36]	@ 0x24
 800785a:	bfa8      	it	ge
 800785c:	2410      	movge	r4, #16
 800785e:	f7f8 fdcb 	bl	80003f8 <__aeabi_ui2d>
 8007862:	2d09      	cmp	r5, #9
 8007864:	4682      	mov	sl, r0
 8007866:	468b      	mov	fp, r1
 8007868:	dc11      	bgt.n	800788e <_strtod_l+0x3ce>
 800786a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800786c:	2b00      	cmp	r3, #0
 800786e:	f43f ae60 	beq.w	8007532 <_strtod_l+0x72>
 8007872:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007874:	dd76      	ble.n	8007964 <_strtod_l+0x4a4>
 8007876:	2b16      	cmp	r3, #22
 8007878:	dc5d      	bgt.n	8007936 <_strtod_l+0x476>
 800787a:	4974      	ldr	r1, [pc, #464]	@ (8007a4c <_strtod_l+0x58c>)
 800787c:	4652      	mov	r2, sl
 800787e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007882:	465b      	mov	r3, fp
 8007884:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007888:	f7f8 fe30 	bl	80004ec <__aeabi_dmul>
 800788c:	e7d9      	b.n	8007842 <_strtod_l+0x382>
 800788e:	4b6f      	ldr	r3, [pc, #444]	@ (8007a4c <_strtod_l+0x58c>)
 8007890:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007894:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007898:	f7f8 fe28 	bl	80004ec <__aeabi_dmul>
 800789c:	4682      	mov	sl, r0
 800789e:	9808      	ldr	r0, [sp, #32]
 80078a0:	468b      	mov	fp, r1
 80078a2:	f7f8 fda9 	bl	80003f8 <__aeabi_ui2d>
 80078a6:	4602      	mov	r2, r0
 80078a8:	460b      	mov	r3, r1
 80078aa:	4650      	mov	r0, sl
 80078ac:	4659      	mov	r1, fp
 80078ae:	f7f8 fc67 	bl	8000180 <__adddf3>
 80078b2:	2d0f      	cmp	r5, #15
 80078b4:	4682      	mov	sl, r0
 80078b6:	468b      	mov	fp, r1
 80078b8:	ddd7      	ble.n	800786a <_strtod_l+0x3aa>
 80078ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078bc:	1b2c      	subs	r4, r5, r4
 80078be:	441c      	add	r4, r3
 80078c0:	2c00      	cmp	r4, #0
 80078c2:	f340 8096 	ble.w	80079f2 <_strtod_l+0x532>
 80078c6:	f014 030f 	ands.w	r3, r4, #15
 80078ca:	d00a      	beq.n	80078e2 <_strtod_l+0x422>
 80078cc:	495f      	ldr	r1, [pc, #380]	@ (8007a4c <_strtod_l+0x58c>)
 80078ce:	4652      	mov	r2, sl
 80078d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80078d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078d8:	465b      	mov	r3, fp
 80078da:	f7f8 fe07 	bl	80004ec <__aeabi_dmul>
 80078de:	4682      	mov	sl, r0
 80078e0:	468b      	mov	fp, r1
 80078e2:	f034 040f 	bics.w	r4, r4, #15
 80078e6:	d073      	beq.n	80079d0 <_strtod_l+0x510>
 80078e8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80078ec:	dd48      	ble.n	8007980 <_strtod_l+0x4c0>
 80078ee:	2400      	movs	r4, #0
 80078f0:	46a0      	mov	r8, r4
 80078f2:	46a1      	mov	r9, r4
 80078f4:	940a      	str	r4, [sp, #40]	@ 0x28
 80078f6:	2322      	movs	r3, #34	@ 0x22
 80078f8:	f04f 0a00 	mov.w	sl, #0
 80078fc:	9a05      	ldr	r2, [sp, #20]
 80078fe:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8007a44 <_strtod_l+0x584>
 8007902:	6013      	str	r3, [r2, #0]
 8007904:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007906:	2b00      	cmp	r3, #0
 8007908:	f43f ae13 	beq.w	8007532 <_strtod_l+0x72>
 800790c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800790e:	9805      	ldr	r0, [sp, #20]
 8007910:	f003 f814 	bl	800a93c <_Bfree>
 8007914:	4649      	mov	r1, r9
 8007916:	9805      	ldr	r0, [sp, #20]
 8007918:	f003 f810 	bl	800a93c <_Bfree>
 800791c:	4641      	mov	r1, r8
 800791e:	9805      	ldr	r0, [sp, #20]
 8007920:	f003 f80c 	bl	800a93c <_Bfree>
 8007924:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007926:	9805      	ldr	r0, [sp, #20]
 8007928:	f003 f808 	bl	800a93c <_Bfree>
 800792c:	4621      	mov	r1, r4
 800792e:	9805      	ldr	r0, [sp, #20]
 8007930:	f003 f804 	bl	800a93c <_Bfree>
 8007934:	e5fd      	b.n	8007532 <_strtod_l+0x72>
 8007936:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007938:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800793c:	4293      	cmp	r3, r2
 800793e:	dbbc      	blt.n	80078ba <_strtod_l+0x3fa>
 8007940:	4c42      	ldr	r4, [pc, #264]	@ (8007a4c <_strtod_l+0x58c>)
 8007942:	f1c5 050f 	rsb	r5, r5, #15
 8007946:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800794a:	4652      	mov	r2, sl
 800794c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007950:	465b      	mov	r3, fp
 8007952:	f7f8 fdcb 	bl	80004ec <__aeabi_dmul>
 8007956:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007958:	1b5d      	subs	r5, r3, r5
 800795a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800795e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007962:	e791      	b.n	8007888 <_strtod_l+0x3c8>
 8007964:	3316      	adds	r3, #22
 8007966:	dba8      	blt.n	80078ba <_strtod_l+0x3fa>
 8007968:	4b38      	ldr	r3, [pc, #224]	@ (8007a4c <_strtod_l+0x58c>)
 800796a:	eba9 0808 	sub.w	r8, r9, r8
 800796e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007972:	4650      	mov	r0, sl
 8007974:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007978:	4659      	mov	r1, fp
 800797a:	f7f8 fee1 	bl	8000740 <__aeabi_ddiv>
 800797e:	e760      	b.n	8007842 <_strtod_l+0x382>
 8007980:	4b33      	ldr	r3, [pc, #204]	@ (8007a50 <_strtod_l+0x590>)
 8007982:	4650      	mov	r0, sl
 8007984:	9308      	str	r3, [sp, #32]
 8007986:	2300      	movs	r3, #0
 8007988:	4659      	mov	r1, fp
 800798a:	461e      	mov	r6, r3
 800798c:	1124      	asrs	r4, r4, #4
 800798e:	2c01      	cmp	r4, #1
 8007990:	dc21      	bgt.n	80079d6 <_strtod_l+0x516>
 8007992:	b10b      	cbz	r3, 8007998 <_strtod_l+0x4d8>
 8007994:	4682      	mov	sl, r0
 8007996:	468b      	mov	fp, r1
 8007998:	492d      	ldr	r1, [pc, #180]	@ (8007a50 <_strtod_l+0x590>)
 800799a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800799e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80079a2:	4652      	mov	r2, sl
 80079a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079a8:	465b      	mov	r3, fp
 80079aa:	f7f8 fd9f 	bl	80004ec <__aeabi_dmul>
 80079ae:	4b25      	ldr	r3, [pc, #148]	@ (8007a44 <_strtod_l+0x584>)
 80079b0:	460a      	mov	r2, r1
 80079b2:	400b      	ands	r3, r1
 80079b4:	4927      	ldr	r1, [pc, #156]	@ (8007a54 <_strtod_l+0x594>)
 80079b6:	4682      	mov	sl, r0
 80079b8:	428b      	cmp	r3, r1
 80079ba:	d898      	bhi.n	80078ee <_strtod_l+0x42e>
 80079bc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80079c0:	428b      	cmp	r3, r1
 80079c2:	bf86      	itte	hi
 80079c4:	f04f 3aff 	movhi.w	sl, #4294967295
 80079c8:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8007a58 <_strtod_l+0x598>
 80079cc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80079d0:	2300      	movs	r3, #0
 80079d2:	9308      	str	r3, [sp, #32]
 80079d4:	e07a      	b.n	8007acc <_strtod_l+0x60c>
 80079d6:	07e2      	lsls	r2, r4, #31
 80079d8:	d505      	bpl.n	80079e6 <_strtod_l+0x526>
 80079da:	9b08      	ldr	r3, [sp, #32]
 80079dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e0:	f7f8 fd84 	bl	80004ec <__aeabi_dmul>
 80079e4:	2301      	movs	r3, #1
 80079e6:	9a08      	ldr	r2, [sp, #32]
 80079e8:	3601      	adds	r6, #1
 80079ea:	3208      	adds	r2, #8
 80079ec:	1064      	asrs	r4, r4, #1
 80079ee:	9208      	str	r2, [sp, #32]
 80079f0:	e7cd      	b.n	800798e <_strtod_l+0x4ce>
 80079f2:	d0ed      	beq.n	80079d0 <_strtod_l+0x510>
 80079f4:	4264      	negs	r4, r4
 80079f6:	f014 020f 	ands.w	r2, r4, #15
 80079fa:	d00a      	beq.n	8007a12 <_strtod_l+0x552>
 80079fc:	4b13      	ldr	r3, [pc, #76]	@ (8007a4c <_strtod_l+0x58c>)
 80079fe:	4650      	mov	r0, sl
 8007a00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a04:	4659      	mov	r1, fp
 8007a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a0a:	f7f8 fe99 	bl	8000740 <__aeabi_ddiv>
 8007a0e:	4682      	mov	sl, r0
 8007a10:	468b      	mov	fp, r1
 8007a12:	1124      	asrs	r4, r4, #4
 8007a14:	d0dc      	beq.n	80079d0 <_strtod_l+0x510>
 8007a16:	2c1f      	cmp	r4, #31
 8007a18:	dd20      	ble.n	8007a5c <_strtod_l+0x59c>
 8007a1a:	2400      	movs	r4, #0
 8007a1c:	46a0      	mov	r8, r4
 8007a1e:	46a1      	mov	r9, r4
 8007a20:	940a      	str	r4, [sp, #40]	@ 0x28
 8007a22:	2322      	movs	r3, #34	@ 0x22
 8007a24:	9a05      	ldr	r2, [sp, #20]
 8007a26:	f04f 0a00 	mov.w	sl, #0
 8007a2a:	f04f 0b00 	mov.w	fp, #0
 8007a2e:	6013      	str	r3, [r2, #0]
 8007a30:	e768      	b.n	8007904 <_strtod_l+0x444>
 8007a32:	bf00      	nop
 8007a34:	0800c586 	.word	0x0800c586
 8007a38:	0800c424 	.word	0x0800c424
 8007a3c:	0800c57e 	.word	0x0800c57e
 8007a40:	0800c5bd 	.word	0x0800c5bd
 8007a44:	7ff00000 	.word	0x7ff00000
 8007a48:	0800c84c 	.word	0x0800c84c
 8007a4c:	0800c738 	.word	0x0800c738
 8007a50:	0800c710 	.word	0x0800c710
 8007a54:	7ca00000 	.word	0x7ca00000
 8007a58:	7fefffff 	.word	0x7fefffff
 8007a5c:	f014 0310 	ands.w	r3, r4, #16
 8007a60:	bf18      	it	ne
 8007a62:	236a      	movne	r3, #106	@ 0x6a
 8007a64:	4650      	mov	r0, sl
 8007a66:	9308      	str	r3, [sp, #32]
 8007a68:	4659      	mov	r1, fp
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	4ea9      	ldr	r6, [pc, #676]	@ (8007d14 <_strtod_l+0x854>)
 8007a6e:	07e2      	lsls	r2, r4, #31
 8007a70:	d504      	bpl.n	8007a7c <_strtod_l+0x5bc>
 8007a72:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007a76:	f7f8 fd39 	bl	80004ec <__aeabi_dmul>
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	1064      	asrs	r4, r4, #1
 8007a7e:	f106 0608 	add.w	r6, r6, #8
 8007a82:	d1f4      	bne.n	8007a6e <_strtod_l+0x5ae>
 8007a84:	b10b      	cbz	r3, 8007a8a <_strtod_l+0x5ca>
 8007a86:	4682      	mov	sl, r0
 8007a88:	468b      	mov	fp, r1
 8007a8a:	9b08      	ldr	r3, [sp, #32]
 8007a8c:	b1b3      	cbz	r3, 8007abc <_strtod_l+0x5fc>
 8007a8e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007a92:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	4659      	mov	r1, fp
 8007a9a:	dd0f      	ble.n	8007abc <_strtod_l+0x5fc>
 8007a9c:	2b1f      	cmp	r3, #31
 8007a9e:	dd57      	ble.n	8007b50 <_strtod_l+0x690>
 8007aa0:	2b34      	cmp	r3, #52	@ 0x34
 8007aa2:	bfd8      	it	le
 8007aa4:	f04f 33ff 	movle.w	r3, #4294967295
 8007aa8:	f04f 0a00 	mov.w	sl, #0
 8007aac:	bfcf      	iteee	gt
 8007aae:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007ab2:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007ab6:	4093      	lslle	r3, r2
 8007ab8:	ea03 0b01 	andle.w	fp, r3, r1
 8007abc:	2200      	movs	r2, #0
 8007abe:	2300      	movs	r3, #0
 8007ac0:	4650      	mov	r0, sl
 8007ac2:	4659      	mov	r1, fp
 8007ac4:	f7f8 ff7a 	bl	80009bc <__aeabi_dcmpeq>
 8007ac8:	2800      	cmp	r0, #0
 8007aca:	d1a6      	bne.n	8007a1a <_strtod_l+0x55a>
 8007acc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ace:	463a      	mov	r2, r7
 8007ad0:	9300      	str	r3, [sp, #0]
 8007ad2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007ad4:	462b      	mov	r3, r5
 8007ad6:	9805      	ldr	r0, [sp, #20]
 8007ad8:	f002 ff98 	bl	800aa0c <__s2b>
 8007adc:	900a      	str	r0, [sp, #40]	@ 0x28
 8007ade:	2800      	cmp	r0, #0
 8007ae0:	f43f af05 	beq.w	80078ee <_strtod_l+0x42e>
 8007ae4:	2400      	movs	r4, #0
 8007ae6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ae8:	eba9 0308 	sub.w	r3, r9, r8
 8007aec:	2a00      	cmp	r2, #0
 8007aee:	bfa8      	it	ge
 8007af0:	2300      	movge	r3, #0
 8007af2:	46a0      	mov	r8, r4
 8007af4:	9312      	str	r3, [sp, #72]	@ 0x48
 8007af6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007afa:	9316      	str	r3, [sp, #88]	@ 0x58
 8007afc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007afe:	9805      	ldr	r0, [sp, #20]
 8007b00:	6859      	ldr	r1, [r3, #4]
 8007b02:	f002 fedb 	bl	800a8bc <_Balloc>
 8007b06:	4681      	mov	r9, r0
 8007b08:	2800      	cmp	r0, #0
 8007b0a:	f43f aef4 	beq.w	80078f6 <_strtod_l+0x436>
 8007b0e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b10:	300c      	adds	r0, #12
 8007b12:	691a      	ldr	r2, [r3, #16]
 8007b14:	f103 010c 	add.w	r1, r3, #12
 8007b18:	3202      	adds	r2, #2
 8007b1a:	0092      	lsls	r2, r2, #2
 8007b1c:	f001 fc1b 	bl	8009356 <memcpy>
 8007b20:	ab1c      	add	r3, sp, #112	@ 0x70
 8007b22:	9301      	str	r3, [sp, #4]
 8007b24:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007b26:	9300      	str	r3, [sp, #0]
 8007b28:	4652      	mov	r2, sl
 8007b2a:	465b      	mov	r3, fp
 8007b2c:	9805      	ldr	r0, [sp, #20]
 8007b2e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007b32:	f003 fa9d 	bl	800b070 <__d2b>
 8007b36:	901a      	str	r0, [sp, #104]	@ 0x68
 8007b38:	2800      	cmp	r0, #0
 8007b3a:	f43f aedc 	beq.w	80078f6 <_strtod_l+0x436>
 8007b3e:	2101      	movs	r1, #1
 8007b40:	9805      	ldr	r0, [sp, #20]
 8007b42:	f002 fff9 	bl	800ab38 <__i2b>
 8007b46:	4680      	mov	r8, r0
 8007b48:	b948      	cbnz	r0, 8007b5e <_strtod_l+0x69e>
 8007b4a:	f04f 0800 	mov.w	r8, #0
 8007b4e:	e6d2      	b.n	80078f6 <_strtod_l+0x436>
 8007b50:	f04f 32ff 	mov.w	r2, #4294967295
 8007b54:	fa02 f303 	lsl.w	r3, r2, r3
 8007b58:	ea03 0a0a 	and.w	sl, r3, sl
 8007b5c:	e7ae      	b.n	8007abc <_strtod_l+0x5fc>
 8007b5e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007b60:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007b62:	2d00      	cmp	r5, #0
 8007b64:	bfab      	itete	ge
 8007b66:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007b68:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007b6a:	18ef      	addge	r7, r5, r3
 8007b6c:	1b5e      	sublt	r6, r3, r5
 8007b6e:	9b08      	ldr	r3, [sp, #32]
 8007b70:	bfa8      	it	ge
 8007b72:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007b74:	eba5 0503 	sub.w	r5, r5, r3
 8007b78:	4415      	add	r5, r2
 8007b7a:	4b67      	ldr	r3, [pc, #412]	@ (8007d18 <_strtod_l+0x858>)
 8007b7c:	f105 35ff 	add.w	r5, r5, #4294967295
 8007b80:	bfb8      	it	lt
 8007b82:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007b84:	429d      	cmp	r5, r3
 8007b86:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007b8a:	da50      	bge.n	8007c2e <_strtod_l+0x76e>
 8007b8c:	1b5b      	subs	r3, r3, r5
 8007b8e:	2b1f      	cmp	r3, #31
 8007b90:	f04f 0101 	mov.w	r1, #1
 8007b94:	eba2 0203 	sub.w	r2, r2, r3
 8007b98:	dc3d      	bgt.n	8007c16 <_strtod_l+0x756>
 8007b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8007b9e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	9310      	str	r3, [sp, #64]	@ 0x40
 8007ba4:	18bd      	adds	r5, r7, r2
 8007ba6:	9b08      	ldr	r3, [sp, #32]
 8007ba8:	42af      	cmp	r7, r5
 8007baa:	4416      	add	r6, r2
 8007bac:	441e      	add	r6, r3
 8007bae:	463b      	mov	r3, r7
 8007bb0:	bfa8      	it	ge
 8007bb2:	462b      	movge	r3, r5
 8007bb4:	42b3      	cmp	r3, r6
 8007bb6:	bfa8      	it	ge
 8007bb8:	4633      	movge	r3, r6
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	bfc2      	ittt	gt
 8007bbe:	1aed      	subgt	r5, r5, r3
 8007bc0:	1af6      	subgt	r6, r6, r3
 8007bc2:	1aff      	subgt	r7, r7, r3
 8007bc4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	dd16      	ble.n	8007bf8 <_strtod_l+0x738>
 8007bca:	4641      	mov	r1, r8
 8007bcc:	461a      	mov	r2, r3
 8007bce:	9805      	ldr	r0, [sp, #20]
 8007bd0:	f003 f870 	bl	800acb4 <__pow5mult>
 8007bd4:	4680      	mov	r8, r0
 8007bd6:	2800      	cmp	r0, #0
 8007bd8:	d0b7      	beq.n	8007b4a <_strtod_l+0x68a>
 8007bda:	4601      	mov	r1, r0
 8007bdc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007bde:	9805      	ldr	r0, [sp, #20]
 8007be0:	f002 ffc0 	bl	800ab64 <__multiply>
 8007be4:	900e      	str	r0, [sp, #56]	@ 0x38
 8007be6:	2800      	cmp	r0, #0
 8007be8:	f43f ae85 	beq.w	80078f6 <_strtod_l+0x436>
 8007bec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007bee:	9805      	ldr	r0, [sp, #20]
 8007bf0:	f002 fea4 	bl	800a93c <_Bfree>
 8007bf4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007bf6:	931a      	str	r3, [sp, #104]	@ 0x68
 8007bf8:	2d00      	cmp	r5, #0
 8007bfa:	dc1d      	bgt.n	8007c38 <_strtod_l+0x778>
 8007bfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	dd23      	ble.n	8007c4a <_strtod_l+0x78a>
 8007c02:	4649      	mov	r1, r9
 8007c04:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007c06:	9805      	ldr	r0, [sp, #20]
 8007c08:	f003 f854 	bl	800acb4 <__pow5mult>
 8007c0c:	4681      	mov	r9, r0
 8007c0e:	b9e0      	cbnz	r0, 8007c4a <_strtod_l+0x78a>
 8007c10:	f04f 0900 	mov.w	r9, #0
 8007c14:	e66f      	b.n	80078f6 <_strtod_l+0x436>
 8007c16:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007c1a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007c1e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007c22:	35e2      	adds	r5, #226	@ 0xe2
 8007c24:	fa01 f305 	lsl.w	r3, r1, r5
 8007c28:	9310      	str	r3, [sp, #64]	@ 0x40
 8007c2a:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007c2c:	e7ba      	b.n	8007ba4 <_strtod_l+0x6e4>
 8007c2e:	2300      	movs	r3, #0
 8007c30:	9310      	str	r3, [sp, #64]	@ 0x40
 8007c32:	2301      	movs	r3, #1
 8007c34:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007c36:	e7b5      	b.n	8007ba4 <_strtod_l+0x6e4>
 8007c38:	462a      	mov	r2, r5
 8007c3a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007c3c:	9805      	ldr	r0, [sp, #20]
 8007c3e:	f003 f893 	bl	800ad68 <__lshift>
 8007c42:	901a      	str	r0, [sp, #104]	@ 0x68
 8007c44:	2800      	cmp	r0, #0
 8007c46:	d1d9      	bne.n	8007bfc <_strtod_l+0x73c>
 8007c48:	e655      	b.n	80078f6 <_strtod_l+0x436>
 8007c4a:	2e00      	cmp	r6, #0
 8007c4c:	dd07      	ble.n	8007c5e <_strtod_l+0x79e>
 8007c4e:	4649      	mov	r1, r9
 8007c50:	4632      	mov	r2, r6
 8007c52:	9805      	ldr	r0, [sp, #20]
 8007c54:	f003 f888 	bl	800ad68 <__lshift>
 8007c58:	4681      	mov	r9, r0
 8007c5a:	2800      	cmp	r0, #0
 8007c5c:	d0d8      	beq.n	8007c10 <_strtod_l+0x750>
 8007c5e:	2f00      	cmp	r7, #0
 8007c60:	dd08      	ble.n	8007c74 <_strtod_l+0x7b4>
 8007c62:	4641      	mov	r1, r8
 8007c64:	463a      	mov	r2, r7
 8007c66:	9805      	ldr	r0, [sp, #20]
 8007c68:	f003 f87e 	bl	800ad68 <__lshift>
 8007c6c:	4680      	mov	r8, r0
 8007c6e:	2800      	cmp	r0, #0
 8007c70:	f43f ae41 	beq.w	80078f6 <_strtod_l+0x436>
 8007c74:	464a      	mov	r2, r9
 8007c76:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007c78:	9805      	ldr	r0, [sp, #20]
 8007c7a:	f003 f8fd 	bl	800ae78 <__mdiff>
 8007c7e:	4604      	mov	r4, r0
 8007c80:	2800      	cmp	r0, #0
 8007c82:	f43f ae38 	beq.w	80078f6 <_strtod_l+0x436>
 8007c86:	68c3      	ldr	r3, [r0, #12]
 8007c88:	4641      	mov	r1, r8
 8007c8a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	60c3      	str	r3, [r0, #12]
 8007c90:	f003 f8d6 	bl	800ae40 <__mcmp>
 8007c94:	2800      	cmp	r0, #0
 8007c96:	da45      	bge.n	8007d24 <_strtod_l+0x864>
 8007c98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c9a:	ea53 030a 	orrs.w	r3, r3, sl
 8007c9e:	d16b      	bne.n	8007d78 <_strtod_l+0x8b8>
 8007ca0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d167      	bne.n	8007d78 <_strtod_l+0x8b8>
 8007ca8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007cac:	0d1b      	lsrs	r3, r3, #20
 8007cae:	051b      	lsls	r3, r3, #20
 8007cb0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007cb4:	d960      	bls.n	8007d78 <_strtod_l+0x8b8>
 8007cb6:	6963      	ldr	r3, [r4, #20]
 8007cb8:	b913      	cbnz	r3, 8007cc0 <_strtod_l+0x800>
 8007cba:	6923      	ldr	r3, [r4, #16]
 8007cbc:	2b01      	cmp	r3, #1
 8007cbe:	dd5b      	ble.n	8007d78 <_strtod_l+0x8b8>
 8007cc0:	4621      	mov	r1, r4
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	9805      	ldr	r0, [sp, #20]
 8007cc6:	f003 f84f 	bl	800ad68 <__lshift>
 8007cca:	4641      	mov	r1, r8
 8007ccc:	4604      	mov	r4, r0
 8007cce:	f003 f8b7 	bl	800ae40 <__mcmp>
 8007cd2:	2800      	cmp	r0, #0
 8007cd4:	dd50      	ble.n	8007d78 <_strtod_l+0x8b8>
 8007cd6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007cda:	9a08      	ldr	r2, [sp, #32]
 8007cdc:	0d1b      	lsrs	r3, r3, #20
 8007cde:	051b      	lsls	r3, r3, #20
 8007ce0:	2a00      	cmp	r2, #0
 8007ce2:	d06a      	beq.n	8007dba <_strtod_l+0x8fa>
 8007ce4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007ce8:	d867      	bhi.n	8007dba <_strtod_l+0x8fa>
 8007cea:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007cee:	f67f ae98 	bls.w	8007a22 <_strtod_l+0x562>
 8007cf2:	4650      	mov	r0, sl
 8007cf4:	4659      	mov	r1, fp
 8007cf6:	4b09      	ldr	r3, [pc, #36]	@ (8007d1c <_strtod_l+0x85c>)
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	f7f8 fbf7 	bl	80004ec <__aeabi_dmul>
 8007cfe:	4b08      	ldr	r3, [pc, #32]	@ (8007d20 <_strtod_l+0x860>)
 8007d00:	4682      	mov	sl, r0
 8007d02:	400b      	ands	r3, r1
 8007d04:	468b      	mov	fp, r1
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	f47f ae00 	bne.w	800790c <_strtod_l+0x44c>
 8007d0c:	2322      	movs	r3, #34	@ 0x22
 8007d0e:	9a05      	ldr	r2, [sp, #20]
 8007d10:	6013      	str	r3, [r2, #0]
 8007d12:	e5fb      	b.n	800790c <_strtod_l+0x44c>
 8007d14:	0800c450 	.word	0x0800c450
 8007d18:	fffffc02 	.word	0xfffffc02
 8007d1c:	39500000 	.word	0x39500000
 8007d20:	7ff00000 	.word	0x7ff00000
 8007d24:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007d28:	d165      	bne.n	8007df6 <_strtod_l+0x936>
 8007d2a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007d2c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007d30:	b35a      	cbz	r2, 8007d8a <_strtod_l+0x8ca>
 8007d32:	4a99      	ldr	r2, [pc, #612]	@ (8007f98 <_strtod_l+0xad8>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d12b      	bne.n	8007d90 <_strtod_l+0x8d0>
 8007d38:	9b08      	ldr	r3, [sp, #32]
 8007d3a:	4651      	mov	r1, sl
 8007d3c:	b303      	cbz	r3, 8007d80 <_strtod_l+0x8c0>
 8007d3e:	465a      	mov	r2, fp
 8007d40:	4b96      	ldr	r3, [pc, #600]	@ (8007f9c <_strtod_l+0xadc>)
 8007d42:	4013      	ands	r3, r2
 8007d44:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007d48:	f04f 32ff 	mov.w	r2, #4294967295
 8007d4c:	d81b      	bhi.n	8007d86 <_strtod_l+0x8c6>
 8007d4e:	0d1b      	lsrs	r3, r3, #20
 8007d50:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007d54:	fa02 f303 	lsl.w	r3, r2, r3
 8007d58:	4299      	cmp	r1, r3
 8007d5a:	d119      	bne.n	8007d90 <_strtod_l+0x8d0>
 8007d5c:	4b90      	ldr	r3, [pc, #576]	@ (8007fa0 <_strtod_l+0xae0>)
 8007d5e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d102      	bne.n	8007d6a <_strtod_l+0x8aa>
 8007d64:	3101      	adds	r1, #1
 8007d66:	f43f adc6 	beq.w	80078f6 <_strtod_l+0x436>
 8007d6a:	f04f 0a00 	mov.w	sl, #0
 8007d6e:	4b8b      	ldr	r3, [pc, #556]	@ (8007f9c <_strtod_l+0xadc>)
 8007d70:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007d72:	401a      	ands	r2, r3
 8007d74:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007d78:	9b08      	ldr	r3, [sp, #32]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d1b9      	bne.n	8007cf2 <_strtod_l+0x832>
 8007d7e:	e5c5      	b.n	800790c <_strtod_l+0x44c>
 8007d80:	f04f 33ff 	mov.w	r3, #4294967295
 8007d84:	e7e8      	b.n	8007d58 <_strtod_l+0x898>
 8007d86:	4613      	mov	r3, r2
 8007d88:	e7e6      	b.n	8007d58 <_strtod_l+0x898>
 8007d8a:	ea53 030a 	orrs.w	r3, r3, sl
 8007d8e:	d0a2      	beq.n	8007cd6 <_strtod_l+0x816>
 8007d90:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007d92:	b1db      	cbz	r3, 8007dcc <_strtod_l+0x90c>
 8007d94:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007d96:	4213      	tst	r3, r2
 8007d98:	d0ee      	beq.n	8007d78 <_strtod_l+0x8b8>
 8007d9a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d9c:	4650      	mov	r0, sl
 8007d9e:	4659      	mov	r1, fp
 8007da0:	9a08      	ldr	r2, [sp, #32]
 8007da2:	b1bb      	cbz	r3, 8007dd4 <_strtod_l+0x914>
 8007da4:	f7ff fb68 	bl	8007478 <sulp>
 8007da8:	4602      	mov	r2, r0
 8007daa:	460b      	mov	r3, r1
 8007dac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007db0:	f7f8 f9e6 	bl	8000180 <__adddf3>
 8007db4:	4682      	mov	sl, r0
 8007db6:	468b      	mov	fp, r1
 8007db8:	e7de      	b.n	8007d78 <_strtod_l+0x8b8>
 8007dba:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007dbe:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007dc2:	f04f 3aff 	mov.w	sl, #4294967295
 8007dc6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007dca:	e7d5      	b.n	8007d78 <_strtod_l+0x8b8>
 8007dcc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007dce:	ea13 0f0a 	tst.w	r3, sl
 8007dd2:	e7e1      	b.n	8007d98 <_strtod_l+0x8d8>
 8007dd4:	f7ff fb50 	bl	8007478 <sulp>
 8007dd8:	4602      	mov	r2, r0
 8007dda:	460b      	mov	r3, r1
 8007ddc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007de0:	f7f8 f9cc 	bl	800017c <__aeabi_dsub>
 8007de4:	2200      	movs	r2, #0
 8007de6:	2300      	movs	r3, #0
 8007de8:	4682      	mov	sl, r0
 8007dea:	468b      	mov	fp, r1
 8007dec:	f7f8 fde6 	bl	80009bc <__aeabi_dcmpeq>
 8007df0:	2800      	cmp	r0, #0
 8007df2:	d0c1      	beq.n	8007d78 <_strtod_l+0x8b8>
 8007df4:	e615      	b.n	8007a22 <_strtod_l+0x562>
 8007df6:	4641      	mov	r1, r8
 8007df8:	4620      	mov	r0, r4
 8007dfa:	f003 f991 	bl	800b120 <__ratio>
 8007dfe:	2200      	movs	r2, #0
 8007e00:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007e04:	4606      	mov	r6, r0
 8007e06:	460f      	mov	r7, r1
 8007e08:	f7f8 fdec 	bl	80009e4 <__aeabi_dcmple>
 8007e0c:	2800      	cmp	r0, #0
 8007e0e:	d06d      	beq.n	8007eec <_strtod_l+0xa2c>
 8007e10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d178      	bne.n	8007f08 <_strtod_l+0xa48>
 8007e16:	f1ba 0f00 	cmp.w	sl, #0
 8007e1a:	d156      	bne.n	8007eca <_strtod_l+0xa0a>
 8007e1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d158      	bne.n	8007ed8 <_strtod_l+0xa18>
 8007e26:	2200      	movs	r2, #0
 8007e28:	4630      	mov	r0, r6
 8007e2a:	4639      	mov	r1, r7
 8007e2c:	4b5d      	ldr	r3, [pc, #372]	@ (8007fa4 <_strtod_l+0xae4>)
 8007e2e:	f7f8 fdcf 	bl	80009d0 <__aeabi_dcmplt>
 8007e32:	2800      	cmp	r0, #0
 8007e34:	d157      	bne.n	8007ee6 <_strtod_l+0xa26>
 8007e36:	4630      	mov	r0, r6
 8007e38:	4639      	mov	r1, r7
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	4b5a      	ldr	r3, [pc, #360]	@ (8007fa8 <_strtod_l+0xae8>)
 8007e3e:	f7f8 fb55 	bl	80004ec <__aeabi_dmul>
 8007e42:	4606      	mov	r6, r0
 8007e44:	460f      	mov	r7, r1
 8007e46:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007e4a:	9606      	str	r6, [sp, #24]
 8007e4c:	9307      	str	r3, [sp, #28]
 8007e4e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007e52:	4d52      	ldr	r5, [pc, #328]	@ (8007f9c <_strtod_l+0xadc>)
 8007e54:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007e58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e5a:	401d      	ands	r5, r3
 8007e5c:	4b53      	ldr	r3, [pc, #332]	@ (8007fac <_strtod_l+0xaec>)
 8007e5e:	429d      	cmp	r5, r3
 8007e60:	f040 80aa 	bne.w	8007fb8 <_strtod_l+0xaf8>
 8007e64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e66:	4650      	mov	r0, sl
 8007e68:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007e6c:	4659      	mov	r1, fp
 8007e6e:	f003 f897 	bl	800afa0 <__ulp>
 8007e72:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007e76:	f7f8 fb39 	bl	80004ec <__aeabi_dmul>
 8007e7a:	4652      	mov	r2, sl
 8007e7c:	465b      	mov	r3, fp
 8007e7e:	f7f8 f97f 	bl	8000180 <__adddf3>
 8007e82:	460b      	mov	r3, r1
 8007e84:	4945      	ldr	r1, [pc, #276]	@ (8007f9c <_strtod_l+0xadc>)
 8007e86:	4a4a      	ldr	r2, [pc, #296]	@ (8007fb0 <_strtod_l+0xaf0>)
 8007e88:	4019      	ands	r1, r3
 8007e8a:	4291      	cmp	r1, r2
 8007e8c:	4682      	mov	sl, r0
 8007e8e:	d942      	bls.n	8007f16 <_strtod_l+0xa56>
 8007e90:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007e92:	4b43      	ldr	r3, [pc, #268]	@ (8007fa0 <_strtod_l+0xae0>)
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d103      	bne.n	8007ea0 <_strtod_l+0x9e0>
 8007e98:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007e9a:	3301      	adds	r3, #1
 8007e9c:	f43f ad2b 	beq.w	80078f6 <_strtod_l+0x436>
 8007ea0:	f04f 3aff 	mov.w	sl, #4294967295
 8007ea4:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8007fa0 <_strtod_l+0xae0>
 8007ea8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007eaa:	9805      	ldr	r0, [sp, #20]
 8007eac:	f002 fd46 	bl	800a93c <_Bfree>
 8007eb0:	4649      	mov	r1, r9
 8007eb2:	9805      	ldr	r0, [sp, #20]
 8007eb4:	f002 fd42 	bl	800a93c <_Bfree>
 8007eb8:	4641      	mov	r1, r8
 8007eba:	9805      	ldr	r0, [sp, #20]
 8007ebc:	f002 fd3e 	bl	800a93c <_Bfree>
 8007ec0:	4621      	mov	r1, r4
 8007ec2:	9805      	ldr	r0, [sp, #20]
 8007ec4:	f002 fd3a 	bl	800a93c <_Bfree>
 8007ec8:	e618      	b.n	8007afc <_strtod_l+0x63c>
 8007eca:	f1ba 0f01 	cmp.w	sl, #1
 8007ece:	d103      	bne.n	8007ed8 <_strtod_l+0xa18>
 8007ed0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	f43f ada5 	beq.w	8007a22 <_strtod_l+0x562>
 8007ed8:	2200      	movs	r2, #0
 8007eda:	4b36      	ldr	r3, [pc, #216]	@ (8007fb4 <_strtod_l+0xaf4>)
 8007edc:	2600      	movs	r6, #0
 8007ede:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007ee2:	4f30      	ldr	r7, [pc, #192]	@ (8007fa4 <_strtod_l+0xae4>)
 8007ee4:	e7b3      	b.n	8007e4e <_strtod_l+0x98e>
 8007ee6:	2600      	movs	r6, #0
 8007ee8:	4f2f      	ldr	r7, [pc, #188]	@ (8007fa8 <_strtod_l+0xae8>)
 8007eea:	e7ac      	b.n	8007e46 <_strtod_l+0x986>
 8007eec:	4630      	mov	r0, r6
 8007eee:	4639      	mov	r1, r7
 8007ef0:	4b2d      	ldr	r3, [pc, #180]	@ (8007fa8 <_strtod_l+0xae8>)
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	f7f8 fafa 	bl	80004ec <__aeabi_dmul>
 8007ef8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007efa:	4606      	mov	r6, r0
 8007efc:	460f      	mov	r7, r1
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d0a1      	beq.n	8007e46 <_strtod_l+0x986>
 8007f02:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007f06:	e7a2      	b.n	8007e4e <_strtod_l+0x98e>
 8007f08:	2200      	movs	r2, #0
 8007f0a:	4b26      	ldr	r3, [pc, #152]	@ (8007fa4 <_strtod_l+0xae4>)
 8007f0c:	4616      	mov	r6, r2
 8007f0e:	461f      	mov	r7, r3
 8007f10:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007f14:	e79b      	b.n	8007e4e <_strtod_l+0x98e>
 8007f16:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007f1a:	9b08      	ldr	r3, [sp, #32]
 8007f1c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d1c1      	bne.n	8007ea8 <_strtod_l+0x9e8>
 8007f24:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007f28:	0d1b      	lsrs	r3, r3, #20
 8007f2a:	051b      	lsls	r3, r3, #20
 8007f2c:	429d      	cmp	r5, r3
 8007f2e:	d1bb      	bne.n	8007ea8 <_strtod_l+0x9e8>
 8007f30:	4630      	mov	r0, r6
 8007f32:	4639      	mov	r1, r7
 8007f34:	f7f9 f932 	bl	800119c <__aeabi_d2lz>
 8007f38:	f7f8 faaa 	bl	8000490 <__aeabi_l2d>
 8007f3c:	4602      	mov	r2, r0
 8007f3e:	460b      	mov	r3, r1
 8007f40:	4630      	mov	r0, r6
 8007f42:	4639      	mov	r1, r7
 8007f44:	f7f8 f91a 	bl	800017c <__aeabi_dsub>
 8007f48:	460b      	mov	r3, r1
 8007f4a:	4602      	mov	r2, r0
 8007f4c:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007f50:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007f54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f56:	ea46 060a 	orr.w	r6, r6, sl
 8007f5a:	431e      	orrs	r6, r3
 8007f5c:	d069      	beq.n	8008032 <_strtod_l+0xb72>
 8007f5e:	a30a      	add	r3, pc, #40	@ (adr r3, 8007f88 <_strtod_l+0xac8>)
 8007f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f64:	f7f8 fd34 	bl	80009d0 <__aeabi_dcmplt>
 8007f68:	2800      	cmp	r0, #0
 8007f6a:	f47f accf 	bne.w	800790c <_strtod_l+0x44c>
 8007f6e:	a308      	add	r3, pc, #32	@ (adr r3, 8007f90 <_strtod_l+0xad0>)
 8007f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007f78:	f7f8 fd48 	bl	8000a0c <__aeabi_dcmpgt>
 8007f7c:	2800      	cmp	r0, #0
 8007f7e:	d093      	beq.n	8007ea8 <_strtod_l+0x9e8>
 8007f80:	e4c4      	b.n	800790c <_strtod_l+0x44c>
 8007f82:	bf00      	nop
 8007f84:	f3af 8000 	nop.w
 8007f88:	94a03595 	.word	0x94a03595
 8007f8c:	3fdfffff 	.word	0x3fdfffff
 8007f90:	35afe535 	.word	0x35afe535
 8007f94:	3fe00000 	.word	0x3fe00000
 8007f98:	000fffff 	.word	0x000fffff
 8007f9c:	7ff00000 	.word	0x7ff00000
 8007fa0:	7fefffff 	.word	0x7fefffff
 8007fa4:	3ff00000 	.word	0x3ff00000
 8007fa8:	3fe00000 	.word	0x3fe00000
 8007fac:	7fe00000 	.word	0x7fe00000
 8007fb0:	7c9fffff 	.word	0x7c9fffff
 8007fb4:	bff00000 	.word	0xbff00000
 8007fb8:	9b08      	ldr	r3, [sp, #32]
 8007fba:	b323      	cbz	r3, 8008006 <_strtod_l+0xb46>
 8007fbc:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007fc0:	d821      	bhi.n	8008006 <_strtod_l+0xb46>
 8007fc2:	a327      	add	r3, pc, #156	@ (adr r3, 8008060 <_strtod_l+0xba0>)
 8007fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc8:	4630      	mov	r0, r6
 8007fca:	4639      	mov	r1, r7
 8007fcc:	f7f8 fd0a 	bl	80009e4 <__aeabi_dcmple>
 8007fd0:	b1a0      	cbz	r0, 8007ffc <_strtod_l+0xb3c>
 8007fd2:	4639      	mov	r1, r7
 8007fd4:	4630      	mov	r0, r6
 8007fd6:	f7f8 fd61 	bl	8000a9c <__aeabi_d2uiz>
 8007fda:	2801      	cmp	r0, #1
 8007fdc:	bf38      	it	cc
 8007fde:	2001      	movcc	r0, #1
 8007fe0:	f7f8 fa0a 	bl	80003f8 <__aeabi_ui2d>
 8007fe4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007fe6:	4606      	mov	r6, r0
 8007fe8:	460f      	mov	r7, r1
 8007fea:	b9fb      	cbnz	r3, 800802c <_strtod_l+0xb6c>
 8007fec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007ff0:	9014      	str	r0, [sp, #80]	@ 0x50
 8007ff2:	9315      	str	r3, [sp, #84]	@ 0x54
 8007ff4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007ff8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007ffc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007ffe:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008002:	1b5b      	subs	r3, r3, r5
 8008004:	9311      	str	r3, [sp, #68]	@ 0x44
 8008006:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800800a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800800e:	f002 ffc7 	bl	800afa0 <__ulp>
 8008012:	4602      	mov	r2, r0
 8008014:	460b      	mov	r3, r1
 8008016:	4650      	mov	r0, sl
 8008018:	4659      	mov	r1, fp
 800801a:	f7f8 fa67 	bl	80004ec <__aeabi_dmul>
 800801e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008022:	f7f8 f8ad 	bl	8000180 <__adddf3>
 8008026:	4682      	mov	sl, r0
 8008028:	468b      	mov	fp, r1
 800802a:	e776      	b.n	8007f1a <_strtod_l+0xa5a>
 800802c:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008030:	e7e0      	b.n	8007ff4 <_strtod_l+0xb34>
 8008032:	a30d      	add	r3, pc, #52	@ (adr r3, 8008068 <_strtod_l+0xba8>)
 8008034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008038:	f7f8 fcca 	bl	80009d0 <__aeabi_dcmplt>
 800803c:	e79e      	b.n	8007f7c <_strtod_l+0xabc>
 800803e:	2300      	movs	r3, #0
 8008040:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008042:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008044:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008046:	6013      	str	r3, [r2, #0]
 8008048:	f7ff ba77 	b.w	800753a <_strtod_l+0x7a>
 800804c:	2a65      	cmp	r2, #101	@ 0x65
 800804e:	f43f ab6e 	beq.w	800772e <_strtod_l+0x26e>
 8008052:	2a45      	cmp	r2, #69	@ 0x45
 8008054:	f43f ab6b 	beq.w	800772e <_strtod_l+0x26e>
 8008058:	2301      	movs	r3, #1
 800805a:	f7ff bba6 	b.w	80077aa <_strtod_l+0x2ea>
 800805e:	bf00      	nop
 8008060:	ffc00000 	.word	0xffc00000
 8008064:	41dfffff 	.word	0x41dfffff
 8008068:	94a03595 	.word	0x94a03595
 800806c:	3fcfffff 	.word	0x3fcfffff

08008070 <_strtod_r>:
 8008070:	4b01      	ldr	r3, [pc, #4]	@ (8008078 <_strtod_r+0x8>)
 8008072:	f7ff ba25 	b.w	80074c0 <_strtod_l>
 8008076:	bf00      	nop
 8008078:	2000001c 	.word	0x2000001c

0800807c <strtof>:
 800807c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008080:	4d24      	ldr	r5, [pc, #144]	@ (8008114 <strtof+0x98>)
 8008082:	460a      	mov	r2, r1
 8008084:	4b24      	ldr	r3, [pc, #144]	@ (8008118 <strtof+0x9c>)
 8008086:	4601      	mov	r1, r0
 8008088:	6828      	ldr	r0, [r5, #0]
 800808a:	f7ff fa19 	bl	80074c0 <_strtod_l>
 800808e:	4602      	mov	r2, r0
 8008090:	460b      	mov	r3, r1
 8008092:	4606      	mov	r6, r0
 8008094:	460f      	mov	r7, r1
 8008096:	f7f8 fcc3 	bl	8000a20 <__aeabi_dcmpun>
 800809a:	b168      	cbz	r0, 80080b8 <strtof+0x3c>
 800809c:	2f00      	cmp	r7, #0
 800809e:	481f      	ldr	r0, [pc, #124]	@ (800811c <strtof+0xa0>)
 80080a0:	da06      	bge.n	80080b0 <strtof+0x34>
 80080a2:	f001 f96d 	bl	8009380 <nanf>
 80080a6:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 80080aa:	4620      	mov	r0, r4
 80080ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080b0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080b4:	f001 b964 	b.w	8009380 <nanf>
 80080b8:	4639      	mov	r1, r7
 80080ba:	4630      	mov	r0, r6
 80080bc:	f7f8 fd0e 	bl	8000adc <__aeabi_d2f>
 80080c0:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 80080c4:	4604      	mov	r4, r0
 80080c6:	4916      	ldr	r1, [pc, #88]	@ (8008120 <strtof+0xa4>)
 80080c8:	4640      	mov	r0, r8
 80080ca:	f7f9 f82b 	bl	8001124 <__aeabi_fcmpun>
 80080ce:	b9b0      	cbnz	r0, 80080fe <strtof+0x82>
 80080d0:	4640      	mov	r0, r8
 80080d2:	4913      	ldr	r1, [pc, #76]	@ (8008120 <strtof+0xa4>)
 80080d4:	f7f9 f808 	bl	80010e8 <__aeabi_fcmple>
 80080d8:	b988      	cbnz	r0, 80080fe <strtof+0x82>
 80080da:	f027 4900 	bic.w	r9, r7, #2147483648	@ 0x80000000
 80080de:	f04f 32ff 	mov.w	r2, #4294967295
 80080e2:	4630      	mov	r0, r6
 80080e4:	4649      	mov	r1, r9
 80080e6:	4b0f      	ldr	r3, [pc, #60]	@ (8008124 <strtof+0xa8>)
 80080e8:	f7f8 fc9a 	bl	8000a20 <__aeabi_dcmpun>
 80080ec:	b970      	cbnz	r0, 800810c <strtof+0x90>
 80080ee:	f04f 32ff 	mov.w	r2, #4294967295
 80080f2:	4630      	mov	r0, r6
 80080f4:	4649      	mov	r1, r9
 80080f6:	4b0b      	ldr	r3, [pc, #44]	@ (8008124 <strtof+0xa8>)
 80080f8:	f7f8 fc74 	bl	80009e4 <__aeabi_dcmple>
 80080fc:	b930      	cbnz	r0, 800810c <strtof+0x90>
 80080fe:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 8008102:	d1d2      	bne.n	80080aa <strtof+0x2e>
 8008104:	4b08      	ldr	r3, [pc, #32]	@ (8008128 <strtof+0xac>)
 8008106:	403b      	ands	r3, r7
 8008108:	2b00      	cmp	r3, #0
 800810a:	d0ce      	beq.n	80080aa <strtof+0x2e>
 800810c:	2222      	movs	r2, #34	@ 0x22
 800810e:	682b      	ldr	r3, [r5, #0]
 8008110:	601a      	str	r2, [r3, #0]
 8008112:	e7ca      	b.n	80080aa <strtof+0x2e>
 8008114:	20000188 	.word	0x20000188
 8008118:	2000001c 	.word	0x2000001c
 800811c:	0800c84c 	.word	0x0800c84c
 8008120:	7f7fffff 	.word	0x7f7fffff
 8008124:	7fefffff 	.word	0x7fefffff
 8008128:	7ff00000 	.word	0x7ff00000

0800812c <_strtoul_l.constprop.0>:
 800812c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008130:	4686      	mov	lr, r0
 8008132:	460d      	mov	r5, r1
 8008134:	4e33      	ldr	r6, [pc, #204]	@ (8008204 <_strtoul_l.constprop.0+0xd8>)
 8008136:	4628      	mov	r0, r5
 8008138:	f815 4b01 	ldrb.w	r4, [r5], #1
 800813c:	5d37      	ldrb	r7, [r6, r4]
 800813e:	f017 0708 	ands.w	r7, r7, #8
 8008142:	d1f8      	bne.n	8008136 <_strtoul_l.constprop.0+0xa>
 8008144:	2c2d      	cmp	r4, #45	@ 0x2d
 8008146:	d12f      	bne.n	80081a8 <_strtoul_l.constprop.0+0x7c>
 8008148:	2701      	movs	r7, #1
 800814a:	782c      	ldrb	r4, [r5, #0]
 800814c:	1c85      	adds	r5, r0, #2
 800814e:	f033 0010 	bics.w	r0, r3, #16
 8008152:	d109      	bne.n	8008168 <_strtoul_l.constprop.0+0x3c>
 8008154:	2c30      	cmp	r4, #48	@ 0x30
 8008156:	d12c      	bne.n	80081b2 <_strtoul_l.constprop.0+0x86>
 8008158:	7828      	ldrb	r0, [r5, #0]
 800815a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800815e:	2858      	cmp	r0, #88	@ 0x58
 8008160:	d127      	bne.n	80081b2 <_strtoul_l.constprop.0+0x86>
 8008162:	2310      	movs	r3, #16
 8008164:	786c      	ldrb	r4, [r5, #1]
 8008166:	3502      	adds	r5, #2
 8008168:	f04f 38ff 	mov.w	r8, #4294967295
 800816c:	fbb8 f8f3 	udiv	r8, r8, r3
 8008170:	2600      	movs	r6, #0
 8008172:	fb03 f908 	mul.w	r9, r3, r8
 8008176:	4630      	mov	r0, r6
 8008178:	ea6f 0909 	mvn.w	r9, r9
 800817c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8008180:	f1bc 0f09 	cmp.w	ip, #9
 8008184:	d81c      	bhi.n	80081c0 <_strtoul_l.constprop.0+0x94>
 8008186:	4664      	mov	r4, ip
 8008188:	42a3      	cmp	r3, r4
 800818a:	dd2a      	ble.n	80081e2 <_strtoul_l.constprop.0+0xb6>
 800818c:	f1b6 3fff 	cmp.w	r6, #4294967295
 8008190:	d007      	beq.n	80081a2 <_strtoul_l.constprop.0+0x76>
 8008192:	4580      	cmp	r8, r0
 8008194:	d322      	bcc.n	80081dc <_strtoul_l.constprop.0+0xb0>
 8008196:	d101      	bne.n	800819c <_strtoul_l.constprop.0+0x70>
 8008198:	45a1      	cmp	r9, r4
 800819a:	db1f      	blt.n	80081dc <_strtoul_l.constprop.0+0xb0>
 800819c:	2601      	movs	r6, #1
 800819e:	fb00 4003 	mla	r0, r0, r3, r4
 80081a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80081a6:	e7e9      	b.n	800817c <_strtoul_l.constprop.0+0x50>
 80081a8:	2c2b      	cmp	r4, #43	@ 0x2b
 80081aa:	bf04      	itt	eq
 80081ac:	782c      	ldrbeq	r4, [r5, #0]
 80081ae:	1c85      	addeq	r5, r0, #2
 80081b0:	e7cd      	b.n	800814e <_strtoul_l.constprop.0+0x22>
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d1d8      	bne.n	8008168 <_strtoul_l.constprop.0+0x3c>
 80081b6:	2c30      	cmp	r4, #48	@ 0x30
 80081b8:	bf0c      	ite	eq
 80081ba:	2308      	moveq	r3, #8
 80081bc:	230a      	movne	r3, #10
 80081be:	e7d3      	b.n	8008168 <_strtoul_l.constprop.0+0x3c>
 80081c0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80081c4:	f1bc 0f19 	cmp.w	ip, #25
 80081c8:	d801      	bhi.n	80081ce <_strtoul_l.constprop.0+0xa2>
 80081ca:	3c37      	subs	r4, #55	@ 0x37
 80081cc:	e7dc      	b.n	8008188 <_strtoul_l.constprop.0+0x5c>
 80081ce:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80081d2:	f1bc 0f19 	cmp.w	ip, #25
 80081d6:	d804      	bhi.n	80081e2 <_strtoul_l.constprop.0+0xb6>
 80081d8:	3c57      	subs	r4, #87	@ 0x57
 80081da:	e7d5      	b.n	8008188 <_strtoul_l.constprop.0+0x5c>
 80081dc:	f04f 36ff 	mov.w	r6, #4294967295
 80081e0:	e7df      	b.n	80081a2 <_strtoul_l.constprop.0+0x76>
 80081e2:	1c73      	adds	r3, r6, #1
 80081e4:	d106      	bne.n	80081f4 <_strtoul_l.constprop.0+0xc8>
 80081e6:	2322      	movs	r3, #34	@ 0x22
 80081e8:	4630      	mov	r0, r6
 80081ea:	f8ce 3000 	str.w	r3, [lr]
 80081ee:	b932      	cbnz	r2, 80081fe <_strtoul_l.constprop.0+0xd2>
 80081f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80081f4:	b107      	cbz	r7, 80081f8 <_strtoul_l.constprop.0+0xcc>
 80081f6:	4240      	negs	r0, r0
 80081f8:	2a00      	cmp	r2, #0
 80081fa:	d0f9      	beq.n	80081f0 <_strtoul_l.constprop.0+0xc4>
 80081fc:	b106      	cbz	r6, 8008200 <_strtoul_l.constprop.0+0xd4>
 80081fe:	1e69      	subs	r1, r5, #1
 8008200:	6011      	str	r1, [r2, #0]
 8008202:	e7f5      	b.n	80081f0 <_strtoul_l.constprop.0+0xc4>
 8008204:	0800c479 	.word	0x0800c479

08008208 <strtoul>:
 8008208:	4613      	mov	r3, r2
 800820a:	460a      	mov	r2, r1
 800820c:	4601      	mov	r1, r0
 800820e:	4802      	ldr	r0, [pc, #8]	@ (8008218 <strtoul+0x10>)
 8008210:	6800      	ldr	r0, [r0, #0]
 8008212:	f7ff bf8b 	b.w	800812c <_strtoul_l.constprop.0>
 8008216:	bf00      	nop
 8008218:	20000188 	.word	0x20000188

0800821c <__cvt>:
 800821c:	2b00      	cmp	r3, #0
 800821e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008222:	461d      	mov	r5, r3
 8008224:	bfbb      	ittet	lt
 8008226:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800822a:	461d      	movlt	r5, r3
 800822c:	2300      	movge	r3, #0
 800822e:	232d      	movlt	r3, #45	@ 0x2d
 8008230:	b088      	sub	sp, #32
 8008232:	4614      	mov	r4, r2
 8008234:	bfb8      	it	lt
 8008236:	4614      	movlt	r4, r2
 8008238:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800823a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800823c:	7013      	strb	r3, [r2, #0]
 800823e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008240:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8008244:	f023 0820 	bic.w	r8, r3, #32
 8008248:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800824c:	d005      	beq.n	800825a <__cvt+0x3e>
 800824e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008252:	d100      	bne.n	8008256 <__cvt+0x3a>
 8008254:	3601      	adds	r6, #1
 8008256:	2302      	movs	r3, #2
 8008258:	e000      	b.n	800825c <__cvt+0x40>
 800825a:	2303      	movs	r3, #3
 800825c:	aa07      	add	r2, sp, #28
 800825e:	9204      	str	r2, [sp, #16]
 8008260:	aa06      	add	r2, sp, #24
 8008262:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008266:	e9cd 3600 	strd	r3, r6, [sp]
 800826a:	4622      	mov	r2, r4
 800826c:	462b      	mov	r3, r5
 800826e:	f001 f913 	bl	8009498 <_dtoa_r>
 8008272:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008276:	4607      	mov	r7, r0
 8008278:	d119      	bne.n	80082ae <__cvt+0x92>
 800827a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800827c:	07db      	lsls	r3, r3, #31
 800827e:	d50e      	bpl.n	800829e <__cvt+0x82>
 8008280:	eb00 0906 	add.w	r9, r0, r6
 8008284:	2200      	movs	r2, #0
 8008286:	2300      	movs	r3, #0
 8008288:	4620      	mov	r0, r4
 800828a:	4629      	mov	r1, r5
 800828c:	f7f8 fb96 	bl	80009bc <__aeabi_dcmpeq>
 8008290:	b108      	cbz	r0, 8008296 <__cvt+0x7a>
 8008292:	f8cd 901c 	str.w	r9, [sp, #28]
 8008296:	2230      	movs	r2, #48	@ 0x30
 8008298:	9b07      	ldr	r3, [sp, #28]
 800829a:	454b      	cmp	r3, r9
 800829c:	d31e      	bcc.n	80082dc <__cvt+0xc0>
 800829e:	4638      	mov	r0, r7
 80082a0:	9b07      	ldr	r3, [sp, #28]
 80082a2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80082a4:	1bdb      	subs	r3, r3, r7
 80082a6:	6013      	str	r3, [r2, #0]
 80082a8:	b008      	add	sp, #32
 80082aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082ae:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80082b2:	eb00 0906 	add.w	r9, r0, r6
 80082b6:	d1e5      	bne.n	8008284 <__cvt+0x68>
 80082b8:	7803      	ldrb	r3, [r0, #0]
 80082ba:	2b30      	cmp	r3, #48	@ 0x30
 80082bc:	d10a      	bne.n	80082d4 <__cvt+0xb8>
 80082be:	2200      	movs	r2, #0
 80082c0:	2300      	movs	r3, #0
 80082c2:	4620      	mov	r0, r4
 80082c4:	4629      	mov	r1, r5
 80082c6:	f7f8 fb79 	bl	80009bc <__aeabi_dcmpeq>
 80082ca:	b918      	cbnz	r0, 80082d4 <__cvt+0xb8>
 80082cc:	f1c6 0601 	rsb	r6, r6, #1
 80082d0:	f8ca 6000 	str.w	r6, [sl]
 80082d4:	f8da 3000 	ldr.w	r3, [sl]
 80082d8:	4499      	add	r9, r3
 80082da:	e7d3      	b.n	8008284 <__cvt+0x68>
 80082dc:	1c59      	adds	r1, r3, #1
 80082de:	9107      	str	r1, [sp, #28]
 80082e0:	701a      	strb	r2, [r3, #0]
 80082e2:	e7d9      	b.n	8008298 <__cvt+0x7c>

080082e4 <__exponent>:
 80082e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082e6:	2900      	cmp	r1, #0
 80082e8:	bfb6      	itet	lt
 80082ea:	232d      	movlt	r3, #45	@ 0x2d
 80082ec:	232b      	movge	r3, #43	@ 0x2b
 80082ee:	4249      	neglt	r1, r1
 80082f0:	2909      	cmp	r1, #9
 80082f2:	7002      	strb	r2, [r0, #0]
 80082f4:	7043      	strb	r3, [r0, #1]
 80082f6:	dd29      	ble.n	800834c <__exponent+0x68>
 80082f8:	f10d 0307 	add.w	r3, sp, #7
 80082fc:	461d      	mov	r5, r3
 80082fe:	270a      	movs	r7, #10
 8008300:	fbb1 f6f7 	udiv	r6, r1, r7
 8008304:	461a      	mov	r2, r3
 8008306:	fb07 1416 	mls	r4, r7, r6, r1
 800830a:	3430      	adds	r4, #48	@ 0x30
 800830c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008310:	460c      	mov	r4, r1
 8008312:	2c63      	cmp	r4, #99	@ 0x63
 8008314:	4631      	mov	r1, r6
 8008316:	f103 33ff 	add.w	r3, r3, #4294967295
 800831a:	dcf1      	bgt.n	8008300 <__exponent+0x1c>
 800831c:	3130      	adds	r1, #48	@ 0x30
 800831e:	1e94      	subs	r4, r2, #2
 8008320:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008324:	4623      	mov	r3, r4
 8008326:	1c41      	adds	r1, r0, #1
 8008328:	42ab      	cmp	r3, r5
 800832a:	d30a      	bcc.n	8008342 <__exponent+0x5e>
 800832c:	f10d 0309 	add.w	r3, sp, #9
 8008330:	1a9b      	subs	r3, r3, r2
 8008332:	42ac      	cmp	r4, r5
 8008334:	bf88      	it	hi
 8008336:	2300      	movhi	r3, #0
 8008338:	3302      	adds	r3, #2
 800833a:	4403      	add	r3, r0
 800833c:	1a18      	subs	r0, r3, r0
 800833e:	b003      	add	sp, #12
 8008340:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008342:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008346:	f801 6f01 	strb.w	r6, [r1, #1]!
 800834a:	e7ed      	b.n	8008328 <__exponent+0x44>
 800834c:	2330      	movs	r3, #48	@ 0x30
 800834e:	3130      	adds	r1, #48	@ 0x30
 8008350:	7083      	strb	r3, [r0, #2]
 8008352:	70c1      	strb	r1, [r0, #3]
 8008354:	1d03      	adds	r3, r0, #4
 8008356:	e7f1      	b.n	800833c <__exponent+0x58>

08008358 <_printf_float>:
 8008358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800835c:	b091      	sub	sp, #68	@ 0x44
 800835e:	460c      	mov	r4, r1
 8008360:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8008364:	4616      	mov	r6, r2
 8008366:	461f      	mov	r7, r3
 8008368:	4605      	mov	r5, r0
 800836a:	f000 ff67 	bl	800923c <_localeconv_r>
 800836e:	6803      	ldr	r3, [r0, #0]
 8008370:	4618      	mov	r0, r3
 8008372:	9308      	str	r3, [sp, #32]
 8008374:	f7f7 fef6 	bl	8000164 <strlen>
 8008378:	2300      	movs	r3, #0
 800837a:	930e      	str	r3, [sp, #56]	@ 0x38
 800837c:	f8d8 3000 	ldr.w	r3, [r8]
 8008380:	9009      	str	r0, [sp, #36]	@ 0x24
 8008382:	3307      	adds	r3, #7
 8008384:	f023 0307 	bic.w	r3, r3, #7
 8008388:	f103 0208 	add.w	r2, r3, #8
 800838c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008390:	f8d4 b000 	ldr.w	fp, [r4]
 8008394:	f8c8 2000 	str.w	r2, [r8]
 8008398:	e9d3 8900 	ldrd	r8, r9, [r3]
 800839c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80083a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80083a2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80083a6:	f04f 32ff 	mov.w	r2, #4294967295
 80083aa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80083ae:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80083b2:	4b9c      	ldr	r3, [pc, #624]	@ (8008624 <_printf_float+0x2cc>)
 80083b4:	f7f8 fb34 	bl	8000a20 <__aeabi_dcmpun>
 80083b8:	bb70      	cbnz	r0, 8008418 <_printf_float+0xc0>
 80083ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80083be:	f04f 32ff 	mov.w	r2, #4294967295
 80083c2:	4b98      	ldr	r3, [pc, #608]	@ (8008624 <_printf_float+0x2cc>)
 80083c4:	f7f8 fb0e 	bl	80009e4 <__aeabi_dcmple>
 80083c8:	bb30      	cbnz	r0, 8008418 <_printf_float+0xc0>
 80083ca:	2200      	movs	r2, #0
 80083cc:	2300      	movs	r3, #0
 80083ce:	4640      	mov	r0, r8
 80083d0:	4649      	mov	r1, r9
 80083d2:	f7f8 fafd 	bl	80009d0 <__aeabi_dcmplt>
 80083d6:	b110      	cbz	r0, 80083de <_printf_float+0x86>
 80083d8:	232d      	movs	r3, #45	@ 0x2d
 80083da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80083de:	4a92      	ldr	r2, [pc, #584]	@ (8008628 <_printf_float+0x2d0>)
 80083e0:	4b92      	ldr	r3, [pc, #584]	@ (800862c <_printf_float+0x2d4>)
 80083e2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80083e6:	bf94      	ite	ls
 80083e8:	4690      	movls	r8, r2
 80083ea:	4698      	movhi	r8, r3
 80083ec:	2303      	movs	r3, #3
 80083ee:	f04f 0900 	mov.w	r9, #0
 80083f2:	6123      	str	r3, [r4, #16]
 80083f4:	f02b 0304 	bic.w	r3, fp, #4
 80083f8:	6023      	str	r3, [r4, #0]
 80083fa:	4633      	mov	r3, r6
 80083fc:	4621      	mov	r1, r4
 80083fe:	4628      	mov	r0, r5
 8008400:	9700      	str	r7, [sp, #0]
 8008402:	aa0f      	add	r2, sp, #60	@ 0x3c
 8008404:	f000 f9d4 	bl	80087b0 <_printf_common>
 8008408:	3001      	adds	r0, #1
 800840a:	f040 8090 	bne.w	800852e <_printf_float+0x1d6>
 800840e:	f04f 30ff 	mov.w	r0, #4294967295
 8008412:	b011      	add	sp, #68	@ 0x44
 8008414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008418:	4642      	mov	r2, r8
 800841a:	464b      	mov	r3, r9
 800841c:	4640      	mov	r0, r8
 800841e:	4649      	mov	r1, r9
 8008420:	f7f8 fafe 	bl	8000a20 <__aeabi_dcmpun>
 8008424:	b148      	cbz	r0, 800843a <_printf_float+0xe2>
 8008426:	464b      	mov	r3, r9
 8008428:	2b00      	cmp	r3, #0
 800842a:	bfb8      	it	lt
 800842c:	232d      	movlt	r3, #45	@ 0x2d
 800842e:	4a80      	ldr	r2, [pc, #512]	@ (8008630 <_printf_float+0x2d8>)
 8008430:	bfb8      	it	lt
 8008432:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008436:	4b7f      	ldr	r3, [pc, #508]	@ (8008634 <_printf_float+0x2dc>)
 8008438:	e7d3      	b.n	80083e2 <_printf_float+0x8a>
 800843a:	6863      	ldr	r3, [r4, #4]
 800843c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8008440:	1c5a      	adds	r2, r3, #1
 8008442:	d13f      	bne.n	80084c4 <_printf_float+0x16c>
 8008444:	2306      	movs	r3, #6
 8008446:	6063      	str	r3, [r4, #4]
 8008448:	2200      	movs	r2, #0
 800844a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800844e:	6023      	str	r3, [r4, #0]
 8008450:	9206      	str	r2, [sp, #24]
 8008452:	aa0e      	add	r2, sp, #56	@ 0x38
 8008454:	e9cd a204 	strd	sl, r2, [sp, #16]
 8008458:	aa0d      	add	r2, sp, #52	@ 0x34
 800845a:	9203      	str	r2, [sp, #12]
 800845c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8008460:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008464:	6863      	ldr	r3, [r4, #4]
 8008466:	4642      	mov	r2, r8
 8008468:	9300      	str	r3, [sp, #0]
 800846a:	4628      	mov	r0, r5
 800846c:	464b      	mov	r3, r9
 800846e:	910a      	str	r1, [sp, #40]	@ 0x28
 8008470:	f7ff fed4 	bl	800821c <__cvt>
 8008474:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008476:	4680      	mov	r8, r0
 8008478:	2947      	cmp	r1, #71	@ 0x47
 800847a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800847c:	d128      	bne.n	80084d0 <_printf_float+0x178>
 800847e:	1cc8      	adds	r0, r1, #3
 8008480:	db02      	blt.n	8008488 <_printf_float+0x130>
 8008482:	6863      	ldr	r3, [r4, #4]
 8008484:	4299      	cmp	r1, r3
 8008486:	dd40      	ble.n	800850a <_printf_float+0x1b2>
 8008488:	f1aa 0a02 	sub.w	sl, sl, #2
 800848c:	fa5f fa8a 	uxtb.w	sl, sl
 8008490:	4652      	mov	r2, sl
 8008492:	3901      	subs	r1, #1
 8008494:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008498:	910d      	str	r1, [sp, #52]	@ 0x34
 800849a:	f7ff ff23 	bl	80082e4 <__exponent>
 800849e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80084a0:	4681      	mov	r9, r0
 80084a2:	1813      	adds	r3, r2, r0
 80084a4:	2a01      	cmp	r2, #1
 80084a6:	6123      	str	r3, [r4, #16]
 80084a8:	dc02      	bgt.n	80084b0 <_printf_float+0x158>
 80084aa:	6822      	ldr	r2, [r4, #0]
 80084ac:	07d2      	lsls	r2, r2, #31
 80084ae:	d501      	bpl.n	80084b4 <_printf_float+0x15c>
 80084b0:	3301      	adds	r3, #1
 80084b2:	6123      	str	r3, [r4, #16]
 80084b4:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d09e      	beq.n	80083fa <_printf_float+0xa2>
 80084bc:	232d      	movs	r3, #45	@ 0x2d
 80084be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80084c2:	e79a      	b.n	80083fa <_printf_float+0xa2>
 80084c4:	2947      	cmp	r1, #71	@ 0x47
 80084c6:	d1bf      	bne.n	8008448 <_printf_float+0xf0>
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d1bd      	bne.n	8008448 <_printf_float+0xf0>
 80084cc:	2301      	movs	r3, #1
 80084ce:	e7ba      	b.n	8008446 <_printf_float+0xee>
 80084d0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80084d4:	d9dc      	bls.n	8008490 <_printf_float+0x138>
 80084d6:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80084da:	d118      	bne.n	800850e <_printf_float+0x1b6>
 80084dc:	2900      	cmp	r1, #0
 80084de:	6863      	ldr	r3, [r4, #4]
 80084e0:	dd0b      	ble.n	80084fa <_printf_float+0x1a2>
 80084e2:	6121      	str	r1, [r4, #16]
 80084e4:	b913      	cbnz	r3, 80084ec <_printf_float+0x194>
 80084e6:	6822      	ldr	r2, [r4, #0]
 80084e8:	07d0      	lsls	r0, r2, #31
 80084ea:	d502      	bpl.n	80084f2 <_printf_float+0x19a>
 80084ec:	3301      	adds	r3, #1
 80084ee:	440b      	add	r3, r1
 80084f0:	6123      	str	r3, [r4, #16]
 80084f2:	f04f 0900 	mov.w	r9, #0
 80084f6:	65a1      	str	r1, [r4, #88]	@ 0x58
 80084f8:	e7dc      	b.n	80084b4 <_printf_float+0x15c>
 80084fa:	b913      	cbnz	r3, 8008502 <_printf_float+0x1aa>
 80084fc:	6822      	ldr	r2, [r4, #0]
 80084fe:	07d2      	lsls	r2, r2, #31
 8008500:	d501      	bpl.n	8008506 <_printf_float+0x1ae>
 8008502:	3302      	adds	r3, #2
 8008504:	e7f4      	b.n	80084f0 <_printf_float+0x198>
 8008506:	2301      	movs	r3, #1
 8008508:	e7f2      	b.n	80084f0 <_printf_float+0x198>
 800850a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800850e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008510:	4299      	cmp	r1, r3
 8008512:	db05      	blt.n	8008520 <_printf_float+0x1c8>
 8008514:	6823      	ldr	r3, [r4, #0]
 8008516:	6121      	str	r1, [r4, #16]
 8008518:	07d8      	lsls	r0, r3, #31
 800851a:	d5ea      	bpl.n	80084f2 <_printf_float+0x19a>
 800851c:	1c4b      	adds	r3, r1, #1
 800851e:	e7e7      	b.n	80084f0 <_printf_float+0x198>
 8008520:	2900      	cmp	r1, #0
 8008522:	bfcc      	ite	gt
 8008524:	2201      	movgt	r2, #1
 8008526:	f1c1 0202 	rsble	r2, r1, #2
 800852a:	4413      	add	r3, r2
 800852c:	e7e0      	b.n	80084f0 <_printf_float+0x198>
 800852e:	6823      	ldr	r3, [r4, #0]
 8008530:	055a      	lsls	r2, r3, #21
 8008532:	d407      	bmi.n	8008544 <_printf_float+0x1ec>
 8008534:	6923      	ldr	r3, [r4, #16]
 8008536:	4642      	mov	r2, r8
 8008538:	4631      	mov	r1, r6
 800853a:	4628      	mov	r0, r5
 800853c:	47b8      	blx	r7
 800853e:	3001      	adds	r0, #1
 8008540:	d12b      	bne.n	800859a <_printf_float+0x242>
 8008542:	e764      	b.n	800840e <_printf_float+0xb6>
 8008544:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008548:	f240 80dc 	bls.w	8008704 <_printf_float+0x3ac>
 800854c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008550:	2200      	movs	r2, #0
 8008552:	2300      	movs	r3, #0
 8008554:	f7f8 fa32 	bl	80009bc <__aeabi_dcmpeq>
 8008558:	2800      	cmp	r0, #0
 800855a:	d033      	beq.n	80085c4 <_printf_float+0x26c>
 800855c:	2301      	movs	r3, #1
 800855e:	4631      	mov	r1, r6
 8008560:	4628      	mov	r0, r5
 8008562:	4a35      	ldr	r2, [pc, #212]	@ (8008638 <_printf_float+0x2e0>)
 8008564:	47b8      	blx	r7
 8008566:	3001      	adds	r0, #1
 8008568:	f43f af51 	beq.w	800840e <_printf_float+0xb6>
 800856c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8008570:	4543      	cmp	r3, r8
 8008572:	db02      	blt.n	800857a <_printf_float+0x222>
 8008574:	6823      	ldr	r3, [r4, #0]
 8008576:	07d8      	lsls	r0, r3, #31
 8008578:	d50f      	bpl.n	800859a <_printf_float+0x242>
 800857a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800857e:	4631      	mov	r1, r6
 8008580:	4628      	mov	r0, r5
 8008582:	47b8      	blx	r7
 8008584:	3001      	adds	r0, #1
 8008586:	f43f af42 	beq.w	800840e <_printf_float+0xb6>
 800858a:	f04f 0900 	mov.w	r9, #0
 800858e:	f108 38ff 	add.w	r8, r8, #4294967295
 8008592:	f104 0a1a 	add.w	sl, r4, #26
 8008596:	45c8      	cmp	r8, r9
 8008598:	dc09      	bgt.n	80085ae <_printf_float+0x256>
 800859a:	6823      	ldr	r3, [r4, #0]
 800859c:	079b      	lsls	r3, r3, #30
 800859e:	f100 8102 	bmi.w	80087a6 <_printf_float+0x44e>
 80085a2:	68e0      	ldr	r0, [r4, #12]
 80085a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80085a6:	4298      	cmp	r0, r3
 80085a8:	bfb8      	it	lt
 80085aa:	4618      	movlt	r0, r3
 80085ac:	e731      	b.n	8008412 <_printf_float+0xba>
 80085ae:	2301      	movs	r3, #1
 80085b0:	4652      	mov	r2, sl
 80085b2:	4631      	mov	r1, r6
 80085b4:	4628      	mov	r0, r5
 80085b6:	47b8      	blx	r7
 80085b8:	3001      	adds	r0, #1
 80085ba:	f43f af28 	beq.w	800840e <_printf_float+0xb6>
 80085be:	f109 0901 	add.w	r9, r9, #1
 80085c2:	e7e8      	b.n	8008596 <_printf_float+0x23e>
 80085c4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	dc38      	bgt.n	800863c <_printf_float+0x2e4>
 80085ca:	2301      	movs	r3, #1
 80085cc:	4631      	mov	r1, r6
 80085ce:	4628      	mov	r0, r5
 80085d0:	4a19      	ldr	r2, [pc, #100]	@ (8008638 <_printf_float+0x2e0>)
 80085d2:	47b8      	blx	r7
 80085d4:	3001      	adds	r0, #1
 80085d6:	f43f af1a 	beq.w	800840e <_printf_float+0xb6>
 80085da:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80085de:	ea59 0303 	orrs.w	r3, r9, r3
 80085e2:	d102      	bne.n	80085ea <_printf_float+0x292>
 80085e4:	6823      	ldr	r3, [r4, #0]
 80085e6:	07d9      	lsls	r1, r3, #31
 80085e8:	d5d7      	bpl.n	800859a <_printf_float+0x242>
 80085ea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80085ee:	4631      	mov	r1, r6
 80085f0:	4628      	mov	r0, r5
 80085f2:	47b8      	blx	r7
 80085f4:	3001      	adds	r0, #1
 80085f6:	f43f af0a 	beq.w	800840e <_printf_float+0xb6>
 80085fa:	f04f 0a00 	mov.w	sl, #0
 80085fe:	f104 0b1a 	add.w	fp, r4, #26
 8008602:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008604:	425b      	negs	r3, r3
 8008606:	4553      	cmp	r3, sl
 8008608:	dc01      	bgt.n	800860e <_printf_float+0x2b6>
 800860a:	464b      	mov	r3, r9
 800860c:	e793      	b.n	8008536 <_printf_float+0x1de>
 800860e:	2301      	movs	r3, #1
 8008610:	465a      	mov	r2, fp
 8008612:	4631      	mov	r1, r6
 8008614:	4628      	mov	r0, r5
 8008616:	47b8      	blx	r7
 8008618:	3001      	adds	r0, #1
 800861a:	f43f aef8 	beq.w	800840e <_printf_float+0xb6>
 800861e:	f10a 0a01 	add.w	sl, sl, #1
 8008622:	e7ee      	b.n	8008602 <_printf_float+0x2aa>
 8008624:	7fefffff 	.word	0x7fefffff
 8008628:	0800c579 	.word	0x0800c579
 800862c:	0800c57d 	.word	0x0800c57d
 8008630:	0800c581 	.word	0x0800c581
 8008634:	0800c585 	.word	0x0800c585
 8008638:	0800c589 	.word	0x0800c589
 800863c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800863e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8008642:	4553      	cmp	r3, sl
 8008644:	bfa8      	it	ge
 8008646:	4653      	movge	r3, sl
 8008648:	2b00      	cmp	r3, #0
 800864a:	4699      	mov	r9, r3
 800864c:	dc36      	bgt.n	80086bc <_printf_float+0x364>
 800864e:	f04f 0b00 	mov.w	fp, #0
 8008652:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008656:	f104 021a 	add.w	r2, r4, #26
 800865a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800865c:	930a      	str	r3, [sp, #40]	@ 0x28
 800865e:	eba3 0309 	sub.w	r3, r3, r9
 8008662:	455b      	cmp	r3, fp
 8008664:	dc31      	bgt.n	80086ca <_printf_float+0x372>
 8008666:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008668:	459a      	cmp	sl, r3
 800866a:	dc3a      	bgt.n	80086e2 <_printf_float+0x38a>
 800866c:	6823      	ldr	r3, [r4, #0]
 800866e:	07da      	lsls	r2, r3, #31
 8008670:	d437      	bmi.n	80086e2 <_printf_float+0x38a>
 8008672:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008674:	ebaa 0903 	sub.w	r9, sl, r3
 8008678:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800867a:	ebaa 0303 	sub.w	r3, sl, r3
 800867e:	4599      	cmp	r9, r3
 8008680:	bfa8      	it	ge
 8008682:	4699      	movge	r9, r3
 8008684:	f1b9 0f00 	cmp.w	r9, #0
 8008688:	dc33      	bgt.n	80086f2 <_printf_float+0x39a>
 800868a:	f04f 0800 	mov.w	r8, #0
 800868e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008692:	f104 0b1a 	add.w	fp, r4, #26
 8008696:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008698:	ebaa 0303 	sub.w	r3, sl, r3
 800869c:	eba3 0309 	sub.w	r3, r3, r9
 80086a0:	4543      	cmp	r3, r8
 80086a2:	f77f af7a 	ble.w	800859a <_printf_float+0x242>
 80086a6:	2301      	movs	r3, #1
 80086a8:	465a      	mov	r2, fp
 80086aa:	4631      	mov	r1, r6
 80086ac:	4628      	mov	r0, r5
 80086ae:	47b8      	blx	r7
 80086b0:	3001      	adds	r0, #1
 80086b2:	f43f aeac 	beq.w	800840e <_printf_float+0xb6>
 80086b6:	f108 0801 	add.w	r8, r8, #1
 80086ba:	e7ec      	b.n	8008696 <_printf_float+0x33e>
 80086bc:	4642      	mov	r2, r8
 80086be:	4631      	mov	r1, r6
 80086c0:	4628      	mov	r0, r5
 80086c2:	47b8      	blx	r7
 80086c4:	3001      	adds	r0, #1
 80086c6:	d1c2      	bne.n	800864e <_printf_float+0x2f6>
 80086c8:	e6a1      	b.n	800840e <_printf_float+0xb6>
 80086ca:	2301      	movs	r3, #1
 80086cc:	4631      	mov	r1, r6
 80086ce:	4628      	mov	r0, r5
 80086d0:	920a      	str	r2, [sp, #40]	@ 0x28
 80086d2:	47b8      	blx	r7
 80086d4:	3001      	adds	r0, #1
 80086d6:	f43f ae9a 	beq.w	800840e <_printf_float+0xb6>
 80086da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80086dc:	f10b 0b01 	add.w	fp, fp, #1
 80086e0:	e7bb      	b.n	800865a <_printf_float+0x302>
 80086e2:	4631      	mov	r1, r6
 80086e4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80086e8:	4628      	mov	r0, r5
 80086ea:	47b8      	blx	r7
 80086ec:	3001      	adds	r0, #1
 80086ee:	d1c0      	bne.n	8008672 <_printf_float+0x31a>
 80086f0:	e68d      	b.n	800840e <_printf_float+0xb6>
 80086f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80086f4:	464b      	mov	r3, r9
 80086f6:	4631      	mov	r1, r6
 80086f8:	4628      	mov	r0, r5
 80086fa:	4442      	add	r2, r8
 80086fc:	47b8      	blx	r7
 80086fe:	3001      	adds	r0, #1
 8008700:	d1c3      	bne.n	800868a <_printf_float+0x332>
 8008702:	e684      	b.n	800840e <_printf_float+0xb6>
 8008704:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8008708:	f1ba 0f01 	cmp.w	sl, #1
 800870c:	dc01      	bgt.n	8008712 <_printf_float+0x3ba>
 800870e:	07db      	lsls	r3, r3, #31
 8008710:	d536      	bpl.n	8008780 <_printf_float+0x428>
 8008712:	2301      	movs	r3, #1
 8008714:	4642      	mov	r2, r8
 8008716:	4631      	mov	r1, r6
 8008718:	4628      	mov	r0, r5
 800871a:	47b8      	blx	r7
 800871c:	3001      	adds	r0, #1
 800871e:	f43f ae76 	beq.w	800840e <_printf_float+0xb6>
 8008722:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008726:	4631      	mov	r1, r6
 8008728:	4628      	mov	r0, r5
 800872a:	47b8      	blx	r7
 800872c:	3001      	adds	r0, #1
 800872e:	f43f ae6e 	beq.w	800840e <_printf_float+0xb6>
 8008732:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008736:	2200      	movs	r2, #0
 8008738:	2300      	movs	r3, #0
 800873a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800873e:	f7f8 f93d 	bl	80009bc <__aeabi_dcmpeq>
 8008742:	b9c0      	cbnz	r0, 8008776 <_printf_float+0x41e>
 8008744:	4653      	mov	r3, sl
 8008746:	f108 0201 	add.w	r2, r8, #1
 800874a:	4631      	mov	r1, r6
 800874c:	4628      	mov	r0, r5
 800874e:	47b8      	blx	r7
 8008750:	3001      	adds	r0, #1
 8008752:	d10c      	bne.n	800876e <_printf_float+0x416>
 8008754:	e65b      	b.n	800840e <_printf_float+0xb6>
 8008756:	2301      	movs	r3, #1
 8008758:	465a      	mov	r2, fp
 800875a:	4631      	mov	r1, r6
 800875c:	4628      	mov	r0, r5
 800875e:	47b8      	blx	r7
 8008760:	3001      	adds	r0, #1
 8008762:	f43f ae54 	beq.w	800840e <_printf_float+0xb6>
 8008766:	f108 0801 	add.w	r8, r8, #1
 800876a:	45d0      	cmp	r8, sl
 800876c:	dbf3      	blt.n	8008756 <_printf_float+0x3fe>
 800876e:	464b      	mov	r3, r9
 8008770:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008774:	e6e0      	b.n	8008538 <_printf_float+0x1e0>
 8008776:	f04f 0800 	mov.w	r8, #0
 800877a:	f104 0b1a 	add.w	fp, r4, #26
 800877e:	e7f4      	b.n	800876a <_printf_float+0x412>
 8008780:	2301      	movs	r3, #1
 8008782:	4642      	mov	r2, r8
 8008784:	e7e1      	b.n	800874a <_printf_float+0x3f2>
 8008786:	2301      	movs	r3, #1
 8008788:	464a      	mov	r2, r9
 800878a:	4631      	mov	r1, r6
 800878c:	4628      	mov	r0, r5
 800878e:	47b8      	blx	r7
 8008790:	3001      	adds	r0, #1
 8008792:	f43f ae3c 	beq.w	800840e <_printf_float+0xb6>
 8008796:	f108 0801 	add.w	r8, r8, #1
 800879a:	68e3      	ldr	r3, [r4, #12]
 800879c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800879e:	1a5b      	subs	r3, r3, r1
 80087a0:	4543      	cmp	r3, r8
 80087a2:	dcf0      	bgt.n	8008786 <_printf_float+0x42e>
 80087a4:	e6fd      	b.n	80085a2 <_printf_float+0x24a>
 80087a6:	f04f 0800 	mov.w	r8, #0
 80087aa:	f104 0919 	add.w	r9, r4, #25
 80087ae:	e7f4      	b.n	800879a <_printf_float+0x442>

080087b0 <_printf_common>:
 80087b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087b4:	4616      	mov	r6, r2
 80087b6:	4698      	mov	r8, r3
 80087b8:	688a      	ldr	r2, [r1, #8]
 80087ba:	690b      	ldr	r3, [r1, #16]
 80087bc:	4607      	mov	r7, r0
 80087be:	4293      	cmp	r3, r2
 80087c0:	bfb8      	it	lt
 80087c2:	4613      	movlt	r3, r2
 80087c4:	6033      	str	r3, [r6, #0]
 80087c6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80087ca:	460c      	mov	r4, r1
 80087cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80087d0:	b10a      	cbz	r2, 80087d6 <_printf_common+0x26>
 80087d2:	3301      	adds	r3, #1
 80087d4:	6033      	str	r3, [r6, #0]
 80087d6:	6823      	ldr	r3, [r4, #0]
 80087d8:	0699      	lsls	r1, r3, #26
 80087da:	bf42      	ittt	mi
 80087dc:	6833      	ldrmi	r3, [r6, #0]
 80087de:	3302      	addmi	r3, #2
 80087e0:	6033      	strmi	r3, [r6, #0]
 80087e2:	6825      	ldr	r5, [r4, #0]
 80087e4:	f015 0506 	ands.w	r5, r5, #6
 80087e8:	d106      	bne.n	80087f8 <_printf_common+0x48>
 80087ea:	f104 0a19 	add.w	sl, r4, #25
 80087ee:	68e3      	ldr	r3, [r4, #12]
 80087f0:	6832      	ldr	r2, [r6, #0]
 80087f2:	1a9b      	subs	r3, r3, r2
 80087f4:	42ab      	cmp	r3, r5
 80087f6:	dc2b      	bgt.n	8008850 <_printf_common+0xa0>
 80087f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80087fc:	6822      	ldr	r2, [r4, #0]
 80087fe:	3b00      	subs	r3, #0
 8008800:	bf18      	it	ne
 8008802:	2301      	movne	r3, #1
 8008804:	0692      	lsls	r2, r2, #26
 8008806:	d430      	bmi.n	800886a <_printf_common+0xba>
 8008808:	4641      	mov	r1, r8
 800880a:	4638      	mov	r0, r7
 800880c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008810:	47c8      	blx	r9
 8008812:	3001      	adds	r0, #1
 8008814:	d023      	beq.n	800885e <_printf_common+0xae>
 8008816:	6823      	ldr	r3, [r4, #0]
 8008818:	6922      	ldr	r2, [r4, #16]
 800881a:	f003 0306 	and.w	r3, r3, #6
 800881e:	2b04      	cmp	r3, #4
 8008820:	bf14      	ite	ne
 8008822:	2500      	movne	r5, #0
 8008824:	6833      	ldreq	r3, [r6, #0]
 8008826:	f04f 0600 	mov.w	r6, #0
 800882a:	bf08      	it	eq
 800882c:	68e5      	ldreq	r5, [r4, #12]
 800882e:	f104 041a 	add.w	r4, r4, #26
 8008832:	bf08      	it	eq
 8008834:	1aed      	subeq	r5, r5, r3
 8008836:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800883a:	bf08      	it	eq
 800883c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008840:	4293      	cmp	r3, r2
 8008842:	bfc4      	itt	gt
 8008844:	1a9b      	subgt	r3, r3, r2
 8008846:	18ed      	addgt	r5, r5, r3
 8008848:	42b5      	cmp	r5, r6
 800884a:	d11a      	bne.n	8008882 <_printf_common+0xd2>
 800884c:	2000      	movs	r0, #0
 800884e:	e008      	b.n	8008862 <_printf_common+0xb2>
 8008850:	2301      	movs	r3, #1
 8008852:	4652      	mov	r2, sl
 8008854:	4641      	mov	r1, r8
 8008856:	4638      	mov	r0, r7
 8008858:	47c8      	blx	r9
 800885a:	3001      	adds	r0, #1
 800885c:	d103      	bne.n	8008866 <_printf_common+0xb6>
 800885e:	f04f 30ff 	mov.w	r0, #4294967295
 8008862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008866:	3501      	adds	r5, #1
 8008868:	e7c1      	b.n	80087ee <_printf_common+0x3e>
 800886a:	2030      	movs	r0, #48	@ 0x30
 800886c:	18e1      	adds	r1, r4, r3
 800886e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008872:	1c5a      	adds	r2, r3, #1
 8008874:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008878:	4422      	add	r2, r4
 800887a:	3302      	adds	r3, #2
 800887c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008880:	e7c2      	b.n	8008808 <_printf_common+0x58>
 8008882:	2301      	movs	r3, #1
 8008884:	4622      	mov	r2, r4
 8008886:	4641      	mov	r1, r8
 8008888:	4638      	mov	r0, r7
 800888a:	47c8      	blx	r9
 800888c:	3001      	adds	r0, #1
 800888e:	d0e6      	beq.n	800885e <_printf_common+0xae>
 8008890:	3601      	adds	r6, #1
 8008892:	e7d9      	b.n	8008848 <_printf_common+0x98>

08008894 <_printf_i>:
 8008894:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008898:	7e0f      	ldrb	r7, [r1, #24]
 800889a:	4691      	mov	r9, r2
 800889c:	2f78      	cmp	r7, #120	@ 0x78
 800889e:	4680      	mov	r8, r0
 80088a0:	460c      	mov	r4, r1
 80088a2:	469a      	mov	sl, r3
 80088a4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80088a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80088aa:	d807      	bhi.n	80088bc <_printf_i+0x28>
 80088ac:	2f62      	cmp	r7, #98	@ 0x62
 80088ae:	d80a      	bhi.n	80088c6 <_printf_i+0x32>
 80088b0:	2f00      	cmp	r7, #0
 80088b2:	f000 80d3 	beq.w	8008a5c <_printf_i+0x1c8>
 80088b6:	2f58      	cmp	r7, #88	@ 0x58
 80088b8:	f000 80ba 	beq.w	8008a30 <_printf_i+0x19c>
 80088bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80088c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80088c4:	e03a      	b.n	800893c <_printf_i+0xa8>
 80088c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80088ca:	2b15      	cmp	r3, #21
 80088cc:	d8f6      	bhi.n	80088bc <_printf_i+0x28>
 80088ce:	a101      	add	r1, pc, #4	@ (adr r1, 80088d4 <_printf_i+0x40>)
 80088d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80088d4:	0800892d 	.word	0x0800892d
 80088d8:	08008941 	.word	0x08008941
 80088dc:	080088bd 	.word	0x080088bd
 80088e0:	080088bd 	.word	0x080088bd
 80088e4:	080088bd 	.word	0x080088bd
 80088e8:	080088bd 	.word	0x080088bd
 80088ec:	08008941 	.word	0x08008941
 80088f0:	080088bd 	.word	0x080088bd
 80088f4:	080088bd 	.word	0x080088bd
 80088f8:	080088bd 	.word	0x080088bd
 80088fc:	080088bd 	.word	0x080088bd
 8008900:	08008a43 	.word	0x08008a43
 8008904:	0800896b 	.word	0x0800896b
 8008908:	080089fd 	.word	0x080089fd
 800890c:	080088bd 	.word	0x080088bd
 8008910:	080088bd 	.word	0x080088bd
 8008914:	08008a65 	.word	0x08008a65
 8008918:	080088bd 	.word	0x080088bd
 800891c:	0800896b 	.word	0x0800896b
 8008920:	080088bd 	.word	0x080088bd
 8008924:	080088bd 	.word	0x080088bd
 8008928:	08008a05 	.word	0x08008a05
 800892c:	6833      	ldr	r3, [r6, #0]
 800892e:	1d1a      	adds	r2, r3, #4
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	6032      	str	r2, [r6, #0]
 8008934:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008938:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800893c:	2301      	movs	r3, #1
 800893e:	e09e      	b.n	8008a7e <_printf_i+0x1ea>
 8008940:	6833      	ldr	r3, [r6, #0]
 8008942:	6820      	ldr	r0, [r4, #0]
 8008944:	1d19      	adds	r1, r3, #4
 8008946:	6031      	str	r1, [r6, #0]
 8008948:	0606      	lsls	r6, r0, #24
 800894a:	d501      	bpl.n	8008950 <_printf_i+0xbc>
 800894c:	681d      	ldr	r5, [r3, #0]
 800894e:	e003      	b.n	8008958 <_printf_i+0xc4>
 8008950:	0645      	lsls	r5, r0, #25
 8008952:	d5fb      	bpl.n	800894c <_printf_i+0xb8>
 8008954:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008958:	2d00      	cmp	r5, #0
 800895a:	da03      	bge.n	8008964 <_printf_i+0xd0>
 800895c:	232d      	movs	r3, #45	@ 0x2d
 800895e:	426d      	negs	r5, r5
 8008960:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008964:	230a      	movs	r3, #10
 8008966:	4859      	ldr	r0, [pc, #356]	@ (8008acc <_printf_i+0x238>)
 8008968:	e011      	b.n	800898e <_printf_i+0xfa>
 800896a:	6821      	ldr	r1, [r4, #0]
 800896c:	6833      	ldr	r3, [r6, #0]
 800896e:	0608      	lsls	r0, r1, #24
 8008970:	f853 5b04 	ldr.w	r5, [r3], #4
 8008974:	d402      	bmi.n	800897c <_printf_i+0xe8>
 8008976:	0649      	lsls	r1, r1, #25
 8008978:	bf48      	it	mi
 800897a:	b2ad      	uxthmi	r5, r5
 800897c:	2f6f      	cmp	r7, #111	@ 0x6f
 800897e:	6033      	str	r3, [r6, #0]
 8008980:	bf14      	ite	ne
 8008982:	230a      	movne	r3, #10
 8008984:	2308      	moveq	r3, #8
 8008986:	4851      	ldr	r0, [pc, #324]	@ (8008acc <_printf_i+0x238>)
 8008988:	2100      	movs	r1, #0
 800898a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800898e:	6866      	ldr	r6, [r4, #4]
 8008990:	2e00      	cmp	r6, #0
 8008992:	bfa8      	it	ge
 8008994:	6821      	ldrge	r1, [r4, #0]
 8008996:	60a6      	str	r6, [r4, #8]
 8008998:	bfa4      	itt	ge
 800899a:	f021 0104 	bicge.w	r1, r1, #4
 800899e:	6021      	strge	r1, [r4, #0]
 80089a0:	b90d      	cbnz	r5, 80089a6 <_printf_i+0x112>
 80089a2:	2e00      	cmp	r6, #0
 80089a4:	d04b      	beq.n	8008a3e <_printf_i+0x1aa>
 80089a6:	4616      	mov	r6, r2
 80089a8:	fbb5 f1f3 	udiv	r1, r5, r3
 80089ac:	fb03 5711 	mls	r7, r3, r1, r5
 80089b0:	5dc7      	ldrb	r7, [r0, r7]
 80089b2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80089b6:	462f      	mov	r7, r5
 80089b8:	42bb      	cmp	r3, r7
 80089ba:	460d      	mov	r5, r1
 80089bc:	d9f4      	bls.n	80089a8 <_printf_i+0x114>
 80089be:	2b08      	cmp	r3, #8
 80089c0:	d10b      	bne.n	80089da <_printf_i+0x146>
 80089c2:	6823      	ldr	r3, [r4, #0]
 80089c4:	07df      	lsls	r7, r3, #31
 80089c6:	d508      	bpl.n	80089da <_printf_i+0x146>
 80089c8:	6923      	ldr	r3, [r4, #16]
 80089ca:	6861      	ldr	r1, [r4, #4]
 80089cc:	4299      	cmp	r1, r3
 80089ce:	bfde      	ittt	le
 80089d0:	2330      	movle	r3, #48	@ 0x30
 80089d2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80089d6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80089da:	1b92      	subs	r2, r2, r6
 80089dc:	6122      	str	r2, [r4, #16]
 80089de:	464b      	mov	r3, r9
 80089e0:	4621      	mov	r1, r4
 80089e2:	4640      	mov	r0, r8
 80089e4:	f8cd a000 	str.w	sl, [sp]
 80089e8:	aa03      	add	r2, sp, #12
 80089ea:	f7ff fee1 	bl	80087b0 <_printf_common>
 80089ee:	3001      	adds	r0, #1
 80089f0:	d14a      	bne.n	8008a88 <_printf_i+0x1f4>
 80089f2:	f04f 30ff 	mov.w	r0, #4294967295
 80089f6:	b004      	add	sp, #16
 80089f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089fc:	6823      	ldr	r3, [r4, #0]
 80089fe:	f043 0320 	orr.w	r3, r3, #32
 8008a02:	6023      	str	r3, [r4, #0]
 8008a04:	2778      	movs	r7, #120	@ 0x78
 8008a06:	4832      	ldr	r0, [pc, #200]	@ (8008ad0 <_printf_i+0x23c>)
 8008a08:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008a0c:	6823      	ldr	r3, [r4, #0]
 8008a0e:	6831      	ldr	r1, [r6, #0]
 8008a10:	061f      	lsls	r7, r3, #24
 8008a12:	f851 5b04 	ldr.w	r5, [r1], #4
 8008a16:	d402      	bmi.n	8008a1e <_printf_i+0x18a>
 8008a18:	065f      	lsls	r7, r3, #25
 8008a1a:	bf48      	it	mi
 8008a1c:	b2ad      	uxthmi	r5, r5
 8008a1e:	6031      	str	r1, [r6, #0]
 8008a20:	07d9      	lsls	r1, r3, #31
 8008a22:	bf44      	itt	mi
 8008a24:	f043 0320 	orrmi.w	r3, r3, #32
 8008a28:	6023      	strmi	r3, [r4, #0]
 8008a2a:	b11d      	cbz	r5, 8008a34 <_printf_i+0x1a0>
 8008a2c:	2310      	movs	r3, #16
 8008a2e:	e7ab      	b.n	8008988 <_printf_i+0xf4>
 8008a30:	4826      	ldr	r0, [pc, #152]	@ (8008acc <_printf_i+0x238>)
 8008a32:	e7e9      	b.n	8008a08 <_printf_i+0x174>
 8008a34:	6823      	ldr	r3, [r4, #0]
 8008a36:	f023 0320 	bic.w	r3, r3, #32
 8008a3a:	6023      	str	r3, [r4, #0]
 8008a3c:	e7f6      	b.n	8008a2c <_printf_i+0x198>
 8008a3e:	4616      	mov	r6, r2
 8008a40:	e7bd      	b.n	80089be <_printf_i+0x12a>
 8008a42:	6833      	ldr	r3, [r6, #0]
 8008a44:	6825      	ldr	r5, [r4, #0]
 8008a46:	1d18      	adds	r0, r3, #4
 8008a48:	6961      	ldr	r1, [r4, #20]
 8008a4a:	6030      	str	r0, [r6, #0]
 8008a4c:	062e      	lsls	r6, r5, #24
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	d501      	bpl.n	8008a56 <_printf_i+0x1c2>
 8008a52:	6019      	str	r1, [r3, #0]
 8008a54:	e002      	b.n	8008a5c <_printf_i+0x1c8>
 8008a56:	0668      	lsls	r0, r5, #25
 8008a58:	d5fb      	bpl.n	8008a52 <_printf_i+0x1be>
 8008a5a:	8019      	strh	r1, [r3, #0]
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	4616      	mov	r6, r2
 8008a60:	6123      	str	r3, [r4, #16]
 8008a62:	e7bc      	b.n	80089de <_printf_i+0x14a>
 8008a64:	6833      	ldr	r3, [r6, #0]
 8008a66:	2100      	movs	r1, #0
 8008a68:	1d1a      	adds	r2, r3, #4
 8008a6a:	6032      	str	r2, [r6, #0]
 8008a6c:	681e      	ldr	r6, [r3, #0]
 8008a6e:	6862      	ldr	r2, [r4, #4]
 8008a70:	4630      	mov	r0, r6
 8008a72:	f000 fc62 	bl	800933a <memchr>
 8008a76:	b108      	cbz	r0, 8008a7c <_printf_i+0x1e8>
 8008a78:	1b80      	subs	r0, r0, r6
 8008a7a:	6060      	str	r0, [r4, #4]
 8008a7c:	6863      	ldr	r3, [r4, #4]
 8008a7e:	6123      	str	r3, [r4, #16]
 8008a80:	2300      	movs	r3, #0
 8008a82:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a86:	e7aa      	b.n	80089de <_printf_i+0x14a>
 8008a88:	4632      	mov	r2, r6
 8008a8a:	4649      	mov	r1, r9
 8008a8c:	4640      	mov	r0, r8
 8008a8e:	6923      	ldr	r3, [r4, #16]
 8008a90:	47d0      	blx	sl
 8008a92:	3001      	adds	r0, #1
 8008a94:	d0ad      	beq.n	80089f2 <_printf_i+0x15e>
 8008a96:	6823      	ldr	r3, [r4, #0]
 8008a98:	079b      	lsls	r3, r3, #30
 8008a9a:	d413      	bmi.n	8008ac4 <_printf_i+0x230>
 8008a9c:	68e0      	ldr	r0, [r4, #12]
 8008a9e:	9b03      	ldr	r3, [sp, #12]
 8008aa0:	4298      	cmp	r0, r3
 8008aa2:	bfb8      	it	lt
 8008aa4:	4618      	movlt	r0, r3
 8008aa6:	e7a6      	b.n	80089f6 <_printf_i+0x162>
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	4632      	mov	r2, r6
 8008aac:	4649      	mov	r1, r9
 8008aae:	4640      	mov	r0, r8
 8008ab0:	47d0      	blx	sl
 8008ab2:	3001      	adds	r0, #1
 8008ab4:	d09d      	beq.n	80089f2 <_printf_i+0x15e>
 8008ab6:	3501      	adds	r5, #1
 8008ab8:	68e3      	ldr	r3, [r4, #12]
 8008aba:	9903      	ldr	r1, [sp, #12]
 8008abc:	1a5b      	subs	r3, r3, r1
 8008abe:	42ab      	cmp	r3, r5
 8008ac0:	dcf2      	bgt.n	8008aa8 <_printf_i+0x214>
 8008ac2:	e7eb      	b.n	8008a9c <_printf_i+0x208>
 8008ac4:	2500      	movs	r5, #0
 8008ac6:	f104 0619 	add.w	r6, r4, #25
 8008aca:	e7f5      	b.n	8008ab8 <_printf_i+0x224>
 8008acc:	0800c58b 	.word	0x0800c58b
 8008ad0:	0800c59c 	.word	0x0800c59c

08008ad4 <_scanf_float>:
 8008ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ad8:	b087      	sub	sp, #28
 8008ada:	9303      	str	r3, [sp, #12]
 8008adc:	688b      	ldr	r3, [r1, #8]
 8008ade:	4617      	mov	r7, r2
 8008ae0:	1e5a      	subs	r2, r3, #1
 8008ae2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008ae6:	bf82      	ittt	hi
 8008ae8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008aec:	eb03 0b05 	addhi.w	fp, r3, r5
 8008af0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008af4:	460a      	mov	r2, r1
 8008af6:	f04f 0500 	mov.w	r5, #0
 8008afa:	bf88      	it	hi
 8008afc:	608b      	strhi	r3, [r1, #8]
 8008afe:	680b      	ldr	r3, [r1, #0]
 8008b00:	4680      	mov	r8, r0
 8008b02:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008b06:	f842 3b1c 	str.w	r3, [r2], #28
 8008b0a:	460c      	mov	r4, r1
 8008b0c:	bf98      	it	ls
 8008b0e:	f04f 0b00 	movls.w	fp, #0
 8008b12:	4616      	mov	r6, r2
 8008b14:	46aa      	mov	sl, r5
 8008b16:	46a9      	mov	r9, r5
 8008b18:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008b1c:	9201      	str	r2, [sp, #4]
 8008b1e:	9502      	str	r5, [sp, #8]
 8008b20:	68a2      	ldr	r2, [r4, #8]
 8008b22:	b152      	cbz	r2, 8008b3a <_scanf_float+0x66>
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	781b      	ldrb	r3, [r3, #0]
 8008b28:	2b4e      	cmp	r3, #78	@ 0x4e
 8008b2a:	d865      	bhi.n	8008bf8 <_scanf_float+0x124>
 8008b2c:	2b40      	cmp	r3, #64	@ 0x40
 8008b2e:	d83d      	bhi.n	8008bac <_scanf_float+0xd8>
 8008b30:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008b34:	b2c8      	uxtb	r0, r1
 8008b36:	280e      	cmp	r0, #14
 8008b38:	d93b      	bls.n	8008bb2 <_scanf_float+0xde>
 8008b3a:	f1b9 0f00 	cmp.w	r9, #0
 8008b3e:	d003      	beq.n	8008b48 <_scanf_float+0x74>
 8008b40:	6823      	ldr	r3, [r4, #0]
 8008b42:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008b46:	6023      	str	r3, [r4, #0]
 8008b48:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008b4c:	f1ba 0f01 	cmp.w	sl, #1
 8008b50:	f200 8118 	bhi.w	8008d84 <_scanf_float+0x2b0>
 8008b54:	9b01      	ldr	r3, [sp, #4]
 8008b56:	429e      	cmp	r6, r3
 8008b58:	f200 8109 	bhi.w	8008d6e <_scanf_float+0x29a>
 8008b5c:	2001      	movs	r0, #1
 8008b5e:	b007      	add	sp, #28
 8008b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b64:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008b68:	2a0d      	cmp	r2, #13
 8008b6a:	d8e6      	bhi.n	8008b3a <_scanf_float+0x66>
 8008b6c:	a101      	add	r1, pc, #4	@ (adr r1, 8008b74 <_scanf_float+0xa0>)
 8008b6e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008b72:	bf00      	nop
 8008b74:	08008cbb 	.word	0x08008cbb
 8008b78:	08008b3b 	.word	0x08008b3b
 8008b7c:	08008b3b 	.word	0x08008b3b
 8008b80:	08008b3b 	.word	0x08008b3b
 8008b84:	08008d1b 	.word	0x08008d1b
 8008b88:	08008cf3 	.word	0x08008cf3
 8008b8c:	08008b3b 	.word	0x08008b3b
 8008b90:	08008b3b 	.word	0x08008b3b
 8008b94:	08008cc9 	.word	0x08008cc9
 8008b98:	08008b3b 	.word	0x08008b3b
 8008b9c:	08008b3b 	.word	0x08008b3b
 8008ba0:	08008b3b 	.word	0x08008b3b
 8008ba4:	08008b3b 	.word	0x08008b3b
 8008ba8:	08008c81 	.word	0x08008c81
 8008bac:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008bb0:	e7da      	b.n	8008b68 <_scanf_float+0x94>
 8008bb2:	290e      	cmp	r1, #14
 8008bb4:	d8c1      	bhi.n	8008b3a <_scanf_float+0x66>
 8008bb6:	a001      	add	r0, pc, #4	@ (adr r0, 8008bbc <_scanf_float+0xe8>)
 8008bb8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008bbc:	08008c71 	.word	0x08008c71
 8008bc0:	08008b3b 	.word	0x08008b3b
 8008bc4:	08008c71 	.word	0x08008c71
 8008bc8:	08008d07 	.word	0x08008d07
 8008bcc:	08008b3b 	.word	0x08008b3b
 8008bd0:	08008c19 	.word	0x08008c19
 8008bd4:	08008c57 	.word	0x08008c57
 8008bd8:	08008c57 	.word	0x08008c57
 8008bdc:	08008c57 	.word	0x08008c57
 8008be0:	08008c57 	.word	0x08008c57
 8008be4:	08008c57 	.word	0x08008c57
 8008be8:	08008c57 	.word	0x08008c57
 8008bec:	08008c57 	.word	0x08008c57
 8008bf0:	08008c57 	.word	0x08008c57
 8008bf4:	08008c57 	.word	0x08008c57
 8008bf8:	2b6e      	cmp	r3, #110	@ 0x6e
 8008bfa:	d809      	bhi.n	8008c10 <_scanf_float+0x13c>
 8008bfc:	2b60      	cmp	r3, #96	@ 0x60
 8008bfe:	d8b1      	bhi.n	8008b64 <_scanf_float+0x90>
 8008c00:	2b54      	cmp	r3, #84	@ 0x54
 8008c02:	d07b      	beq.n	8008cfc <_scanf_float+0x228>
 8008c04:	2b59      	cmp	r3, #89	@ 0x59
 8008c06:	d198      	bne.n	8008b3a <_scanf_float+0x66>
 8008c08:	2d07      	cmp	r5, #7
 8008c0a:	d196      	bne.n	8008b3a <_scanf_float+0x66>
 8008c0c:	2508      	movs	r5, #8
 8008c0e:	e02c      	b.n	8008c6a <_scanf_float+0x196>
 8008c10:	2b74      	cmp	r3, #116	@ 0x74
 8008c12:	d073      	beq.n	8008cfc <_scanf_float+0x228>
 8008c14:	2b79      	cmp	r3, #121	@ 0x79
 8008c16:	e7f6      	b.n	8008c06 <_scanf_float+0x132>
 8008c18:	6821      	ldr	r1, [r4, #0]
 8008c1a:	05c8      	lsls	r0, r1, #23
 8008c1c:	d51b      	bpl.n	8008c56 <_scanf_float+0x182>
 8008c1e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8008c22:	6021      	str	r1, [r4, #0]
 8008c24:	f109 0901 	add.w	r9, r9, #1
 8008c28:	f1bb 0f00 	cmp.w	fp, #0
 8008c2c:	d003      	beq.n	8008c36 <_scanf_float+0x162>
 8008c2e:	3201      	adds	r2, #1
 8008c30:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008c34:	60a2      	str	r2, [r4, #8]
 8008c36:	68a3      	ldr	r3, [r4, #8]
 8008c38:	3b01      	subs	r3, #1
 8008c3a:	60a3      	str	r3, [r4, #8]
 8008c3c:	6923      	ldr	r3, [r4, #16]
 8008c3e:	3301      	adds	r3, #1
 8008c40:	6123      	str	r3, [r4, #16]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	3b01      	subs	r3, #1
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	607b      	str	r3, [r7, #4]
 8008c4a:	f340 8087 	ble.w	8008d5c <_scanf_float+0x288>
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	3301      	adds	r3, #1
 8008c52:	603b      	str	r3, [r7, #0]
 8008c54:	e764      	b.n	8008b20 <_scanf_float+0x4c>
 8008c56:	eb1a 0105 	adds.w	r1, sl, r5
 8008c5a:	f47f af6e 	bne.w	8008b3a <_scanf_float+0x66>
 8008c5e:	460d      	mov	r5, r1
 8008c60:	468a      	mov	sl, r1
 8008c62:	6822      	ldr	r2, [r4, #0]
 8008c64:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008c68:	6022      	str	r2, [r4, #0]
 8008c6a:	f806 3b01 	strb.w	r3, [r6], #1
 8008c6e:	e7e2      	b.n	8008c36 <_scanf_float+0x162>
 8008c70:	6822      	ldr	r2, [r4, #0]
 8008c72:	0610      	lsls	r0, r2, #24
 8008c74:	f57f af61 	bpl.w	8008b3a <_scanf_float+0x66>
 8008c78:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008c7c:	6022      	str	r2, [r4, #0]
 8008c7e:	e7f4      	b.n	8008c6a <_scanf_float+0x196>
 8008c80:	f1ba 0f00 	cmp.w	sl, #0
 8008c84:	d10e      	bne.n	8008ca4 <_scanf_float+0x1d0>
 8008c86:	f1b9 0f00 	cmp.w	r9, #0
 8008c8a:	d10e      	bne.n	8008caa <_scanf_float+0x1d6>
 8008c8c:	6822      	ldr	r2, [r4, #0]
 8008c8e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008c92:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008c96:	d108      	bne.n	8008caa <_scanf_float+0x1d6>
 8008c98:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008c9c:	f04f 0a01 	mov.w	sl, #1
 8008ca0:	6022      	str	r2, [r4, #0]
 8008ca2:	e7e2      	b.n	8008c6a <_scanf_float+0x196>
 8008ca4:	f1ba 0f02 	cmp.w	sl, #2
 8008ca8:	d055      	beq.n	8008d56 <_scanf_float+0x282>
 8008caa:	2d01      	cmp	r5, #1
 8008cac:	d002      	beq.n	8008cb4 <_scanf_float+0x1e0>
 8008cae:	2d04      	cmp	r5, #4
 8008cb0:	f47f af43 	bne.w	8008b3a <_scanf_float+0x66>
 8008cb4:	3501      	adds	r5, #1
 8008cb6:	b2ed      	uxtb	r5, r5
 8008cb8:	e7d7      	b.n	8008c6a <_scanf_float+0x196>
 8008cba:	f1ba 0f01 	cmp.w	sl, #1
 8008cbe:	f47f af3c 	bne.w	8008b3a <_scanf_float+0x66>
 8008cc2:	f04f 0a02 	mov.w	sl, #2
 8008cc6:	e7d0      	b.n	8008c6a <_scanf_float+0x196>
 8008cc8:	b97d      	cbnz	r5, 8008cea <_scanf_float+0x216>
 8008cca:	f1b9 0f00 	cmp.w	r9, #0
 8008cce:	f47f af37 	bne.w	8008b40 <_scanf_float+0x6c>
 8008cd2:	6822      	ldr	r2, [r4, #0]
 8008cd4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008cd8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008cdc:	f040 8103 	bne.w	8008ee6 <_scanf_float+0x412>
 8008ce0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008ce4:	2501      	movs	r5, #1
 8008ce6:	6022      	str	r2, [r4, #0]
 8008ce8:	e7bf      	b.n	8008c6a <_scanf_float+0x196>
 8008cea:	2d03      	cmp	r5, #3
 8008cec:	d0e2      	beq.n	8008cb4 <_scanf_float+0x1e0>
 8008cee:	2d05      	cmp	r5, #5
 8008cf0:	e7de      	b.n	8008cb0 <_scanf_float+0x1dc>
 8008cf2:	2d02      	cmp	r5, #2
 8008cf4:	f47f af21 	bne.w	8008b3a <_scanf_float+0x66>
 8008cf8:	2503      	movs	r5, #3
 8008cfa:	e7b6      	b.n	8008c6a <_scanf_float+0x196>
 8008cfc:	2d06      	cmp	r5, #6
 8008cfe:	f47f af1c 	bne.w	8008b3a <_scanf_float+0x66>
 8008d02:	2507      	movs	r5, #7
 8008d04:	e7b1      	b.n	8008c6a <_scanf_float+0x196>
 8008d06:	6822      	ldr	r2, [r4, #0]
 8008d08:	0591      	lsls	r1, r2, #22
 8008d0a:	f57f af16 	bpl.w	8008b3a <_scanf_float+0x66>
 8008d0e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8008d12:	6022      	str	r2, [r4, #0]
 8008d14:	f8cd 9008 	str.w	r9, [sp, #8]
 8008d18:	e7a7      	b.n	8008c6a <_scanf_float+0x196>
 8008d1a:	6822      	ldr	r2, [r4, #0]
 8008d1c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008d20:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008d24:	d006      	beq.n	8008d34 <_scanf_float+0x260>
 8008d26:	0550      	lsls	r0, r2, #21
 8008d28:	f57f af07 	bpl.w	8008b3a <_scanf_float+0x66>
 8008d2c:	f1b9 0f00 	cmp.w	r9, #0
 8008d30:	f000 80d9 	beq.w	8008ee6 <_scanf_float+0x412>
 8008d34:	0591      	lsls	r1, r2, #22
 8008d36:	bf58      	it	pl
 8008d38:	9902      	ldrpl	r1, [sp, #8]
 8008d3a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008d3e:	bf58      	it	pl
 8008d40:	eba9 0101 	subpl.w	r1, r9, r1
 8008d44:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008d48:	f04f 0900 	mov.w	r9, #0
 8008d4c:	bf58      	it	pl
 8008d4e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008d52:	6022      	str	r2, [r4, #0]
 8008d54:	e789      	b.n	8008c6a <_scanf_float+0x196>
 8008d56:	f04f 0a03 	mov.w	sl, #3
 8008d5a:	e786      	b.n	8008c6a <_scanf_float+0x196>
 8008d5c:	4639      	mov	r1, r7
 8008d5e:	4640      	mov	r0, r8
 8008d60:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008d64:	4798      	blx	r3
 8008d66:	2800      	cmp	r0, #0
 8008d68:	f43f aeda 	beq.w	8008b20 <_scanf_float+0x4c>
 8008d6c:	e6e5      	b.n	8008b3a <_scanf_float+0x66>
 8008d6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008d72:	463a      	mov	r2, r7
 8008d74:	4640      	mov	r0, r8
 8008d76:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008d7a:	4798      	blx	r3
 8008d7c:	6923      	ldr	r3, [r4, #16]
 8008d7e:	3b01      	subs	r3, #1
 8008d80:	6123      	str	r3, [r4, #16]
 8008d82:	e6e7      	b.n	8008b54 <_scanf_float+0x80>
 8008d84:	1e6b      	subs	r3, r5, #1
 8008d86:	2b06      	cmp	r3, #6
 8008d88:	d824      	bhi.n	8008dd4 <_scanf_float+0x300>
 8008d8a:	2d02      	cmp	r5, #2
 8008d8c:	d836      	bhi.n	8008dfc <_scanf_float+0x328>
 8008d8e:	9b01      	ldr	r3, [sp, #4]
 8008d90:	429e      	cmp	r6, r3
 8008d92:	f67f aee3 	bls.w	8008b5c <_scanf_float+0x88>
 8008d96:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008d9a:	463a      	mov	r2, r7
 8008d9c:	4640      	mov	r0, r8
 8008d9e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008da2:	4798      	blx	r3
 8008da4:	6923      	ldr	r3, [r4, #16]
 8008da6:	3b01      	subs	r3, #1
 8008da8:	6123      	str	r3, [r4, #16]
 8008daa:	e7f0      	b.n	8008d8e <_scanf_float+0x2ba>
 8008dac:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008db0:	463a      	mov	r2, r7
 8008db2:	4640      	mov	r0, r8
 8008db4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008db8:	4798      	blx	r3
 8008dba:	6923      	ldr	r3, [r4, #16]
 8008dbc:	3b01      	subs	r3, #1
 8008dbe:	6123      	str	r3, [r4, #16]
 8008dc0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008dc4:	fa5f fa8a 	uxtb.w	sl, sl
 8008dc8:	f1ba 0f02 	cmp.w	sl, #2
 8008dcc:	d1ee      	bne.n	8008dac <_scanf_float+0x2d8>
 8008dce:	3d03      	subs	r5, #3
 8008dd0:	b2ed      	uxtb	r5, r5
 8008dd2:	1b76      	subs	r6, r6, r5
 8008dd4:	6823      	ldr	r3, [r4, #0]
 8008dd6:	05da      	lsls	r2, r3, #23
 8008dd8:	d530      	bpl.n	8008e3c <_scanf_float+0x368>
 8008dda:	055b      	lsls	r3, r3, #21
 8008ddc:	d511      	bpl.n	8008e02 <_scanf_float+0x32e>
 8008dde:	9b01      	ldr	r3, [sp, #4]
 8008de0:	429e      	cmp	r6, r3
 8008de2:	f67f aebb 	bls.w	8008b5c <_scanf_float+0x88>
 8008de6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008dea:	463a      	mov	r2, r7
 8008dec:	4640      	mov	r0, r8
 8008dee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008df2:	4798      	blx	r3
 8008df4:	6923      	ldr	r3, [r4, #16]
 8008df6:	3b01      	subs	r3, #1
 8008df8:	6123      	str	r3, [r4, #16]
 8008dfa:	e7f0      	b.n	8008dde <_scanf_float+0x30a>
 8008dfc:	46aa      	mov	sl, r5
 8008dfe:	46b3      	mov	fp, r6
 8008e00:	e7de      	b.n	8008dc0 <_scanf_float+0x2ec>
 8008e02:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008e06:	6923      	ldr	r3, [r4, #16]
 8008e08:	2965      	cmp	r1, #101	@ 0x65
 8008e0a:	f103 33ff 	add.w	r3, r3, #4294967295
 8008e0e:	f106 35ff 	add.w	r5, r6, #4294967295
 8008e12:	6123      	str	r3, [r4, #16]
 8008e14:	d00c      	beq.n	8008e30 <_scanf_float+0x35c>
 8008e16:	2945      	cmp	r1, #69	@ 0x45
 8008e18:	d00a      	beq.n	8008e30 <_scanf_float+0x35c>
 8008e1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008e1e:	463a      	mov	r2, r7
 8008e20:	4640      	mov	r0, r8
 8008e22:	4798      	blx	r3
 8008e24:	6923      	ldr	r3, [r4, #16]
 8008e26:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008e2a:	3b01      	subs	r3, #1
 8008e2c:	1eb5      	subs	r5, r6, #2
 8008e2e:	6123      	str	r3, [r4, #16]
 8008e30:	463a      	mov	r2, r7
 8008e32:	4640      	mov	r0, r8
 8008e34:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008e38:	4798      	blx	r3
 8008e3a:	462e      	mov	r6, r5
 8008e3c:	6822      	ldr	r2, [r4, #0]
 8008e3e:	f012 0210 	ands.w	r2, r2, #16
 8008e42:	d001      	beq.n	8008e48 <_scanf_float+0x374>
 8008e44:	2000      	movs	r0, #0
 8008e46:	e68a      	b.n	8008b5e <_scanf_float+0x8a>
 8008e48:	7032      	strb	r2, [r6, #0]
 8008e4a:	6823      	ldr	r3, [r4, #0]
 8008e4c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008e50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e54:	d11c      	bne.n	8008e90 <_scanf_float+0x3bc>
 8008e56:	9b02      	ldr	r3, [sp, #8]
 8008e58:	454b      	cmp	r3, r9
 8008e5a:	eba3 0209 	sub.w	r2, r3, r9
 8008e5e:	d123      	bne.n	8008ea8 <_scanf_float+0x3d4>
 8008e60:	2200      	movs	r2, #0
 8008e62:	4640      	mov	r0, r8
 8008e64:	9901      	ldr	r1, [sp, #4]
 8008e66:	f7ff f903 	bl	8008070 <_strtod_r>
 8008e6a:	9b03      	ldr	r3, [sp, #12]
 8008e6c:	6825      	ldr	r5, [r4, #0]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f015 0f02 	tst.w	r5, #2
 8008e74:	4606      	mov	r6, r0
 8008e76:	460f      	mov	r7, r1
 8008e78:	f103 0204 	add.w	r2, r3, #4
 8008e7c:	d01f      	beq.n	8008ebe <_scanf_float+0x3ea>
 8008e7e:	9903      	ldr	r1, [sp, #12]
 8008e80:	600a      	str	r2, [r1, #0]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	e9c3 6700 	strd	r6, r7, [r3]
 8008e88:	68e3      	ldr	r3, [r4, #12]
 8008e8a:	3301      	adds	r3, #1
 8008e8c:	60e3      	str	r3, [r4, #12]
 8008e8e:	e7d9      	b.n	8008e44 <_scanf_float+0x370>
 8008e90:	9b04      	ldr	r3, [sp, #16]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d0e4      	beq.n	8008e60 <_scanf_float+0x38c>
 8008e96:	9905      	ldr	r1, [sp, #20]
 8008e98:	230a      	movs	r3, #10
 8008e9a:	4640      	mov	r0, r8
 8008e9c:	3101      	adds	r1, #1
 8008e9e:	f002 fa2d 	bl	800b2fc <_strtol_r>
 8008ea2:	9b04      	ldr	r3, [sp, #16]
 8008ea4:	9e05      	ldr	r6, [sp, #20]
 8008ea6:	1ac2      	subs	r2, r0, r3
 8008ea8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008eac:	429e      	cmp	r6, r3
 8008eae:	bf28      	it	cs
 8008eb0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008eb4:	4630      	mov	r0, r6
 8008eb6:	490d      	ldr	r1, [pc, #52]	@ (8008eec <_scanf_float+0x418>)
 8008eb8:	f000 f8de 	bl	8009078 <siprintf>
 8008ebc:	e7d0      	b.n	8008e60 <_scanf_float+0x38c>
 8008ebe:	076d      	lsls	r5, r5, #29
 8008ec0:	d4dd      	bmi.n	8008e7e <_scanf_float+0x3aa>
 8008ec2:	9d03      	ldr	r5, [sp, #12]
 8008ec4:	602a      	str	r2, [r5, #0]
 8008ec6:	681d      	ldr	r5, [r3, #0]
 8008ec8:	4602      	mov	r2, r0
 8008eca:	460b      	mov	r3, r1
 8008ecc:	f7f7 fda8 	bl	8000a20 <__aeabi_dcmpun>
 8008ed0:	b120      	cbz	r0, 8008edc <_scanf_float+0x408>
 8008ed2:	4807      	ldr	r0, [pc, #28]	@ (8008ef0 <_scanf_float+0x41c>)
 8008ed4:	f000 fa54 	bl	8009380 <nanf>
 8008ed8:	6028      	str	r0, [r5, #0]
 8008eda:	e7d5      	b.n	8008e88 <_scanf_float+0x3b4>
 8008edc:	4630      	mov	r0, r6
 8008ede:	4639      	mov	r1, r7
 8008ee0:	f7f7 fdfc 	bl	8000adc <__aeabi_d2f>
 8008ee4:	e7f8      	b.n	8008ed8 <_scanf_float+0x404>
 8008ee6:	f04f 0900 	mov.w	r9, #0
 8008eea:	e62d      	b.n	8008b48 <_scanf_float+0x74>
 8008eec:	0800c5ad 	.word	0x0800c5ad
 8008ef0:	0800c84c 	.word	0x0800c84c

08008ef4 <std>:
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	b510      	push	{r4, lr}
 8008ef8:	4604      	mov	r4, r0
 8008efa:	e9c0 3300 	strd	r3, r3, [r0]
 8008efe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008f02:	6083      	str	r3, [r0, #8]
 8008f04:	8181      	strh	r1, [r0, #12]
 8008f06:	6643      	str	r3, [r0, #100]	@ 0x64
 8008f08:	81c2      	strh	r2, [r0, #14]
 8008f0a:	6183      	str	r3, [r0, #24]
 8008f0c:	4619      	mov	r1, r3
 8008f0e:	2208      	movs	r2, #8
 8008f10:	305c      	adds	r0, #92	@ 0x5c
 8008f12:	f000 f94d 	bl	80091b0 <memset>
 8008f16:	4b0d      	ldr	r3, [pc, #52]	@ (8008f4c <std+0x58>)
 8008f18:	6224      	str	r4, [r4, #32]
 8008f1a:	6263      	str	r3, [r4, #36]	@ 0x24
 8008f1c:	4b0c      	ldr	r3, [pc, #48]	@ (8008f50 <std+0x5c>)
 8008f1e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008f20:	4b0c      	ldr	r3, [pc, #48]	@ (8008f54 <std+0x60>)
 8008f22:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008f24:	4b0c      	ldr	r3, [pc, #48]	@ (8008f58 <std+0x64>)
 8008f26:	6323      	str	r3, [r4, #48]	@ 0x30
 8008f28:	4b0c      	ldr	r3, [pc, #48]	@ (8008f5c <std+0x68>)
 8008f2a:	429c      	cmp	r4, r3
 8008f2c:	d006      	beq.n	8008f3c <std+0x48>
 8008f2e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008f32:	4294      	cmp	r4, r2
 8008f34:	d002      	beq.n	8008f3c <std+0x48>
 8008f36:	33d0      	adds	r3, #208	@ 0xd0
 8008f38:	429c      	cmp	r4, r3
 8008f3a:	d105      	bne.n	8008f48 <std+0x54>
 8008f3c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008f40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f44:	f000 b9ee 	b.w	8009324 <__retarget_lock_init_recursive>
 8008f48:	bd10      	pop	{r4, pc}
 8008f4a:	bf00      	nop
 8008f4c:	080090b9 	.word	0x080090b9
 8008f50:	080090db 	.word	0x080090db
 8008f54:	08009113 	.word	0x08009113
 8008f58:	08009137 	.word	0x08009137
 8008f5c:	20000964 	.word	0x20000964

08008f60 <stdio_exit_handler>:
 8008f60:	4a02      	ldr	r2, [pc, #8]	@ (8008f6c <stdio_exit_handler+0xc>)
 8008f62:	4903      	ldr	r1, [pc, #12]	@ (8008f70 <stdio_exit_handler+0x10>)
 8008f64:	4803      	ldr	r0, [pc, #12]	@ (8008f74 <stdio_exit_handler+0x14>)
 8008f66:	f000 b869 	b.w	800903c <_fwalk_sglue>
 8008f6a:	bf00      	nop
 8008f6c:	20000010 	.word	0x20000010
 8008f70:	0800b6c9 	.word	0x0800b6c9
 8008f74:	2000018c 	.word	0x2000018c

08008f78 <cleanup_stdio>:
 8008f78:	6841      	ldr	r1, [r0, #4]
 8008f7a:	4b0c      	ldr	r3, [pc, #48]	@ (8008fac <cleanup_stdio+0x34>)
 8008f7c:	b510      	push	{r4, lr}
 8008f7e:	4299      	cmp	r1, r3
 8008f80:	4604      	mov	r4, r0
 8008f82:	d001      	beq.n	8008f88 <cleanup_stdio+0x10>
 8008f84:	f002 fba0 	bl	800b6c8 <_fflush_r>
 8008f88:	68a1      	ldr	r1, [r4, #8]
 8008f8a:	4b09      	ldr	r3, [pc, #36]	@ (8008fb0 <cleanup_stdio+0x38>)
 8008f8c:	4299      	cmp	r1, r3
 8008f8e:	d002      	beq.n	8008f96 <cleanup_stdio+0x1e>
 8008f90:	4620      	mov	r0, r4
 8008f92:	f002 fb99 	bl	800b6c8 <_fflush_r>
 8008f96:	68e1      	ldr	r1, [r4, #12]
 8008f98:	4b06      	ldr	r3, [pc, #24]	@ (8008fb4 <cleanup_stdio+0x3c>)
 8008f9a:	4299      	cmp	r1, r3
 8008f9c:	d004      	beq.n	8008fa8 <cleanup_stdio+0x30>
 8008f9e:	4620      	mov	r0, r4
 8008fa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fa4:	f002 bb90 	b.w	800b6c8 <_fflush_r>
 8008fa8:	bd10      	pop	{r4, pc}
 8008faa:	bf00      	nop
 8008fac:	20000964 	.word	0x20000964
 8008fb0:	200009cc 	.word	0x200009cc
 8008fb4:	20000a34 	.word	0x20000a34

08008fb8 <global_stdio_init.part.0>:
 8008fb8:	b510      	push	{r4, lr}
 8008fba:	4b0b      	ldr	r3, [pc, #44]	@ (8008fe8 <global_stdio_init.part.0+0x30>)
 8008fbc:	4c0b      	ldr	r4, [pc, #44]	@ (8008fec <global_stdio_init.part.0+0x34>)
 8008fbe:	4a0c      	ldr	r2, [pc, #48]	@ (8008ff0 <global_stdio_init.part.0+0x38>)
 8008fc0:	4620      	mov	r0, r4
 8008fc2:	601a      	str	r2, [r3, #0]
 8008fc4:	2104      	movs	r1, #4
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	f7ff ff94 	bl	8008ef4 <std>
 8008fcc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008fd0:	2201      	movs	r2, #1
 8008fd2:	2109      	movs	r1, #9
 8008fd4:	f7ff ff8e 	bl	8008ef4 <std>
 8008fd8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008fdc:	2202      	movs	r2, #2
 8008fde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fe2:	2112      	movs	r1, #18
 8008fe4:	f7ff bf86 	b.w	8008ef4 <std>
 8008fe8:	20000a9c 	.word	0x20000a9c
 8008fec:	20000964 	.word	0x20000964
 8008ff0:	08008f61 	.word	0x08008f61

08008ff4 <__sfp_lock_acquire>:
 8008ff4:	4801      	ldr	r0, [pc, #4]	@ (8008ffc <__sfp_lock_acquire+0x8>)
 8008ff6:	f000 b996 	b.w	8009326 <__retarget_lock_acquire_recursive>
 8008ffa:	bf00      	nop
 8008ffc:	20000aa5 	.word	0x20000aa5

08009000 <__sfp_lock_release>:
 8009000:	4801      	ldr	r0, [pc, #4]	@ (8009008 <__sfp_lock_release+0x8>)
 8009002:	f000 b991 	b.w	8009328 <__retarget_lock_release_recursive>
 8009006:	bf00      	nop
 8009008:	20000aa5 	.word	0x20000aa5

0800900c <__sinit>:
 800900c:	b510      	push	{r4, lr}
 800900e:	4604      	mov	r4, r0
 8009010:	f7ff fff0 	bl	8008ff4 <__sfp_lock_acquire>
 8009014:	6a23      	ldr	r3, [r4, #32]
 8009016:	b11b      	cbz	r3, 8009020 <__sinit+0x14>
 8009018:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800901c:	f7ff bff0 	b.w	8009000 <__sfp_lock_release>
 8009020:	4b04      	ldr	r3, [pc, #16]	@ (8009034 <__sinit+0x28>)
 8009022:	6223      	str	r3, [r4, #32]
 8009024:	4b04      	ldr	r3, [pc, #16]	@ (8009038 <__sinit+0x2c>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d1f5      	bne.n	8009018 <__sinit+0xc>
 800902c:	f7ff ffc4 	bl	8008fb8 <global_stdio_init.part.0>
 8009030:	e7f2      	b.n	8009018 <__sinit+0xc>
 8009032:	bf00      	nop
 8009034:	08008f79 	.word	0x08008f79
 8009038:	20000a9c 	.word	0x20000a9c

0800903c <_fwalk_sglue>:
 800903c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009040:	4607      	mov	r7, r0
 8009042:	4688      	mov	r8, r1
 8009044:	4614      	mov	r4, r2
 8009046:	2600      	movs	r6, #0
 8009048:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800904c:	f1b9 0901 	subs.w	r9, r9, #1
 8009050:	d505      	bpl.n	800905e <_fwalk_sglue+0x22>
 8009052:	6824      	ldr	r4, [r4, #0]
 8009054:	2c00      	cmp	r4, #0
 8009056:	d1f7      	bne.n	8009048 <_fwalk_sglue+0xc>
 8009058:	4630      	mov	r0, r6
 800905a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800905e:	89ab      	ldrh	r3, [r5, #12]
 8009060:	2b01      	cmp	r3, #1
 8009062:	d907      	bls.n	8009074 <_fwalk_sglue+0x38>
 8009064:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009068:	3301      	adds	r3, #1
 800906a:	d003      	beq.n	8009074 <_fwalk_sglue+0x38>
 800906c:	4629      	mov	r1, r5
 800906e:	4638      	mov	r0, r7
 8009070:	47c0      	blx	r8
 8009072:	4306      	orrs	r6, r0
 8009074:	3568      	adds	r5, #104	@ 0x68
 8009076:	e7e9      	b.n	800904c <_fwalk_sglue+0x10>

08009078 <siprintf>:
 8009078:	b40e      	push	{r1, r2, r3}
 800907a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800907e:	b500      	push	{lr}
 8009080:	b09c      	sub	sp, #112	@ 0x70
 8009082:	ab1d      	add	r3, sp, #116	@ 0x74
 8009084:	9002      	str	r0, [sp, #8]
 8009086:	9006      	str	r0, [sp, #24]
 8009088:	9107      	str	r1, [sp, #28]
 800908a:	9104      	str	r1, [sp, #16]
 800908c:	4808      	ldr	r0, [pc, #32]	@ (80090b0 <siprintf+0x38>)
 800908e:	4909      	ldr	r1, [pc, #36]	@ (80090b4 <siprintf+0x3c>)
 8009090:	f853 2b04 	ldr.w	r2, [r3], #4
 8009094:	9105      	str	r1, [sp, #20]
 8009096:	6800      	ldr	r0, [r0, #0]
 8009098:	a902      	add	r1, sp, #8
 800909a:	9301      	str	r3, [sp, #4]
 800909c:	f002 f998 	bl	800b3d0 <_svfiprintf_r>
 80090a0:	2200      	movs	r2, #0
 80090a2:	9b02      	ldr	r3, [sp, #8]
 80090a4:	701a      	strb	r2, [r3, #0]
 80090a6:	b01c      	add	sp, #112	@ 0x70
 80090a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80090ac:	b003      	add	sp, #12
 80090ae:	4770      	bx	lr
 80090b0:	20000188 	.word	0x20000188
 80090b4:	ffff0208 	.word	0xffff0208

080090b8 <__sread>:
 80090b8:	b510      	push	{r4, lr}
 80090ba:	460c      	mov	r4, r1
 80090bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090c0:	f000 f8e2 	bl	8009288 <_read_r>
 80090c4:	2800      	cmp	r0, #0
 80090c6:	bfab      	itete	ge
 80090c8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80090ca:	89a3      	ldrhlt	r3, [r4, #12]
 80090cc:	181b      	addge	r3, r3, r0
 80090ce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80090d2:	bfac      	ite	ge
 80090d4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80090d6:	81a3      	strhlt	r3, [r4, #12]
 80090d8:	bd10      	pop	{r4, pc}

080090da <__swrite>:
 80090da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090de:	461f      	mov	r7, r3
 80090e0:	898b      	ldrh	r3, [r1, #12]
 80090e2:	4605      	mov	r5, r0
 80090e4:	05db      	lsls	r3, r3, #23
 80090e6:	460c      	mov	r4, r1
 80090e8:	4616      	mov	r6, r2
 80090ea:	d505      	bpl.n	80090f8 <__swrite+0x1e>
 80090ec:	2302      	movs	r3, #2
 80090ee:	2200      	movs	r2, #0
 80090f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090f4:	f000 f8b6 	bl	8009264 <_lseek_r>
 80090f8:	89a3      	ldrh	r3, [r4, #12]
 80090fa:	4632      	mov	r2, r6
 80090fc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009100:	81a3      	strh	r3, [r4, #12]
 8009102:	4628      	mov	r0, r5
 8009104:	463b      	mov	r3, r7
 8009106:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800910a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800910e:	f000 b8cd 	b.w	80092ac <_write_r>

08009112 <__sseek>:
 8009112:	b510      	push	{r4, lr}
 8009114:	460c      	mov	r4, r1
 8009116:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800911a:	f000 f8a3 	bl	8009264 <_lseek_r>
 800911e:	1c43      	adds	r3, r0, #1
 8009120:	89a3      	ldrh	r3, [r4, #12]
 8009122:	bf15      	itete	ne
 8009124:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009126:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800912a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800912e:	81a3      	strheq	r3, [r4, #12]
 8009130:	bf18      	it	ne
 8009132:	81a3      	strhne	r3, [r4, #12]
 8009134:	bd10      	pop	{r4, pc}

08009136 <__sclose>:
 8009136:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800913a:	f000 b883 	b.w	8009244 <_close_r>

0800913e <_vsniprintf_r>:
 800913e:	b530      	push	{r4, r5, lr}
 8009140:	4614      	mov	r4, r2
 8009142:	2c00      	cmp	r4, #0
 8009144:	4605      	mov	r5, r0
 8009146:	461a      	mov	r2, r3
 8009148:	b09b      	sub	sp, #108	@ 0x6c
 800914a:	da05      	bge.n	8009158 <_vsniprintf_r+0x1a>
 800914c:	238b      	movs	r3, #139	@ 0x8b
 800914e:	6003      	str	r3, [r0, #0]
 8009150:	f04f 30ff 	mov.w	r0, #4294967295
 8009154:	b01b      	add	sp, #108	@ 0x6c
 8009156:	bd30      	pop	{r4, r5, pc}
 8009158:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800915c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009160:	bf0c      	ite	eq
 8009162:	4623      	moveq	r3, r4
 8009164:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009168:	9302      	str	r3, [sp, #8]
 800916a:	9305      	str	r3, [sp, #20]
 800916c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009170:	9100      	str	r1, [sp, #0]
 8009172:	9104      	str	r1, [sp, #16]
 8009174:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009178:	4669      	mov	r1, sp
 800917a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800917c:	f002 f928 	bl	800b3d0 <_svfiprintf_r>
 8009180:	1c43      	adds	r3, r0, #1
 8009182:	bfbc      	itt	lt
 8009184:	238b      	movlt	r3, #139	@ 0x8b
 8009186:	602b      	strlt	r3, [r5, #0]
 8009188:	2c00      	cmp	r4, #0
 800918a:	d0e3      	beq.n	8009154 <_vsniprintf_r+0x16>
 800918c:	2200      	movs	r2, #0
 800918e:	9b00      	ldr	r3, [sp, #0]
 8009190:	701a      	strb	r2, [r3, #0]
 8009192:	e7df      	b.n	8009154 <_vsniprintf_r+0x16>

08009194 <vsniprintf>:
 8009194:	b507      	push	{r0, r1, r2, lr}
 8009196:	9300      	str	r3, [sp, #0]
 8009198:	4613      	mov	r3, r2
 800919a:	460a      	mov	r2, r1
 800919c:	4601      	mov	r1, r0
 800919e:	4803      	ldr	r0, [pc, #12]	@ (80091ac <vsniprintf+0x18>)
 80091a0:	6800      	ldr	r0, [r0, #0]
 80091a2:	f7ff ffcc 	bl	800913e <_vsniprintf_r>
 80091a6:	b003      	add	sp, #12
 80091a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80091ac:	20000188 	.word	0x20000188

080091b0 <memset>:
 80091b0:	4603      	mov	r3, r0
 80091b2:	4402      	add	r2, r0
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d100      	bne.n	80091ba <memset+0xa>
 80091b8:	4770      	bx	lr
 80091ba:	f803 1b01 	strb.w	r1, [r3], #1
 80091be:	e7f9      	b.n	80091b4 <memset+0x4>

080091c0 <strncmp>:
 80091c0:	b510      	push	{r4, lr}
 80091c2:	b16a      	cbz	r2, 80091e0 <strncmp+0x20>
 80091c4:	3901      	subs	r1, #1
 80091c6:	1884      	adds	r4, r0, r2
 80091c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091cc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80091d0:	429a      	cmp	r2, r3
 80091d2:	d103      	bne.n	80091dc <strncmp+0x1c>
 80091d4:	42a0      	cmp	r0, r4
 80091d6:	d001      	beq.n	80091dc <strncmp+0x1c>
 80091d8:	2a00      	cmp	r2, #0
 80091da:	d1f5      	bne.n	80091c8 <strncmp+0x8>
 80091dc:	1ad0      	subs	r0, r2, r3
 80091de:	bd10      	pop	{r4, pc}
 80091e0:	4610      	mov	r0, r2
 80091e2:	e7fc      	b.n	80091de <strncmp+0x1e>

080091e4 <__strtok_r>:
 80091e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091e6:	4604      	mov	r4, r0
 80091e8:	b908      	cbnz	r0, 80091ee <__strtok_r+0xa>
 80091ea:	6814      	ldr	r4, [r2, #0]
 80091ec:	b144      	cbz	r4, 8009200 <__strtok_r+0x1c>
 80091ee:	460f      	mov	r7, r1
 80091f0:	4620      	mov	r0, r4
 80091f2:	f814 5b01 	ldrb.w	r5, [r4], #1
 80091f6:	f817 6b01 	ldrb.w	r6, [r7], #1
 80091fa:	b91e      	cbnz	r6, 8009204 <__strtok_r+0x20>
 80091fc:	b965      	cbnz	r5, 8009218 <__strtok_r+0x34>
 80091fe:	6015      	str	r5, [r2, #0]
 8009200:	2000      	movs	r0, #0
 8009202:	e005      	b.n	8009210 <__strtok_r+0x2c>
 8009204:	42b5      	cmp	r5, r6
 8009206:	d1f6      	bne.n	80091f6 <__strtok_r+0x12>
 8009208:	2b00      	cmp	r3, #0
 800920a:	d1f0      	bne.n	80091ee <__strtok_r+0xa>
 800920c:	6014      	str	r4, [r2, #0]
 800920e:	7003      	strb	r3, [r0, #0]
 8009210:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009212:	461c      	mov	r4, r3
 8009214:	e00c      	b.n	8009230 <__strtok_r+0x4c>
 8009216:	b915      	cbnz	r5, 800921e <__strtok_r+0x3a>
 8009218:	460e      	mov	r6, r1
 800921a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800921e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8009222:	42ab      	cmp	r3, r5
 8009224:	d1f7      	bne.n	8009216 <__strtok_r+0x32>
 8009226:	2b00      	cmp	r3, #0
 8009228:	d0f3      	beq.n	8009212 <__strtok_r+0x2e>
 800922a:	2300      	movs	r3, #0
 800922c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8009230:	6014      	str	r4, [r2, #0]
 8009232:	e7ed      	b.n	8009210 <__strtok_r+0x2c>

08009234 <strtok_r>:
 8009234:	2301      	movs	r3, #1
 8009236:	f7ff bfd5 	b.w	80091e4 <__strtok_r>
	...

0800923c <_localeconv_r>:
 800923c:	4800      	ldr	r0, [pc, #0]	@ (8009240 <_localeconv_r+0x4>)
 800923e:	4770      	bx	lr
 8009240:	2000010c 	.word	0x2000010c

08009244 <_close_r>:
 8009244:	b538      	push	{r3, r4, r5, lr}
 8009246:	2300      	movs	r3, #0
 8009248:	4d05      	ldr	r5, [pc, #20]	@ (8009260 <_close_r+0x1c>)
 800924a:	4604      	mov	r4, r0
 800924c:	4608      	mov	r0, r1
 800924e:	602b      	str	r3, [r5, #0]
 8009250:	f7fa f90f 	bl	8003472 <_close>
 8009254:	1c43      	adds	r3, r0, #1
 8009256:	d102      	bne.n	800925e <_close_r+0x1a>
 8009258:	682b      	ldr	r3, [r5, #0]
 800925a:	b103      	cbz	r3, 800925e <_close_r+0x1a>
 800925c:	6023      	str	r3, [r4, #0]
 800925e:	bd38      	pop	{r3, r4, r5, pc}
 8009260:	20000aa0 	.word	0x20000aa0

08009264 <_lseek_r>:
 8009264:	b538      	push	{r3, r4, r5, lr}
 8009266:	4604      	mov	r4, r0
 8009268:	4608      	mov	r0, r1
 800926a:	4611      	mov	r1, r2
 800926c:	2200      	movs	r2, #0
 800926e:	4d05      	ldr	r5, [pc, #20]	@ (8009284 <_lseek_r+0x20>)
 8009270:	602a      	str	r2, [r5, #0]
 8009272:	461a      	mov	r2, r3
 8009274:	f7fa f921 	bl	80034ba <_lseek>
 8009278:	1c43      	adds	r3, r0, #1
 800927a:	d102      	bne.n	8009282 <_lseek_r+0x1e>
 800927c:	682b      	ldr	r3, [r5, #0]
 800927e:	b103      	cbz	r3, 8009282 <_lseek_r+0x1e>
 8009280:	6023      	str	r3, [r4, #0]
 8009282:	bd38      	pop	{r3, r4, r5, pc}
 8009284:	20000aa0 	.word	0x20000aa0

08009288 <_read_r>:
 8009288:	b538      	push	{r3, r4, r5, lr}
 800928a:	4604      	mov	r4, r0
 800928c:	4608      	mov	r0, r1
 800928e:	4611      	mov	r1, r2
 8009290:	2200      	movs	r2, #0
 8009292:	4d05      	ldr	r5, [pc, #20]	@ (80092a8 <_read_r+0x20>)
 8009294:	602a      	str	r2, [r5, #0]
 8009296:	461a      	mov	r2, r3
 8009298:	f7fa f8b2 	bl	8003400 <_read>
 800929c:	1c43      	adds	r3, r0, #1
 800929e:	d102      	bne.n	80092a6 <_read_r+0x1e>
 80092a0:	682b      	ldr	r3, [r5, #0]
 80092a2:	b103      	cbz	r3, 80092a6 <_read_r+0x1e>
 80092a4:	6023      	str	r3, [r4, #0]
 80092a6:	bd38      	pop	{r3, r4, r5, pc}
 80092a8:	20000aa0 	.word	0x20000aa0

080092ac <_write_r>:
 80092ac:	b538      	push	{r3, r4, r5, lr}
 80092ae:	4604      	mov	r4, r0
 80092b0:	4608      	mov	r0, r1
 80092b2:	4611      	mov	r1, r2
 80092b4:	2200      	movs	r2, #0
 80092b6:	4d05      	ldr	r5, [pc, #20]	@ (80092cc <_write_r+0x20>)
 80092b8:	602a      	str	r2, [r5, #0]
 80092ba:	461a      	mov	r2, r3
 80092bc:	f7fa f8bd 	bl	800343a <_write>
 80092c0:	1c43      	adds	r3, r0, #1
 80092c2:	d102      	bne.n	80092ca <_write_r+0x1e>
 80092c4:	682b      	ldr	r3, [r5, #0]
 80092c6:	b103      	cbz	r3, 80092ca <_write_r+0x1e>
 80092c8:	6023      	str	r3, [r4, #0]
 80092ca:	bd38      	pop	{r3, r4, r5, pc}
 80092cc:	20000aa0 	.word	0x20000aa0

080092d0 <__errno>:
 80092d0:	4b01      	ldr	r3, [pc, #4]	@ (80092d8 <__errno+0x8>)
 80092d2:	6818      	ldr	r0, [r3, #0]
 80092d4:	4770      	bx	lr
 80092d6:	bf00      	nop
 80092d8:	20000188 	.word	0x20000188

080092dc <__libc_init_array>:
 80092dc:	b570      	push	{r4, r5, r6, lr}
 80092de:	2600      	movs	r6, #0
 80092e0:	4d0c      	ldr	r5, [pc, #48]	@ (8009314 <__libc_init_array+0x38>)
 80092e2:	4c0d      	ldr	r4, [pc, #52]	@ (8009318 <__libc_init_array+0x3c>)
 80092e4:	1b64      	subs	r4, r4, r5
 80092e6:	10a4      	asrs	r4, r4, #2
 80092e8:	42a6      	cmp	r6, r4
 80092ea:	d109      	bne.n	8009300 <__libc_init_array+0x24>
 80092ec:	f002 ff7e 	bl	800c1ec <_init>
 80092f0:	2600      	movs	r6, #0
 80092f2:	4d0a      	ldr	r5, [pc, #40]	@ (800931c <__libc_init_array+0x40>)
 80092f4:	4c0a      	ldr	r4, [pc, #40]	@ (8009320 <__libc_init_array+0x44>)
 80092f6:	1b64      	subs	r4, r4, r5
 80092f8:	10a4      	asrs	r4, r4, #2
 80092fa:	42a6      	cmp	r6, r4
 80092fc:	d105      	bne.n	800930a <__libc_init_array+0x2e>
 80092fe:	bd70      	pop	{r4, r5, r6, pc}
 8009300:	f855 3b04 	ldr.w	r3, [r5], #4
 8009304:	4798      	blx	r3
 8009306:	3601      	adds	r6, #1
 8009308:	e7ee      	b.n	80092e8 <__libc_init_array+0xc>
 800930a:	f855 3b04 	ldr.w	r3, [r5], #4
 800930e:	4798      	blx	r3
 8009310:	3601      	adds	r6, #1
 8009312:	e7f2      	b.n	80092fa <__libc_init_array+0x1e>
 8009314:	0800c890 	.word	0x0800c890
 8009318:	0800c890 	.word	0x0800c890
 800931c:	0800c890 	.word	0x0800c890
 8009320:	0800c894 	.word	0x0800c894

08009324 <__retarget_lock_init_recursive>:
 8009324:	4770      	bx	lr

08009326 <__retarget_lock_acquire_recursive>:
 8009326:	4770      	bx	lr

08009328 <__retarget_lock_release_recursive>:
 8009328:	4770      	bx	lr

0800932a <strcpy>:
 800932a:	4603      	mov	r3, r0
 800932c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009330:	f803 2b01 	strb.w	r2, [r3], #1
 8009334:	2a00      	cmp	r2, #0
 8009336:	d1f9      	bne.n	800932c <strcpy+0x2>
 8009338:	4770      	bx	lr

0800933a <memchr>:
 800933a:	4603      	mov	r3, r0
 800933c:	b510      	push	{r4, lr}
 800933e:	b2c9      	uxtb	r1, r1
 8009340:	4402      	add	r2, r0
 8009342:	4293      	cmp	r3, r2
 8009344:	4618      	mov	r0, r3
 8009346:	d101      	bne.n	800934c <memchr+0x12>
 8009348:	2000      	movs	r0, #0
 800934a:	e003      	b.n	8009354 <memchr+0x1a>
 800934c:	7804      	ldrb	r4, [r0, #0]
 800934e:	3301      	adds	r3, #1
 8009350:	428c      	cmp	r4, r1
 8009352:	d1f6      	bne.n	8009342 <memchr+0x8>
 8009354:	bd10      	pop	{r4, pc}

08009356 <memcpy>:
 8009356:	440a      	add	r2, r1
 8009358:	4291      	cmp	r1, r2
 800935a:	f100 33ff 	add.w	r3, r0, #4294967295
 800935e:	d100      	bne.n	8009362 <memcpy+0xc>
 8009360:	4770      	bx	lr
 8009362:	b510      	push	{r4, lr}
 8009364:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009368:	4291      	cmp	r1, r2
 800936a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800936e:	d1f9      	bne.n	8009364 <memcpy+0xe>
 8009370:	bd10      	pop	{r4, pc}
	...

08009374 <nan>:
 8009374:	2000      	movs	r0, #0
 8009376:	4901      	ldr	r1, [pc, #4]	@ (800937c <nan+0x8>)
 8009378:	4770      	bx	lr
 800937a:	bf00      	nop
 800937c:	7ff80000 	.word	0x7ff80000

08009380 <nanf>:
 8009380:	4800      	ldr	r0, [pc, #0]	@ (8009384 <nanf+0x4>)
 8009382:	4770      	bx	lr
 8009384:	7fc00000 	.word	0x7fc00000

08009388 <quorem>:
 8009388:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800938c:	6903      	ldr	r3, [r0, #16]
 800938e:	690c      	ldr	r4, [r1, #16]
 8009390:	4607      	mov	r7, r0
 8009392:	42a3      	cmp	r3, r4
 8009394:	db7e      	blt.n	8009494 <quorem+0x10c>
 8009396:	3c01      	subs	r4, #1
 8009398:	00a3      	lsls	r3, r4, #2
 800939a:	f100 0514 	add.w	r5, r0, #20
 800939e:	f101 0814 	add.w	r8, r1, #20
 80093a2:	9300      	str	r3, [sp, #0]
 80093a4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80093a8:	9301      	str	r3, [sp, #4]
 80093aa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80093ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80093b2:	3301      	adds	r3, #1
 80093b4:	429a      	cmp	r2, r3
 80093b6:	fbb2 f6f3 	udiv	r6, r2, r3
 80093ba:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80093be:	d32e      	bcc.n	800941e <quorem+0x96>
 80093c0:	f04f 0a00 	mov.w	sl, #0
 80093c4:	46c4      	mov	ip, r8
 80093c6:	46ae      	mov	lr, r5
 80093c8:	46d3      	mov	fp, sl
 80093ca:	f85c 3b04 	ldr.w	r3, [ip], #4
 80093ce:	b298      	uxth	r0, r3
 80093d0:	fb06 a000 	mla	r0, r6, r0, sl
 80093d4:	0c1b      	lsrs	r3, r3, #16
 80093d6:	0c02      	lsrs	r2, r0, #16
 80093d8:	fb06 2303 	mla	r3, r6, r3, r2
 80093dc:	f8de 2000 	ldr.w	r2, [lr]
 80093e0:	b280      	uxth	r0, r0
 80093e2:	b292      	uxth	r2, r2
 80093e4:	1a12      	subs	r2, r2, r0
 80093e6:	445a      	add	r2, fp
 80093e8:	f8de 0000 	ldr.w	r0, [lr]
 80093ec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80093f0:	b29b      	uxth	r3, r3
 80093f2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80093f6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80093fa:	b292      	uxth	r2, r2
 80093fc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009400:	45e1      	cmp	r9, ip
 8009402:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009406:	f84e 2b04 	str.w	r2, [lr], #4
 800940a:	d2de      	bcs.n	80093ca <quorem+0x42>
 800940c:	9b00      	ldr	r3, [sp, #0]
 800940e:	58eb      	ldr	r3, [r5, r3]
 8009410:	b92b      	cbnz	r3, 800941e <quorem+0x96>
 8009412:	9b01      	ldr	r3, [sp, #4]
 8009414:	3b04      	subs	r3, #4
 8009416:	429d      	cmp	r5, r3
 8009418:	461a      	mov	r2, r3
 800941a:	d32f      	bcc.n	800947c <quorem+0xf4>
 800941c:	613c      	str	r4, [r7, #16]
 800941e:	4638      	mov	r0, r7
 8009420:	f001 fd0e 	bl	800ae40 <__mcmp>
 8009424:	2800      	cmp	r0, #0
 8009426:	db25      	blt.n	8009474 <quorem+0xec>
 8009428:	4629      	mov	r1, r5
 800942a:	2000      	movs	r0, #0
 800942c:	f858 2b04 	ldr.w	r2, [r8], #4
 8009430:	f8d1 c000 	ldr.w	ip, [r1]
 8009434:	fa1f fe82 	uxth.w	lr, r2
 8009438:	fa1f f38c 	uxth.w	r3, ip
 800943c:	eba3 030e 	sub.w	r3, r3, lr
 8009440:	4403      	add	r3, r0
 8009442:	0c12      	lsrs	r2, r2, #16
 8009444:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009448:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800944c:	b29b      	uxth	r3, r3
 800944e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009452:	45c1      	cmp	r9, r8
 8009454:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009458:	f841 3b04 	str.w	r3, [r1], #4
 800945c:	d2e6      	bcs.n	800942c <quorem+0xa4>
 800945e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009462:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009466:	b922      	cbnz	r2, 8009472 <quorem+0xea>
 8009468:	3b04      	subs	r3, #4
 800946a:	429d      	cmp	r5, r3
 800946c:	461a      	mov	r2, r3
 800946e:	d30b      	bcc.n	8009488 <quorem+0x100>
 8009470:	613c      	str	r4, [r7, #16]
 8009472:	3601      	adds	r6, #1
 8009474:	4630      	mov	r0, r6
 8009476:	b003      	add	sp, #12
 8009478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800947c:	6812      	ldr	r2, [r2, #0]
 800947e:	3b04      	subs	r3, #4
 8009480:	2a00      	cmp	r2, #0
 8009482:	d1cb      	bne.n	800941c <quorem+0x94>
 8009484:	3c01      	subs	r4, #1
 8009486:	e7c6      	b.n	8009416 <quorem+0x8e>
 8009488:	6812      	ldr	r2, [r2, #0]
 800948a:	3b04      	subs	r3, #4
 800948c:	2a00      	cmp	r2, #0
 800948e:	d1ef      	bne.n	8009470 <quorem+0xe8>
 8009490:	3c01      	subs	r4, #1
 8009492:	e7ea      	b.n	800946a <quorem+0xe2>
 8009494:	2000      	movs	r0, #0
 8009496:	e7ee      	b.n	8009476 <quorem+0xee>

08009498 <_dtoa_r>:
 8009498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800949c:	4614      	mov	r4, r2
 800949e:	461d      	mov	r5, r3
 80094a0:	69c7      	ldr	r7, [r0, #28]
 80094a2:	b097      	sub	sp, #92	@ 0x5c
 80094a4:	4683      	mov	fp, r0
 80094a6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80094aa:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80094ac:	b97f      	cbnz	r7, 80094ce <_dtoa_r+0x36>
 80094ae:	2010      	movs	r0, #16
 80094b0:	f001 f93c 	bl	800a72c <malloc>
 80094b4:	4602      	mov	r2, r0
 80094b6:	f8cb 001c 	str.w	r0, [fp, #28]
 80094ba:	b920      	cbnz	r0, 80094c6 <_dtoa_r+0x2e>
 80094bc:	21ef      	movs	r1, #239	@ 0xef
 80094be:	4ba8      	ldr	r3, [pc, #672]	@ (8009760 <_dtoa_r+0x2c8>)
 80094c0:	48a8      	ldr	r0, [pc, #672]	@ (8009764 <_dtoa_r+0x2cc>)
 80094c2:	f002 f953 	bl	800b76c <__assert_func>
 80094c6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80094ca:	6007      	str	r7, [r0, #0]
 80094cc:	60c7      	str	r7, [r0, #12]
 80094ce:	f8db 301c 	ldr.w	r3, [fp, #28]
 80094d2:	6819      	ldr	r1, [r3, #0]
 80094d4:	b159      	cbz	r1, 80094ee <_dtoa_r+0x56>
 80094d6:	685a      	ldr	r2, [r3, #4]
 80094d8:	2301      	movs	r3, #1
 80094da:	4093      	lsls	r3, r2
 80094dc:	604a      	str	r2, [r1, #4]
 80094de:	608b      	str	r3, [r1, #8]
 80094e0:	4658      	mov	r0, fp
 80094e2:	f001 fa2b 	bl	800a93c <_Bfree>
 80094e6:	2200      	movs	r2, #0
 80094e8:	f8db 301c 	ldr.w	r3, [fp, #28]
 80094ec:	601a      	str	r2, [r3, #0]
 80094ee:	1e2b      	subs	r3, r5, #0
 80094f0:	bfaf      	iteee	ge
 80094f2:	2300      	movge	r3, #0
 80094f4:	2201      	movlt	r2, #1
 80094f6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80094fa:	9303      	strlt	r3, [sp, #12]
 80094fc:	bfa8      	it	ge
 80094fe:	6033      	strge	r3, [r6, #0]
 8009500:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009504:	4b98      	ldr	r3, [pc, #608]	@ (8009768 <_dtoa_r+0x2d0>)
 8009506:	bfb8      	it	lt
 8009508:	6032      	strlt	r2, [r6, #0]
 800950a:	ea33 0308 	bics.w	r3, r3, r8
 800950e:	d112      	bne.n	8009536 <_dtoa_r+0x9e>
 8009510:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009514:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009516:	6013      	str	r3, [r2, #0]
 8009518:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800951c:	4323      	orrs	r3, r4
 800951e:	f000 8550 	beq.w	8009fc2 <_dtoa_r+0xb2a>
 8009522:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009524:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800976c <_dtoa_r+0x2d4>
 8009528:	2b00      	cmp	r3, #0
 800952a:	f000 8552 	beq.w	8009fd2 <_dtoa_r+0xb3a>
 800952e:	f10a 0303 	add.w	r3, sl, #3
 8009532:	f000 bd4c 	b.w	8009fce <_dtoa_r+0xb36>
 8009536:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800953a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800953e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009542:	2200      	movs	r2, #0
 8009544:	2300      	movs	r3, #0
 8009546:	f7f7 fa39 	bl	80009bc <__aeabi_dcmpeq>
 800954a:	4607      	mov	r7, r0
 800954c:	b158      	cbz	r0, 8009566 <_dtoa_r+0xce>
 800954e:	2301      	movs	r3, #1
 8009550:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009552:	6013      	str	r3, [r2, #0]
 8009554:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009556:	b113      	cbz	r3, 800955e <_dtoa_r+0xc6>
 8009558:	4b85      	ldr	r3, [pc, #532]	@ (8009770 <_dtoa_r+0x2d8>)
 800955a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800955c:	6013      	str	r3, [r2, #0]
 800955e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8009774 <_dtoa_r+0x2dc>
 8009562:	f000 bd36 	b.w	8009fd2 <_dtoa_r+0xb3a>
 8009566:	ab14      	add	r3, sp, #80	@ 0x50
 8009568:	9301      	str	r3, [sp, #4]
 800956a:	ab15      	add	r3, sp, #84	@ 0x54
 800956c:	9300      	str	r3, [sp, #0]
 800956e:	4658      	mov	r0, fp
 8009570:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009574:	f001 fd7c 	bl	800b070 <__d2b>
 8009578:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800957c:	4681      	mov	r9, r0
 800957e:	2e00      	cmp	r6, #0
 8009580:	d077      	beq.n	8009672 <_dtoa_r+0x1da>
 8009582:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009586:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009588:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800958c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009590:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009594:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009598:	9712      	str	r7, [sp, #72]	@ 0x48
 800959a:	4619      	mov	r1, r3
 800959c:	2200      	movs	r2, #0
 800959e:	4b76      	ldr	r3, [pc, #472]	@ (8009778 <_dtoa_r+0x2e0>)
 80095a0:	f7f6 fdec 	bl	800017c <__aeabi_dsub>
 80095a4:	a368      	add	r3, pc, #416	@ (adr r3, 8009748 <_dtoa_r+0x2b0>)
 80095a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095aa:	f7f6 ff9f 	bl	80004ec <__aeabi_dmul>
 80095ae:	a368      	add	r3, pc, #416	@ (adr r3, 8009750 <_dtoa_r+0x2b8>)
 80095b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095b4:	f7f6 fde4 	bl	8000180 <__adddf3>
 80095b8:	4604      	mov	r4, r0
 80095ba:	4630      	mov	r0, r6
 80095bc:	460d      	mov	r5, r1
 80095be:	f7f6 ff2b 	bl	8000418 <__aeabi_i2d>
 80095c2:	a365      	add	r3, pc, #404	@ (adr r3, 8009758 <_dtoa_r+0x2c0>)
 80095c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095c8:	f7f6 ff90 	bl	80004ec <__aeabi_dmul>
 80095cc:	4602      	mov	r2, r0
 80095ce:	460b      	mov	r3, r1
 80095d0:	4620      	mov	r0, r4
 80095d2:	4629      	mov	r1, r5
 80095d4:	f7f6 fdd4 	bl	8000180 <__adddf3>
 80095d8:	4604      	mov	r4, r0
 80095da:	460d      	mov	r5, r1
 80095dc:	f7f7 fa36 	bl	8000a4c <__aeabi_d2iz>
 80095e0:	2200      	movs	r2, #0
 80095e2:	4607      	mov	r7, r0
 80095e4:	2300      	movs	r3, #0
 80095e6:	4620      	mov	r0, r4
 80095e8:	4629      	mov	r1, r5
 80095ea:	f7f7 f9f1 	bl	80009d0 <__aeabi_dcmplt>
 80095ee:	b140      	cbz	r0, 8009602 <_dtoa_r+0x16a>
 80095f0:	4638      	mov	r0, r7
 80095f2:	f7f6 ff11 	bl	8000418 <__aeabi_i2d>
 80095f6:	4622      	mov	r2, r4
 80095f8:	462b      	mov	r3, r5
 80095fa:	f7f7 f9df 	bl	80009bc <__aeabi_dcmpeq>
 80095fe:	b900      	cbnz	r0, 8009602 <_dtoa_r+0x16a>
 8009600:	3f01      	subs	r7, #1
 8009602:	2f16      	cmp	r7, #22
 8009604:	d853      	bhi.n	80096ae <_dtoa_r+0x216>
 8009606:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800960a:	4b5c      	ldr	r3, [pc, #368]	@ (800977c <_dtoa_r+0x2e4>)
 800960c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009614:	f7f7 f9dc 	bl	80009d0 <__aeabi_dcmplt>
 8009618:	2800      	cmp	r0, #0
 800961a:	d04a      	beq.n	80096b2 <_dtoa_r+0x21a>
 800961c:	2300      	movs	r3, #0
 800961e:	3f01      	subs	r7, #1
 8009620:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009622:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009624:	1b9b      	subs	r3, r3, r6
 8009626:	1e5a      	subs	r2, r3, #1
 8009628:	bf46      	itte	mi
 800962a:	f1c3 0801 	rsbmi	r8, r3, #1
 800962e:	2300      	movmi	r3, #0
 8009630:	f04f 0800 	movpl.w	r8, #0
 8009634:	9209      	str	r2, [sp, #36]	@ 0x24
 8009636:	bf48      	it	mi
 8009638:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800963a:	2f00      	cmp	r7, #0
 800963c:	db3b      	blt.n	80096b6 <_dtoa_r+0x21e>
 800963e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009640:	970e      	str	r7, [sp, #56]	@ 0x38
 8009642:	443b      	add	r3, r7
 8009644:	9309      	str	r3, [sp, #36]	@ 0x24
 8009646:	2300      	movs	r3, #0
 8009648:	930a      	str	r3, [sp, #40]	@ 0x28
 800964a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800964c:	2b09      	cmp	r3, #9
 800964e:	d866      	bhi.n	800971e <_dtoa_r+0x286>
 8009650:	2b05      	cmp	r3, #5
 8009652:	bfc4      	itt	gt
 8009654:	3b04      	subgt	r3, #4
 8009656:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8009658:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800965a:	bfc8      	it	gt
 800965c:	2400      	movgt	r4, #0
 800965e:	f1a3 0302 	sub.w	r3, r3, #2
 8009662:	bfd8      	it	le
 8009664:	2401      	movle	r4, #1
 8009666:	2b03      	cmp	r3, #3
 8009668:	d864      	bhi.n	8009734 <_dtoa_r+0x29c>
 800966a:	e8df f003 	tbb	[pc, r3]
 800966e:	382b      	.short	0x382b
 8009670:	5636      	.short	0x5636
 8009672:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009676:	441e      	add	r6, r3
 8009678:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800967c:	2b20      	cmp	r3, #32
 800967e:	bfc1      	itttt	gt
 8009680:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009684:	fa08 f803 	lslgt.w	r8, r8, r3
 8009688:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800968c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009690:	bfd6      	itet	le
 8009692:	f1c3 0320 	rsble	r3, r3, #32
 8009696:	ea48 0003 	orrgt.w	r0, r8, r3
 800969a:	fa04 f003 	lslle.w	r0, r4, r3
 800969e:	f7f6 feab 	bl	80003f8 <__aeabi_ui2d>
 80096a2:	2201      	movs	r2, #1
 80096a4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80096a8:	3e01      	subs	r6, #1
 80096aa:	9212      	str	r2, [sp, #72]	@ 0x48
 80096ac:	e775      	b.n	800959a <_dtoa_r+0x102>
 80096ae:	2301      	movs	r3, #1
 80096b0:	e7b6      	b.n	8009620 <_dtoa_r+0x188>
 80096b2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80096b4:	e7b5      	b.n	8009622 <_dtoa_r+0x18a>
 80096b6:	427b      	negs	r3, r7
 80096b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80096ba:	2300      	movs	r3, #0
 80096bc:	eba8 0807 	sub.w	r8, r8, r7
 80096c0:	930e      	str	r3, [sp, #56]	@ 0x38
 80096c2:	e7c2      	b.n	800964a <_dtoa_r+0x1b2>
 80096c4:	2300      	movs	r3, #0
 80096c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80096c8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	dc35      	bgt.n	800973a <_dtoa_r+0x2a2>
 80096ce:	2301      	movs	r3, #1
 80096d0:	461a      	mov	r2, r3
 80096d2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80096d6:	9221      	str	r2, [sp, #132]	@ 0x84
 80096d8:	e00b      	b.n	80096f2 <_dtoa_r+0x25a>
 80096da:	2301      	movs	r3, #1
 80096dc:	e7f3      	b.n	80096c6 <_dtoa_r+0x22e>
 80096de:	2300      	movs	r3, #0
 80096e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80096e2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80096e4:	18fb      	adds	r3, r7, r3
 80096e6:	9308      	str	r3, [sp, #32]
 80096e8:	3301      	adds	r3, #1
 80096ea:	2b01      	cmp	r3, #1
 80096ec:	9307      	str	r3, [sp, #28]
 80096ee:	bfb8      	it	lt
 80096f0:	2301      	movlt	r3, #1
 80096f2:	2100      	movs	r1, #0
 80096f4:	2204      	movs	r2, #4
 80096f6:	f8db 001c 	ldr.w	r0, [fp, #28]
 80096fa:	f102 0514 	add.w	r5, r2, #20
 80096fe:	429d      	cmp	r5, r3
 8009700:	d91f      	bls.n	8009742 <_dtoa_r+0x2aa>
 8009702:	6041      	str	r1, [r0, #4]
 8009704:	4658      	mov	r0, fp
 8009706:	f001 f8d9 	bl	800a8bc <_Balloc>
 800970a:	4682      	mov	sl, r0
 800970c:	2800      	cmp	r0, #0
 800970e:	d139      	bne.n	8009784 <_dtoa_r+0x2ec>
 8009710:	4602      	mov	r2, r0
 8009712:	f240 11af 	movw	r1, #431	@ 0x1af
 8009716:	4b1a      	ldr	r3, [pc, #104]	@ (8009780 <_dtoa_r+0x2e8>)
 8009718:	e6d2      	b.n	80094c0 <_dtoa_r+0x28>
 800971a:	2301      	movs	r3, #1
 800971c:	e7e0      	b.n	80096e0 <_dtoa_r+0x248>
 800971e:	2401      	movs	r4, #1
 8009720:	2300      	movs	r3, #0
 8009722:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009724:	9320      	str	r3, [sp, #128]	@ 0x80
 8009726:	f04f 33ff 	mov.w	r3, #4294967295
 800972a:	2200      	movs	r2, #0
 800972c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8009730:	2312      	movs	r3, #18
 8009732:	e7d0      	b.n	80096d6 <_dtoa_r+0x23e>
 8009734:	2301      	movs	r3, #1
 8009736:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009738:	e7f5      	b.n	8009726 <_dtoa_r+0x28e>
 800973a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800973c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8009740:	e7d7      	b.n	80096f2 <_dtoa_r+0x25a>
 8009742:	3101      	adds	r1, #1
 8009744:	0052      	lsls	r2, r2, #1
 8009746:	e7d8      	b.n	80096fa <_dtoa_r+0x262>
 8009748:	636f4361 	.word	0x636f4361
 800974c:	3fd287a7 	.word	0x3fd287a7
 8009750:	8b60c8b3 	.word	0x8b60c8b3
 8009754:	3fc68a28 	.word	0x3fc68a28
 8009758:	509f79fb 	.word	0x509f79fb
 800975c:	3fd34413 	.word	0x3fd34413
 8009760:	0800c5c7 	.word	0x0800c5c7
 8009764:	0800c5de 	.word	0x0800c5de
 8009768:	7ff00000 	.word	0x7ff00000
 800976c:	0800c5c3 	.word	0x0800c5c3
 8009770:	0800c58a 	.word	0x0800c58a
 8009774:	0800c589 	.word	0x0800c589
 8009778:	3ff80000 	.word	0x3ff80000
 800977c:	0800c738 	.word	0x0800c738
 8009780:	0800c636 	.word	0x0800c636
 8009784:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009788:	6018      	str	r0, [r3, #0]
 800978a:	9b07      	ldr	r3, [sp, #28]
 800978c:	2b0e      	cmp	r3, #14
 800978e:	f200 80a4 	bhi.w	80098da <_dtoa_r+0x442>
 8009792:	2c00      	cmp	r4, #0
 8009794:	f000 80a1 	beq.w	80098da <_dtoa_r+0x442>
 8009798:	2f00      	cmp	r7, #0
 800979a:	dd33      	ble.n	8009804 <_dtoa_r+0x36c>
 800979c:	4b86      	ldr	r3, [pc, #536]	@ (80099b8 <_dtoa_r+0x520>)
 800979e:	f007 020f 	and.w	r2, r7, #15
 80097a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80097a6:	05f8      	lsls	r0, r7, #23
 80097a8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80097ac:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80097b0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80097b4:	d516      	bpl.n	80097e4 <_dtoa_r+0x34c>
 80097b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80097ba:	4b80      	ldr	r3, [pc, #512]	@ (80099bc <_dtoa_r+0x524>)
 80097bc:	2603      	movs	r6, #3
 80097be:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80097c2:	f7f6 ffbd 	bl	8000740 <__aeabi_ddiv>
 80097c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097ca:	f004 040f 	and.w	r4, r4, #15
 80097ce:	4d7b      	ldr	r5, [pc, #492]	@ (80099bc <_dtoa_r+0x524>)
 80097d0:	b954      	cbnz	r4, 80097e8 <_dtoa_r+0x350>
 80097d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80097d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097da:	f7f6 ffb1 	bl	8000740 <__aeabi_ddiv>
 80097de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097e2:	e028      	b.n	8009836 <_dtoa_r+0x39e>
 80097e4:	2602      	movs	r6, #2
 80097e6:	e7f2      	b.n	80097ce <_dtoa_r+0x336>
 80097e8:	07e1      	lsls	r1, r4, #31
 80097ea:	d508      	bpl.n	80097fe <_dtoa_r+0x366>
 80097ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80097f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80097f4:	f7f6 fe7a 	bl	80004ec <__aeabi_dmul>
 80097f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80097fc:	3601      	adds	r6, #1
 80097fe:	1064      	asrs	r4, r4, #1
 8009800:	3508      	adds	r5, #8
 8009802:	e7e5      	b.n	80097d0 <_dtoa_r+0x338>
 8009804:	f000 80d2 	beq.w	80099ac <_dtoa_r+0x514>
 8009808:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800980c:	427c      	negs	r4, r7
 800980e:	4b6a      	ldr	r3, [pc, #424]	@ (80099b8 <_dtoa_r+0x520>)
 8009810:	f004 020f 	and.w	r2, r4, #15
 8009814:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800981c:	f7f6 fe66 	bl	80004ec <__aeabi_dmul>
 8009820:	2602      	movs	r6, #2
 8009822:	2300      	movs	r3, #0
 8009824:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009828:	4d64      	ldr	r5, [pc, #400]	@ (80099bc <_dtoa_r+0x524>)
 800982a:	1124      	asrs	r4, r4, #4
 800982c:	2c00      	cmp	r4, #0
 800982e:	f040 80b2 	bne.w	8009996 <_dtoa_r+0x4fe>
 8009832:	2b00      	cmp	r3, #0
 8009834:	d1d3      	bne.n	80097de <_dtoa_r+0x346>
 8009836:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800983a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800983c:	2b00      	cmp	r3, #0
 800983e:	f000 80b7 	beq.w	80099b0 <_dtoa_r+0x518>
 8009842:	2200      	movs	r2, #0
 8009844:	4620      	mov	r0, r4
 8009846:	4629      	mov	r1, r5
 8009848:	4b5d      	ldr	r3, [pc, #372]	@ (80099c0 <_dtoa_r+0x528>)
 800984a:	f7f7 f8c1 	bl	80009d0 <__aeabi_dcmplt>
 800984e:	2800      	cmp	r0, #0
 8009850:	f000 80ae 	beq.w	80099b0 <_dtoa_r+0x518>
 8009854:	9b07      	ldr	r3, [sp, #28]
 8009856:	2b00      	cmp	r3, #0
 8009858:	f000 80aa 	beq.w	80099b0 <_dtoa_r+0x518>
 800985c:	9b08      	ldr	r3, [sp, #32]
 800985e:	2b00      	cmp	r3, #0
 8009860:	dd37      	ble.n	80098d2 <_dtoa_r+0x43a>
 8009862:	1e7b      	subs	r3, r7, #1
 8009864:	4620      	mov	r0, r4
 8009866:	9304      	str	r3, [sp, #16]
 8009868:	2200      	movs	r2, #0
 800986a:	4629      	mov	r1, r5
 800986c:	4b55      	ldr	r3, [pc, #340]	@ (80099c4 <_dtoa_r+0x52c>)
 800986e:	f7f6 fe3d 	bl	80004ec <__aeabi_dmul>
 8009872:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009876:	9c08      	ldr	r4, [sp, #32]
 8009878:	3601      	adds	r6, #1
 800987a:	4630      	mov	r0, r6
 800987c:	f7f6 fdcc 	bl	8000418 <__aeabi_i2d>
 8009880:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009884:	f7f6 fe32 	bl	80004ec <__aeabi_dmul>
 8009888:	2200      	movs	r2, #0
 800988a:	4b4f      	ldr	r3, [pc, #316]	@ (80099c8 <_dtoa_r+0x530>)
 800988c:	f7f6 fc78 	bl	8000180 <__adddf3>
 8009890:	4605      	mov	r5, r0
 8009892:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009896:	2c00      	cmp	r4, #0
 8009898:	f040 809a 	bne.w	80099d0 <_dtoa_r+0x538>
 800989c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098a0:	2200      	movs	r2, #0
 80098a2:	4b4a      	ldr	r3, [pc, #296]	@ (80099cc <_dtoa_r+0x534>)
 80098a4:	f7f6 fc6a 	bl	800017c <__aeabi_dsub>
 80098a8:	4602      	mov	r2, r0
 80098aa:	460b      	mov	r3, r1
 80098ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80098b0:	462a      	mov	r2, r5
 80098b2:	4633      	mov	r3, r6
 80098b4:	f7f7 f8aa 	bl	8000a0c <__aeabi_dcmpgt>
 80098b8:	2800      	cmp	r0, #0
 80098ba:	f040 828e 	bne.w	8009dda <_dtoa_r+0x942>
 80098be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098c2:	462a      	mov	r2, r5
 80098c4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80098c8:	f7f7 f882 	bl	80009d0 <__aeabi_dcmplt>
 80098cc:	2800      	cmp	r0, #0
 80098ce:	f040 8127 	bne.w	8009b20 <_dtoa_r+0x688>
 80098d2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80098d6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80098da:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80098dc:	2b00      	cmp	r3, #0
 80098de:	f2c0 8163 	blt.w	8009ba8 <_dtoa_r+0x710>
 80098e2:	2f0e      	cmp	r7, #14
 80098e4:	f300 8160 	bgt.w	8009ba8 <_dtoa_r+0x710>
 80098e8:	4b33      	ldr	r3, [pc, #204]	@ (80099b8 <_dtoa_r+0x520>)
 80098ea:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80098ee:	e9d3 3400 	ldrd	r3, r4, [r3]
 80098f2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80098f6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	da03      	bge.n	8009904 <_dtoa_r+0x46c>
 80098fc:	9b07      	ldr	r3, [sp, #28]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	f340 8100 	ble.w	8009b04 <_dtoa_r+0x66c>
 8009904:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009908:	4656      	mov	r6, sl
 800990a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800990e:	4620      	mov	r0, r4
 8009910:	4629      	mov	r1, r5
 8009912:	f7f6 ff15 	bl	8000740 <__aeabi_ddiv>
 8009916:	f7f7 f899 	bl	8000a4c <__aeabi_d2iz>
 800991a:	4680      	mov	r8, r0
 800991c:	f7f6 fd7c 	bl	8000418 <__aeabi_i2d>
 8009920:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009924:	f7f6 fde2 	bl	80004ec <__aeabi_dmul>
 8009928:	4602      	mov	r2, r0
 800992a:	460b      	mov	r3, r1
 800992c:	4620      	mov	r0, r4
 800992e:	4629      	mov	r1, r5
 8009930:	f7f6 fc24 	bl	800017c <__aeabi_dsub>
 8009934:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009938:	9d07      	ldr	r5, [sp, #28]
 800993a:	f806 4b01 	strb.w	r4, [r6], #1
 800993e:	eba6 040a 	sub.w	r4, r6, sl
 8009942:	42a5      	cmp	r5, r4
 8009944:	4602      	mov	r2, r0
 8009946:	460b      	mov	r3, r1
 8009948:	f040 8116 	bne.w	8009b78 <_dtoa_r+0x6e0>
 800994c:	f7f6 fc18 	bl	8000180 <__adddf3>
 8009950:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009954:	4604      	mov	r4, r0
 8009956:	460d      	mov	r5, r1
 8009958:	f7f7 f858 	bl	8000a0c <__aeabi_dcmpgt>
 800995c:	2800      	cmp	r0, #0
 800995e:	f040 80f8 	bne.w	8009b52 <_dtoa_r+0x6ba>
 8009962:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009966:	4620      	mov	r0, r4
 8009968:	4629      	mov	r1, r5
 800996a:	f7f7 f827 	bl	80009bc <__aeabi_dcmpeq>
 800996e:	b118      	cbz	r0, 8009978 <_dtoa_r+0x4e0>
 8009970:	f018 0f01 	tst.w	r8, #1
 8009974:	f040 80ed 	bne.w	8009b52 <_dtoa_r+0x6ba>
 8009978:	4649      	mov	r1, r9
 800997a:	4658      	mov	r0, fp
 800997c:	f000 ffde 	bl	800a93c <_Bfree>
 8009980:	2300      	movs	r3, #0
 8009982:	7033      	strb	r3, [r6, #0]
 8009984:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009986:	3701      	adds	r7, #1
 8009988:	601f      	str	r7, [r3, #0]
 800998a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800998c:	2b00      	cmp	r3, #0
 800998e:	f000 8320 	beq.w	8009fd2 <_dtoa_r+0xb3a>
 8009992:	601e      	str	r6, [r3, #0]
 8009994:	e31d      	b.n	8009fd2 <_dtoa_r+0xb3a>
 8009996:	07e2      	lsls	r2, r4, #31
 8009998:	d505      	bpl.n	80099a6 <_dtoa_r+0x50e>
 800999a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800999e:	f7f6 fda5 	bl	80004ec <__aeabi_dmul>
 80099a2:	2301      	movs	r3, #1
 80099a4:	3601      	adds	r6, #1
 80099a6:	1064      	asrs	r4, r4, #1
 80099a8:	3508      	adds	r5, #8
 80099aa:	e73f      	b.n	800982c <_dtoa_r+0x394>
 80099ac:	2602      	movs	r6, #2
 80099ae:	e742      	b.n	8009836 <_dtoa_r+0x39e>
 80099b0:	9c07      	ldr	r4, [sp, #28]
 80099b2:	9704      	str	r7, [sp, #16]
 80099b4:	e761      	b.n	800987a <_dtoa_r+0x3e2>
 80099b6:	bf00      	nop
 80099b8:	0800c738 	.word	0x0800c738
 80099bc:	0800c710 	.word	0x0800c710
 80099c0:	3ff00000 	.word	0x3ff00000
 80099c4:	40240000 	.word	0x40240000
 80099c8:	401c0000 	.word	0x401c0000
 80099cc:	40140000 	.word	0x40140000
 80099d0:	4b70      	ldr	r3, [pc, #448]	@ (8009b94 <_dtoa_r+0x6fc>)
 80099d2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80099d4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80099d8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80099dc:	4454      	add	r4, sl
 80099de:	2900      	cmp	r1, #0
 80099e0:	d045      	beq.n	8009a6e <_dtoa_r+0x5d6>
 80099e2:	2000      	movs	r0, #0
 80099e4:	496c      	ldr	r1, [pc, #432]	@ (8009b98 <_dtoa_r+0x700>)
 80099e6:	f7f6 feab 	bl	8000740 <__aeabi_ddiv>
 80099ea:	4633      	mov	r3, r6
 80099ec:	462a      	mov	r2, r5
 80099ee:	f7f6 fbc5 	bl	800017c <__aeabi_dsub>
 80099f2:	4656      	mov	r6, sl
 80099f4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80099f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099fc:	f7f7 f826 	bl	8000a4c <__aeabi_d2iz>
 8009a00:	4605      	mov	r5, r0
 8009a02:	f7f6 fd09 	bl	8000418 <__aeabi_i2d>
 8009a06:	4602      	mov	r2, r0
 8009a08:	460b      	mov	r3, r1
 8009a0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a0e:	f7f6 fbb5 	bl	800017c <__aeabi_dsub>
 8009a12:	4602      	mov	r2, r0
 8009a14:	460b      	mov	r3, r1
 8009a16:	3530      	adds	r5, #48	@ 0x30
 8009a18:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009a1c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009a20:	f806 5b01 	strb.w	r5, [r6], #1
 8009a24:	f7f6 ffd4 	bl	80009d0 <__aeabi_dcmplt>
 8009a28:	2800      	cmp	r0, #0
 8009a2a:	d163      	bne.n	8009af4 <_dtoa_r+0x65c>
 8009a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009a30:	2000      	movs	r0, #0
 8009a32:	495a      	ldr	r1, [pc, #360]	@ (8009b9c <_dtoa_r+0x704>)
 8009a34:	f7f6 fba2 	bl	800017c <__aeabi_dsub>
 8009a38:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009a3c:	f7f6 ffc8 	bl	80009d0 <__aeabi_dcmplt>
 8009a40:	2800      	cmp	r0, #0
 8009a42:	f040 8087 	bne.w	8009b54 <_dtoa_r+0x6bc>
 8009a46:	42a6      	cmp	r6, r4
 8009a48:	f43f af43 	beq.w	80098d2 <_dtoa_r+0x43a>
 8009a4c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009a50:	2200      	movs	r2, #0
 8009a52:	4b53      	ldr	r3, [pc, #332]	@ (8009ba0 <_dtoa_r+0x708>)
 8009a54:	f7f6 fd4a 	bl	80004ec <__aeabi_dmul>
 8009a58:	2200      	movs	r2, #0
 8009a5a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009a5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a62:	4b4f      	ldr	r3, [pc, #316]	@ (8009ba0 <_dtoa_r+0x708>)
 8009a64:	f7f6 fd42 	bl	80004ec <__aeabi_dmul>
 8009a68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a6c:	e7c4      	b.n	80099f8 <_dtoa_r+0x560>
 8009a6e:	4631      	mov	r1, r6
 8009a70:	4628      	mov	r0, r5
 8009a72:	f7f6 fd3b 	bl	80004ec <__aeabi_dmul>
 8009a76:	4656      	mov	r6, sl
 8009a78:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009a7c:	9413      	str	r4, [sp, #76]	@ 0x4c
 8009a7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a82:	f7f6 ffe3 	bl	8000a4c <__aeabi_d2iz>
 8009a86:	4605      	mov	r5, r0
 8009a88:	f7f6 fcc6 	bl	8000418 <__aeabi_i2d>
 8009a8c:	4602      	mov	r2, r0
 8009a8e:	460b      	mov	r3, r1
 8009a90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a94:	f7f6 fb72 	bl	800017c <__aeabi_dsub>
 8009a98:	4602      	mov	r2, r0
 8009a9a:	460b      	mov	r3, r1
 8009a9c:	3530      	adds	r5, #48	@ 0x30
 8009a9e:	f806 5b01 	strb.w	r5, [r6], #1
 8009aa2:	42a6      	cmp	r6, r4
 8009aa4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009aa8:	f04f 0200 	mov.w	r2, #0
 8009aac:	d124      	bne.n	8009af8 <_dtoa_r+0x660>
 8009aae:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009ab2:	4b39      	ldr	r3, [pc, #228]	@ (8009b98 <_dtoa_r+0x700>)
 8009ab4:	f7f6 fb64 	bl	8000180 <__adddf3>
 8009ab8:	4602      	mov	r2, r0
 8009aba:	460b      	mov	r3, r1
 8009abc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ac0:	f7f6 ffa4 	bl	8000a0c <__aeabi_dcmpgt>
 8009ac4:	2800      	cmp	r0, #0
 8009ac6:	d145      	bne.n	8009b54 <_dtoa_r+0x6bc>
 8009ac8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009acc:	2000      	movs	r0, #0
 8009ace:	4932      	ldr	r1, [pc, #200]	@ (8009b98 <_dtoa_r+0x700>)
 8009ad0:	f7f6 fb54 	bl	800017c <__aeabi_dsub>
 8009ad4:	4602      	mov	r2, r0
 8009ad6:	460b      	mov	r3, r1
 8009ad8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009adc:	f7f6 ff78 	bl	80009d0 <__aeabi_dcmplt>
 8009ae0:	2800      	cmp	r0, #0
 8009ae2:	f43f aef6 	beq.w	80098d2 <_dtoa_r+0x43a>
 8009ae6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009ae8:	1e73      	subs	r3, r6, #1
 8009aea:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009aec:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009af0:	2b30      	cmp	r3, #48	@ 0x30
 8009af2:	d0f8      	beq.n	8009ae6 <_dtoa_r+0x64e>
 8009af4:	9f04      	ldr	r7, [sp, #16]
 8009af6:	e73f      	b.n	8009978 <_dtoa_r+0x4e0>
 8009af8:	4b29      	ldr	r3, [pc, #164]	@ (8009ba0 <_dtoa_r+0x708>)
 8009afa:	f7f6 fcf7 	bl	80004ec <__aeabi_dmul>
 8009afe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b02:	e7bc      	b.n	8009a7e <_dtoa_r+0x5e6>
 8009b04:	d10c      	bne.n	8009b20 <_dtoa_r+0x688>
 8009b06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	4b25      	ldr	r3, [pc, #148]	@ (8009ba4 <_dtoa_r+0x70c>)
 8009b0e:	f7f6 fced 	bl	80004ec <__aeabi_dmul>
 8009b12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009b16:	f7f6 ff6f 	bl	80009f8 <__aeabi_dcmpge>
 8009b1a:	2800      	cmp	r0, #0
 8009b1c:	f000 815b 	beq.w	8009dd6 <_dtoa_r+0x93e>
 8009b20:	2400      	movs	r4, #0
 8009b22:	4625      	mov	r5, r4
 8009b24:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009b26:	4656      	mov	r6, sl
 8009b28:	43db      	mvns	r3, r3
 8009b2a:	9304      	str	r3, [sp, #16]
 8009b2c:	2700      	movs	r7, #0
 8009b2e:	4621      	mov	r1, r4
 8009b30:	4658      	mov	r0, fp
 8009b32:	f000 ff03 	bl	800a93c <_Bfree>
 8009b36:	2d00      	cmp	r5, #0
 8009b38:	d0dc      	beq.n	8009af4 <_dtoa_r+0x65c>
 8009b3a:	b12f      	cbz	r7, 8009b48 <_dtoa_r+0x6b0>
 8009b3c:	42af      	cmp	r7, r5
 8009b3e:	d003      	beq.n	8009b48 <_dtoa_r+0x6b0>
 8009b40:	4639      	mov	r1, r7
 8009b42:	4658      	mov	r0, fp
 8009b44:	f000 fefa 	bl	800a93c <_Bfree>
 8009b48:	4629      	mov	r1, r5
 8009b4a:	4658      	mov	r0, fp
 8009b4c:	f000 fef6 	bl	800a93c <_Bfree>
 8009b50:	e7d0      	b.n	8009af4 <_dtoa_r+0x65c>
 8009b52:	9704      	str	r7, [sp, #16]
 8009b54:	4633      	mov	r3, r6
 8009b56:	461e      	mov	r6, r3
 8009b58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009b5c:	2a39      	cmp	r2, #57	@ 0x39
 8009b5e:	d107      	bne.n	8009b70 <_dtoa_r+0x6d8>
 8009b60:	459a      	cmp	sl, r3
 8009b62:	d1f8      	bne.n	8009b56 <_dtoa_r+0x6be>
 8009b64:	9a04      	ldr	r2, [sp, #16]
 8009b66:	3201      	adds	r2, #1
 8009b68:	9204      	str	r2, [sp, #16]
 8009b6a:	2230      	movs	r2, #48	@ 0x30
 8009b6c:	f88a 2000 	strb.w	r2, [sl]
 8009b70:	781a      	ldrb	r2, [r3, #0]
 8009b72:	3201      	adds	r2, #1
 8009b74:	701a      	strb	r2, [r3, #0]
 8009b76:	e7bd      	b.n	8009af4 <_dtoa_r+0x65c>
 8009b78:	2200      	movs	r2, #0
 8009b7a:	4b09      	ldr	r3, [pc, #36]	@ (8009ba0 <_dtoa_r+0x708>)
 8009b7c:	f7f6 fcb6 	bl	80004ec <__aeabi_dmul>
 8009b80:	2200      	movs	r2, #0
 8009b82:	2300      	movs	r3, #0
 8009b84:	4604      	mov	r4, r0
 8009b86:	460d      	mov	r5, r1
 8009b88:	f7f6 ff18 	bl	80009bc <__aeabi_dcmpeq>
 8009b8c:	2800      	cmp	r0, #0
 8009b8e:	f43f aebc 	beq.w	800990a <_dtoa_r+0x472>
 8009b92:	e6f1      	b.n	8009978 <_dtoa_r+0x4e0>
 8009b94:	0800c738 	.word	0x0800c738
 8009b98:	3fe00000 	.word	0x3fe00000
 8009b9c:	3ff00000 	.word	0x3ff00000
 8009ba0:	40240000 	.word	0x40240000
 8009ba4:	40140000 	.word	0x40140000
 8009ba8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009baa:	2a00      	cmp	r2, #0
 8009bac:	f000 80db 	beq.w	8009d66 <_dtoa_r+0x8ce>
 8009bb0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009bb2:	2a01      	cmp	r2, #1
 8009bb4:	f300 80bf 	bgt.w	8009d36 <_dtoa_r+0x89e>
 8009bb8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009bba:	2a00      	cmp	r2, #0
 8009bbc:	f000 80b7 	beq.w	8009d2e <_dtoa_r+0x896>
 8009bc0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009bc4:	4646      	mov	r6, r8
 8009bc6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009bc8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009bca:	2101      	movs	r1, #1
 8009bcc:	441a      	add	r2, r3
 8009bce:	4658      	mov	r0, fp
 8009bd0:	4498      	add	r8, r3
 8009bd2:	9209      	str	r2, [sp, #36]	@ 0x24
 8009bd4:	f000 ffb0 	bl	800ab38 <__i2b>
 8009bd8:	4605      	mov	r5, r0
 8009bda:	b15e      	cbz	r6, 8009bf4 <_dtoa_r+0x75c>
 8009bdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	dd08      	ble.n	8009bf4 <_dtoa_r+0x75c>
 8009be2:	42b3      	cmp	r3, r6
 8009be4:	bfa8      	it	ge
 8009be6:	4633      	movge	r3, r6
 8009be8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009bea:	eba8 0803 	sub.w	r8, r8, r3
 8009bee:	1af6      	subs	r6, r6, r3
 8009bf0:	1ad3      	subs	r3, r2, r3
 8009bf2:	9309      	str	r3, [sp, #36]	@ 0x24
 8009bf4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009bf6:	b1f3      	cbz	r3, 8009c36 <_dtoa_r+0x79e>
 8009bf8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	f000 80b7 	beq.w	8009d6e <_dtoa_r+0x8d6>
 8009c00:	b18c      	cbz	r4, 8009c26 <_dtoa_r+0x78e>
 8009c02:	4629      	mov	r1, r5
 8009c04:	4622      	mov	r2, r4
 8009c06:	4658      	mov	r0, fp
 8009c08:	f001 f854 	bl	800acb4 <__pow5mult>
 8009c0c:	464a      	mov	r2, r9
 8009c0e:	4601      	mov	r1, r0
 8009c10:	4605      	mov	r5, r0
 8009c12:	4658      	mov	r0, fp
 8009c14:	f000 ffa6 	bl	800ab64 <__multiply>
 8009c18:	4649      	mov	r1, r9
 8009c1a:	9004      	str	r0, [sp, #16]
 8009c1c:	4658      	mov	r0, fp
 8009c1e:	f000 fe8d 	bl	800a93c <_Bfree>
 8009c22:	9b04      	ldr	r3, [sp, #16]
 8009c24:	4699      	mov	r9, r3
 8009c26:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c28:	1b1a      	subs	r2, r3, r4
 8009c2a:	d004      	beq.n	8009c36 <_dtoa_r+0x79e>
 8009c2c:	4649      	mov	r1, r9
 8009c2e:	4658      	mov	r0, fp
 8009c30:	f001 f840 	bl	800acb4 <__pow5mult>
 8009c34:	4681      	mov	r9, r0
 8009c36:	2101      	movs	r1, #1
 8009c38:	4658      	mov	r0, fp
 8009c3a:	f000 ff7d 	bl	800ab38 <__i2b>
 8009c3e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c40:	4604      	mov	r4, r0
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	f000 81c9 	beq.w	8009fda <_dtoa_r+0xb42>
 8009c48:	461a      	mov	r2, r3
 8009c4a:	4601      	mov	r1, r0
 8009c4c:	4658      	mov	r0, fp
 8009c4e:	f001 f831 	bl	800acb4 <__pow5mult>
 8009c52:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009c54:	4604      	mov	r4, r0
 8009c56:	2b01      	cmp	r3, #1
 8009c58:	f300 808f 	bgt.w	8009d7a <_dtoa_r+0x8e2>
 8009c5c:	9b02      	ldr	r3, [sp, #8]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	f040 8087 	bne.w	8009d72 <_dtoa_r+0x8da>
 8009c64:	9b03      	ldr	r3, [sp, #12]
 8009c66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	f040 8083 	bne.w	8009d76 <_dtoa_r+0x8de>
 8009c70:	9b03      	ldr	r3, [sp, #12]
 8009c72:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009c76:	0d1b      	lsrs	r3, r3, #20
 8009c78:	051b      	lsls	r3, r3, #20
 8009c7a:	b12b      	cbz	r3, 8009c88 <_dtoa_r+0x7f0>
 8009c7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c7e:	f108 0801 	add.w	r8, r8, #1
 8009c82:	3301      	adds	r3, #1
 8009c84:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c86:	2301      	movs	r3, #1
 8009c88:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	f000 81aa 	beq.w	8009fe6 <_dtoa_r+0xb4e>
 8009c92:	6923      	ldr	r3, [r4, #16]
 8009c94:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009c98:	6918      	ldr	r0, [r3, #16]
 8009c9a:	f000 ff01 	bl	800aaa0 <__hi0bits>
 8009c9e:	f1c0 0020 	rsb	r0, r0, #32
 8009ca2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ca4:	4418      	add	r0, r3
 8009ca6:	f010 001f 	ands.w	r0, r0, #31
 8009caa:	d071      	beq.n	8009d90 <_dtoa_r+0x8f8>
 8009cac:	f1c0 0320 	rsb	r3, r0, #32
 8009cb0:	2b04      	cmp	r3, #4
 8009cb2:	dd65      	ble.n	8009d80 <_dtoa_r+0x8e8>
 8009cb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cb6:	f1c0 001c 	rsb	r0, r0, #28
 8009cba:	4403      	add	r3, r0
 8009cbc:	4480      	add	r8, r0
 8009cbe:	4406      	add	r6, r0
 8009cc0:	9309      	str	r3, [sp, #36]	@ 0x24
 8009cc2:	f1b8 0f00 	cmp.w	r8, #0
 8009cc6:	dd05      	ble.n	8009cd4 <_dtoa_r+0x83c>
 8009cc8:	4649      	mov	r1, r9
 8009cca:	4642      	mov	r2, r8
 8009ccc:	4658      	mov	r0, fp
 8009cce:	f001 f84b 	bl	800ad68 <__lshift>
 8009cd2:	4681      	mov	r9, r0
 8009cd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	dd05      	ble.n	8009ce6 <_dtoa_r+0x84e>
 8009cda:	4621      	mov	r1, r4
 8009cdc:	461a      	mov	r2, r3
 8009cde:	4658      	mov	r0, fp
 8009ce0:	f001 f842 	bl	800ad68 <__lshift>
 8009ce4:	4604      	mov	r4, r0
 8009ce6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d053      	beq.n	8009d94 <_dtoa_r+0x8fc>
 8009cec:	4621      	mov	r1, r4
 8009cee:	4648      	mov	r0, r9
 8009cf0:	f001 f8a6 	bl	800ae40 <__mcmp>
 8009cf4:	2800      	cmp	r0, #0
 8009cf6:	da4d      	bge.n	8009d94 <_dtoa_r+0x8fc>
 8009cf8:	1e7b      	subs	r3, r7, #1
 8009cfa:	4649      	mov	r1, r9
 8009cfc:	9304      	str	r3, [sp, #16]
 8009cfe:	220a      	movs	r2, #10
 8009d00:	2300      	movs	r3, #0
 8009d02:	4658      	mov	r0, fp
 8009d04:	f000 fe3c 	bl	800a980 <__multadd>
 8009d08:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d0a:	4681      	mov	r9, r0
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	f000 816c 	beq.w	8009fea <_dtoa_r+0xb52>
 8009d12:	2300      	movs	r3, #0
 8009d14:	4629      	mov	r1, r5
 8009d16:	220a      	movs	r2, #10
 8009d18:	4658      	mov	r0, fp
 8009d1a:	f000 fe31 	bl	800a980 <__multadd>
 8009d1e:	9b08      	ldr	r3, [sp, #32]
 8009d20:	4605      	mov	r5, r0
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	dc61      	bgt.n	8009dea <_dtoa_r+0x952>
 8009d26:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009d28:	2b02      	cmp	r3, #2
 8009d2a:	dc3b      	bgt.n	8009da4 <_dtoa_r+0x90c>
 8009d2c:	e05d      	b.n	8009dea <_dtoa_r+0x952>
 8009d2e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009d30:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009d34:	e746      	b.n	8009bc4 <_dtoa_r+0x72c>
 8009d36:	9b07      	ldr	r3, [sp, #28]
 8009d38:	1e5c      	subs	r4, r3, #1
 8009d3a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d3c:	42a3      	cmp	r3, r4
 8009d3e:	bfbf      	itttt	lt
 8009d40:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009d42:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8009d44:	1ae3      	sublt	r3, r4, r3
 8009d46:	18d2      	addlt	r2, r2, r3
 8009d48:	bfa8      	it	ge
 8009d4a:	1b1c      	subge	r4, r3, r4
 8009d4c:	9b07      	ldr	r3, [sp, #28]
 8009d4e:	bfbe      	ittt	lt
 8009d50:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009d52:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8009d54:	2400      	movlt	r4, #0
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	bfb5      	itete	lt
 8009d5a:	eba8 0603 	sublt.w	r6, r8, r3
 8009d5e:	4646      	movge	r6, r8
 8009d60:	2300      	movlt	r3, #0
 8009d62:	9b07      	ldrge	r3, [sp, #28]
 8009d64:	e730      	b.n	8009bc8 <_dtoa_r+0x730>
 8009d66:	4646      	mov	r6, r8
 8009d68:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009d6a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009d6c:	e735      	b.n	8009bda <_dtoa_r+0x742>
 8009d6e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009d70:	e75c      	b.n	8009c2c <_dtoa_r+0x794>
 8009d72:	2300      	movs	r3, #0
 8009d74:	e788      	b.n	8009c88 <_dtoa_r+0x7f0>
 8009d76:	9b02      	ldr	r3, [sp, #8]
 8009d78:	e786      	b.n	8009c88 <_dtoa_r+0x7f0>
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d7e:	e788      	b.n	8009c92 <_dtoa_r+0x7fa>
 8009d80:	d09f      	beq.n	8009cc2 <_dtoa_r+0x82a>
 8009d82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d84:	331c      	adds	r3, #28
 8009d86:	441a      	add	r2, r3
 8009d88:	4498      	add	r8, r3
 8009d8a:	441e      	add	r6, r3
 8009d8c:	9209      	str	r2, [sp, #36]	@ 0x24
 8009d8e:	e798      	b.n	8009cc2 <_dtoa_r+0x82a>
 8009d90:	4603      	mov	r3, r0
 8009d92:	e7f6      	b.n	8009d82 <_dtoa_r+0x8ea>
 8009d94:	9b07      	ldr	r3, [sp, #28]
 8009d96:	9704      	str	r7, [sp, #16]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	dc20      	bgt.n	8009dde <_dtoa_r+0x946>
 8009d9c:	9308      	str	r3, [sp, #32]
 8009d9e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009da0:	2b02      	cmp	r3, #2
 8009da2:	dd1e      	ble.n	8009de2 <_dtoa_r+0x94a>
 8009da4:	9b08      	ldr	r3, [sp, #32]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	f47f aebc 	bne.w	8009b24 <_dtoa_r+0x68c>
 8009dac:	4621      	mov	r1, r4
 8009dae:	2205      	movs	r2, #5
 8009db0:	4658      	mov	r0, fp
 8009db2:	f000 fde5 	bl	800a980 <__multadd>
 8009db6:	4601      	mov	r1, r0
 8009db8:	4604      	mov	r4, r0
 8009dba:	4648      	mov	r0, r9
 8009dbc:	f001 f840 	bl	800ae40 <__mcmp>
 8009dc0:	2800      	cmp	r0, #0
 8009dc2:	f77f aeaf 	ble.w	8009b24 <_dtoa_r+0x68c>
 8009dc6:	2331      	movs	r3, #49	@ 0x31
 8009dc8:	4656      	mov	r6, sl
 8009dca:	f806 3b01 	strb.w	r3, [r6], #1
 8009dce:	9b04      	ldr	r3, [sp, #16]
 8009dd0:	3301      	adds	r3, #1
 8009dd2:	9304      	str	r3, [sp, #16]
 8009dd4:	e6aa      	b.n	8009b2c <_dtoa_r+0x694>
 8009dd6:	9c07      	ldr	r4, [sp, #28]
 8009dd8:	9704      	str	r7, [sp, #16]
 8009dda:	4625      	mov	r5, r4
 8009ddc:	e7f3      	b.n	8009dc6 <_dtoa_r+0x92e>
 8009dde:	9b07      	ldr	r3, [sp, #28]
 8009de0:	9308      	str	r3, [sp, #32]
 8009de2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	f000 8104 	beq.w	8009ff2 <_dtoa_r+0xb5a>
 8009dea:	2e00      	cmp	r6, #0
 8009dec:	dd05      	ble.n	8009dfa <_dtoa_r+0x962>
 8009dee:	4629      	mov	r1, r5
 8009df0:	4632      	mov	r2, r6
 8009df2:	4658      	mov	r0, fp
 8009df4:	f000 ffb8 	bl	800ad68 <__lshift>
 8009df8:	4605      	mov	r5, r0
 8009dfa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d05a      	beq.n	8009eb6 <_dtoa_r+0xa1e>
 8009e00:	4658      	mov	r0, fp
 8009e02:	6869      	ldr	r1, [r5, #4]
 8009e04:	f000 fd5a 	bl	800a8bc <_Balloc>
 8009e08:	4606      	mov	r6, r0
 8009e0a:	b928      	cbnz	r0, 8009e18 <_dtoa_r+0x980>
 8009e0c:	4602      	mov	r2, r0
 8009e0e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009e12:	4b83      	ldr	r3, [pc, #524]	@ (800a020 <_dtoa_r+0xb88>)
 8009e14:	f7ff bb54 	b.w	80094c0 <_dtoa_r+0x28>
 8009e18:	692a      	ldr	r2, [r5, #16]
 8009e1a:	f105 010c 	add.w	r1, r5, #12
 8009e1e:	3202      	adds	r2, #2
 8009e20:	0092      	lsls	r2, r2, #2
 8009e22:	300c      	adds	r0, #12
 8009e24:	f7ff fa97 	bl	8009356 <memcpy>
 8009e28:	2201      	movs	r2, #1
 8009e2a:	4631      	mov	r1, r6
 8009e2c:	4658      	mov	r0, fp
 8009e2e:	f000 ff9b 	bl	800ad68 <__lshift>
 8009e32:	462f      	mov	r7, r5
 8009e34:	4605      	mov	r5, r0
 8009e36:	f10a 0301 	add.w	r3, sl, #1
 8009e3a:	9307      	str	r3, [sp, #28]
 8009e3c:	9b08      	ldr	r3, [sp, #32]
 8009e3e:	4453      	add	r3, sl
 8009e40:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009e42:	9b02      	ldr	r3, [sp, #8]
 8009e44:	f003 0301 	and.w	r3, r3, #1
 8009e48:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e4a:	9b07      	ldr	r3, [sp, #28]
 8009e4c:	4621      	mov	r1, r4
 8009e4e:	3b01      	subs	r3, #1
 8009e50:	4648      	mov	r0, r9
 8009e52:	9302      	str	r3, [sp, #8]
 8009e54:	f7ff fa98 	bl	8009388 <quorem>
 8009e58:	4639      	mov	r1, r7
 8009e5a:	9008      	str	r0, [sp, #32]
 8009e5c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009e60:	4648      	mov	r0, r9
 8009e62:	f000 ffed 	bl	800ae40 <__mcmp>
 8009e66:	462a      	mov	r2, r5
 8009e68:	9009      	str	r0, [sp, #36]	@ 0x24
 8009e6a:	4621      	mov	r1, r4
 8009e6c:	4658      	mov	r0, fp
 8009e6e:	f001 f803 	bl	800ae78 <__mdiff>
 8009e72:	68c2      	ldr	r2, [r0, #12]
 8009e74:	4606      	mov	r6, r0
 8009e76:	bb02      	cbnz	r2, 8009eba <_dtoa_r+0xa22>
 8009e78:	4601      	mov	r1, r0
 8009e7a:	4648      	mov	r0, r9
 8009e7c:	f000 ffe0 	bl	800ae40 <__mcmp>
 8009e80:	4602      	mov	r2, r0
 8009e82:	4631      	mov	r1, r6
 8009e84:	4658      	mov	r0, fp
 8009e86:	920c      	str	r2, [sp, #48]	@ 0x30
 8009e88:	f000 fd58 	bl	800a93c <_Bfree>
 8009e8c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009e8e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009e90:	9e07      	ldr	r6, [sp, #28]
 8009e92:	ea43 0102 	orr.w	r1, r3, r2
 8009e96:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e98:	4319      	orrs	r1, r3
 8009e9a:	d110      	bne.n	8009ebe <_dtoa_r+0xa26>
 8009e9c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009ea0:	d029      	beq.n	8009ef6 <_dtoa_r+0xa5e>
 8009ea2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	dd02      	ble.n	8009eae <_dtoa_r+0xa16>
 8009ea8:	9b08      	ldr	r3, [sp, #32]
 8009eaa:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009eae:	9b02      	ldr	r3, [sp, #8]
 8009eb0:	f883 8000 	strb.w	r8, [r3]
 8009eb4:	e63b      	b.n	8009b2e <_dtoa_r+0x696>
 8009eb6:	4628      	mov	r0, r5
 8009eb8:	e7bb      	b.n	8009e32 <_dtoa_r+0x99a>
 8009eba:	2201      	movs	r2, #1
 8009ebc:	e7e1      	b.n	8009e82 <_dtoa_r+0x9ea>
 8009ebe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	db04      	blt.n	8009ece <_dtoa_r+0xa36>
 8009ec4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8009ec6:	430b      	orrs	r3, r1
 8009ec8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009eca:	430b      	orrs	r3, r1
 8009ecc:	d120      	bne.n	8009f10 <_dtoa_r+0xa78>
 8009ece:	2a00      	cmp	r2, #0
 8009ed0:	dded      	ble.n	8009eae <_dtoa_r+0xa16>
 8009ed2:	4649      	mov	r1, r9
 8009ed4:	2201      	movs	r2, #1
 8009ed6:	4658      	mov	r0, fp
 8009ed8:	f000 ff46 	bl	800ad68 <__lshift>
 8009edc:	4621      	mov	r1, r4
 8009ede:	4681      	mov	r9, r0
 8009ee0:	f000 ffae 	bl	800ae40 <__mcmp>
 8009ee4:	2800      	cmp	r0, #0
 8009ee6:	dc03      	bgt.n	8009ef0 <_dtoa_r+0xa58>
 8009ee8:	d1e1      	bne.n	8009eae <_dtoa_r+0xa16>
 8009eea:	f018 0f01 	tst.w	r8, #1
 8009eee:	d0de      	beq.n	8009eae <_dtoa_r+0xa16>
 8009ef0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009ef4:	d1d8      	bne.n	8009ea8 <_dtoa_r+0xa10>
 8009ef6:	2339      	movs	r3, #57	@ 0x39
 8009ef8:	9a02      	ldr	r2, [sp, #8]
 8009efa:	7013      	strb	r3, [r2, #0]
 8009efc:	4633      	mov	r3, r6
 8009efe:	461e      	mov	r6, r3
 8009f00:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009f04:	3b01      	subs	r3, #1
 8009f06:	2a39      	cmp	r2, #57	@ 0x39
 8009f08:	d052      	beq.n	8009fb0 <_dtoa_r+0xb18>
 8009f0a:	3201      	adds	r2, #1
 8009f0c:	701a      	strb	r2, [r3, #0]
 8009f0e:	e60e      	b.n	8009b2e <_dtoa_r+0x696>
 8009f10:	2a00      	cmp	r2, #0
 8009f12:	dd07      	ble.n	8009f24 <_dtoa_r+0xa8c>
 8009f14:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009f18:	d0ed      	beq.n	8009ef6 <_dtoa_r+0xa5e>
 8009f1a:	9a02      	ldr	r2, [sp, #8]
 8009f1c:	f108 0301 	add.w	r3, r8, #1
 8009f20:	7013      	strb	r3, [r2, #0]
 8009f22:	e604      	b.n	8009b2e <_dtoa_r+0x696>
 8009f24:	9b07      	ldr	r3, [sp, #28]
 8009f26:	9a07      	ldr	r2, [sp, #28]
 8009f28:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009f2c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009f2e:	4293      	cmp	r3, r2
 8009f30:	d028      	beq.n	8009f84 <_dtoa_r+0xaec>
 8009f32:	4649      	mov	r1, r9
 8009f34:	2300      	movs	r3, #0
 8009f36:	220a      	movs	r2, #10
 8009f38:	4658      	mov	r0, fp
 8009f3a:	f000 fd21 	bl	800a980 <__multadd>
 8009f3e:	42af      	cmp	r7, r5
 8009f40:	4681      	mov	r9, r0
 8009f42:	f04f 0300 	mov.w	r3, #0
 8009f46:	f04f 020a 	mov.w	r2, #10
 8009f4a:	4639      	mov	r1, r7
 8009f4c:	4658      	mov	r0, fp
 8009f4e:	d107      	bne.n	8009f60 <_dtoa_r+0xac8>
 8009f50:	f000 fd16 	bl	800a980 <__multadd>
 8009f54:	4607      	mov	r7, r0
 8009f56:	4605      	mov	r5, r0
 8009f58:	9b07      	ldr	r3, [sp, #28]
 8009f5a:	3301      	adds	r3, #1
 8009f5c:	9307      	str	r3, [sp, #28]
 8009f5e:	e774      	b.n	8009e4a <_dtoa_r+0x9b2>
 8009f60:	f000 fd0e 	bl	800a980 <__multadd>
 8009f64:	4629      	mov	r1, r5
 8009f66:	4607      	mov	r7, r0
 8009f68:	2300      	movs	r3, #0
 8009f6a:	220a      	movs	r2, #10
 8009f6c:	4658      	mov	r0, fp
 8009f6e:	f000 fd07 	bl	800a980 <__multadd>
 8009f72:	4605      	mov	r5, r0
 8009f74:	e7f0      	b.n	8009f58 <_dtoa_r+0xac0>
 8009f76:	9b08      	ldr	r3, [sp, #32]
 8009f78:	2700      	movs	r7, #0
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	bfcc      	ite	gt
 8009f7e:	461e      	movgt	r6, r3
 8009f80:	2601      	movle	r6, #1
 8009f82:	4456      	add	r6, sl
 8009f84:	4649      	mov	r1, r9
 8009f86:	2201      	movs	r2, #1
 8009f88:	4658      	mov	r0, fp
 8009f8a:	f000 feed 	bl	800ad68 <__lshift>
 8009f8e:	4621      	mov	r1, r4
 8009f90:	4681      	mov	r9, r0
 8009f92:	f000 ff55 	bl	800ae40 <__mcmp>
 8009f96:	2800      	cmp	r0, #0
 8009f98:	dcb0      	bgt.n	8009efc <_dtoa_r+0xa64>
 8009f9a:	d102      	bne.n	8009fa2 <_dtoa_r+0xb0a>
 8009f9c:	f018 0f01 	tst.w	r8, #1
 8009fa0:	d1ac      	bne.n	8009efc <_dtoa_r+0xa64>
 8009fa2:	4633      	mov	r3, r6
 8009fa4:	461e      	mov	r6, r3
 8009fa6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009faa:	2a30      	cmp	r2, #48	@ 0x30
 8009fac:	d0fa      	beq.n	8009fa4 <_dtoa_r+0xb0c>
 8009fae:	e5be      	b.n	8009b2e <_dtoa_r+0x696>
 8009fb0:	459a      	cmp	sl, r3
 8009fb2:	d1a4      	bne.n	8009efe <_dtoa_r+0xa66>
 8009fb4:	9b04      	ldr	r3, [sp, #16]
 8009fb6:	3301      	adds	r3, #1
 8009fb8:	9304      	str	r3, [sp, #16]
 8009fba:	2331      	movs	r3, #49	@ 0x31
 8009fbc:	f88a 3000 	strb.w	r3, [sl]
 8009fc0:	e5b5      	b.n	8009b2e <_dtoa_r+0x696>
 8009fc2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009fc4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a024 <_dtoa_r+0xb8c>
 8009fc8:	b11b      	cbz	r3, 8009fd2 <_dtoa_r+0xb3a>
 8009fca:	f10a 0308 	add.w	r3, sl, #8
 8009fce:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009fd0:	6013      	str	r3, [r2, #0]
 8009fd2:	4650      	mov	r0, sl
 8009fd4:	b017      	add	sp, #92	@ 0x5c
 8009fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fda:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009fdc:	2b01      	cmp	r3, #1
 8009fde:	f77f ae3d 	ble.w	8009c5c <_dtoa_r+0x7c4>
 8009fe2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009fe4:	930a      	str	r3, [sp, #40]	@ 0x28
 8009fe6:	2001      	movs	r0, #1
 8009fe8:	e65b      	b.n	8009ca2 <_dtoa_r+0x80a>
 8009fea:	9b08      	ldr	r3, [sp, #32]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	f77f aed6 	ble.w	8009d9e <_dtoa_r+0x906>
 8009ff2:	4656      	mov	r6, sl
 8009ff4:	4621      	mov	r1, r4
 8009ff6:	4648      	mov	r0, r9
 8009ff8:	f7ff f9c6 	bl	8009388 <quorem>
 8009ffc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a000:	9b08      	ldr	r3, [sp, #32]
 800a002:	f806 8b01 	strb.w	r8, [r6], #1
 800a006:	eba6 020a 	sub.w	r2, r6, sl
 800a00a:	4293      	cmp	r3, r2
 800a00c:	ddb3      	ble.n	8009f76 <_dtoa_r+0xade>
 800a00e:	4649      	mov	r1, r9
 800a010:	2300      	movs	r3, #0
 800a012:	220a      	movs	r2, #10
 800a014:	4658      	mov	r0, fp
 800a016:	f000 fcb3 	bl	800a980 <__multadd>
 800a01a:	4681      	mov	r9, r0
 800a01c:	e7ea      	b.n	8009ff4 <_dtoa_r+0xb5c>
 800a01e:	bf00      	nop
 800a020:	0800c636 	.word	0x0800c636
 800a024:	0800c5ba 	.word	0x0800c5ba

0800a028 <_free_r>:
 800a028:	b538      	push	{r3, r4, r5, lr}
 800a02a:	4605      	mov	r5, r0
 800a02c:	2900      	cmp	r1, #0
 800a02e:	d040      	beq.n	800a0b2 <_free_r+0x8a>
 800a030:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a034:	1f0c      	subs	r4, r1, #4
 800a036:	2b00      	cmp	r3, #0
 800a038:	bfb8      	it	lt
 800a03a:	18e4      	addlt	r4, r4, r3
 800a03c:	f000 fc32 	bl	800a8a4 <__malloc_lock>
 800a040:	4a1c      	ldr	r2, [pc, #112]	@ (800a0b4 <_free_r+0x8c>)
 800a042:	6813      	ldr	r3, [r2, #0]
 800a044:	b933      	cbnz	r3, 800a054 <_free_r+0x2c>
 800a046:	6063      	str	r3, [r4, #4]
 800a048:	6014      	str	r4, [r2, #0]
 800a04a:	4628      	mov	r0, r5
 800a04c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a050:	f000 bc2e 	b.w	800a8b0 <__malloc_unlock>
 800a054:	42a3      	cmp	r3, r4
 800a056:	d908      	bls.n	800a06a <_free_r+0x42>
 800a058:	6820      	ldr	r0, [r4, #0]
 800a05a:	1821      	adds	r1, r4, r0
 800a05c:	428b      	cmp	r3, r1
 800a05e:	bf01      	itttt	eq
 800a060:	6819      	ldreq	r1, [r3, #0]
 800a062:	685b      	ldreq	r3, [r3, #4]
 800a064:	1809      	addeq	r1, r1, r0
 800a066:	6021      	streq	r1, [r4, #0]
 800a068:	e7ed      	b.n	800a046 <_free_r+0x1e>
 800a06a:	461a      	mov	r2, r3
 800a06c:	685b      	ldr	r3, [r3, #4]
 800a06e:	b10b      	cbz	r3, 800a074 <_free_r+0x4c>
 800a070:	42a3      	cmp	r3, r4
 800a072:	d9fa      	bls.n	800a06a <_free_r+0x42>
 800a074:	6811      	ldr	r1, [r2, #0]
 800a076:	1850      	adds	r0, r2, r1
 800a078:	42a0      	cmp	r0, r4
 800a07a:	d10b      	bne.n	800a094 <_free_r+0x6c>
 800a07c:	6820      	ldr	r0, [r4, #0]
 800a07e:	4401      	add	r1, r0
 800a080:	1850      	adds	r0, r2, r1
 800a082:	4283      	cmp	r3, r0
 800a084:	6011      	str	r1, [r2, #0]
 800a086:	d1e0      	bne.n	800a04a <_free_r+0x22>
 800a088:	6818      	ldr	r0, [r3, #0]
 800a08a:	685b      	ldr	r3, [r3, #4]
 800a08c:	4408      	add	r0, r1
 800a08e:	6010      	str	r0, [r2, #0]
 800a090:	6053      	str	r3, [r2, #4]
 800a092:	e7da      	b.n	800a04a <_free_r+0x22>
 800a094:	d902      	bls.n	800a09c <_free_r+0x74>
 800a096:	230c      	movs	r3, #12
 800a098:	602b      	str	r3, [r5, #0]
 800a09a:	e7d6      	b.n	800a04a <_free_r+0x22>
 800a09c:	6820      	ldr	r0, [r4, #0]
 800a09e:	1821      	adds	r1, r4, r0
 800a0a0:	428b      	cmp	r3, r1
 800a0a2:	bf01      	itttt	eq
 800a0a4:	6819      	ldreq	r1, [r3, #0]
 800a0a6:	685b      	ldreq	r3, [r3, #4]
 800a0a8:	1809      	addeq	r1, r1, r0
 800a0aa:	6021      	streq	r1, [r4, #0]
 800a0ac:	6063      	str	r3, [r4, #4]
 800a0ae:	6054      	str	r4, [r2, #4]
 800a0b0:	e7cb      	b.n	800a04a <_free_r+0x22>
 800a0b2:	bd38      	pop	{r3, r4, r5, pc}
 800a0b4:	20000aac 	.word	0x20000aac

0800a0b8 <rshift>:
 800a0b8:	6903      	ldr	r3, [r0, #16]
 800a0ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a0be:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a0c2:	f100 0414 	add.w	r4, r0, #20
 800a0c6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a0ca:	dd46      	ble.n	800a15a <rshift+0xa2>
 800a0cc:	f011 011f 	ands.w	r1, r1, #31
 800a0d0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a0d4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a0d8:	d10c      	bne.n	800a0f4 <rshift+0x3c>
 800a0da:	4629      	mov	r1, r5
 800a0dc:	f100 0710 	add.w	r7, r0, #16
 800a0e0:	42b1      	cmp	r1, r6
 800a0e2:	d335      	bcc.n	800a150 <rshift+0x98>
 800a0e4:	1a9b      	subs	r3, r3, r2
 800a0e6:	009b      	lsls	r3, r3, #2
 800a0e8:	1eea      	subs	r2, r5, #3
 800a0ea:	4296      	cmp	r6, r2
 800a0ec:	bf38      	it	cc
 800a0ee:	2300      	movcc	r3, #0
 800a0f0:	4423      	add	r3, r4
 800a0f2:	e015      	b.n	800a120 <rshift+0x68>
 800a0f4:	46a1      	mov	r9, r4
 800a0f6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a0fa:	f1c1 0820 	rsb	r8, r1, #32
 800a0fe:	40cf      	lsrs	r7, r1
 800a100:	f105 0e04 	add.w	lr, r5, #4
 800a104:	4576      	cmp	r6, lr
 800a106:	46f4      	mov	ip, lr
 800a108:	d816      	bhi.n	800a138 <rshift+0x80>
 800a10a:	1a9a      	subs	r2, r3, r2
 800a10c:	0092      	lsls	r2, r2, #2
 800a10e:	3a04      	subs	r2, #4
 800a110:	3501      	adds	r5, #1
 800a112:	42ae      	cmp	r6, r5
 800a114:	bf38      	it	cc
 800a116:	2200      	movcc	r2, #0
 800a118:	18a3      	adds	r3, r4, r2
 800a11a:	50a7      	str	r7, [r4, r2]
 800a11c:	b107      	cbz	r7, 800a120 <rshift+0x68>
 800a11e:	3304      	adds	r3, #4
 800a120:	42a3      	cmp	r3, r4
 800a122:	eba3 0204 	sub.w	r2, r3, r4
 800a126:	bf08      	it	eq
 800a128:	2300      	moveq	r3, #0
 800a12a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a12e:	6102      	str	r2, [r0, #16]
 800a130:	bf08      	it	eq
 800a132:	6143      	streq	r3, [r0, #20]
 800a134:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a138:	f8dc c000 	ldr.w	ip, [ip]
 800a13c:	fa0c fc08 	lsl.w	ip, ip, r8
 800a140:	ea4c 0707 	orr.w	r7, ip, r7
 800a144:	f849 7b04 	str.w	r7, [r9], #4
 800a148:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a14c:	40cf      	lsrs	r7, r1
 800a14e:	e7d9      	b.n	800a104 <rshift+0x4c>
 800a150:	f851 cb04 	ldr.w	ip, [r1], #4
 800a154:	f847 cf04 	str.w	ip, [r7, #4]!
 800a158:	e7c2      	b.n	800a0e0 <rshift+0x28>
 800a15a:	4623      	mov	r3, r4
 800a15c:	e7e0      	b.n	800a120 <rshift+0x68>

0800a15e <__hexdig_fun>:
 800a15e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a162:	2b09      	cmp	r3, #9
 800a164:	d802      	bhi.n	800a16c <__hexdig_fun+0xe>
 800a166:	3820      	subs	r0, #32
 800a168:	b2c0      	uxtb	r0, r0
 800a16a:	4770      	bx	lr
 800a16c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a170:	2b05      	cmp	r3, #5
 800a172:	d801      	bhi.n	800a178 <__hexdig_fun+0x1a>
 800a174:	3847      	subs	r0, #71	@ 0x47
 800a176:	e7f7      	b.n	800a168 <__hexdig_fun+0xa>
 800a178:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a17c:	2b05      	cmp	r3, #5
 800a17e:	d801      	bhi.n	800a184 <__hexdig_fun+0x26>
 800a180:	3827      	subs	r0, #39	@ 0x27
 800a182:	e7f1      	b.n	800a168 <__hexdig_fun+0xa>
 800a184:	2000      	movs	r0, #0
 800a186:	4770      	bx	lr

0800a188 <__gethex>:
 800a188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a18c:	468a      	mov	sl, r1
 800a18e:	4690      	mov	r8, r2
 800a190:	b085      	sub	sp, #20
 800a192:	9302      	str	r3, [sp, #8]
 800a194:	680b      	ldr	r3, [r1, #0]
 800a196:	9001      	str	r0, [sp, #4]
 800a198:	1c9c      	adds	r4, r3, #2
 800a19a:	46a1      	mov	r9, r4
 800a19c:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a1a0:	2830      	cmp	r0, #48	@ 0x30
 800a1a2:	d0fa      	beq.n	800a19a <__gethex+0x12>
 800a1a4:	eba9 0303 	sub.w	r3, r9, r3
 800a1a8:	f1a3 0b02 	sub.w	fp, r3, #2
 800a1ac:	f7ff ffd7 	bl	800a15e <__hexdig_fun>
 800a1b0:	4605      	mov	r5, r0
 800a1b2:	2800      	cmp	r0, #0
 800a1b4:	d168      	bne.n	800a288 <__gethex+0x100>
 800a1b6:	2201      	movs	r2, #1
 800a1b8:	4648      	mov	r0, r9
 800a1ba:	499f      	ldr	r1, [pc, #636]	@ (800a438 <__gethex+0x2b0>)
 800a1bc:	f7ff f800 	bl	80091c0 <strncmp>
 800a1c0:	4607      	mov	r7, r0
 800a1c2:	2800      	cmp	r0, #0
 800a1c4:	d167      	bne.n	800a296 <__gethex+0x10e>
 800a1c6:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a1ca:	4626      	mov	r6, r4
 800a1cc:	f7ff ffc7 	bl	800a15e <__hexdig_fun>
 800a1d0:	2800      	cmp	r0, #0
 800a1d2:	d062      	beq.n	800a29a <__gethex+0x112>
 800a1d4:	4623      	mov	r3, r4
 800a1d6:	7818      	ldrb	r0, [r3, #0]
 800a1d8:	4699      	mov	r9, r3
 800a1da:	2830      	cmp	r0, #48	@ 0x30
 800a1dc:	f103 0301 	add.w	r3, r3, #1
 800a1e0:	d0f9      	beq.n	800a1d6 <__gethex+0x4e>
 800a1e2:	f7ff ffbc 	bl	800a15e <__hexdig_fun>
 800a1e6:	fab0 f580 	clz	r5, r0
 800a1ea:	f04f 0b01 	mov.w	fp, #1
 800a1ee:	096d      	lsrs	r5, r5, #5
 800a1f0:	464a      	mov	r2, r9
 800a1f2:	4616      	mov	r6, r2
 800a1f4:	7830      	ldrb	r0, [r6, #0]
 800a1f6:	3201      	adds	r2, #1
 800a1f8:	f7ff ffb1 	bl	800a15e <__hexdig_fun>
 800a1fc:	2800      	cmp	r0, #0
 800a1fe:	d1f8      	bne.n	800a1f2 <__gethex+0x6a>
 800a200:	2201      	movs	r2, #1
 800a202:	4630      	mov	r0, r6
 800a204:	498c      	ldr	r1, [pc, #560]	@ (800a438 <__gethex+0x2b0>)
 800a206:	f7fe ffdb 	bl	80091c0 <strncmp>
 800a20a:	2800      	cmp	r0, #0
 800a20c:	d13f      	bne.n	800a28e <__gethex+0x106>
 800a20e:	b944      	cbnz	r4, 800a222 <__gethex+0x9a>
 800a210:	1c74      	adds	r4, r6, #1
 800a212:	4622      	mov	r2, r4
 800a214:	4616      	mov	r6, r2
 800a216:	7830      	ldrb	r0, [r6, #0]
 800a218:	3201      	adds	r2, #1
 800a21a:	f7ff ffa0 	bl	800a15e <__hexdig_fun>
 800a21e:	2800      	cmp	r0, #0
 800a220:	d1f8      	bne.n	800a214 <__gethex+0x8c>
 800a222:	1ba4      	subs	r4, r4, r6
 800a224:	00a7      	lsls	r7, r4, #2
 800a226:	7833      	ldrb	r3, [r6, #0]
 800a228:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a22c:	2b50      	cmp	r3, #80	@ 0x50
 800a22e:	d13e      	bne.n	800a2ae <__gethex+0x126>
 800a230:	7873      	ldrb	r3, [r6, #1]
 800a232:	2b2b      	cmp	r3, #43	@ 0x2b
 800a234:	d033      	beq.n	800a29e <__gethex+0x116>
 800a236:	2b2d      	cmp	r3, #45	@ 0x2d
 800a238:	d034      	beq.n	800a2a4 <__gethex+0x11c>
 800a23a:	2400      	movs	r4, #0
 800a23c:	1c71      	adds	r1, r6, #1
 800a23e:	7808      	ldrb	r0, [r1, #0]
 800a240:	f7ff ff8d 	bl	800a15e <__hexdig_fun>
 800a244:	1e43      	subs	r3, r0, #1
 800a246:	b2db      	uxtb	r3, r3
 800a248:	2b18      	cmp	r3, #24
 800a24a:	d830      	bhi.n	800a2ae <__gethex+0x126>
 800a24c:	f1a0 0210 	sub.w	r2, r0, #16
 800a250:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a254:	f7ff ff83 	bl	800a15e <__hexdig_fun>
 800a258:	f100 3cff 	add.w	ip, r0, #4294967295
 800a25c:	fa5f fc8c 	uxtb.w	ip, ip
 800a260:	f1bc 0f18 	cmp.w	ip, #24
 800a264:	f04f 030a 	mov.w	r3, #10
 800a268:	d91e      	bls.n	800a2a8 <__gethex+0x120>
 800a26a:	b104      	cbz	r4, 800a26e <__gethex+0xe6>
 800a26c:	4252      	negs	r2, r2
 800a26e:	4417      	add	r7, r2
 800a270:	f8ca 1000 	str.w	r1, [sl]
 800a274:	b1ed      	cbz	r5, 800a2b2 <__gethex+0x12a>
 800a276:	f1bb 0f00 	cmp.w	fp, #0
 800a27a:	bf0c      	ite	eq
 800a27c:	2506      	moveq	r5, #6
 800a27e:	2500      	movne	r5, #0
 800a280:	4628      	mov	r0, r5
 800a282:	b005      	add	sp, #20
 800a284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a288:	2500      	movs	r5, #0
 800a28a:	462c      	mov	r4, r5
 800a28c:	e7b0      	b.n	800a1f0 <__gethex+0x68>
 800a28e:	2c00      	cmp	r4, #0
 800a290:	d1c7      	bne.n	800a222 <__gethex+0x9a>
 800a292:	4627      	mov	r7, r4
 800a294:	e7c7      	b.n	800a226 <__gethex+0x9e>
 800a296:	464e      	mov	r6, r9
 800a298:	462f      	mov	r7, r5
 800a29a:	2501      	movs	r5, #1
 800a29c:	e7c3      	b.n	800a226 <__gethex+0x9e>
 800a29e:	2400      	movs	r4, #0
 800a2a0:	1cb1      	adds	r1, r6, #2
 800a2a2:	e7cc      	b.n	800a23e <__gethex+0xb6>
 800a2a4:	2401      	movs	r4, #1
 800a2a6:	e7fb      	b.n	800a2a0 <__gethex+0x118>
 800a2a8:	fb03 0002 	mla	r0, r3, r2, r0
 800a2ac:	e7ce      	b.n	800a24c <__gethex+0xc4>
 800a2ae:	4631      	mov	r1, r6
 800a2b0:	e7de      	b.n	800a270 <__gethex+0xe8>
 800a2b2:	4629      	mov	r1, r5
 800a2b4:	eba6 0309 	sub.w	r3, r6, r9
 800a2b8:	3b01      	subs	r3, #1
 800a2ba:	2b07      	cmp	r3, #7
 800a2bc:	dc0a      	bgt.n	800a2d4 <__gethex+0x14c>
 800a2be:	9801      	ldr	r0, [sp, #4]
 800a2c0:	f000 fafc 	bl	800a8bc <_Balloc>
 800a2c4:	4604      	mov	r4, r0
 800a2c6:	b940      	cbnz	r0, 800a2da <__gethex+0x152>
 800a2c8:	4602      	mov	r2, r0
 800a2ca:	21e4      	movs	r1, #228	@ 0xe4
 800a2cc:	4b5b      	ldr	r3, [pc, #364]	@ (800a43c <__gethex+0x2b4>)
 800a2ce:	485c      	ldr	r0, [pc, #368]	@ (800a440 <__gethex+0x2b8>)
 800a2d0:	f001 fa4c 	bl	800b76c <__assert_func>
 800a2d4:	3101      	adds	r1, #1
 800a2d6:	105b      	asrs	r3, r3, #1
 800a2d8:	e7ef      	b.n	800a2ba <__gethex+0x132>
 800a2da:	2300      	movs	r3, #0
 800a2dc:	f100 0a14 	add.w	sl, r0, #20
 800a2e0:	4655      	mov	r5, sl
 800a2e2:	469b      	mov	fp, r3
 800a2e4:	45b1      	cmp	r9, r6
 800a2e6:	d337      	bcc.n	800a358 <__gethex+0x1d0>
 800a2e8:	f845 bb04 	str.w	fp, [r5], #4
 800a2ec:	eba5 050a 	sub.w	r5, r5, sl
 800a2f0:	10ad      	asrs	r5, r5, #2
 800a2f2:	6125      	str	r5, [r4, #16]
 800a2f4:	4658      	mov	r0, fp
 800a2f6:	f000 fbd3 	bl	800aaa0 <__hi0bits>
 800a2fa:	016d      	lsls	r5, r5, #5
 800a2fc:	f8d8 6000 	ldr.w	r6, [r8]
 800a300:	1a2d      	subs	r5, r5, r0
 800a302:	42b5      	cmp	r5, r6
 800a304:	dd54      	ble.n	800a3b0 <__gethex+0x228>
 800a306:	1bad      	subs	r5, r5, r6
 800a308:	4629      	mov	r1, r5
 800a30a:	4620      	mov	r0, r4
 800a30c:	f000 ff5b 	bl	800b1c6 <__any_on>
 800a310:	4681      	mov	r9, r0
 800a312:	b178      	cbz	r0, 800a334 <__gethex+0x1ac>
 800a314:	f04f 0901 	mov.w	r9, #1
 800a318:	1e6b      	subs	r3, r5, #1
 800a31a:	1159      	asrs	r1, r3, #5
 800a31c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a320:	f003 021f 	and.w	r2, r3, #31
 800a324:	fa09 f202 	lsl.w	r2, r9, r2
 800a328:	420a      	tst	r2, r1
 800a32a:	d003      	beq.n	800a334 <__gethex+0x1ac>
 800a32c:	454b      	cmp	r3, r9
 800a32e:	dc36      	bgt.n	800a39e <__gethex+0x216>
 800a330:	f04f 0902 	mov.w	r9, #2
 800a334:	4629      	mov	r1, r5
 800a336:	4620      	mov	r0, r4
 800a338:	f7ff febe 	bl	800a0b8 <rshift>
 800a33c:	442f      	add	r7, r5
 800a33e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a342:	42bb      	cmp	r3, r7
 800a344:	da42      	bge.n	800a3cc <__gethex+0x244>
 800a346:	4621      	mov	r1, r4
 800a348:	9801      	ldr	r0, [sp, #4]
 800a34a:	f000 faf7 	bl	800a93c <_Bfree>
 800a34e:	2300      	movs	r3, #0
 800a350:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a352:	25a3      	movs	r5, #163	@ 0xa3
 800a354:	6013      	str	r3, [r2, #0]
 800a356:	e793      	b.n	800a280 <__gethex+0xf8>
 800a358:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a35c:	2a2e      	cmp	r2, #46	@ 0x2e
 800a35e:	d012      	beq.n	800a386 <__gethex+0x1fe>
 800a360:	2b20      	cmp	r3, #32
 800a362:	d104      	bne.n	800a36e <__gethex+0x1e6>
 800a364:	f845 bb04 	str.w	fp, [r5], #4
 800a368:	f04f 0b00 	mov.w	fp, #0
 800a36c:	465b      	mov	r3, fp
 800a36e:	7830      	ldrb	r0, [r6, #0]
 800a370:	9303      	str	r3, [sp, #12]
 800a372:	f7ff fef4 	bl	800a15e <__hexdig_fun>
 800a376:	9b03      	ldr	r3, [sp, #12]
 800a378:	f000 000f 	and.w	r0, r0, #15
 800a37c:	4098      	lsls	r0, r3
 800a37e:	ea4b 0b00 	orr.w	fp, fp, r0
 800a382:	3304      	adds	r3, #4
 800a384:	e7ae      	b.n	800a2e4 <__gethex+0x15c>
 800a386:	45b1      	cmp	r9, r6
 800a388:	d8ea      	bhi.n	800a360 <__gethex+0x1d8>
 800a38a:	2201      	movs	r2, #1
 800a38c:	4630      	mov	r0, r6
 800a38e:	492a      	ldr	r1, [pc, #168]	@ (800a438 <__gethex+0x2b0>)
 800a390:	9303      	str	r3, [sp, #12]
 800a392:	f7fe ff15 	bl	80091c0 <strncmp>
 800a396:	9b03      	ldr	r3, [sp, #12]
 800a398:	2800      	cmp	r0, #0
 800a39a:	d1e1      	bne.n	800a360 <__gethex+0x1d8>
 800a39c:	e7a2      	b.n	800a2e4 <__gethex+0x15c>
 800a39e:	4620      	mov	r0, r4
 800a3a0:	1ea9      	subs	r1, r5, #2
 800a3a2:	f000 ff10 	bl	800b1c6 <__any_on>
 800a3a6:	2800      	cmp	r0, #0
 800a3a8:	d0c2      	beq.n	800a330 <__gethex+0x1a8>
 800a3aa:	f04f 0903 	mov.w	r9, #3
 800a3ae:	e7c1      	b.n	800a334 <__gethex+0x1ac>
 800a3b0:	da09      	bge.n	800a3c6 <__gethex+0x23e>
 800a3b2:	1b75      	subs	r5, r6, r5
 800a3b4:	4621      	mov	r1, r4
 800a3b6:	462a      	mov	r2, r5
 800a3b8:	9801      	ldr	r0, [sp, #4]
 800a3ba:	f000 fcd5 	bl	800ad68 <__lshift>
 800a3be:	4604      	mov	r4, r0
 800a3c0:	1b7f      	subs	r7, r7, r5
 800a3c2:	f100 0a14 	add.w	sl, r0, #20
 800a3c6:	f04f 0900 	mov.w	r9, #0
 800a3ca:	e7b8      	b.n	800a33e <__gethex+0x1b6>
 800a3cc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a3d0:	42bd      	cmp	r5, r7
 800a3d2:	dd6f      	ble.n	800a4b4 <__gethex+0x32c>
 800a3d4:	1bed      	subs	r5, r5, r7
 800a3d6:	42ae      	cmp	r6, r5
 800a3d8:	dc34      	bgt.n	800a444 <__gethex+0x2bc>
 800a3da:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a3de:	2b02      	cmp	r3, #2
 800a3e0:	d022      	beq.n	800a428 <__gethex+0x2a0>
 800a3e2:	2b03      	cmp	r3, #3
 800a3e4:	d024      	beq.n	800a430 <__gethex+0x2a8>
 800a3e6:	2b01      	cmp	r3, #1
 800a3e8:	d115      	bne.n	800a416 <__gethex+0x28e>
 800a3ea:	42ae      	cmp	r6, r5
 800a3ec:	d113      	bne.n	800a416 <__gethex+0x28e>
 800a3ee:	2e01      	cmp	r6, #1
 800a3f0:	d10b      	bne.n	800a40a <__gethex+0x282>
 800a3f2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a3f6:	9a02      	ldr	r2, [sp, #8]
 800a3f8:	2562      	movs	r5, #98	@ 0x62
 800a3fa:	6013      	str	r3, [r2, #0]
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	6123      	str	r3, [r4, #16]
 800a400:	f8ca 3000 	str.w	r3, [sl]
 800a404:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a406:	601c      	str	r4, [r3, #0]
 800a408:	e73a      	b.n	800a280 <__gethex+0xf8>
 800a40a:	4620      	mov	r0, r4
 800a40c:	1e71      	subs	r1, r6, #1
 800a40e:	f000 feda 	bl	800b1c6 <__any_on>
 800a412:	2800      	cmp	r0, #0
 800a414:	d1ed      	bne.n	800a3f2 <__gethex+0x26a>
 800a416:	4621      	mov	r1, r4
 800a418:	9801      	ldr	r0, [sp, #4]
 800a41a:	f000 fa8f 	bl	800a93c <_Bfree>
 800a41e:	2300      	movs	r3, #0
 800a420:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a422:	2550      	movs	r5, #80	@ 0x50
 800a424:	6013      	str	r3, [r2, #0]
 800a426:	e72b      	b.n	800a280 <__gethex+0xf8>
 800a428:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d1f3      	bne.n	800a416 <__gethex+0x28e>
 800a42e:	e7e0      	b.n	800a3f2 <__gethex+0x26a>
 800a430:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a432:	2b00      	cmp	r3, #0
 800a434:	d1dd      	bne.n	800a3f2 <__gethex+0x26a>
 800a436:	e7ee      	b.n	800a416 <__gethex+0x28e>
 800a438:	0800c422 	.word	0x0800c422
 800a43c:	0800c636 	.word	0x0800c636
 800a440:	0800c647 	.word	0x0800c647
 800a444:	1e6f      	subs	r7, r5, #1
 800a446:	f1b9 0f00 	cmp.w	r9, #0
 800a44a:	d130      	bne.n	800a4ae <__gethex+0x326>
 800a44c:	b127      	cbz	r7, 800a458 <__gethex+0x2d0>
 800a44e:	4639      	mov	r1, r7
 800a450:	4620      	mov	r0, r4
 800a452:	f000 feb8 	bl	800b1c6 <__any_on>
 800a456:	4681      	mov	r9, r0
 800a458:	2301      	movs	r3, #1
 800a45a:	4629      	mov	r1, r5
 800a45c:	1b76      	subs	r6, r6, r5
 800a45e:	2502      	movs	r5, #2
 800a460:	117a      	asrs	r2, r7, #5
 800a462:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a466:	f007 071f 	and.w	r7, r7, #31
 800a46a:	40bb      	lsls	r3, r7
 800a46c:	4213      	tst	r3, r2
 800a46e:	4620      	mov	r0, r4
 800a470:	bf18      	it	ne
 800a472:	f049 0902 	orrne.w	r9, r9, #2
 800a476:	f7ff fe1f 	bl	800a0b8 <rshift>
 800a47a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a47e:	f1b9 0f00 	cmp.w	r9, #0
 800a482:	d047      	beq.n	800a514 <__gethex+0x38c>
 800a484:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a488:	2b02      	cmp	r3, #2
 800a48a:	d015      	beq.n	800a4b8 <__gethex+0x330>
 800a48c:	2b03      	cmp	r3, #3
 800a48e:	d017      	beq.n	800a4c0 <__gethex+0x338>
 800a490:	2b01      	cmp	r3, #1
 800a492:	d109      	bne.n	800a4a8 <__gethex+0x320>
 800a494:	f019 0f02 	tst.w	r9, #2
 800a498:	d006      	beq.n	800a4a8 <__gethex+0x320>
 800a49a:	f8da 3000 	ldr.w	r3, [sl]
 800a49e:	ea49 0903 	orr.w	r9, r9, r3
 800a4a2:	f019 0f01 	tst.w	r9, #1
 800a4a6:	d10e      	bne.n	800a4c6 <__gethex+0x33e>
 800a4a8:	f045 0510 	orr.w	r5, r5, #16
 800a4ac:	e032      	b.n	800a514 <__gethex+0x38c>
 800a4ae:	f04f 0901 	mov.w	r9, #1
 800a4b2:	e7d1      	b.n	800a458 <__gethex+0x2d0>
 800a4b4:	2501      	movs	r5, #1
 800a4b6:	e7e2      	b.n	800a47e <__gethex+0x2f6>
 800a4b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a4ba:	f1c3 0301 	rsb	r3, r3, #1
 800a4be:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a4c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d0f0      	beq.n	800a4a8 <__gethex+0x320>
 800a4c6:	f04f 0c00 	mov.w	ip, #0
 800a4ca:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a4ce:	f104 0314 	add.w	r3, r4, #20
 800a4d2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a4d6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4e0:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a4e4:	d01b      	beq.n	800a51e <__gethex+0x396>
 800a4e6:	3201      	adds	r2, #1
 800a4e8:	6002      	str	r2, [r0, #0]
 800a4ea:	2d02      	cmp	r5, #2
 800a4ec:	f104 0314 	add.w	r3, r4, #20
 800a4f0:	d13c      	bne.n	800a56c <__gethex+0x3e4>
 800a4f2:	f8d8 2000 	ldr.w	r2, [r8]
 800a4f6:	3a01      	subs	r2, #1
 800a4f8:	42b2      	cmp	r2, r6
 800a4fa:	d109      	bne.n	800a510 <__gethex+0x388>
 800a4fc:	2201      	movs	r2, #1
 800a4fe:	1171      	asrs	r1, r6, #5
 800a500:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a504:	f006 061f 	and.w	r6, r6, #31
 800a508:	fa02 f606 	lsl.w	r6, r2, r6
 800a50c:	421e      	tst	r6, r3
 800a50e:	d13a      	bne.n	800a586 <__gethex+0x3fe>
 800a510:	f045 0520 	orr.w	r5, r5, #32
 800a514:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a516:	601c      	str	r4, [r3, #0]
 800a518:	9b02      	ldr	r3, [sp, #8]
 800a51a:	601f      	str	r7, [r3, #0]
 800a51c:	e6b0      	b.n	800a280 <__gethex+0xf8>
 800a51e:	4299      	cmp	r1, r3
 800a520:	f843 cc04 	str.w	ip, [r3, #-4]
 800a524:	d8d9      	bhi.n	800a4da <__gethex+0x352>
 800a526:	68a3      	ldr	r3, [r4, #8]
 800a528:	459b      	cmp	fp, r3
 800a52a:	db17      	blt.n	800a55c <__gethex+0x3d4>
 800a52c:	6861      	ldr	r1, [r4, #4]
 800a52e:	9801      	ldr	r0, [sp, #4]
 800a530:	3101      	adds	r1, #1
 800a532:	f000 f9c3 	bl	800a8bc <_Balloc>
 800a536:	4681      	mov	r9, r0
 800a538:	b918      	cbnz	r0, 800a542 <__gethex+0x3ba>
 800a53a:	4602      	mov	r2, r0
 800a53c:	2184      	movs	r1, #132	@ 0x84
 800a53e:	4b19      	ldr	r3, [pc, #100]	@ (800a5a4 <__gethex+0x41c>)
 800a540:	e6c5      	b.n	800a2ce <__gethex+0x146>
 800a542:	6922      	ldr	r2, [r4, #16]
 800a544:	f104 010c 	add.w	r1, r4, #12
 800a548:	3202      	adds	r2, #2
 800a54a:	0092      	lsls	r2, r2, #2
 800a54c:	300c      	adds	r0, #12
 800a54e:	f7fe ff02 	bl	8009356 <memcpy>
 800a552:	4621      	mov	r1, r4
 800a554:	9801      	ldr	r0, [sp, #4]
 800a556:	f000 f9f1 	bl	800a93c <_Bfree>
 800a55a:	464c      	mov	r4, r9
 800a55c:	6923      	ldr	r3, [r4, #16]
 800a55e:	1c5a      	adds	r2, r3, #1
 800a560:	6122      	str	r2, [r4, #16]
 800a562:	2201      	movs	r2, #1
 800a564:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a568:	615a      	str	r2, [r3, #20]
 800a56a:	e7be      	b.n	800a4ea <__gethex+0x362>
 800a56c:	6922      	ldr	r2, [r4, #16]
 800a56e:	455a      	cmp	r2, fp
 800a570:	dd0b      	ble.n	800a58a <__gethex+0x402>
 800a572:	2101      	movs	r1, #1
 800a574:	4620      	mov	r0, r4
 800a576:	f7ff fd9f 	bl	800a0b8 <rshift>
 800a57a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a57e:	3701      	adds	r7, #1
 800a580:	42bb      	cmp	r3, r7
 800a582:	f6ff aee0 	blt.w	800a346 <__gethex+0x1be>
 800a586:	2501      	movs	r5, #1
 800a588:	e7c2      	b.n	800a510 <__gethex+0x388>
 800a58a:	f016 061f 	ands.w	r6, r6, #31
 800a58e:	d0fa      	beq.n	800a586 <__gethex+0x3fe>
 800a590:	4453      	add	r3, sl
 800a592:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a596:	f000 fa83 	bl	800aaa0 <__hi0bits>
 800a59a:	f1c6 0620 	rsb	r6, r6, #32
 800a59e:	42b0      	cmp	r0, r6
 800a5a0:	dbe7      	blt.n	800a572 <__gethex+0x3ea>
 800a5a2:	e7f0      	b.n	800a586 <__gethex+0x3fe>
 800a5a4:	0800c636 	.word	0x0800c636

0800a5a8 <L_shift>:
 800a5a8:	f1c2 0208 	rsb	r2, r2, #8
 800a5ac:	0092      	lsls	r2, r2, #2
 800a5ae:	b570      	push	{r4, r5, r6, lr}
 800a5b0:	f1c2 0620 	rsb	r6, r2, #32
 800a5b4:	6843      	ldr	r3, [r0, #4]
 800a5b6:	6804      	ldr	r4, [r0, #0]
 800a5b8:	fa03 f506 	lsl.w	r5, r3, r6
 800a5bc:	432c      	orrs	r4, r5
 800a5be:	40d3      	lsrs	r3, r2
 800a5c0:	6004      	str	r4, [r0, #0]
 800a5c2:	f840 3f04 	str.w	r3, [r0, #4]!
 800a5c6:	4288      	cmp	r0, r1
 800a5c8:	d3f4      	bcc.n	800a5b4 <L_shift+0xc>
 800a5ca:	bd70      	pop	{r4, r5, r6, pc}

0800a5cc <__match>:
 800a5cc:	b530      	push	{r4, r5, lr}
 800a5ce:	6803      	ldr	r3, [r0, #0]
 800a5d0:	3301      	adds	r3, #1
 800a5d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a5d6:	b914      	cbnz	r4, 800a5de <__match+0x12>
 800a5d8:	6003      	str	r3, [r0, #0]
 800a5da:	2001      	movs	r0, #1
 800a5dc:	bd30      	pop	{r4, r5, pc}
 800a5de:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a5e2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a5e6:	2d19      	cmp	r5, #25
 800a5e8:	bf98      	it	ls
 800a5ea:	3220      	addls	r2, #32
 800a5ec:	42a2      	cmp	r2, r4
 800a5ee:	d0f0      	beq.n	800a5d2 <__match+0x6>
 800a5f0:	2000      	movs	r0, #0
 800a5f2:	e7f3      	b.n	800a5dc <__match+0x10>

0800a5f4 <__hexnan>:
 800a5f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5f8:	2500      	movs	r5, #0
 800a5fa:	680b      	ldr	r3, [r1, #0]
 800a5fc:	4682      	mov	sl, r0
 800a5fe:	115e      	asrs	r6, r3, #5
 800a600:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a604:	f013 031f 	ands.w	r3, r3, #31
 800a608:	bf18      	it	ne
 800a60a:	3604      	addne	r6, #4
 800a60c:	1f37      	subs	r7, r6, #4
 800a60e:	4690      	mov	r8, r2
 800a610:	46b9      	mov	r9, r7
 800a612:	463c      	mov	r4, r7
 800a614:	46ab      	mov	fp, r5
 800a616:	b087      	sub	sp, #28
 800a618:	6801      	ldr	r1, [r0, #0]
 800a61a:	9301      	str	r3, [sp, #4]
 800a61c:	f846 5c04 	str.w	r5, [r6, #-4]
 800a620:	9502      	str	r5, [sp, #8]
 800a622:	784a      	ldrb	r2, [r1, #1]
 800a624:	1c4b      	adds	r3, r1, #1
 800a626:	9303      	str	r3, [sp, #12]
 800a628:	b342      	cbz	r2, 800a67c <__hexnan+0x88>
 800a62a:	4610      	mov	r0, r2
 800a62c:	9105      	str	r1, [sp, #20]
 800a62e:	9204      	str	r2, [sp, #16]
 800a630:	f7ff fd95 	bl	800a15e <__hexdig_fun>
 800a634:	2800      	cmp	r0, #0
 800a636:	d151      	bne.n	800a6dc <__hexnan+0xe8>
 800a638:	9a04      	ldr	r2, [sp, #16]
 800a63a:	9905      	ldr	r1, [sp, #20]
 800a63c:	2a20      	cmp	r2, #32
 800a63e:	d818      	bhi.n	800a672 <__hexnan+0x7e>
 800a640:	9b02      	ldr	r3, [sp, #8]
 800a642:	459b      	cmp	fp, r3
 800a644:	dd13      	ble.n	800a66e <__hexnan+0x7a>
 800a646:	454c      	cmp	r4, r9
 800a648:	d206      	bcs.n	800a658 <__hexnan+0x64>
 800a64a:	2d07      	cmp	r5, #7
 800a64c:	dc04      	bgt.n	800a658 <__hexnan+0x64>
 800a64e:	462a      	mov	r2, r5
 800a650:	4649      	mov	r1, r9
 800a652:	4620      	mov	r0, r4
 800a654:	f7ff ffa8 	bl	800a5a8 <L_shift>
 800a658:	4544      	cmp	r4, r8
 800a65a:	d952      	bls.n	800a702 <__hexnan+0x10e>
 800a65c:	2300      	movs	r3, #0
 800a65e:	f1a4 0904 	sub.w	r9, r4, #4
 800a662:	f844 3c04 	str.w	r3, [r4, #-4]
 800a666:	461d      	mov	r5, r3
 800a668:	464c      	mov	r4, r9
 800a66a:	f8cd b008 	str.w	fp, [sp, #8]
 800a66e:	9903      	ldr	r1, [sp, #12]
 800a670:	e7d7      	b.n	800a622 <__hexnan+0x2e>
 800a672:	2a29      	cmp	r2, #41	@ 0x29
 800a674:	d157      	bne.n	800a726 <__hexnan+0x132>
 800a676:	3102      	adds	r1, #2
 800a678:	f8ca 1000 	str.w	r1, [sl]
 800a67c:	f1bb 0f00 	cmp.w	fp, #0
 800a680:	d051      	beq.n	800a726 <__hexnan+0x132>
 800a682:	454c      	cmp	r4, r9
 800a684:	d206      	bcs.n	800a694 <__hexnan+0xa0>
 800a686:	2d07      	cmp	r5, #7
 800a688:	dc04      	bgt.n	800a694 <__hexnan+0xa0>
 800a68a:	462a      	mov	r2, r5
 800a68c:	4649      	mov	r1, r9
 800a68e:	4620      	mov	r0, r4
 800a690:	f7ff ff8a 	bl	800a5a8 <L_shift>
 800a694:	4544      	cmp	r4, r8
 800a696:	d936      	bls.n	800a706 <__hexnan+0x112>
 800a698:	4623      	mov	r3, r4
 800a69a:	f1a8 0204 	sub.w	r2, r8, #4
 800a69e:	f853 1b04 	ldr.w	r1, [r3], #4
 800a6a2:	429f      	cmp	r7, r3
 800a6a4:	f842 1f04 	str.w	r1, [r2, #4]!
 800a6a8:	d2f9      	bcs.n	800a69e <__hexnan+0xaa>
 800a6aa:	1b3b      	subs	r3, r7, r4
 800a6ac:	f023 0303 	bic.w	r3, r3, #3
 800a6b0:	3304      	adds	r3, #4
 800a6b2:	3401      	adds	r4, #1
 800a6b4:	3e03      	subs	r6, #3
 800a6b6:	42b4      	cmp	r4, r6
 800a6b8:	bf88      	it	hi
 800a6ba:	2304      	movhi	r3, #4
 800a6bc:	2200      	movs	r2, #0
 800a6be:	4443      	add	r3, r8
 800a6c0:	f843 2b04 	str.w	r2, [r3], #4
 800a6c4:	429f      	cmp	r7, r3
 800a6c6:	d2fb      	bcs.n	800a6c0 <__hexnan+0xcc>
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	b91b      	cbnz	r3, 800a6d4 <__hexnan+0xe0>
 800a6cc:	4547      	cmp	r7, r8
 800a6ce:	d128      	bne.n	800a722 <__hexnan+0x12e>
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	603b      	str	r3, [r7, #0]
 800a6d4:	2005      	movs	r0, #5
 800a6d6:	b007      	add	sp, #28
 800a6d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6dc:	3501      	adds	r5, #1
 800a6de:	2d08      	cmp	r5, #8
 800a6e0:	f10b 0b01 	add.w	fp, fp, #1
 800a6e4:	dd06      	ble.n	800a6f4 <__hexnan+0x100>
 800a6e6:	4544      	cmp	r4, r8
 800a6e8:	d9c1      	bls.n	800a66e <__hexnan+0x7a>
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	2501      	movs	r5, #1
 800a6ee:	f844 3c04 	str.w	r3, [r4, #-4]
 800a6f2:	3c04      	subs	r4, #4
 800a6f4:	6822      	ldr	r2, [r4, #0]
 800a6f6:	f000 000f 	and.w	r0, r0, #15
 800a6fa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a6fe:	6020      	str	r0, [r4, #0]
 800a700:	e7b5      	b.n	800a66e <__hexnan+0x7a>
 800a702:	2508      	movs	r5, #8
 800a704:	e7b3      	b.n	800a66e <__hexnan+0x7a>
 800a706:	9b01      	ldr	r3, [sp, #4]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d0dd      	beq.n	800a6c8 <__hexnan+0xd4>
 800a70c:	f04f 32ff 	mov.w	r2, #4294967295
 800a710:	f1c3 0320 	rsb	r3, r3, #32
 800a714:	40da      	lsrs	r2, r3
 800a716:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a71a:	4013      	ands	r3, r2
 800a71c:	f846 3c04 	str.w	r3, [r6, #-4]
 800a720:	e7d2      	b.n	800a6c8 <__hexnan+0xd4>
 800a722:	3f04      	subs	r7, #4
 800a724:	e7d0      	b.n	800a6c8 <__hexnan+0xd4>
 800a726:	2004      	movs	r0, #4
 800a728:	e7d5      	b.n	800a6d6 <__hexnan+0xe2>
	...

0800a72c <malloc>:
 800a72c:	4b02      	ldr	r3, [pc, #8]	@ (800a738 <malloc+0xc>)
 800a72e:	4601      	mov	r1, r0
 800a730:	6818      	ldr	r0, [r3, #0]
 800a732:	f000 b825 	b.w	800a780 <_malloc_r>
 800a736:	bf00      	nop
 800a738:	20000188 	.word	0x20000188

0800a73c <sbrk_aligned>:
 800a73c:	b570      	push	{r4, r5, r6, lr}
 800a73e:	4e0f      	ldr	r6, [pc, #60]	@ (800a77c <sbrk_aligned+0x40>)
 800a740:	460c      	mov	r4, r1
 800a742:	6831      	ldr	r1, [r6, #0]
 800a744:	4605      	mov	r5, r0
 800a746:	b911      	cbnz	r1, 800a74e <sbrk_aligned+0x12>
 800a748:	f001 f800 	bl	800b74c <_sbrk_r>
 800a74c:	6030      	str	r0, [r6, #0]
 800a74e:	4621      	mov	r1, r4
 800a750:	4628      	mov	r0, r5
 800a752:	f000 fffb 	bl	800b74c <_sbrk_r>
 800a756:	1c43      	adds	r3, r0, #1
 800a758:	d103      	bne.n	800a762 <sbrk_aligned+0x26>
 800a75a:	f04f 34ff 	mov.w	r4, #4294967295
 800a75e:	4620      	mov	r0, r4
 800a760:	bd70      	pop	{r4, r5, r6, pc}
 800a762:	1cc4      	adds	r4, r0, #3
 800a764:	f024 0403 	bic.w	r4, r4, #3
 800a768:	42a0      	cmp	r0, r4
 800a76a:	d0f8      	beq.n	800a75e <sbrk_aligned+0x22>
 800a76c:	1a21      	subs	r1, r4, r0
 800a76e:	4628      	mov	r0, r5
 800a770:	f000 ffec 	bl	800b74c <_sbrk_r>
 800a774:	3001      	adds	r0, #1
 800a776:	d1f2      	bne.n	800a75e <sbrk_aligned+0x22>
 800a778:	e7ef      	b.n	800a75a <sbrk_aligned+0x1e>
 800a77a:	bf00      	nop
 800a77c:	20000aa8 	.word	0x20000aa8

0800a780 <_malloc_r>:
 800a780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a784:	1ccd      	adds	r5, r1, #3
 800a786:	f025 0503 	bic.w	r5, r5, #3
 800a78a:	3508      	adds	r5, #8
 800a78c:	2d0c      	cmp	r5, #12
 800a78e:	bf38      	it	cc
 800a790:	250c      	movcc	r5, #12
 800a792:	2d00      	cmp	r5, #0
 800a794:	4606      	mov	r6, r0
 800a796:	db01      	blt.n	800a79c <_malloc_r+0x1c>
 800a798:	42a9      	cmp	r1, r5
 800a79a:	d904      	bls.n	800a7a6 <_malloc_r+0x26>
 800a79c:	230c      	movs	r3, #12
 800a79e:	6033      	str	r3, [r6, #0]
 800a7a0:	2000      	movs	r0, #0
 800a7a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a87c <_malloc_r+0xfc>
 800a7aa:	f000 f87b 	bl	800a8a4 <__malloc_lock>
 800a7ae:	f8d8 3000 	ldr.w	r3, [r8]
 800a7b2:	461c      	mov	r4, r3
 800a7b4:	bb44      	cbnz	r4, 800a808 <_malloc_r+0x88>
 800a7b6:	4629      	mov	r1, r5
 800a7b8:	4630      	mov	r0, r6
 800a7ba:	f7ff ffbf 	bl	800a73c <sbrk_aligned>
 800a7be:	1c43      	adds	r3, r0, #1
 800a7c0:	4604      	mov	r4, r0
 800a7c2:	d158      	bne.n	800a876 <_malloc_r+0xf6>
 800a7c4:	f8d8 4000 	ldr.w	r4, [r8]
 800a7c8:	4627      	mov	r7, r4
 800a7ca:	2f00      	cmp	r7, #0
 800a7cc:	d143      	bne.n	800a856 <_malloc_r+0xd6>
 800a7ce:	2c00      	cmp	r4, #0
 800a7d0:	d04b      	beq.n	800a86a <_malloc_r+0xea>
 800a7d2:	6823      	ldr	r3, [r4, #0]
 800a7d4:	4639      	mov	r1, r7
 800a7d6:	4630      	mov	r0, r6
 800a7d8:	eb04 0903 	add.w	r9, r4, r3
 800a7dc:	f000 ffb6 	bl	800b74c <_sbrk_r>
 800a7e0:	4581      	cmp	r9, r0
 800a7e2:	d142      	bne.n	800a86a <_malloc_r+0xea>
 800a7e4:	6821      	ldr	r1, [r4, #0]
 800a7e6:	4630      	mov	r0, r6
 800a7e8:	1a6d      	subs	r5, r5, r1
 800a7ea:	4629      	mov	r1, r5
 800a7ec:	f7ff ffa6 	bl	800a73c <sbrk_aligned>
 800a7f0:	3001      	adds	r0, #1
 800a7f2:	d03a      	beq.n	800a86a <_malloc_r+0xea>
 800a7f4:	6823      	ldr	r3, [r4, #0]
 800a7f6:	442b      	add	r3, r5
 800a7f8:	6023      	str	r3, [r4, #0]
 800a7fa:	f8d8 3000 	ldr.w	r3, [r8]
 800a7fe:	685a      	ldr	r2, [r3, #4]
 800a800:	bb62      	cbnz	r2, 800a85c <_malloc_r+0xdc>
 800a802:	f8c8 7000 	str.w	r7, [r8]
 800a806:	e00f      	b.n	800a828 <_malloc_r+0xa8>
 800a808:	6822      	ldr	r2, [r4, #0]
 800a80a:	1b52      	subs	r2, r2, r5
 800a80c:	d420      	bmi.n	800a850 <_malloc_r+0xd0>
 800a80e:	2a0b      	cmp	r2, #11
 800a810:	d917      	bls.n	800a842 <_malloc_r+0xc2>
 800a812:	1961      	adds	r1, r4, r5
 800a814:	42a3      	cmp	r3, r4
 800a816:	6025      	str	r5, [r4, #0]
 800a818:	bf18      	it	ne
 800a81a:	6059      	strne	r1, [r3, #4]
 800a81c:	6863      	ldr	r3, [r4, #4]
 800a81e:	bf08      	it	eq
 800a820:	f8c8 1000 	streq.w	r1, [r8]
 800a824:	5162      	str	r2, [r4, r5]
 800a826:	604b      	str	r3, [r1, #4]
 800a828:	4630      	mov	r0, r6
 800a82a:	f000 f841 	bl	800a8b0 <__malloc_unlock>
 800a82e:	f104 000b 	add.w	r0, r4, #11
 800a832:	1d23      	adds	r3, r4, #4
 800a834:	f020 0007 	bic.w	r0, r0, #7
 800a838:	1ac2      	subs	r2, r0, r3
 800a83a:	bf1c      	itt	ne
 800a83c:	1a1b      	subne	r3, r3, r0
 800a83e:	50a3      	strne	r3, [r4, r2]
 800a840:	e7af      	b.n	800a7a2 <_malloc_r+0x22>
 800a842:	6862      	ldr	r2, [r4, #4]
 800a844:	42a3      	cmp	r3, r4
 800a846:	bf0c      	ite	eq
 800a848:	f8c8 2000 	streq.w	r2, [r8]
 800a84c:	605a      	strne	r2, [r3, #4]
 800a84e:	e7eb      	b.n	800a828 <_malloc_r+0xa8>
 800a850:	4623      	mov	r3, r4
 800a852:	6864      	ldr	r4, [r4, #4]
 800a854:	e7ae      	b.n	800a7b4 <_malloc_r+0x34>
 800a856:	463c      	mov	r4, r7
 800a858:	687f      	ldr	r7, [r7, #4]
 800a85a:	e7b6      	b.n	800a7ca <_malloc_r+0x4a>
 800a85c:	461a      	mov	r2, r3
 800a85e:	685b      	ldr	r3, [r3, #4]
 800a860:	42a3      	cmp	r3, r4
 800a862:	d1fb      	bne.n	800a85c <_malloc_r+0xdc>
 800a864:	2300      	movs	r3, #0
 800a866:	6053      	str	r3, [r2, #4]
 800a868:	e7de      	b.n	800a828 <_malloc_r+0xa8>
 800a86a:	230c      	movs	r3, #12
 800a86c:	4630      	mov	r0, r6
 800a86e:	6033      	str	r3, [r6, #0]
 800a870:	f000 f81e 	bl	800a8b0 <__malloc_unlock>
 800a874:	e794      	b.n	800a7a0 <_malloc_r+0x20>
 800a876:	6005      	str	r5, [r0, #0]
 800a878:	e7d6      	b.n	800a828 <_malloc_r+0xa8>
 800a87a:	bf00      	nop
 800a87c:	20000aac 	.word	0x20000aac

0800a880 <__ascii_mbtowc>:
 800a880:	b082      	sub	sp, #8
 800a882:	b901      	cbnz	r1, 800a886 <__ascii_mbtowc+0x6>
 800a884:	a901      	add	r1, sp, #4
 800a886:	b142      	cbz	r2, 800a89a <__ascii_mbtowc+0x1a>
 800a888:	b14b      	cbz	r3, 800a89e <__ascii_mbtowc+0x1e>
 800a88a:	7813      	ldrb	r3, [r2, #0]
 800a88c:	600b      	str	r3, [r1, #0]
 800a88e:	7812      	ldrb	r2, [r2, #0]
 800a890:	1e10      	subs	r0, r2, #0
 800a892:	bf18      	it	ne
 800a894:	2001      	movne	r0, #1
 800a896:	b002      	add	sp, #8
 800a898:	4770      	bx	lr
 800a89a:	4610      	mov	r0, r2
 800a89c:	e7fb      	b.n	800a896 <__ascii_mbtowc+0x16>
 800a89e:	f06f 0001 	mvn.w	r0, #1
 800a8a2:	e7f8      	b.n	800a896 <__ascii_mbtowc+0x16>

0800a8a4 <__malloc_lock>:
 800a8a4:	4801      	ldr	r0, [pc, #4]	@ (800a8ac <__malloc_lock+0x8>)
 800a8a6:	f7fe bd3e 	b.w	8009326 <__retarget_lock_acquire_recursive>
 800a8aa:	bf00      	nop
 800a8ac:	20000aa4 	.word	0x20000aa4

0800a8b0 <__malloc_unlock>:
 800a8b0:	4801      	ldr	r0, [pc, #4]	@ (800a8b8 <__malloc_unlock+0x8>)
 800a8b2:	f7fe bd39 	b.w	8009328 <__retarget_lock_release_recursive>
 800a8b6:	bf00      	nop
 800a8b8:	20000aa4 	.word	0x20000aa4

0800a8bc <_Balloc>:
 800a8bc:	b570      	push	{r4, r5, r6, lr}
 800a8be:	69c6      	ldr	r6, [r0, #28]
 800a8c0:	4604      	mov	r4, r0
 800a8c2:	460d      	mov	r5, r1
 800a8c4:	b976      	cbnz	r6, 800a8e4 <_Balloc+0x28>
 800a8c6:	2010      	movs	r0, #16
 800a8c8:	f7ff ff30 	bl	800a72c <malloc>
 800a8cc:	4602      	mov	r2, r0
 800a8ce:	61e0      	str	r0, [r4, #28]
 800a8d0:	b920      	cbnz	r0, 800a8dc <_Balloc+0x20>
 800a8d2:	216b      	movs	r1, #107	@ 0x6b
 800a8d4:	4b17      	ldr	r3, [pc, #92]	@ (800a934 <_Balloc+0x78>)
 800a8d6:	4818      	ldr	r0, [pc, #96]	@ (800a938 <_Balloc+0x7c>)
 800a8d8:	f000 ff48 	bl	800b76c <__assert_func>
 800a8dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a8e0:	6006      	str	r6, [r0, #0]
 800a8e2:	60c6      	str	r6, [r0, #12]
 800a8e4:	69e6      	ldr	r6, [r4, #28]
 800a8e6:	68f3      	ldr	r3, [r6, #12]
 800a8e8:	b183      	cbz	r3, 800a90c <_Balloc+0x50>
 800a8ea:	69e3      	ldr	r3, [r4, #28]
 800a8ec:	68db      	ldr	r3, [r3, #12]
 800a8ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a8f2:	b9b8      	cbnz	r0, 800a924 <_Balloc+0x68>
 800a8f4:	2101      	movs	r1, #1
 800a8f6:	fa01 f605 	lsl.w	r6, r1, r5
 800a8fa:	1d72      	adds	r2, r6, #5
 800a8fc:	4620      	mov	r0, r4
 800a8fe:	0092      	lsls	r2, r2, #2
 800a900:	f000 ff52 	bl	800b7a8 <_calloc_r>
 800a904:	b160      	cbz	r0, 800a920 <_Balloc+0x64>
 800a906:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a90a:	e00e      	b.n	800a92a <_Balloc+0x6e>
 800a90c:	2221      	movs	r2, #33	@ 0x21
 800a90e:	2104      	movs	r1, #4
 800a910:	4620      	mov	r0, r4
 800a912:	f000 ff49 	bl	800b7a8 <_calloc_r>
 800a916:	69e3      	ldr	r3, [r4, #28]
 800a918:	60f0      	str	r0, [r6, #12]
 800a91a:	68db      	ldr	r3, [r3, #12]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d1e4      	bne.n	800a8ea <_Balloc+0x2e>
 800a920:	2000      	movs	r0, #0
 800a922:	bd70      	pop	{r4, r5, r6, pc}
 800a924:	6802      	ldr	r2, [r0, #0]
 800a926:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a92a:	2300      	movs	r3, #0
 800a92c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a930:	e7f7      	b.n	800a922 <_Balloc+0x66>
 800a932:	bf00      	nop
 800a934:	0800c5c7 	.word	0x0800c5c7
 800a938:	0800c6a7 	.word	0x0800c6a7

0800a93c <_Bfree>:
 800a93c:	b570      	push	{r4, r5, r6, lr}
 800a93e:	69c6      	ldr	r6, [r0, #28]
 800a940:	4605      	mov	r5, r0
 800a942:	460c      	mov	r4, r1
 800a944:	b976      	cbnz	r6, 800a964 <_Bfree+0x28>
 800a946:	2010      	movs	r0, #16
 800a948:	f7ff fef0 	bl	800a72c <malloc>
 800a94c:	4602      	mov	r2, r0
 800a94e:	61e8      	str	r0, [r5, #28]
 800a950:	b920      	cbnz	r0, 800a95c <_Bfree+0x20>
 800a952:	218f      	movs	r1, #143	@ 0x8f
 800a954:	4b08      	ldr	r3, [pc, #32]	@ (800a978 <_Bfree+0x3c>)
 800a956:	4809      	ldr	r0, [pc, #36]	@ (800a97c <_Bfree+0x40>)
 800a958:	f000 ff08 	bl	800b76c <__assert_func>
 800a95c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a960:	6006      	str	r6, [r0, #0]
 800a962:	60c6      	str	r6, [r0, #12]
 800a964:	b13c      	cbz	r4, 800a976 <_Bfree+0x3a>
 800a966:	69eb      	ldr	r3, [r5, #28]
 800a968:	6862      	ldr	r2, [r4, #4]
 800a96a:	68db      	ldr	r3, [r3, #12]
 800a96c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a970:	6021      	str	r1, [r4, #0]
 800a972:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a976:	bd70      	pop	{r4, r5, r6, pc}
 800a978:	0800c5c7 	.word	0x0800c5c7
 800a97c:	0800c6a7 	.word	0x0800c6a7

0800a980 <__multadd>:
 800a980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a984:	4607      	mov	r7, r0
 800a986:	460c      	mov	r4, r1
 800a988:	461e      	mov	r6, r3
 800a98a:	2000      	movs	r0, #0
 800a98c:	690d      	ldr	r5, [r1, #16]
 800a98e:	f101 0c14 	add.w	ip, r1, #20
 800a992:	f8dc 3000 	ldr.w	r3, [ip]
 800a996:	3001      	adds	r0, #1
 800a998:	b299      	uxth	r1, r3
 800a99a:	fb02 6101 	mla	r1, r2, r1, r6
 800a99e:	0c1e      	lsrs	r6, r3, #16
 800a9a0:	0c0b      	lsrs	r3, r1, #16
 800a9a2:	fb02 3306 	mla	r3, r2, r6, r3
 800a9a6:	b289      	uxth	r1, r1
 800a9a8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a9ac:	4285      	cmp	r5, r0
 800a9ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a9b2:	f84c 1b04 	str.w	r1, [ip], #4
 800a9b6:	dcec      	bgt.n	800a992 <__multadd+0x12>
 800a9b8:	b30e      	cbz	r6, 800a9fe <__multadd+0x7e>
 800a9ba:	68a3      	ldr	r3, [r4, #8]
 800a9bc:	42ab      	cmp	r3, r5
 800a9be:	dc19      	bgt.n	800a9f4 <__multadd+0x74>
 800a9c0:	6861      	ldr	r1, [r4, #4]
 800a9c2:	4638      	mov	r0, r7
 800a9c4:	3101      	adds	r1, #1
 800a9c6:	f7ff ff79 	bl	800a8bc <_Balloc>
 800a9ca:	4680      	mov	r8, r0
 800a9cc:	b928      	cbnz	r0, 800a9da <__multadd+0x5a>
 800a9ce:	4602      	mov	r2, r0
 800a9d0:	21ba      	movs	r1, #186	@ 0xba
 800a9d2:	4b0c      	ldr	r3, [pc, #48]	@ (800aa04 <__multadd+0x84>)
 800a9d4:	480c      	ldr	r0, [pc, #48]	@ (800aa08 <__multadd+0x88>)
 800a9d6:	f000 fec9 	bl	800b76c <__assert_func>
 800a9da:	6922      	ldr	r2, [r4, #16]
 800a9dc:	f104 010c 	add.w	r1, r4, #12
 800a9e0:	3202      	adds	r2, #2
 800a9e2:	0092      	lsls	r2, r2, #2
 800a9e4:	300c      	adds	r0, #12
 800a9e6:	f7fe fcb6 	bl	8009356 <memcpy>
 800a9ea:	4621      	mov	r1, r4
 800a9ec:	4638      	mov	r0, r7
 800a9ee:	f7ff ffa5 	bl	800a93c <_Bfree>
 800a9f2:	4644      	mov	r4, r8
 800a9f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a9f8:	3501      	adds	r5, #1
 800a9fa:	615e      	str	r6, [r3, #20]
 800a9fc:	6125      	str	r5, [r4, #16]
 800a9fe:	4620      	mov	r0, r4
 800aa00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa04:	0800c636 	.word	0x0800c636
 800aa08:	0800c6a7 	.word	0x0800c6a7

0800aa0c <__s2b>:
 800aa0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa10:	4615      	mov	r5, r2
 800aa12:	2209      	movs	r2, #9
 800aa14:	461f      	mov	r7, r3
 800aa16:	3308      	adds	r3, #8
 800aa18:	460c      	mov	r4, r1
 800aa1a:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa1e:	4606      	mov	r6, r0
 800aa20:	2201      	movs	r2, #1
 800aa22:	2100      	movs	r1, #0
 800aa24:	429a      	cmp	r2, r3
 800aa26:	db09      	blt.n	800aa3c <__s2b+0x30>
 800aa28:	4630      	mov	r0, r6
 800aa2a:	f7ff ff47 	bl	800a8bc <_Balloc>
 800aa2e:	b940      	cbnz	r0, 800aa42 <__s2b+0x36>
 800aa30:	4602      	mov	r2, r0
 800aa32:	21d3      	movs	r1, #211	@ 0xd3
 800aa34:	4b18      	ldr	r3, [pc, #96]	@ (800aa98 <__s2b+0x8c>)
 800aa36:	4819      	ldr	r0, [pc, #100]	@ (800aa9c <__s2b+0x90>)
 800aa38:	f000 fe98 	bl	800b76c <__assert_func>
 800aa3c:	0052      	lsls	r2, r2, #1
 800aa3e:	3101      	adds	r1, #1
 800aa40:	e7f0      	b.n	800aa24 <__s2b+0x18>
 800aa42:	9b08      	ldr	r3, [sp, #32]
 800aa44:	2d09      	cmp	r5, #9
 800aa46:	6143      	str	r3, [r0, #20]
 800aa48:	f04f 0301 	mov.w	r3, #1
 800aa4c:	6103      	str	r3, [r0, #16]
 800aa4e:	dd16      	ble.n	800aa7e <__s2b+0x72>
 800aa50:	f104 0909 	add.w	r9, r4, #9
 800aa54:	46c8      	mov	r8, r9
 800aa56:	442c      	add	r4, r5
 800aa58:	f818 3b01 	ldrb.w	r3, [r8], #1
 800aa5c:	4601      	mov	r1, r0
 800aa5e:	220a      	movs	r2, #10
 800aa60:	4630      	mov	r0, r6
 800aa62:	3b30      	subs	r3, #48	@ 0x30
 800aa64:	f7ff ff8c 	bl	800a980 <__multadd>
 800aa68:	45a0      	cmp	r8, r4
 800aa6a:	d1f5      	bne.n	800aa58 <__s2b+0x4c>
 800aa6c:	f1a5 0408 	sub.w	r4, r5, #8
 800aa70:	444c      	add	r4, r9
 800aa72:	1b2d      	subs	r5, r5, r4
 800aa74:	1963      	adds	r3, r4, r5
 800aa76:	42bb      	cmp	r3, r7
 800aa78:	db04      	blt.n	800aa84 <__s2b+0x78>
 800aa7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa7e:	2509      	movs	r5, #9
 800aa80:	340a      	adds	r4, #10
 800aa82:	e7f6      	b.n	800aa72 <__s2b+0x66>
 800aa84:	f814 3b01 	ldrb.w	r3, [r4], #1
 800aa88:	4601      	mov	r1, r0
 800aa8a:	220a      	movs	r2, #10
 800aa8c:	4630      	mov	r0, r6
 800aa8e:	3b30      	subs	r3, #48	@ 0x30
 800aa90:	f7ff ff76 	bl	800a980 <__multadd>
 800aa94:	e7ee      	b.n	800aa74 <__s2b+0x68>
 800aa96:	bf00      	nop
 800aa98:	0800c636 	.word	0x0800c636
 800aa9c:	0800c6a7 	.word	0x0800c6a7

0800aaa0 <__hi0bits>:
 800aaa0:	4603      	mov	r3, r0
 800aaa2:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800aaa6:	bf3a      	itte	cc
 800aaa8:	0403      	lslcc	r3, r0, #16
 800aaaa:	2010      	movcc	r0, #16
 800aaac:	2000      	movcs	r0, #0
 800aaae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800aab2:	bf3c      	itt	cc
 800aab4:	021b      	lslcc	r3, r3, #8
 800aab6:	3008      	addcc	r0, #8
 800aab8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aabc:	bf3c      	itt	cc
 800aabe:	011b      	lslcc	r3, r3, #4
 800aac0:	3004      	addcc	r0, #4
 800aac2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aac6:	bf3c      	itt	cc
 800aac8:	009b      	lslcc	r3, r3, #2
 800aaca:	3002      	addcc	r0, #2
 800aacc:	2b00      	cmp	r3, #0
 800aace:	db05      	blt.n	800aadc <__hi0bits+0x3c>
 800aad0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800aad4:	f100 0001 	add.w	r0, r0, #1
 800aad8:	bf08      	it	eq
 800aada:	2020      	moveq	r0, #32
 800aadc:	4770      	bx	lr

0800aade <__lo0bits>:
 800aade:	6803      	ldr	r3, [r0, #0]
 800aae0:	4602      	mov	r2, r0
 800aae2:	f013 0007 	ands.w	r0, r3, #7
 800aae6:	d00b      	beq.n	800ab00 <__lo0bits+0x22>
 800aae8:	07d9      	lsls	r1, r3, #31
 800aaea:	d421      	bmi.n	800ab30 <__lo0bits+0x52>
 800aaec:	0798      	lsls	r0, r3, #30
 800aaee:	bf49      	itett	mi
 800aaf0:	085b      	lsrmi	r3, r3, #1
 800aaf2:	089b      	lsrpl	r3, r3, #2
 800aaf4:	2001      	movmi	r0, #1
 800aaf6:	6013      	strmi	r3, [r2, #0]
 800aaf8:	bf5c      	itt	pl
 800aafa:	2002      	movpl	r0, #2
 800aafc:	6013      	strpl	r3, [r2, #0]
 800aafe:	4770      	bx	lr
 800ab00:	b299      	uxth	r1, r3
 800ab02:	b909      	cbnz	r1, 800ab08 <__lo0bits+0x2a>
 800ab04:	2010      	movs	r0, #16
 800ab06:	0c1b      	lsrs	r3, r3, #16
 800ab08:	b2d9      	uxtb	r1, r3
 800ab0a:	b909      	cbnz	r1, 800ab10 <__lo0bits+0x32>
 800ab0c:	3008      	adds	r0, #8
 800ab0e:	0a1b      	lsrs	r3, r3, #8
 800ab10:	0719      	lsls	r1, r3, #28
 800ab12:	bf04      	itt	eq
 800ab14:	091b      	lsreq	r3, r3, #4
 800ab16:	3004      	addeq	r0, #4
 800ab18:	0799      	lsls	r1, r3, #30
 800ab1a:	bf04      	itt	eq
 800ab1c:	089b      	lsreq	r3, r3, #2
 800ab1e:	3002      	addeq	r0, #2
 800ab20:	07d9      	lsls	r1, r3, #31
 800ab22:	d403      	bmi.n	800ab2c <__lo0bits+0x4e>
 800ab24:	085b      	lsrs	r3, r3, #1
 800ab26:	f100 0001 	add.w	r0, r0, #1
 800ab2a:	d003      	beq.n	800ab34 <__lo0bits+0x56>
 800ab2c:	6013      	str	r3, [r2, #0]
 800ab2e:	4770      	bx	lr
 800ab30:	2000      	movs	r0, #0
 800ab32:	4770      	bx	lr
 800ab34:	2020      	movs	r0, #32
 800ab36:	4770      	bx	lr

0800ab38 <__i2b>:
 800ab38:	b510      	push	{r4, lr}
 800ab3a:	460c      	mov	r4, r1
 800ab3c:	2101      	movs	r1, #1
 800ab3e:	f7ff febd 	bl	800a8bc <_Balloc>
 800ab42:	4602      	mov	r2, r0
 800ab44:	b928      	cbnz	r0, 800ab52 <__i2b+0x1a>
 800ab46:	f240 1145 	movw	r1, #325	@ 0x145
 800ab4a:	4b04      	ldr	r3, [pc, #16]	@ (800ab5c <__i2b+0x24>)
 800ab4c:	4804      	ldr	r0, [pc, #16]	@ (800ab60 <__i2b+0x28>)
 800ab4e:	f000 fe0d 	bl	800b76c <__assert_func>
 800ab52:	2301      	movs	r3, #1
 800ab54:	6144      	str	r4, [r0, #20]
 800ab56:	6103      	str	r3, [r0, #16]
 800ab58:	bd10      	pop	{r4, pc}
 800ab5a:	bf00      	nop
 800ab5c:	0800c636 	.word	0x0800c636
 800ab60:	0800c6a7 	.word	0x0800c6a7

0800ab64 <__multiply>:
 800ab64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab68:	4614      	mov	r4, r2
 800ab6a:	690a      	ldr	r2, [r1, #16]
 800ab6c:	6923      	ldr	r3, [r4, #16]
 800ab6e:	460f      	mov	r7, r1
 800ab70:	429a      	cmp	r2, r3
 800ab72:	bfa2      	ittt	ge
 800ab74:	4623      	movge	r3, r4
 800ab76:	460c      	movge	r4, r1
 800ab78:	461f      	movge	r7, r3
 800ab7a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ab7e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ab82:	68a3      	ldr	r3, [r4, #8]
 800ab84:	6861      	ldr	r1, [r4, #4]
 800ab86:	eb0a 0609 	add.w	r6, sl, r9
 800ab8a:	42b3      	cmp	r3, r6
 800ab8c:	b085      	sub	sp, #20
 800ab8e:	bfb8      	it	lt
 800ab90:	3101      	addlt	r1, #1
 800ab92:	f7ff fe93 	bl	800a8bc <_Balloc>
 800ab96:	b930      	cbnz	r0, 800aba6 <__multiply+0x42>
 800ab98:	4602      	mov	r2, r0
 800ab9a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ab9e:	4b43      	ldr	r3, [pc, #268]	@ (800acac <__multiply+0x148>)
 800aba0:	4843      	ldr	r0, [pc, #268]	@ (800acb0 <__multiply+0x14c>)
 800aba2:	f000 fde3 	bl	800b76c <__assert_func>
 800aba6:	f100 0514 	add.w	r5, r0, #20
 800abaa:	462b      	mov	r3, r5
 800abac:	2200      	movs	r2, #0
 800abae:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800abb2:	4543      	cmp	r3, r8
 800abb4:	d321      	bcc.n	800abfa <__multiply+0x96>
 800abb6:	f107 0114 	add.w	r1, r7, #20
 800abba:	f104 0214 	add.w	r2, r4, #20
 800abbe:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800abc2:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800abc6:	9302      	str	r3, [sp, #8]
 800abc8:	1b13      	subs	r3, r2, r4
 800abca:	3b15      	subs	r3, #21
 800abcc:	f023 0303 	bic.w	r3, r3, #3
 800abd0:	3304      	adds	r3, #4
 800abd2:	f104 0715 	add.w	r7, r4, #21
 800abd6:	42ba      	cmp	r2, r7
 800abd8:	bf38      	it	cc
 800abda:	2304      	movcc	r3, #4
 800abdc:	9301      	str	r3, [sp, #4]
 800abde:	9b02      	ldr	r3, [sp, #8]
 800abe0:	9103      	str	r1, [sp, #12]
 800abe2:	428b      	cmp	r3, r1
 800abe4:	d80c      	bhi.n	800ac00 <__multiply+0x9c>
 800abe6:	2e00      	cmp	r6, #0
 800abe8:	dd03      	ble.n	800abf2 <__multiply+0x8e>
 800abea:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d05a      	beq.n	800aca8 <__multiply+0x144>
 800abf2:	6106      	str	r6, [r0, #16]
 800abf4:	b005      	add	sp, #20
 800abf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abfa:	f843 2b04 	str.w	r2, [r3], #4
 800abfe:	e7d8      	b.n	800abb2 <__multiply+0x4e>
 800ac00:	f8b1 a000 	ldrh.w	sl, [r1]
 800ac04:	f1ba 0f00 	cmp.w	sl, #0
 800ac08:	d023      	beq.n	800ac52 <__multiply+0xee>
 800ac0a:	46a9      	mov	r9, r5
 800ac0c:	f04f 0c00 	mov.w	ip, #0
 800ac10:	f104 0e14 	add.w	lr, r4, #20
 800ac14:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ac18:	f8d9 3000 	ldr.w	r3, [r9]
 800ac1c:	fa1f fb87 	uxth.w	fp, r7
 800ac20:	b29b      	uxth	r3, r3
 800ac22:	fb0a 330b 	mla	r3, sl, fp, r3
 800ac26:	4463      	add	r3, ip
 800ac28:	f8d9 c000 	ldr.w	ip, [r9]
 800ac2c:	0c3f      	lsrs	r7, r7, #16
 800ac2e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800ac32:	fb0a c707 	mla	r7, sl, r7, ip
 800ac36:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ac3a:	b29b      	uxth	r3, r3
 800ac3c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ac40:	4572      	cmp	r2, lr
 800ac42:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ac46:	f849 3b04 	str.w	r3, [r9], #4
 800ac4a:	d8e3      	bhi.n	800ac14 <__multiply+0xb0>
 800ac4c:	9b01      	ldr	r3, [sp, #4]
 800ac4e:	f845 c003 	str.w	ip, [r5, r3]
 800ac52:	9b03      	ldr	r3, [sp, #12]
 800ac54:	3104      	adds	r1, #4
 800ac56:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ac5a:	f1b9 0f00 	cmp.w	r9, #0
 800ac5e:	d021      	beq.n	800aca4 <__multiply+0x140>
 800ac60:	46ae      	mov	lr, r5
 800ac62:	f04f 0a00 	mov.w	sl, #0
 800ac66:	682b      	ldr	r3, [r5, #0]
 800ac68:	f104 0c14 	add.w	ip, r4, #20
 800ac6c:	f8bc b000 	ldrh.w	fp, [ip]
 800ac70:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ac74:	b29b      	uxth	r3, r3
 800ac76:	fb09 770b 	mla	r7, r9, fp, r7
 800ac7a:	4457      	add	r7, sl
 800ac7c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ac80:	f84e 3b04 	str.w	r3, [lr], #4
 800ac84:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ac88:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ac8c:	f8be 3000 	ldrh.w	r3, [lr]
 800ac90:	4562      	cmp	r2, ip
 800ac92:	fb09 330a 	mla	r3, r9, sl, r3
 800ac96:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ac9a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ac9e:	d8e5      	bhi.n	800ac6c <__multiply+0x108>
 800aca0:	9f01      	ldr	r7, [sp, #4]
 800aca2:	51eb      	str	r3, [r5, r7]
 800aca4:	3504      	adds	r5, #4
 800aca6:	e79a      	b.n	800abde <__multiply+0x7a>
 800aca8:	3e01      	subs	r6, #1
 800acaa:	e79c      	b.n	800abe6 <__multiply+0x82>
 800acac:	0800c636 	.word	0x0800c636
 800acb0:	0800c6a7 	.word	0x0800c6a7

0800acb4 <__pow5mult>:
 800acb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acb8:	4615      	mov	r5, r2
 800acba:	f012 0203 	ands.w	r2, r2, #3
 800acbe:	4607      	mov	r7, r0
 800acc0:	460e      	mov	r6, r1
 800acc2:	d007      	beq.n	800acd4 <__pow5mult+0x20>
 800acc4:	4c25      	ldr	r4, [pc, #148]	@ (800ad5c <__pow5mult+0xa8>)
 800acc6:	3a01      	subs	r2, #1
 800acc8:	2300      	movs	r3, #0
 800acca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800acce:	f7ff fe57 	bl	800a980 <__multadd>
 800acd2:	4606      	mov	r6, r0
 800acd4:	10ad      	asrs	r5, r5, #2
 800acd6:	d03d      	beq.n	800ad54 <__pow5mult+0xa0>
 800acd8:	69fc      	ldr	r4, [r7, #28]
 800acda:	b97c      	cbnz	r4, 800acfc <__pow5mult+0x48>
 800acdc:	2010      	movs	r0, #16
 800acde:	f7ff fd25 	bl	800a72c <malloc>
 800ace2:	4602      	mov	r2, r0
 800ace4:	61f8      	str	r0, [r7, #28]
 800ace6:	b928      	cbnz	r0, 800acf4 <__pow5mult+0x40>
 800ace8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800acec:	4b1c      	ldr	r3, [pc, #112]	@ (800ad60 <__pow5mult+0xac>)
 800acee:	481d      	ldr	r0, [pc, #116]	@ (800ad64 <__pow5mult+0xb0>)
 800acf0:	f000 fd3c 	bl	800b76c <__assert_func>
 800acf4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800acf8:	6004      	str	r4, [r0, #0]
 800acfa:	60c4      	str	r4, [r0, #12]
 800acfc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ad00:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ad04:	b94c      	cbnz	r4, 800ad1a <__pow5mult+0x66>
 800ad06:	f240 2171 	movw	r1, #625	@ 0x271
 800ad0a:	4638      	mov	r0, r7
 800ad0c:	f7ff ff14 	bl	800ab38 <__i2b>
 800ad10:	2300      	movs	r3, #0
 800ad12:	4604      	mov	r4, r0
 800ad14:	f8c8 0008 	str.w	r0, [r8, #8]
 800ad18:	6003      	str	r3, [r0, #0]
 800ad1a:	f04f 0900 	mov.w	r9, #0
 800ad1e:	07eb      	lsls	r3, r5, #31
 800ad20:	d50a      	bpl.n	800ad38 <__pow5mult+0x84>
 800ad22:	4631      	mov	r1, r6
 800ad24:	4622      	mov	r2, r4
 800ad26:	4638      	mov	r0, r7
 800ad28:	f7ff ff1c 	bl	800ab64 <__multiply>
 800ad2c:	4680      	mov	r8, r0
 800ad2e:	4631      	mov	r1, r6
 800ad30:	4638      	mov	r0, r7
 800ad32:	f7ff fe03 	bl	800a93c <_Bfree>
 800ad36:	4646      	mov	r6, r8
 800ad38:	106d      	asrs	r5, r5, #1
 800ad3a:	d00b      	beq.n	800ad54 <__pow5mult+0xa0>
 800ad3c:	6820      	ldr	r0, [r4, #0]
 800ad3e:	b938      	cbnz	r0, 800ad50 <__pow5mult+0x9c>
 800ad40:	4622      	mov	r2, r4
 800ad42:	4621      	mov	r1, r4
 800ad44:	4638      	mov	r0, r7
 800ad46:	f7ff ff0d 	bl	800ab64 <__multiply>
 800ad4a:	6020      	str	r0, [r4, #0]
 800ad4c:	f8c0 9000 	str.w	r9, [r0]
 800ad50:	4604      	mov	r4, r0
 800ad52:	e7e4      	b.n	800ad1e <__pow5mult+0x6a>
 800ad54:	4630      	mov	r0, r6
 800ad56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad5a:	bf00      	nop
 800ad5c:	0800c700 	.word	0x0800c700
 800ad60:	0800c5c7 	.word	0x0800c5c7
 800ad64:	0800c6a7 	.word	0x0800c6a7

0800ad68 <__lshift>:
 800ad68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad6c:	460c      	mov	r4, r1
 800ad6e:	4607      	mov	r7, r0
 800ad70:	4691      	mov	r9, r2
 800ad72:	6923      	ldr	r3, [r4, #16]
 800ad74:	6849      	ldr	r1, [r1, #4]
 800ad76:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ad7a:	68a3      	ldr	r3, [r4, #8]
 800ad7c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ad80:	f108 0601 	add.w	r6, r8, #1
 800ad84:	42b3      	cmp	r3, r6
 800ad86:	db0b      	blt.n	800ada0 <__lshift+0x38>
 800ad88:	4638      	mov	r0, r7
 800ad8a:	f7ff fd97 	bl	800a8bc <_Balloc>
 800ad8e:	4605      	mov	r5, r0
 800ad90:	b948      	cbnz	r0, 800ada6 <__lshift+0x3e>
 800ad92:	4602      	mov	r2, r0
 800ad94:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ad98:	4b27      	ldr	r3, [pc, #156]	@ (800ae38 <__lshift+0xd0>)
 800ad9a:	4828      	ldr	r0, [pc, #160]	@ (800ae3c <__lshift+0xd4>)
 800ad9c:	f000 fce6 	bl	800b76c <__assert_func>
 800ada0:	3101      	adds	r1, #1
 800ada2:	005b      	lsls	r3, r3, #1
 800ada4:	e7ee      	b.n	800ad84 <__lshift+0x1c>
 800ada6:	2300      	movs	r3, #0
 800ada8:	f100 0114 	add.w	r1, r0, #20
 800adac:	f100 0210 	add.w	r2, r0, #16
 800adb0:	4618      	mov	r0, r3
 800adb2:	4553      	cmp	r3, sl
 800adb4:	db33      	blt.n	800ae1e <__lshift+0xb6>
 800adb6:	6920      	ldr	r0, [r4, #16]
 800adb8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800adbc:	f104 0314 	add.w	r3, r4, #20
 800adc0:	f019 091f 	ands.w	r9, r9, #31
 800adc4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800adc8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800adcc:	d02b      	beq.n	800ae26 <__lshift+0xbe>
 800adce:	468a      	mov	sl, r1
 800add0:	2200      	movs	r2, #0
 800add2:	f1c9 0e20 	rsb	lr, r9, #32
 800add6:	6818      	ldr	r0, [r3, #0]
 800add8:	fa00 f009 	lsl.w	r0, r0, r9
 800addc:	4310      	orrs	r0, r2
 800adde:	f84a 0b04 	str.w	r0, [sl], #4
 800ade2:	f853 2b04 	ldr.w	r2, [r3], #4
 800ade6:	459c      	cmp	ip, r3
 800ade8:	fa22 f20e 	lsr.w	r2, r2, lr
 800adec:	d8f3      	bhi.n	800add6 <__lshift+0x6e>
 800adee:	ebac 0304 	sub.w	r3, ip, r4
 800adf2:	3b15      	subs	r3, #21
 800adf4:	f023 0303 	bic.w	r3, r3, #3
 800adf8:	3304      	adds	r3, #4
 800adfa:	f104 0015 	add.w	r0, r4, #21
 800adfe:	4584      	cmp	ip, r0
 800ae00:	bf38      	it	cc
 800ae02:	2304      	movcc	r3, #4
 800ae04:	50ca      	str	r2, [r1, r3]
 800ae06:	b10a      	cbz	r2, 800ae0c <__lshift+0xa4>
 800ae08:	f108 0602 	add.w	r6, r8, #2
 800ae0c:	3e01      	subs	r6, #1
 800ae0e:	4638      	mov	r0, r7
 800ae10:	4621      	mov	r1, r4
 800ae12:	612e      	str	r6, [r5, #16]
 800ae14:	f7ff fd92 	bl	800a93c <_Bfree>
 800ae18:	4628      	mov	r0, r5
 800ae1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae1e:	f842 0f04 	str.w	r0, [r2, #4]!
 800ae22:	3301      	adds	r3, #1
 800ae24:	e7c5      	b.n	800adb2 <__lshift+0x4a>
 800ae26:	3904      	subs	r1, #4
 800ae28:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae2c:	459c      	cmp	ip, r3
 800ae2e:	f841 2f04 	str.w	r2, [r1, #4]!
 800ae32:	d8f9      	bhi.n	800ae28 <__lshift+0xc0>
 800ae34:	e7ea      	b.n	800ae0c <__lshift+0xa4>
 800ae36:	bf00      	nop
 800ae38:	0800c636 	.word	0x0800c636
 800ae3c:	0800c6a7 	.word	0x0800c6a7

0800ae40 <__mcmp>:
 800ae40:	4603      	mov	r3, r0
 800ae42:	690a      	ldr	r2, [r1, #16]
 800ae44:	6900      	ldr	r0, [r0, #16]
 800ae46:	b530      	push	{r4, r5, lr}
 800ae48:	1a80      	subs	r0, r0, r2
 800ae4a:	d10e      	bne.n	800ae6a <__mcmp+0x2a>
 800ae4c:	3314      	adds	r3, #20
 800ae4e:	3114      	adds	r1, #20
 800ae50:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ae54:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ae58:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ae5c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ae60:	4295      	cmp	r5, r2
 800ae62:	d003      	beq.n	800ae6c <__mcmp+0x2c>
 800ae64:	d205      	bcs.n	800ae72 <__mcmp+0x32>
 800ae66:	f04f 30ff 	mov.w	r0, #4294967295
 800ae6a:	bd30      	pop	{r4, r5, pc}
 800ae6c:	42a3      	cmp	r3, r4
 800ae6e:	d3f3      	bcc.n	800ae58 <__mcmp+0x18>
 800ae70:	e7fb      	b.n	800ae6a <__mcmp+0x2a>
 800ae72:	2001      	movs	r0, #1
 800ae74:	e7f9      	b.n	800ae6a <__mcmp+0x2a>
	...

0800ae78 <__mdiff>:
 800ae78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae7c:	4689      	mov	r9, r1
 800ae7e:	4606      	mov	r6, r0
 800ae80:	4611      	mov	r1, r2
 800ae82:	4648      	mov	r0, r9
 800ae84:	4614      	mov	r4, r2
 800ae86:	f7ff ffdb 	bl	800ae40 <__mcmp>
 800ae8a:	1e05      	subs	r5, r0, #0
 800ae8c:	d112      	bne.n	800aeb4 <__mdiff+0x3c>
 800ae8e:	4629      	mov	r1, r5
 800ae90:	4630      	mov	r0, r6
 800ae92:	f7ff fd13 	bl	800a8bc <_Balloc>
 800ae96:	4602      	mov	r2, r0
 800ae98:	b928      	cbnz	r0, 800aea6 <__mdiff+0x2e>
 800ae9a:	f240 2137 	movw	r1, #567	@ 0x237
 800ae9e:	4b3e      	ldr	r3, [pc, #248]	@ (800af98 <__mdiff+0x120>)
 800aea0:	483e      	ldr	r0, [pc, #248]	@ (800af9c <__mdiff+0x124>)
 800aea2:	f000 fc63 	bl	800b76c <__assert_func>
 800aea6:	2301      	movs	r3, #1
 800aea8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800aeac:	4610      	mov	r0, r2
 800aeae:	b003      	add	sp, #12
 800aeb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeb4:	bfbc      	itt	lt
 800aeb6:	464b      	movlt	r3, r9
 800aeb8:	46a1      	movlt	r9, r4
 800aeba:	4630      	mov	r0, r6
 800aebc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800aec0:	bfba      	itte	lt
 800aec2:	461c      	movlt	r4, r3
 800aec4:	2501      	movlt	r5, #1
 800aec6:	2500      	movge	r5, #0
 800aec8:	f7ff fcf8 	bl	800a8bc <_Balloc>
 800aecc:	4602      	mov	r2, r0
 800aece:	b918      	cbnz	r0, 800aed8 <__mdiff+0x60>
 800aed0:	f240 2145 	movw	r1, #581	@ 0x245
 800aed4:	4b30      	ldr	r3, [pc, #192]	@ (800af98 <__mdiff+0x120>)
 800aed6:	e7e3      	b.n	800aea0 <__mdiff+0x28>
 800aed8:	f100 0b14 	add.w	fp, r0, #20
 800aedc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800aee0:	f109 0310 	add.w	r3, r9, #16
 800aee4:	60c5      	str	r5, [r0, #12]
 800aee6:	f04f 0c00 	mov.w	ip, #0
 800aeea:	f109 0514 	add.w	r5, r9, #20
 800aeee:	46d9      	mov	r9, fp
 800aef0:	6926      	ldr	r6, [r4, #16]
 800aef2:	f104 0e14 	add.w	lr, r4, #20
 800aef6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800aefa:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800aefe:	9301      	str	r3, [sp, #4]
 800af00:	9b01      	ldr	r3, [sp, #4]
 800af02:	f85e 0b04 	ldr.w	r0, [lr], #4
 800af06:	f853 af04 	ldr.w	sl, [r3, #4]!
 800af0a:	b281      	uxth	r1, r0
 800af0c:	9301      	str	r3, [sp, #4]
 800af0e:	fa1f f38a 	uxth.w	r3, sl
 800af12:	1a5b      	subs	r3, r3, r1
 800af14:	0c00      	lsrs	r0, r0, #16
 800af16:	4463      	add	r3, ip
 800af18:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800af1c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800af20:	b29b      	uxth	r3, r3
 800af22:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800af26:	4576      	cmp	r6, lr
 800af28:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800af2c:	f849 3b04 	str.w	r3, [r9], #4
 800af30:	d8e6      	bhi.n	800af00 <__mdiff+0x88>
 800af32:	1b33      	subs	r3, r6, r4
 800af34:	3b15      	subs	r3, #21
 800af36:	f023 0303 	bic.w	r3, r3, #3
 800af3a:	3415      	adds	r4, #21
 800af3c:	3304      	adds	r3, #4
 800af3e:	42a6      	cmp	r6, r4
 800af40:	bf38      	it	cc
 800af42:	2304      	movcc	r3, #4
 800af44:	441d      	add	r5, r3
 800af46:	445b      	add	r3, fp
 800af48:	461e      	mov	r6, r3
 800af4a:	462c      	mov	r4, r5
 800af4c:	4544      	cmp	r4, r8
 800af4e:	d30e      	bcc.n	800af6e <__mdiff+0xf6>
 800af50:	f108 0103 	add.w	r1, r8, #3
 800af54:	1b49      	subs	r1, r1, r5
 800af56:	f021 0103 	bic.w	r1, r1, #3
 800af5a:	3d03      	subs	r5, #3
 800af5c:	45a8      	cmp	r8, r5
 800af5e:	bf38      	it	cc
 800af60:	2100      	movcc	r1, #0
 800af62:	440b      	add	r3, r1
 800af64:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800af68:	b199      	cbz	r1, 800af92 <__mdiff+0x11a>
 800af6a:	6117      	str	r7, [r2, #16]
 800af6c:	e79e      	b.n	800aeac <__mdiff+0x34>
 800af6e:	46e6      	mov	lr, ip
 800af70:	f854 1b04 	ldr.w	r1, [r4], #4
 800af74:	fa1f fc81 	uxth.w	ip, r1
 800af78:	44f4      	add	ip, lr
 800af7a:	0c08      	lsrs	r0, r1, #16
 800af7c:	4471      	add	r1, lr
 800af7e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800af82:	b289      	uxth	r1, r1
 800af84:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800af88:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800af8c:	f846 1b04 	str.w	r1, [r6], #4
 800af90:	e7dc      	b.n	800af4c <__mdiff+0xd4>
 800af92:	3f01      	subs	r7, #1
 800af94:	e7e6      	b.n	800af64 <__mdiff+0xec>
 800af96:	bf00      	nop
 800af98:	0800c636 	.word	0x0800c636
 800af9c:	0800c6a7 	.word	0x0800c6a7

0800afa0 <__ulp>:
 800afa0:	4b0e      	ldr	r3, [pc, #56]	@ (800afdc <__ulp+0x3c>)
 800afa2:	400b      	ands	r3, r1
 800afa4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	dc08      	bgt.n	800afbe <__ulp+0x1e>
 800afac:	425b      	negs	r3, r3
 800afae:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800afb2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800afb6:	da04      	bge.n	800afc2 <__ulp+0x22>
 800afb8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800afbc:	4113      	asrs	r3, r2
 800afbe:	2200      	movs	r2, #0
 800afc0:	e008      	b.n	800afd4 <__ulp+0x34>
 800afc2:	f1a2 0314 	sub.w	r3, r2, #20
 800afc6:	2b1e      	cmp	r3, #30
 800afc8:	bfd6      	itet	le
 800afca:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800afce:	2201      	movgt	r2, #1
 800afd0:	40da      	lsrle	r2, r3
 800afd2:	2300      	movs	r3, #0
 800afd4:	4619      	mov	r1, r3
 800afd6:	4610      	mov	r0, r2
 800afd8:	4770      	bx	lr
 800afda:	bf00      	nop
 800afdc:	7ff00000 	.word	0x7ff00000

0800afe0 <__b2d>:
 800afe0:	6902      	ldr	r2, [r0, #16]
 800afe2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afe4:	f100 0614 	add.w	r6, r0, #20
 800afe8:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800afec:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800aff0:	4f1e      	ldr	r7, [pc, #120]	@ (800b06c <__b2d+0x8c>)
 800aff2:	4620      	mov	r0, r4
 800aff4:	f7ff fd54 	bl	800aaa0 <__hi0bits>
 800aff8:	4603      	mov	r3, r0
 800affa:	f1c0 0020 	rsb	r0, r0, #32
 800affe:	2b0a      	cmp	r3, #10
 800b000:	f1a2 0504 	sub.w	r5, r2, #4
 800b004:	6008      	str	r0, [r1, #0]
 800b006:	dc12      	bgt.n	800b02e <__b2d+0x4e>
 800b008:	42ae      	cmp	r6, r5
 800b00a:	bf2c      	ite	cs
 800b00c:	2200      	movcs	r2, #0
 800b00e:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800b012:	f1c3 0c0b 	rsb	ip, r3, #11
 800b016:	3315      	adds	r3, #21
 800b018:	fa24 fe0c 	lsr.w	lr, r4, ip
 800b01c:	fa04 f303 	lsl.w	r3, r4, r3
 800b020:	fa22 f20c 	lsr.w	r2, r2, ip
 800b024:	ea4e 0107 	orr.w	r1, lr, r7
 800b028:	431a      	orrs	r2, r3
 800b02a:	4610      	mov	r0, r2
 800b02c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b02e:	42ae      	cmp	r6, r5
 800b030:	bf36      	itet	cc
 800b032:	f1a2 0508 	subcc.w	r5, r2, #8
 800b036:	2200      	movcs	r2, #0
 800b038:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800b03c:	3b0b      	subs	r3, #11
 800b03e:	d012      	beq.n	800b066 <__b2d+0x86>
 800b040:	f1c3 0720 	rsb	r7, r3, #32
 800b044:	fa22 f107 	lsr.w	r1, r2, r7
 800b048:	409c      	lsls	r4, r3
 800b04a:	430c      	orrs	r4, r1
 800b04c:	42b5      	cmp	r5, r6
 800b04e:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800b052:	bf94      	ite	ls
 800b054:	2400      	movls	r4, #0
 800b056:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800b05a:	409a      	lsls	r2, r3
 800b05c:	40fc      	lsrs	r4, r7
 800b05e:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800b062:	4322      	orrs	r2, r4
 800b064:	e7e1      	b.n	800b02a <__b2d+0x4a>
 800b066:	ea44 0107 	orr.w	r1, r4, r7
 800b06a:	e7de      	b.n	800b02a <__b2d+0x4a>
 800b06c:	3ff00000 	.word	0x3ff00000

0800b070 <__d2b>:
 800b070:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800b074:	2101      	movs	r1, #1
 800b076:	4690      	mov	r8, r2
 800b078:	4699      	mov	r9, r3
 800b07a:	9e08      	ldr	r6, [sp, #32]
 800b07c:	f7ff fc1e 	bl	800a8bc <_Balloc>
 800b080:	4604      	mov	r4, r0
 800b082:	b930      	cbnz	r0, 800b092 <__d2b+0x22>
 800b084:	4602      	mov	r2, r0
 800b086:	f240 310f 	movw	r1, #783	@ 0x30f
 800b08a:	4b23      	ldr	r3, [pc, #140]	@ (800b118 <__d2b+0xa8>)
 800b08c:	4823      	ldr	r0, [pc, #140]	@ (800b11c <__d2b+0xac>)
 800b08e:	f000 fb6d 	bl	800b76c <__assert_func>
 800b092:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b096:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b09a:	b10d      	cbz	r5, 800b0a0 <__d2b+0x30>
 800b09c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b0a0:	9301      	str	r3, [sp, #4]
 800b0a2:	f1b8 0300 	subs.w	r3, r8, #0
 800b0a6:	d024      	beq.n	800b0f2 <__d2b+0x82>
 800b0a8:	4668      	mov	r0, sp
 800b0aa:	9300      	str	r3, [sp, #0]
 800b0ac:	f7ff fd17 	bl	800aade <__lo0bits>
 800b0b0:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b0b4:	b1d8      	cbz	r0, 800b0ee <__d2b+0x7e>
 800b0b6:	f1c0 0320 	rsb	r3, r0, #32
 800b0ba:	fa02 f303 	lsl.w	r3, r2, r3
 800b0be:	430b      	orrs	r3, r1
 800b0c0:	40c2      	lsrs	r2, r0
 800b0c2:	6163      	str	r3, [r4, #20]
 800b0c4:	9201      	str	r2, [sp, #4]
 800b0c6:	9b01      	ldr	r3, [sp, #4]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	bf0c      	ite	eq
 800b0cc:	2201      	moveq	r2, #1
 800b0ce:	2202      	movne	r2, #2
 800b0d0:	61a3      	str	r3, [r4, #24]
 800b0d2:	6122      	str	r2, [r4, #16]
 800b0d4:	b1ad      	cbz	r5, 800b102 <__d2b+0x92>
 800b0d6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b0da:	4405      	add	r5, r0
 800b0dc:	6035      	str	r5, [r6, #0]
 800b0de:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b0e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0e4:	6018      	str	r0, [r3, #0]
 800b0e6:	4620      	mov	r0, r4
 800b0e8:	b002      	add	sp, #8
 800b0ea:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800b0ee:	6161      	str	r1, [r4, #20]
 800b0f0:	e7e9      	b.n	800b0c6 <__d2b+0x56>
 800b0f2:	a801      	add	r0, sp, #4
 800b0f4:	f7ff fcf3 	bl	800aade <__lo0bits>
 800b0f8:	9b01      	ldr	r3, [sp, #4]
 800b0fa:	2201      	movs	r2, #1
 800b0fc:	6163      	str	r3, [r4, #20]
 800b0fe:	3020      	adds	r0, #32
 800b100:	e7e7      	b.n	800b0d2 <__d2b+0x62>
 800b102:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b106:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b10a:	6030      	str	r0, [r6, #0]
 800b10c:	6918      	ldr	r0, [r3, #16]
 800b10e:	f7ff fcc7 	bl	800aaa0 <__hi0bits>
 800b112:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b116:	e7e4      	b.n	800b0e2 <__d2b+0x72>
 800b118:	0800c636 	.word	0x0800c636
 800b11c:	0800c6a7 	.word	0x0800c6a7

0800b120 <__ratio>:
 800b120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b124:	b085      	sub	sp, #20
 800b126:	e9cd 1000 	strd	r1, r0, [sp]
 800b12a:	a902      	add	r1, sp, #8
 800b12c:	f7ff ff58 	bl	800afe0 <__b2d>
 800b130:	468b      	mov	fp, r1
 800b132:	4606      	mov	r6, r0
 800b134:	460f      	mov	r7, r1
 800b136:	9800      	ldr	r0, [sp, #0]
 800b138:	a903      	add	r1, sp, #12
 800b13a:	f7ff ff51 	bl	800afe0 <__b2d>
 800b13e:	460d      	mov	r5, r1
 800b140:	9b01      	ldr	r3, [sp, #4]
 800b142:	4689      	mov	r9, r1
 800b144:	6919      	ldr	r1, [r3, #16]
 800b146:	9b00      	ldr	r3, [sp, #0]
 800b148:	4604      	mov	r4, r0
 800b14a:	691b      	ldr	r3, [r3, #16]
 800b14c:	4630      	mov	r0, r6
 800b14e:	1ac9      	subs	r1, r1, r3
 800b150:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b154:	1a9b      	subs	r3, r3, r2
 800b156:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	bfcd      	iteet	gt
 800b15e:	463a      	movgt	r2, r7
 800b160:	462a      	movle	r2, r5
 800b162:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b166:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800b16a:	bfd8      	it	le
 800b16c:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b170:	464b      	mov	r3, r9
 800b172:	4622      	mov	r2, r4
 800b174:	4659      	mov	r1, fp
 800b176:	f7f5 fae3 	bl	8000740 <__aeabi_ddiv>
 800b17a:	b005      	add	sp, #20
 800b17c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b180 <__copybits>:
 800b180:	3901      	subs	r1, #1
 800b182:	b570      	push	{r4, r5, r6, lr}
 800b184:	1149      	asrs	r1, r1, #5
 800b186:	6914      	ldr	r4, [r2, #16]
 800b188:	3101      	adds	r1, #1
 800b18a:	f102 0314 	add.w	r3, r2, #20
 800b18e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b192:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b196:	1f05      	subs	r5, r0, #4
 800b198:	42a3      	cmp	r3, r4
 800b19a:	d30c      	bcc.n	800b1b6 <__copybits+0x36>
 800b19c:	1aa3      	subs	r3, r4, r2
 800b19e:	3b11      	subs	r3, #17
 800b1a0:	f023 0303 	bic.w	r3, r3, #3
 800b1a4:	3211      	adds	r2, #17
 800b1a6:	42a2      	cmp	r2, r4
 800b1a8:	bf88      	it	hi
 800b1aa:	2300      	movhi	r3, #0
 800b1ac:	4418      	add	r0, r3
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	4288      	cmp	r0, r1
 800b1b2:	d305      	bcc.n	800b1c0 <__copybits+0x40>
 800b1b4:	bd70      	pop	{r4, r5, r6, pc}
 800b1b6:	f853 6b04 	ldr.w	r6, [r3], #4
 800b1ba:	f845 6f04 	str.w	r6, [r5, #4]!
 800b1be:	e7eb      	b.n	800b198 <__copybits+0x18>
 800b1c0:	f840 3b04 	str.w	r3, [r0], #4
 800b1c4:	e7f4      	b.n	800b1b0 <__copybits+0x30>

0800b1c6 <__any_on>:
 800b1c6:	f100 0214 	add.w	r2, r0, #20
 800b1ca:	6900      	ldr	r0, [r0, #16]
 800b1cc:	114b      	asrs	r3, r1, #5
 800b1ce:	4298      	cmp	r0, r3
 800b1d0:	b510      	push	{r4, lr}
 800b1d2:	db11      	blt.n	800b1f8 <__any_on+0x32>
 800b1d4:	dd0a      	ble.n	800b1ec <__any_on+0x26>
 800b1d6:	f011 011f 	ands.w	r1, r1, #31
 800b1da:	d007      	beq.n	800b1ec <__any_on+0x26>
 800b1dc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b1e0:	fa24 f001 	lsr.w	r0, r4, r1
 800b1e4:	fa00 f101 	lsl.w	r1, r0, r1
 800b1e8:	428c      	cmp	r4, r1
 800b1ea:	d10b      	bne.n	800b204 <__any_on+0x3e>
 800b1ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b1f0:	4293      	cmp	r3, r2
 800b1f2:	d803      	bhi.n	800b1fc <__any_on+0x36>
 800b1f4:	2000      	movs	r0, #0
 800b1f6:	bd10      	pop	{r4, pc}
 800b1f8:	4603      	mov	r3, r0
 800b1fa:	e7f7      	b.n	800b1ec <__any_on+0x26>
 800b1fc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b200:	2900      	cmp	r1, #0
 800b202:	d0f5      	beq.n	800b1f0 <__any_on+0x2a>
 800b204:	2001      	movs	r0, #1
 800b206:	e7f6      	b.n	800b1f6 <__any_on+0x30>

0800b208 <_strtol_l.constprop.0>:
 800b208:	2b24      	cmp	r3, #36	@ 0x24
 800b20a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b20e:	4686      	mov	lr, r0
 800b210:	4690      	mov	r8, r2
 800b212:	d801      	bhi.n	800b218 <_strtol_l.constprop.0+0x10>
 800b214:	2b01      	cmp	r3, #1
 800b216:	d106      	bne.n	800b226 <_strtol_l.constprop.0+0x1e>
 800b218:	f7fe f85a 	bl	80092d0 <__errno>
 800b21c:	2316      	movs	r3, #22
 800b21e:	6003      	str	r3, [r0, #0]
 800b220:	2000      	movs	r0, #0
 800b222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b226:	460d      	mov	r5, r1
 800b228:	4833      	ldr	r0, [pc, #204]	@ (800b2f8 <_strtol_l.constprop.0+0xf0>)
 800b22a:	462a      	mov	r2, r5
 800b22c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b230:	5d06      	ldrb	r6, [r0, r4]
 800b232:	f016 0608 	ands.w	r6, r6, #8
 800b236:	d1f8      	bne.n	800b22a <_strtol_l.constprop.0+0x22>
 800b238:	2c2d      	cmp	r4, #45	@ 0x2d
 800b23a:	d12d      	bne.n	800b298 <_strtol_l.constprop.0+0x90>
 800b23c:	2601      	movs	r6, #1
 800b23e:	782c      	ldrb	r4, [r5, #0]
 800b240:	1c95      	adds	r5, r2, #2
 800b242:	f033 0210 	bics.w	r2, r3, #16
 800b246:	d109      	bne.n	800b25c <_strtol_l.constprop.0+0x54>
 800b248:	2c30      	cmp	r4, #48	@ 0x30
 800b24a:	d12a      	bne.n	800b2a2 <_strtol_l.constprop.0+0x9a>
 800b24c:	782a      	ldrb	r2, [r5, #0]
 800b24e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b252:	2a58      	cmp	r2, #88	@ 0x58
 800b254:	d125      	bne.n	800b2a2 <_strtol_l.constprop.0+0x9a>
 800b256:	2310      	movs	r3, #16
 800b258:	786c      	ldrb	r4, [r5, #1]
 800b25a:	3502      	adds	r5, #2
 800b25c:	2200      	movs	r2, #0
 800b25e:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b262:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b266:	fbbc f9f3 	udiv	r9, ip, r3
 800b26a:	4610      	mov	r0, r2
 800b26c:	fb03 ca19 	mls	sl, r3, r9, ip
 800b270:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b274:	2f09      	cmp	r7, #9
 800b276:	d81b      	bhi.n	800b2b0 <_strtol_l.constprop.0+0xa8>
 800b278:	463c      	mov	r4, r7
 800b27a:	42a3      	cmp	r3, r4
 800b27c:	dd27      	ble.n	800b2ce <_strtol_l.constprop.0+0xc6>
 800b27e:	1c57      	adds	r7, r2, #1
 800b280:	d007      	beq.n	800b292 <_strtol_l.constprop.0+0x8a>
 800b282:	4581      	cmp	r9, r0
 800b284:	d320      	bcc.n	800b2c8 <_strtol_l.constprop.0+0xc0>
 800b286:	d101      	bne.n	800b28c <_strtol_l.constprop.0+0x84>
 800b288:	45a2      	cmp	sl, r4
 800b28a:	db1d      	blt.n	800b2c8 <_strtol_l.constprop.0+0xc0>
 800b28c:	2201      	movs	r2, #1
 800b28e:	fb00 4003 	mla	r0, r0, r3, r4
 800b292:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b296:	e7eb      	b.n	800b270 <_strtol_l.constprop.0+0x68>
 800b298:	2c2b      	cmp	r4, #43	@ 0x2b
 800b29a:	bf04      	itt	eq
 800b29c:	782c      	ldrbeq	r4, [r5, #0]
 800b29e:	1c95      	addeq	r5, r2, #2
 800b2a0:	e7cf      	b.n	800b242 <_strtol_l.constprop.0+0x3a>
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d1da      	bne.n	800b25c <_strtol_l.constprop.0+0x54>
 800b2a6:	2c30      	cmp	r4, #48	@ 0x30
 800b2a8:	bf0c      	ite	eq
 800b2aa:	2308      	moveq	r3, #8
 800b2ac:	230a      	movne	r3, #10
 800b2ae:	e7d5      	b.n	800b25c <_strtol_l.constprop.0+0x54>
 800b2b0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b2b4:	2f19      	cmp	r7, #25
 800b2b6:	d801      	bhi.n	800b2bc <_strtol_l.constprop.0+0xb4>
 800b2b8:	3c37      	subs	r4, #55	@ 0x37
 800b2ba:	e7de      	b.n	800b27a <_strtol_l.constprop.0+0x72>
 800b2bc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b2c0:	2f19      	cmp	r7, #25
 800b2c2:	d804      	bhi.n	800b2ce <_strtol_l.constprop.0+0xc6>
 800b2c4:	3c57      	subs	r4, #87	@ 0x57
 800b2c6:	e7d8      	b.n	800b27a <_strtol_l.constprop.0+0x72>
 800b2c8:	f04f 32ff 	mov.w	r2, #4294967295
 800b2cc:	e7e1      	b.n	800b292 <_strtol_l.constprop.0+0x8a>
 800b2ce:	1c53      	adds	r3, r2, #1
 800b2d0:	d108      	bne.n	800b2e4 <_strtol_l.constprop.0+0xdc>
 800b2d2:	2322      	movs	r3, #34	@ 0x22
 800b2d4:	4660      	mov	r0, ip
 800b2d6:	f8ce 3000 	str.w	r3, [lr]
 800b2da:	f1b8 0f00 	cmp.w	r8, #0
 800b2de:	d0a0      	beq.n	800b222 <_strtol_l.constprop.0+0x1a>
 800b2e0:	1e69      	subs	r1, r5, #1
 800b2e2:	e006      	b.n	800b2f2 <_strtol_l.constprop.0+0xea>
 800b2e4:	b106      	cbz	r6, 800b2e8 <_strtol_l.constprop.0+0xe0>
 800b2e6:	4240      	negs	r0, r0
 800b2e8:	f1b8 0f00 	cmp.w	r8, #0
 800b2ec:	d099      	beq.n	800b222 <_strtol_l.constprop.0+0x1a>
 800b2ee:	2a00      	cmp	r2, #0
 800b2f0:	d1f6      	bne.n	800b2e0 <_strtol_l.constprop.0+0xd8>
 800b2f2:	f8c8 1000 	str.w	r1, [r8]
 800b2f6:	e794      	b.n	800b222 <_strtol_l.constprop.0+0x1a>
 800b2f8:	0800c479 	.word	0x0800c479

0800b2fc <_strtol_r>:
 800b2fc:	f7ff bf84 	b.w	800b208 <_strtol_l.constprop.0>

0800b300 <__ascii_wctomb>:
 800b300:	4603      	mov	r3, r0
 800b302:	4608      	mov	r0, r1
 800b304:	b141      	cbz	r1, 800b318 <__ascii_wctomb+0x18>
 800b306:	2aff      	cmp	r2, #255	@ 0xff
 800b308:	d904      	bls.n	800b314 <__ascii_wctomb+0x14>
 800b30a:	228a      	movs	r2, #138	@ 0x8a
 800b30c:	f04f 30ff 	mov.w	r0, #4294967295
 800b310:	601a      	str	r2, [r3, #0]
 800b312:	4770      	bx	lr
 800b314:	2001      	movs	r0, #1
 800b316:	700a      	strb	r2, [r1, #0]
 800b318:	4770      	bx	lr

0800b31a <__ssputs_r>:
 800b31a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b31e:	461f      	mov	r7, r3
 800b320:	688e      	ldr	r6, [r1, #8]
 800b322:	4682      	mov	sl, r0
 800b324:	42be      	cmp	r6, r7
 800b326:	460c      	mov	r4, r1
 800b328:	4690      	mov	r8, r2
 800b32a:	680b      	ldr	r3, [r1, #0]
 800b32c:	d82d      	bhi.n	800b38a <__ssputs_r+0x70>
 800b32e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b332:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b336:	d026      	beq.n	800b386 <__ssputs_r+0x6c>
 800b338:	6965      	ldr	r5, [r4, #20]
 800b33a:	6909      	ldr	r1, [r1, #16]
 800b33c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b340:	eba3 0901 	sub.w	r9, r3, r1
 800b344:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b348:	1c7b      	adds	r3, r7, #1
 800b34a:	444b      	add	r3, r9
 800b34c:	106d      	asrs	r5, r5, #1
 800b34e:	429d      	cmp	r5, r3
 800b350:	bf38      	it	cc
 800b352:	461d      	movcc	r5, r3
 800b354:	0553      	lsls	r3, r2, #21
 800b356:	d527      	bpl.n	800b3a8 <__ssputs_r+0x8e>
 800b358:	4629      	mov	r1, r5
 800b35a:	f7ff fa11 	bl	800a780 <_malloc_r>
 800b35e:	4606      	mov	r6, r0
 800b360:	b360      	cbz	r0, 800b3bc <__ssputs_r+0xa2>
 800b362:	464a      	mov	r2, r9
 800b364:	6921      	ldr	r1, [r4, #16]
 800b366:	f7fd fff6 	bl	8009356 <memcpy>
 800b36a:	89a3      	ldrh	r3, [r4, #12]
 800b36c:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b370:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b374:	81a3      	strh	r3, [r4, #12]
 800b376:	6126      	str	r6, [r4, #16]
 800b378:	444e      	add	r6, r9
 800b37a:	6026      	str	r6, [r4, #0]
 800b37c:	463e      	mov	r6, r7
 800b37e:	6165      	str	r5, [r4, #20]
 800b380:	eba5 0509 	sub.w	r5, r5, r9
 800b384:	60a5      	str	r5, [r4, #8]
 800b386:	42be      	cmp	r6, r7
 800b388:	d900      	bls.n	800b38c <__ssputs_r+0x72>
 800b38a:	463e      	mov	r6, r7
 800b38c:	4632      	mov	r2, r6
 800b38e:	4641      	mov	r1, r8
 800b390:	6820      	ldr	r0, [r4, #0]
 800b392:	f000 f9c1 	bl	800b718 <memmove>
 800b396:	2000      	movs	r0, #0
 800b398:	68a3      	ldr	r3, [r4, #8]
 800b39a:	1b9b      	subs	r3, r3, r6
 800b39c:	60a3      	str	r3, [r4, #8]
 800b39e:	6823      	ldr	r3, [r4, #0]
 800b3a0:	4433      	add	r3, r6
 800b3a2:	6023      	str	r3, [r4, #0]
 800b3a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3a8:	462a      	mov	r2, r5
 800b3aa:	f000 fa11 	bl	800b7d0 <_realloc_r>
 800b3ae:	4606      	mov	r6, r0
 800b3b0:	2800      	cmp	r0, #0
 800b3b2:	d1e0      	bne.n	800b376 <__ssputs_r+0x5c>
 800b3b4:	4650      	mov	r0, sl
 800b3b6:	6921      	ldr	r1, [r4, #16]
 800b3b8:	f7fe fe36 	bl	800a028 <_free_r>
 800b3bc:	230c      	movs	r3, #12
 800b3be:	f8ca 3000 	str.w	r3, [sl]
 800b3c2:	89a3      	ldrh	r3, [r4, #12]
 800b3c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b3c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b3cc:	81a3      	strh	r3, [r4, #12]
 800b3ce:	e7e9      	b.n	800b3a4 <__ssputs_r+0x8a>

0800b3d0 <_svfiprintf_r>:
 800b3d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3d4:	4698      	mov	r8, r3
 800b3d6:	898b      	ldrh	r3, [r1, #12]
 800b3d8:	4607      	mov	r7, r0
 800b3da:	061b      	lsls	r3, r3, #24
 800b3dc:	460d      	mov	r5, r1
 800b3de:	4614      	mov	r4, r2
 800b3e0:	b09d      	sub	sp, #116	@ 0x74
 800b3e2:	d510      	bpl.n	800b406 <_svfiprintf_r+0x36>
 800b3e4:	690b      	ldr	r3, [r1, #16]
 800b3e6:	b973      	cbnz	r3, 800b406 <_svfiprintf_r+0x36>
 800b3e8:	2140      	movs	r1, #64	@ 0x40
 800b3ea:	f7ff f9c9 	bl	800a780 <_malloc_r>
 800b3ee:	6028      	str	r0, [r5, #0]
 800b3f0:	6128      	str	r0, [r5, #16]
 800b3f2:	b930      	cbnz	r0, 800b402 <_svfiprintf_r+0x32>
 800b3f4:	230c      	movs	r3, #12
 800b3f6:	603b      	str	r3, [r7, #0]
 800b3f8:	f04f 30ff 	mov.w	r0, #4294967295
 800b3fc:	b01d      	add	sp, #116	@ 0x74
 800b3fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b402:	2340      	movs	r3, #64	@ 0x40
 800b404:	616b      	str	r3, [r5, #20]
 800b406:	2300      	movs	r3, #0
 800b408:	9309      	str	r3, [sp, #36]	@ 0x24
 800b40a:	2320      	movs	r3, #32
 800b40c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b410:	2330      	movs	r3, #48	@ 0x30
 800b412:	f04f 0901 	mov.w	r9, #1
 800b416:	f8cd 800c 	str.w	r8, [sp, #12]
 800b41a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800b5b4 <_svfiprintf_r+0x1e4>
 800b41e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b422:	4623      	mov	r3, r4
 800b424:	469a      	mov	sl, r3
 800b426:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b42a:	b10a      	cbz	r2, 800b430 <_svfiprintf_r+0x60>
 800b42c:	2a25      	cmp	r2, #37	@ 0x25
 800b42e:	d1f9      	bne.n	800b424 <_svfiprintf_r+0x54>
 800b430:	ebba 0b04 	subs.w	fp, sl, r4
 800b434:	d00b      	beq.n	800b44e <_svfiprintf_r+0x7e>
 800b436:	465b      	mov	r3, fp
 800b438:	4622      	mov	r2, r4
 800b43a:	4629      	mov	r1, r5
 800b43c:	4638      	mov	r0, r7
 800b43e:	f7ff ff6c 	bl	800b31a <__ssputs_r>
 800b442:	3001      	adds	r0, #1
 800b444:	f000 80a7 	beq.w	800b596 <_svfiprintf_r+0x1c6>
 800b448:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b44a:	445a      	add	r2, fp
 800b44c:	9209      	str	r2, [sp, #36]	@ 0x24
 800b44e:	f89a 3000 	ldrb.w	r3, [sl]
 800b452:	2b00      	cmp	r3, #0
 800b454:	f000 809f 	beq.w	800b596 <_svfiprintf_r+0x1c6>
 800b458:	2300      	movs	r3, #0
 800b45a:	f04f 32ff 	mov.w	r2, #4294967295
 800b45e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b462:	f10a 0a01 	add.w	sl, sl, #1
 800b466:	9304      	str	r3, [sp, #16]
 800b468:	9307      	str	r3, [sp, #28]
 800b46a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b46e:	931a      	str	r3, [sp, #104]	@ 0x68
 800b470:	4654      	mov	r4, sl
 800b472:	2205      	movs	r2, #5
 800b474:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b478:	484e      	ldr	r0, [pc, #312]	@ (800b5b4 <_svfiprintf_r+0x1e4>)
 800b47a:	f7fd ff5e 	bl	800933a <memchr>
 800b47e:	9a04      	ldr	r2, [sp, #16]
 800b480:	b9d8      	cbnz	r0, 800b4ba <_svfiprintf_r+0xea>
 800b482:	06d0      	lsls	r0, r2, #27
 800b484:	bf44      	itt	mi
 800b486:	2320      	movmi	r3, #32
 800b488:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b48c:	0711      	lsls	r1, r2, #28
 800b48e:	bf44      	itt	mi
 800b490:	232b      	movmi	r3, #43	@ 0x2b
 800b492:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b496:	f89a 3000 	ldrb.w	r3, [sl]
 800b49a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b49c:	d015      	beq.n	800b4ca <_svfiprintf_r+0xfa>
 800b49e:	4654      	mov	r4, sl
 800b4a0:	2000      	movs	r0, #0
 800b4a2:	f04f 0c0a 	mov.w	ip, #10
 800b4a6:	9a07      	ldr	r2, [sp, #28]
 800b4a8:	4621      	mov	r1, r4
 800b4aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4ae:	3b30      	subs	r3, #48	@ 0x30
 800b4b0:	2b09      	cmp	r3, #9
 800b4b2:	d94b      	bls.n	800b54c <_svfiprintf_r+0x17c>
 800b4b4:	b1b0      	cbz	r0, 800b4e4 <_svfiprintf_r+0x114>
 800b4b6:	9207      	str	r2, [sp, #28]
 800b4b8:	e014      	b.n	800b4e4 <_svfiprintf_r+0x114>
 800b4ba:	eba0 0308 	sub.w	r3, r0, r8
 800b4be:	fa09 f303 	lsl.w	r3, r9, r3
 800b4c2:	4313      	orrs	r3, r2
 800b4c4:	46a2      	mov	sl, r4
 800b4c6:	9304      	str	r3, [sp, #16]
 800b4c8:	e7d2      	b.n	800b470 <_svfiprintf_r+0xa0>
 800b4ca:	9b03      	ldr	r3, [sp, #12]
 800b4cc:	1d19      	adds	r1, r3, #4
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	9103      	str	r1, [sp, #12]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	bfbb      	ittet	lt
 800b4d6:	425b      	neglt	r3, r3
 800b4d8:	f042 0202 	orrlt.w	r2, r2, #2
 800b4dc:	9307      	strge	r3, [sp, #28]
 800b4de:	9307      	strlt	r3, [sp, #28]
 800b4e0:	bfb8      	it	lt
 800b4e2:	9204      	strlt	r2, [sp, #16]
 800b4e4:	7823      	ldrb	r3, [r4, #0]
 800b4e6:	2b2e      	cmp	r3, #46	@ 0x2e
 800b4e8:	d10a      	bne.n	800b500 <_svfiprintf_r+0x130>
 800b4ea:	7863      	ldrb	r3, [r4, #1]
 800b4ec:	2b2a      	cmp	r3, #42	@ 0x2a
 800b4ee:	d132      	bne.n	800b556 <_svfiprintf_r+0x186>
 800b4f0:	9b03      	ldr	r3, [sp, #12]
 800b4f2:	3402      	adds	r4, #2
 800b4f4:	1d1a      	adds	r2, r3, #4
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	9203      	str	r2, [sp, #12]
 800b4fa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b4fe:	9305      	str	r3, [sp, #20]
 800b500:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800b5b8 <_svfiprintf_r+0x1e8>
 800b504:	2203      	movs	r2, #3
 800b506:	4650      	mov	r0, sl
 800b508:	7821      	ldrb	r1, [r4, #0]
 800b50a:	f7fd ff16 	bl	800933a <memchr>
 800b50e:	b138      	cbz	r0, 800b520 <_svfiprintf_r+0x150>
 800b510:	2240      	movs	r2, #64	@ 0x40
 800b512:	9b04      	ldr	r3, [sp, #16]
 800b514:	eba0 000a 	sub.w	r0, r0, sl
 800b518:	4082      	lsls	r2, r0
 800b51a:	4313      	orrs	r3, r2
 800b51c:	3401      	adds	r4, #1
 800b51e:	9304      	str	r3, [sp, #16]
 800b520:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b524:	2206      	movs	r2, #6
 800b526:	4825      	ldr	r0, [pc, #148]	@ (800b5bc <_svfiprintf_r+0x1ec>)
 800b528:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b52c:	f7fd ff05 	bl	800933a <memchr>
 800b530:	2800      	cmp	r0, #0
 800b532:	d036      	beq.n	800b5a2 <_svfiprintf_r+0x1d2>
 800b534:	4b22      	ldr	r3, [pc, #136]	@ (800b5c0 <_svfiprintf_r+0x1f0>)
 800b536:	bb1b      	cbnz	r3, 800b580 <_svfiprintf_r+0x1b0>
 800b538:	9b03      	ldr	r3, [sp, #12]
 800b53a:	3307      	adds	r3, #7
 800b53c:	f023 0307 	bic.w	r3, r3, #7
 800b540:	3308      	adds	r3, #8
 800b542:	9303      	str	r3, [sp, #12]
 800b544:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b546:	4433      	add	r3, r6
 800b548:	9309      	str	r3, [sp, #36]	@ 0x24
 800b54a:	e76a      	b.n	800b422 <_svfiprintf_r+0x52>
 800b54c:	460c      	mov	r4, r1
 800b54e:	2001      	movs	r0, #1
 800b550:	fb0c 3202 	mla	r2, ip, r2, r3
 800b554:	e7a8      	b.n	800b4a8 <_svfiprintf_r+0xd8>
 800b556:	2300      	movs	r3, #0
 800b558:	f04f 0c0a 	mov.w	ip, #10
 800b55c:	4619      	mov	r1, r3
 800b55e:	3401      	adds	r4, #1
 800b560:	9305      	str	r3, [sp, #20]
 800b562:	4620      	mov	r0, r4
 800b564:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b568:	3a30      	subs	r2, #48	@ 0x30
 800b56a:	2a09      	cmp	r2, #9
 800b56c:	d903      	bls.n	800b576 <_svfiprintf_r+0x1a6>
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d0c6      	beq.n	800b500 <_svfiprintf_r+0x130>
 800b572:	9105      	str	r1, [sp, #20]
 800b574:	e7c4      	b.n	800b500 <_svfiprintf_r+0x130>
 800b576:	4604      	mov	r4, r0
 800b578:	2301      	movs	r3, #1
 800b57a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b57e:	e7f0      	b.n	800b562 <_svfiprintf_r+0x192>
 800b580:	ab03      	add	r3, sp, #12
 800b582:	9300      	str	r3, [sp, #0]
 800b584:	462a      	mov	r2, r5
 800b586:	4638      	mov	r0, r7
 800b588:	4b0e      	ldr	r3, [pc, #56]	@ (800b5c4 <_svfiprintf_r+0x1f4>)
 800b58a:	a904      	add	r1, sp, #16
 800b58c:	f7fc fee4 	bl	8008358 <_printf_float>
 800b590:	1c42      	adds	r2, r0, #1
 800b592:	4606      	mov	r6, r0
 800b594:	d1d6      	bne.n	800b544 <_svfiprintf_r+0x174>
 800b596:	89ab      	ldrh	r3, [r5, #12]
 800b598:	065b      	lsls	r3, r3, #25
 800b59a:	f53f af2d 	bmi.w	800b3f8 <_svfiprintf_r+0x28>
 800b59e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b5a0:	e72c      	b.n	800b3fc <_svfiprintf_r+0x2c>
 800b5a2:	ab03      	add	r3, sp, #12
 800b5a4:	9300      	str	r3, [sp, #0]
 800b5a6:	462a      	mov	r2, r5
 800b5a8:	4638      	mov	r0, r7
 800b5aa:	4b06      	ldr	r3, [pc, #24]	@ (800b5c4 <_svfiprintf_r+0x1f4>)
 800b5ac:	a904      	add	r1, sp, #16
 800b5ae:	f7fd f971 	bl	8008894 <_printf_i>
 800b5b2:	e7ed      	b.n	800b590 <_svfiprintf_r+0x1c0>
 800b5b4:	0800c800 	.word	0x0800c800
 800b5b8:	0800c806 	.word	0x0800c806
 800b5bc:	0800c80a 	.word	0x0800c80a
 800b5c0:	08008359 	.word	0x08008359
 800b5c4:	0800b31b 	.word	0x0800b31b

0800b5c8 <__sflush_r>:
 800b5c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b5cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5ce:	0716      	lsls	r6, r2, #28
 800b5d0:	4605      	mov	r5, r0
 800b5d2:	460c      	mov	r4, r1
 800b5d4:	d454      	bmi.n	800b680 <__sflush_r+0xb8>
 800b5d6:	684b      	ldr	r3, [r1, #4]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	dc02      	bgt.n	800b5e2 <__sflush_r+0x1a>
 800b5dc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	dd48      	ble.n	800b674 <__sflush_r+0xac>
 800b5e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b5e4:	2e00      	cmp	r6, #0
 800b5e6:	d045      	beq.n	800b674 <__sflush_r+0xac>
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b5ee:	682f      	ldr	r7, [r5, #0]
 800b5f0:	6a21      	ldr	r1, [r4, #32]
 800b5f2:	602b      	str	r3, [r5, #0]
 800b5f4:	d030      	beq.n	800b658 <__sflush_r+0x90>
 800b5f6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b5f8:	89a3      	ldrh	r3, [r4, #12]
 800b5fa:	0759      	lsls	r1, r3, #29
 800b5fc:	d505      	bpl.n	800b60a <__sflush_r+0x42>
 800b5fe:	6863      	ldr	r3, [r4, #4]
 800b600:	1ad2      	subs	r2, r2, r3
 800b602:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b604:	b10b      	cbz	r3, 800b60a <__sflush_r+0x42>
 800b606:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b608:	1ad2      	subs	r2, r2, r3
 800b60a:	2300      	movs	r3, #0
 800b60c:	4628      	mov	r0, r5
 800b60e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b610:	6a21      	ldr	r1, [r4, #32]
 800b612:	47b0      	blx	r6
 800b614:	1c43      	adds	r3, r0, #1
 800b616:	89a3      	ldrh	r3, [r4, #12]
 800b618:	d106      	bne.n	800b628 <__sflush_r+0x60>
 800b61a:	6829      	ldr	r1, [r5, #0]
 800b61c:	291d      	cmp	r1, #29
 800b61e:	d82b      	bhi.n	800b678 <__sflush_r+0xb0>
 800b620:	4a28      	ldr	r2, [pc, #160]	@ (800b6c4 <__sflush_r+0xfc>)
 800b622:	410a      	asrs	r2, r1
 800b624:	07d6      	lsls	r6, r2, #31
 800b626:	d427      	bmi.n	800b678 <__sflush_r+0xb0>
 800b628:	2200      	movs	r2, #0
 800b62a:	6062      	str	r2, [r4, #4]
 800b62c:	6922      	ldr	r2, [r4, #16]
 800b62e:	04d9      	lsls	r1, r3, #19
 800b630:	6022      	str	r2, [r4, #0]
 800b632:	d504      	bpl.n	800b63e <__sflush_r+0x76>
 800b634:	1c42      	adds	r2, r0, #1
 800b636:	d101      	bne.n	800b63c <__sflush_r+0x74>
 800b638:	682b      	ldr	r3, [r5, #0]
 800b63a:	b903      	cbnz	r3, 800b63e <__sflush_r+0x76>
 800b63c:	6560      	str	r0, [r4, #84]	@ 0x54
 800b63e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b640:	602f      	str	r7, [r5, #0]
 800b642:	b1b9      	cbz	r1, 800b674 <__sflush_r+0xac>
 800b644:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b648:	4299      	cmp	r1, r3
 800b64a:	d002      	beq.n	800b652 <__sflush_r+0x8a>
 800b64c:	4628      	mov	r0, r5
 800b64e:	f7fe fceb 	bl	800a028 <_free_r>
 800b652:	2300      	movs	r3, #0
 800b654:	6363      	str	r3, [r4, #52]	@ 0x34
 800b656:	e00d      	b.n	800b674 <__sflush_r+0xac>
 800b658:	2301      	movs	r3, #1
 800b65a:	4628      	mov	r0, r5
 800b65c:	47b0      	blx	r6
 800b65e:	4602      	mov	r2, r0
 800b660:	1c50      	adds	r0, r2, #1
 800b662:	d1c9      	bne.n	800b5f8 <__sflush_r+0x30>
 800b664:	682b      	ldr	r3, [r5, #0]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d0c6      	beq.n	800b5f8 <__sflush_r+0x30>
 800b66a:	2b1d      	cmp	r3, #29
 800b66c:	d001      	beq.n	800b672 <__sflush_r+0xaa>
 800b66e:	2b16      	cmp	r3, #22
 800b670:	d11d      	bne.n	800b6ae <__sflush_r+0xe6>
 800b672:	602f      	str	r7, [r5, #0]
 800b674:	2000      	movs	r0, #0
 800b676:	e021      	b.n	800b6bc <__sflush_r+0xf4>
 800b678:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b67c:	b21b      	sxth	r3, r3
 800b67e:	e01a      	b.n	800b6b6 <__sflush_r+0xee>
 800b680:	690f      	ldr	r7, [r1, #16]
 800b682:	2f00      	cmp	r7, #0
 800b684:	d0f6      	beq.n	800b674 <__sflush_r+0xac>
 800b686:	0793      	lsls	r3, r2, #30
 800b688:	bf18      	it	ne
 800b68a:	2300      	movne	r3, #0
 800b68c:	680e      	ldr	r6, [r1, #0]
 800b68e:	bf08      	it	eq
 800b690:	694b      	ldreq	r3, [r1, #20]
 800b692:	1bf6      	subs	r6, r6, r7
 800b694:	600f      	str	r7, [r1, #0]
 800b696:	608b      	str	r3, [r1, #8]
 800b698:	2e00      	cmp	r6, #0
 800b69a:	ddeb      	ble.n	800b674 <__sflush_r+0xac>
 800b69c:	4633      	mov	r3, r6
 800b69e:	463a      	mov	r2, r7
 800b6a0:	4628      	mov	r0, r5
 800b6a2:	6a21      	ldr	r1, [r4, #32]
 800b6a4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800b6a8:	47e0      	blx	ip
 800b6aa:	2800      	cmp	r0, #0
 800b6ac:	dc07      	bgt.n	800b6be <__sflush_r+0xf6>
 800b6ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b6b6:	f04f 30ff 	mov.w	r0, #4294967295
 800b6ba:	81a3      	strh	r3, [r4, #12]
 800b6bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6be:	4407      	add	r7, r0
 800b6c0:	1a36      	subs	r6, r6, r0
 800b6c2:	e7e9      	b.n	800b698 <__sflush_r+0xd0>
 800b6c4:	dfbffffe 	.word	0xdfbffffe

0800b6c8 <_fflush_r>:
 800b6c8:	b538      	push	{r3, r4, r5, lr}
 800b6ca:	690b      	ldr	r3, [r1, #16]
 800b6cc:	4605      	mov	r5, r0
 800b6ce:	460c      	mov	r4, r1
 800b6d0:	b913      	cbnz	r3, 800b6d8 <_fflush_r+0x10>
 800b6d2:	2500      	movs	r5, #0
 800b6d4:	4628      	mov	r0, r5
 800b6d6:	bd38      	pop	{r3, r4, r5, pc}
 800b6d8:	b118      	cbz	r0, 800b6e2 <_fflush_r+0x1a>
 800b6da:	6a03      	ldr	r3, [r0, #32]
 800b6dc:	b90b      	cbnz	r3, 800b6e2 <_fflush_r+0x1a>
 800b6de:	f7fd fc95 	bl	800900c <__sinit>
 800b6e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d0f3      	beq.n	800b6d2 <_fflush_r+0xa>
 800b6ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b6ec:	07d0      	lsls	r0, r2, #31
 800b6ee:	d404      	bmi.n	800b6fa <_fflush_r+0x32>
 800b6f0:	0599      	lsls	r1, r3, #22
 800b6f2:	d402      	bmi.n	800b6fa <_fflush_r+0x32>
 800b6f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b6f6:	f7fd fe16 	bl	8009326 <__retarget_lock_acquire_recursive>
 800b6fa:	4628      	mov	r0, r5
 800b6fc:	4621      	mov	r1, r4
 800b6fe:	f7ff ff63 	bl	800b5c8 <__sflush_r>
 800b702:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b704:	4605      	mov	r5, r0
 800b706:	07da      	lsls	r2, r3, #31
 800b708:	d4e4      	bmi.n	800b6d4 <_fflush_r+0xc>
 800b70a:	89a3      	ldrh	r3, [r4, #12]
 800b70c:	059b      	lsls	r3, r3, #22
 800b70e:	d4e1      	bmi.n	800b6d4 <_fflush_r+0xc>
 800b710:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b712:	f7fd fe09 	bl	8009328 <__retarget_lock_release_recursive>
 800b716:	e7dd      	b.n	800b6d4 <_fflush_r+0xc>

0800b718 <memmove>:
 800b718:	4288      	cmp	r0, r1
 800b71a:	b510      	push	{r4, lr}
 800b71c:	eb01 0402 	add.w	r4, r1, r2
 800b720:	d902      	bls.n	800b728 <memmove+0x10>
 800b722:	4284      	cmp	r4, r0
 800b724:	4623      	mov	r3, r4
 800b726:	d807      	bhi.n	800b738 <memmove+0x20>
 800b728:	1e43      	subs	r3, r0, #1
 800b72a:	42a1      	cmp	r1, r4
 800b72c:	d008      	beq.n	800b740 <memmove+0x28>
 800b72e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b732:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b736:	e7f8      	b.n	800b72a <memmove+0x12>
 800b738:	4601      	mov	r1, r0
 800b73a:	4402      	add	r2, r0
 800b73c:	428a      	cmp	r2, r1
 800b73e:	d100      	bne.n	800b742 <memmove+0x2a>
 800b740:	bd10      	pop	{r4, pc}
 800b742:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b746:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b74a:	e7f7      	b.n	800b73c <memmove+0x24>

0800b74c <_sbrk_r>:
 800b74c:	b538      	push	{r3, r4, r5, lr}
 800b74e:	2300      	movs	r3, #0
 800b750:	4d05      	ldr	r5, [pc, #20]	@ (800b768 <_sbrk_r+0x1c>)
 800b752:	4604      	mov	r4, r0
 800b754:	4608      	mov	r0, r1
 800b756:	602b      	str	r3, [r5, #0]
 800b758:	f7f7 febc 	bl	80034d4 <_sbrk>
 800b75c:	1c43      	adds	r3, r0, #1
 800b75e:	d102      	bne.n	800b766 <_sbrk_r+0x1a>
 800b760:	682b      	ldr	r3, [r5, #0]
 800b762:	b103      	cbz	r3, 800b766 <_sbrk_r+0x1a>
 800b764:	6023      	str	r3, [r4, #0]
 800b766:	bd38      	pop	{r3, r4, r5, pc}
 800b768:	20000aa0 	.word	0x20000aa0

0800b76c <__assert_func>:
 800b76c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b76e:	4614      	mov	r4, r2
 800b770:	461a      	mov	r2, r3
 800b772:	4b09      	ldr	r3, [pc, #36]	@ (800b798 <__assert_func+0x2c>)
 800b774:	4605      	mov	r5, r0
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	68d8      	ldr	r0, [r3, #12]
 800b77a:	b954      	cbnz	r4, 800b792 <__assert_func+0x26>
 800b77c:	4b07      	ldr	r3, [pc, #28]	@ (800b79c <__assert_func+0x30>)
 800b77e:	461c      	mov	r4, r3
 800b780:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b784:	9100      	str	r1, [sp, #0]
 800b786:	462b      	mov	r3, r5
 800b788:	4905      	ldr	r1, [pc, #20]	@ (800b7a0 <__assert_func+0x34>)
 800b78a:	f000 f84f 	bl	800b82c <fiprintf>
 800b78e:	f000 f85f 	bl	800b850 <abort>
 800b792:	4b04      	ldr	r3, [pc, #16]	@ (800b7a4 <__assert_func+0x38>)
 800b794:	e7f4      	b.n	800b780 <__assert_func+0x14>
 800b796:	bf00      	nop
 800b798:	20000188 	.word	0x20000188
 800b79c:	0800c84c 	.word	0x0800c84c
 800b7a0:	0800c81e 	.word	0x0800c81e
 800b7a4:	0800c811 	.word	0x0800c811

0800b7a8 <_calloc_r>:
 800b7a8:	b570      	push	{r4, r5, r6, lr}
 800b7aa:	fba1 5402 	umull	r5, r4, r1, r2
 800b7ae:	b93c      	cbnz	r4, 800b7c0 <_calloc_r+0x18>
 800b7b0:	4629      	mov	r1, r5
 800b7b2:	f7fe ffe5 	bl	800a780 <_malloc_r>
 800b7b6:	4606      	mov	r6, r0
 800b7b8:	b928      	cbnz	r0, 800b7c6 <_calloc_r+0x1e>
 800b7ba:	2600      	movs	r6, #0
 800b7bc:	4630      	mov	r0, r6
 800b7be:	bd70      	pop	{r4, r5, r6, pc}
 800b7c0:	220c      	movs	r2, #12
 800b7c2:	6002      	str	r2, [r0, #0]
 800b7c4:	e7f9      	b.n	800b7ba <_calloc_r+0x12>
 800b7c6:	462a      	mov	r2, r5
 800b7c8:	4621      	mov	r1, r4
 800b7ca:	f7fd fcf1 	bl	80091b0 <memset>
 800b7ce:	e7f5      	b.n	800b7bc <_calloc_r+0x14>

0800b7d0 <_realloc_r>:
 800b7d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7d4:	4680      	mov	r8, r0
 800b7d6:	4615      	mov	r5, r2
 800b7d8:	460c      	mov	r4, r1
 800b7da:	b921      	cbnz	r1, 800b7e6 <_realloc_r+0x16>
 800b7dc:	4611      	mov	r1, r2
 800b7de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b7e2:	f7fe bfcd 	b.w	800a780 <_malloc_r>
 800b7e6:	b92a      	cbnz	r2, 800b7f4 <_realloc_r+0x24>
 800b7e8:	f7fe fc1e 	bl	800a028 <_free_r>
 800b7ec:	2400      	movs	r4, #0
 800b7ee:	4620      	mov	r0, r4
 800b7f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7f4:	f000 f833 	bl	800b85e <_malloc_usable_size_r>
 800b7f8:	4285      	cmp	r5, r0
 800b7fa:	4606      	mov	r6, r0
 800b7fc:	d802      	bhi.n	800b804 <_realloc_r+0x34>
 800b7fe:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b802:	d8f4      	bhi.n	800b7ee <_realloc_r+0x1e>
 800b804:	4629      	mov	r1, r5
 800b806:	4640      	mov	r0, r8
 800b808:	f7fe ffba 	bl	800a780 <_malloc_r>
 800b80c:	4607      	mov	r7, r0
 800b80e:	2800      	cmp	r0, #0
 800b810:	d0ec      	beq.n	800b7ec <_realloc_r+0x1c>
 800b812:	42b5      	cmp	r5, r6
 800b814:	462a      	mov	r2, r5
 800b816:	4621      	mov	r1, r4
 800b818:	bf28      	it	cs
 800b81a:	4632      	movcs	r2, r6
 800b81c:	f7fd fd9b 	bl	8009356 <memcpy>
 800b820:	4621      	mov	r1, r4
 800b822:	4640      	mov	r0, r8
 800b824:	f7fe fc00 	bl	800a028 <_free_r>
 800b828:	463c      	mov	r4, r7
 800b82a:	e7e0      	b.n	800b7ee <_realloc_r+0x1e>

0800b82c <fiprintf>:
 800b82c:	b40e      	push	{r1, r2, r3}
 800b82e:	b503      	push	{r0, r1, lr}
 800b830:	4601      	mov	r1, r0
 800b832:	ab03      	add	r3, sp, #12
 800b834:	4805      	ldr	r0, [pc, #20]	@ (800b84c <fiprintf+0x20>)
 800b836:	f853 2b04 	ldr.w	r2, [r3], #4
 800b83a:	6800      	ldr	r0, [r0, #0]
 800b83c:	9301      	str	r3, [sp, #4]
 800b83e:	f000 f83d 	bl	800b8bc <_vfiprintf_r>
 800b842:	b002      	add	sp, #8
 800b844:	f85d eb04 	ldr.w	lr, [sp], #4
 800b848:	b003      	add	sp, #12
 800b84a:	4770      	bx	lr
 800b84c:	20000188 	.word	0x20000188

0800b850 <abort>:
 800b850:	2006      	movs	r0, #6
 800b852:	b508      	push	{r3, lr}
 800b854:	f000 fa06 	bl	800bc64 <raise>
 800b858:	2001      	movs	r0, #1
 800b85a:	f7f7 fdc6 	bl	80033ea <_exit>

0800b85e <_malloc_usable_size_r>:
 800b85e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b862:	1f18      	subs	r0, r3, #4
 800b864:	2b00      	cmp	r3, #0
 800b866:	bfbc      	itt	lt
 800b868:	580b      	ldrlt	r3, [r1, r0]
 800b86a:	18c0      	addlt	r0, r0, r3
 800b86c:	4770      	bx	lr

0800b86e <__sfputc_r>:
 800b86e:	6893      	ldr	r3, [r2, #8]
 800b870:	b410      	push	{r4}
 800b872:	3b01      	subs	r3, #1
 800b874:	2b00      	cmp	r3, #0
 800b876:	6093      	str	r3, [r2, #8]
 800b878:	da07      	bge.n	800b88a <__sfputc_r+0x1c>
 800b87a:	6994      	ldr	r4, [r2, #24]
 800b87c:	42a3      	cmp	r3, r4
 800b87e:	db01      	blt.n	800b884 <__sfputc_r+0x16>
 800b880:	290a      	cmp	r1, #10
 800b882:	d102      	bne.n	800b88a <__sfputc_r+0x1c>
 800b884:	bc10      	pop	{r4}
 800b886:	f000 b931 	b.w	800baec <__swbuf_r>
 800b88a:	6813      	ldr	r3, [r2, #0]
 800b88c:	1c58      	adds	r0, r3, #1
 800b88e:	6010      	str	r0, [r2, #0]
 800b890:	7019      	strb	r1, [r3, #0]
 800b892:	4608      	mov	r0, r1
 800b894:	bc10      	pop	{r4}
 800b896:	4770      	bx	lr

0800b898 <__sfputs_r>:
 800b898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b89a:	4606      	mov	r6, r0
 800b89c:	460f      	mov	r7, r1
 800b89e:	4614      	mov	r4, r2
 800b8a0:	18d5      	adds	r5, r2, r3
 800b8a2:	42ac      	cmp	r4, r5
 800b8a4:	d101      	bne.n	800b8aa <__sfputs_r+0x12>
 800b8a6:	2000      	movs	r0, #0
 800b8a8:	e007      	b.n	800b8ba <__sfputs_r+0x22>
 800b8aa:	463a      	mov	r2, r7
 800b8ac:	4630      	mov	r0, r6
 800b8ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8b2:	f7ff ffdc 	bl	800b86e <__sfputc_r>
 800b8b6:	1c43      	adds	r3, r0, #1
 800b8b8:	d1f3      	bne.n	800b8a2 <__sfputs_r+0xa>
 800b8ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b8bc <_vfiprintf_r>:
 800b8bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8c0:	460d      	mov	r5, r1
 800b8c2:	4614      	mov	r4, r2
 800b8c4:	4698      	mov	r8, r3
 800b8c6:	4606      	mov	r6, r0
 800b8c8:	b09d      	sub	sp, #116	@ 0x74
 800b8ca:	b118      	cbz	r0, 800b8d4 <_vfiprintf_r+0x18>
 800b8cc:	6a03      	ldr	r3, [r0, #32]
 800b8ce:	b90b      	cbnz	r3, 800b8d4 <_vfiprintf_r+0x18>
 800b8d0:	f7fd fb9c 	bl	800900c <__sinit>
 800b8d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b8d6:	07d9      	lsls	r1, r3, #31
 800b8d8:	d405      	bmi.n	800b8e6 <_vfiprintf_r+0x2a>
 800b8da:	89ab      	ldrh	r3, [r5, #12]
 800b8dc:	059a      	lsls	r2, r3, #22
 800b8de:	d402      	bmi.n	800b8e6 <_vfiprintf_r+0x2a>
 800b8e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b8e2:	f7fd fd20 	bl	8009326 <__retarget_lock_acquire_recursive>
 800b8e6:	89ab      	ldrh	r3, [r5, #12]
 800b8e8:	071b      	lsls	r3, r3, #28
 800b8ea:	d501      	bpl.n	800b8f0 <_vfiprintf_r+0x34>
 800b8ec:	692b      	ldr	r3, [r5, #16]
 800b8ee:	b99b      	cbnz	r3, 800b918 <_vfiprintf_r+0x5c>
 800b8f0:	4629      	mov	r1, r5
 800b8f2:	4630      	mov	r0, r6
 800b8f4:	f000 f938 	bl	800bb68 <__swsetup_r>
 800b8f8:	b170      	cbz	r0, 800b918 <_vfiprintf_r+0x5c>
 800b8fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b8fc:	07dc      	lsls	r4, r3, #31
 800b8fe:	d504      	bpl.n	800b90a <_vfiprintf_r+0x4e>
 800b900:	f04f 30ff 	mov.w	r0, #4294967295
 800b904:	b01d      	add	sp, #116	@ 0x74
 800b906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b90a:	89ab      	ldrh	r3, [r5, #12]
 800b90c:	0598      	lsls	r0, r3, #22
 800b90e:	d4f7      	bmi.n	800b900 <_vfiprintf_r+0x44>
 800b910:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b912:	f7fd fd09 	bl	8009328 <__retarget_lock_release_recursive>
 800b916:	e7f3      	b.n	800b900 <_vfiprintf_r+0x44>
 800b918:	2300      	movs	r3, #0
 800b91a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b91c:	2320      	movs	r3, #32
 800b91e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b922:	2330      	movs	r3, #48	@ 0x30
 800b924:	f04f 0901 	mov.w	r9, #1
 800b928:	f8cd 800c 	str.w	r8, [sp, #12]
 800b92c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800bad8 <_vfiprintf_r+0x21c>
 800b930:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b934:	4623      	mov	r3, r4
 800b936:	469a      	mov	sl, r3
 800b938:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b93c:	b10a      	cbz	r2, 800b942 <_vfiprintf_r+0x86>
 800b93e:	2a25      	cmp	r2, #37	@ 0x25
 800b940:	d1f9      	bne.n	800b936 <_vfiprintf_r+0x7a>
 800b942:	ebba 0b04 	subs.w	fp, sl, r4
 800b946:	d00b      	beq.n	800b960 <_vfiprintf_r+0xa4>
 800b948:	465b      	mov	r3, fp
 800b94a:	4622      	mov	r2, r4
 800b94c:	4629      	mov	r1, r5
 800b94e:	4630      	mov	r0, r6
 800b950:	f7ff ffa2 	bl	800b898 <__sfputs_r>
 800b954:	3001      	adds	r0, #1
 800b956:	f000 80a7 	beq.w	800baa8 <_vfiprintf_r+0x1ec>
 800b95a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b95c:	445a      	add	r2, fp
 800b95e:	9209      	str	r2, [sp, #36]	@ 0x24
 800b960:	f89a 3000 	ldrb.w	r3, [sl]
 800b964:	2b00      	cmp	r3, #0
 800b966:	f000 809f 	beq.w	800baa8 <_vfiprintf_r+0x1ec>
 800b96a:	2300      	movs	r3, #0
 800b96c:	f04f 32ff 	mov.w	r2, #4294967295
 800b970:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b974:	f10a 0a01 	add.w	sl, sl, #1
 800b978:	9304      	str	r3, [sp, #16]
 800b97a:	9307      	str	r3, [sp, #28]
 800b97c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b980:	931a      	str	r3, [sp, #104]	@ 0x68
 800b982:	4654      	mov	r4, sl
 800b984:	2205      	movs	r2, #5
 800b986:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b98a:	4853      	ldr	r0, [pc, #332]	@ (800bad8 <_vfiprintf_r+0x21c>)
 800b98c:	f7fd fcd5 	bl	800933a <memchr>
 800b990:	9a04      	ldr	r2, [sp, #16]
 800b992:	b9d8      	cbnz	r0, 800b9cc <_vfiprintf_r+0x110>
 800b994:	06d1      	lsls	r1, r2, #27
 800b996:	bf44      	itt	mi
 800b998:	2320      	movmi	r3, #32
 800b99a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b99e:	0713      	lsls	r3, r2, #28
 800b9a0:	bf44      	itt	mi
 800b9a2:	232b      	movmi	r3, #43	@ 0x2b
 800b9a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b9a8:	f89a 3000 	ldrb.w	r3, [sl]
 800b9ac:	2b2a      	cmp	r3, #42	@ 0x2a
 800b9ae:	d015      	beq.n	800b9dc <_vfiprintf_r+0x120>
 800b9b0:	4654      	mov	r4, sl
 800b9b2:	2000      	movs	r0, #0
 800b9b4:	f04f 0c0a 	mov.w	ip, #10
 800b9b8:	9a07      	ldr	r2, [sp, #28]
 800b9ba:	4621      	mov	r1, r4
 800b9bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b9c0:	3b30      	subs	r3, #48	@ 0x30
 800b9c2:	2b09      	cmp	r3, #9
 800b9c4:	d94b      	bls.n	800ba5e <_vfiprintf_r+0x1a2>
 800b9c6:	b1b0      	cbz	r0, 800b9f6 <_vfiprintf_r+0x13a>
 800b9c8:	9207      	str	r2, [sp, #28]
 800b9ca:	e014      	b.n	800b9f6 <_vfiprintf_r+0x13a>
 800b9cc:	eba0 0308 	sub.w	r3, r0, r8
 800b9d0:	fa09 f303 	lsl.w	r3, r9, r3
 800b9d4:	4313      	orrs	r3, r2
 800b9d6:	46a2      	mov	sl, r4
 800b9d8:	9304      	str	r3, [sp, #16]
 800b9da:	e7d2      	b.n	800b982 <_vfiprintf_r+0xc6>
 800b9dc:	9b03      	ldr	r3, [sp, #12]
 800b9de:	1d19      	adds	r1, r3, #4
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	9103      	str	r1, [sp, #12]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	bfbb      	ittet	lt
 800b9e8:	425b      	neglt	r3, r3
 800b9ea:	f042 0202 	orrlt.w	r2, r2, #2
 800b9ee:	9307      	strge	r3, [sp, #28]
 800b9f0:	9307      	strlt	r3, [sp, #28]
 800b9f2:	bfb8      	it	lt
 800b9f4:	9204      	strlt	r2, [sp, #16]
 800b9f6:	7823      	ldrb	r3, [r4, #0]
 800b9f8:	2b2e      	cmp	r3, #46	@ 0x2e
 800b9fa:	d10a      	bne.n	800ba12 <_vfiprintf_r+0x156>
 800b9fc:	7863      	ldrb	r3, [r4, #1]
 800b9fe:	2b2a      	cmp	r3, #42	@ 0x2a
 800ba00:	d132      	bne.n	800ba68 <_vfiprintf_r+0x1ac>
 800ba02:	9b03      	ldr	r3, [sp, #12]
 800ba04:	3402      	adds	r4, #2
 800ba06:	1d1a      	adds	r2, r3, #4
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	9203      	str	r2, [sp, #12]
 800ba0c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ba10:	9305      	str	r3, [sp, #20]
 800ba12:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800badc <_vfiprintf_r+0x220>
 800ba16:	2203      	movs	r2, #3
 800ba18:	4650      	mov	r0, sl
 800ba1a:	7821      	ldrb	r1, [r4, #0]
 800ba1c:	f7fd fc8d 	bl	800933a <memchr>
 800ba20:	b138      	cbz	r0, 800ba32 <_vfiprintf_r+0x176>
 800ba22:	2240      	movs	r2, #64	@ 0x40
 800ba24:	9b04      	ldr	r3, [sp, #16]
 800ba26:	eba0 000a 	sub.w	r0, r0, sl
 800ba2a:	4082      	lsls	r2, r0
 800ba2c:	4313      	orrs	r3, r2
 800ba2e:	3401      	adds	r4, #1
 800ba30:	9304      	str	r3, [sp, #16]
 800ba32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba36:	2206      	movs	r2, #6
 800ba38:	4829      	ldr	r0, [pc, #164]	@ (800bae0 <_vfiprintf_r+0x224>)
 800ba3a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ba3e:	f7fd fc7c 	bl	800933a <memchr>
 800ba42:	2800      	cmp	r0, #0
 800ba44:	d03f      	beq.n	800bac6 <_vfiprintf_r+0x20a>
 800ba46:	4b27      	ldr	r3, [pc, #156]	@ (800bae4 <_vfiprintf_r+0x228>)
 800ba48:	bb1b      	cbnz	r3, 800ba92 <_vfiprintf_r+0x1d6>
 800ba4a:	9b03      	ldr	r3, [sp, #12]
 800ba4c:	3307      	adds	r3, #7
 800ba4e:	f023 0307 	bic.w	r3, r3, #7
 800ba52:	3308      	adds	r3, #8
 800ba54:	9303      	str	r3, [sp, #12]
 800ba56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba58:	443b      	add	r3, r7
 800ba5a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba5c:	e76a      	b.n	800b934 <_vfiprintf_r+0x78>
 800ba5e:	460c      	mov	r4, r1
 800ba60:	2001      	movs	r0, #1
 800ba62:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba66:	e7a8      	b.n	800b9ba <_vfiprintf_r+0xfe>
 800ba68:	2300      	movs	r3, #0
 800ba6a:	f04f 0c0a 	mov.w	ip, #10
 800ba6e:	4619      	mov	r1, r3
 800ba70:	3401      	adds	r4, #1
 800ba72:	9305      	str	r3, [sp, #20]
 800ba74:	4620      	mov	r0, r4
 800ba76:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba7a:	3a30      	subs	r2, #48	@ 0x30
 800ba7c:	2a09      	cmp	r2, #9
 800ba7e:	d903      	bls.n	800ba88 <_vfiprintf_r+0x1cc>
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d0c6      	beq.n	800ba12 <_vfiprintf_r+0x156>
 800ba84:	9105      	str	r1, [sp, #20]
 800ba86:	e7c4      	b.n	800ba12 <_vfiprintf_r+0x156>
 800ba88:	4604      	mov	r4, r0
 800ba8a:	2301      	movs	r3, #1
 800ba8c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba90:	e7f0      	b.n	800ba74 <_vfiprintf_r+0x1b8>
 800ba92:	ab03      	add	r3, sp, #12
 800ba94:	9300      	str	r3, [sp, #0]
 800ba96:	462a      	mov	r2, r5
 800ba98:	4630      	mov	r0, r6
 800ba9a:	4b13      	ldr	r3, [pc, #76]	@ (800bae8 <_vfiprintf_r+0x22c>)
 800ba9c:	a904      	add	r1, sp, #16
 800ba9e:	f7fc fc5b 	bl	8008358 <_printf_float>
 800baa2:	4607      	mov	r7, r0
 800baa4:	1c78      	adds	r0, r7, #1
 800baa6:	d1d6      	bne.n	800ba56 <_vfiprintf_r+0x19a>
 800baa8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800baaa:	07d9      	lsls	r1, r3, #31
 800baac:	d405      	bmi.n	800baba <_vfiprintf_r+0x1fe>
 800baae:	89ab      	ldrh	r3, [r5, #12]
 800bab0:	059a      	lsls	r2, r3, #22
 800bab2:	d402      	bmi.n	800baba <_vfiprintf_r+0x1fe>
 800bab4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bab6:	f7fd fc37 	bl	8009328 <__retarget_lock_release_recursive>
 800baba:	89ab      	ldrh	r3, [r5, #12]
 800babc:	065b      	lsls	r3, r3, #25
 800babe:	f53f af1f 	bmi.w	800b900 <_vfiprintf_r+0x44>
 800bac2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bac4:	e71e      	b.n	800b904 <_vfiprintf_r+0x48>
 800bac6:	ab03      	add	r3, sp, #12
 800bac8:	9300      	str	r3, [sp, #0]
 800baca:	462a      	mov	r2, r5
 800bacc:	4630      	mov	r0, r6
 800bace:	4b06      	ldr	r3, [pc, #24]	@ (800bae8 <_vfiprintf_r+0x22c>)
 800bad0:	a904      	add	r1, sp, #16
 800bad2:	f7fc fedf 	bl	8008894 <_printf_i>
 800bad6:	e7e4      	b.n	800baa2 <_vfiprintf_r+0x1e6>
 800bad8:	0800c800 	.word	0x0800c800
 800badc:	0800c806 	.word	0x0800c806
 800bae0:	0800c80a 	.word	0x0800c80a
 800bae4:	08008359 	.word	0x08008359
 800bae8:	0800b899 	.word	0x0800b899

0800baec <__swbuf_r>:
 800baec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baee:	460e      	mov	r6, r1
 800baf0:	4614      	mov	r4, r2
 800baf2:	4605      	mov	r5, r0
 800baf4:	b118      	cbz	r0, 800bafe <__swbuf_r+0x12>
 800baf6:	6a03      	ldr	r3, [r0, #32]
 800baf8:	b90b      	cbnz	r3, 800bafe <__swbuf_r+0x12>
 800bafa:	f7fd fa87 	bl	800900c <__sinit>
 800bafe:	69a3      	ldr	r3, [r4, #24]
 800bb00:	60a3      	str	r3, [r4, #8]
 800bb02:	89a3      	ldrh	r3, [r4, #12]
 800bb04:	071a      	lsls	r2, r3, #28
 800bb06:	d501      	bpl.n	800bb0c <__swbuf_r+0x20>
 800bb08:	6923      	ldr	r3, [r4, #16]
 800bb0a:	b943      	cbnz	r3, 800bb1e <__swbuf_r+0x32>
 800bb0c:	4621      	mov	r1, r4
 800bb0e:	4628      	mov	r0, r5
 800bb10:	f000 f82a 	bl	800bb68 <__swsetup_r>
 800bb14:	b118      	cbz	r0, 800bb1e <__swbuf_r+0x32>
 800bb16:	f04f 37ff 	mov.w	r7, #4294967295
 800bb1a:	4638      	mov	r0, r7
 800bb1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb1e:	6823      	ldr	r3, [r4, #0]
 800bb20:	6922      	ldr	r2, [r4, #16]
 800bb22:	b2f6      	uxtb	r6, r6
 800bb24:	1a98      	subs	r0, r3, r2
 800bb26:	6963      	ldr	r3, [r4, #20]
 800bb28:	4637      	mov	r7, r6
 800bb2a:	4283      	cmp	r3, r0
 800bb2c:	dc05      	bgt.n	800bb3a <__swbuf_r+0x4e>
 800bb2e:	4621      	mov	r1, r4
 800bb30:	4628      	mov	r0, r5
 800bb32:	f7ff fdc9 	bl	800b6c8 <_fflush_r>
 800bb36:	2800      	cmp	r0, #0
 800bb38:	d1ed      	bne.n	800bb16 <__swbuf_r+0x2a>
 800bb3a:	68a3      	ldr	r3, [r4, #8]
 800bb3c:	3b01      	subs	r3, #1
 800bb3e:	60a3      	str	r3, [r4, #8]
 800bb40:	6823      	ldr	r3, [r4, #0]
 800bb42:	1c5a      	adds	r2, r3, #1
 800bb44:	6022      	str	r2, [r4, #0]
 800bb46:	701e      	strb	r6, [r3, #0]
 800bb48:	6962      	ldr	r2, [r4, #20]
 800bb4a:	1c43      	adds	r3, r0, #1
 800bb4c:	429a      	cmp	r2, r3
 800bb4e:	d004      	beq.n	800bb5a <__swbuf_r+0x6e>
 800bb50:	89a3      	ldrh	r3, [r4, #12]
 800bb52:	07db      	lsls	r3, r3, #31
 800bb54:	d5e1      	bpl.n	800bb1a <__swbuf_r+0x2e>
 800bb56:	2e0a      	cmp	r6, #10
 800bb58:	d1df      	bne.n	800bb1a <__swbuf_r+0x2e>
 800bb5a:	4621      	mov	r1, r4
 800bb5c:	4628      	mov	r0, r5
 800bb5e:	f7ff fdb3 	bl	800b6c8 <_fflush_r>
 800bb62:	2800      	cmp	r0, #0
 800bb64:	d0d9      	beq.n	800bb1a <__swbuf_r+0x2e>
 800bb66:	e7d6      	b.n	800bb16 <__swbuf_r+0x2a>

0800bb68 <__swsetup_r>:
 800bb68:	b538      	push	{r3, r4, r5, lr}
 800bb6a:	4b29      	ldr	r3, [pc, #164]	@ (800bc10 <__swsetup_r+0xa8>)
 800bb6c:	4605      	mov	r5, r0
 800bb6e:	6818      	ldr	r0, [r3, #0]
 800bb70:	460c      	mov	r4, r1
 800bb72:	b118      	cbz	r0, 800bb7c <__swsetup_r+0x14>
 800bb74:	6a03      	ldr	r3, [r0, #32]
 800bb76:	b90b      	cbnz	r3, 800bb7c <__swsetup_r+0x14>
 800bb78:	f7fd fa48 	bl	800900c <__sinit>
 800bb7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb80:	0719      	lsls	r1, r3, #28
 800bb82:	d422      	bmi.n	800bbca <__swsetup_r+0x62>
 800bb84:	06da      	lsls	r2, r3, #27
 800bb86:	d407      	bmi.n	800bb98 <__swsetup_r+0x30>
 800bb88:	2209      	movs	r2, #9
 800bb8a:	602a      	str	r2, [r5, #0]
 800bb8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb90:	f04f 30ff 	mov.w	r0, #4294967295
 800bb94:	81a3      	strh	r3, [r4, #12]
 800bb96:	e033      	b.n	800bc00 <__swsetup_r+0x98>
 800bb98:	0758      	lsls	r0, r3, #29
 800bb9a:	d512      	bpl.n	800bbc2 <__swsetup_r+0x5a>
 800bb9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bb9e:	b141      	cbz	r1, 800bbb2 <__swsetup_r+0x4a>
 800bba0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bba4:	4299      	cmp	r1, r3
 800bba6:	d002      	beq.n	800bbae <__swsetup_r+0x46>
 800bba8:	4628      	mov	r0, r5
 800bbaa:	f7fe fa3d 	bl	800a028 <_free_r>
 800bbae:	2300      	movs	r3, #0
 800bbb0:	6363      	str	r3, [r4, #52]	@ 0x34
 800bbb2:	89a3      	ldrh	r3, [r4, #12]
 800bbb4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bbb8:	81a3      	strh	r3, [r4, #12]
 800bbba:	2300      	movs	r3, #0
 800bbbc:	6063      	str	r3, [r4, #4]
 800bbbe:	6923      	ldr	r3, [r4, #16]
 800bbc0:	6023      	str	r3, [r4, #0]
 800bbc2:	89a3      	ldrh	r3, [r4, #12]
 800bbc4:	f043 0308 	orr.w	r3, r3, #8
 800bbc8:	81a3      	strh	r3, [r4, #12]
 800bbca:	6923      	ldr	r3, [r4, #16]
 800bbcc:	b94b      	cbnz	r3, 800bbe2 <__swsetup_r+0x7a>
 800bbce:	89a3      	ldrh	r3, [r4, #12]
 800bbd0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bbd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bbd8:	d003      	beq.n	800bbe2 <__swsetup_r+0x7a>
 800bbda:	4621      	mov	r1, r4
 800bbdc:	4628      	mov	r0, r5
 800bbde:	f000 f882 	bl	800bce6 <__smakebuf_r>
 800bbe2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbe6:	f013 0201 	ands.w	r2, r3, #1
 800bbea:	d00a      	beq.n	800bc02 <__swsetup_r+0x9a>
 800bbec:	2200      	movs	r2, #0
 800bbee:	60a2      	str	r2, [r4, #8]
 800bbf0:	6962      	ldr	r2, [r4, #20]
 800bbf2:	4252      	negs	r2, r2
 800bbf4:	61a2      	str	r2, [r4, #24]
 800bbf6:	6922      	ldr	r2, [r4, #16]
 800bbf8:	b942      	cbnz	r2, 800bc0c <__swsetup_r+0xa4>
 800bbfa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bbfe:	d1c5      	bne.n	800bb8c <__swsetup_r+0x24>
 800bc00:	bd38      	pop	{r3, r4, r5, pc}
 800bc02:	0799      	lsls	r1, r3, #30
 800bc04:	bf58      	it	pl
 800bc06:	6962      	ldrpl	r2, [r4, #20]
 800bc08:	60a2      	str	r2, [r4, #8]
 800bc0a:	e7f4      	b.n	800bbf6 <__swsetup_r+0x8e>
 800bc0c:	2000      	movs	r0, #0
 800bc0e:	e7f7      	b.n	800bc00 <__swsetup_r+0x98>
 800bc10:	20000188 	.word	0x20000188

0800bc14 <_raise_r>:
 800bc14:	291f      	cmp	r1, #31
 800bc16:	b538      	push	{r3, r4, r5, lr}
 800bc18:	4605      	mov	r5, r0
 800bc1a:	460c      	mov	r4, r1
 800bc1c:	d904      	bls.n	800bc28 <_raise_r+0x14>
 800bc1e:	2316      	movs	r3, #22
 800bc20:	6003      	str	r3, [r0, #0]
 800bc22:	f04f 30ff 	mov.w	r0, #4294967295
 800bc26:	bd38      	pop	{r3, r4, r5, pc}
 800bc28:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bc2a:	b112      	cbz	r2, 800bc32 <_raise_r+0x1e>
 800bc2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bc30:	b94b      	cbnz	r3, 800bc46 <_raise_r+0x32>
 800bc32:	4628      	mov	r0, r5
 800bc34:	f000 f830 	bl	800bc98 <_getpid_r>
 800bc38:	4622      	mov	r2, r4
 800bc3a:	4601      	mov	r1, r0
 800bc3c:	4628      	mov	r0, r5
 800bc3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc42:	f000 b817 	b.w	800bc74 <_kill_r>
 800bc46:	2b01      	cmp	r3, #1
 800bc48:	d00a      	beq.n	800bc60 <_raise_r+0x4c>
 800bc4a:	1c59      	adds	r1, r3, #1
 800bc4c:	d103      	bne.n	800bc56 <_raise_r+0x42>
 800bc4e:	2316      	movs	r3, #22
 800bc50:	6003      	str	r3, [r0, #0]
 800bc52:	2001      	movs	r0, #1
 800bc54:	e7e7      	b.n	800bc26 <_raise_r+0x12>
 800bc56:	2100      	movs	r1, #0
 800bc58:	4620      	mov	r0, r4
 800bc5a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bc5e:	4798      	blx	r3
 800bc60:	2000      	movs	r0, #0
 800bc62:	e7e0      	b.n	800bc26 <_raise_r+0x12>

0800bc64 <raise>:
 800bc64:	4b02      	ldr	r3, [pc, #8]	@ (800bc70 <raise+0xc>)
 800bc66:	4601      	mov	r1, r0
 800bc68:	6818      	ldr	r0, [r3, #0]
 800bc6a:	f7ff bfd3 	b.w	800bc14 <_raise_r>
 800bc6e:	bf00      	nop
 800bc70:	20000188 	.word	0x20000188

0800bc74 <_kill_r>:
 800bc74:	b538      	push	{r3, r4, r5, lr}
 800bc76:	2300      	movs	r3, #0
 800bc78:	4d06      	ldr	r5, [pc, #24]	@ (800bc94 <_kill_r+0x20>)
 800bc7a:	4604      	mov	r4, r0
 800bc7c:	4608      	mov	r0, r1
 800bc7e:	4611      	mov	r1, r2
 800bc80:	602b      	str	r3, [r5, #0]
 800bc82:	f7f7 fba2 	bl	80033ca <_kill>
 800bc86:	1c43      	adds	r3, r0, #1
 800bc88:	d102      	bne.n	800bc90 <_kill_r+0x1c>
 800bc8a:	682b      	ldr	r3, [r5, #0]
 800bc8c:	b103      	cbz	r3, 800bc90 <_kill_r+0x1c>
 800bc8e:	6023      	str	r3, [r4, #0]
 800bc90:	bd38      	pop	{r3, r4, r5, pc}
 800bc92:	bf00      	nop
 800bc94:	20000aa0 	.word	0x20000aa0

0800bc98 <_getpid_r>:
 800bc98:	f7f7 bb90 	b.w	80033bc <_getpid>

0800bc9c <__swhatbuf_r>:
 800bc9c:	b570      	push	{r4, r5, r6, lr}
 800bc9e:	460c      	mov	r4, r1
 800bca0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bca4:	4615      	mov	r5, r2
 800bca6:	2900      	cmp	r1, #0
 800bca8:	461e      	mov	r6, r3
 800bcaa:	b096      	sub	sp, #88	@ 0x58
 800bcac:	da0c      	bge.n	800bcc8 <__swhatbuf_r+0x2c>
 800bcae:	89a3      	ldrh	r3, [r4, #12]
 800bcb0:	2100      	movs	r1, #0
 800bcb2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bcb6:	bf14      	ite	ne
 800bcb8:	2340      	movne	r3, #64	@ 0x40
 800bcba:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bcbe:	2000      	movs	r0, #0
 800bcc0:	6031      	str	r1, [r6, #0]
 800bcc2:	602b      	str	r3, [r5, #0]
 800bcc4:	b016      	add	sp, #88	@ 0x58
 800bcc6:	bd70      	pop	{r4, r5, r6, pc}
 800bcc8:	466a      	mov	r2, sp
 800bcca:	f000 f849 	bl	800bd60 <_fstat_r>
 800bcce:	2800      	cmp	r0, #0
 800bcd0:	dbed      	blt.n	800bcae <__swhatbuf_r+0x12>
 800bcd2:	9901      	ldr	r1, [sp, #4]
 800bcd4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bcd8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bcdc:	4259      	negs	r1, r3
 800bcde:	4159      	adcs	r1, r3
 800bce0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bce4:	e7eb      	b.n	800bcbe <__swhatbuf_r+0x22>

0800bce6 <__smakebuf_r>:
 800bce6:	898b      	ldrh	r3, [r1, #12]
 800bce8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bcea:	079d      	lsls	r5, r3, #30
 800bcec:	4606      	mov	r6, r0
 800bcee:	460c      	mov	r4, r1
 800bcf0:	d507      	bpl.n	800bd02 <__smakebuf_r+0x1c>
 800bcf2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bcf6:	6023      	str	r3, [r4, #0]
 800bcf8:	6123      	str	r3, [r4, #16]
 800bcfa:	2301      	movs	r3, #1
 800bcfc:	6163      	str	r3, [r4, #20]
 800bcfe:	b003      	add	sp, #12
 800bd00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd02:	466a      	mov	r2, sp
 800bd04:	ab01      	add	r3, sp, #4
 800bd06:	f7ff ffc9 	bl	800bc9c <__swhatbuf_r>
 800bd0a:	9f00      	ldr	r7, [sp, #0]
 800bd0c:	4605      	mov	r5, r0
 800bd0e:	4639      	mov	r1, r7
 800bd10:	4630      	mov	r0, r6
 800bd12:	f7fe fd35 	bl	800a780 <_malloc_r>
 800bd16:	b948      	cbnz	r0, 800bd2c <__smakebuf_r+0x46>
 800bd18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd1c:	059a      	lsls	r2, r3, #22
 800bd1e:	d4ee      	bmi.n	800bcfe <__smakebuf_r+0x18>
 800bd20:	f023 0303 	bic.w	r3, r3, #3
 800bd24:	f043 0302 	orr.w	r3, r3, #2
 800bd28:	81a3      	strh	r3, [r4, #12]
 800bd2a:	e7e2      	b.n	800bcf2 <__smakebuf_r+0xc>
 800bd2c:	89a3      	ldrh	r3, [r4, #12]
 800bd2e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bd32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bd36:	81a3      	strh	r3, [r4, #12]
 800bd38:	9b01      	ldr	r3, [sp, #4]
 800bd3a:	6020      	str	r0, [r4, #0]
 800bd3c:	b15b      	cbz	r3, 800bd56 <__smakebuf_r+0x70>
 800bd3e:	4630      	mov	r0, r6
 800bd40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd44:	f000 f81e 	bl	800bd84 <_isatty_r>
 800bd48:	b128      	cbz	r0, 800bd56 <__smakebuf_r+0x70>
 800bd4a:	89a3      	ldrh	r3, [r4, #12]
 800bd4c:	f023 0303 	bic.w	r3, r3, #3
 800bd50:	f043 0301 	orr.w	r3, r3, #1
 800bd54:	81a3      	strh	r3, [r4, #12]
 800bd56:	89a3      	ldrh	r3, [r4, #12]
 800bd58:	431d      	orrs	r5, r3
 800bd5a:	81a5      	strh	r5, [r4, #12]
 800bd5c:	e7cf      	b.n	800bcfe <__smakebuf_r+0x18>
	...

0800bd60 <_fstat_r>:
 800bd60:	b538      	push	{r3, r4, r5, lr}
 800bd62:	2300      	movs	r3, #0
 800bd64:	4d06      	ldr	r5, [pc, #24]	@ (800bd80 <_fstat_r+0x20>)
 800bd66:	4604      	mov	r4, r0
 800bd68:	4608      	mov	r0, r1
 800bd6a:	4611      	mov	r1, r2
 800bd6c:	602b      	str	r3, [r5, #0]
 800bd6e:	f7f7 fb8b 	bl	8003488 <_fstat>
 800bd72:	1c43      	adds	r3, r0, #1
 800bd74:	d102      	bne.n	800bd7c <_fstat_r+0x1c>
 800bd76:	682b      	ldr	r3, [r5, #0]
 800bd78:	b103      	cbz	r3, 800bd7c <_fstat_r+0x1c>
 800bd7a:	6023      	str	r3, [r4, #0]
 800bd7c:	bd38      	pop	{r3, r4, r5, pc}
 800bd7e:	bf00      	nop
 800bd80:	20000aa0 	.word	0x20000aa0

0800bd84 <_isatty_r>:
 800bd84:	b538      	push	{r3, r4, r5, lr}
 800bd86:	2300      	movs	r3, #0
 800bd88:	4d05      	ldr	r5, [pc, #20]	@ (800bda0 <_isatty_r+0x1c>)
 800bd8a:	4604      	mov	r4, r0
 800bd8c:	4608      	mov	r0, r1
 800bd8e:	602b      	str	r3, [r5, #0]
 800bd90:	f7f7 fb89 	bl	80034a6 <_isatty>
 800bd94:	1c43      	adds	r3, r0, #1
 800bd96:	d102      	bne.n	800bd9e <_isatty_r+0x1a>
 800bd98:	682b      	ldr	r3, [r5, #0]
 800bd9a:	b103      	cbz	r3, 800bd9e <_isatty_r+0x1a>
 800bd9c:	6023      	str	r3, [r4, #0]
 800bd9e:	bd38      	pop	{r3, r4, r5, pc}
 800bda0:	20000aa0 	.word	0x20000aa0

0800bda4 <atan2f>:
 800bda4:	f000 b88a 	b.w	800bebc <__ieee754_atan2f>

0800bda8 <sqrtf>:
 800bda8:	b538      	push	{r3, r4, r5, lr}
 800bdaa:	4605      	mov	r5, r0
 800bdac:	f000 f816 	bl	800bddc <__ieee754_sqrtf>
 800bdb0:	4629      	mov	r1, r5
 800bdb2:	4604      	mov	r4, r0
 800bdb4:	4628      	mov	r0, r5
 800bdb6:	f7f5 f9b5 	bl	8001124 <__aeabi_fcmpun>
 800bdba:	b968      	cbnz	r0, 800bdd8 <sqrtf+0x30>
 800bdbc:	2100      	movs	r1, #0
 800bdbe:	4628      	mov	r0, r5
 800bdc0:	f7f5 f988 	bl	80010d4 <__aeabi_fcmplt>
 800bdc4:	b140      	cbz	r0, 800bdd8 <sqrtf+0x30>
 800bdc6:	f7fd fa83 	bl	80092d0 <__errno>
 800bdca:	2321      	movs	r3, #33	@ 0x21
 800bdcc:	2100      	movs	r1, #0
 800bdce:	6003      	str	r3, [r0, #0]
 800bdd0:	4608      	mov	r0, r1
 800bdd2:	f7f5 f895 	bl	8000f00 <__aeabi_fdiv>
 800bdd6:	4604      	mov	r4, r0
 800bdd8:	4620      	mov	r0, r4
 800bdda:	bd38      	pop	{r3, r4, r5, pc}

0800bddc <__ieee754_sqrtf>:
 800bddc:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 800bde0:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800bde4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bde8:	4603      	mov	r3, r0
 800bdea:	4604      	mov	r4, r0
 800bdec:	d30a      	bcc.n	800be04 <__ieee754_sqrtf+0x28>
 800bdee:	4601      	mov	r1, r0
 800bdf0:	f7f4 ffd2 	bl	8000d98 <__aeabi_fmul>
 800bdf4:	4601      	mov	r1, r0
 800bdf6:	4620      	mov	r0, r4
 800bdf8:	f7f4 fec6 	bl	8000b88 <__addsf3>
 800bdfc:	4604      	mov	r4, r0
 800bdfe:	4620      	mov	r0, r4
 800be00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be04:	2a00      	cmp	r2, #0
 800be06:	d0fa      	beq.n	800bdfe <__ieee754_sqrtf+0x22>
 800be08:	2800      	cmp	r0, #0
 800be0a:	da06      	bge.n	800be1a <__ieee754_sqrtf+0x3e>
 800be0c:	4601      	mov	r1, r0
 800be0e:	f7f4 feb9 	bl	8000b84 <__aeabi_fsub>
 800be12:	4601      	mov	r1, r0
 800be14:	f7f5 f874 	bl	8000f00 <__aeabi_fdiv>
 800be18:	e7f0      	b.n	800bdfc <__ieee754_sqrtf+0x20>
 800be1a:	f010 42ff 	ands.w	r2, r0, #2139095040	@ 0x7f800000
 800be1e:	ea4f 51e0 	mov.w	r1, r0, asr #23
 800be22:	d03e      	beq.n	800bea2 <__ieee754_sqrtf+0xc6>
 800be24:	2400      	movs	r4, #0
 800be26:	f1a1 057f 	sub.w	r5, r1, #127	@ 0x7f
 800be2a:	07ca      	lsls	r2, r1, #31
 800be2c:	f04f 0019 	mov.w	r0, #25
 800be30:	4626      	mov	r6, r4
 800be32:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 800be36:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800be3a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800be3e:	bf58      	it	pl
 800be40:	005b      	lslpl	r3, r3, #1
 800be42:	106d      	asrs	r5, r5, #1
 800be44:	005b      	lsls	r3, r3, #1
 800be46:	1872      	adds	r2, r6, r1
 800be48:	429a      	cmp	r2, r3
 800be4a:	bfcf      	iteee	gt
 800be4c:	461a      	movgt	r2, r3
 800be4e:	1856      	addle	r6, r2, r1
 800be50:	1864      	addle	r4, r4, r1
 800be52:	1a9a      	suble	r2, r3, r2
 800be54:	3801      	subs	r0, #1
 800be56:	ea4f 0342 	mov.w	r3, r2, lsl #1
 800be5a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800be5e:	d1f2      	bne.n	800be46 <__ieee754_sqrtf+0x6a>
 800be60:	b1ba      	cbz	r2, 800be92 <__ieee754_sqrtf+0xb6>
 800be62:	4e14      	ldr	r6, [pc, #80]	@ (800beb4 <__ieee754_sqrtf+0xd8>)
 800be64:	4f14      	ldr	r7, [pc, #80]	@ (800beb8 <__ieee754_sqrtf+0xdc>)
 800be66:	6830      	ldr	r0, [r6, #0]
 800be68:	6839      	ldr	r1, [r7, #0]
 800be6a:	f7f4 fe8b 	bl	8000b84 <__aeabi_fsub>
 800be6e:	f8d6 8000 	ldr.w	r8, [r6]
 800be72:	4601      	mov	r1, r0
 800be74:	4640      	mov	r0, r8
 800be76:	f7f5 f937 	bl	80010e8 <__aeabi_fcmple>
 800be7a:	b150      	cbz	r0, 800be92 <__ieee754_sqrtf+0xb6>
 800be7c:	6830      	ldr	r0, [r6, #0]
 800be7e:	6839      	ldr	r1, [r7, #0]
 800be80:	f7f4 fe82 	bl	8000b88 <__addsf3>
 800be84:	6836      	ldr	r6, [r6, #0]
 800be86:	4601      	mov	r1, r0
 800be88:	4630      	mov	r0, r6
 800be8a:	f7f5 f923 	bl	80010d4 <__aeabi_fcmplt>
 800be8e:	b168      	cbz	r0, 800beac <__ieee754_sqrtf+0xd0>
 800be90:	3402      	adds	r4, #2
 800be92:	1064      	asrs	r4, r4, #1
 800be94:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 800be98:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 800be9c:	e7af      	b.n	800bdfe <__ieee754_sqrtf+0x22>
 800be9e:	005b      	lsls	r3, r3, #1
 800bea0:	3201      	adds	r2, #1
 800bea2:	0218      	lsls	r0, r3, #8
 800bea4:	d5fb      	bpl.n	800be9e <__ieee754_sqrtf+0xc2>
 800bea6:	3a01      	subs	r2, #1
 800bea8:	1a89      	subs	r1, r1, r2
 800beaa:	e7bb      	b.n	800be24 <__ieee754_sqrtf+0x48>
 800beac:	3401      	adds	r4, #1
 800beae:	f024 0401 	bic.w	r4, r4, #1
 800beb2:	e7ee      	b.n	800be92 <__ieee754_sqrtf+0xb6>
 800beb4:	200001dc 	.word	0x200001dc
 800beb8:	200001d8 	.word	0x200001d8

0800bebc <__ieee754_atan2f>:
 800bebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bebe:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 800bec2:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 800bec6:	4603      	mov	r3, r0
 800bec8:	d805      	bhi.n	800bed6 <__ieee754_atan2f+0x1a>
 800beca:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 800bece:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800bed2:	4607      	mov	r7, r0
 800bed4:	d904      	bls.n	800bee0 <__ieee754_atan2f+0x24>
 800bed6:	4618      	mov	r0, r3
 800bed8:	f7f4 fe56 	bl	8000b88 <__addsf3>
 800bedc:	4603      	mov	r3, r0
 800bede:	e010      	b.n	800bf02 <__ieee754_atan2f+0x46>
 800bee0:	f1b1 5f7e 	cmp.w	r1, #1065353216	@ 0x3f800000
 800bee4:	d103      	bne.n	800beee <__ieee754_atan2f+0x32>
 800bee6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800beea:	f000 b86f 	b.w	800bfcc <atanf>
 800beee:	178c      	asrs	r4, r1, #30
 800bef0:	f004 0402 	and.w	r4, r4, #2
 800bef4:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800bef8:	b92a      	cbnz	r2, 800bf06 <__ieee754_atan2f+0x4a>
 800befa:	2c02      	cmp	r4, #2
 800befc:	d04b      	beq.n	800bf96 <__ieee754_atan2f+0xda>
 800befe:	2c03      	cmp	r4, #3
 800bf00:	d04b      	beq.n	800bf9a <__ieee754_atan2f+0xde>
 800bf02:	4618      	mov	r0, r3
 800bf04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf06:	b91e      	cbnz	r6, 800bf10 <__ieee754_atan2f+0x54>
 800bf08:	2f00      	cmp	r7, #0
 800bf0a:	da4c      	bge.n	800bfa6 <__ieee754_atan2f+0xea>
 800bf0c:	4b27      	ldr	r3, [pc, #156]	@ (800bfac <__ieee754_atan2f+0xf0>)
 800bf0e:	e7f8      	b.n	800bf02 <__ieee754_atan2f+0x46>
 800bf10:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 800bf14:	d10e      	bne.n	800bf34 <__ieee754_atan2f+0x78>
 800bf16:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800bf1a:	f104 34ff 	add.w	r4, r4, #4294967295
 800bf1e:	d105      	bne.n	800bf2c <__ieee754_atan2f+0x70>
 800bf20:	2c02      	cmp	r4, #2
 800bf22:	d83c      	bhi.n	800bf9e <__ieee754_atan2f+0xe2>
 800bf24:	4b22      	ldr	r3, [pc, #136]	@ (800bfb0 <__ieee754_atan2f+0xf4>)
 800bf26:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800bf2a:	e7ea      	b.n	800bf02 <__ieee754_atan2f+0x46>
 800bf2c:	2c02      	cmp	r4, #2
 800bf2e:	d838      	bhi.n	800bfa2 <__ieee754_atan2f+0xe6>
 800bf30:	4b20      	ldr	r3, [pc, #128]	@ (800bfb4 <__ieee754_atan2f+0xf8>)
 800bf32:	e7f8      	b.n	800bf26 <__ieee754_atan2f+0x6a>
 800bf34:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800bf38:	d0e6      	beq.n	800bf08 <__ieee754_atan2f+0x4c>
 800bf3a:	1b92      	subs	r2, r2, r6
 800bf3c:	f1b2 5ff4 	cmp.w	r2, #511705088	@ 0x1e800000
 800bf40:	ea4f 50e2 	mov.w	r0, r2, asr #23
 800bf44:	da17      	bge.n	800bf76 <__ieee754_atan2f+0xba>
 800bf46:	2900      	cmp	r1, #0
 800bf48:	da01      	bge.n	800bf4e <__ieee754_atan2f+0x92>
 800bf4a:	303c      	adds	r0, #60	@ 0x3c
 800bf4c:	db15      	blt.n	800bf7a <__ieee754_atan2f+0xbe>
 800bf4e:	4618      	mov	r0, r3
 800bf50:	f7f4 ffd6 	bl	8000f00 <__aeabi_fdiv>
 800bf54:	f000 f946 	bl	800c1e4 <fabsf>
 800bf58:	f000 f838 	bl	800bfcc <atanf>
 800bf5c:	4603      	mov	r3, r0
 800bf5e:	2c01      	cmp	r4, #1
 800bf60:	d00d      	beq.n	800bf7e <__ieee754_atan2f+0xc2>
 800bf62:	2c02      	cmp	r4, #2
 800bf64:	d00e      	beq.n	800bf84 <__ieee754_atan2f+0xc8>
 800bf66:	2c00      	cmp	r4, #0
 800bf68:	d0cb      	beq.n	800bf02 <__ieee754_atan2f+0x46>
 800bf6a:	4913      	ldr	r1, [pc, #76]	@ (800bfb8 <__ieee754_atan2f+0xfc>)
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	f7f4 fe0b 	bl	8000b88 <__addsf3>
 800bf72:	4912      	ldr	r1, [pc, #72]	@ (800bfbc <__ieee754_atan2f+0x100>)
 800bf74:	e00c      	b.n	800bf90 <__ieee754_atan2f+0xd4>
 800bf76:	4b12      	ldr	r3, [pc, #72]	@ (800bfc0 <__ieee754_atan2f+0x104>)
 800bf78:	e7f1      	b.n	800bf5e <__ieee754_atan2f+0xa2>
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	e7ef      	b.n	800bf5e <__ieee754_atan2f+0xa2>
 800bf7e:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800bf82:	e7be      	b.n	800bf02 <__ieee754_atan2f+0x46>
 800bf84:	490c      	ldr	r1, [pc, #48]	@ (800bfb8 <__ieee754_atan2f+0xfc>)
 800bf86:	4618      	mov	r0, r3
 800bf88:	f7f4 fdfe 	bl	8000b88 <__addsf3>
 800bf8c:	4601      	mov	r1, r0
 800bf8e:	480b      	ldr	r0, [pc, #44]	@ (800bfbc <__ieee754_atan2f+0x100>)
 800bf90:	f7f4 fdf8 	bl	8000b84 <__aeabi_fsub>
 800bf94:	e7a2      	b.n	800bedc <__ieee754_atan2f+0x20>
 800bf96:	4b09      	ldr	r3, [pc, #36]	@ (800bfbc <__ieee754_atan2f+0x100>)
 800bf98:	e7b3      	b.n	800bf02 <__ieee754_atan2f+0x46>
 800bf9a:	4b0a      	ldr	r3, [pc, #40]	@ (800bfc4 <__ieee754_atan2f+0x108>)
 800bf9c:	e7b1      	b.n	800bf02 <__ieee754_atan2f+0x46>
 800bf9e:	4b0a      	ldr	r3, [pc, #40]	@ (800bfc8 <__ieee754_atan2f+0x10c>)
 800bfa0:	e7af      	b.n	800bf02 <__ieee754_atan2f+0x46>
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	e7ad      	b.n	800bf02 <__ieee754_atan2f+0x46>
 800bfa6:	4b06      	ldr	r3, [pc, #24]	@ (800bfc0 <__ieee754_atan2f+0x104>)
 800bfa8:	e7ab      	b.n	800bf02 <__ieee754_atan2f+0x46>
 800bfaa:	bf00      	nop
 800bfac:	bfc90fdb 	.word	0xbfc90fdb
 800bfb0:	0800c85c 	.word	0x0800c85c
 800bfb4:	0800c850 	.word	0x0800c850
 800bfb8:	33bbbd2e 	.word	0x33bbbd2e
 800bfbc:	40490fdb 	.word	0x40490fdb
 800bfc0:	3fc90fdb 	.word	0x3fc90fdb
 800bfc4:	c0490fdb 	.word	0xc0490fdb
 800bfc8:	3f490fdb 	.word	0x3f490fdb

0800bfcc <atanf>:
 800bfcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfd0:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 800bfd4:	f1b5 4fa1 	cmp.w	r5, #1350565888	@ 0x50800000
 800bfd8:	4604      	mov	r4, r0
 800bfda:	4680      	mov	r8, r0
 800bfdc:	d30e      	bcc.n	800bffc <atanf+0x30>
 800bfde:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800bfe2:	d904      	bls.n	800bfee <atanf+0x22>
 800bfe4:	4601      	mov	r1, r0
 800bfe6:	f7f4 fdcf 	bl	8000b88 <__addsf3>
 800bfea:	4604      	mov	r4, r0
 800bfec:	e003      	b.n	800bff6 <atanf+0x2a>
 800bfee:	2800      	cmp	r0, #0
 800bff0:	f340 80ce 	ble.w	800c190 <atanf+0x1c4>
 800bff4:	4c67      	ldr	r4, [pc, #412]	@ (800c194 <atanf+0x1c8>)
 800bff6:	4620      	mov	r0, r4
 800bff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bffc:	4b66      	ldr	r3, [pc, #408]	@ (800c198 <atanf+0x1cc>)
 800bffe:	429d      	cmp	r5, r3
 800c000:	d80e      	bhi.n	800c020 <atanf+0x54>
 800c002:	f1b5 5f44 	cmp.w	r5, #822083584	@ 0x31000000
 800c006:	d208      	bcs.n	800c01a <atanf+0x4e>
 800c008:	4964      	ldr	r1, [pc, #400]	@ (800c19c <atanf+0x1d0>)
 800c00a:	f7f4 fdbd 	bl	8000b88 <__addsf3>
 800c00e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800c012:	f7f5 f87d 	bl	8001110 <__aeabi_fcmpgt>
 800c016:	2800      	cmp	r0, #0
 800c018:	d1ed      	bne.n	800bff6 <atanf+0x2a>
 800c01a:	f04f 36ff 	mov.w	r6, #4294967295
 800c01e:	e01c      	b.n	800c05a <atanf+0x8e>
 800c020:	f000 f8e0 	bl	800c1e4 <fabsf>
 800c024:	4b5e      	ldr	r3, [pc, #376]	@ (800c1a0 <atanf+0x1d4>)
 800c026:	4604      	mov	r4, r0
 800c028:	429d      	cmp	r5, r3
 800c02a:	d87c      	bhi.n	800c126 <atanf+0x15a>
 800c02c:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800c030:	429d      	cmp	r5, r3
 800c032:	d867      	bhi.n	800c104 <atanf+0x138>
 800c034:	4601      	mov	r1, r0
 800c036:	f7f4 fda7 	bl	8000b88 <__addsf3>
 800c03a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800c03e:	f7f4 fda1 	bl	8000b84 <__aeabi_fsub>
 800c042:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800c046:	4605      	mov	r5, r0
 800c048:	4620      	mov	r0, r4
 800c04a:	f7f4 fd9d 	bl	8000b88 <__addsf3>
 800c04e:	4601      	mov	r1, r0
 800c050:	4628      	mov	r0, r5
 800c052:	f7f4 ff55 	bl	8000f00 <__aeabi_fdiv>
 800c056:	2600      	movs	r6, #0
 800c058:	4604      	mov	r4, r0
 800c05a:	4621      	mov	r1, r4
 800c05c:	4620      	mov	r0, r4
 800c05e:	f7f4 fe9b 	bl	8000d98 <__aeabi_fmul>
 800c062:	4601      	mov	r1, r0
 800c064:	4607      	mov	r7, r0
 800c066:	f7f4 fe97 	bl	8000d98 <__aeabi_fmul>
 800c06a:	4605      	mov	r5, r0
 800c06c:	494d      	ldr	r1, [pc, #308]	@ (800c1a4 <atanf+0x1d8>)
 800c06e:	f7f4 fe93 	bl	8000d98 <__aeabi_fmul>
 800c072:	494d      	ldr	r1, [pc, #308]	@ (800c1a8 <atanf+0x1dc>)
 800c074:	f7f4 fd88 	bl	8000b88 <__addsf3>
 800c078:	4629      	mov	r1, r5
 800c07a:	f7f4 fe8d 	bl	8000d98 <__aeabi_fmul>
 800c07e:	494b      	ldr	r1, [pc, #300]	@ (800c1ac <atanf+0x1e0>)
 800c080:	f7f4 fd82 	bl	8000b88 <__addsf3>
 800c084:	4629      	mov	r1, r5
 800c086:	f7f4 fe87 	bl	8000d98 <__aeabi_fmul>
 800c08a:	4949      	ldr	r1, [pc, #292]	@ (800c1b0 <atanf+0x1e4>)
 800c08c:	f7f4 fd7c 	bl	8000b88 <__addsf3>
 800c090:	4629      	mov	r1, r5
 800c092:	f7f4 fe81 	bl	8000d98 <__aeabi_fmul>
 800c096:	4947      	ldr	r1, [pc, #284]	@ (800c1b4 <atanf+0x1e8>)
 800c098:	f7f4 fd76 	bl	8000b88 <__addsf3>
 800c09c:	4629      	mov	r1, r5
 800c09e:	f7f4 fe7b 	bl	8000d98 <__aeabi_fmul>
 800c0a2:	4945      	ldr	r1, [pc, #276]	@ (800c1b8 <atanf+0x1ec>)
 800c0a4:	f7f4 fd70 	bl	8000b88 <__addsf3>
 800c0a8:	4639      	mov	r1, r7
 800c0aa:	f7f4 fe75 	bl	8000d98 <__aeabi_fmul>
 800c0ae:	4943      	ldr	r1, [pc, #268]	@ (800c1bc <atanf+0x1f0>)
 800c0b0:	4607      	mov	r7, r0
 800c0b2:	4628      	mov	r0, r5
 800c0b4:	f7f4 fe70 	bl	8000d98 <__aeabi_fmul>
 800c0b8:	4941      	ldr	r1, [pc, #260]	@ (800c1c0 <atanf+0x1f4>)
 800c0ba:	f7f4 fd63 	bl	8000b84 <__aeabi_fsub>
 800c0be:	4629      	mov	r1, r5
 800c0c0:	f7f4 fe6a 	bl	8000d98 <__aeabi_fmul>
 800c0c4:	493f      	ldr	r1, [pc, #252]	@ (800c1c4 <atanf+0x1f8>)
 800c0c6:	f7f4 fd5d 	bl	8000b84 <__aeabi_fsub>
 800c0ca:	4629      	mov	r1, r5
 800c0cc:	f7f4 fe64 	bl	8000d98 <__aeabi_fmul>
 800c0d0:	493d      	ldr	r1, [pc, #244]	@ (800c1c8 <atanf+0x1fc>)
 800c0d2:	f7f4 fd57 	bl	8000b84 <__aeabi_fsub>
 800c0d6:	4629      	mov	r1, r5
 800c0d8:	f7f4 fe5e 	bl	8000d98 <__aeabi_fmul>
 800c0dc:	493b      	ldr	r1, [pc, #236]	@ (800c1cc <atanf+0x200>)
 800c0de:	f7f4 fd51 	bl	8000b84 <__aeabi_fsub>
 800c0e2:	4629      	mov	r1, r5
 800c0e4:	f7f4 fe58 	bl	8000d98 <__aeabi_fmul>
 800c0e8:	4601      	mov	r1, r0
 800c0ea:	4638      	mov	r0, r7
 800c0ec:	f7f4 fd4c 	bl	8000b88 <__addsf3>
 800c0f0:	4621      	mov	r1, r4
 800c0f2:	f7f4 fe51 	bl	8000d98 <__aeabi_fmul>
 800c0f6:	1c73      	adds	r3, r6, #1
 800c0f8:	4601      	mov	r1, r0
 800c0fa:	d133      	bne.n	800c164 <atanf+0x198>
 800c0fc:	4620      	mov	r0, r4
 800c0fe:	f7f4 fd41 	bl	8000b84 <__aeabi_fsub>
 800c102:	e772      	b.n	800bfea <atanf+0x1e>
 800c104:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800c108:	f7f4 fd3c 	bl	8000b84 <__aeabi_fsub>
 800c10c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800c110:	4605      	mov	r5, r0
 800c112:	4620      	mov	r0, r4
 800c114:	f7f4 fd38 	bl	8000b88 <__addsf3>
 800c118:	4601      	mov	r1, r0
 800c11a:	4628      	mov	r0, r5
 800c11c:	f7f4 fef0 	bl	8000f00 <__aeabi_fdiv>
 800c120:	2601      	movs	r6, #1
 800c122:	4604      	mov	r4, r0
 800c124:	e799      	b.n	800c05a <atanf+0x8e>
 800c126:	4b2a      	ldr	r3, [pc, #168]	@ (800c1d0 <atanf+0x204>)
 800c128:	429d      	cmp	r5, r3
 800c12a:	d814      	bhi.n	800c156 <atanf+0x18a>
 800c12c:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 800c130:	f7f4 fd28 	bl	8000b84 <__aeabi_fsub>
 800c134:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 800c138:	4605      	mov	r5, r0
 800c13a:	4620      	mov	r0, r4
 800c13c:	f7f4 fe2c 	bl	8000d98 <__aeabi_fmul>
 800c140:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800c144:	f7f4 fd20 	bl	8000b88 <__addsf3>
 800c148:	4601      	mov	r1, r0
 800c14a:	4628      	mov	r0, r5
 800c14c:	f7f4 fed8 	bl	8000f00 <__aeabi_fdiv>
 800c150:	2602      	movs	r6, #2
 800c152:	4604      	mov	r4, r0
 800c154:	e781      	b.n	800c05a <atanf+0x8e>
 800c156:	4601      	mov	r1, r0
 800c158:	481e      	ldr	r0, [pc, #120]	@ (800c1d4 <atanf+0x208>)
 800c15a:	f7f4 fed1 	bl	8000f00 <__aeabi_fdiv>
 800c15e:	2603      	movs	r6, #3
 800c160:	4604      	mov	r4, r0
 800c162:	e77a      	b.n	800c05a <atanf+0x8e>
 800c164:	4b1c      	ldr	r3, [pc, #112]	@ (800c1d8 <atanf+0x20c>)
 800c166:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800c16a:	f7f4 fd0b 	bl	8000b84 <__aeabi_fsub>
 800c16e:	4621      	mov	r1, r4
 800c170:	f7f4 fd08 	bl	8000b84 <__aeabi_fsub>
 800c174:	4b19      	ldr	r3, [pc, #100]	@ (800c1dc <atanf+0x210>)
 800c176:	4601      	mov	r1, r0
 800c178:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c17c:	f7f4 fd02 	bl	8000b84 <__aeabi_fsub>
 800c180:	f1b8 0f00 	cmp.w	r8, #0
 800c184:	4604      	mov	r4, r0
 800c186:	f6bf af36 	bge.w	800bff6 <atanf+0x2a>
 800c18a:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 800c18e:	e732      	b.n	800bff6 <atanf+0x2a>
 800c190:	4c13      	ldr	r4, [pc, #76]	@ (800c1e0 <atanf+0x214>)
 800c192:	e730      	b.n	800bff6 <atanf+0x2a>
 800c194:	3fc90fdb 	.word	0x3fc90fdb
 800c198:	3edfffff 	.word	0x3edfffff
 800c19c:	7149f2ca 	.word	0x7149f2ca
 800c1a0:	3f97ffff 	.word	0x3f97ffff
 800c1a4:	3c8569d7 	.word	0x3c8569d7
 800c1a8:	3d4bda59 	.word	0x3d4bda59
 800c1ac:	3d886b35 	.word	0x3d886b35
 800c1b0:	3dba2e6e 	.word	0x3dba2e6e
 800c1b4:	3e124925 	.word	0x3e124925
 800c1b8:	3eaaaaab 	.word	0x3eaaaaab
 800c1bc:	bd15a221 	.word	0xbd15a221
 800c1c0:	3d6ef16b 	.word	0x3d6ef16b
 800c1c4:	3d9d8795 	.word	0x3d9d8795
 800c1c8:	3de38e38 	.word	0x3de38e38
 800c1cc:	3e4ccccd 	.word	0x3e4ccccd
 800c1d0:	401bffff 	.word	0x401bffff
 800c1d4:	bf800000 	.word	0xbf800000
 800c1d8:	0800c868 	.word	0x0800c868
 800c1dc:	0800c878 	.word	0x0800c878
 800c1e0:	bfc90fdb 	.word	0xbfc90fdb

0800c1e4 <fabsf>:
 800c1e4:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800c1e8:	4770      	bx	lr
	...

0800c1ec <_init>:
 800c1ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1ee:	bf00      	nop
 800c1f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1f2:	bc08      	pop	{r3}
 800c1f4:	469e      	mov	lr, r3
 800c1f6:	4770      	bx	lr

0800c1f8 <_fini>:
 800c1f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1fa:	bf00      	nop
 800c1fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1fe:	bc08      	pop	{r3}
 800c200:	469e      	mov	lr, r3
 800c202:	4770      	bx	lr
