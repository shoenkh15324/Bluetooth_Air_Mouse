
Dongle_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d6a4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000588  0800d7b8  0800d7b8  0000e7b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dd40  0800dd40  0000f330  2**0
                  CONTENTS
  4 .ARM          00000008  0800dd40  0800dd40  0000ed40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dd48  0800dd48  0000f330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dd48  0800dd48  0000ed48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dd4c  0800dd4c  0000ed4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000330  20000000  0800dd50  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f90  20000330  0800e080  0000f330  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200012c0  0800e080  000102c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000f330  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010f19  00000000  00000000  0000f359  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035b0  00000000  00000000  00020272  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef8  00000000  00000000  00023828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b28  00000000  00000000  00024720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ad31  00000000  00000000  00025248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001489c  00000000  00000000  0003ff79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089377  00000000  00000000  00054815  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ddb8c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f30  00000000  00000000  000ddbd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  000e2b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000330 	.word	0x20000330
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d79c 	.word	0x0800d79c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000334 	.word	0x20000334
 800014c:	0800d79c 	.word	0x0800d79c

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <__aeabi_drsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000168:	e002      	b.n	8000170 <__adddf3>
 800016a:	bf00      	nop

0800016c <__aeabi_dsub>:
 800016c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000170 <__adddf3>:
 8000170:	b530      	push	{r4, r5, lr}
 8000172:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000176:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800017a:	ea94 0f05 	teq	r4, r5
 800017e:	bf08      	it	eq
 8000180:	ea90 0f02 	teqeq	r0, r2
 8000184:	bf1f      	itttt	ne
 8000186:	ea54 0c00 	orrsne.w	ip, r4, r0
 800018a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000192:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000196:	f000 80e2 	beq.w	800035e <__adddf3+0x1ee>
 800019a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001a2:	bfb8      	it	lt
 80001a4:	426d      	neglt	r5, r5
 80001a6:	dd0c      	ble.n	80001c2 <__adddf3+0x52>
 80001a8:	442c      	add	r4, r5
 80001aa:	ea80 0202 	eor.w	r2, r0, r2
 80001ae:	ea81 0303 	eor.w	r3, r1, r3
 80001b2:	ea82 0000 	eor.w	r0, r2, r0
 80001b6:	ea83 0101 	eor.w	r1, r3, r1
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	2d36      	cmp	r5, #54	@ 0x36
 80001c4:	bf88      	it	hi
 80001c6:	bd30      	pophi	{r4, r5, pc}
 80001c8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001d0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x70>
 80001da:	4240      	negs	r0, r0
 80001dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001e0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001ec:	d002      	beq.n	80001f4 <__adddf3+0x84>
 80001ee:	4252      	negs	r2, r2
 80001f0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f4:	ea94 0f05 	teq	r4, r5
 80001f8:	f000 80a7 	beq.w	800034a <__adddf3+0x1da>
 80001fc:	f1a4 0401 	sub.w	r4, r4, #1
 8000200:	f1d5 0e20 	rsbs	lr, r5, #32
 8000204:	db0d      	blt.n	8000222 <__adddf3+0xb2>
 8000206:	fa02 fc0e 	lsl.w	ip, r2, lr
 800020a:	fa22 f205 	lsr.w	r2, r2, r5
 800020e:	1880      	adds	r0, r0, r2
 8000210:	f141 0100 	adc.w	r1, r1, #0
 8000214:	fa03 f20e 	lsl.w	r2, r3, lr
 8000218:	1880      	adds	r0, r0, r2
 800021a:	fa43 f305 	asr.w	r3, r3, r5
 800021e:	4159      	adcs	r1, r3
 8000220:	e00e      	b.n	8000240 <__adddf3+0xd0>
 8000222:	f1a5 0520 	sub.w	r5, r5, #32
 8000226:	f10e 0e20 	add.w	lr, lr, #32
 800022a:	2a01      	cmp	r2, #1
 800022c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000230:	bf28      	it	cs
 8000232:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	18c0      	adds	r0, r0, r3
 800023c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000240:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000244:	d507      	bpl.n	8000256 <__adddf3+0xe6>
 8000246:	f04f 0e00 	mov.w	lr, #0
 800024a:	f1dc 0c00 	rsbs	ip, ip, #0
 800024e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000252:	eb6e 0101 	sbc.w	r1, lr, r1
 8000256:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800025a:	d31b      	bcc.n	8000294 <__adddf3+0x124>
 800025c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000260:	d30c      	bcc.n	800027c <__adddf3+0x10c>
 8000262:	0849      	lsrs	r1, r1, #1
 8000264:	ea5f 0030 	movs.w	r0, r0, rrx
 8000268:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800026c:	f104 0401 	add.w	r4, r4, #1
 8000270:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000274:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000278:	f080 809a 	bcs.w	80003b0 <__adddf3+0x240>
 800027c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000280:	bf08      	it	eq
 8000282:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000286:	f150 0000 	adcs.w	r0, r0, #0
 800028a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028e:	ea41 0105 	orr.w	r1, r1, r5
 8000292:	bd30      	pop	{r4, r5, pc}
 8000294:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000298:	4140      	adcs	r0, r0
 800029a:	eb41 0101 	adc.w	r1, r1, r1
 800029e:	3c01      	subs	r4, #1
 80002a0:	bf28      	it	cs
 80002a2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a6:	d2e9      	bcs.n	800027c <__adddf3+0x10c>
 80002a8:	f091 0f00 	teq	r1, #0
 80002ac:	bf04      	itt	eq
 80002ae:	4601      	moveq	r1, r0
 80002b0:	2000      	moveq	r0, #0
 80002b2:	fab1 f381 	clz	r3, r1
 80002b6:	bf08      	it	eq
 80002b8:	3320      	addeq	r3, #32
 80002ba:	f1a3 030b 	sub.w	r3, r3, #11
 80002be:	f1b3 0220 	subs.w	r2, r3, #32
 80002c2:	da0c      	bge.n	80002de <__adddf3+0x16e>
 80002c4:	320c      	adds	r2, #12
 80002c6:	dd08      	ble.n	80002da <__adddf3+0x16a>
 80002c8:	f102 0c14 	add.w	ip, r2, #20
 80002cc:	f1c2 020c 	rsb	r2, r2, #12
 80002d0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d4:	fa21 f102 	lsr.w	r1, r1, r2
 80002d8:	e00c      	b.n	80002f4 <__adddf3+0x184>
 80002da:	f102 0214 	add.w	r2, r2, #20
 80002de:	bfd8      	it	le
 80002e0:	f1c2 0c20 	rsble	ip, r2, #32
 80002e4:	fa01 f102 	lsl.w	r1, r1, r2
 80002e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002ec:	bfdc      	itt	le
 80002ee:	ea41 010c 	orrle.w	r1, r1, ip
 80002f2:	4090      	lslle	r0, r2
 80002f4:	1ae4      	subs	r4, r4, r3
 80002f6:	bfa2      	ittt	ge
 80002f8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002fc:	4329      	orrge	r1, r5
 80002fe:	bd30      	popge	{r4, r5, pc}
 8000300:	ea6f 0404 	mvn.w	r4, r4
 8000304:	3c1f      	subs	r4, #31
 8000306:	da1c      	bge.n	8000342 <__adddf3+0x1d2>
 8000308:	340c      	adds	r4, #12
 800030a:	dc0e      	bgt.n	800032a <__adddf3+0x1ba>
 800030c:	f104 0414 	add.w	r4, r4, #20
 8000310:	f1c4 0220 	rsb	r2, r4, #32
 8000314:	fa20 f004 	lsr.w	r0, r0, r4
 8000318:	fa01 f302 	lsl.w	r3, r1, r2
 800031c:	ea40 0003 	orr.w	r0, r0, r3
 8000320:	fa21 f304 	lsr.w	r3, r1, r4
 8000324:	ea45 0103 	orr.w	r1, r5, r3
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	f1c4 040c 	rsb	r4, r4, #12
 800032e:	f1c4 0220 	rsb	r2, r4, #32
 8000332:	fa20 f002 	lsr.w	r0, r0, r2
 8000336:	fa01 f304 	lsl.w	r3, r1, r4
 800033a:	ea40 0003 	orr.w	r0, r0, r3
 800033e:	4629      	mov	r1, r5
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	fa21 f004 	lsr.w	r0, r1, r4
 8000346:	4629      	mov	r1, r5
 8000348:	bd30      	pop	{r4, r5, pc}
 800034a:	f094 0f00 	teq	r4, #0
 800034e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000352:	bf06      	itte	eq
 8000354:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000358:	3401      	addeq	r4, #1
 800035a:	3d01      	subne	r5, #1
 800035c:	e74e      	b.n	80001fc <__adddf3+0x8c>
 800035e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000362:	bf18      	it	ne
 8000364:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000368:	d029      	beq.n	80003be <__adddf3+0x24e>
 800036a:	ea94 0f05 	teq	r4, r5
 800036e:	bf08      	it	eq
 8000370:	ea90 0f02 	teqeq	r0, r2
 8000374:	d005      	beq.n	8000382 <__adddf3+0x212>
 8000376:	ea54 0c00 	orrs.w	ip, r4, r0
 800037a:	bf04      	itt	eq
 800037c:	4619      	moveq	r1, r3
 800037e:	4610      	moveq	r0, r2
 8000380:	bd30      	pop	{r4, r5, pc}
 8000382:	ea91 0f03 	teq	r1, r3
 8000386:	bf1e      	ittt	ne
 8000388:	2100      	movne	r1, #0
 800038a:	2000      	movne	r0, #0
 800038c:	bd30      	popne	{r4, r5, pc}
 800038e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000392:	d105      	bne.n	80003a0 <__adddf3+0x230>
 8000394:	0040      	lsls	r0, r0, #1
 8000396:	4149      	adcs	r1, r1
 8000398:	bf28      	it	cs
 800039a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a4:	bf3c      	itt	cc
 80003a6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003aa:	bd30      	popcc	{r4, r5, pc}
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b8:	f04f 0000 	mov.w	r0, #0
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c2:	bf1a      	itte	ne
 80003c4:	4619      	movne	r1, r3
 80003c6:	4610      	movne	r0, r2
 80003c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003cc:	bf1c      	itt	ne
 80003ce:	460b      	movne	r3, r1
 80003d0:	4602      	movne	r2, r0
 80003d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d6:	bf06      	itte	eq
 80003d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003dc:	ea91 0f03 	teqeq	r1, r3
 80003e0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	bf00      	nop

080003e8 <__aeabi_ui2d>:
 80003e8:	f090 0f00 	teq	r0, #0
 80003ec:	bf04      	itt	eq
 80003ee:	2100      	moveq	r1, #0
 80003f0:	4770      	bxeq	lr
 80003f2:	b530      	push	{r4, r5, lr}
 80003f4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003fc:	f04f 0500 	mov.w	r5, #0
 8000400:	f04f 0100 	mov.w	r1, #0
 8000404:	e750      	b.n	80002a8 <__adddf3+0x138>
 8000406:	bf00      	nop

08000408 <__aeabi_i2d>:
 8000408:	f090 0f00 	teq	r0, #0
 800040c:	bf04      	itt	eq
 800040e:	2100      	moveq	r1, #0
 8000410:	4770      	bxeq	lr
 8000412:	b530      	push	{r4, r5, lr}
 8000414:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000418:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800041c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000420:	bf48      	it	mi
 8000422:	4240      	negmi	r0, r0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e73e      	b.n	80002a8 <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_f2d>:
 800042c:	0042      	lsls	r2, r0, #1
 800042e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000432:	ea4f 0131 	mov.w	r1, r1, rrx
 8000436:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800043a:	bf1f      	itttt	ne
 800043c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000440:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000444:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000448:	4770      	bxne	lr
 800044a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044e:	bf08      	it	eq
 8000450:	4770      	bxeq	lr
 8000452:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000456:	bf04      	itt	eq
 8000458:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000464:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000468:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800046c:	e71c      	b.n	80002a8 <__adddf3+0x138>
 800046e:	bf00      	nop

08000470 <__aeabi_ul2d>:
 8000470:	ea50 0201 	orrs.w	r2, r0, r1
 8000474:	bf08      	it	eq
 8000476:	4770      	bxeq	lr
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	f04f 0500 	mov.w	r5, #0
 800047e:	e00a      	b.n	8000496 <__aeabi_l2d+0x16>

08000480 <__aeabi_l2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048e:	d502      	bpl.n	8000496 <__aeabi_l2d+0x16>
 8000490:	4240      	negs	r0, r0
 8000492:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000496:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004a2:	f43f aed8 	beq.w	8000256 <__adddf3+0xe6>
 80004a6:	f04f 0203 	mov.w	r2, #3
 80004aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ae:	bf18      	it	ne
 80004b0:	3203      	addne	r2, #3
 80004b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b6:	bf18      	it	ne
 80004b8:	3203      	addne	r2, #3
 80004ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004be:	f1c2 0320 	rsb	r3, r2, #32
 80004c2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c6:	fa20 f002 	lsr.w	r0, r0, r2
 80004ca:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ce:	ea40 000e 	orr.w	r0, r0, lr
 80004d2:	fa21 f102 	lsr.w	r1, r1, r2
 80004d6:	4414      	add	r4, r2
 80004d8:	e6bd      	b.n	8000256 <__adddf3+0xe6>
 80004da:	bf00      	nop

080004dc <__aeabi_dmul>:
 80004dc:	b570      	push	{r4, r5, r6, lr}
 80004de:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004e2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004ea:	bf1d      	ittte	ne
 80004ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004f0:	ea94 0f0c 	teqne	r4, ip
 80004f4:	ea95 0f0c 	teqne	r5, ip
 80004f8:	f000 f8de 	bleq	80006b8 <__aeabi_dmul+0x1dc>
 80004fc:	442c      	add	r4, r5
 80004fe:	ea81 0603 	eor.w	r6, r1, r3
 8000502:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000506:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800050a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050e:	bf18      	it	ne
 8000510:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000514:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000518:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800051c:	d038      	beq.n	8000590 <__aeabi_dmul+0xb4>
 800051e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000522:	f04f 0500 	mov.w	r5, #0
 8000526:	fbe1 e502 	umlal	lr, r5, r1, r2
 800052a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000532:	f04f 0600 	mov.w	r6, #0
 8000536:	fbe1 5603 	umlal	r5, r6, r1, r3
 800053a:	f09c 0f00 	teq	ip, #0
 800053e:	bf18      	it	ne
 8000540:	f04e 0e01 	orrne.w	lr, lr, #1
 8000544:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000548:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800054c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000550:	d204      	bcs.n	800055c <__aeabi_dmul+0x80>
 8000552:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000556:	416d      	adcs	r5, r5
 8000558:	eb46 0606 	adc.w	r6, r6, r6
 800055c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000560:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000564:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000568:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800056c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000570:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000574:	bf88      	it	hi
 8000576:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800057a:	d81e      	bhi.n	80005ba <__aeabi_dmul+0xde>
 800057c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000580:	bf08      	it	eq
 8000582:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000586:	f150 0000 	adcs.w	r0, r0, #0
 800058a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058e:	bd70      	pop	{r4, r5, r6, pc}
 8000590:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000594:	ea46 0101 	orr.w	r1, r6, r1
 8000598:	ea40 0002 	orr.w	r0, r0, r2
 800059c:	ea81 0103 	eor.w	r1, r1, r3
 80005a0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a4:	bfc2      	ittt	gt
 80005a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ae:	bd70      	popgt	{r4, r5, r6, pc}
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b4:	f04f 0e00 	mov.w	lr, #0
 80005b8:	3c01      	subs	r4, #1
 80005ba:	f300 80ab 	bgt.w	8000714 <__aeabi_dmul+0x238>
 80005be:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005c2:	bfde      	ittt	le
 80005c4:	2000      	movle	r0, #0
 80005c6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd70      	pople	{r4, r5, r6, pc}
 80005cc:	f1c4 0400 	rsb	r4, r4, #0
 80005d0:	3c20      	subs	r4, #32
 80005d2:	da35      	bge.n	8000640 <__aeabi_dmul+0x164>
 80005d4:	340c      	adds	r4, #12
 80005d6:	dc1b      	bgt.n	8000610 <__aeabi_dmul+0x134>
 80005d8:	f104 0414 	add.w	r4, r4, #20
 80005dc:	f1c4 0520 	rsb	r5, r4, #32
 80005e0:	fa00 f305 	lsl.w	r3, r0, r5
 80005e4:	fa20 f004 	lsr.w	r0, r0, r4
 80005e8:	fa01 f205 	lsl.w	r2, r1, r5
 80005ec:	ea40 0002 	orr.w	r0, r0, r2
 80005f0:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005fc:	fa21 f604 	lsr.w	r6, r1, r4
 8000600:	eb42 0106 	adc.w	r1, r2, r6
 8000604:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000608:	bf08      	it	eq
 800060a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060e:	bd70      	pop	{r4, r5, r6, pc}
 8000610:	f1c4 040c 	rsb	r4, r4, #12
 8000614:	f1c4 0520 	rsb	r5, r4, #32
 8000618:	fa00 f304 	lsl.w	r3, r0, r4
 800061c:	fa20 f005 	lsr.w	r0, r0, r5
 8000620:	fa01 f204 	lsl.w	r2, r1, r4
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800062c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000630:	f141 0100 	adc.w	r1, r1, #0
 8000634:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000638:	bf08      	it	eq
 800063a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063e:	bd70      	pop	{r4, r5, r6, pc}
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f205 	lsl.w	r2, r0, r5
 8000648:	ea4e 0e02 	orr.w	lr, lr, r2
 800064c:	fa20 f304 	lsr.w	r3, r0, r4
 8000650:	fa01 f205 	lsl.w	r2, r1, r5
 8000654:	ea43 0302 	orr.w	r3, r3, r2
 8000658:	fa21 f004 	lsr.w	r0, r1, r4
 800065c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000660:	fa21 f204 	lsr.w	r2, r1, r4
 8000664:	ea20 0002 	bic.w	r0, r0, r2
 8000668:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800066c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000670:	bf08      	it	eq
 8000672:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000676:	bd70      	pop	{r4, r5, r6, pc}
 8000678:	f094 0f00 	teq	r4, #0
 800067c:	d10f      	bne.n	800069e <__aeabi_dmul+0x1c2>
 800067e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000682:	0040      	lsls	r0, r0, #1
 8000684:	eb41 0101 	adc.w	r1, r1, r1
 8000688:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800068c:	bf08      	it	eq
 800068e:	3c01      	subeq	r4, #1
 8000690:	d0f7      	beq.n	8000682 <__aeabi_dmul+0x1a6>
 8000692:	ea41 0106 	orr.w	r1, r1, r6
 8000696:	f095 0f00 	teq	r5, #0
 800069a:	bf18      	it	ne
 800069c:	4770      	bxne	lr
 800069e:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006a2:	0052      	lsls	r2, r2, #1
 80006a4:	eb43 0303 	adc.w	r3, r3, r3
 80006a8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006ac:	bf08      	it	eq
 80006ae:	3d01      	subeq	r5, #1
 80006b0:	d0f7      	beq.n	80006a2 <__aeabi_dmul+0x1c6>
 80006b2:	ea43 0306 	orr.w	r3, r3, r6
 80006b6:	4770      	bx	lr
 80006b8:	ea94 0f0c 	teq	r4, ip
 80006bc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006c0:	bf18      	it	ne
 80006c2:	ea95 0f0c 	teqne	r5, ip
 80006c6:	d00c      	beq.n	80006e2 <__aeabi_dmul+0x206>
 80006c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006cc:	bf18      	it	ne
 80006ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d2:	d1d1      	bne.n	8000678 <__aeabi_dmul+0x19c>
 80006d4:	ea81 0103 	eor.w	r1, r1, r3
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006dc:	f04f 0000 	mov.w	r0, #0
 80006e0:	bd70      	pop	{r4, r5, r6, pc}
 80006e2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e6:	bf06      	itte	eq
 80006e8:	4610      	moveq	r0, r2
 80006ea:	4619      	moveq	r1, r3
 80006ec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f0:	d019      	beq.n	8000726 <__aeabi_dmul+0x24a>
 80006f2:	ea94 0f0c 	teq	r4, ip
 80006f6:	d102      	bne.n	80006fe <__aeabi_dmul+0x222>
 80006f8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006fc:	d113      	bne.n	8000726 <__aeabi_dmul+0x24a>
 80006fe:	ea95 0f0c 	teq	r5, ip
 8000702:	d105      	bne.n	8000710 <__aeabi_dmul+0x234>
 8000704:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000708:	bf1c      	itt	ne
 800070a:	4610      	movne	r0, r2
 800070c:	4619      	movne	r1, r3
 800070e:	d10a      	bne.n	8000726 <__aeabi_dmul+0x24a>
 8000710:	ea81 0103 	eor.w	r1, r1, r3
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000718:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800071c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000720:	f04f 0000 	mov.w	r0, #0
 8000724:	bd70      	pop	{r4, r5, r6, pc}
 8000726:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800072a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072e:	bd70      	pop	{r4, r5, r6, pc}

08000730 <__aeabi_ddiv>:
 8000730:	b570      	push	{r4, r5, r6, lr}
 8000732:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000736:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800073a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073e:	bf1d      	ittte	ne
 8000740:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000744:	ea94 0f0c 	teqne	r4, ip
 8000748:	ea95 0f0c 	teqne	r5, ip
 800074c:	f000 f8a7 	bleq	800089e <__aeabi_ddiv+0x16e>
 8000750:	eba4 0405 	sub.w	r4, r4, r5
 8000754:	ea81 0e03 	eor.w	lr, r1, r3
 8000758:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800075c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000760:	f000 8088 	beq.w	8000874 <__aeabi_ddiv+0x144>
 8000764:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000768:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800076c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000770:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000774:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000778:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800077c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000780:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000784:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000788:	429d      	cmp	r5, r3
 800078a:	bf08      	it	eq
 800078c:	4296      	cmpeq	r6, r2
 800078e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000792:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000796:	d202      	bcs.n	800079e <__aeabi_ddiv+0x6e>
 8000798:	085b      	lsrs	r3, r3, #1
 800079a:	ea4f 0232 	mov.w	r2, r2, rrx
 800079e:	1ab6      	subs	r6, r6, r2
 80007a0:	eb65 0503 	sbc.w	r5, r5, r3
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007ae:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000802:	bf22      	ittt	cs
 8000804:	1ab6      	subcs	r6, r6, r2
 8000806:	4675      	movcs	r5, lr
 8000808:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800080c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000810:	d018      	beq.n	8000844 <__aeabi_ddiv+0x114>
 8000812:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000816:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800081a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000822:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000826:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800082a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082e:	d1c0      	bne.n	80007b2 <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	d10b      	bne.n	800084e <__aeabi_ddiv+0x11e>
 8000836:	ea41 0100 	orr.w	r1, r1, r0
 800083a:	f04f 0000 	mov.w	r0, #0
 800083e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000842:	e7b6      	b.n	80007b2 <__aeabi_ddiv+0x82>
 8000844:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000848:	bf04      	itt	eq
 800084a:	4301      	orreq	r1, r0
 800084c:	2000      	moveq	r0, #0
 800084e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000852:	bf88      	it	hi
 8000854:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000858:	f63f aeaf 	bhi.w	80005ba <__aeabi_dmul+0xde>
 800085c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000860:	bf04      	itt	eq
 8000862:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000866:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800086a:	f150 0000 	adcs.w	r0, r0, #0
 800086e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000872:	bd70      	pop	{r4, r5, r6, pc}
 8000874:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000878:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800087c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000880:	bfc2      	ittt	gt
 8000882:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000886:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800088a:	bd70      	popgt	{r4, r5, r6, pc}
 800088c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000890:	f04f 0e00 	mov.w	lr, #0
 8000894:	3c01      	subs	r4, #1
 8000896:	e690      	b.n	80005ba <__aeabi_dmul+0xde>
 8000898:	ea45 0e06 	orr.w	lr, r5, r6
 800089c:	e68d      	b.n	80005ba <__aeabi_dmul+0xde>
 800089e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008a2:	ea94 0f0c 	teq	r4, ip
 80008a6:	bf08      	it	eq
 80008a8:	ea95 0f0c 	teqeq	r5, ip
 80008ac:	f43f af3b 	beq.w	8000726 <__aeabi_dmul+0x24a>
 80008b0:	ea94 0f0c 	teq	r4, ip
 80008b4:	d10a      	bne.n	80008cc <__aeabi_ddiv+0x19c>
 80008b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ba:	f47f af34 	bne.w	8000726 <__aeabi_dmul+0x24a>
 80008be:	ea95 0f0c 	teq	r5, ip
 80008c2:	f47f af25 	bne.w	8000710 <__aeabi_dmul+0x234>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e72c      	b.n	8000726 <__aeabi_dmul+0x24a>
 80008cc:	ea95 0f0c 	teq	r5, ip
 80008d0:	d106      	bne.n	80008e0 <__aeabi_ddiv+0x1b0>
 80008d2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d6:	f43f aefd 	beq.w	80006d4 <__aeabi_dmul+0x1f8>
 80008da:	4610      	mov	r0, r2
 80008dc:	4619      	mov	r1, r3
 80008de:	e722      	b.n	8000726 <__aeabi_dmul+0x24a>
 80008e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e4:	bf18      	it	ne
 80008e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ea:	f47f aec5 	bne.w	8000678 <__aeabi_dmul+0x19c>
 80008ee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008f2:	f47f af0d 	bne.w	8000710 <__aeabi_dmul+0x234>
 80008f6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008fa:	f47f aeeb 	bne.w	80006d4 <__aeabi_dmul+0x1f8>
 80008fe:	e712      	b.n	8000726 <__aeabi_dmul+0x24a>

08000900 <__gedf2>:
 8000900:	f04f 3cff 	mov.w	ip, #4294967295
 8000904:	e006      	b.n	8000914 <__cmpdf2+0x4>
 8000906:	bf00      	nop

08000908 <__ledf2>:
 8000908:	f04f 0c01 	mov.w	ip, #1
 800090c:	e002      	b.n	8000914 <__cmpdf2+0x4>
 800090e:	bf00      	nop

08000910 <__cmpdf2>:
 8000910:	f04f 0c01 	mov.w	ip, #1
 8000914:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000918:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800091c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000920:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000924:	bf18      	it	ne
 8000926:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800092a:	d01b      	beq.n	8000964 <__cmpdf2+0x54>
 800092c:	b001      	add	sp, #4
 800092e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000932:	bf0c      	ite	eq
 8000934:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000938:	ea91 0f03 	teqne	r1, r3
 800093c:	bf02      	ittt	eq
 800093e:	ea90 0f02 	teqeq	r0, r2
 8000942:	2000      	moveq	r0, #0
 8000944:	4770      	bxeq	lr
 8000946:	f110 0f00 	cmn.w	r0, #0
 800094a:	ea91 0f03 	teq	r1, r3
 800094e:	bf58      	it	pl
 8000950:	4299      	cmppl	r1, r3
 8000952:	bf08      	it	eq
 8000954:	4290      	cmpeq	r0, r2
 8000956:	bf2c      	ite	cs
 8000958:	17d8      	asrcs	r0, r3, #31
 800095a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095e:	f040 0001 	orr.w	r0, r0, #1
 8000962:	4770      	bx	lr
 8000964:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000968:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800096c:	d102      	bne.n	8000974 <__cmpdf2+0x64>
 800096e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000972:	d107      	bne.n	8000984 <__cmpdf2+0x74>
 8000974:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d1d6      	bne.n	800092c <__cmpdf2+0x1c>
 800097e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000982:	d0d3      	beq.n	800092c <__cmpdf2+0x1c>
 8000984:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_cdrcmple>:
 800098c:	4684      	mov	ip, r0
 800098e:	4610      	mov	r0, r2
 8000990:	4662      	mov	r2, ip
 8000992:	468c      	mov	ip, r1
 8000994:	4619      	mov	r1, r3
 8000996:	4663      	mov	r3, ip
 8000998:	e000      	b.n	800099c <__aeabi_cdcmpeq>
 800099a:	bf00      	nop

0800099c <__aeabi_cdcmpeq>:
 800099c:	b501      	push	{r0, lr}
 800099e:	f7ff ffb7 	bl	8000910 <__cmpdf2>
 80009a2:	2800      	cmp	r0, #0
 80009a4:	bf48      	it	mi
 80009a6:	f110 0f00 	cmnmi.w	r0, #0
 80009aa:	bd01      	pop	{r0, pc}

080009ac <__aeabi_dcmpeq>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff fff4 	bl	800099c <__aeabi_cdcmpeq>
 80009b4:	bf0c      	ite	eq
 80009b6:	2001      	moveq	r0, #1
 80009b8:	2000      	movne	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmplt>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffea 	bl	800099c <__aeabi_cdcmpeq>
 80009c8:	bf34      	ite	cc
 80009ca:	2001      	movcc	r0, #1
 80009cc:	2000      	movcs	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmple>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffe0 	bl	800099c <__aeabi_cdcmpeq>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpge>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffce 	bl	800098c <__aeabi_cdrcmple>
 80009f0:	bf94      	ite	ls
 80009f2:	2001      	movls	r0, #1
 80009f4:	2000      	movhi	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpgt>:
 80009fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a00:	f7ff ffc4 	bl	800098c <__aeabi_cdrcmple>
 8000a04:	bf34      	ite	cc
 8000a06:	2001      	movcc	r0, #1
 8000a08:	2000      	movcs	r0, #0
 8000a0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0e:	bf00      	nop

08000a10 <__aeabi_dcmpun>:
 8000a10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d102      	bne.n	8000a20 <__aeabi_dcmpun+0x10>
 8000a1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1e:	d10a      	bne.n	8000a36 <__aeabi_dcmpun+0x26>
 8000a20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x20>
 8000a2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2e:	d102      	bne.n	8000a36 <__aeabi_dcmpun+0x26>
 8000a30:	f04f 0000 	mov.w	r0, #0
 8000a34:	4770      	bx	lr
 8000a36:	f04f 0001 	mov.w	r0, #1
 8000a3a:	4770      	bx	lr

08000a3c <__aeabi_d2uiz>:
 8000a3c:	004a      	lsls	r2, r1, #1
 8000a3e:	d211      	bcs.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a40:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a44:	d211      	bcs.n	8000a6a <__aeabi_d2uiz+0x2e>
 8000a46:	d50d      	bpl.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a48:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a50:	d40e      	bmi.n	8000a70 <__aeabi_d2uiz+0x34>
 8000a52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a56:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d102      	bne.n	8000a76 <__aeabi_d2uiz+0x3a>
 8000a70:	f04f 30ff 	mov.w	r0, #4294967295
 8000a74:	4770      	bx	lr
 8000a76:	f04f 0000 	mov.w	r0, #0
 8000a7a:	4770      	bx	lr

08000a7c <__aeabi_d2f>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a84:	bf24      	itt	cs
 8000a86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a8e:	d90d      	bls.n	8000aac <__aeabi_d2f+0x30>
 8000a90:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a9c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aa0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa4:	bf08      	it	eq
 8000aa6:	f020 0001 	biceq.w	r0, r0, #1
 8000aaa:	4770      	bx	lr
 8000aac:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ab0:	d121      	bne.n	8000af6 <__aeabi_d2f+0x7a>
 8000ab2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ab6:	bfbc      	itt	lt
 8000ab8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000abc:	4770      	bxlt	lr
 8000abe:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ac2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac6:	f1c2 0218 	rsb	r2, r2, #24
 8000aca:	f1c2 0c20 	rsb	ip, r2, #32
 8000ace:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ad2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad6:	bf18      	it	ne
 8000ad8:	f040 0001 	orrne.w	r0, r0, #1
 8000adc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae8:	ea40 000c 	orr.w	r0, r0, ip
 8000aec:	fa23 f302 	lsr.w	r3, r3, r2
 8000af0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af4:	e7cc      	b.n	8000a90 <__aeabi_d2f+0x14>
 8000af6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000afa:	d107      	bne.n	8000b0c <__aeabi_d2f+0x90>
 8000afc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b00:	bf1e      	ittt	ne
 8000b02:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b06:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b0a:	4770      	bxne	lr
 8000b0c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b10:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b14:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop

08000b1c <__gesf2>:
 8000b1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b20:	e006      	b.n	8000b30 <__cmpsf2+0x4>
 8000b22:	bf00      	nop

08000b24 <__lesf2>:
 8000b24:	f04f 0c01 	mov.w	ip, #1
 8000b28:	e002      	b.n	8000b30 <__cmpsf2+0x4>
 8000b2a:	bf00      	nop

08000b2c <__cmpsf2>:
 8000b2c:	f04f 0c01 	mov.w	ip, #1
 8000b30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b34:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b40:	bf18      	it	ne
 8000b42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b46:	d011      	beq.n	8000b6c <__cmpsf2+0x40>
 8000b48:	b001      	add	sp, #4
 8000b4a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000b4e:	bf18      	it	ne
 8000b50:	ea90 0f01 	teqne	r0, r1
 8000b54:	bf58      	it	pl
 8000b56:	ebb2 0003 	subspl.w	r0, r2, r3
 8000b5a:	bf88      	it	hi
 8000b5c:	17c8      	asrhi	r0, r1, #31
 8000b5e:	bf38      	it	cc
 8000b60:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000b64:	bf18      	it	ne
 8000b66:	f040 0001 	orrne.w	r0, r0, #1
 8000b6a:	4770      	bx	lr
 8000b6c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b70:	d102      	bne.n	8000b78 <__cmpsf2+0x4c>
 8000b72:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000b76:	d105      	bne.n	8000b84 <__cmpsf2+0x58>
 8000b78:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000b7c:	d1e4      	bne.n	8000b48 <__cmpsf2+0x1c>
 8000b7e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000b82:	d0e1      	beq.n	8000b48 <__cmpsf2+0x1c>
 8000b84:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_cfrcmple>:
 8000b8c:	4684      	mov	ip, r0
 8000b8e:	4608      	mov	r0, r1
 8000b90:	4661      	mov	r1, ip
 8000b92:	e7ff      	b.n	8000b94 <__aeabi_cfcmpeq>

08000b94 <__aeabi_cfcmpeq>:
 8000b94:	b50f      	push	{r0, r1, r2, r3, lr}
 8000b96:	f7ff ffc9 	bl	8000b2c <__cmpsf2>
 8000b9a:	2800      	cmp	r0, #0
 8000b9c:	bf48      	it	mi
 8000b9e:	f110 0f00 	cmnmi.w	r0, #0
 8000ba2:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ba4 <__aeabi_fcmpeq>:
 8000ba4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba8:	f7ff fff4 	bl	8000b94 <__aeabi_cfcmpeq>
 8000bac:	bf0c      	ite	eq
 8000bae:	2001      	moveq	r0, #1
 8000bb0:	2000      	movne	r0, #0
 8000bb2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_fcmplt>:
 8000bb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bbc:	f7ff ffea 	bl	8000b94 <__aeabi_cfcmpeq>
 8000bc0:	bf34      	ite	cc
 8000bc2:	2001      	movcc	r0, #1
 8000bc4:	2000      	movcs	r0, #0
 8000bc6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bca:	bf00      	nop

08000bcc <__aeabi_fcmple>:
 8000bcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd0:	f7ff ffe0 	bl	8000b94 <__aeabi_cfcmpeq>
 8000bd4:	bf94      	ite	ls
 8000bd6:	2001      	movls	r0, #1
 8000bd8:	2000      	movhi	r0, #0
 8000bda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bde:	bf00      	nop

08000be0 <__aeabi_fcmpge>:
 8000be0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be4:	f7ff ffd2 	bl	8000b8c <__aeabi_cfrcmple>
 8000be8:	bf94      	ite	ls
 8000bea:	2001      	movls	r0, #1
 8000bec:	2000      	movhi	r0, #0
 8000bee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_fcmpgt>:
 8000bf4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf8:	f7ff ffc8 	bl	8000b8c <__aeabi_cfrcmple>
 8000bfc:	bf34      	ite	cc
 8000bfe:	2001      	movcc	r0, #1
 8000c00:	2000      	movcs	r0, #0
 8000c02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c06:	bf00      	nop

08000c08 <__aeabi_fcmpun>:
 8000c08:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c0c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c10:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c14:	d102      	bne.n	8000c1c <__aeabi_fcmpun+0x14>
 8000c16:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000c1a:	d108      	bne.n	8000c2e <__aeabi_fcmpun+0x26>
 8000c1c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000c20:	d102      	bne.n	8000c28 <__aeabi_fcmpun+0x20>
 8000c22:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000c26:	d102      	bne.n	8000c2e <__aeabi_fcmpun+0x26>
 8000c28:	f04f 0000 	mov.w	r0, #0
 8000c2c:	4770      	bx	lr
 8000c2e:	f04f 0001 	mov.w	r0, #1
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_d2lz>:
 8000c34:	b538      	push	{r3, r4, r5, lr}
 8000c36:	2200      	movs	r2, #0
 8000c38:	2300      	movs	r3, #0
 8000c3a:	4604      	mov	r4, r0
 8000c3c:	460d      	mov	r5, r1
 8000c3e:	f7ff febf 	bl	80009c0 <__aeabi_dcmplt>
 8000c42:	b928      	cbnz	r0, 8000c50 <__aeabi_d2lz+0x1c>
 8000c44:	4620      	mov	r0, r4
 8000c46:	4629      	mov	r1, r5
 8000c48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c4c:	f000 b80a 	b.w	8000c64 <__aeabi_d2ulz>
 8000c50:	4620      	mov	r0, r4
 8000c52:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c56:	f000 f805 	bl	8000c64 <__aeabi_d2ulz>
 8000c5a:	4240      	negs	r0, r0
 8000c5c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c60:	bd38      	pop	{r3, r4, r5, pc}
 8000c62:	bf00      	nop

08000c64 <__aeabi_d2ulz>:
 8000c64:	b5d0      	push	{r4, r6, r7, lr}
 8000c66:	2200      	movs	r2, #0
 8000c68:	4b0b      	ldr	r3, [pc, #44]	@ (8000c98 <__aeabi_d2ulz+0x34>)
 8000c6a:	4606      	mov	r6, r0
 8000c6c:	460f      	mov	r7, r1
 8000c6e:	f7ff fc35 	bl	80004dc <__aeabi_dmul>
 8000c72:	f7ff fee3 	bl	8000a3c <__aeabi_d2uiz>
 8000c76:	4604      	mov	r4, r0
 8000c78:	f7ff fbb6 	bl	80003e8 <__aeabi_ui2d>
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	4b07      	ldr	r3, [pc, #28]	@ (8000c9c <__aeabi_d2ulz+0x38>)
 8000c80:	f7ff fc2c 	bl	80004dc <__aeabi_dmul>
 8000c84:	4602      	mov	r2, r0
 8000c86:	460b      	mov	r3, r1
 8000c88:	4630      	mov	r0, r6
 8000c8a:	4639      	mov	r1, r7
 8000c8c:	f7ff fa6e 	bl	800016c <__aeabi_dsub>
 8000c90:	f7ff fed4 	bl	8000a3c <__aeabi_d2uiz>
 8000c94:	4621      	mov	r1, r4
 8000c96:	bdd0      	pop	{r4, r6, r7, pc}
 8000c98:	3df00000 	.word	0x3df00000
 8000c9c:	41f00000 	.word	0x41f00000

08000ca0 <cliInit>:
void cliShowList(cli_args_t *args);
void cliMemoryDump(cli_args_t *args);


bool cliInit(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  cli_node.is_open = false;
 8000ca4:	4b1b      	ldr	r3, [pc, #108]	@ (8000d14 <cliInit+0x74>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	721a      	strb	r2, [r3, #8]
  cli_node.is_log  = false;
 8000caa:	4b1a      	ldr	r3, [pc, #104]	@ (8000d14 <cliInit+0x74>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	725a      	strb	r2, [r3, #9]
  cli_node.state   = CLI_RX_IDLE;
 8000cb0:	4b18      	ldr	r3, [pc, #96]	@ (8000d14 <cliInit+0x74>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	741a      	strb	r2, [r3, #16]

  cli_node.hist_line_i     = 0;
 8000cb6:	4b17      	ldr	r3, [pc, #92]	@ (8000d14 <cliInit+0x74>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
  cli_node.hist_line_last  = 0;
 8000cbe:	4b15      	ldr	r3, [pc, #84]	@ (8000d14 <cliInit+0x74>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
  cli_node.hist_line_count = 0;
 8000cc6:	4b13      	ldr	r3, [pc, #76]	@ (8000d14 <cliInit+0x74>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f883 2197 	strb.w	r2, [r3, #407]	@ 0x197
  cli_node.hist_line_new   = false;
 8000cce:	4b11      	ldr	r3, [pc, #68]	@ (8000d14 <cliInit+0x74>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	f883 2194 	strb.w	r2, [r3, #404]	@ 0x194

  cli_node.cmd_args.getData  = cliArgsGetData;
 8000cd6:	4b0f      	ldr	r3, [pc, #60]	@ (8000d14 <cliInit+0x74>)
 8000cd8:	4a0f      	ldr	r2, [pc, #60]	@ (8000d18 <cliInit+0x78>)
 8000cda:	f8c3 2434 	str.w	r2, [r3, #1076]	@ 0x434
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 8000cde:	4b0d      	ldr	r3, [pc, #52]	@ (8000d14 <cliInit+0x74>)
 8000ce0:	4a0e      	ldr	r2, [pc, #56]	@ (8000d1c <cliInit+0x7c>)
 8000ce2:	f8c3 2438 	str.w	r2, [r3, #1080]	@ 0x438
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 8000ce6:	4b0b      	ldr	r3, [pc, #44]	@ (8000d14 <cliInit+0x74>)
 8000ce8:	4a0d      	ldr	r2, [pc, #52]	@ (8000d20 <cliInit+0x80>)
 8000cea:	f8c3 243c 	str.w	r2, [r3, #1084]	@ 0x43c
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 8000cee:	4b09      	ldr	r3, [pc, #36]	@ (8000d14 <cliInit+0x74>)
 8000cf0:	4a0c      	ldr	r2, [pc, #48]	@ (8000d24 <cliInit+0x84>)
 8000cf2:	f8c3 2440 	str.w	r2, [r3, #1088]	@ 0x440

  cliLineClean(&cli_node);
 8000cf6:	4807      	ldr	r0, [pc, #28]	@ (8000d14 <cliInit+0x74>)
 8000cf8:	f000 fb86 	bl	8001408 <cliLineClean>

  cliAdd("help", cliShowList);
 8000cfc:	490a      	ldr	r1, [pc, #40]	@ (8000d28 <cliInit+0x88>)
 8000cfe:	480b      	ldr	r0, [pc, #44]	@ (8000d2c <cliInit+0x8c>)
 8000d00:	f000 fe00 	bl	8001904 <cliAdd>
  cliAdd("md"  , cliMemoryDump);
 8000d04:	490a      	ldr	r1, [pc, #40]	@ (8000d30 <cliInit+0x90>)
 8000d06:	480b      	ldr	r0, [pc, #44]	@ (8000d34 <cliInit+0x94>)
 8000d08:	f000 fdfc 	bl	8001904 <cliAdd>

  return true;
 8000d0c:	2301      	movs	r3, #1
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	2000034c 	.word	0x2000034c
 8000d18:	080017cd 	.word	0x080017cd
 8000d1c:	0800181d 	.word	0x0800181d
 8000d20:	0800186d 	.word	0x0800186d
 8000d24:	080018b1 	.word	0x080018b1
 8000d28:	08001999 	.word	0x08001999
 8000d2c:	0800d7b8 	.word	0x0800d7b8
 8000d30:	08001a09 	.word	0x08001a09
 8000d34:	0800d7c0 	.word	0x0800d7c0

08000d38 <cliOpen>:

bool cliOpen(uint8_t ch, uint32_t baud)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	6039      	str	r1, [r7, #0]
 8000d42:	71fb      	strb	r3, [r7, #7]
  cli_node.ch = ch;
 8000d44:	4a1c      	ldr	r2, [pc, #112]	@ (8000db8 <cliOpen+0x80>)
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	7013      	strb	r3, [r2, #0]
  cli_node.baud = baud;
 8000d4a:	4a1b      	ldr	r2, [pc, #108]	@ (8000db8 <cliOpen+0x80>)
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	6053      	str	r3, [r2, #4]

  qbuffer.in = 0;
 8000d50:	4b1a      	ldr	r3, [pc, #104]	@ (8000dbc <cliOpen+0x84>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
  qbuffer.out = 0;
 8000d56:	4b19      	ldr	r3, [pc, #100]	@ (8000dbc <cliOpen+0x84>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	605a      	str	r2, [r3, #4]
  qbuffer.len = 256;
 8000d5c:	4b17      	ldr	r3, [pc, #92]	@ (8000dbc <cliOpen+0x84>)
 8000d5e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d62:	609a      	str	r2, [r3, #8]
  qbuffer.p_buf = &uart_buf[0];
 8000d64:	4b15      	ldr	r3, [pc, #84]	@ (8000dbc <cliOpen+0x84>)
 8000d66:	4a16      	ldr	r2, [pc, #88]	@ (8000dc0 <cliOpen+0x88>)
 8000d68:	60da      	str	r2, [r3, #12]

  cli_node.is_open = true;
 8000d6a:	4b13      	ldr	r3, [pc, #76]	@ (8000db8 <cliOpen+0x80>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	721a      	strb	r2, [r3, #8]

  if(ch == CH_CDC)
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d01a      	beq.n	8000dac <cliOpen+0x74>
  {
  }
  else if(ch == CH_USART1)
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d117      	bne.n	8000dac <cliOpen+0x74>
  {
    if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&uart_buf, 256) != HAL_OK)
 8000d7c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d80:	490f      	ldr	r1, [pc, #60]	@ (8000dc0 <cliOpen+0x88>)
 8000d82:	4810      	ldr	r0, [pc, #64]	@ (8000dc4 <cliOpen+0x8c>)
 8000d84:	f004 fbc1 	bl	800550a <HAL_UART_Receive_DMA>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d002      	beq.n	8000d94 <cliOpen+0x5c>
    {
      cli_node.is_open = false;
 8000d8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000db8 <cliOpen+0x80>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	721a      	strb	r2, [r3, #8]
    }

    qbuffer.in = qbuffer.len - hdma_usart1_rx.Instance->CNDTR;
 8000d94:	4b09      	ldr	r3, [pc, #36]	@ (8000dbc <cliOpen+0x84>)
 8000d96:	689a      	ldr	r2, [r3, #8]
 8000d98:	4b0b      	ldr	r3, [pc, #44]	@ (8000dc8 <cliOpen+0x90>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	1ad3      	subs	r3, r2, r3
 8000da0:	4a06      	ldr	r2, [pc, #24]	@ (8000dbc <cliOpen+0x84>)
 8000da2:	6013      	str	r3, [r2, #0]
    qbuffer.out = qbuffer.in;
 8000da4:	4b05      	ldr	r3, [pc, #20]	@ (8000dbc <cliOpen+0x84>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a04      	ldr	r2, [pc, #16]	@ (8000dbc <cliOpen+0x84>)
 8000daa:	6053      	str	r3, [r2, #4]
  }

  return cli_node.is_open;
 8000dac:	4b02      	ldr	r3, [pc, #8]	@ (8000db8 <cliOpen+0x80>)
 8000dae:	7a1b      	ldrb	r3, [r3, #8]
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	2000034c 	.word	0x2000034c
 8000dbc:	20000790 	.word	0x20000790
 8000dc0:	200007a0 	.word	0x200007a0
 8000dc4:	200008a4 	.word	0x200008a4
 8000dc8:	20000934 	.word	0x20000934

08000dcc <cliShowLog>:
  cli_node.is_log = false;
  return true;
}

void cliShowLog(cli_t *p_cli)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  if (cli_node.is_log == true)
 8000dd4:	4b34      	ldr	r3, [pc, #208]	@ (8000ea8 <cliShowLog+0xdc>)
 8000dd6:	7a5b      	ldrb	r3, [r3, #9]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d061      	beq.n	8000ea0 <cliShowLog+0xd4>
  {
    uartPrintf(p_cli->log_ch, "Cursor  : %d\n", p_cli->line.cursor);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	7a98      	ldrb	r0, [r3, #10]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
 8000de6:	461a      	mov	r2, r3
 8000de8:	4930      	ldr	r1, [pc, #192]	@ (8000eac <cliShowLog+0xe0>)
 8000dea:	f000 fedd 	bl	8001ba8 <uartPrintf>
    uartPrintf(p_cli->log_ch, "Count   : %d\n", p_cli->line.count);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	7a98      	ldrb	r0, [r3, #10]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
 8000df8:	461a      	mov	r2, r3
 8000dfa:	492d      	ldr	r1, [pc, #180]	@ (8000eb0 <cliShowLog+0xe4>)
 8000dfc:	f000 fed4 	bl	8001ba8 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf_len : %d\n", p_cli->line.buf_len);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	7a98      	ldrb	r0, [r3, #10]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f893 32e4 	ldrb.w	r3, [r3, #740]	@ 0x2e4
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	4929      	ldr	r1, [pc, #164]	@ (8000eb4 <cliShowLog+0xe8>)
 8000e0e:	f000 fecb 	bl	8001ba8 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf     : %s\n", p_cli->line.buf);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	7a98      	ldrb	r0, [r3, #10]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	4926      	ldr	r1, [pc, #152]	@ (8000eb8 <cliShowLog+0xec>)
 8000e20:	f000 fec2 	bl	8001ba8 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_i  : %d\n", p_cli->hist_line_i);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	7a98      	ldrb	r0, [r3, #10]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	f993 3195 	ldrsb.w	r3, [r3, #405]	@ 0x195
 8000e2e:	461a      	mov	r2, r3
 8000e30:	4922      	ldr	r1, [pc, #136]	@ (8000ebc <cliShowLog+0xf0>)
 8000e32:	f000 feb9 	bl	8001ba8 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_lt : %d\n", p_cli->hist_line_last);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	7a98      	ldrb	r0, [r3, #10]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8000e40:	461a      	mov	r2, r3
 8000e42:	491f      	ldr	r1, [pc, #124]	@ (8000ec0 <cliShowLog+0xf4>)
 8000e44:	f000 feb0 	bl	8001ba8 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_c  : %d\n", p_cli->hist_line_count);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	7a98      	ldrb	r0, [r3, #10]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 8000e52:	461a      	mov	r2, r3
 8000e54:	491b      	ldr	r1, [pc, #108]	@ (8000ec4 <cliShowLog+0xf8>)
 8000e56:	f000 fea7 	bl	8001ba8 <uartPrintf>

    for (int i=0; i<p_cli->hist_line_count; i++)
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60fb      	str	r3, [r7, #12]
 8000e5e:	e012      	b.n	8000e86 <cliShowLog+0xba>
    {
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	7a98      	ldrb	r0, [r3, #10]
 8000e64:	68fa      	ldr	r2, [r7, #12]
 8000e66:	4613      	mov	r3, r2
 8000e68:	015b      	lsls	r3, r3, #5
 8000e6a:	4413      	add	r3, r2
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	4413      	add	r3, r2
 8000e70:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	4413      	add	r3, r2
 8000e78:	68fa      	ldr	r2, [r7, #12]
 8000e7a:	4913      	ldr	r1, [pc, #76]	@ (8000ec8 <cliShowLog+0xfc>)
 8000e7c:	f000 fe94 	bl	8001ba8 <uartPrintf>
    for (int i=0; i<p_cli->hist_line_count; i++)
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	3301      	adds	r3, #1
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	4293      	cmp	r3, r2
 8000e92:	dbe5      	blt.n	8000e60 <cliShowLog+0x94>
    }
    uartPrintf(p_cli->log_ch, "\n");
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	7a9b      	ldrb	r3, [r3, #10]
 8000e98:	490c      	ldr	r1, [pc, #48]	@ (8000ecc <cliShowLog+0x100>)
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f000 fe84 	bl	8001ba8 <uartPrintf>
  }
}
 8000ea0:	bf00      	nop
 8000ea2:	3710      	adds	r7, #16
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	2000034c 	.word	0x2000034c
 8000eac:	0800d7c4 	.word	0x0800d7c4
 8000eb0:	0800d7d4 	.word	0x0800d7d4
 8000eb4:	0800d7e4 	.word	0x0800d7e4
 8000eb8:	0800d7f4 	.word	0x0800d7f4
 8000ebc:	0800d804 	.word	0x0800d804
 8000ec0:	0800d814 	.word	0x0800d814
 8000ec4:	0800d824 	.word	0x0800d824
 8000ec8:	0800d834 	.word	0x0800d834
 8000ecc:	0800d844 	.word	0x0800d844

08000ed0 <cliShowPrompt>:

void cliShowPrompt(cli_t *p_cli)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  uartPrintf(p_cli->ch, "\n\r");
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	4906      	ldr	r1, [pc, #24]	@ (8000ef8 <cliShowPrompt+0x28>)
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f000 fe62 	bl	8001ba8 <uartPrintf>
  uartPrintf(p_cli->ch, CLI_PROMPT_STR);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	4904      	ldr	r1, [pc, #16]	@ (8000efc <cliShowPrompt+0x2c>)
 8000eea:	4618      	mov	r0, r3
 8000eec:	f000 fe5c 	bl	8001ba8 <uartPrintf>
}
 8000ef0:	bf00      	nop
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	0800d848 	.word	0x0800d848
 8000efc:	0800d84c 	.word	0x0800d84c

08000f00 <cliMain>:

bool cliMain(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  if (cli_node.is_open != true)
 8000f04:	4b0e      	ldr	r3, [pc, #56]	@ (8000f40 <cliMain+0x40>)
 8000f06:	7a1b      	ldrb	r3, [r3, #8]
 8000f08:	f083 0301 	eor.w	r3, r3, #1
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <cliMain+0x16>
  {
    return false;
 8000f12:	2300      	movs	r3, #0
 8000f14:	e012      	b.n	8000f3c <cliMain+0x3c>
  }

  if(uartAvailable(cli_node.ch) > 0)
 8000f16:	4b0a      	ldr	r3, [pc, #40]	@ (8000f40 <cliMain+0x40>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f000 fe16 	bl	8001b4c <uartAvailable>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d009      	beq.n	8000f3a <cliMain+0x3a>
  {
    cliUpdate(&cli_node, uartRead(cli_node.ch));
 8000f26:	4b06      	ldr	r3, [pc, #24]	@ (8000f40 <cliMain+0x40>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f000 fe98 	bl	8001c60 <uartRead>
 8000f30:	4603      	mov	r3, r0
 8000f32:	4619      	mov	r1, r3
 8000f34:	4802      	ldr	r0, [pc, #8]	@ (8000f40 <cliMain+0x40>)
 8000f36:	f000 f805 	bl	8000f44 <cliUpdate>
  }

  return true;
 8000f3a:	2301      	movs	r3, #1
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	2000034c 	.word	0x2000034c

08000f44 <cliUpdate>:
{
  return uartWrite(cli_node.ch, p_data, length);
}

bool cliUpdate(cli_t *p_cli, uint8_t rx_data)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08c      	sub	sp, #48	@ 0x30
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	70fb      	strb	r3, [r7, #3]
  bool ret = false;
 8000f50:	2300      	movs	r3, #0
 8000f52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t tx_buf[8];
  cli_line_t *line;

  line = &p_cli->line;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 8000f5c:	61fb      	str	r3, [r7, #28]


  if (p_cli->state == CLI_RX_IDLE)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	7c1b      	ldrb	r3, [r3, #16]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	f040 816d 	bne.w	8001242 <cliUpdate+0x2fe>
  {
    switch(rx_data)
 8000f68:	78fb      	ldrb	r3, [r7, #3]
 8000f6a:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f6c:	d02a      	beq.n	8000fc4 <cliUpdate+0x80>
 8000f6e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f70:	f300 80da 	bgt.w	8001128 <cliUpdate+0x1e4>
 8000f74:	2b1b      	cmp	r3, #27
 8000f76:	d021      	beq.n	8000fbc <cliUpdate+0x78>
 8000f78:	2b1b      	cmp	r3, #27
 8000f7a:	f300 80d5 	bgt.w	8001128 <cliUpdate+0x1e4>
 8000f7e:	2b08      	cmp	r3, #8
 8000f80:	d062      	beq.n	8001048 <cliUpdate+0x104>
 8000f82:	2b0d      	cmp	r3, #13
 8000f84:	f040 80d0 	bne.w	8001128 <cliUpdate+0x1e4>
    {
      // 엔터
      //
      case CLI_KEY_ENTER:
        if (line->count > 0)
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d005      	beq.n	8000f9e <cliUpdate+0x5a>
        {
          cliLineAdd(p_cli);
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f000 fa51 	bl	800143a <cliLineAdd>
          cliRunCmd(p_cli);
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f000 fb1d 	bl	80015d8 <cliRunCmd>
        }

        line->count = 0;
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        line->cursor = 0;
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        line->buf[0] = 0;
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	701a      	strb	r2, [r3, #0]
        cliShowPrompt(p_cli);
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f7ff ff8b 	bl	8000ed0 <cliShowPrompt>
        break;
 8000fba:	e142      	b.n	8001242 <cliUpdate+0x2fe>


      case CLI_KEY_ESC:
        p_cli->state = CLI_RX_SP1;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	741a      	strb	r2, [r3, #16]
        break;
 8000fc2:	e13e      	b.n	8001242 <cliUpdate+0x2fe>


      // DEL
      //
      case CLI_KEY_DEL:
        if (line->cursor < line->count)
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	f080 8131 	bcs.w	8001238 <cliUpdate+0x2f4>
        {
          uint8_t mov_len;

          mov_len = line->count - line->cursor;
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000fe2:	1ad3      	subs	r3, r2, r3
 8000fe4:	76fb      	strb	r3, [r7, #27]
          for (int i=1; i<mov_len; i++)
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000fea:	e013      	b.n	8001014 <cliUpdate+0xd0>
          {
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ff6:	441a      	add	r2, r3
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000ffe:	4619      	mov	r1, r3
 8001000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001002:	440b      	add	r3, r1
 8001004:	3b01      	subs	r3, #1
 8001006:	69f9      	ldr	r1, [r7, #28]
 8001008:	5c89      	ldrb	r1, [r1, r2]
 800100a:	69fa      	ldr	r2, [r7, #28]
 800100c:	54d1      	strb	r1, [r2, r3]
          for (int i=1; i<mov_len; i++)
 800100e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001010:	3301      	adds	r3, #1
 8001012:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001014:	7efb      	ldrb	r3, [r7, #27]
 8001016:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001018:	429a      	cmp	r2, r3
 800101a:	dbe7      	blt.n	8000fec <cliUpdate+0xa8>
          }

          line->count--;
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001022:	3b01      	subs	r3, #1
 8001024:	b2da      	uxtb	r2, r3
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          line->buf[line->count] = 0;
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001032:	461a      	mov	r2, r3
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	2100      	movs	r1, #0
 8001038:	5499      	strb	r1, [r3, r2]

          uartPrintf(p_cli->ch, "\x1B[1P");
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	498d      	ldr	r1, [pc, #564]	@ (8001274 <cliUpdate+0x330>)
 8001040:	4618      	mov	r0, r3
 8001042:	f000 fdb1 	bl	8001ba8 <uartPrintf>
        }
        break;
 8001046:	e0f7      	b.n	8001238 <cliUpdate+0x2f4>


      // 백스페이스
      //
      case CLI_KEY_BACK:
        if (line->count > 0 && line->cursor > 0)
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800104e:	2b00      	cmp	r3, #0
 8001050:	d055      	beq.n	80010fe <cliUpdate+0x1ba>
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001058:	2b00      	cmp	r3, #0
 800105a:	d050      	beq.n	80010fe <cliUpdate+0x1ba>
        {
          if (line->cursor == line->count)
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001068:	429a      	cmp	r2, r3
 800106a:	d10e      	bne.n	800108a <cliUpdate+0x146>
          {
            line->count--;
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001072:	3b01      	subs	r3, #1
 8001074:	b2da      	uxtb	r2, r3
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
            line->buf[line->count] = 0;
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001082:	461a      	mov	r2, r3
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	2100      	movs	r1, #0
 8001088:	5499      	strb	r1, [r3, r2]
          }

          if (line->cursor < line->count)
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001096:	429a      	cmp	r2, r3
 8001098:	d231      	bcs.n	80010fe <cliUpdate+0x1ba>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	76bb      	strb	r3, [r7, #26]

            for (int i=0; i<mov_len; i++)
 80010aa:	2300      	movs	r3, #0
 80010ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80010ae:	e013      	b.n	80010d8 <cliUpdate+0x194>
            {
              line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80010b6:	461a      	mov	r2, r3
 80010b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010ba:	441a      	add	r2, r3
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80010c2:	4619      	mov	r1, r3
 80010c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010c6:	440b      	add	r3, r1
 80010c8:	3b01      	subs	r3, #1
 80010ca:	69f9      	ldr	r1, [r7, #28]
 80010cc:	5c89      	ldrb	r1, [r1, r2]
 80010ce:	69fa      	ldr	r2, [r7, #28]
 80010d0:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 80010d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010d4:	3301      	adds	r3, #1
 80010d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80010d8:	7ebb      	ldrb	r3, [r7, #26]
 80010da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80010dc:	429a      	cmp	r2, r3
 80010de:	dbe7      	blt.n	80010b0 <cliUpdate+0x16c>
            }

            line->count--;
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80010e6:	3b01      	subs	r3, #1
 80010e8:	b2da      	uxtb	r2, r3
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
            line->buf[line->count] = 0;
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80010f6:	461a      	mov	r2, r3
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	2100      	movs	r1, #0
 80010fc:	5499      	strb	r1, [r3, r2]
          }
        }

        if (line->cursor > 0)
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001104:	2b00      	cmp	r3, #0
 8001106:	f000 8099 	beq.w	800123c <cliUpdate+0x2f8>
        {
          line->cursor--;
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001110:	3b01      	subs	r3, #1
 8001112:	b2da      	uxtb	r2, r3
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	4956      	ldr	r1, [pc, #344]	@ (8001278 <cliUpdate+0x334>)
 8001120:	4618      	mov	r0, r3
 8001122:	f000 fd41 	bl	8001ba8 <uartPrintf>
        }
        break;
 8001126:	e089      	b.n	800123c <cliUpdate+0x2f8>


      default:
        if ((line->count + 1) < line->buf_len)
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800112e:	3301      	adds	r3, #1
 8001130:	69fa      	ldr	r2, [r7, #28]
 8001132:	f892 2040 	ldrb.w	r2, [r2, #64]	@ 0x40
 8001136:	4293      	cmp	r3, r2
 8001138:	f280 8082 	bge.w	8001240 <cliUpdate+0x2fc>
        {
          if (line->cursor == line->count)
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001148:	429a      	cmp	r2, r3
 800114a:	d124      	bne.n	8001196 <cliUpdate+0x252>
          {
            uartWrite(p_cli->ch, &rx_data, 1);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	1cf9      	adds	r1, r7, #3
 8001152:	2201      	movs	r2, #1
 8001154:	4618      	mov	r0, r3
 8001156:	f000 fd5f 	bl	8001c18 <uartWrite>

            line->buf[line->cursor] = rx_data;
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001160:	461a      	mov	r2, r3
 8001162:	78f9      	ldrb	r1, [r7, #3]
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	5499      	strb	r1, [r3, r2]
            line->count++;
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800116e:	3301      	adds	r3, #1
 8001170:	b2da      	uxtb	r2, r3
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
            line->cursor++;
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800117e:	3301      	adds	r3, #1
 8001180:	b2da      	uxtb	r2, r3
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
            line->buf[line->count] = 0;
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800118e:	461a      	mov	r2, r3
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	2100      	movs	r1, #0
 8001194:	5499      	strb	r1, [r3, r2]
          }
          if (line->cursor < line->count)
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d24c      	bcs.n	8001240 <cliUpdate+0x2fc>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	767b      	strb	r3, [r7, #25]
            for (int i=0; i<mov_len; i++)
 80011b6:	2300      	movs	r3, #0
 80011b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80011ba:	e013      	b.n	80011e4 <cliUpdate+0x2a0>
            {
              line->buf[line->count - i] = line->buf[line->count - i - 1];
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80011c2:	461a      	mov	r2, r3
 80011c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	1e5a      	subs	r2, r3, #1
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80011d0:	4619      	mov	r1, r3
 80011d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011d4:	1acb      	subs	r3, r1, r3
 80011d6:	69f9      	ldr	r1, [r7, #28]
 80011d8:	5c89      	ldrb	r1, [r1, r2]
 80011da:	69fa      	ldr	r2, [r7, #28]
 80011dc:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 80011de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011e0:	3301      	adds	r3, #1
 80011e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80011e4:	7e7b      	ldrb	r3, [r7, #25]
 80011e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011e8:	429a      	cmp	r2, r3
 80011ea:	dbe7      	blt.n	80011bc <cliUpdate+0x278>
            }
            line->buf[line->cursor] = rx_data;
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80011f2:	461a      	mov	r2, r3
 80011f4:	78f9      	ldrb	r1, [r7, #3]
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	5499      	strb	r1, [r3, r2]
            line->count++;
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001200:	3301      	adds	r3, #1
 8001202:	b2da      	uxtb	r2, r3
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
            line->cursor++;
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001210:	3301      	adds	r3, #1
 8001212:	b2da      	uxtb	r2, r3
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
            line->buf[line->count] = 0;
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001220:	461a      	mov	r2, r3
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	2100      	movs	r1, #0
 8001226:	5499      	strb	r1, [r3, r2]

            uartPrintf(p_cli->ch, "\x1B[4h%c\x1B[4l", rx_data);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	78fa      	ldrb	r2, [r7, #3]
 800122e:	4913      	ldr	r1, [pc, #76]	@ (800127c <cliUpdate+0x338>)
 8001230:	4618      	mov	r0, r3
 8001232:	f000 fcb9 	bl	8001ba8 <uartPrintf>
          }
        }
        break;
 8001236:	e003      	b.n	8001240 <cliUpdate+0x2fc>
        break;
 8001238:	bf00      	nop
 800123a:	e002      	b.n	8001242 <cliUpdate+0x2fe>
        break;
 800123c:	bf00      	nop
 800123e:	e000      	b.n	8001242 <cliUpdate+0x2fe>
        break;
 8001240:	bf00      	nop
    }
  }

  switch(p_cli->state)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	7c1b      	ldrb	r3, [r3, #16]
 8001246:	3b01      	subs	r3, #1
 8001248:	2b03      	cmp	r3, #3
 800124a:	f200 80d0 	bhi.w	80013ee <cliUpdate+0x4aa>
 800124e:	a201      	add	r2, pc, #4	@ (adr r2, 8001254 <cliUpdate+0x310>)
 8001250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001254:	08001265 	.word	0x08001265
 8001258:	0800126d 	.word	0x0800126d
 800125c:	08001281 	.word	0x08001281
 8001260:	080013e5 	.word	0x080013e5
  {
    case CLI_RX_SP1:
      p_cli->state = CLI_RX_SP2;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2202      	movs	r2, #2
 8001268:	741a      	strb	r2, [r3, #16]
      break;
 800126a:	e0c0      	b.n	80013ee <cliUpdate+0x4aa>

    case CLI_RX_SP2:
      p_cli->state = CLI_RX_SP3;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2203      	movs	r2, #3
 8001270:	741a      	strb	r2, [r3, #16]
      break;
 8001272:	e0bc      	b.n	80013ee <cliUpdate+0x4aa>
 8001274:	0800d854 	.word	0x0800d854
 8001278:	0800d85c 	.word	0x0800d85c
 800127c:	0800d864 	.word	0x0800d864

    case CLI_RX_SP3:
      p_cli->state = CLI_RX_IDLE;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2200      	movs	r2, #0
 8001284:	741a      	strb	r2, [r3, #16]

      if (rx_data == CLI_KEY_LEFT)
 8001286:	78fb      	ldrb	r3, [r7, #3]
 8001288:	2b44      	cmp	r3, #68	@ 0x44
 800128a:	d11a      	bne.n	80012c2 <cliUpdate+0x37e>
      {
        if (line->cursor > 0)
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001292:	2b00      	cmp	r3, #0
 8001294:	d015      	beq.n	80012c2 <cliUpdate+0x37e>
        {
          line->cursor--;
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800129c:	3b01      	subs	r3, #1
 800129e:	b2da      	uxtb	r2, r3
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          tx_buf[0] = 0x1B;
 80012a6:	231b      	movs	r3, #27
 80012a8:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 80012aa:	235b      	movs	r3, #91	@ 0x5b
 80012ac:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 80012ae:	78fb      	ldrb	r3, [r7, #3]
 80012b0:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	f107 010c 	add.w	r1, r7, #12
 80012ba:	2203      	movs	r2, #3
 80012bc:	4618      	mov	r0, r3
 80012be:	f000 fcab 	bl	8001c18 <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_RIGHT)
 80012c2:	78fb      	ldrb	r3, [r7, #3]
 80012c4:	2b43      	cmp	r3, #67	@ 0x43
 80012c6:	d11d      	bne.n	8001304 <cliUpdate+0x3c0>
      {
        if (line->cursor < line->count)
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d215      	bcs.n	8001304 <cliUpdate+0x3c0>
        {
          line->cursor++;
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80012de:	3301      	adds	r3, #1
 80012e0:	b2da      	uxtb	r2, r3
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

          tx_buf[0] = 0x1B;
 80012e8:	231b      	movs	r3, #27
 80012ea:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 80012ec:	235b      	movs	r3, #91	@ 0x5b
 80012ee:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 80012f0:	78fb      	ldrb	r3, [r7, #3]
 80012f2:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	f107 010c 	add.w	r1, r7, #12
 80012fc:	2203      	movs	r2, #3
 80012fe:	4618      	mov	r0, r3
 8001300:	f000 fc8a 	bl	8001c18 <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_UP)
 8001304:	78fb      	ldrb	r3, [r7, #3]
 8001306:	2b41      	cmp	r3, #65	@ 0x41
 8001308:	d10c      	bne.n	8001324 <cliUpdate+0x3e0>
      {
        cliLineChange(p_cli, true);
 800130a:	2101      	movs	r1, #1
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f000 f8d9 	bl	80014c4 <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	781a      	ldrb	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 800131c:	4619      	mov	r1, r3
 800131e:	4610      	mov	r0, r2
 8001320:	f000 fc42 	bl	8001ba8 <uartPrintf>
      }

      if (rx_data == CLI_KEY_DOWN)
 8001324:	78fb      	ldrb	r3, [r7, #3]
 8001326:	2b42      	cmp	r3, #66	@ 0x42
 8001328:	d10c      	bne.n	8001344 <cliUpdate+0x400>
      {
        cliLineChange(p_cli, false);
 800132a:	2100      	movs	r1, #0
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f000 f8c9 	bl	80014c4 <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	781a      	ldrb	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 800133c:	4619      	mov	r1, r3
 800133e:	4610      	mov	r0, r2
 8001340:	f000 fc32 	bl	8001ba8 <uartPrintf>
      }

      if (rx_data == CLI_KEY_HOME)
 8001344:	78fb      	ldrb	r3, [r7, #3]
 8001346:	2b31      	cmp	r3, #49	@ 0x31
 8001348:	d10f      	bne.n	800136a <cliUpdate+0x426>
      {
        uartPrintf(p_cli->ch, "\x1B[%dD", line->cursor);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	7818      	ldrb	r0, [r3, #0]
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001354:	461a      	mov	r2, r3
 8001356:	492a      	ldr	r1, [pc, #168]	@ (8001400 <cliUpdate+0x4bc>)
 8001358:	f000 fc26 	bl	8001ba8 <uartPrintf>
        line->cursor = 0;
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	2200      	movs	r2, #0
 8001360:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        p_cli->state = CLI_RX_SP4;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2204      	movs	r2, #4
 8001368:	741a      	strb	r2, [r3, #16]
      }

      if (rx_data == CLI_KEY_END)
 800136a:	78fb      	ldrb	r3, [r7, #3]
 800136c:	2b34      	cmp	r3, #52	@ 0x34
 800136e:	d13d      	bne.n	80013ec <cliUpdate+0x4a8>
      {
        uint16_t mov_len;

        if (line->cursor < line->count)
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800137c:	429a      	cmp	r2, r3
 800137e:	d20f      	bcs.n	80013a0 <cliUpdate+0x45c>
        {
          mov_len = line->count - line->cursor;
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001386:	461a      	mov	r2, r3
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dC", mov_len);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	8afa      	ldrh	r2, [r7, #22]
 8001398:	491a      	ldr	r1, [pc, #104]	@ (8001404 <cliUpdate+0x4c0>)
 800139a:	4618      	mov	r0, r3
 800139c:	f000 fc04 	bl	8001ba8 <uartPrintf>
        }
        if (line->cursor > line->count)
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d90f      	bls.n	80013d0 <cliUpdate+0x48c>
        {
          mov_len = line->cursor - line->count;
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80013b6:	461a      	mov	r2, r3
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dD", mov_len);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	8afa      	ldrh	r2, [r7, #22]
 80013c8:	490d      	ldr	r1, [pc, #52]	@ (8001400 <cliUpdate+0x4bc>)
 80013ca:	4618      	mov	r0, r3
 80013cc:	f000 fbec 	bl	8001ba8 <uartPrintf>
        }
        line->cursor = line->count;
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        p_cli->state = CLI_RX_SP4;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2204      	movs	r2, #4
 80013e0:	741a      	strb	r2, [r3, #16]
      }
      break;
 80013e2:	e003      	b.n	80013ec <cliUpdate+0x4a8>

    case CLI_RX_SP4:
      p_cli->state = CLI_RX_IDLE;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2200      	movs	r2, #0
 80013e8:	741a      	strb	r2, [r3, #16]
      break;
 80013ea:	e000      	b.n	80013ee <cliUpdate+0x4aa>
      break;
 80013ec:	bf00      	nop
  }



  cliShowLog(p_cli);
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f7ff fcec 	bl	8000dcc <cliShowLog>

  return ret;
 80013f4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3730      	adds	r7, #48	@ 0x30
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	0800d870 	.word	0x0800d870
 8001404:	0800d878 	.word	0x0800d878

08001408 <cliLineClean>:

void cliLineClean(cli_t *p_cli)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  p_cli->line.count   = 0;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	f883 22e6 	strb.w	r2, [r3, #742]	@ 0x2e6
  p_cli->line.cursor  = 0;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2200      	movs	r2, #0
 800141c:	f883 22e5 	strb.w	r2, [r3, #741]	@ 0x2e5
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	223f      	movs	r2, #63	@ 0x3f
 8001424:	f883 22e4 	strb.w	r2, [r3, #740]	@ 0x2e4
  p_cli->line.buf[0]  = 0;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2200      	movs	r2, #0
 800142c:	f883 22a4 	strb.w	r2, [r3, #676]	@ 0x2a4
}
 8001430:	bf00      	nop
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	bc80      	pop	{r7}
 8001438:	4770      	bx	lr

0800143a <cliLineAdd>:

void cliLineAdd(cli_t *p_cli)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	b082      	sub	sp, #8
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]

  p_cli->line_buf[p_cli->hist_line_last] = p_cli->line;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8001448:	461a      	mov	r2, r3
 800144a:	6879      	ldr	r1, [r7, #4]
 800144c:	4613      	mov	r3, r2
 800144e:	015b      	lsls	r3, r3, #5
 8001450:	4413      	add	r3, r2
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	4413      	add	r3, r2
 8001456:	440b      	add	r3, r1
 8001458:	f503 72cc 	add.w	r2, r3, #408	@ 0x198
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4610      	mov	r0, r2
 8001460:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 8001464:	2243      	movs	r2, #67	@ 0x43
 8001466:	4619      	mov	r1, r3
 8001468:	f00a f99d 	bl	800b7a6 <memcpy>

  if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 8001472:	2b03      	cmp	r3, #3
 8001474:	d807      	bhi.n	8001486 <cliLineAdd+0x4c>
  {
    p_cli->hist_line_count++;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 800147c:	3301      	adds	r3, #1
 800147e:	b2da      	uxtb	r2, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f883 2197 	strb.w	r2, [r3, #407]	@ 0x197
  }

  p_cli->hist_line_i    = p_cli->hist_line_last;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 800148c:	b25a      	sxtb	r2, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
  p_cli->hist_line_last = (p_cli->hist_line_last + 1) % CLI_LINE_HIS_MAX;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 800149a:	3301      	adds	r3, #1
 800149c:	425a      	negs	r2, r3
 800149e:	f003 0303 	and.w	r3, r3, #3
 80014a2:	f002 0203 	and.w	r2, r2, #3
 80014a6:	bf58      	it	pl
 80014a8:	4253      	negpl	r3, r2
 80014aa:	b2da      	uxtb	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
  p_cli->hist_line_new  = true;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2201      	movs	r2, #1
 80014b6:	f883 2194 	strb.w	r2, [r3, #404]	@ 0x194
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
	...

080014c4 <cliLineChange>:

void cliLineChange(cli_t *p_cli, int8_t key_up)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	460b      	mov	r3, r1
 80014ce:	70fb      	strb	r3, [r7, #3]
  uint8_t change_i;


  if (p_cli->hist_line_count == 0)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d076      	beq.n	80015c8 <cliLineChange+0x104>
  {
    return;
  }


  if (p_cli->line.cursor > 0)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d008      	beq.n	80014f6 <cliLineChange+0x32>
  {
    uartPrintf(p_cli->ch, "\x1B[%dD", p_cli->line.cursor);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	7818      	ldrb	r0, [r3, #0]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
 80014ee:	461a      	mov	r2, r3
 80014f0:	4937      	ldr	r1, [pc, #220]	@ (80015d0 <cliLineChange+0x10c>)
 80014f2:	f000 fb59 	bl	8001ba8 <uartPrintf>
  }
  if (p_cli->line.count > 0)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d008      	beq.n	8001512 <cliLineChange+0x4e>
  {
    uartPrintf(p_cli->ch, "\x1B[%dP", p_cli->line.count);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	7818      	ldrb	r0, [r3, #0]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
 800150a:	461a      	mov	r2, r3
 800150c:	4931      	ldr	r1, [pc, #196]	@ (80015d4 <cliLineChange+0x110>)
 800150e:	f000 fb4b 	bl	8001ba8 <uartPrintf>
  }


  if (key_up == true)
 8001512:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d125      	bne.n	8001566 <cliLineChange+0xa2>
  {
    if (p_cli->hist_line_new == true)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f893 3194 	ldrb.w	r3, [r3, #404]	@ 0x194
 8001520:	2b00      	cmp	r3, #0
 8001522:	d006      	beq.n	8001532 <cliLineChange+0x6e>
    {
      p_cli->hist_line_i = p_cli->hist_line_last;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 800152a:	b25a      	sxtb	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
    }
    p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) % p_cli->hist_line_count;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f993 3195 	ldrsb.w	r3, [r3, #405]	@ 0x195
 8001538:	461a      	mov	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 8001540:	4413      	add	r3, r2
 8001542:	3b01      	subs	r3, #1
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	f892 2197 	ldrb.w	r2, [r2, #407]	@ 0x197
 800154a:	fb93 f1f2 	sdiv	r1, r3, r2
 800154e:	fb01 f202 	mul.w	r2, r1, r2
 8001552:	1a9b      	subs	r3, r3, r2
 8001554:	b25a      	sxtb	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
    change_i = p_cli->hist_line_i;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f993 3195 	ldrsb.w	r3, [r3, #405]	@ 0x195
 8001562:	73fb      	strb	r3, [r7, #15]
 8001564:	e013      	b.n	800158e <cliLineChange+0xca>
  }
  else
  {
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f993 3195 	ldrsb.w	r3, [r3, #405]	@ 0x195
 800156c:	3301      	adds	r3, #1
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	f892 2197 	ldrb.w	r2, [r2, #407]	@ 0x197
 8001574:	fb93 f1f2 	sdiv	r1, r3, r2
 8001578:	fb01 f202 	mul.w	r2, r1, r2
 800157c:	1a9b      	subs	r3, r3, r2
 800157e:	b25a      	sxtb	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
    change_i = p_cli->hist_line_i;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f993 3195 	ldrsb.w	r3, [r3, #405]	@ 0x195
 800158c:	73fb      	strb	r3, [r7, #15]
  }

  p_cli->line = p_cli->line_buf[change_i];
 800158e:	7bfa      	ldrb	r2, [r7, #15]
 8001590:	6879      	ldr	r1, [r7, #4]
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	4613      	mov	r3, r2
 8001596:	015b      	lsls	r3, r3, #5
 8001598:	4413      	add	r3, r2
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	4413      	add	r3, r2
 800159e:	4403      	add	r3, r0
 80015a0:	f503 72cc 	add.w	r2, r3, #408	@ 0x198
 80015a4:	f501 7329 	add.w	r3, r1, #676	@ 0x2a4
 80015a8:	4611      	mov	r1, r2
 80015aa:	2243      	movs	r2, #67	@ 0x43
 80015ac:	4618      	mov	r0, r3
 80015ae:	f00a f8fa 	bl	800b7a6 <memcpy>
  p_cli->line.cursor = p_cli->line.count;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f893 22e6 	ldrb.w	r2, [r3, #742]	@ 0x2e6
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f883 22e5 	strb.w	r2, [r3, #741]	@ 0x2e5

  p_cli->hist_line_new = false;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	f883 2194 	strb.w	r2, [r3, #404]	@ 0x194
 80015c6:	e000      	b.n	80015ca <cliLineChange+0x106>
    return;
 80015c8:	bf00      	nop
}
 80015ca:	3710      	adds	r7, #16
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	0800d870 	.word	0x0800d870
 80015d4:	0800d880 	.word	0x0800d880

080015d8 <cliRunCmd>:

bool cliRunCmd(cli_t *p_cli)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  bool ret = false;
 80015e0:	2300      	movs	r3, #0
 80015e2:	72fb      	strb	r3, [r7, #11]


  if (cliParseArgs(p_cli) == true)
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f000 f851 	bl	800168c <cliParseArgs>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d046      	beq.n	800167e <cliRunCmd+0xa6>
  {
    cliPrintf("\r\n");
 80015f0:	4825      	ldr	r0, [pc, #148]	@ (8001688 <cliRunCmd+0xb0>)
 80015f2:	f000 f893 	bl	800171c <cliPrintf>

    cliToUpper(p_cli->argv[0]);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80015fc:	4618      	mov	r0, r3
 80015fe:	f000 f8b1 	bl	8001764 <cliToUpper>

    for (int i=0; i<p_cli->cmd_count; i++)
 8001602:	2300      	movs	r3, #0
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	e033      	b.n	8001670 <cliRunCmd+0x98>
    {
      if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f8d3 0114 	ldr.w	r0, [r3, #276]	@ 0x114
 800160e:	68fa      	ldr	r2, [r7, #12]
 8001610:	4613      	mov	r3, r2
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	4413      	add	r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	4413      	add	r3, r2
 8001620:	3304      	adds	r3, #4
 8001622:	4619      	mov	r1, r3
 8001624:	f7fe fd94 	bl	8000150 <strcmp>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d11d      	bne.n	800166a <cliRunCmd+0x92>
      {
        p_cli->cmd_args.argc =  p_cli->argc - 1;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f8b3 3112 	ldrh.w	r3, [r3, #274]	@ 0x112
 8001634:	3b01      	subs	r3, #1
 8001636:	b29a      	uxth	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f8a3 242c 	strh.w	r2, [r3, #1068]	@ 0x42c
        p_cli->cmd_args.argv = &p_cli->argv[1];
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f503 728c 	add.w	r2, r3, #280	@ 0x118
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
        p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);
 800164a:	6879      	ldr	r1, [r7, #4]
 800164c:	68fa      	ldr	r2, [r7, #12]
 800164e:	4613      	mov	r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	4413      	add	r3, r2
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	440b      	add	r3, r1
 8001658:	f503 733f 	add.w	r3, r3, #764	@ 0x2fc
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	f202 422c 	addw	r2, r2, #1068	@ 0x42c
 8001664:	4610      	mov	r0, r2
 8001666:	4798      	blx	r3
        break;
 8001668:	e009      	b.n	800167e <cliRunCmd+0xa6>
    for (int i=0; i<p_cli->cmd_count; i++)
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	3301      	adds	r3, #1
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	@ 0x2e8
 8001676:	461a      	mov	r2, r3
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	4293      	cmp	r3, r2
 800167c:	dbc4      	blt.n	8001608 <cliRunCmd+0x30>
      }
    }
  }

  return ret;
 800167e:	7afb      	ldrb	r3, [r7, #11]
}
 8001680:	4618      	mov	r0, r3
 8001682:	3710      	adds	r7, #16
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	0800d888 	.word	0x0800d888

0800168c <cliParseArgs>:

bool cliParseArgs(cli_t *p_cli)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b088      	sub	sp, #32
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8001694:	2300      	movs	r3, #0
 8001696:	77fb      	strb	r3, [r7, #31]
  char *tok;
  char *next_ptr;
  uint16_t argc = 0;
 8001698:	2300      	movs	r3, #0
 800169a:	82fb      	strh	r3, [r7, #22]
  static const char *delim = " \f\n\r\t\v";
  char *cmdline;
  char **argv;

  p_cli->argc = 0;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2200      	movs	r2, #0
 80016a0:	f8a3 2112 	strh.w	r2, [r3, #274]	@ 0x112

  cmdline = (char *)p_cli->line.buf;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 80016aa:	613b      	str	r3, [r7, #16]
  argv    = p_cli->argv;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 80016b2:	60fb      	str	r3, [r7, #12]

  argv[argc] = NULL;
 80016b4:	8afb      	ldrh	r3, [r7, #22]
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	68fa      	ldr	r2, [r7, #12]
 80016ba:	4413      	add	r3, r2
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]

  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 80016c0:	4b15      	ldr	r3, [pc, #84]	@ (8001718 <cliParseArgs+0x8c>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f107 0208 	add.w	r2, r7, #8
 80016c8:	4619      	mov	r1, r3
 80016ca:	6938      	ldr	r0, [r7, #16]
 80016cc:	f009 ffec 	bl	800b6a8 <strtok_r>
 80016d0:	61b8      	str	r0, [r7, #24]
 80016d2:	e010      	b.n	80016f6 <cliParseArgs+0x6a>
  {
    argv[argc++] = tok;
 80016d4:	8afb      	ldrh	r3, [r7, #22]
 80016d6:	1c5a      	adds	r2, r3, #1
 80016d8:	82fa      	strh	r2, [r7, #22]
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	68fa      	ldr	r2, [r7, #12]
 80016de:	4413      	add	r3, r2
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	601a      	str	r2, [r3, #0]
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 80016e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001718 <cliParseArgs+0x8c>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f107 0208 	add.w	r2, r7, #8
 80016ec:	4619      	mov	r1, r3
 80016ee:	2000      	movs	r0, #0
 80016f0:	f009 ffda 	bl	800b6a8 <strtok_r>
 80016f4:	61b8      	str	r0, [r7, #24]
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d1eb      	bne.n	80016d4 <cliParseArgs+0x48>
  }

  p_cli->argc = argc;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	8afa      	ldrh	r2, [r7, #22]
 8001700:	f8a3 2112 	strh.w	r2, [r3, #274]	@ 0x112

  if (argc > 0)
 8001704:	8afb      	ldrh	r3, [r7, #22]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <cliParseArgs+0x82>
  {
    ret = true;
 800170a:	2301      	movs	r3, #1
 800170c:	77fb      	strb	r3, [r7, #31]
  }

  return ret;
 800170e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001710:	4618      	mov	r0, r3
 8001712:	3720      	adds	r7, #32
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	20000000 	.word	0x20000000

0800171c <cliPrintf>:

void cliPrintf(const char *fmt, ...)
{
 800171c:	b40f      	push	{r0, r1, r2, r3}
 800171e:	b580      	push	{r7, lr}
 8001720:	b084      	sub	sp, #16
 8001722:	af00      	add	r7, sp, #0
  va_list arg;
  va_start (arg, fmt);
 8001724:	f107 031c 	add.w	r3, r7, #28
 8001728:	607b      	str	r3, [r7, #4]
  int32_t len;
  cli_t *p_cli = &cli_node;
 800172a:	4b0d      	ldr	r3, [pc, #52]	@ (8001760 <cliPrintf+0x44>)
 800172c:	60fb      	str	r3, [r7, #12]


  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	f103 0011 	add.w	r0, r3, #17
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800173c:	f009 ff64 	bl	800b608 <vsniprintf>
 8001740:	60b8      	str	r0, [r7, #8]
  va_end (arg);

  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	7818      	ldrb	r0, [r3, #0]
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	3311      	adds	r3, #17
 800174a:	68ba      	ldr	r2, [r7, #8]
 800174c:	4619      	mov	r1, r3
 800174e:	f000 fa63 	bl	8001c18 <uartWrite>
}
 8001752:	bf00      	nop
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800175c:	b004      	add	sp, #16
 800175e:	4770      	bx	lr
 8001760:	2000034c 	.word	0x2000034c

08001764 <cliToUpper>:

void cliToUpper(char *str)
{
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint16_t i;
  uint8_t  str_ch;

  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 800176c:	2300      	movs	r3, #0
 800176e:	81fb      	strh	r3, [r7, #14]
 8001770:	e018      	b.n	80017a4 <cliToUpper+0x40>
  {
    str_ch = str[i];
 8001772:	89fb      	ldrh	r3, [r7, #14]
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	4413      	add	r3, r2
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	737b      	strb	r3, [r7, #13]

    if (str_ch == 0)
 800177c:	7b7b      	ldrb	r3, [r7, #13]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d014      	beq.n	80017ac <cliToUpper+0x48>
    {
      break;
    }

    if ((str_ch >= 'a') && (str_ch <= 'z'))
 8001782:	7b7b      	ldrb	r3, [r7, #13]
 8001784:	2b60      	cmp	r3, #96	@ 0x60
 8001786:	d905      	bls.n	8001794 <cliToUpper+0x30>
 8001788:	7b7b      	ldrb	r3, [r7, #13]
 800178a:	2b7a      	cmp	r3, #122	@ 0x7a
 800178c:	d802      	bhi.n	8001794 <cliToUpper+0x30>
    {
      str_ch = str_ch - 'a' + 'A';
 800178e:	7b7b      	ldrb	r3, [r7, #13]
 8001790:	3b20      	subs	r3, #32
 8001792:	737b      	strb	r3, [r7, #13]
    }
    str[i] = str_ch;
 8001794:	89fb      	ldrh	r3, [r7, #14]
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	4413      	add	r3, r2
 800179a:	7b7a      	ldrb	r2, [r7, #13]
 800179c:	701a      	strb	r2, [r3, #0]
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 800179e:	89fb      	ldrh	r3, [r7, #14]
 80017a0:	3301      	adds	r3, #1
 80017a2:	81fb      	strh	r3, [r7, #14]
 80017a4:	89fb      	ldrh	r3, [r7, #14]
 80017a6:	2b0f      	cmp	r3, #15
 80017a8:	d9e3      	bls.n	8001772 <cliToUpper+0xe>
 80017aa:	e000      	b.n	80017ae <cliToUpper+0x4a>
      break;
 80017ac:	bf00      	nop
  }

  if (i == CLI_CMD_NAME_MAX)
 80017ae:	89fb      	ldrh	r3, [r7, #14]
 80017b0:	2b10      	cmp	r3, #16
 80017b2:	d105      	bne.n	80017c0 <cliToUpper+0x5c>
  {
    str[i-1] = 0;
 80017b4:	89fb      	ldrh	r3, [r7, #14]
 80017b6:	3b01      	subs	r3, #1
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	4413      	add	r3, r2
 80017bc:	2200      	movs	r2, #0
 80017be:	701a      	strb	r2, [r3, #0]
  }
}
 80017c0:	bf00      	nop
 80017c2:	3714      	adds	r7, #20
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bc80      	pop	{r7}
 80017c8:	4770      	bx	lr
	...

080017cc <cliArgsGetData>:

int32_t cliArgsGetData(uint8_t index)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = 0;
 80017d6:	2300      	movs	r3, #0
 80017d8:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 80017da:	4b0f      	ldr	r3, [pc, #60]	@ (8001818 <cliArgsGetData+0x4c>)
 80017dc:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 80017de:	79fb      	ldrb	r3, [r7, #7]
 80017e0:	b29a      	uxth	r2, r3
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	@ 0x42c
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d301      	bcc.n	80017f0 <cliArgsGetData+0x24>
  {
    return 0;
 80017ec:	2300      	movs	r3, #0
 80017ee:	e00e      	b.n	800180e <cliArgsGetData+0x42>
  }

  ret = (int32_t)strtoul((const char * ) p_cli->cmd_args.argv[index], (char **)NULL, (int) 0);
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 80017f6:	79fb      	ldrb	r3, [r7, #7]
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	4413      	add	r3, r2
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2200      	movs	r2, #0
 8001800:	2100      	movs	r1, #0
 8001802:	4618      	mov	r0, r3
 8001804:	f009 fdc6 	bl	800b394 <strtoul>
 8001808:	4603      	mov	r3, r0
 800180a:	60fb      	str	r3, [r7, #12]

  return ret;
 800180c:	68fb      	ldr	r3, [r7, #12]
}
 800180e:	4618      	mov	r0, r3
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	2000034c 	.word	0x2000034c

0800181c <cliArgsGetFloat>:

float cliArgsGetFloat(uint8_t index)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	71fb      	strb	r3, [r7, #7]
  float ret = 0.0;
 8001826:	f04f 0300 	mov.w	r3, #0
 800182a:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 800182c:	4b0e      	ldr	r3, [pc, #56]	@ (8001868 <cliArgsGetFloat+0x4c>)
 800182e:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8001830:	79fb      	ldrb	r3, [r7, #7]
 8001832:	b29a      	uxth	r2, r3
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	@ 0x42c
 800183a:	429a      	cmp	r2, r3
 800183c:	d302      	bcc.n	8001844 <cliArgsGetFloat+0x28>
  {
    return 0;
 800183e:	f04f 0300 	mov.w	r3, #0
 8001842:	e00c      	b.n	800185e <cliArgsGetFloat+0x42>
  }

  ret = (float)strtof((const char * ) p_cli->cmd_args.argv[index], (char **)NULL);
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	4413      	add	r3, r2
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2100      	movs	r1, #0
 8001854:	4618      	mov	r0, r3
 8001856:	f009 fcd7 	bl	800b208 <strtof>
 800185a:	60f8      	str	r0, [r7, #12]

  return ret;
 800185c:	68fb      	ldr	r3, [r7, #12]
}
 800185e:	4618      	mov	r0, r3
 8001860:	3710      	adds	r7, #16
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	2000034c 	.word	0x2000034c

0800186c <cliArgsGetStr>:

char *cliArgsGetStr(uint8_t index)
{
 800186c:	b480      	push	{r7}
 800186e:	b085      	sub	sp, #20
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	71fb      	strb	r3, [r7, #7]
  char *ret = NULL;
 8001876:	2300      	movs	r3, #0
 8001878:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 800187a:	4b0c      	ldr	r3, [pc, #48]	@ (80018ac <cliArgsGetStr+0x40>)
 800187c:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 800187e:	79fb      	ldrb	r3, [r7, #7]
 8001880:	b29a      	uxth	r2, r3
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	@ 0x42c
 8001888:	429a      	cmp	r2, r3
 800188a:	d301      	bcc.n	8001890 <cliArgsGetStr+0x24>
  {
    return 0;
 800188c:	2300      	movs	r3, #0
 800188e:	e008      	b.n	80018a2 <cliArgsGetStr+0x36>
  }

  ret = p_cli->cmd_args.argv[index];
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8001896:	79fb      	ldrb	r3, [r7, #7]
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	4413      	add	r3, r2
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	60fb      	str	r3, [r7, #12]

  return ret;
 80018a0:	68fb      	ldr	r3, [r7, #12]
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3714      	adds	r7, #20
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bc80      	pop	{r7}
 80018aa:	4770      	bx	lr
 80018ac:	2000034c 	.word	0x2000034c

080018b0 <cliArgsIsStr>:

bool cliArgsIsStr(uint8_t index, char *p_str)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	6039      	str	r1, [r7, #0]
 80018ba:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 80018bc:	2300      	movs	r3, #0
 80018be:	73fb      	strb	r3, [r7, #15]
  cli_t *p_cli = &cli_node;
 80018c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001900 <cliArgsIsStr+0x50>)
 80018c2:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 80018c4:	79fb      	ldrb	r3, [r7, #7]
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	@ 0x42c
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d301      	bcc.n	80018d6 <cliArgsIsStr+0x26>
  {
    return 0;
 80018d2:	2300      	movs	r3, #0
 80018d4:	e010      	b.n	80018f8 <cliArgsIsStr+0x48>
  }

  if(strcmp(p_str, p_cli->cmd_args.argv[index]) == 0)
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 80018dc:	79fb      	ldrb	r3, [r7, #7]
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	4413      	add	r3, r2
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4619      	mov	r1, r3
 80018e6:	6838      	ldr	r0, [r7, #0]
 80018e8:	f7fe fc32 	bl	8000150 <strcmp>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d101      	bne.n	80018f6 <cliArgsIsStr+0x46>
  {
    ret = true;
 80018f2:	2301      	movs	r3, #1
 80018f4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80018f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3710      	adds	r7, #16
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	2000034c 	.word	0x2000034c

08001904 <cliAdd>:
//    return false;
//  }
}

bool cliAdd(const char *cmd_str, void (*p_func)(cli_args_t *))
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b086      	sub	sp, #24
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
  bool ret = true;
 800190e:	2301      	movs	r3, #1
 8001910:	75fb      	strb	r3, [r7, #23]
  cli_t *p_cli = &cli_node;
 8001912:	4b20      	ldr	r3, [pc, #128]	@ (8001994 <cliAdd+0x90>)
 8001914:	613b      	str	r3, [r7, #16]
  uint16_t index;

  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	@ 0x2e8
 800191c:	2b0f      	cmp	r3, #15
 800191e:	d901      	bls.n	8001924 <cliAdd+0x20>
  {
    return false;
 8001920:	2300      	movs	r3, #0
 8001922:	e032      	b.n	800198a <cliAdd+0x86>
  }

  index = p_cli->cmd_count;
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	@ 0x2e8
 800192a:	81fb      	strh	r3, [r7, #14]

  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 800192c:	89fa      	ldrh	r2, [r7, #14]
 800192e:	4613      	mov	r3, r2
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	4413      	add	r3, r2
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	4413      	add	r3, r2
 800193e:	3304      	adds	r3, #4
 8001940:	6879      	ldr	r1, [r7, #4]
 8001942:	4618      	mov	r0, r3
 8001944:	f009 ff27 	bl	800b796 <strcpy>
  p_cli->cmd_list[index].cmd_func = p_func;
 8001948:	89fa      	ldrh	r2, [r7, #14]
 800194a:	6939      	ldr	r1, [r7, #16]
 800194c:	4613      	mov	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	440b      	add	r3, r1
 8001956:	f503 733f 	add.w	r3, r3, #764	@ 0x2fc
 800195a:	683a      	ldr	r2, [r7, #0]
 800195c:	601a      	str	r2, [r3, #0]

  cliToUpper(p_cli->cmd_list[index].cmd_str);
 800195e:	89fa      	ldrh	r2, [r7, #14]
 8001960:	4613      	mov	r3, r2
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	4413      	add	r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 800196c:	693a      	ldr	r2, [r7, #16]
 800196e:	4413      	add	r3, r2
 8001970:	3304      	adds	r3, #4
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff fef6 	bl	8001764 <cliToUpper>

  p_cli->cmd_count++;
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	@ 0x2e8
 800197e:	3301      	adds	r3, #1
 8001980:	b29a      	uxth	r2, r3
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	f8a3 22e8 	strh.w	r2, [r3, #744]	@ 0x2e8

  return ret;
 8001988:	7dfb      	ldrb	r3, [r7, #23]
}
 800198a:	4618      	mov	r0, r3
 800198c:	3718      	adds	r7, #24
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	2000034c 	.word	0x2000034c

08001998 <cliShowList>:

void cliShowList(cli_args_t *args)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  cli_t *p_cli = &cli_node;
 80019a0:	4b15      	ldr	r3, [pc, #84]	@ (80019f8 <cliShowList+0x60>)
 80019a2:	60bb      	str	r3, [r7, #8]


  cliPrintf("\r\n");
 80019a4:	4815      	ldr	r0, [pc, #84]	@ (80019fc <cliShowList+0x64>)
 80019a6:	f7ff feb9 	bl	800171c <cliPrintf>
  cliPrintf("---------- cmd list ---------\r\n");
 80019aa:	4815      	ldr	r0, [pc, #84]	@ (8001a00 <cliShowList+0x68>)
 80019ac:	f7ff feb6 	bl	800171c <cliPrintf>

  for (int i=0; i<p_cli->cmd_count; i++)
 80019b0:	2300      	movs	r3, #0
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	e012      	b.n	80019dc <cliShowList+0x44>
  {
    cliPrintf(p_cli->cmd_list[i].cmd_str);
 80019b6:	68fa      	ldr	r2, [r7, #12]
 80019b8:	4613      	mov	r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	4413      	add	r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 80019c4:	68ba      	ldr	r2, [r7, #8]
 80019c6:	4413      	add	r3, r2
 80019c8:	3304      	adds	r3, #4
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff fea6 	bl	800171c <cliPrintf>
    cliPrintf("\r\n");
 80019d0:	480a      	ldr	r0, [pc, #40]	@ (80019fc <cliShowList+0x64>)
 80019d2:	f7ff fea3 	bl	800171c <cliPrintf>
  for (int i=0; i<p_cli->cmd_count; i++)
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	3301      	adds	r3, #1
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	@ 0x2e8
 80019e2:	461a      	mov	r2, r3
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	4293      	cmp	r3, r2
 80019e8:	dbe5      	blt.n	80019b6 <cliShowList+0x1e>
  }

  cliPrintf("-----------------------------\r\n");
 80019ea:	4806      	ldr	r0, [pc, #24]	@ (8001a04 <cliShowList+0x6c>)
 80019ec:	f7ff fe96 	bl	800171c <cliPrintf>
}
 80019f0:	bf00      	nop
 80019f2:	3710      	adds	r7, #16
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	2000034c 	.word	0x2000034c
 80019fc:	0800d888 	.word	0x0800d888
 8001a00:	0800d88c 	.word	0x0800d88c
 8001a04:	0800d8ac 	.word	0x0800d8ac

08001a08 <cliMemoryDump>:

void cliMemoryDump(cli_args_t *args)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b08c      	sub	sp, #48	@ 0x30
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  int idx, size = 16;
 8001a10:	2310      	movs	r3, #16
 8001a12:	62bb      	str	r3, [r7, #40]	@ 0x28
  unsigned int *addr;
  int idx1, i;
  unsigned int *ascptr;
  unsigned char asc[4];

  int    argc = args->argc;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	881b      	ldrh	r3, [r3, #0]
 8001a18:	617b      	str	r3, [r7, #20]
  char **argv = args->argv;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	613b      	str	r3, [r7, #16]


  if(args->argc < 1)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	881b      	ldrh	r3, [r3, #0]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d103      	bne.n	8001a30 <cliMemoryDump+0x28>
  {
    cliPrintf(">> md addr [size] \n");
 8001a28:	4840      	ldr	r0, [pc, #256]	@ (8001b2c <cliMemoryDump+0x124>)
 8001a2a:	f7ff fe77 	bl	800171c <cliPrintf>
 8001a2e:	e07a      	b.n	8001b26 <cliMemoryDump+0x11e>
    return;
  }

  if(argc > 1)
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	dd09      	ble.n	8001a4a <cliMemoryDump+0x42>
  {
    size = (int)strtoul((const char * ) argv[1], (char **)NULL, (int) 0);
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	3304      	adds	r3, #4
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	2100      	movs	r1, #0
 8001a40:	4618      	mov	r0, r3
 8001a42:	f009 fca7 	bl	800b394 <strtoul>
 8001a46:	4603      	mov	r3, r0
 8001a48:	62bb      	str	r3, [r7, #40]	@ 0x28
  }
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	2100      	movs	r1, #0
 8001a52:	4618      	mov	r0, r3
 8001a54:	f009 fc9e 	bl	800b394 <strtoul>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	627b      	str	r3, [r7, #36]	@ 0x24
  ascptr = (unsigned int *)addr;
 8001a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a5e:	61bb      	str	r3, [r7, #24]

  cliPrintf("\n   ");
 8001a60:	4833      	ldr	r0, [pc, #204]	@ (8001b30 <cliMemoryDump+0x128>)
 8001a62:	f7ff fe5b 	bl	800171c <cliPrintf>
  for (idx = 0; idx<size; idx++)
 8001a66:	2300      	movs	r3, #0
 8001a68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a6a:	e058      	b.n	8001b1e <cliMemoryDump+0x116>
  {
    if((idx%4) == 0)
 8001a6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a6e:	f003 0303 	and.w	r3, r3, #3
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d104      	bne.n	8001a80 <cliMemoryDump+0x78>
    {
      cliPrintf(" 0x%08X: ", (unsigned int)addr);
 8001a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a78:	4619      	mov	r1, r3
 8001a7a:	482e      	ldr	r0, [pc, #184]	@ (8001b34 <cliMemoryDump+0x12c>)
 8001a7c:	f7ff fe4e 	bl	800171c <cliPrintf>
    }
    cliPrintf(" 0x%08X", *(addr));
 8001a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4619      	mov	r1, r3
 8001a86:	482c      	ldr	r0, [pc, #176]	@ (8001b38 <cliMemoryDump+0x130>)
 8001a88:	f7ff fe48 	bl	800171c <cliPrintf>

    if ((idx%4) == 3)
 8001a8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a8e:	425a      	negs	r2, r3
 8001a90:	f003 0303 	and.w	r3, r3, #3
 8001a94:	f002 0203 	and.w	r2, r2, #3
 8001a98:	bf58      	it	pl
 8001a9a:	4253      	negpl	r3, r2
 8001a9c:	2b03      	cmp	r3, #3
 8001a9e:	d138      	bne.n	8001b12 <cliMemoryDump+0x10a>
    {
      cliPrintf ("  |");
 8001aa0:	4826      	ldr	r0, [pc, #152]	@ (8001b3c <cliMemoryDump+0x134>)
 8001aa2:	f7ff fe3b 	bl	800171c <cliPrintf>
      for (idx1= 0; idx1< 4; idx1++)
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	623b      	str	r3, [r7, #32]
 8001aaa:	e02c      	b.n	8001b06 <cliMemoryDump+0xfe>
      {
        memcpy((char *)asc, (char *)ascptr, 4);
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	60fb      	str	r3, [r7, #12]
        for (i=0;i<4;i++)
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61fb      	str	r3, [r7, #28]
 8001ab6:	e01d      	b.n	8001af4 <cliMemoryDump+0xec>
        {
          if (asc[i] > 0x1f && asc[i] < 0x7f)
 8001ab8:	f107 020c 	add.w	r2, r7, #12
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	4413      	add	r3, r2
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	2b1f      	cmp	r3, #31
 8001ac4:	d910      	bls.n	8001ae8 <cliMemoryDump+0xe0>
 8001ac6:	f107 020c 	add.w	r2, r7, #12
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	4413      	add	r3, r2
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	2b7e      	cmp	r3, #126	@ 0x7e
 8001ad2:	d809      	bhi.n	8001ae8 <cliMemoryDump+0xe0>
          {
            cliPrintf("%c", asc[i]);
 8001ad4:	f107 020c 	add.w	r2, r7, #12
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	4413      	add	r3, r2
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4817      	ldr	r0, [pc, #92]	@ (8001b40 <cliMemoryDump+0x138>)
 8001ae2:	f7ff fe1b 	bl	800171c <cliPrintf>
 8001ae6:	e002      	b.n	8001aee <cliMemoryDump+0xe6>
          }
          else
          {
            cliPrintf(".");
 8001ae8:	4816      	ldr	r0, [pc, #88]	@ (8001b44 <cliMemoryDump+0x13c>)
 8001aea:	f7ff fe17 	bl	800171c <cliPrintf>
        for (i=0;i<4;i++)
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	3301      	adds	r3, #1
 8001af2:	61fb      	str	r3, [r7, #28]
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	2b03      	cmp	r3, #3
 8001af8:	ddde      	ble.n	8001ab8 <cliMemoryDump+0xb0>
          }
        }
        ascptr+=1;
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	3304      	adds	r3, #4
 8001afe:	61bb      	str	r3, [r7, #24]
      for (idx1= 0; idx1< 4; idx1++)
 8001b00:	6a3b      	ldr	r3, [r7, #32]
 8001b02:	3301      	adds	r3, #1
 8001b04:	623b      	str	r3, [r7, #32]
 8001b06:	6a3b      	ldr	r3, [r7, #32]
 8001b08:	2b03      	cmp	r3, #3
 8001b0a:	ddcf      	ble.n	8001aac <cliMemoryDump+0xa4>
      }
      cliPrintf("|\n   ");
 8001b0c:	480e      	ldr	r0, [pc, #56]	@ (8001b48 <cliMemoryDump+0x140>)
 8001b0e:	f7ff fe05 	bl	800171c <cliPrintf>
    }
    addr++;
 8001b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b14:	3304      	adds	r3, #4
 8001b16:	627b      	str	r3, [r7, #36]	@ 0x24
  for (idx = 0; idx<size; idx++)
 8001b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b22:	429a      	cmp	r2, r3
 8001b24:	dba2      	blt.n	8001a6c <cliMemoryDump+0x64>
  }
}
 8001b26:	3730      	adds	r7, #48	@ 0x30
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	0800d8cc 	.word	0x0800d8cc
 8001b30:	0800d8e0 	.word	0x0800d8e0
 8001b34:	0800d8e8 	.word	0x0800d8e8
 8001b38:	0800d8f4 	.word	0x0800d8f4
 8001b3c:	0800d8fc 	.word	0x0800d8fc
 8001b40:	0800d900 	.word	0x0800d900
 8001b44:	0800d904 	.word	0x0800d904
 8001b48:	0800d908 	.word	0x0800d908

08001b4c <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4603      	mov	r3, r0
 8001b54:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 8001b56:	2300      	movs	r3, #0
 8001b58:	60fb      	str	r3, [r7, #12]

  switch(ch)
 8001b5a:	79fb      	ldrb	r3, [r7, #7]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d017      	beq.n	8001b90 <uartAvailable+0x44>
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d116      	bne.n	8001b92 <uartAvailable+0x46>
    case CH_CDC:
      //ret = cdcAvailable();
      break;

    case CH_USART1:
      qbuffer.in = (qbuffer.len - hdma_usart1_rx.Instance->CNDTR);
 8001b64:	4b0e      	ldr	r3, [pc, #56]	@ (8001ba0 <uartAvailable+0x54>)
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	4b0e      	ldr	r3, [pc, #56]	@ (8001ba4 <uartAvailable+0x58>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	4a0b      	ldr	r2, [pc, #44]	@ (8001ba0 <uartAvailable+0x54>)
 8001b72:	6013      	str	r3, [r2, #0]
      ret = (qbuffer.in - qbuffer.out) % qbuffer.len;
 8001b74:	4b0a      	ldr	r3, [pc, #40]	@ (8001ba0 <uartAvailable+0x54>)
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	4b09      	ldr	r3, [pc, #36]	@ (8001ba0 <uartAvailable+0x54>)
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	4a08      	ldr	r2, [pc, #32]	@ (8001ba0 <uartAvailable+0x54>)
 8001b80:	6892      	ldr	r2, [r2, #8]
 8001b82:	fbb3 f1f2 	udiv	r1, r3, r2
 8001b86:	fb01 f202 	mul.w	r2, r1, r2
 8001b8a:	1a9b      	subs	r3, r3, r2
 8001b8c:	60fb      	str	r3, [r7, #12]
      break;
 8001b8e:	e000      	b.n	8001b92 <uartAvailable+0x46>
      break;
 8001b90:	bf00      	nop
  }

  return ret;
 8001b92:	68fb      	ldr	r3, [r7, #12]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3714      	adds	r7, #20
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bc80      	pop	{r7}
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	20000790 	.word	0x20000790
 8001ba4:	20000934 	.word	0x20000934

08001ba8 <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
 8001ba8:	b40e      	push	{r1, r2, r3}
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b0c7      	sub	sp, #284	@ 0x11c
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001bb6:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8001bba:	701a      	strb	r2, [r3, #0]
  char buf[256];
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
 8001bbc:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8001bc0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001bc4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001bc8:	601a      	str	r2, [r3, #0]
  len = vsnprintf(buf, 256, fmt, args);
 8001bca:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001bce:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001bd2:	f107 0010 	add.w	r0, r7, #16
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001bdc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001be0:	f009 fd12 	bl	800b608 <vsniprintf>
 8001be4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

  ret = uartWrite(ch, (uint8_t *)buf, len);
 8001be8:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001bec:	f107 0110 	add.w	r1, r7, #16
 8001bf0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001bf4:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f000 f80c 	bl	8001c18 <uartWrite>
 8001c00:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

  va_end(args);


  return ret;
 8001c04:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001c14:	b003      	add	sp, #12
 8001c16:	4770      	bx	lr

08001c18 <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
 8001c24:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 8001c26:	2300      	movs	r3, #0
 8001c28:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  if(ch == CH_CDC)
 8001c2a:	7bfb      	ldrb	r3, [r7, #15]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d010      	beq.n	8001c52 <uartWrite+0x3a>
  {
    //ret = cdcWrite(p_data, length);
  }
  else if(ch == CH_USART1)
 8001c30:	7bfb      	ldrb	r3, [r7, #15]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d10d      	bne.n	8001c52 <uartWrite+0x3a>
  {
    status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	b29a      	uxth	r2, r3
 8001c3a:	2364      	movs	r3, #100	@ 0x64
 8001c3c:	68b9      	ldr	r1, [r7, #8]
 8001c3e:	4807      	ldr	r0, [pc, #28]	@ (8001c5c <uartWrite+0x44>)
 8001c40:	f003 fbd8 	bl	80053f4 <HAL_UART_Transmit>
 8001c44:	4603      	mov	r3, r0
 8001c46:	74fb      	strb	r3, [r7, #19]
    if (status == HAL_OK)
 8001c48:	7cfb      	ldrb	r3, [r7, #19]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d101      	bne.n	8001c52 <uartWrite+0x3a>
    {
      ret = length;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8001c52:	697b      	ldr	r3, [r7, #20]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3718      	adds	r7, #24
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	200008a4 	.word	0x200008a4

08001c60 <uartRead>:

uint8_t uartRead(uint8_t ch)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4603      	mov	r3, r0
 8001c68:	71fb      	strb	r3, [r7, #7]
  uint8_t data = 0;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	73fb      	strb	r3, [r7, #15]

  if(ch == CH_CDC)
 8001c6e:	79fb      	ldrb	r3, [r7, #7]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d009      	beq.n	8001c88 <uartRead+0x28>
  {
    //data = cdcRead();
  }
  else if(ch == CH_USART1)
 8001c74:	79fb      	ldrb	r3, [r7, #7]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d106      	bne.n	8001c88 <uartRead+0x28>
  {
     qbufferRead(&qbuffer, &data,1);
 8001c7a:	f107 030f 	add.w	r3, r7, #15
 8001c7e:	2201      	movs	r2, #1
 8001c80:	4619      	mov	r1, r3
 8001c82:	4804      	ldr	r0, [pc, #16]	@ (8001c94 <uartRead+0x34>)
 8001c84:	f000 f808 	bl	8001c98 <qbufferRead>
  }

  return data;
 8001c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20000790 	.word	0x20000790

08001c98 <qbufferRead>:

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b087      	sub	sp, #28
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	75fb      	strb	r3, [r7, #23]

  for(int i=0; i<length; i++)
 8001ca8:	2300      	movs	r3, #0
 8001caa:	613b      	str	r3, [r7, #16]
 8001cac:	e026      	b.n	8001cfc <qbufferRead+0x64>
  {
    if(p_node->p_buf != NULL)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d009      	beq.n	8001cca <qbufferRead+0x32>
    {
      p_data[i] = p_node->p_buf[p_node->out];
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	68da      	ldr	r2, [r3, #12]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	441a      	add	r2, r3
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	68b9      	ldr	r1, [r7, #8]
 8001cc4:	440b      	add	r3, r1
 8001cc6:	7812      	ldrb	r2, [r2, #0]
 8001cc8:	701a      	strb	r2, [r3, #0]
    }

    if(p_node->out != p_node->in)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	685a      	ldr	r2, [r3, #4]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d00c      	beq.n	8001cf0 <qbufferRead+0x58>
    {
      p_node->out = (p_node->out + 1) % p_node->len;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	68fa      	ldr	r2, [r7, #12]
 8001cde:	6892      	ldr	r2, [r2, #8]
 8001ce0:	fbb3 f1f2 	udiv	r1, r3, r2
 8001ce4:	fb01 f202 	mul.w	r2, r1, r2
 8001ce8:	1a9a      	subs	r2, r3, r2
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	605a      	str	r2, [r3, #4]
 8001cee:	e002      	b.n	8001cf6 <qbufferRead+0x5e>
    }
    else
    {
      ret = false;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	75fb      	strb	r3, [r7, #23]
      break;
 8001cf4:	e006      	b.n	8001d04 <qbufferRead+0x6c>
  for(int i=0; i<length; i++)
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	613b      	str	r3, [r7, #16]
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d8d4      	bhi.n	8001cae <qbufferRead+0x16>
    }
  }

  return ret;
 8001d04:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	371c      	adds	r7, #28
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bc80      	pop	{r7}
 8001d0e:	4770      	bx	lr

08001d10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d16:	4b10      	ldr	r3, [pc, #64]	@ (8001d58 <MX_DMA_Init+0x48>)
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	4a0f      	ldr	r2, [pc, #60]	@ (8001d58 <MX_DMA_Init+0x48>)
 8001d1c:	f043 0301 	orr.w	r3, r3, #1
 8001d20:	6153      	str	r3, [r2, #20]
 8001d22:	4b0d      	ldr	r3, [pc, #52]	@ (8001d58 <MX_DMA_Init+0x48>)
 8001d24:	695b      	ldr	r3, [r3, #20]
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	607b      	str	r3, [r7, #4]
 8001d2c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001d2e:	2200      	movs	r2, #0
 8001d30:	2100      	movs	r1, #0
 8001d32:	200f      	movs	r0, #15
 8001d34:	f000 fca1 	bl	800267a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001d38:	200f      	movs	r0, #15
 8001d3a:	f000 fcba 	bl	80026b2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001d3e:	2200      	movs	r2, #0
 8001d40:	2100      	movs	r1, #0
 8001d42:	2010      	movs	r0, #16
 8001d44:	f000 fc99 	bl	800267a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001d48:	2010      	movs	r0, #16
 8001d4a:	f000 fcb2 	bl	80026b2 <HAL_NVIC_EnableIRQ>

}
 8001d4e:	bf00      	nop
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	40021000 	.word	0x40021000

08001d5c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d62:	4b0e      	ldr	r3, [pc, #56]	@ (8001d9c <MX_GPIO_Init+0x40>)
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	4a0d      	ldr	r2, [pc, #52]	@ (8001d9c <MX_GPIO_Init+0x40>)
 8001d68:	f043 0320 	orr.w	r3, r3, #32
 8001d6c:	6193      	str	r3, [r2, #24]
 8001d6e:	4b0b      	ldr	r3, [pc, #44]	@ (8001d9c <MX_GPIO_Init+0x40>)
 8001d70:	699b      	ldr	r3, [r3, #24]
 8001d72:	f003 0320 	and.w	r3, r3, #32
 8001d76:	607b      	str	r3, [r7, #4]
 8001d78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d7a:	4b08      	ldr	r3, [pc, #32]	@ (8001d9c <MX_GPIO_Init+0x40>)
 8001d7c:	699b      	ldr	r3, [r3, #24]
 8001d7e:	4a07      	ldr	r2, [pc, #28]	@ (8001d9c <MX_GPIO_Init+0x40>)
 8001d80:	f043 0304 	orr.w	r3, r3, #4
 8001d84:	6193      	str	r3, [r2, #24]
 8001d86:	4b05      	ldr	r3, [pc, #20]	@ (8001d9c <MX_GPIO_Init+0x40>)
 8001d88:	699b      	ldr	r3, [r3, #24]
 8001d8a:	f003 0304 	and.w	r3, r3, #4
 8001d8e:	603b      	str	r3, [r7, #0]
 8001d90:	683b      	ldr	r3, [r7, #0]

}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bc80      	pop	{r7}
 8001d9a:	4770      	bx	lr
 8001d9c:	40021000 	.word	0x40021000

08001da0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001da4:	f000 fb30 	bl	8002408 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001da8:	f000 f814 	bl	8001dd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001dac:	f7ff ffd6 	bl	8001d5c <MX_GPIO_Init>
  MX_DMA_Init();
 8001db0:	f7ff ffae 	bl	8001d10 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001db4:	f000 f9c6 	bl	8002144 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001db8:	f000 f9ee 	bl	8002198 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8001dbc:	f008 f872 	bl	8009ea4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  cliInit();
 8001dc0:	f7fe ff6e 	bl	8000ca0 <cliInit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  cliOpen(CH_USART1, 11520);
 8001dc4:	f44f 5134 	mov.w	r1, #11520	@ 0x2d00
 8001dc8:	2001      	movs	r0, #1
 8001dca:	f7fe ffb5 	bl	8000d38 <cliOpen>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    cliMain();
 8001dce:	f7ff f897 	bl	8000f00 <cliMain>
 8001dd2:	e7fc      	b.n	8001dce <main+0x2e>

08001dd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b094      	sub	sp, #80	@ 0x50
 8001dd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dda:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001dde:	2228      	movs	r2, #40	@ 0x28
 8001de0:	2100      	movs	r1, #0
 8001de2:	4618      	mov	r0, r3
 8001de4:	f009 fc1e 	bl	800b624 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001de8:	f107 0314 	add.w	r3, r7, #20
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	609a      	str	r2, [r3, #8]
 8001df4:	60da      	str	r2, [r3, #12]
 8001df6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001df8:	1d3b      	adds	r3, r7, #4
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	605a      	str	r2, [r3, #4]
 8001e00:	609a      	str	r2, [r3, #8]
 8001e02:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e04:	2301      	movs	r3, #1
 8001e06:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e08:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e12:	2301      	movs	r3, #1
 8001e14:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e16:	2302      	movs	r3, #2
 8001e18:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e1a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e1e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001e20:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001e24:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e26:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f002 fdcc 	bl	80049c8 <HAL_RCC_OscConfig>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001e36:	f000 f827 	bl	8001e88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e3a:	230f      	movs	r3, #15
 8001e3c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e3e:	2302      	movs	r3, #2
 8001e40:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e42:	2300      	movs	r3, #0
 8001e44:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e4a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e50:	f107 0314 	add.w	r3, r7, #20
 8001e54:	2102      	movs	r1, #2
 8001e56:	4618      	mov	r0, r3
 8001e58:	f003 f838 	bl	8004ecc <HAL_RCC_ClockConfig>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001e62:	f000 f811 	bl	8001e88 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001e66:	2310      	movs	r3, #16
 8001e68:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e6e:	1d3b      	adds	r3, r7, #4
 8001e70:	4618      	mov	r0, r3
 8001e72:	f003 f9b9 	bl	80051e8 <HAL_RCCEx_PeriphCLKConfig>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001e7c:	f000 f804 	bl	8001e88 <Error_Handler>
  }
}
 8001e80:	bf00      	nop
 8001e82:	3750      	adds	r7, #80	@ 0x50
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e8c:	b672      	cpsid	i
}
 8001e8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e90:	bf00      	nop
 8001e92:	e7fd      	b.n	8001e90 <Error_Handler+0x8>

08001e94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e9a:	4b15      	ldr	r3, [pc, #84]	@ (8001ef0 <HAL_MspInit+0x5c>)
 8001e9c:	699b      	ldr	r3, [r3, #24]
 8001e9e:	4a14      	ldr	r2, [pc, #80]	@ (8001ef0 <HAL_MspInit+0x5c>)
 8001ea0:	f043 0301 	orr.w	r3, r3, #1
 8001ea4:	6193      	str	r3, [r2, #24]
 8001ea6:	4b12      	ldr	r3, [pc, #72]	@ (8001ef0 <HAL_MspInit+0x5c>)
 8001ea8:	699b      	ldr	r3, [r3, #24]
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	60bb      	str	r3, [r7, #8]
 8001eb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eb2:	4b0f      	ldr	r3, [pc, #60]	@ (8001ef0 <HAL_MspInit+0x5c>)
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	4a0e      	ldr	r2, [pc, #56]	@ (8001ef0 <HAL_MspInit+0x5c>)
 8001eb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ebc:	61d3      	str	r3, [r2, #28]
 8001ebe:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef0 <HAL_MspInit+0x5c>)
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ec6:	607b      	str	r3, [r7, #4]
 8001ec8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001eca:	4b0a      	ldr	r3, [pc, #40]	@ (8001ef4 <HAL_MspInit+0x60>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001ed6:	60fb      	str	r3, [r7, #12]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001ede:	60fb      	str	r3, [r7, #12]
 8001ee0:	4a04      	ldr	r2, [pc, #16]	@ (8001ef4 <HAL_MspInit+0x60>)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ee6:	bf00      	nop
 8001ee8:	3714      	adds	r7, #20
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bc80      	pop	{r7}
 8001eee:	4770      	bx	lr
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	40010000 	.word	0x40010000

08001ef8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001efc:	bf00      	nop
 8001efe:	e7fd      	b.n	8001efc <NMI_Handler+0x4>

08001f00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f04:	bf00      	nop
 8001f06:	e7fd      	b.n	8001f04 <HardFault_Handler+0x4>

08001f08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f0c:	bf00      	nop
 8001f0e:	e7fd      	b.n	8001f0c <MemManage_Handler+0x4>

08001f10 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f14:	bf00      	nop
 8001f16:	e7fd      	b.n	8001f14 <BusFault_Handler+0x4>

08001f18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f1c:	bf00      	nop
 8001f1e:	e7fd      	b.n	8001f1c <UsageFault_Handler+0x4>

08001f20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f24:	bf00      	nop
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bc80      	pop	{r7}
 8001f2a:	4770      	bx	lr

08001f2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f30:	bf00      	nop
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bc80      	pop	{r7}
 8001f36:	4770      	bx	lr

08001f38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f3c:	bf00      	nop
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bc80      	pop	{r7}
 8001f42:	4770      	bx	lr

08001f44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f48:	f000 faa4 	bl	8002494 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f4c:	bf00      	nop
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001f54:	4802      	ldr	r0, [pc, #8]	@ (8001f60 <DMA1_Channel5_IRQHandler+0x10>)
 8001f56:	f000 fd35 	bl	80029c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	20000934 	.word	0x20000934

08001f64 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001f68:	4802      	ldr	r0, [pc, #8]	@ (8001f74 <DMA1_Channel6_IRQHandler+0x10>)
 8001f6a:	f000 fd2b 	bl	80029c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20000978 	.word	0x20000978

08001f78 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001f7c:	4802      	ldr	r0, [pc, #8]	@ (8001f88 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001f7e:	f001 f8f5 	bl	800316c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	20000e88 	.word	0x20000e88

08001f8c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f90:	4802      	ldr	r0, [pc, #8]	@ (8001f9c <USART1_IRQHandler+0x10>)
 8001f92:	f003 fadf 	bl	8005554 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001f96:	bf00      	nop
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	200008a4 	.word	0x200008a4

08001fa0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001fa4:	4802      	ldr	r0, [pc, #8]	@ (8001fb0 <USART2_IRQHandler+0x10>)
 8001fa6:	f003 fad5 	bl	8005554 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	200008ec 	.word	0x200008ec

08001fb4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  return 1;
 8001fb8:	2301      	movs	r3, #1
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bc80      	pop	{r7}
 8001fc0:	4770      	bx	lr

08001fc2 <_kill>:

int _kill(int pid, int sig)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b082      	sub	sp, #8
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
 8001fca:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001fcc:	f009 fbb6 	bl	800b73c <__errno>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2216      	movs	r2, #22
 8001fd4:	601a      	str	r2, [r3, #0]
  return -1;
 8001fd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <_exit>:

void _exit (int status)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b082      	sub	sp, #8
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001fea:	f04f 31ff 	mov.w	r1, #4294967295
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f7ff ffe7 	bl	8001fc2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ff4:	bf00      	nop
 8001ff6:	e7fd      	b.n	8001ff4 <_exit+0x12>

08001ff8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002004:	2300      	movs	r3, #0
 8002006:	617b      	str	r3, [r7, #20]
 8002008:	e00a      	b.n	8002020 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800200a:	f3af 8000 	nop.w
 800200e:	4601      	mov	r1, r0
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	1c5a      	adds	r2, r3, #1
 8002014:	60ba      	str	r2, [r7, #8]
 8002016:	b2ca      	uxtb	r2, r1
 8002018:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	3301      	adds	r3, #1
 800201e:	617b      	str	r3, [r7, #20]
 8002020:	697a      	ldr	r2, [r7, #20]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	429a      	cmp	r2, r3
 8002026:	dbf0      	blt.n	800200a <_read+0x12>
  }

  return len;
 8002028:	687b      	ldr	r3, [r7, #4]
}
 800202a:	4618      	mov	r0, r3
 800202c:	3718      	adds	r7, #24
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b086      	sub	sp, #24
 8002036:	af00      	add	r7, sp, #0
 8002038:	60f8      	str	r0, [r7, #12]
 800203a:	60b9      	str	r1, [r7, #8]
 800203c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800203e:	2300      	movs	r3, #0
 8002040:	617b      	str	r3, [r7, #20]
 8002042:	e009      	b.n	8002058 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	1c5a      	adds	r2, r3, #1
 8002048:	60ba      	str	r2, [r7, #8]
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	4618      	mov	r0, r3
 800204e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	3301      	adds	r3, #1
 8002056:	617b      	str	r3, [r7, #20]
 8002058:	697a      	ldr	r2, [r7, #20]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	429a      	cmp	r2, r3
 800205e:	dbf1      	blt.n	8002044 <_write+0x12>
  }
  return len;
 8002060:	687b      	ldr	r3, [r7, #4]
}
 8002062:	4618      	mov	r0, r3
 8002064:	3718      	adds	r7, #24
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <_close>:

int _close(int file)
{
 800206a:	b480      	push	{r7}
 800206c:	b083      	sub	sp, #12
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002072:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002076:	4618      	mov	r0, r3
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	bc80      	pop	{r7}
 800207e:	4770      	bx	lr

08002080 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002090:	605a      	str	r2, [r3, #4]
  return 0;
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	bc80      	pop	{r7}
 800209c:	4770      	bx	lr

0800209e <_isatty>:

int _isatty(int file)
{
 800209e:	b480      	push	{r7}
 80020a0:	b083      	sub	sp, #12
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020a6:	2301      	movs	r3, #1
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bc80      	pop	{r7}
 80020b0:	4770      	bx	lr

080020b2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020b2:	b480      	push	{r7}
 80020b4:	b085      	sub	sp, #20
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	60f8      	str	r0, [r7, #12]
 80020ba:	60b9      	str	r1, [r7, #8]
 80020bc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020be:	2300      	movs	r3, #0
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3714      	adds	r7, #20
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bc80      	pop	{r7}
 80020c8:	4770      	bx	lr
	...

080020cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020d4:	4a14      	ldr	r2, [pc, #80]	@ (8002128 <_sbrk+0x5c>)
 80020d6:	4b15      	ldr	r3, [pc, #84]	@ (800212c <_sbrk+0x60>)
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020e0:	4b13      	ldr	r3, [pc, #76]	@ (8002130 <_sbrk+0x64>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d102      	bne.n	80020ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020e8:	4b11      	ldr	r3, [pc, #68]	@ (8002130 <_sbrk+0x64>)
 80020ea:	4a12      	ldr	r2, [pc, #72]	@ (8002134 <_sbrk+0x68>)
 80020ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020ee:	4b10      	ldr	r3, [pc, #64]	@ (8002130 <_sbrk+0x64>)
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4413      	add	r3, r2
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d207      	bcs.n	800210c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020fc:	f009 fb1e 	bl	800b73c <__errno>
 8002100:	4603      	mov	r3, r0
 8002102:	220c      	movs	r2, #12
 8002104:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002106:	f04f 33ff 	mov.w	r3, #4294967295
 800210a:	e009      	b.n	8002120 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800210c:	4b08      	ldr	r3, [pc, #32]	@ (8002130 <_sbrk+0x64>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002112:	4b07      	ldr	r3, [pc, #28]	@ (8002130 <_sbrk+0x64>)
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4413      	add	r3, r2
 800211a:	4a05      	ldr	r2, [pc, #20]	@ (8002130 <_sbrk+0x64>)
 800211c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800211e:	68fb      	ldr	r3, [r7, #12]
}
 8002120:	4618      	mov	r0, r3
 8002122:	3718      	adds	r7, #24
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	20005000 	.word	0x20005000
 800212c:	00000400 	.word	0x00000400
 8002130:	200008a0 	.word	0x200008a0
 8002134:	200012c0 	.word	0x200012c0

08002138 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800213c:	bf00      	nop
 800213e:	46bd      	mov	sp, r7
 8002140:	bc80      	pop	{r7}
 8002142:	4770      	bx	lr

08002144 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002148:	4b11      	ldr	r3, [pc, #68]	@ (8002190 <MX_USART1_UART_Init+0x4c>)
 800214a:	4a12      	ldr	r2, [pc, #72]	@ (8002194 <MX_USART1_UART_Init+0x50>)
 800214c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800214e:	4b10      	ldr	r3, [pc, #64]	@ (8002190 <MX_USART1_UART_Init+0x4c>)
 8002150:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002154:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002156:	4b0e      	ldr	r3, [pc, #56]	@ (8002190 <MX_USART1_UART_Init+0x4c>)
 8002158:	2200      	movs	r2, #0
 800215a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800215c:	4b0c      	ldr	r3, [pc, #48]	@ (8002190 <MX_USART1_UART_Init+0x4c>)
 800215e:	2200      	movs	r2, #0
 8002160:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002162:	4b0b      	ldr	r3, [pc, #44]	@ (8002190 <MX_USART1_UART_Init+0x4c>)
 8002164:	2200      	movs	r2, #0
 8002166:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002168:	4b09      	ldr	r3, [pc, #36]	@ (8002190 <MX_USART1_UART_Init+0x4c>)
 800216a:	220c      	movs	r2, #12
 800216c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800216e:	4b08      	ldr	r3, [pc, #32]	@ (8002190 <MX_USART1_UART_Init+0x4c>)
 8002170:	2200      	movs	r2, #0
 8002172:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002174:	4b06      	ldr	r3, [pc, #24]	@ (8002190 <MX_USART1_UART_Init+0x4c>)
 8002176:	2200      	movs	r2, #0
 8002178:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800217a:	4805      	ldr	r0, [pc, #20]	@ (8002190 <MX_USART1_UART_Init+0x4c>)
 800217c:	f003 f8ea 	bl	8005354 <HAL_UART_Init>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002186:	f7ff fe7f 	bl	8001e88 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800218a:	bf00      	nop
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	200008a4 	.word	0x200008a4
 8002194:	40013800 	.word	0x40013800

08002198 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800219c:	4b11      	ldr	r3, [pc, #68]	@ (80021e4 <MX_USART2_UART_Init+0x4c>)
 800219e:	4a12      	ldr	r2, [pc, #72]	@ (80021e8 <MX_USART2_UART_Init+0x50>)
 80021a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80021a2:	4b10      	ldr	r3, [pc, #64]	@ (80021e4 <MX_USART2_UART_Init+0x4c>)
 80021a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80021a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021aa:	4b0e      	ldr	r3, [pc, #56]	@ (80021e4 <MX_USART2_UART_Init+0x4c>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021b0:	4b0c      	ldr	r3, [pc, #48]	@ (80021e4 <MX_USART2_UART_Init+0x4c>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021b6:	4b0b      	ldr	r3, [pc, #44]	@ (80021e4 <MX_USART2_UART_Init+0x4c>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021bc:	4b09      	ldr	r3, [pc, #36]	@ (80021e4 <MX_USART2_UART_Init+0x4c>)
 80021be:	220c      	movs	r2, #12
 80021c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021c2:	4b08      	ldr	r3, [pc, #32]	@ (80021e4 <MX_USART2_UART_Init+0x4c>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021c8:	4b06      	ldr	r3, [pc, #24]	@ (80021e4 <MX_USART2_UART_Init+0x4c>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80021ce:	4805      	ldr	r0, [pc, #20]	@ (80021e4 <MX_USART2_UART_Init+0x4c>)
 80021d0:	f003 f8c0 	bl	8005354 <HAL_UART_Init>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80021da:	f7ff fe55 	bl	8001e88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80021de:	bf00      	nop
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	200008ec 	.word	0x200008ec
 80021e8:	40004400 	.word	0x40004400

080021ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b08a      	sub	sp, #40	@ 0x28
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f4:	f107 0318 	add.w	r3, r7, #24
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	605a      	str	r2, [r3, #4]
 80021fe:	609a      	str	r2, [r3, #8]
 8002200:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a65      	ldr	r2, [pc, #404]	@ (800239c <HAL_UART_MspInit+0x1b0>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d160      	bne.n	80022ce <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800220c:	4b64      	ldr	r3, [pc, #400]	@ (80023a0 <HAL_UART_MspInit+0x1b4>)
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	4a63      	ldr	r2, [pc, #396]	@ (80023a0 <HAL_UART_MspInit+0x1b4>)
 8002212:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002216:	6193      	str	r3, [r2, #24]
 8002218:	4b61      	ldr	r3, [pc, #388]	@ (80023a0 <HAL_UART_MspInit+0x1b4>)
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002220:	617b      	str	r3, [r7, #20]
 8002222:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002224:	4b5e      	ldr	r3, [pc, #376]	@ (80023a0 <HAL_UART_MspInit+0x1b4>)
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	4a5d      	ldr	r2, [pc, #372]	@ (80023a0 <HAL_UART_MspInit+0x1b4>)
 800222a:	f043 0304 	orr.w	r3, r3, #4
 800222e:	6193      	str	r3, [r2, #24]
 8002230:	4b5b      	ldr	r3, [pc, #364]	@ (80023a0 <HAL_UART_MspInit+0x1b4>)
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	f003 0304 	and.w	r3, r3, #4
 8002238:	613b      	str	r3, [r7, #16]
 800223a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = UART_CLI_TX_Pin;
 800223c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002240:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002242:	2302      	movs	r3, #2
 8002244:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002246:	2303      	movs	r3, #3
 8002248:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(UART_CLI_TX_GPIO_Port, &GPIO_InitStruct);
 800224a:	f107 0318 	add.w	r3, r7, #24
 800224e:	4619      	mov	r1, r3
 8002250:	4854      	ldr	r0, [pc, #336]	@ (80023a4 <HAL_UART_MspInit+0x1b8>)
 8002252:	f000 fceb 	bl	8002c2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = UART_CLI_RX_Pin;
 8002256:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800225a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800225c:	2300      	movs	r3, #0
 800225e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002260:	2300      	movs	r3, #0
 8002262:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(UART_CLI_RX_GPIO_Port, &GPIO_InitStruct);
 8002264:	f107 0318 	add.w	r3, r7, #24
 8002268:	4619      	mov	r1, r3
 800226a:	484e      	ldr	r0, [pc, #312]	@ (80023a4 <HAL_UART_MspInit+0x1b8>)
 800226c:	f000 fcde 	bl	8002c2c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002270:	4b4d      	ldr	r3, [pc, #308]	@ (80023a8 <HAL_UART_MspInit+0x1bc>)
 8002272:	4a4e      	ldr	r2, [pc, #312]	@ (80023ac <HAL_UART_MspInit+0x1c0>)
 8002274:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002276:	4b4c      	ldr	r3, [pc, #304]	@ (80023a8 <HAL_UART_MspInit+0x1bc>)
 8002278:	2200      	movs	r2, #0
 800227a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800227c:	4b4a      	ldr	r3, [pc, #296]	@ (80023a8 <HAL_UART_MspInit+0x1bc>)
 800227e:	2200      	movs	r2, #0
 8002280:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002282:	4b49      	ldr	r3, [pc, #292]	@ (80023a8 <HAL_UART_MspInit+0x1bc>)
 8002284:	2280      	movs	r2, #128	@ 0x80
 8002286:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002288:	4b47      	ldr	r3, [pc, #284]	@ (80023a8 <HAL_UART_MspInit+0x1bc>)
 800228a:	2200      	movs	r2, #0
 800228c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800228e:	4b46      	ldr	r3, [pc, #280]	@ (80023a8 <HAL_UART_MspInit+0x1bc>)
 8002290:	2200      	movs	r2, #0
 8002292:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002294:	4b44      	ldr	r3, [pc, #272]	@ (80023a8 <HAL_UART_MspInit+0x1bc>)
 8002296:	2220      	movs	r2, #32
 8002298:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800229a:	4b43      	ldr	r3, [pc, #268]	@ (80023a8 <HAL_UART_MspInit+0x1bc>)
 800229c:	2200      	movs	r2, #0
 800229e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80022a0:	4841      	ldr	r0, [pc, #260]	@ (80023a8 <HAL_UART_MspInit+0x1bc>)
 80022a2:	f000 fa21 	bl	80026e8 <HAL_DMA_Init>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80022ac:	f7ff fdec 	bl	8001e88 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4a3d      	ldr	r2, [pc, #244]	@ (80023a8 <HAL_UART_MspInit+0x1bc>)
 80022b4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80022b6:	4a3c      	ldr	r2, [pc, #240]	@ (80023a8 <HAL_UART_MspInit+0x1bc>)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80022bc:	2200      	movs	r2, #0
 80022be:	2100      	movs	r1, #0
 80022c0:	2025      	movs	r0, #37	@ 0x25
 80022c2:	f000 f9da 	bl	800267a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80022c6:	2025      	movs	r0, #37	@ 0x25
 80022c8:	f000 f9f3 	bl	80026b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80022cc:	e062      	b.n	8002394 <HAL_UART_MspInit+0x1a8>
  else if(uartHandle->Instance==USART2)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a37      	ldr	r2, [pc, #220]	@ (80023b0 <HAL_UART_MspInit+0x1c4>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d15d      	bne.n	8002394 <HAL_UART_MspInit+0x1a8>
    __HAL_RCC_USART2_CLK_ENABLE();
 80022d8:	4b31      	ldr	r3, [pc, #196]	@ (80023a0 <HAL_UART_MspInit+0x1b4>)
 80022da:	69db      	ldr	r3, [r3, #28]
 80022dc:	4a30      	ldr	r2, [pc, #192]	@ (80023a0 <HAL_UART_MspInit+0x1b4>)
 80022de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022e2:	61d3      	str	r3, [r2, #28]
 80022e4:	4b2e      	ldr	r3, [pc, #184]	@ (80023a0 <HAL_UART_MspInit+0x1b4>)
 80022e6:	69db      	ldr	r3, [r3, #28]
 80022e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ec:	60fb      	str	r3, [r7, #12]
 80022ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022f0:	4b2b      	ldr	r3, [pc, #172]	@ (80023a0 <HAL_UART_MspInit+0x1b4>)
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	4a2a      	ldr	r2, [pc, #168]	@ (80023a0 <HAL_UART_MspInit+0x1b4>)
 80022f6:	f043 0304 	orr.w	r3, r3, #4
 80022fa:	6193      	str	r3, [r2, #24]
 80022fc:	4b28      	ldr	r3, [pc, #160]	@ (80023a0 <HAL_UART_MspInit+0x1b4>)
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	f003 0304 	and.w	r3, r3, #4
 8002304:	60bb      	str	r3, [r7, #8]
 8002306:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = UART_BT_TX_Pin;
 8002308:	2304      	movs	r3, #4
 800230a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230c:	2302      	movs	r3, #2
 800230e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002310:	2303      	movs	r3, #3
 8002312:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(UART_BT_TX_GPIO_Port, &GPIO_InitStruct);
 8002314:	f107 0318 	add.w	r3, r7, #24
 8002318:	4619      	mov	r1, r3
 800231a:	4822      	ldr	r0, [pc, #136]	@ (80023a4 <HAL_UART_MspInit+0x1b8>)
 800231c:	f000 fc86 	bl	8002c2c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART_BT_RX_Pin;
 8002320:	2308      	movs	r3, #8
 8002322:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002324:	2300      	movs	r3, #0
 8002326:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002328:	2300      	movs	r3, #0
 800232a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(UART_BT_RX_GPIO_Port, &GPIO_InitStruct);
 800232c:	f107 0318 	add.w	r3, r7, #24
 8002330:	4619      	mov	r1, r3
 8002332:	481c      	ldr	r0, [pc, #112]	@ (80023a4 <HAL_UART_MspInit+0x1b8>)
 8002334:	f000 fc7a 	bl	8002c2c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002338:	4b1e      	ldr	r3, [pc, #120]	@ (80023b4 <HAL_UART_MspInit+0x1c8>)
 800233a:	4a1f      	ldr	r2, [pc, #124]	@ (80023b8 <HAL_UART_MspInit+0x1cc>)
 800233c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800233e:	4b1d      	ldr	r3, [pc, #116]	@ (80023b4 <HAL_UART_MspInit+0x1c8>)
 8002340:	2200      	movs	r2, #0
 8002342:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002344:	4b1b      	ldr	r3, [pc, #108]	@ (80023b4 <HAL_UART_MspInit+0x1c8>)
 8002346:	2200      	movs	r2, #0
 8002348:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800234a:	4b1a      	ldr	r3, [pc, #104]	@ (80023b4 <HAL_UART_MspInit+0x1c8>)
 800234c:	2280      	movs	r2, #128	@ 0x80
 800234e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002350:	4b18      	ldr	r3, [pc, #96]	@ (80023b4 <HAL_UART_MspInit+0x1c8>)
 8002352:	2200      	movs	r2, #0
 8002354:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002356:	4b17      	ldr	r3, [pc, #92]	@ (80023b4 <HAL_UART_MspInit+0x1c8>)
 8002358:	2200      	movs	r2, #0
 800235a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800235c:	4b15      	ldr	r3, [pc, #84]	@ (80023b4 <HAL_UART_MspInit+0x1c8>)
 800235e:	2220      	movs	r2, #32
 8002360:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002362:	4b14      	ldr	r3, [pc, #80]	@ (80023b4 <HAL_UART_MspInit+0x1c8>)
 8002364:	2200      	movs	r2, #0
 8002366:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002368:	4812      	ldr	r0, [pc, #72]	@ (80023b4 <HAL_UART_MspInit+0x1c8>)
 800236a:	f000 f9bd 	bl	80026e8 <HAL_DMA_Init>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <HAL_UART_MspInit+0x18c>
      Error_Handler();
 8002374:	f7ff fd88 	bl	8001e88 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4a0e      	ldr	r2, [pc, #56]	@ (80023b4 <HAL_UART_MspInit+0x1c8>)
 800237c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800237e:	4a0d      	ldr	r2, [pc, #52]	@ (80023b4 <HAL_UART_MspInit+0x1c8>)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002384:	2200      	movs	r2, #0
 8002386:	2100      	movs	r1, #0
 8002388:	2026      	movs	r0, #38	@ 0x26
 800238a:	f000 f976 	bl	800267a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800238e:	2026      	movs	r0, #38	@ 0x26
 8002390:	f000 f98f 	bl	80026b2 <HAL_NVIC_EnableIRQ>
}
 8002394:	bf00      	nop
 8002396:	3728      	adds	r7, #40	@ 0x28
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	40013800 	.word	0x40013800
 80023a0:	40021000 	.word	0x40021000
 80023a4:	40010800 	.word	0x40010800
 80023a8:	20000934 	.word	0x20000934
 80023ac:	40020058 	.word	0x40020058
 80023b0:	40004400 	.word	0x40004400
 80023b4:	20000978 	.word	0x20000978
 80023b8:	4002006c 	.word	0x4002006c

080023bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80023bc:	f7ff febc 	bl	8002138 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023c0:	480b      	ldr	r0, [pc, #44]	@ (80023f0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80023c2:	490c      	ldr	r1, [pc, #48]	@ (80023f4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80023c4:	4a0c      	ldr	r2, [pc, #48]	@ (80023f8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80023c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023c8:	e002      	b.n	80023d0 <LoopCopyDataInit>

080023ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023ce:	3304      	adds	r3, #4

080023d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023d4:	d3f9      	bcc.n	80023ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023d6:	4a09      	ldr	r2, [pc, #36]	@ (80023fc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80023d8:	4c09      	ldr	r4, [pc, #36]	@ (8002400 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023dc:	e001      	b.n	80023e2 <LoopFillZerobss>

080023de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023e0:	3204      	adds	r2, #4

080023e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023e4:	d3fb      	bcc.n	80023de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023e6:	f009 f9af 	bl	800b748 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80023ea:	f7ff fcd9 	bl	8001da0 <main>
  bx lr
 80023ee:	4770      	bx	lr
  ldr r0, =_sdata
 80023f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023f4:	20000330 	.word	0x20000330
  ldr r2, =_sidata
 80023f8:	0800dd50 	.word	0x0800dd50
  ldr r2, =_sbss
 80023fc:	20000330 	.word	0x20000330
  ldr r4, =_ebss
 8002400:	200012c0 	.word	0x200012c0

08002404 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002404:	e7fe      	b.n	8002404 <ADC1_2_IRQHandler>
	...

08002408 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800240c:	4b08      	ldr	r3, [pc, #32]	@ (8002430 <HAL_Init+0x28>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a07      	ldr	r2, [pc, #28]	@ (8002430 <HAL_Init+0x28>)
 8002412:	f043 0310 	orr.w	r3, r3, #16
 8002416:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002418:	2003      	movs	r0, #3
 800241a:	f000 f923 	bl	8002664 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800241e:	200f      	movs	r0, #15
 8002420:	f000 f808 	bl	8002434 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002424:	f7ff fd36 	bl	8001e94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	40022000 	.word	0x40022000

08002434 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800243c:	4b12      	ldr	r3, [pc, #72]	@ (8002488 <HAL_InitTick+0x54>)
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	4b12      	ldr	r3, [pc, #72]	@ (800248c <HAL_InitTick+0x58>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	4619      	mov	r1, r3
 8002446:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800244a:	fbb3 f3f1 	udiv	r3, r3, r1
 800244e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002452:	4618      	mov	r0, r3
 8002454:	f000 f93b 	bl	80026ce <HAL_SYSTICK_Config>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e00e      	b.n	8002480 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2b0f      	cmp	r3, #15
 8002466:	d80a      	bhi.n	800247e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002468:	2200      	movs	r2, #0
 800246a:	6879      	ldr	r1, [r7, #4]
 800246c:	f04f 30ff 	mov.w	r0, #4294967295
 8002470:	f000 f903 	bl	800267a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002474:	4a06      	ldr	r2, [pc, #24]	@ (8002490 <HAL_InitTick+0x5c>)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800247a:	2300      	movs	r3, #0
 800247c:	e000      	b.n	8002480 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
}
 8002480:	4618      	mov	r0, r3
 8002482:	3708      	adds	r7, #8
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	20000004 	.word	0x20000004
 800248c:	2000000c 	.word	0x2000000c
 8002490:	20000008 	.word	0x20000008

08002494 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002498:	4b05      	ldr	r3, [pc, #20]	@ (80024b0 <HAL_IncTick+0x1c>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	461a      	mov	r2, r3
 800249e:	4b05      	ldr	r3, [pc, #20]	@ (80024b4 <HAL_IncTick+0x20>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4413      	add	r3, r2
 80024a4:	4a03      	ldr	r2, [pc, #12]	@ (80024b4 <HAL_IncTick+0x20>)
 80024a6:	6013      	str	r3, [r2, #0]
}
 80024a8:	bf00      	nop
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bc80      	pop	{r7}
 80024ae:	4770      	bx	lr
 80024b0:	2000000c 	.word	0x2000000c
 80024b4:	200009bc 	.word	0x200009bc

080024b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  return uwTick;
 80024bc:	4b02      	ldr	r3, [pc, #8]	@ (80024c8 <HAL_GetTick+0x10>)
 80024be:	681b      	ldr	r3, [r3, #0]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bc80      	pop	{r7}
 80024c6:	4770      	bx	lr
 80024c8:	200009bc 	.word	0x200009bc

080024cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f003 0307 	and.w	r3, r3, #7
 80024da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002510 <__NVIC_SetPriorityGrouping+0x44>)
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024e2:	68ba      	ldr	r2, [r7, #8]
 80024e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024e8:	4013      	ands	r3, r2
 80024ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80024f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024fe:	4a04      	ldr	r2, [pc, #16]	@ (8002510 <__NVIC_SetPriorityGrouping+0x44>)
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	60d3      	str	r3, [r2, #12]
}
 8002504:	bf00      	nop
 8002506:	3714      	adds	r7, #20
 8002508:	46bd      	mov	sp, r7
 800250a:	bc80      	pop	{r7}
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	e000ed00 	.word	0xe000ed00

08002514 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002518:	4b04      	ldr	r3, [pc, #16]	@ (800252c <__NVIC_GetPriorityGrouping+0x18>)
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	0a1b      	lsrs	r3, r3, #8
 800251e:	f003 0307 	and.w	r3, r3, #7
}
 8002522:	4618      	mov	r0, r3
 8002524:	46bd      	mov	sp, r7
 8002526:	bc80      	pop	{r7}
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	e000ed00 	.word	0xe000ed00

08002530 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	4603      	mov	r3, r0
 8002538:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800253a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253e:	2b00      	cmp	r3, #0
 8002540:	db0b      	blt.n	800255a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002542:	79fb      	ldrb	r3, [r7, #7]
 8002544:	f003 021f 	and.w	r2, r3, #31
 8002548:	4906      	ldr	r1, [pc, #24]	@ (8002564 <__NVIC_EnableIRQ+0x34>)
 800254a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254e:	095b      	lsrs	r3, r3, #5
 8002550:	2001      	movs	r0, #1
 8002552:	fa00 f202 	lsl.w	r2, r0, r2
 8002556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800255a:	bf00      	nop
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	bc80      	pop	{r7}
 8002562:	4770      	bx	lr
 8002564:	e000e100 	.word	0xe000e100

08002568 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	4603      	mov	r3, r0
 8002570:	6039      	str	r1, [r7, #0]
 8002572:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002574:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002578:	2b00      	cmp	r3, #0
 800257a:	db0a      	blt.n	8002592 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	b2da      	uxtb	r2, r3
 8002580:	490c      	ldr	r1, [pc, #48]	@ (80025b4 <__NVIC_SetPriority+0x4c>)
 8002582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002586:	0112      	lsls	r2, r2, #4
 8002588:	b2d2      	uxtb	r2, r2
 800258a:	440b      	add	r3, r1
 800258c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002590:	e00a      	b.n	80025a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	b2da      	uxtb	r2, r3
 8002596:	4908      	ldr	r1, [pc, #32]	@ (80025b8 <__NVIC_SetPriority+0x50>)
 8002598:	79fb      	ldrb	r3, [r7, #7]
 800259a:	f003 030f 	and.w	r3, r3, #15
 800259e:	3b04      	subs	r3, #4
 80025a0:	0112      	lsls	r2, r2, #4
 80025a2:	b2d2      	uxtb	r2, r2
 80025a4:	440b      	add	r3, r1
 80025a6:	761a      	strb	r2, [r3, #24]
}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bc80      	pop	{r7}
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	e000e100 	.word	0xe000e100
 80025b8:	e000ed00 	.word	0xe000ed00

080025bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025bc:	b480      	push	{r7}
 80025be:	b089      	sub	sp, #36	@ 0x24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f003 0307 	and.w	r3, r3, #7
 80025ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	f1c3 0307 	rsb	r3, r3, #7
 80025d6:	2b04      	cmp	r3, #4
 80025d8:	bf28      	it	cs
 80025da:	2304      	movcs	r3, #4
 80025dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	3304      	adds	r3, #4
 80025e2:	2b06      	cmp	r3, #6
 80025e4:	d902      	bls.n	80025ec <NVIC_EncodePriority+0x30>
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	3b03      	subs	r3, #3
 80025ea:	e000      	b.n	80025ee <NVIC_EncodePriority+0x32>
 80025ec:	2300      	movs	r3, #0
 80025ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025f0:	f04f 32ff 	mov.w	r2, #4294967295
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	43da      	mvns	r2, r3
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	401a      	ands	r2, r3
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002604:	f04f 31ff 	mov.w	r1, #4294967295
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	fa01 f303 	lsl.w	r3, r1, r3
 800260e:	43d9      	mvns	r1, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002614:	4313      	orrs	r3, r2
         );
}
 8002616:	4618      	mov	r0, r3
 8002618:	3724      	adds	r7, #36	@ 0x24
 800261a:	46bd      	mov	sp, r7
 800261c:	bc80      	pop	{r7}
 800261e:	4770      	bx	lr

08002620 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	3b01      	subs	r3, #1
 800262c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002630:	d301      	bcc.n	8002636 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002632:	2301      	movs	r3, #1
 8002634:	e00f      	b.n	8002656 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002636:	4a0a      	ldr	r2, [pc, #40]	@ (8002660 <SysTick_Config+0x40>)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	3b01      	subs	r3, #1
 800263c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800263e:	210f      	movs	r1, #15
 8002640:	f04f 30ff 	mov.w	r0, #4294967295
 8002644:	f7ff ff90 	bl	8002568 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002648:	4b05      	ldr	r3, [pc, #20]	@ (8002660 <SysTick_Config+0x40>)
 800264a:	2200      	movs	r2, #0
 800264c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800264e:	4b04      	ldr	r3, [pc, #16]	@ (8002660 <SysTick_Config+0x40>)
 8002650:	2207      	movs	r2, #7
 8002652:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	e000e010 	.word	0xe000e010

08002664 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f7ff ff2d 	bl	80024cc <__NVIC_SetPriorityGrouping>
}
 8002672:	bf00      	nop
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}

0800267a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800267a:	b580      	push	{r7, lr}
 800267c:	b086      	sub	sp, #24
 800267e:	af00      	add	r7, sp, #0
 8002680:	4603      	mov	r3, r0
 8002682:	60b9      	str	r1, [r7, #8]
 8002684:	607a      	str	r2, [r7, #4]
 8002686:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002688:	2300      	movs	r3, #0
 800268a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800268c:	f7ff ff42 	bl	8002514 <__NVIC_GetPriorityGrouping>
 8002690:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	68b9      	ldr	r1, [r7, #8]
 8002696:	6978      	ldr	r0, [r7, #20]
 8002698:	f7ff ff90 	bl	80025bc <NVIC_EncodePriority>
 800269c:	4602      	mov	r2, r0
 800269e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026a2:	4611      	mov	r1, r2
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7ff ff5f 	bl	8002568 <__NVIC_SetPriority>
}
 80026aa:	bf00      	nop
 80026ac:	3718      	adds	r7, #24
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b082      	sub	sp, #8
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	4603      	mov	r3, r0
 80026ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff ff35 	bl	8002530 <__NVIC_EnableIRQ>
}
 80026c6:	bf00      	nop
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b082      	sub	sp, #8
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f7ff ffa2 	bl	8002620 <SysTick_Config>
 80026dc:	4603      	mov	r3, r0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
	...

080026e8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80026f0:	2300      	movs	r3, #0
 80026f2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e043      	b.n	8002786 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	461a      	mov	r2, r3
 8002704:	4b22      	ldr	r3, [pc, #136]	@ (8002790 <HAL_DMA_Init+0xa8>)
 8002706:	4413      	add	r3, r2
 8002708:	4a22      	ldr	r2, [pc, #136]	@ (8002794 <HAL_DMA_Init+0xac>)
 800270a:	fba2 2303 	umull	r2, r3, r2, r3
 800270e:	091b      	lsrs	r3, r3, #4
 8002710:	009a      	lsls	r2, r3, #2
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a1f      	ldr	r2, [pc, #124]	@ (8002798 <HAL_DMA_Init+0xb0>)
 800271a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2202      	movs	r2, #2
 8002720:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002732:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002736:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002740:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800274c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002758:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	69db      	ldr	r3, [r3, #28]
 800275e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002760:	68fa      	ldr	r2, [r7, #12]
 8002762:	4313      	orrs	r3, r2
 8002764:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3714      	adds	r7, #20
 800278a:	46bd      	mov	sp, r7
 800278c:	bc80      	pop	{r7}
 800278e:	4770      	bx	lr
 8002790:	bffdfff8 	.word	0xbffdfff8
 8002794:	cccccccd 	.word	0xcccccccd
 8002798:	40020000 	.word	0x40020000

0800279c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b086      	sub	sp, #24
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
 80027a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027aa:	2300      	movs	r3, #0
 80027ac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d101      	bne.n	80027bc <HAL_DMA_Start_IT+0x20>
 80027b8:	2302      	movs	r3, #2
 80027ba:	e04b      	b.n	8002854 <HAL_DMA_Start_IT+0xb8>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d13a      	bne.n	8002846 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2202      	movs	r2, #2
 80027d4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2200      	movs	r2, #0
 80027dc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f022 0201 	bic.w	r2, r2, #1
 80027ec:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	68b9      	ldr	r1, [r7, #8]
 80027f4:	68f8      	ldr	r0, [r7, #12]
 80027f6:	f000 f9eb 	bl	8002bd0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d008      	beq.n	8002814 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f042 020e 	orr.w	r2, r2, #14
 8002810:	601a      	str	r2, [r3, #0]
 8002812:	e00f      	b.n	8002834 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f022 0204 	bic.w	r2, r2, #4
 8002822:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f042 020a 	orr.w	r2, r2, #10
 8002832:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f042 0201 	orr.w	r2, r2, #1
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	e005      	b.n	8002852 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800284e:	2302      	movs	r3, #2
 8002850:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002852:	7dfb      	ldrb	r3, [r7, #23]
}
 8002854:	4618      	mov	r0, r3
 8002856:	3718      	adds	r7, #24
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800285c:	b480      	push	{r7}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002864:	2300      	movs	r3, #0
 8002866:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800286e:	b2db      	uxtb	r3, r3
 8002870:	2b02      	cmp	r3, #2
 8002872:	d008      	beq.n	8002886 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2204      	movs	r2, #4
 8002878:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e020      	b.n	80028c8 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f022 020e 	bic.w	r2, r2, #14
 8002894:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f022 0201 	bic.w	r2, r2, #1
 80028a4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028ae:	2101      	movs	r1, #1
 80028b0:	fa01 f202 	lsl.w	r2, r1, r2
 80028b4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2201      	movs	r2, #1
 80028ba:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80028c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3714      	adds	r7, #20
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bc80      	pop	{r7}
 80028d0:	4770      	bx	lr
	...

080028d4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028dc:	2300      	movs	r3, #0
 80028de:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d005      	beq.n	80028f8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2204      	movs	r2, #4
 80028f0:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	73fb      	strb	r3, [r7, #15]
 80028f6:	e051      	b.n	800299c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f022 020e 	bic.w	r2, r2, #14
 8002906:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f022 0201 	bic.w	r2, r2, #1
 8002916:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a22      	ldr	r2, [pc, #136]	@ (80029a8 <HAL_DMA_Abort_IT+0xd4>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d029      	beq.n	8002976 <HAL_DMA_Abort_IT+0xa2>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a21      	ldr	r2, [pc, #132]	@ (80029ac <HAL_DMA_Abort_IT+0xd8>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d022      	beq.n	8002972 <HAL_DMA_Abort_IT+0x9e>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a1f      	ldr	r2, [pc, #124]	@ (80029b0 <HAL_DMA_Abort_IT+0xdc>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d01a      	beq.n	800296c <HAL_DMA_Abort_IT+0x98>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a1e      	ldr	r2, [pc, #120]	@ (80029b4 <HAL_DMA_Abort_IT+0xe0>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d012      	beq.n	8002966 <HAL_DMA_Abort_IT+0x92>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a1c      	ldr	r2, [pc, #112]	@ (80029b8 <HAL_DMA_Abort_IT+0xe4>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d00a      	beq.n	8002960 <HAL_DMA_Abort_IT+0x8c>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a1b      	ldr	r2, [pc, #108]	@ (80029bc <HAL_DMA_Abort_IT+0xe8>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d102      	bne.n	800295a <HAL_DMA_Abort_IT+0x86>
 8002954:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002958:	e00e      	b.n	8002978 <HAL_DMA_Abort_IT+0xa4>
 800295a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800295e:	e00b      	b.n	8002978 <HAL_DMA_Abort_IT+0xa4>
 8002960:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002964:	e008      	b.n	8002978 <HAL_DMA_Abort_IT+0xa4>
 8002966:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800296a:	e005      	b.n	8002978 <HAL_DMA_Abort_IT+0xa4>
 800296c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002970:	e002      	b.n	8002978 <HAL_DMA_Abort_IT+0xa4>
 8002972:	2310      	movs	r3, #16
 8002974:	e000      	b.n	8002978 <HAL_DMA_Abort_IT+0xa4>
 8002976:	2301      	movs	r3, #1
 8002978:	4a11      	ldr	r2, [pc, #68]	@ (80029c0 <HAL_DMA_Abort_IT+0xec>)
 800297a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002990:	2b00      	cmp	r3, #0
 8002992:	d003      	beq.n	800299c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	4798      	blx	r3
    } 
  }
  return status;
 800299c:	7bfb      	ldrb	r3, [r7, #15]
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	40020008 	.word	0x40020008
 80029ac:	4002001c 	.word	0x4002001c
 80029b0:	40020030 	.word	0x40020030
 80029b4:	40020044 	.word	0x40020044
 80029b8:	40020058 	.word	0x40020058
 80029bc:	4002006c 	.word	0x4002006c
 80029c0:	40020000 	.word	0x40020000

080029c4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e0:	2204      	movs	r2, #4
 80029e2:	409a      	lsls	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	4013      	ands	r3, r2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d04f      	beq.n	8002a8c <HAL_DMA_IRQHandler+0xc8>
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	f003 0304 	and.w	r3, r3, #4
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d04a      	beq.n	8002a8c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0320 	and.w	r3, r3, #32
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d107      	bne.n	8002a14 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f022 0204 	bic.w	r2, r2, #4
 8002a12:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a66      	ldr	r2, [pc, #408]	@ (8002bb4 <HAL_DMA_IRQHandler+0x1f0>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d029      	beq.n	8002a72 <HAL_DMA_IRQHandler+0xae>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a65      	ldr	r2, [pc, #404]	@ (8002bb8 <HAL_DMA_IRQHandler+0x1f4>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d022      	beq.n	8002a6e <HAL_DMA_IRQHandler+0xaa>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a63      	ldr	r2, [pc, #396]	@ (8002bbc <HAL_DMA_IRQHandler+0x1f8>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d01a      	beq.n	8002a68 <HAL_DMA_IRQHandler+0xa4>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a62      	ldr	r2, [pc, #392]	@ (8002bc0 <HAL_DMA_IRQHandler+0x1fc>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d012      	beq.n	8002a62 <HAL_DMA_IRQHandler+0x9e>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a60      	ldr	r2, [pc, #384]	@ (8002bc4 <HAL_DMA_IRQHandler+0x200>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d00a      	beq.n	8002a5c <HAL_DMA_IRQHandler+0x98>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a5f      	ldr	r2, [pc, #380]	@ (8002bc8 <HAL_DMA_IRQHandler+0x204>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d102      	bne.n	8002a56 <HAL_DMA_IRQHandler+0x92>
 8002a50:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002a54:	e00e      	b.n	8002a74 <HAL_DMA_IRQHandler+0xb0>
 8002a56:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002a5a:	e00b      	b.n	8002a74 <HAL_DMA_IRQHandler+0xb0>
 8002a5c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002a60:	e008      	b.n	8002a74 <HAL_DMA_IRQHandler+0xb0>
 8002a62:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002a66:	e005      	b.n	8002a74 <HAL_DMA_IRQHandler+0xb0>
 8002a68:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a6c:	e002      	b.n	8002a74 <HAL_DMA_IRQHandler+0xb0>
 8002a6e:	2340      	movs	r3, #64	@ 0x40
 8002a70:	e000      	b.n	8002a74 <HAL_DMA_IRQHandler+0xb0>
 8002a72:	2304      	movs	r3, #4
 8002a74:	4a55      	ldr	r2, [pc, #340]	@ (8002bcc <HAL_DMA_IRQHandler+0x208>)
 8002a76:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	f000 8094 	beq.w	8002baa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002a8a:	e08e      	b.n	8002baa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a90:	2202      	movs	r2, #2
 8002a92:	409a      	lsls	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	4013      	ands	r3, r2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d056      	beq.n	8002b4a <HAL_DMA_IRQHandler+0x186>
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d051      	beq.n	8002b4a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0320 	and.w	r3, r3, #32
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d10b      	bne.n	8002acc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f022 020a 	bic.w	r2, r2, #10
 8002ac2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a38      	ldr	r2, [pc, #224]	@ (8002bb4 <HAL_DMA_IRQHandler+0x1f0>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d029      	beq.n	8002b2a <HAL_DMA_IRQHandler+0x166>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a37      	ldr	r2, [pc, #220]	@ (8002bb8 <HAL_DMA_IRQHandler+0x1f4>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d022      	beq.n	8002b26 <HAL_DMA_IRQHandler+0x162>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a35      	ldr	r2, [pc, #212]	@ (8002bbc <HAL_DMA_IRQHandler+0x1f8>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d01a      	beq.n	8002b20 <HAL_DMA_IRQHandler+0x15c>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a34      	ldr	r2, [pc, #208]	@ (8002bc0 <HAL_DMA_IRQHandler+0x1fc>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d012      	beq.n	8002b1a <HAL_DMA_IRQHandler+0x156>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a32      	ldr	r2, [pc, #200]	@ (8002bc4 <HAL_DMA_IRQHandler+0x200>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d00a      	beq.n	8002b14 <HAL_DMA_IRQHandler+0x150>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a31      	ldr	r2, [pc, #196]	@ (8002bc8 <HAL_DMA_IRQHandler+0x204>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d102      	bne.n	8002b0e <HAL_DMA_IRQHandler+0x14a>
 8002b08:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002b0c:	e00e      	b.n	8002b2c <HAL_DMA_IRQHandler+0x168>
 8002b0e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b12:	e00b      	b.n	8002b2c <HAL_DMA_IRQHandler+0x168>
 8002b14:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b18:	e008      	b.n	8002b2c <HAL_DMA_IRQHandler+0x168>
 8002b1a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b1e:	e005      	b.n	8002b2c <HAL_DMA_IRQHandler+0x168>
 8002b20:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b24:	e002      	b.n	8002b2c <HAL_DMA_IRQHandler+0x168>
 8002b26:	2320      	movs	r3, #32
 8002b28:	e000      	b.n	8002b2c <HAL_DMA_IRQHandler+0x168>
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	4a27      	ldr	r2, [pc, #156]	@ (8002bcc <HAL_DMA_IRQHandler+0x208>)
 8002b2e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d034      	beq.n	8002baa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002b48:	e02f      	b.n	8002baa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4e:	2208      	movs	r2, #8
 8002b50:	409a      	lsls	r2, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	4013      	ands	r3, r2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d028      	beq.n	8002bac <HAL_DMA_IRQHandler+0x1e8>
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	f003 0308 	and.w	r3, r3, #8
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d023      	beq.n	8002bac <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f022 020e 	bic.w	r2, r2, #14
 8002b72:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b7c:	2101      	movs	r1, #1
 8002b7e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b82:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d004      	beq.n	8002bac <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	4798      	blx	r3
    }
  }
  return;
 8002baa:	bf00      	nop
 8002bac:	bf00      	nop
}
 8002bae:	3710      	adds	r7, #16
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	40020008 	.word	0x40020008
 8002bb8:	4002001c 	.word	0x4002001c
 8002bbc:	40020030 	.word	0x40020030
 8002bc0:	40020044 	.word	0x40020044
 8002bc4:	40020058 	.word	0x40020058
 8002bc8:	4002006c 	.word	0x4002006c
 8002bcc:	40020000 	.word	0x40020000

08002bd0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
 8002bdc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002be6:	2101      	movs	r1, #1
 8002be8:	fa01 f202 	lsl.w	r2, r1, r2
 8002bec:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	683a      	ldr	r2, [r7, #0]
 8002bf4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	2b10      	cmp	r3, #16
 8002bfc:	d108      	bne.n	8002c10 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68ba      	ldr	r2, [r7, #8]
 8002c0c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002c0e:	e007      	b.n	8002c20 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	68ba      	ldr	r2, [r7, #8]
 8002c16:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	60da      	str	r2, [r3, #12]
}
 8002c20:	bf00      	nop
 8002c22:	3714      	adds	r7, #20
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bc80      	pop	{r7}
 8002c28:	4770      	bx	lr
	...

08002c2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b08b      	sub	sp, #44	@ 0x2c
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c36:	2300      	movs	r3, #0
 8002c38:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c3e:	e169      	b.n	8002f14 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002c40:	2201      	movs	r2, #1
 8002c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	69fa      	ldr	r2, [r7, #28]
 8002c50:	4013      	ands	r3, r2
 8002c52:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	f040 8158 	bne.w	8002f0e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	4a9a      	ldr	r2, [pc, #616]	@ (8002ecc <HAL_GPIO_Init+0x2a0>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d05e      	beq.n	8002d26 <HAL_GPIO_Init+0xfa>
 8002c68:	4a98      	ldr	r2, [pc, #608]	@ (8002ecc <HAL_GPIO_Init+0x2a0>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d875      	bhi.n	8002d5a <HAL_GPIO_Init+0x12e>
 8002c6e:	4a98      	ldr	r2, [pc, #608]	@ (8002ed0 <HAL_GPIO_Init+0x2a4>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d058      	beq.n	8002d26 <HAL_GPIO_Init+0xfa>
 8002c74:	4a96      	ldr	r2, [pc, #600]	@ (8002ed0 <HAL_GPIO_Init+0x2a4>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d86f      	bhi.n	8002d5a <HAL_GPIO_Init+0x12e>
 8002c7a:	4a96      	ldr	r2, [pc, #600]	@ (8002ed4 <HAL_GPIO_Init+0x2a8>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d052      	beq.n	8002d26 <HAL_GPIO_Init+0xfa>
 8002c80:	4a94      	ldr	r2, [pc, #592]	@ (8002ed4 <HAL_GPIO_Init+0x2a8>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d869      	bhi.n	8002d5a <HAL_GPIO_Init+0x12e>
 8002c86:	4a94      	ldr	r2, [pc, #592]	@ (8002ed8 <HAL_GPIO_Init+0x2ac>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d04c      	beq.n	8002d26 <HAL_GPIO_Init+0xfa>
 8002c8c:	4a92      	ldr	r2, [pc, #584]	@ (8002ed8 <HAL_GPIO_Init+0x2ac>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d863      	bhi.n	8002d5a <HAL_GPIO_Init+0x12e>
 8002c92:	4a92      	ldr	r2, [pc, #584]	@ (8002edc <HAL_GPIO_Init+0x2b0>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d046      	beq.n	8002d26 <HAL_GPIO_Init+0xfa>
 8002c98:	4a90      	ldr	r2, [pc, #576]	@ (8002edc <HAL_GPIO_Init+0x2b0>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d85d      	bhi.n	8002d5a <HAL_GPIO_Init+0x12e>
 8002c9e:	2b12      	cmp	r3, #18
 8002ca0:	d82a      	bhi.n	8002cf8 <HAL_GPIO_Init+0xcc>
 8002ca2:	2b12      	cmp	r3, #18
 8002ca4:	d859      	bhi.n	8002d5a <HAL_GPIO_Init+0x12e>
 8002ca6:	a201      	add	r2, pc, #4	@ (adr r2, 8002cac <HAL_GPIO_Init+0x80>)
 8002ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cac:	08002d27 	.word	0x08002d27
 8002cb0:	08002d01 	.word	0x08002d01
 8002cb4:	08002d13 	.word	0x08002d13
 8002cb8:	08002d55 	.word	0x08002d55
 8002cbc:	08002d5b 	.word	0x08002d5b
 8002cc0:	08002d5b 	.word	0x08002d5b
 8002cc4:	08002d5b 	.word	0x08002d5b
 8002cc8:	08002d5b 	.word	0x08002d5b
 8002ccc:	08002d5b 	.word	0x08002d5b
 8002cd0:	08002d5b 	.word	0x08002d5b
 8002cd4:	08002d5b 	.word	0x08002d5b
 8002cd8:	08002d5b 	.word	0x08002d5b
 8002cdc:	08002d5b 	.word	0x08002d5b
 8002ce0:	08002d5b 	.word	0x08002d5b
 8002ce4:	08002d5b 	.word	0x08002d5b
 8002ce8:	08002d5b 	.word	0x08002d5b
 8002cec:	08002d5b 	.word	0x08002d5b
 8002cf0:	08002d09 	.word	0x08002d09
 8002cf4:	08002d1d 	.word	0x08002d1d
 8002cf8:	4a79      	ldr	r2, [pc, #484]	@ (8002ee0 <HAL_GPIO_Init+0x2b4>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d013      	beq.n	8002d26 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002cfe:	e02c      	b.n	8002d5a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	623b      	str	r3, [r7, #32]
          break;
 8002d06:	e029      	b.n	8002d5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	3304      	adds	r3, #4
 8002d0e:	623b      	str	r3, [r7, #32]
          break;
 8002d10:	e024      	b.n	8002d5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	3308      	adds	r3, #8
 8002d18:	623b      	str	r3, [r7, #32]
          break;
 8002d1a:	e01f      	b.n	8002d5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	330c      	adds	r3, #12
 8002d22:	623b      	str	r3, [r7, #32]
          break;
 8002d24:	e01a      	b.n	8002d5c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d102      	bne.n	8002d34 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002d2e:	2304      	movs	r3, #4
 8002d30:	623b      	str	r3, [r7, #32]
          break;
 8002d32:	e013      	b.n	8002d5c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d105      	bne.n	8002d48 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d3c:	2308      	movs	r3, #8
 8002d3e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	69fa      	ldr	r2, [r7, #28]
 8002d44:	611a      	str	r2, [r3, #16]
          break;
 8002d46:	e009      	b.n	8002d5c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d48:	2308      	movs	r3, #8
 8002d4a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	69fa      	ldr	r2, [r7, #28]
 8002d50:	615a      	str	r2, [r3, #20]
          break;
 8002d52:	e003      	b.n	8002d5c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002d54:	2300      	movs	r3, #0
 8002d56:	623b      	str	r3, [r7, #32]
          break;
 8002d58:	e000      	b.n	8002d5c <HAL_GPIO_Init+0x130>
          break;
 8002d5a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	2bff      	cmp	r3, #255	@ 0xff
 8002d60:	d801      	bhi.n	8002d66 <HAL_GPIO_Init+0x13a>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	e001      	b.n	8002d6a <HAL_GPIO_Init+0x13e>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	3304      	adds	r3, #4
 8002d6a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	2bff      	cmp	r3, #255	@ 0xff
 8002d70:	d802      	bhi.n	8002d78 <HAL_GPIO_Init+0x14c>
 8002d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	e002      	b.n	8002d7e <HAL_GPIO_Init+0x152>
 8002d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d7a:	3b08      	subs	r3, #8
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	210f      	movs	r1, #15
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	fa01 f303 	lsl.w	r3, r1, r3
 8002d8c:	43db      	mvns	r3, r3
 8002d8e:	401a      	ands	r2, r3
 8002d90:	6a39      	ldr	r1, [r7, #32]
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	fa01 f303 	lsl.w	r3, r1, r3
 8002d98:	431a      	orrs	r2, r3
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	f000 80b1 	beq.w	8002f0e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002dac:	4b4d      	ldr	r3, [pc, #308]	@ (8002ee4 <HAL_GPIO_Init+0x2b8>)
 8002dae:	699b      	ldr	r3, [r3, #24]
 8002db0:	4a4c      	ldr	r2, [pc, #304]	@ (8002ee4 <HAL_GPIO_Init+0x2b8>)
 8002db2:	f043 0301 	orr.w	r3, r3, #1
 8002db6:	6193      	str	r3, [r2, #24]
 8002db8:	4b4a      	ldr	r3, [pc, #296]	@ (8002ee4 <HAL_GPIO_Init+0x2b8>)
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	f003 0301 	and.w	r3, r3, #1
 8002dc0:	60bb      	str	r3, [r7, #8]
 8002dc2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002dc4:	4a48      	ldr	r2, [pc, #288]	@ (8002ee8 <HAL_GPIO_Init+0x2bc>)
 8002dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc8:	089b      	lsrs	r3, r3, #2
 8002dca:	3302      	adds	r3, #2
 8002dcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dd0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd4:	f003 0303 	and.w	r3, r3, #3
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	220f      	movs	r2, #15
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	43db      	mvns	r3, r3
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	4013      	ands	r3, r2
 8002de6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a40      	ldr	r2, [pc, #256]	@ (8002eec <HAL_GPIO_Init+0x2c0>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d013      	beq.n	8002e18 <HAL_GPIO_Init+0x1ec>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a3f      	ldr	r2, [pc, #252]	@ (8002ef0 <HAL_GPIO_Init+0x2c4>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d00d      	beq.n	8002e14 <HAL_GPIO_Init+0x1e8>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4a3e      	ldr	r2, [pc, #248]	@ (8002ef4 <HAL_GPIO_Init+0x2c8>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d007      	beq.n	8002e10 <HAL_GPIO_Init+0x1e4>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a3d      	ldr	r2, [pc, #244]	@ (8002ef8 <HAL_GPIO_Init+0x2cc>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d101      	bne.n	8002e0c <HAL_GPIO_Init+0x1e0>
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e006      	b.n	8002e1a <HAL_GPIO_Init+0x1ee>
 8002e0c:	2304      	movs	r3, #4
 8002e0e:	e004      	b.n	8002e1a <HAL_GPIO_Init+0x1ee>
 8002e10:	2302      	movs	r3, #2
 8002e12:	e002      	b.n	8002e1a <HAL_GPIO_Init+0x1ee>
 8002e14:	2301      	movs	r3, #1
 8002e16:	e000      	b.n	8002e1a <HAL_GPIO_Init+0x1ee>
 8002e18:	2300      	movs	r3, #0
 8002e1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e1c:	f002 0203 	and.w	r2, r2, #3
 8002e20:	0092      	lsls	r2, r2, #2
 8002e22:	4093      	lsls	r3, r2
 8002e24:	68fa      	ldr	r2, [r7, #12]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002e2a:	492f      	ldr	r1, [pc, #188]	@ (8002ee8 <HAL_GPIO_Init+0x2bc>)
 8002e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e2e:	089b      	lsrs	r3, r3, #2
 8002e30:	3302      	adds	r3, #2
 8002e32:	68fa      	ldr	r2, [r7, #12]
 8002e34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d006      	beq.n	8002e52 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e44:	4b2d      	ldr	r3, [pc, #180]	@ (8002efc <HAL_GPIO_Init+0x2d0>)
 8002e46:	689a      	ldr	r2, [r3, #8]
 8002e48:	492c      	ldr	r1, [pc, #176]	@ (8002efc <HAL_GPIO_Init+0x2d0>)
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	608b      	str	r3, [r1, #8]
 8002e50:	e006      	b.n	8002e60 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e52:	4b2a      	ldr	r3, [pc, #168]	@ (8002efc <HAL_GPIO_Init+0x2d0>)
 8002e54:	689a      	ldr	r2, [r3, #8]
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	43db      	mvns	r3, r3
 8002e5a:	4928      	ldr	r1, [pc, #160]	@ (8002efc <HAL_GPIO_Init+0x2d0>)
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d006      	beq.n	8002e7a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e6c:	4b23      	ldr	r3, [pc, #140]	@ (8002efc <HAL_GPIO_Init+0x2d0>)
 8002e6e:	68da      	ldr	r2, [r3, #12]
 8002e70:	4922      	ldr	r1, [pc, #136]	@ (8002efc <HAL_GPIO_Init+0x2d0>)
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	60cb      	str	r3, [r1, #12]
 8002e78:	e006      	b.n	8002e88 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002e7a:	4b20      	ldr	r3, [pc, #128]	@ (8002efc <HAL_GPIO_Init+0x2d0>)
 8002e7c:	68da      	ldr	r2, [r3, #12]
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	43db      	mvns	r3, r3
 8002e82:	491e      	ldr	r1, [pc, #120]	@ (8002efc <HAL_GPIO_Init+0x2d0>)
 8002e84:	4013      	ands	r3, r2
 8002e86:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d006      	beq.n	8002ea2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002e94:	4b19      	ldr	r3, [pc, #100]	@ (8002efc <HAL_GPIO_Init+0x2d0>)
 8002e96:	685a      	ldr	r2, [r3, #4]
 8002e98:	4918      	ldr	r1, [pc, #96]	@ (8002efc <HAL_GPIO_Init+0x2d0>)
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	604b      	str	r3, [r1, #4]
 8002ea0:	e006      	b.n	8002eb0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ea2:	4b16      	ldr	r3, [pc, #88]	@ (8002efc <HAL_GPIO_Init+0x2d0>)
 8002ea4:	685a      	ldr	r2, [r3, #4]
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	43db      	mvns	r3, r3
 8002eaa:	4914      	ldr	r1, [pc, #80]	@ (8002efc <HAL_GPIO_Init+0x2d0>)
 8002eac:	4013      	ands	r3, r2
 8002eae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d021      	beq.n	8002f00 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ebc:	4b0f      	ldr	r3, [pc, #60]	@ (8002efc <HAL_GPIO_Init+0x2d0>)
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	490e      	ldr	r1, [pc, #56]	@ (8002efc <HAL_GPIO_Init+0x2d0>)
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	600b      	str	r3, [r1, #0]
 8002ec8:	e021      	b.n	8002f0e <HAL_GPIO_Init+0x2e2>
 8002eca:	bf00      	nop
 8002ecc:	10320000 	.word	0x10320000
 8002ed0:	10310000 	.word	0x10310000
 8002ed4:	10220000 	.word	0x10220000
 8002ed8:	10210000 	.word	0x10210000
 8002edc:	10120000 	.word	0x10120000
 8002ee0:	10110000 	.word	0x10110000
 8002ee4:	40021000 	.word	0x40021000
 8002ee8:	40010000 	.word	0x40010000
 8002eec:	40010800 	.word	0x40010800
 8002ef0:	40010c00 	.word	0x40010c00
 8002ef4:	40011000 	.word	0x40011000
 8002ef8:	40011400 	.word	0x40011400
 8002efc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002f00:	4b0b      	ldr	r3, [pc, #44]	@ (8002f30 <HAL_GPIO_Init+0x304>)
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	43db      	mvns	r3, r3
 8002f08:	4909      	ldr	r1, [pc, #36]	@ (8002f30 <HAL_GPIO_Init+0x304>)
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f10:	3301      	adds	r3, #1
 8002f12:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f1a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f47f ae8e 	bne.w	8002c40 <HAL_GPIO_Init+0x14>
  }
}
 8002f24:	bf00      	nop
 8002f26:	bf00      	nop
 8002f28:	372c      	adds	r7, #44	@ 0x2c
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bc80      	pop	{r7}
 8002f2e:	4770      	bx	lr
 8002f30:	40010400 	.word	0x40010400

08002f34 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d101      	bne.n	8002f46 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e0e8      	b.n	8003118 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d106      	bne.n	8002f60 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f007 f8d6 	bl	800a10c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2203      	movs	r2, #3
 8002f64:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f003 fa13 	bl	800639e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6818      	ldr	r0, [r3, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	3304      	adds	r3, #4
 8002f80:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f82:	f003 f9e9 	bl	8006358 <USB_CoreInit>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d005      	beq.n	8002f98 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2202      	movs	r2, #2
 8002f90:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e0bf      	b.n	8003118 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f003 fa17 	bl	80063d2 <USB_SetCurrentMode>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d005      	beq.n	8002fb6 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2202      	movs	r2, #2
 8002fae:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e0b0      	b.n	8003118 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	73fb      	strb	r3, [r7, #15]
 8002fba:	e03e      	b.n	800303a <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002fbc:	7bfa      	ldrb	r2, [r7, #15]
 8002fbe:	6879      	ldr	r1, [r7, #4]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	4413      	add	r3, r2
 8002fc6:	00db      	lsls	r3, r3, #3
 8002fc8:	440b      	add	r3, r1
 8002fca:	3311      	adds	r3, #17
 8002fcc:	2201      	movs	r2, #1
 8002fce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002fd0:	7bfa      	ldrb	r2, [r7, #15]
 8002fd2:	6879      	ldr	r1, [r7, #4]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	4413      	add	r3, r2
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	440b      	add	r3, r1
 8002fde:	3310      	adds	r3, #16
 8002fe0:	7bfa      	ldrb	r2, [r7, #15]
 8002fe2:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002fe4:	7bfa      	ldrb	r2, [r7, #15]
 8002fe6:	6879      	ldr	r1, [r7, #4]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	4413      	add	r3, r2
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	440b      	add	r3, r1
 8002ff2:	3313      	adds	r3, #19
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ff8:	7bfa      	ldrb	r2, [r7, #15]
 8002ffa:	6879      	ldr	r1, [r7, #4]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	4413      	add	r3, r2
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	440b      	add	r3, r1
 8003006:	3320      	adds	r3, #32
 8003008:	2200      	movs	r2, #0
 800300a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800300c:	7bfa      	ldrb	r2, [r7, #15]
 800300e:	6879      	ldr	r1, [r7, #4]
 8003010:	4613      	mov	r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	4413      	add	r3, r2
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	440b      	add	r3, r1
 800301a:	3324      	adds	r3, #36	@ 0x24
 800301c:	2200      	movs	r2, #0
 800301e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003020:	7bfb      	ldrb	r3, [r7, #15]
 8003022:	6879      	ldr	r1, [r7, #4]
 8003024:	1c5a      	adds	r2, r3, #1
 8003026:	4613      	mov	r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	4413      	add	r3, r2
 800302c:	00db      	lsls	r3, r3, #3
 800302e:	440b      	add	r3, r1
 8003030:	2200      	movs	r2, #0
 8003032:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003034:	7bfb      	ldrb	r3, [r7, #15]
 8003036:	3301      	adds	r3, #1
 8003038:	73fb      	strb	r3, [r7, #15]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	791b      	ldrb	r3, [r3, #4]
 800303e:	7bfa      	ldrb	r2, [r7, #15]
 8003040:	429a      	cmp	r2, r3
 8003042:	d3bb      	bcc.n	8002fbc <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003044:	2300      	movs	r3, #0
 8003046:	73fb      	strb	r3, [r7, #15]
 8003048:	e044      	b.n	80030d4 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800304a:	7bfa      	ldrb	r2, [r7, #15]
 800304c:	6879      	ldr	r1, [r7, #4]
 800304e:	4613      	mov	r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	4413      	add	r3, r2
 8003054:	00db      	lsls	r3, r3, #3
 8003056:	440b      	add	r3, r1
 8003058:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800305c:	2200      	movs	r2, #0
 800305e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003060:	7bfa      	ldrb	r2, [r7, #15]
 8003062:	6879      	ldr	r1, [r7, #4]
 8003064:	4613      	mov	r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	4413      	add	r3, r2
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	440b      	add	r3, r1
 800306e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003072:	7bfa      	ldrb	r2, [r7, #15]
 8003074:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003076:	7bfa      	ldrb	r2, [r7, #15]
 8003078:	6879      	ldr	r1, [r7, #4]
 800307a:	4613      	mov	r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	4413      	add	r3, r2
 8003080:	00db      	lsls	r3, r3, #3
 8003082:	440b      	add	r3, r1
 8003084:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8003088:	2200      	movs	r2, #0
 800308a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800308c:	7bfa      	ldrb	r2, [r7, #15]
 800308e:	6879      	ldr	r1, [r7, #4]
 8003090:	4613      	mov	r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	4413      	add	r3, r2
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	440b      	add	r3, r1
 800309a:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800309e:	2200      	movs	r2, #0
 80030a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80030a2:	7bfa      	ldrb	r2, [r7, #15]
 80030a4:	6879      	ldr	r1, [r7, #4]
 80030a6:	4613      	mov	r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	4413      	add	r3, r2
 80030ac:	00db      	lsls	r3, r3, #3
 80030ae:	440b      	add	r3, r1
 80030b0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80030b4:	2200      	movs	r2, #0
 80030b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80030b8:	7bfa      	ldrb	r2, [r7, #15]
 80030ba:	6879      	ldr	r1, [r7, #4]
 80030bc:	4613      	mov	r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	4413      	add	r3, r2
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	440b      	add	r3, r1
 80030c6:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80030ca:	2200      	movs	r2, #0
 80030cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030ce:	7bfb      	ldrb	r3, [r7, #15]
 80030d0:	3301      	adds	r3, #1
 80030d2:	73fb      	strb	r3, [r7, #15]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	791b      	ldrb	r3, [r3, #4]
 80030d8:	7bfa      	ldrb	r2, [r7, #15]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d3b5      	bcc.n	800304a <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6818      	ldr	r0, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	3304      	adds	r3, #4
 80030e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030e8:	f003 f97f 	bl	80063ea <USB_DevInit>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d005      	beq.n	80030fe <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2202      	movs	r2, #2
 80030f6:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e00c      	b.n	8003118 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4618      	mov	r0, r3
 8003112:	f005 fbfe 	bl	8008912 <USB_DevDisconnect>

  return HAL_OK;
 8003116:	2300      	movs	r3, #0
}
 8003118:	4618      	mov	r0, r3
 800311a:	3710      	adds	r7, #16
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800312e:	2b01      	cmp	r3, #1
 8003130:	d101      	bne.n	8003136 <HAL_PCD_Start+0x16>
 8003132:	2302      	movs	r3, #2
 8003134:	e016      	b.n	8003164 <HAL_PCD_Start+0x44>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4618      	mov	r0, r3
 8003144:	f003 f915 	bl	8006372 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003148:	2101      	movs	r1, #1
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f007 fa2b 	bl	800a5a6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4618      	mov	r0, r3
 8003156:	f005 fbd2 	bl	80088fe <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	3708      	adds	r7, #8
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b088      	sub	sp, #32
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4618      	mov	r0, r3
 800317a:	f005 fbd4 	bl	8008926 <USB_ReadInterrupts>
 800317e:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d003      	beq.n	8003192 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f000 fb03 	bl	8003796 <PCD_EP_ISR_Handler>

    return;
 8003190:	e119      	b.n	80033c6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003198:	2b00      	cmp	r3, #0
 800319a:	d013      	beq.n	80031c4 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031ae:	b292      	uxth	r2, r2
 80031b0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f007 f824 	bl	800a202 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80031ba:	2100      	movs	r1, #0
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f000 f905 	bl	80033cc <HAL_PCD_SetAddress>

    return;
 80031c2:	e100      	b.n	80033c6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00c      	beq.n	80031e8 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80031d6:	b29a      	uxth	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80031e0:	b292      	uxth	r2, r2
 80031e2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80031e6:	e0ee      	b.n	80033c6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00c      	beq.n	800320c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003204:	b292      	uxth	r2, r2
 8003206:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800320a:	e0dc      	b.n	80033c6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d027      	beq.n	8003266 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800321e:	b29a      	uxth	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f022 0204 	bic.w	r2, r2, #4
 8003228:	b292      	uxth	r2, r2
 800322a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003236:	b29a      	uxth	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f022 0208 	bic.w	r2, r2, #8
 8003240:	b292      	uxth	r2, r2
 8003242:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f007 f814 	bl	800a274 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003254:	b29a      	uxth	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800325e:	b292      	uxth	r2, r2
 8003260:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003264:	e0af      	b.n	80033c6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800326c:	2b00      	cmp	r3, #0
 800326e:	f000 8083 	beq.w	8003378 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8003272:	2300      	movs	r3, #0
 8003274:	77fb      	strb	r3, [r7, #31]
 8003276:	e010      	b.n	800329a <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	461a      	mov	r2, r3
 800327e:	7ffb      	ldrb	r3, [r7, #31]
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	441a      	add	r2, r3
 8003284:	7ffb      	ldrb	r3, [r7, #31]
 8003286:	8812      	ldrh	r2, [r2, #0]
 8003288:	b292      	uxth	r2, r2
 800328a:	005b      	lsls	r3, r3, #1
 800328c:	3320      	adds	r3, #32
 800328e:	443b      	add	r3, r7
 8003290:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8003294:	7ffb      	ldrb	r3, [r7, #31]
 8003296:	3301      	adds	r3, #1
 8003298:	77fb      	strb	r3, [r7, #31]
 800329a:	7ffb      	ldrb	r3, [r7, #31]
 800329c:	2b07      	cmp	r3, #7
 800329e:	d9eb      	bls.n	8003278 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f042 0201 	orr.w	r2, r2, #1
 80032b2:	b292      	uxth	r2, r2
 80032b4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80032c0:	b29a      	uxth	r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f022 0201 	bic.w	r2, r2, #1
 80032ca:	b292      	uxth	r2, r2
 80032cc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80032d0:	bf00      	nop
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80032da:	b29b      	uxth	r3, r3
 80032dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d0f6      	beq.n	80032d2 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80032ec:	b29a      	uxth	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032f6:	b292      	uxth	r2, r2
 80032f8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80032fc:	2300      	movs	r3, #0
 80032fe:	77fb      	strb	r3, [r7, #31]
 8003300:	e00f      	b.n	8003322 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8003302:	7ffb      	ldrb	r3, [r7, #31]
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	6812      	ldr	r2, [r2, #0]
 8003308:	4611      	mov	r1, r2
 800330a:	7ffa      	ldrb	r2, [r7, #31]
 800330c:	0092      	lsls	r2, r2, #2
 800330e:	440a      	add	r2, r1
 8003310:	005b      	lsls	r3, r3, #1
 8003312:	3320      	adds	r3, #32
 8003314:	443b      	add	r3, r7
 8003316:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800331a:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800331c:	7ffb      	ldrb	r3, [r7, #31]
 800331e:	3301      	adds	r3, #1
 8003320:	77fb      	strb	r3, [r7, #31]
 8003322:	7ffb      	ldrb	r3, [r7, #31]
 8003324:	2b07      	cmp	r3, #7
 8003326:	d9ec      	bls.n	8003302 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003330:	b29a      	uxth	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f042 0208 	orr.w	r2, r2, #8
 800333a:	b292      	uxth	r2, r2
 800333c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003348:	b29a      	uxth	r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003352:	b292      	uxth	r2, r2
 8003354:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003360:	b29a      	uxth	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f042 0204 	orr.w	r2, r2, #4
 800336a:	b292      	uxth	r2, r2
 800336c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f006 ff65 	bl	800a240 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003376:	e026      	b.n	80033c6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800337e:	2b00      	cmp	r3, #0
 8003380:	d00f      	beq.n	80033a2 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800338a:	b29a      	uxth	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003394:	b292      	uxth	r2, r2
 8003396:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f006 ff23 	bl	800a1e6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80033a0:	e011      	b.n	80033c6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d00c      	beq.n	80033c6 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80033b4:	b29a      	uxth	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80033be:	b292      	uxth	r2, r2
 80033c0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80033c4:	bf00      	nop
  }
}
 80033c6:	3720      	adds	r7, #32
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	460b      	mov	r3, r1
 80033d6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d101      	bne.n	80033e6 <HAL_PCD_SetAddress+0x1a>
 80033e2:	2302      	movs	r3, #2
 80033e4:	e012      	b.n	800340c <HAL_PCD_SetAddress+0x40>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2201      	movs	r2, #1
 80033ea:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	78fa      	ldrb	r2, [r7, #3]
 80033f2:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	78fa      	ldrb	r2, [r7, #3]
 80033fa:	4611      	mov	r1, r2
 80033fc:	4618      	mov	r0, r3
 80033fe:	f005 fa6b 	bl	80088d8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	3708      	adds	r7, #8
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	4608      	mov	r0, r1
 800341e:	4611      	mov	r1, r2
 8003420:	461a      	mov	r2, r3
 8003422:	4603      	mov	r3, r0
 8003424:	70fb      	strb	r3, [r7, #3]
 8003426:	460b      	mov	r3, r1
 8003428:	803b      	strh	r3, [r7, #0]
 800342a:	4613      	mov	r3, r2
 800342c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800342e:	2300      	movs	r3, #0
 8003430:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003432:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003436:	2b00      	cmp	r3, #0
 8003438:	da0e      	bge.n	8003458 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800343a:	78fb      	ldrb	r3, [r7, #3]
 800343c:	f003 0207 	and.w	r2, r3, #7
 8003440:	4613      	mov	r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	4413      	add	r3, r2
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	3310      	adds	r3, #16
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	4413      	add	r3, r2
 800344e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2201      	movs	r2, #1
 8003454:	705a      	strb	r2, [r3, #1]
 8003456:	e00e      	b.n	8003476 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003458:	78fb      	ldrb	r3, [r7, #3]
 800345a:	f003 0207 	and.w	r2, r3, #7
 800345e:	4613      	mov	r3, r2
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	4413      	add	r3, r2
 8003464:	00db      	lsls	r3, r3, #3
 8003466:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	4413      	add	r3, r2
 800346e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2200      	movs	r2, #0
 8003474:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003476:	78fb      	ldrb	r3, [r7, #3]
 8003478:	f003 0307 	and.w	r3, r3, #7
 800347c:	b2da      	uxtb	r2, r3
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003482:	883a      	ldrh	r2, [r7, #0]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	78ba      	ldrb	r2, [r7, #2]
 800348c:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800348e:	78bb      	ldrb	r3, [r7, #2]
 8003490:	2b02      	cmp	r3, #2
 8003492:	d102      	bne.n	800349a <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2200      	movs	r2, #0
 8003498:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d101      	bne.n	80034a8 <HAL_PCD_EP_Open+0x94>
 80034a4:	2302      	movs	r3, #2
 80034a6:	e00e      	b.n	80034c6 <HAL_PCD_EP_Open+0xb2>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68f9      	ldr	r1, [r7, #12]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f002 ffb4 	bl	8006424 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80034c4:	7afb      	ldrb	r3, [r7, #11]
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3710      	adds	r7, #16
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b084      	sub	sp, #16
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
 80034d6:	460b      	mov	r3, r1
 80034d8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80034da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	da0e      	bge.n	8003500 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034e2:	78fb      	ldrb	r3, [r7, #3]
 80034e4:	f003 0207 	and.w	r2, r3, #7
 80034e8:	4613      	mov	r3, r2
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	4413      	add	r3, r2
 80034ee:	00db      	lsls	r3, r3, #3
 80034f0:	3310      	adds	r3, #16
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	4413      	add	r3, r2
 80034f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2201      	movs	r2, #1
 80034fc:	705a      	strb	r2, [r3, #1]
 80034fe:	e00e      	b.n	800351e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003500:	78fb      	ldrb	r3, [r7, #3]
 8003502:	f003 0207 	and.w	r2, r3, #7
 8003506:	4613      	mov	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	4413      	add	r3, r2
 800350c:	00db      	lsls	r3, r3, #3
 800350e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	4413      	add	r3, r2
 8003516:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2200      	movs	r2, #0
 800351c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800351e:	78fb      	ldrb	r3, [r7, #3]
 8003520:	f003 0307 	and.w	r3, r3, #7
 8003524:	b2da      	uxtb	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003530:	2b01      	cmp	r3, #1
 8003532:	d101      	bne.n	8003538 <HAL_PCD_EP_Close+0x6a>
 8003534:	2302      	movs	r3, #2
 8003536:	e00e      	b.n	8003556 <HAL_PCD_EP_Close+0x88>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68f9      	ldr	r1, [r7, #12]
 8003546:	4618      	mov	r0, r3
 8003548:	f003 fb2c 	bl	8006ba4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800355e:	b580      	push	{r7, lr}
 8003560:	b086      	sub	sp, #24
 8003562:	af00      	add	r7, sp, #0
 8003564:	60f8      	str	r0, [r7, #12]
 8003566:	607a      	str	r2, [r7, #4]
 8003568:	603b      	str	r3, [r7, #0]
 800356a:	460b      	mov	r3, r1
 800356c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800356e:	7afb      	ldrb	r3, [r7, #11]
 8003570:	f003 0207 	and.w	r2, r3, #7
 8003574:	4613      	mov	r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	4413      	add	r3, r2
 800357a:	00db      	lsls	r3, r3, #3
 800357c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	4413      	add	r3, r2
 8003584:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	683a      	ldr	r2, [r7, #0]
 8003590:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	2200      	movs	r2, #0
 8003596:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	2200      	movs	r2, #0
 800359c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800359e:	7afb      	ldrb	r3, [r7, #11]
 80035a0:	f003 0307 	and.w	r3, r3, #7
 80035a4:	b2da      	uxtb	r2, r3
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	6979      	ldr	r1, [r7, #20]
 80035b0:	4618      	mov	r0, r3
 80035b2:	f003 fce3 	bl	8006f7c <USB_EPStartXfer>

  return HAL_OK;
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3718      	adds	r7, #24
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b086      	sub	sp, #24
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	607a      	str	r2, [r7, #4]
 80035ca:	603b      	str	r3, [r7, #0]
 80035cc:	460b      	mov	r3, r1
 80035ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035d0:	7afb      	ldrb	r3, [r7, #11]
 80035d2:	f003 0207 	and.w	r2, r3, #7
 80035d6:	4613      	mov	r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	4413      	add	r3, r2
 80035dc:	00db      	lsls	r3, r3, #3
 80035de:	3310      	adds	r3, #16
 80035e0:	68fa      	ldr	r2, [r7, #12]
 80035e2:	4413      	add	r3, r2
 80035e4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	683a      	ldr	r2, [r7, #0]
 80035f0:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	2201      	movs	r2, #1
 80035f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	683a      	ldr	r2, [r7, #0]
 80035fe:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	2200      	movs	r2, #0
 8003604:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	2201      	movs	r2, #1
 800360a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800360c:	7afb      	ldrb	r3, [r7, #11]
 800360e:	f003 0307 	and.w	r3, r3, #7
 8003612:	b2da      	uxtb	r2, r3
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	6979      	ldr	r1, [r7, #20]
 800361e:	4618      	mov	r0, r3
 8003620:	f003 fcac 	bl	8006f7c <USB_EPStartXfer>

  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3718      	adds	r7, #24
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}

0800362e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800362e:	b580      	push	{r7, lr}
 8003630:	b084      	sub	sp, #16
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
 8003636:	460b      	mov	r3, r1
 8003638:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800363a:	78fb      	ldrb	r3, [r7, #3]
 800363c:	f003 0307 	and.w	r3, r3, #7
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	7912      	ldrb	r2, [r2, #4]
 8003644:	4293      	cmp	r3, r2
 8003646:	d901      	bls.n	800364c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e04c      	b.n	80036e6 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800364c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003650:	2b00      	cmp	r3, #0
 8003652:	da0e      	bge.n	8003672 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003654:	78fb      	ldrb	r3, [r7, #3]
 8003656:	f003 0207 	and.w	r2, r3, #7
 800365a:	4613      	mov	r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	4413      	add	r3, r2
 8003660:	00db      	lsls	r3, r3, #3
 8003662:	3310      	adds	r3, #16
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	4413      	add	r3, r2
 8003668:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2201      	movs	r2, #1
 800366e:	705a      	strb	r2, [r3, #1]
 8003670:	e00c      	b.n	800368c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003672:	78fa      	ldrb	r2, [r7, #3]
 8003674:	4613      	mov	r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	4413      	add	r3, r2
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	4413      	add	r3, r2
 8003684:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2201      	movs	r2, #1
 8003690:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003692:	78fb      	ldrb	r3, [r7, #3]
 8003694:	f003 0307 	and.w	r3, r3, #7
 8003698:	b2da      	uxtb	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d101      	bne.n	80036ac <HAL_PCD_EP_SetStall+0x7e>
 80036a8:	2302      	movs	r3, #2
 80036aa:	e01c      	b.n	80036e6 <HAL_PCD_EP_SetStall+0xb8>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68f9      	ldr	r1, [r7, #12]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f005 f80f 	bl	80086de <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80036c0:	78fb      	ldrb	r3, [r7, #3]
 80036c2:	f003 0307 	and.w	r3, r3, #7
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d108      	bne.n	80036dc <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80036d4:	4619      	mov	r1, r3
 80036d6:	4610      	mov	r0, r2
 80036d8:	f005 f934 	bl	8008944 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}

080036ee <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036ee:	b580      	push	{r7, lr}
 80036f0:	b084      	sub	sp, #16
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
 80036f6:	460b      	mov	r3, r1
 80036f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80036fa:	78fb      	ldrb	r3, [r7, #3]
 80036fc:	f003 030f 	and.w	r3, r3, #15
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	7912      	ldrb	r2, [r2, #4]
 8003704:	4293      	cmp	r3, r2
 8003706:	d901      	bls.n	800370c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e040      	b.n	800378e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800370c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003710:	2b00      	cmp	r3, #0
 8003712:	da0e      	bge.n	8003732 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003714:	78fb      	ldrb	r3, [r7, #3]
 8003716:	f003 0207 	and.w	r2, r3, #7
 800371a:	4613      	mov	r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	4413      	add	r3, r2
 8003720:	00db      	lsls	r3, r3, #3
 8003722:	3310      	adds	r3, #16
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	4413      	add	r3, r2
 8003728:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2201      	movs	r2, #1
 800372e:	705a      	strb	r2, [r3, #1]
 8003730:	e00e      	b.n	8003750 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003732:	78fb      	ldrb	r3, [r7, #3]
 8003734:	f003 0207 	and.w	r2, r3, #7
 8003738:	4613      	mov	r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	4413      	add	r3, r2
 800373e:	00db      	lsls	r3, r3, #3
 8003740:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	4413      	add	r3, r2
 8003748:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003756:	78fb      	ldrb	r3, [r7, #3]
 8003758:	f003 0307 	and.w	r3, r3, #7
 800375c:	b2da      	uxtb	r2, r3
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003768:	2b01      	cmp	r3, #1
 800376a:	d101      	bne.n	8003770 <HAL_PCD_EP_ClrStall+0x82>
 800376c:	2302      	movs	r3, #2
 800376e:	e00e      	b.n	800378e <HAL_PCD_EP_ClrStall+0xa0>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68f9      	ldr	r1, [r7, #12]
 800377e:	4618      	mov	r0, r3
 8003780:	f004 fffd 	bl	800877e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	3710      	adds	r7, #16
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}

08003796 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003796:	b580      	push	{r7, lr}
 8003798:	b096      	sub	sp, #88	@ 0x58
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800379e:	e3bb      	b.n	8003f18 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80037a8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80037ac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	f003 030f 	and.w	r3, r3, #15
 80037b6:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 80037ba:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80037be:	2b00      	cmp	r3, #0
 80037c0:	f040 8175 	bne.w	8003aae <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80037c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80037c8:	f003 0310 	and.w	r3, r3, #16
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d14e      	bne.n	800386e <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	881b      	ldrh	r3, [r3, #0]
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80037dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037e0:	81fb      	strh	r3, [r7, #14]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	89fb      	ldrh	r3, [r7, #14]
 80037e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	3310      	adds	r3, #16
 80037f8:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003802:	b29b      	uxth	r3, r3
 8003804:	461a      	mov	r2, r3
 8003806:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	00db      	lsls	r3, r3, #3
 800380c:	4413      	add	r3, r2
 800380e:	3302      	adds	r3, #2
 8003810:	005b      	lsls	r3, r3, #1
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	6812      	ldr	r2, [r2, #0]
 8003816:	4413      	add	r3, r2
 8003818:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800381c:	881b      	ldrh	r3, [r3, #0]
 800381e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003822:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003824:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003826:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003828:	695a      	ldr	r2, [r3, #20]
 800382a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800382c:	69db      	ldr	r3, [r3, #28]
 800382e:	441a      	add	r2, r3
 8003830:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003832:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003834:	2100      	movs	r1, #0
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f006 fcbb 	bl	800a1b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	7b5b      	ldrb	r3, [r3, #13]
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b00      	cmp	r3, #0
 8003844:	f000 8368 	beq.w	8003f18 <PCD_EP_ISR_Handler+0x782>
 8003848:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	2b00      	cmp	r3, #0
 800384e:	f040 8363 	bne.w	8003f18 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	7b5b      	ldrb	r3, [r3, #13]
 8003856:	b2db      	uxtb	r3, r3
 8003858:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800385c:	b2da      	uxtb	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	735a      	strb	r2, [r3, #13]
 800386c:	e354      	b.n	8003f18 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003874:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	881b      	ldrh	r3, [r3, #0]
 800387c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003880:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003884:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003888:	2b00      	cmp	r3, #0
 800388a:	d034      	beq.n	80038f6 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003894:	b29b      	uxth	r3, r3
 8003896:	461a      	mov	r2, r3
 8003898:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	00db      	lsls	r3, r3, #3
 800389e:	4413      	add	r3, r2
 80038a0:	3306      	adds	r3, #6
 80038a2:	005b      	lsls	r3, r3, #1
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	6812      	ldr	r2, [r2, #0]
 80038a8:	4413      	add	r3, r2
 80038aa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80038ae:	881b      	ldrh	r3, [r3, #0]
 80038b0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80038b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038b6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6818      	ldr	r0, [r3, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80038c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038c4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80038c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038c8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	f005 f88a 	bl	80089e4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	881b      	ldrh	r3, [r3, #0]
 80038d6:	b29a      	uxth	r2, r3
 80038d8:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80038dc:	4013      	ands	r3, r2
 80038de:	823b      	strh	r3, [r7, #16]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	8a3a      	ldrh	r2, [r7, #16]
 80038e6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80038ea:	b292      	uxth	r2, r2
 80038ec:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f006 fc32 	bl	800a158 <HAL_PCD_SetupStageCallback>
 80038f4:	e310      	b.n	8003f18 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80038f6:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	f280 830c 	bge.w	8003f18 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	881b      	ldrh	r3, [r3, #0]
 8003906:	b29a      	uxth	r2, r3
 8003908:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800390c:	4013      	ands	r3, r2
 800390e:	83fb      	strh	r3, [r7, #30]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	8bfa      	ldrh	r2, [r7, #30]
 8003916:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800391a:	b292      	uxth	r2, r2
 800391c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003926:	b29b      	uxth	r3, r3
 8003928:	461a      	mov	r2, r3
 800392a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	00db      	lsls	r3, r3, #3
 8003930:	4413      	add	r3, r2
 8003932:	3306      	adds	r3, #6
 8003934:	005b      	lsls	r3, r3, #1
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	6812      	ldr	r2, [r2, #0]
 800393a:	4413      	add	r3, r2
 800393c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003940:	881b      	ldrh	r3, [r3, #0]
 8003942:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003946:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003948:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800394a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800394c:	69db      	ldr	r3, [r3, #28]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d019      	beq.n	8003986 <PCD_EP_ISR_Handler+0x1f0>
 8003952:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d015      	beq.n	8003986 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6818      	ldr	r0, [r3, #0]
 800395e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003960:	6959      	ldr	r1, [r3, #20]
 8003962:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003964:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003966:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003968:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800396a:	b29b      	uxth	r3, r3
 800396c:	f005 f83a 	bl	80089e4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003970:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003972:	695a      	ldr	r2, [r3, #20]
 8003974:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003976:	69db      	ldr	r3, [r3, #28]
 8003978:	441a      	add	r2, r3
 800397a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800397c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800397e:	2100      	movs	r1, #0
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f006 fbfb 	bl	800a17c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	881b      	ldrh	r3, [r3, #0]
 800398c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003990:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003994:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003998:	2b00      	cmp	r3, #0
 800399a:	f040 82bd 	bne.w	8003f18 <PCD_EP_ISR_Handler+0x782>
 800399e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80039a2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80039a6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80039aa:	f000 82b5 	beq.w	8003f18 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	61bb      	str	r3, [r7, #24]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039bc:	b29b      	uxth	r3, r3
 80039be:	461a      	mov	r2, r3
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	4413      	add	r3, r2
 80039c4:	61bb      	str	r3, [r7, #24]
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80039cc:	617b      	str	r3, [r7, #20]
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	881b      	ldrh	r3, [r3, #0]
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039d8:	b29a      	uxth	r2, r3
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	801a      	strh	r2, [r3, #0]
 80039de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	2b3e      	cmp	r3, #62	@ 0x3e
 80039e4:	d91d      	bls.n	8003a22 <PCD_EP_ISR_Handler+0x28c>
 80039e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	095b      	lsrs	r3, r3, #5
 80039ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80039ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	f003 031f 	and.w	r3, r3, #31
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d102      	bne.n	8003a00 <PCD_EP_ISR_Handler+0x26a>
 80039fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039fc:	3b01      	subs	r3, #1
 80039fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	881b      	ldrh	r3, [r3, #0]
 8003a04:	b29a      	uxth	r2, r3
 8003a06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	029b      	lsls	r3, r3, #10
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a1a:	b29a      	uxth	r2, r3
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	801a      	strh	r2, [r3, #0]
 8003a20:	e026      	b.n	8003a70 <PCD_EP_ISR_Handler+0x2da>
 8003a22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d10a      	bne.n	8003a40 <PCD_EP_ISR_Handler+0x2aa>
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	881b      	ldrh	r3, [r3, #0]
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a38:	b29a      	uxth	r2, r3
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	801a      	strh	r2, [r3, #0]
 8003a3e:	e017      	b.n	8003a70 <PCD_EP_ISR_Handler+0x2da>
 8003a40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a42:	691b      	ldr	r3, [r3, #16]
 8003a44:	085b      	lsrs	r3, r3, #1
 8003a46:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	f003 0301 	and.w	r3, r3, #1
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d002      	beq.n	8003a5a <PCD_EP_ISR_Handler+0x2c4>
 8003a54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a56:	3301      	adds	r3, #1
 8003a58:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	881b      	ldrh	r3, [r3, #0]
 8003a5e:	b29a      	uxth	r2, r3
 8003a60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	029b      	lsls	r3, r3, #10
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	b29a      	uxth	r2, r3
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	881b      	ldrh	r3, [r3, #0]
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003a7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a80:	827b      	strh	r3, [r7, #18]
 8003a82:	8a7b      	ldrh	r3, [r7, #18]
 8003a84:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003a88:	827b      	strh	r3, [r7, #18]
 8003a8a:	8a7b      	ldrh	r3, [r7, #18]
 8003a8c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003a90:	827b      	strh	r3, [r7, #18]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	8a7b      	ldrh	r3, [r7, #18]
 8003a98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003aa0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003aa4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	8013      	strh	r3, [r2, #0]
 8003aac:	e234      	b.n	8003f18 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	4413      	add	r3, r2
 8003abc:	881b      	ldrh	r3, [r3, #0]
 8003abe:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003ac2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	f280 80fc 	bge.w	8003cc4 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	4413      	add	r3, r2
 8003ada:	881b      	ldrh	r3, [r3, #0]
 8003adc:	b29a      	uxth	r2, r3
 8003ade:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	461a      	mov	r2, r3
 8003aee:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	4413      	add	r3, r2
 8003af6:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8003afa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003afe:	b292      	uxth	r2, r2
 8003b00:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003b02:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003b06:	4613      	mov	r3, r2
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	4413      	add	r3, r2
 8003b0c:	00db      	lsls	r3, r3, #3
 8003b0e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	4413      	add	r3, r2
 8003b16:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003b18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b1a:	7b1b      	ldrb	r3, [r3, #12]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d125      	bne.n	8003b6c <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	00db      	lsls	r3, r3, #3
 8003b32:	4413      	add	r3, r2
 8003b34:	3306      	adds	r3, #6
 8003b36:	005b      	lsls	r3, r3, #1
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	6812      	ldr	r2, [r2, #0]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003b42:	881b      	ldrh	r3, [r3, #0]
 8003b44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b48:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8003b4c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	f000 8092 	beq.w	8003c7a <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6818      	ldr	r0, [r3, #0]
 8003b5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b5c:	6959      	ldr	r1, [r3, #20]
 8003b5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b60:	88da      	ldrh	r2, [r3, #6]
 8003b62:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003b66:	f004 ff3d 	bl	80089e4 <USB_ReadPMA>
 8003b6a:	e086      	b.n	8003c7a <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003b6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b6e:	78db      	ldrb	r3, [r3, #3]
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d10a      	bne.n	8003b8a <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003b74:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003b78:	461a      	mov	r2, r3
 8003b7a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f000 f9d9 	bl	8003f34 <HAL_PCD_EP_DB_Receive>
 8003b82:	4603      	mov	r3, r0
 8003b84:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8003b88:	e077      	b.n	8003c7a <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	461a      	mov	r2, r3
 8003b90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	4413      	add	r3, r2
 8003b98:	881b      	ldrh	r3, [r3, #0]
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ba0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ba4:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	461a      	mov	r2, r3
 8003bae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	441a      	add	r2, r3
 8003bb6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8003bba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003bbe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003bc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bc6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	4413      	add	r3, r2
 8003bdc:	881b      	ldrh	r3, [r3, #0]
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d024      	beq.n	8003c32 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	00db      	lsls	r3, r3, #3
 8003bfa:	4413      	add	r3, r2
 8003bfc:	3302      	adds	r3, #2
 8003bfe:	005b      	lsls	r3, r3, #1
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	6812      	ldr	r2, [r2, #0]
 8003c04:	4413      	add	r3, r2
 8003c06:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003c0a:	881b      	ldrh	r3, [r3, #0]
 8003c0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c10:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003c14:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d02e      	beq.n	8003c7a <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6818      	ldr	r0, [r3, #0]
 8003c20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c22:	6959      	ldr	r1, [r3, #20]
 8003c24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c26:	891a      	ldrh	r2, [r3, #8]
 8003c28:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003c2c:	f004 feda 	bl	80089e4 <USB_ReadPMA>
 8003c30:	e023      	b.n	8003c7a <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	00db      	lsls	r3, r3, #3
 8003c44:	4413      	add	r3, r2
 8003c46:	3306      	adds	r3, #6
 8003c48:	005b      	lsls	r3, r3, #1
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	6812      	ldr	r2, [r2, #0]
 8003c4e:	4413      	add	r3, r2
 8003c50:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003c54:	881b      	ldrh	r3, [r3, #0]
 8003c56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c5a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003c5e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d009      	beq.n	8003c7a <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6818      	ldr	r0, [r3, #0]
 8003c6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c6c:	6959      	ldr	r1, [r3, #20]
 8003c6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c70:	895a      	ldrh	r2, [r3, #10]
 8003c72:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003c76:	f004 feb5 	bl	80089e4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003c7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c7c:	69da      	ldr	r2, [r3, #28]
 8003c7e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003c82:	441a      	add	r2, r3
 8003c84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c86:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003c88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c8a:	695a      	ldr	r2, [r3, #20]
 8003c8c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003c90:	441a      	add	r2, r3
 8003c92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c94:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003c96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d005      	beq.n	8003caa <PCD_EP_ISR_Handler+0x514>
 8003c9e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8003ca2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d206      	bcs.n	8003cb8 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003caa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	4619      	mov	r1, r3
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f006 fa63 	bl	800a17c <HAL_PCD_DataOutStageCallback>
 8003cb6:	e005      	b.n	8003cc4 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f003 f95c 	bl	8006f7c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003cc4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003cc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	f000 8123 	beq.w	8003f18 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8003cd2:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	4413      	add	r3, r2
 8003cdc:	00db      	lsls	r3, r3, #3
 8003cde:	3310      	adds	r3, #16
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	461a      	mov	r2, r3
 8003cec:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	4413      	add	r3, r2
 8003cf4:	881b      	ldrh	r3, [r3, #0]
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003cfc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d00:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	461a      	mov	r2, r3
 8003d0a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	441a      	add	r2, r3
 8003d12:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003d16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003d22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d24:	78db      	ldrb	r3, [r3, #3]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	f040 80a2 	bne.w	8003e70 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8003d2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d2e:	2200      	movs	r2, #0
 8003d30:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003d32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d34:	7b1b      	ldrb	r3, [r3, #12]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	f000 8093 	beq.w	8003e62 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003d3c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003d40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d046      	beq.n	8003dd6 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d4a:	785b      	ldrb	r3, [r3, #1]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d126      	bne.n	8003d9e <PCD_EP_ISR_Handler+0x608>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	461a      	mov	r2, r3
 8003d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d64:	4413      	add	r3, r2
 8003d66:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	011a      	lsls	r2, r3, #4
 8003d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d70:	4413      	add	r3, r2
 8003d72:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003d76:	623b      	str	r3, [r7, #32]
 8003d78:	6a3b      	ldr	r3, [r7, #32]
 8003d7a:	881b      	ldrh	r3, [r3, #0]
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d82:	b29a      	uxth	r2, r3
 8003d84:	6a3b      	ldr	r3, [r7, #32]
 8003d86:	801a      	strh	r2, [r3, #0]
 8003d88:	6a3b      	ldr	r3, [r7, #32]
 8003d8a:	881b      	ldrh	r3, [r3, #0]
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d96:	b29a      	uxth	r2, r3
 8003d98:	6a3b      	ldr	r3, [r7, #32]
 8003d9a:	801a      	strh	r2, [r3, #0]
 8003d9c:	e061      	b.n	8003e62 <PCD_EP_ISR_Handler+0x6cc>
 8003d9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003da0:	785b      	ldrb	r3, [r3, #1]
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d15d      	bne.n	8003e62 <PCD_EP_ISR_Handler+0x6cc>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	461a      	mov	r2, r3
 8003db8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dba:	4413      	add	r3, r2
 8003dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003dbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	011a      	lsls	r2, r3, #4
 8003dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dc6:	4413      	add	r3, r2
 8003dc8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	801a      	strh	r2, [r3, #0]
 8003dd4:	e045      	b.n	8003e62 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ddc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dde:	785b      	ldrb	r3, [r3, #1]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d126      	bne.n	8003e32 <PCD_EP_ISR_Handler+0x69c>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	461a      	mov	r2, r3
 8003df6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003df8:	4413      	add	r3, r2
 8003dfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8003dfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	011a      	lsls	r2, r3, #4
 8003e02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e04:	4413      	add	r3, r2
 8003e06:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003e0a:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e0e:	881b      	ldrh	r3, [r3, #0]
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e16:	b29a      	uxth	r2, r3
 8003e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e1a:	801a      	strh	r2, [r3, #0]
 8003e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e1e:	881b      	ldrh	r3, [r3, #0]
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e2a:	b29a      	uxth	r2, r3
 8003e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e2e:	801a      	strh	r2, [r3, #0]
 8003e30:	e017      	b.n	8003e62 <PCD_EP_ISR_Handler+0x6cc>
 8003e32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e34:	785b      	ldrb	r3, [r3, #1]
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d113      	bne.n	8003e62 <PCD_EP_ISR_Handler+0x6cc>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	461a      	mov	r2, r3
 8003e46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e48:	4413      	add	r3, r2
 8003e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	011a      	lsls	r2, r3, #4
 8003e52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e54:	4413      	add	r3, r2
 8003e56:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003e5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e5e:	2200      	movs	r2, #0
 8003e60:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003e62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	4619      	mov	r1, r3
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f006 f9a2 	bl	800a1b2 <HAL_PCD_DataInStageCallback>
 8003e6e:	e053      	b.n	8003f18 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003e70:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003e74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d146      	bne.n	8003f0a <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	461a      	mov	r2, r3
 8003e88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	00db      	lsls	r3, r3, #3
 8003e8e:	4413      	add	r3, r2
 8003e90:	3302      	adds	r3, #2
 8003e92:	005b      	lsls	r3, r3, #1
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	6812      	ldr	r2, [r2, #0]
 8003e98:	4413      	add	r3, r2
 8003e9a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003e9e:	881b      	ldrh	r3, [r3, #0]
 8003ea0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ea4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8003ea8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eaa:	699a      	ldr	r2, [r3, #24]
 8003eac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d907      	bls.n	8003ec4 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8003eb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eb6:	699a      	ldr	r2, [r3, #24]
 8003eb8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003ebc:	1ad2      	subs	r2, r2, r3
 8003ebe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ec0:	619a      	str	r2, [r3, #24]
 8003ec2:	e002      	b.n	8003eca <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8003ec4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003eca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ecc:	699b      	ldr	r3, [r3, #24]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d106      	bne.n	8003ee0 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003ed2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f006 f96a 	bl	800a1b2 <HAL_PCD_DataInStageCallback>
 8003ede:	e01b      	b.n	8003f18 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003ee0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ee2:	695a      	ldr	r2, [r3, #20]
 8003ee4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003ee8:	441a      	add	r2, r3
 8003eea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eec:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003eee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ef0:	69da      	ldr	r2, [r3, #28]
 8003ef2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003ef6:	441a      	add	r2, r3
 8003ef8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003efa:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003f02:	4618      	mov	r0, r3
 8003f04:	f003 f83a 	bl	8006f7c <USB_EPStartXfer>
 8003f08:	e006      	b.n	8003f18 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003f0a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003f0e:	461a      	mov	r2, r3
 8003f10:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 f91b 	bl	800414e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	b21b      	sxth	r3, r3
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f6ff ac3b 	blt.w	80037a0 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3758      	adds	r7, #88	@ 0x58
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b088      	sub	sp, #32
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	4613      	mov	r3, r2
 8003f40:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003f42:	88fb      	ldrh	r3, [r7, #6]
 8003f44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d07e      	beq.n	800404a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	461a      	mov	r2, r3
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	00db      	lsls	r3, r3, #3
 8003f5e:	4413      	add	r3, r2
 8003f60:	3302      	adds	r3, #2
 8003f62:	005b      	lsls	r3, r3, #1
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	6812      	ldr	r2, [r2, #0]
 8003f68:	4413      	add	r3, r2
 8003f6a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003f6e:	881b      	ldrh	r3, [r3, #0]
 8003f70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f74:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	699a      	ldr	r2, [r3, #24]
 8003f7a:	8b7b      	ldrh	r3, [r7, #26]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d306      	bcc.n	8003f8e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	699a      	ldr	r2, [r3, #24]
 8003f84:	8b7b      	ldrh	r3, [r7, #26]
 8003f86:	1ad2      	subs	r2, r2, r3
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	619a      	str	r2, [r3, #24]
 8003f8c:	e002      	b.n	8003f94 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	2200      	movs	r2, #0
 8003f92:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d123      	bne.n	8003fe4 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	4413      	add	r3, r2
 8003faa:	881b      	ldrh	r3, [r3, #0]
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003fb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fb6:	833b      	strh	r3, [r7, #24]
 8003fb8:	8b3b      	ldrh	r3, [r7, #24]
 8003fba:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003fbe:	833b      	strh	r3, [r7, #24]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	441a      	add	r2, r3
 8003fce:	8b3b      	ldrh	r3, [r7, #24]
 8003fd0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003fd4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003fd8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003fdc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003fe4:	88fb      	ldrh	r3, [r7, #6]
 8003fe6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d01f      	beq.n	800402e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	4413      	add	r3, r2
 8003ffc:	881b      	ldrh	r3, [r3, #0]
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004004:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004008:	82fb      	strh	r3, [r7, #22]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	461a      	mov	r2, r3
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	441a      	add	r2, r3
 8004018:	8afb      	ldrh	r3, [r7, #22]
 800401a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800401e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004022:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004026:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800402a:	b29b      	uxth	r3, r3
 800402c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800402e:	8b7b      	ldrh	r3, [r7, #26]
 8004030:	2b00      	cmp	r3, #0
 8004032:	f000 8087 	beq.w	8004144 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6818      	ldr	r0, [r3, #0]
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	6959      	ldr	r1, [r3, #20]
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	891a      	ldrh	r2, [r3, #8]
 8004042:	8b7b      	ldrh	r3, [r7, #26]
 8004044:	f004 fcce 	bl	80089e4 <USB_ReadPMA>
 8004048:	e07c      	b.n	8004144 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004052:	b29b      	uxth	r3, r3
 8004054:	461a      	mov	r2, r3
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	00db      	lsls	r3, r3, #3
 800405c:	4413      	add	r3, r2
 800405e:	3306      	adds	r3, #6
 8004060:	005b      	lsls	r3, r3, #1
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	6812      	ldr	r2, [r2, #0]
 8004066:	4413      	add	r3, r2
 8004068:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800406c:	881b      	ldrh	r3, [r3, #0]
 800406e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004072:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	699a      	ldr	r2, [r3, #24]
 8004078:	8b7b      	ldrh	r3, [r7, #26]
 800407a:	429a      	cmp	r2, r3
 800407c:	d306      	bcc.n	800408c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	699a      	ldr	r2, [r3, #24]
 8004082:	8b7b      	ldrh	r3, [r7, #26]
 8004084:	1ad2      	subs	r2, r2, r3
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	619a      	str	r2, [r3, #24]
 800408a:	e002      	b.n	8004092 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	2200      	movs	r2, #0
 8004090:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	699b      	ldr	r3, [r3, #24]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d123      	bne.n	80040e2 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	461a      	mov	r2, r3
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	4413      	add	r3, r2
 80040a8:	881b      	ldrh	r3, [r3, #0]
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80040b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040b4:	83fb      	strh	r3, [r7, #30]
 80040b6:	8bfb      	ldrh	r3, [r7, #30]
 80040b8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80040bc:	83fb      	strh	r3, [r7, #30]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	461a      	mov	r2, r3
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	441a      	add	r2, r3
 80040cc:	8bfb      	ldrh	r3, [r7, #30]
 80040ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80040d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80040d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80040da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040de:	b29b      	uxth	r3, r3
 80040e0:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80040e2:	88fb      	ldrh	r3, [r7, #6]
 80040e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d11f      	bne.n	800412c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	461a      	mov	r2, r3
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	4413      	add	r3, r2
 80040fa:	881b      	ldrh	r3, [r3, #0]
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004102:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004106:	83bb      	strh	r3, [r7, #28]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	461a      	mov	r2, r3
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	441a      	add	r2, r3
 8004116:	8bbb      	ldrh	r3, [r7, #28]
 8004118:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800411c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004120:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004124:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004128:	b29b      	uxth	r3, r3
 800412a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800412c:	8b7b      	ldrh	r3, [r7, #26]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d008      	beq.n	8004144 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6818      	ldr	r0, [r3, #0]
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	6959      	ldr	r1, [r3, #20]
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	895a      	ldrh	r2, [r3, #10]
 800413e:	8b7b      	ldrh	r3, [r7, #26]
 8004140:	f004 fc50 	bl	80089e4 <USB_ReadPMA>
    }
  }

  return count;
 8004144:	8b7b      	ldrh	r3, [r7, #26]
}
 8004146:	4618      	mov	r0, r3
 8004148:	3720      	adds	r7, #32
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}

0800414e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800414e:	b580      	push	{r7, lr}
 8004150:	b0a4      	sub	sp, #144	@ 0x90
 8004152:	af00      	add	r7, sp, #0
 8004154:	60f8      	str	r0, [r7, #12]
 8004156:	60b9      	str	r1, [r7, #8]
 8004158:	4613      	mov	r3, r2
 800415a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800415c:	88fb      	ldrh	r3, [r7, #6]
 800415e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004162:	2b00      	cmp	r3, #0
 8004164:	f000 81dd 	beq.w	8004522 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004170:	b29b      	uxth	r3, r3
 8004172:	461a      	mov	r2, r3
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	00db      	lsls	r3, r3, #3
 800417a:	4413      	add	r3, r2
 800417c:	3302      	adds	r3, #2
 800417e:	005b      	lsls	r3, r3, #1
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	6812      	ldr	r2, [r2, #0]
 8004184:	4413      	add	r3, r2
 8004186:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800418a:	881b      	ldrh	r3, [r3, #0]
 800418c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004190:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	699a      	ldr	r2, [r3, #24]
 8004198:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800419c:	429a      	cmp	r2, r3
 800419e:	d907      	bls.n	80041b0 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	699a      	ldr	r2, [r3, #24]
 80041a4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80041a8:	1ad2      	subs	r2, r2, r3
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	619a      	str	r2, [r3, #24]
 80041ae:	e002      	b.n	80041b6 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	2200      	movs	r2, #0
 80041b4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	f040 80b9 	bne.w	8004332 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	785b      	ldrb	r3, [r3, #1]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d126      	bne.n	8004216 <HAL_PCD_EP_DB_Transmit+0xc8>
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	461a      	mov	r2, r3
 80041da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041dc:	4413      	add	r3, r2
 80041de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	011a      	lsls	r2, r3, #4
 80041e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041e8:	4413      	add	r3, r2
 80041ea:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80041ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80041f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041f2:	881b      	ldrh	r3, [r3, #0]
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041fa:	b29a      	uxth	r2, r3
 80041fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041fe:	801a      	strh	r2, [r3, #0]
 8004200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004202:	881b      	ldrh	r3, [r3, #0]
 8004204:	b29b      	uxth	r3, r3
 8004206:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800420a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800420e:	b29a      	uxth	r2, r3
 8004210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004212:	801a      	strh	r2, [r3, #0]
 8004214:	e01a      	b.n	800424c <HAL_PCD_EP_DB_Transmit+0xfe>
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	785b      	ldrb	r3, [r3, #1]
 800421a:	2b01      	cmp	r3, #1
 800421c:	d116      	bne.n	800424c <HAL_PCD_EP_DB_Transmit+0xfe>
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	637b      	str	r3, [r7, #52]	@ 0x34
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800422c:	b29b      	uxth	r3, r3
 800422e:	461a      	mov	r2, r3
 8004230:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004232:	4413      	add	r3, r2
 8004234:	637b      	str	r3, [r7, #52]	@ 0x34
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	011a      	lsls	r2, r3, #4
 800423c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800423e:	4413      	add	r3, r2
 8004240:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004244:	633b      	str	r3, [r7, #48]	@ 0x30
 8004246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004248:	2200      	movs	r2, #0
 800424a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	627b      	str	r3, [r7, #36]	@ 0x24
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	785b      	ldrb	r3, [r3, #1]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d126      	bne.n	80042a8 <HAL_PCD_EP_DB_Transmit+0x15a>
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	61fb      	str	r3, [r7, #28]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004268:	b29b      	uxth	r3, r3
 800426a:	461a      	mov	r2, r3
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	4413      	add	r3, r2
 8004270:	61fb      	str	r3, [r7, #28]
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	011a      	lsls	r2, r3, #4
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	4413      	add	r3, r2
 800427c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004280:	61bb      	str	r3, [r7, #24]
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	881b      	ldrh	r3, [r3, #0]
 8004286:	b29b      	uxth	r3, r3
 8004288:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800428c:	b29a      	uxth	r2, r3
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	801a      	strh	r2, [r3, #0]
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	881b      	ldrh	r3, [r3, #0]
 8004296:	b29b      	uxth	r3, r3
 8004298:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800429c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042a0:	b29a      	uxth	r2, r3
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	801a      	strh	r2, [r3, #0]
 80042a6:	e017      	b.n	80042d8 <HAL_PCD_EP_DB_Transmit+0x18a>
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	785b      	ldrb	r3, [r3, #1]
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d113      	bne.n	80042d8 <HAL_PCD_EP_DB_Transmit+0x18a>
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	461a      	mov	r2, r3
 80042bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042be:	4413      	add	r3, r2
 80042c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	011a      	lsls	r2, r3, #4
 80042c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ca:	4413      	add	r3, r2
 80042cc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80042d0:	623b      	str	r3, [r7, #32]
 80042d2:	6a3b      	ldr	r3, [r7, #32]
 80042d4:	2200      	movs	r2, #0
 80042d6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	4619      	mov	r1, r3
 80042de:	68f8      	ldr	r0, [r7, #12]
 80042e0:	f005 ff67 	bl	800a1b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80042e4:	88fb      	ldrh	r3, [r7, #6]
 80042e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	f000 82fc 	beq.w	80048e8 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	461a      	mov	r2, r3
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	4413      	add	r3, r2
 80042fe:	881b      	ldrh	r3, [r3, #0]
 8004300:	b29b      	uxth	r3, r3
 8004302:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004306:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800430a:	82fb      	strh	r3, [r7, #22]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	461a      	mov	r2, r3
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	441a      	add	r2, r3
 800431a:	8afb      	ldrh	r3, [r7, #22]
 800431c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004320:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004324:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004328:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800432c:	b29b      	uxth	r3, r3
 800432e:	8013      	strh	r3, [r2, #0]
 8004330:	e2da      	b.n	80048e8 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004332:	88fb      	ldrh	r3, [r7, #6]
 8004334:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d021      	beq.n	8004380 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	461a      	mov	r2, r3
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	4413      	add	r3, r2
 800434a:	881b      	ldrh	r3, [r3, #0]
 800434c:	b29b      	uxth	r3, r3
 800434e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004352:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004356:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	461a      	mov	r2, r3
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	441a      	add	r2, r3
 8004368:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800436c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004370:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004374:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004378:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800437c:	b29b      	uxth	r3, r3
 800437e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004386:	2b01      	cmp	r3, #1
 8004388:	f040 82ae 	bne.w	80048e8 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	695a      	ldr	r2, [r3, #20]
 8004390:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004394:	441a      	add	r2, r3
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	69da      	ldr	r2, [r3, #28]
 800439e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80043a2:	441a      	add	r2, r3
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	6a1a      	ldr	r2, [r3, #32]
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	691b      	ldr	r3, [r3, #16]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d30b      	bcc.n	80043cc <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	6a1a      	ldr	r2, [r3, #32]
 80043c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043c4:	1ad2      	subs	r2, r2, r3
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	621a      	str	r2, [r3, #32]
 80043ca:	e017      	b.n	80043fc <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	6a1b      	ldr	r3, [r3, #32]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d108      	bne.n	80043e6 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80043d4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80043d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80043e4:	e00a      	b.n	80043fc <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	6a1b      	ldr	r3, [r3, #32]
 80043f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	2200      	movs	r2, #0
 80043fa:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	785b      	ldrb	r3, [r3, #1]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d165      	bne.n	80044d0 <HAL_PCD_EP_DB_Transmit+0x382>
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004412:	b29b      	uxth	r3, r3
 8004414:	461a      	mov	r2, r3
 8004416:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004418:	4413      	add	r3, r2
 800441a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	011a      	lsls	r2, r3, #4
 8004422:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004424:	4413      	add	r3, r2
 8004426:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800442a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800442c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800442e:	881b      	ldrh	r3, [r3, #0]
 8004430:	b29b      	uxth	r3, r3
 8004432:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004436:	b29a      	uxth	r2, r3
 8004438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800443a:	801a      	strh	r2, [r3, #0]
 800443c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004440:	2b3e      	cmp	r3, #62	@ 0x3e
 8004442:	d91d      	bls.n	8004480 <HAL_PCD_EP_DB_Transmit+0x332>
 8004444:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004448:	095b      	lsrs	r3, r3, #5
 800444a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800444c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004450:	f003 031f 	and.w	r3, r3, #31
 8004454:	2b00      	cmp	r3, #0
 8004456:	d102      	bne.n	800445e <HAL_PCD_EP_DB_Transmit+0x310>
 8004458:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800445a:	3b01      	subs	r3, #1
 800445c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800445e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004460:	881b      	ldrh	r3, [r3, #0]
 8004462:	b29a      	uxth	r2, r3
 8004464:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004466:	b29b      	uxth	r3, r3
 8004468:	029b      	lsls	r3, r3, #10
 800446a:	b29b      	uxth	r3, r3
 800446c:	4313      	orrs	r3, r2
 800446e:	b29b      	uxth	r3, r3
 8004470:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004474:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004478:	b29a      	uxth	r2, r3
 800447a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800447c:	801a      	strh	r2, [r3, #0]
 800447e:	e044      	b.n	800450a <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004480:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004484:	2b00      	cmp	r3, #0
 8004486:	d10a      	bne.n	800449e <HAL_PCD_EP_DB_Transmit+0x350>
 8004488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800448a:	881b      	ldrh	r3, [r3, #0]
 800448c:	b29b      	uxth	r3, r3
 800448e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004492:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004496:	b29a      	uxth	r2, r3
 8004498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800449a:	801a      	strh	r2, [r3, #0]
 800449c:	e035      	b.n	800450a <HAL_PCD_EP_DB_Transmit+0x3bc>
 800449e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80044a2:	085b      	lsrs	r3, r3, #1
 80044a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80044aa:	f003 0301 	and.w	r3, r3, #1
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d002      	beq.n	80044b8 <HAL_PCD_EP_DB_Transmit+0x36a>
 80044b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044b4:	3301      	adds	r3, #1
 80044b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044ba:	881b      	ldrh	r3, [r3, #0]
 80044bc:	b29a      	uxth	r2, r3
 80044be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	029b      	lsls	r3, r3, #10
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	4313      	orrs	r3, r2
 80044c8:	b29a      	uxth	r2, r3
 80044ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044cc:	801a      	strh	r2, [r3, #0]
 80044ce:	e01c      	b.n	800450a <HAL_PCD_EP_DB_Transmit+0x3bc>
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	785b      	ldrb	r3, [r3, #1]
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d118      	bne.n	800450a <HAL_PCD_EP_DB_Transmit+0x3bc>
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	461a      	mov	r2, r3
 80044ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044ec:	4413      	add	r3, r2
 80044ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	011a      	lsls	r2, r3, #4
 80044f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044f8:	4413      	add	r3, r2
 80044fa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80044fe:	643b      	str	r3, [r7, #64]	@ 0x40
 8004500:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004504:	b29a      	uxth	r2, r3
 8004506:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004508:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6818      	ldr	r0, [r3, #0]
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	6959      	ldr	r1, [r3, #20]
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	891a      	ldrh	r2, [r3, #8]
 8004516:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800451a:	b29b      	uxth	r3, r3
 800451c:	f004 fa1d 	bl	800895a <USB_WritePMA>
 8004520:	e1e2      	b.n	80048e8 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800452a:	b29b      	uxth	r3, r3
 800452c:	461a      	mov	r2, r3
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	00db      	lsls	r3, r3, #3
 8004534:	4413      	add	r3, r2
 8004536:	3306      	adds	r3, #6
 8004538:	005b      	lsls	r3, r3, #1
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	6812      	ldr	r2, [r2, #0]
 800453e:	4413      	add	r3, r2
 8004540:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004544:	881b      	ldrh	r3, [r3, #0]
 8004546:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800454a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	699a      	ldr	r2, [r3, #24]
 8004552:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004556:	429a      	cmp	r2, r3
 8004558:	d307      	bcc.n	800456a <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	699a      	ldr	r2, [r3, #24]
 800455e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004562:	1ad2      	subs	r2, r2, r3
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	619a      	str	r2, [r3, #24]
 8004568:	e002      	b.n	8004570 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	2200      	movs	r2, #0
 800456e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	2b00      	cmp	r3, #0
 8004576:	f040 80c0 	bne.w	80046fa <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	785b      	ldrb	r3, [r3, #1]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d126      	bne.n	80045d0 <HAL_PCD_EP_DB_Transmit+0x482>
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004590:	b29b      	uxth	r3, r3
 8004592:	461a      	mov	r2, r3
 8004594:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004596:	4413      	add	r3, r2
 8004598:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	011a      	lsls	r2, r3, #4
 80045a0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80045a2:	4413      	add	r3, r2
 80045a4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80045a8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80045aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045ac:	881b      	ldrh	r3, [r3, #0]
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045b4:	b29a      	uxth	r2, r3
 80045b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045b8:	801a      	strh	r2, [r3, #0]
 80045ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045bc:	881b      	ldrh	r3, [r3, #0]
 80045be:	b29b      	uxth	r3, r3
 80045c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045c8:	b29a      	uxth	r2, r3
 80045ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045cc:	801a      	strh	r2, [r3, #0]
 80045ce:	e01a      	b.n	8004606 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	785b      	ldrb	r3, [r3, #1]
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d116      	bne.n	8004606 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	667b      	str	r3, [r7, #100]	@ 0x64
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	461a      	mov	r2, r3
 80045ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80045ec:	4413      	add	r3, r2
 80045ee:	667b      	str	r3, [r7, #100]	@ 0x64
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	011a      	lsls	r2, r3, #4
 80045f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80045f8:	4413      	add	r3, r2
 80045fa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80045fe:	663b      	str	r3, [r7, #96]	@ 0x60
 8004600:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004602:	2200      	movs	r2, #0
 8004604:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	677b      	str	r3, [r7, #116]	@ 0x74
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	785b      	ldrb	r3, [r3, #1]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d12b      	bne.n	800466c <HAL_PCD_EP_DB_Transmit+0x51e>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004622:	b29b      	uxth	r3, r3
 8004624:	461a      	mov	r2, r3
 8004626:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004628:	4413      	add	r3, r2
 800462a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	011a      	lsls	r2, r3, #4
 8004632:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004634:	4413      	add	r3, r2
 8004636:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800463a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800463e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004642:	881b      	ldrh	r3, [r3, #0]
 8004644:	b29b      	uxth	r3, r3
 8004646:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800464a:	b29a      	uxth	r2, r3
 800464c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004650:	801a      	strh	r2, [r3, #0]
 8004652:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004656:	881b      	ldrh	r3, [r3, #0]
 8004658:	b29b      	uxth	r3, r3
 800465a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800465e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004662:	b29a      	uxth	r2, r3
 8004664:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004668:	801a      	strh	r2, [r3, #0]
 800466a:	e017      	b.n	800469c <HAL_PCD_EP_DB_Transmit+0x54e>
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	785b      	ldrb	r3, [r3, #1]
 8004670:	2b01      	cmp	r3, #1
 8004672:	d113      	bne.n	800469c <HAL_PCD_EP_DB_Transmit+0x54e>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800467c:	b29b      	uxth	r3, r3
 800467e:	461a      	mov	r2, r3
 8004680:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004682:	4413      	add	r3, r2
 8004684:	677b      	str	r3, [r7, #116]	@ 0x74
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	011a      	lsls	r2, r3, #4
 800468c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800468e:	4413      	add	r3, r2
 8004690:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004694:	673b      	str	r3, [r7, #112]	@ 0x70
 8004696:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004698:	2200      	movs	r2, #0
 800469a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	4619      	mov	r1, r3
 80046a2:	68f8      	ldr	r0, [r7, #12]
 80046a4:	f005 fd85 	bl	800a1b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80046a8:	88fb      	ldrh	r3, [r7, #6]
 80046aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	f040 811a 	bne.w	80048e8 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	461a      	mov	r2, r3
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	4413      	add	r3, r2
 80046c2:	881b      	ldrh	r3, [r3, #0]
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046ce:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	461a      	mov	r2, r3
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	441a      	add	r2, r3
 80046e0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80046e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80046f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	8013      	strh	r3, [r2, #0]
 80046f8:	e0f6      	b.n	80048e8 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80046fa:	88fb      	ldrh	r3, [r7, #6]
 80046fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d121      	bne.n	8004748 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	461a      	mov	r2, r3
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	4413      	add	r3, r2
 8004712:	881b      	ldrh	r3, [r3, #0]
 8004714:	b29b      	uxth	r3, r3
 8004716:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800471a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800471e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	461a      	mov	r2, r3
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	441a      	add	r2, r3
 8004730:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004734:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004738:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800473c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004740:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004744:	b29b      	uxth	r3, r3
 8004746:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800474e:	2b01      	cmp	r3, #1
 8004750:	f040 80ca 	bne.w	80048e8 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	695a      	ldr	r2, [r3, #20]
 8004758:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800475c:	441a      	add	r2, r3
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	69da      	ldr	r2, [r3, #28]
 8004766:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800476a:	441a      	add	r2, r3
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	6a1a      	ldr	r2, [r3, #32]
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	429a      	cmp	r2, r3
 800477a:	d30b      	bcc.n	8004794 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	691b      	ldr	r3, [r3, #16]
 8004780:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	6a1a      	ldr	r2, [r3, #32]
 8004788:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800478c:	1ad2      	subs	r2, r2, r3
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	621a      	str	r2, [r3, #32]
 8004792:	e017      	b.n	80047c4 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	6a1b      	ldr	r3, [r3, #32]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d108      	bne.n	80047ae <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 800479c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80047a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80047ac:	e00a      	b.n	80047c4 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	6a1b      	ldr	r3, [r3, #32]
 80047b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	2200      	movs	r2, #0
 80047ba:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	657b      	str	r3, [r7, #84]	@ 0x54
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	785b      	ldrb	r3, [r3, #1]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d165      	bne.n	800489e <HAL_PCD_EP_DB_Transmit+0x750>
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	461a      	mov	r2, r3
 80047e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80047e6:	4413      	add	r3, r2
 80047e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	011a      	lsls	r2, r3, #4
 80047f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80047f2:	4413      	add	r3, r2
 80047f4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80047f8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80047fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80047fc:	881b      	ldrh	r3, [r3, #0]
 80047fe:	b29b      	uxth	r3, r3
 8004800:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004804:	b29a      	uxth	r2, r3
 8004806:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004808:	801a      	strh	r2, [r3, #0]
 800480a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800480e:	2b3e      	cmp	r3, #62	@ 0x3e
 8004810:	d91d      	bls.n	800484e <HAL_PCD_EP_DB_Transmit+0x700>
 8004812:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004816:	095b      	lsrs	r3, r3, #5
 8004818:	66bb      	str	r3, [r7, #104]	@ 0x68
 800481a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800481e:	f003 031f 	and.w	r3, r3, #31
 8004822:	2b00      	cmp	r3, #0
 8004824:	d102      	bne.n	800482c <HAL_PCD_EP_DB_Transmit+0x6de>
 8004826:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004828:	3b01      	subs	r3, #1
 800482a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800482c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800482e:	881b      	ldrh	r3, [r3, #0]
 8004830:	b29a      	uxth	r2, r3
 8004832:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004834:	b29b      	uxth	r3, r3
 8004836:	029b      	lsls	r3, r3, #10
 8004838:	b29b      	uxth	r3, r3
 800483a:	4313      	orrs	r3, r2
 800483c:	b29b      	uxth	r3, r3
 800483e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004842:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004846:	b29a      	uxth	r2, r3
 8004848:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800484a:	801a      	strh	r2, [r3, #0]
 800484c:	e041      	b.n	80048d2 <HAL_PCD_EP_DB_Transmit+0x784>
 800484e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004852:	2b00      	cmp	r3, #0
 8004854:	d10a      	bne.n	800486c <HAL_PCD_EP_DB_Transmit+0x71e>
 8004856:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004858:	881b      	ldrh	r3, [r3, #0]
 800485a:	b29b      	uxth	r3, r3
 800485c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004860:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004864:	b29a      	uxth	r2, r3
 8004866:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004868:	801a      	strh	r2, [r3, #0]
 800486a:	e032      	b.n	80048d2 <HAL_PCD_EP_DB_Transmit+0x784>
 800486c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004870:	085b      	lsrs	r3, r3, #1
 8004872:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004874:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004878:	f003 0301 	and.w	r3, r3, #1
 800487c:	2b00      	cmp	r3, #0
 800487e:	d002      	beq.n	8004886 <HAL_PCD_EP_DB_Transmit+0x738>
 8004880:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004882:	3301      	adds	r3, #1
 8004884:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004886:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004888:	881b      	ldrh	r3, [r3, #0]
 800488a:	b29a      	uxth	r2, r3
 800488c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800488e:	b29b      	uxth	r3, r3
 8004890:	029b      	lsls	r3, r3, #10
 8004892:	b29b      	uxth	r3, r3
 8004894:	4313      	orrs	r3, r2
 8004896:	b29a      	uxth	r2, r3
 8004898:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800489a:	801a      	strh	r2, [r3, #0]
 800489c:	e019      	b.n	80048d2 <HAL_PCD_EP_DB_Transmit+0x784>
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	785b      	ldrb	r3, [r3, #1]
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d115      	bne.n	80048d2 <HAL_PCD_EP_DB_Transmit+0x784>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	461a      	mov	r2, r3
 80048b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048b4:	4413      	add	r3, r2
 80048b6:	657b      	str	r3, [r7, #84]	@ 0x54
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	011a      	lsls	r2, r3, #4
 80048be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048c0:	4413      	add	r3, r2
 80048c2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80048c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80048c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80048cc:	b29a      	uxth	r2, r3
 80048ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048d0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6818      	ldr	r0, [r3, #0]
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	6959      	ldr	r1, [r3, #20]
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	895a      	ldrh	r2, [r3, #10]
 80048de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	f004 f839 	bl	800895a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	461a      	mov	r2, r3
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	4413      	add	r3, r2
 80048f6:	881b      	ldrh	r3, [r3, #0]
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004902:	82bb      	strh	r3, [r7, #20]
 8004904:	8abb      	ldrh	r3, [r7, #20]
 8004906:	f083 0310 	eor.w	r3, r3, #16
 800490a:	82bb      	strh	r3, [r7, #20]
 800490c:	8abb      	ldrh	r3, [r7, #20]
 800490e:	f083 0320 	eor.w	r3, r3, #32
 8004912:	82bb      	strh	r3, [r7, #20]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	461a      	mov	r2, r3
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	441a      	add	r2, r3
 8004922:	8abb      	ldrh	r3, [r7, #20]
 8004924:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004928:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800492c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004930:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004934:	b29b      	uxth	r3, r3
 8004936:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3790      	adds	r7, #144	@ 0x90
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}

08004942 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004942:	b480      	push	{r7}
 8004944:	b087      	sub	sp, #28
 8004946:	af00      	add	r7, sp, #0
 8004948:	60f8      	str	r0, [r7, #12]
 800494a:	607b      	str	r3, [r7, #4]
 800494c:	460b      	mov	r3, r1
 800494e:	817b      	strh	r3, [r7, #10]
 8004950:	4613      	mov	r3, r2
 8004952:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004954:	897b      	ldrh	r3, [r7, #10]
 8004956:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800495a:	b29b      	uxth	r3, r3
 800495c:	2b00      	cmp	r3, #0
 800495e:	d00b      	beq.n	8004978 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004960:	897b      	ldrh	r3, [r7, #10]
 8004962:	f003 0207 	and.w	r2, r3, #7
 8004966:	4613      	mov	r3, r2
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	4413      	add	r3, r2
 800496c:	00db      	lsls	r3, r3, #3
 800496e:	3310      	adds	r3, #16
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	4413      	add	r3, r2
 8004974:	617b      	str	r3, [r7, #20]
 8004976:	e009      	b.n	800498c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004978:	897a      	ldrh	r2, [r7, #10]
 800497a:	4613      	mov	r3, r2
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	4413      	add	r3, r2
 8004980:	00db      	lsls	r3, r3, #3
 8004982:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	4413      	add	r3, r2
 800498a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800498c:	893b      	ldrh	r3, [r7, #8]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d107      	bne.n	80049a2 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	2200      	movs	r2, #0
 8004996:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	b29a      	uxth	r2, r3
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	80da      	strh	r2, [r3, #6]
 80049a0:	e00b      	b.n	80049ba <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	2201      	movs	r2, #1
 80049a6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	b29a      	uxth	r2, r3
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	0c1b      	lsrs	r3, r3, #16
 80049b4:	b29a      	uxth	r2, r3
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80049ba:	2300      	movs	r3, #0
}
 80049bc:	4618      	mov	r0, r3
 80049be:	371c      	adds	r7, #28
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bc80      	pop	{r7}
 80049c4:	4770      	bx	lr
	...

080049c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b086      	sub	sp, #24
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d101      	bne.n	80049da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e272      	b.n	8004ec0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0301 	and.w	r3, r3, #1
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	f000 8087 	beq.w	8004af6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80049e8:	4b92      	ldr	r3, [pc, #584]	@ (8004c34 <HAL_RCC_OscConfig+0x26c>)
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f003 030c 	and.w	r3, r3, #12
 80049f0:	2b04      	cmp	r3, #4
 80049f2:	d00c      	beq.n	8004a0e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80049f4:	4b8f      	ldr	r3, [pc, #572]	@ (8004c34 <HAL_RCC_OscConfig+0x26c>)
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	f003 030c 	and.w	r3, r3, #12
 80049fc:	2b08      	cmp	r3, #8
 80049fe:	d112      	bne.n	8004a26 <HAL_RCC_OscConfig+0x5e>
 8004a00:	4b8c      	ldr	r3, [pc, #560]	@ (8004c34 <HAL_RCC_OscConfig+0x26c>)
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a0c:	d10b      	bne.n	8004a26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a0e:	4b89      	ldr	r3, [pc, #548]	@ (8004c34 <HAL_RCC_OscConfig+0x26c>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d06c      	beq.n	8004af4 <HAL_RCC_OscConfig+0x12c>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d168      	bne.n	8004af4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e24c      	b.n	8004ec0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a2e:	d106      	bne.n	8004a3e <HAL_RCC_OscConfig+0x76>
 8004a30:	4b80      	ldr	r3, [pc, #512]	@ (8004c34 <HAL_RCC_OscConfig+0x26c>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a7f      	ldr	r2, [pc, #508]	@ (8004c34 <HAL_RCC_OscConfig+0x26c>)
 8004a36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a3a:	6013      	str	r3, [r2, #0]
 8004a3c:	e02e      	b.n	8004a9c <HAL_RCC_OscConfig+0xd4>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d10c      	bne.n	8004a60 <HAL_RCC_OscConfig+0x98>
 8004a46:	4b7b      	ldr	r3, [pc, #492]	@ (8004c34 <HAL_RCC_OscConfig+0x26c>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a7a      	ldr	r2, [pc, #488]	@ (8004c34 <HAL_RCC_OscConfig+0x26c>)
 8004a4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a50:	6013      	str	r3, [r2, #0]
 8004a52:	4b78      	ldr	r3, [pc, #480]	@ (8004c34 <HAL_RCC_OscConfig+0x26c>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a77      	ldr	r2, [pc, #476]	@ (8004c34 <HAL_RCC_OscConfig+0x26c>)
 8004a58:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a5c:	6013      	str	r3, [r2, #0]
 8004a5e:	e01d      	b.n	8004a9c <HAL_RCC_OscConfig+0xd4>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a68:	d10c      	bne.n	8004a84 <HAL_RCC_OscConfig+0xbc>
 8004a6a:	4b72      	ldr	r3, [pc, #456]	@ (8004c34 <HAL_RCC_OscConfig+0x26c>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a71      	ldr	r2, [pc, #452]	@ (8004c34 <HAL_RCC_OscConfig+0x26c>)
 8004a70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a74:	6013      	str	r3, [r2, #0]
 8004a76:	4b6f      	ldr	r3, [pc, #444]	@ (8004c34 <HAL_RCC_OscConfig+0x26c>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a6e      	ldr	r2, [pc, #440]	@ (8004c34 <HAL_RCC_OscConfig+0x26c>)
 8004a7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a80:	6013      	str	r3, [r2, #0]
 8004a82:	e00b      	b.n	8004a9c <HAL_RCC_OscConfig+0xd4>
 8004a84:	4b6b      	ldr	r3, [pc, #428]	@ (8004c34 <HAL_RCC_OscConfig+0x26c>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a6a      	ldr	r2, [pc, #424]	@ (8004c34 <HAL_RCC_OscConfig+0x26c>)
 8004a8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a8e:	6013      	str	r3, [r2, #0]
 8004a90:	4b68      	ldr	r3, [pc, #416]	@ (8004c34 <HAL_RCC_OscConfig+0x26c>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a67      	ldr	r2, [pc, #412]	@ (8004c34 <HAL_RCC_OscConfig+0x26c>)
 8004a96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a9a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d013      	beq.n	8004acc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aa4:	f7fd fd08 	bl	80024b8 <HAL_GetTick>
 8004aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aaa:	e008      	b.n	8004abe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004aac:	f7fd fd04 	bl	80024b8 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	2b64      	cmp	r3, #100	@ 0x64
 8004ab8:	d901      	bls.n	8004abe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e200      	b.n	8004ec0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004abe:	4b5d      	ldr	r3, [pc, #372]	@ (8004c34 <HAL_RCC_OscConfig+0x26c>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d0f0      	beq.n	8004aac <HAL_RCC_OscConfig+0xe4>
 8004aca:	e014      	b.n	8004af6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004acc:	f7fd fcf4 	bl	80024b8 <HAL_GetTick>
 8004ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ad2:	e008      	b.n	8004ae6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ad4:	f7fd fcf0 	bl	80024b8 <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	2b64      	cmp	r3, #100	@ 0x64
 8004ae0:	d901      	bls.n	8004ae6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e1ec      	b.n	8004ec0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ae6:	4b53      	ldr	r3, [pc, #332]	@ (8004c34 <HAL_RCC_OscConfig+0x26c>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d1f0      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x10c>
 8004af2:	e000      	b.n	8004af6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004af4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0302 	and.w	r3, r3, #2
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d063      	beq.n	8004bca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b02:	4b4c      	ldr	r3, [pc, #304]	@ (8004c34 <HAL_RCC_OscConfig+0x26c>)
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	f003 030c 	and.w	r3, r3, #12
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00b      	beq.n	8004b26 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004b0e:	4b49      	ldr	r3, [pc, #292]	@ (8004c34 <HAL_RCC_OscConfig+0x26c>)
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	f003 030c 	and.w	r3, r3, #12
 8004b16:	2b08      	cmp	r3, #8
 8004b18:	d11c      	bne.n	8004b54 <HAL_RCC_OscConfig+0x18c>
 8004b1a:	4b46      	ldr	r3, [pc, #280]	@ (8004c34 <HAL_RCC_OscConfig+0x26c>)
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d116      	bne.n	8004b54 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b26:	4b43      	ldr	r3, [pc, #268]	@ (8004c34 <HAL_RCC_OscConfig+0x26c>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0302 	and.w	r3, r3, #2
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d005      	beq.n	8004b3e <HAL_RCC_OscConfig+0x176>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d001      	beq.n	8004b3e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e1c0      	b.n	8004ec0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b3e:	4b3d      	ldr	r3, [pc, #244]	@ (8004c34 <HAL_RCC_OscConfig+0x26c>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	695b      	ldr	r3, [r3, #20]
 8004b4a:	00db      	lsls	r3, r3, #3
 8004b4c:	4939      	ldr	r1, [pc, #228]	@ (8004c34 <HAL_RCC_OscConfig+0x26c>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b52:	e03a      	b.n	8004bca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	691b      	ldr	r3, [r3, #16]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d020      	beq.n	8004b9e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b5c:	4b36      	ldr	r3, [pc, #216]	@ (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004b5e:	2201      	movs	r2, #1
 8004b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b62:	f7fd fca9 	bl	80024b8 <HAL_GetTick>
 8004b66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b68:	e008      	b.n	8004b7c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b6a:	f7fd fca5 	bl	80024b8 <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d901      	bls.n	8004b7c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e1a1      	b.n	8004ec0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b7c:	4b2d      	ldr	r3, [pc, #180]	@ (8004c34 <HAL_RCC_OscConfig+0x26c>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d0f0      	beq.n	8004b6a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b88:	4b2a      	ldr	r3, [pc, #168]	@ (8004c34 <HAL_RCC_OscConfig+0x26c>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	695b      	ldr	r3, [r3, #20]
 8004b94:	00db      	lsls	r3, r3, #3
 8004b96:	4927      	ldr	r1, [pc, #156]	@ (8004c34 <HAL_RCC_OscConfig+0x26c>)
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	600b      	str	r3, [r1, #0]
 8004b9c:	e015      	b.n	8004bca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b9e:	4b26      	ldr	r3, [pc, #152]	@ (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ba4:	f7fd fc88 	bl	80024b8 <HAL_GetTick>
 8004ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004baa:	e008      	b.n	8004bbe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bac:	f7fd fc84 	bl	80024b8 <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d901      	bls.n	8004bbe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e180      	b.n	8004ec0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bbe:	4b1d      	ldr	r3, [pc, #116]	@ (8004c34 <HAL_RCC_OscConfig+0x26c>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0302 	and.w	r3, r3, #2
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d1f0      	bne.n	8004bac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0308 	and.w	r3, r3, #8
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d03a      	beq.n	8004c4c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	699b      	ldr	r3, [r3, #24]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d019      	beq.n	8004c12 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bde:	4b17      	ldr	r3, [pc, #92]	@ (8004c3c <HAL_RCC_OscConfig+0x274>)
 8004be0:	2201      	movs	r2, #1
 8004be2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004be4:	f7fd fc68 	bl	80024b8 <HAL_GetTick>
 8004be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bea:	e008      	b.n	8004bfe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bec:	f7fd fc64 	bl	80024b8 <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d901      	bls.n	8004bfe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e160      	b.n	8004ec0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8004c34 <HAL_RCC_OscConfig+0x26c>)
 8004c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c02:	f003 0302 	and.w	r3, r3, #2
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d0f0      	beq.n	8004bec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004c0a:	2001      	movs	r0, #1
 8004c0c:	f000 face 	bl	80051ac <RCC_Delay>
 8004c10:	e01c      	b.n	8004c4c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c12:	4b0a      	ldr	r3, [pc, #40]	@ (8004c3c <HAL_RCC_OscConfig+0x274>)
 8004c14:	2200      	movs	r2, #0
 8004c16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c18:	f7fd fc4e 	bl	80024b8 <HAL_GetTick>
 8004c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c1e:	e00f      	b.n	8004c40 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c20:	f7fd fc4a 	bl	80024b8 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d908      	bls.n	8004c40 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e146      	b.n	8004ec0 <HAL_RCC_OscConfig+0x4f8>
 8004c32:	bf00      	nop
 8004c34:	40021000 	.word	0x40021000
 8004c38:	42420000 	.word	0x42420000
 8004c3c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c40:	4b92      	ldr	r3, [pc, #584]	@ (8004e8c <HAL_RCC_OscConfig+0x4c4>)
 8004c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c44:	f003 0302 	and.w	r3, r3, #2
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d1e9      	bne.n	8004c20 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0304 	and.w	r3, r3, #4
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f000 80a6 	beq.w	8004da6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c5e:	4b8b      	ldr	r3, [pc, #556]	@ (8004e8c <HAL_RCC_OscConfig+0x4c4>)
 8004c60:	69db      	ldr	r3, [r3, #28]
 8004c62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d10d      	bne.n	8004c86 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c6a:	4b88      	ldr	r3, [pc, #544]	@ (8004e8c <HAL_RCC_OscConfig+0x4c4>)
 8004c6c:	69db      	ldr	r3, [r3, #28]
 8004c6e:	4a87      	ldr	r2, [pc, #540]	@ (8004e8c <HAL_RCC_OscConfig+0x4c4>)
 8004c70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c74:	61d3      	str	r3, [r2, #28]
 8004c76:	4b85      	ldr	r3, [pc, #532]	@ (8004e8c <HAL_RCC_OscConfig+0x4c4>)
 8004c78:	69db      	ldr	r3, [r3, #28]
 8004c7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c7e:	60bb      	str	r3, [r7, #8]
 8004c80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c82:	2301      	movs	r3, #1
 8004c84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c86:	4b82      	ldr	r3, [pc, #520]	@ (8004e90 <HAL_RCC_OscConfig+0x4c8>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d118      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c92:	4b7f      	ldr	r3, [pc, #508]	@ (8004e90 <HAL_RCC_OscConfig+0x4c8>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a7e      	ldr	r2, [pc, #504]	@ (8004e90 <HAL_RCC_OscConfig+0x4c8>)
 8004c98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c9e:	f7fd fc0b 	bl	80024b8 <HAL_GetTick>
 8004ca2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ca4:	e008      	b.n	8004cb8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ca6:	f7fd fc07 	bl	80024b8 <HAL_GetTick>
 8004caa:	4602      	mov	r2, r0
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	1ad3      	subs	r3, r2, r3
 8004cb0:	2b64      	cmp	r3, #100	@ 0x64
 8004cb2:	d901      	bls.n	8004cb8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	e103      	b.n	8004ec0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cb8:	4b75      	ldr	r3, [pc, #468]	@ (8004e90 <HAL_RCC_OscConfig+0x4c8>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d0f0      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d106      	bne.n	8004cda <HAL_RCC_OscConfig+0x312>
 8004ccc:	4b6f      	ldr	r3, [pc, #444]	@ (8004e8c <HAL_RCC_OscConfig+0x4c4>)
 8004cce:	6a1b      	ldr	r3, [r3, #32]
 8004cd0:	4a6e      	ldr	r2, [pc, #440]	@ (8004e8c <HAL_RCC_OscConfig+0x4c4>)
 8004cd2:	f043 0301 	orr.w	r3, r3, #1
 8004cd6:	6213      	str	r3, [r2, #32]
 8004cd8:	e02d      	b.n	8004d36 <HAL_RCC_OscConfig+0x36e>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d10c      	bne.n	8004cfc <HAL_RCC_OscConfig+0x334>
 8004ce2:	4b6a      	ldr	r3, [pc, #424]	@ (8004e8c <HAL_RCC_OscConfig+0x4c4>)
 8004ce4:	6a1b      	ldr	r3, [r3, #32]
 8004ce6:	4a69      	ldr	r2, [pc, #420]	@ (8004e8c <HAL_RCC_OscConfig+0x4c4>)
 8004ce8:	f023 0301 	bic.w	r3, r3, #1
 8004cec:	6213      	str	r3, [r2, #32]
 8004cee:	4b67      	ldr	r3, [pc, #412]	@ (8004e8c <HAL_RCC_OscConfig+0x4c4>)
 8004cf0:	6a1b      	ldr	r3, [r3, #32]
 8004cf2:	4a66      	ldr	r2, [pc, #408]	@ (8004e8c <HAL_RCC_OscConfig+0x4c4>)
 8004cf4:	f023 0304 	bic.w	r3, r3, #4
 8004cf8:	6213      	str	r3, [r2, #32]
 8004cfa:	e01c      	b.n	8004d36 <HAL_RCC_OscConfig+0x36e>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	2b05      	cmp	r3, #5
 8004d02:	d10c      	bne.n	8004d1e <HAL_RCC_OscConfig+0x356>
 8004d04:	4b61      	ldr	r3, [pc, #388]	@ (8004e8c <HAL_RCC_OscConfig+0x4c4>)
 8004d06:	6a1b      	ldr	r3, [r3, #32]
 8004d08:	4a60      	ldr	r2, [pc, #384]	@ (8004e8c <HAL_RCC_OscConfig+0x4c4>)
 8004d0a:	f043 0304 	orr.w	r3, r3, #4
 8004d0e:	6213      	str	r3, [r2, #32]
 8004d10:	4b5e      	ldr	r3, [pc, #376]	@ (8004e8c <HAL_RCC_OscConfig+0x4c4>)
 8004d12:	6a1b      	ldr	r3, [r3, #32]
 8004d14:	4a5d      	ldr	r2, [pc, #372]	@ (8004e8c <HAL_RCC_OscConfig+0x4c4>)
 8004d16:	f043 0301 	orr.w	r3, r3, #1
 8004d1a:	6213      	str	r3, [r2, #32]
 8004d1c:	e00b      	b.n	8004d36 <HAL_RCC_OscConfig+0x36e>
 8004d1e:	4b5b      	ldr	r3, [pc, #364]	@ (8004e8c <HAL_RCC_OscConfig+0x4c4>)
 8004d20:	6a1b      	ldr	r3, [r3, #32]
 8004d22:	4a5a      	ldr	r2, [pc, #360]	@ (8004e8c <HAL_RCC_OscConfig+0x4c4>)
 8004d24:	f023 0301 	bic.w	r3, r3, #1
 8004d28:	6213      	str	r3, [r2, #32]
 8004d2a:	4b58      	ldr	r3, [pc, #352]	@ (8004e8c <HAL_RCC_OscConfig+0x4c4>)
 8004d2c:	6a1b      	ldr	r3, [r3, #32]
 8004d2e:	4a57      	ldr	r2, [pc, #348]	@ (8004e8c <HAL_RCC_OscConfig+0x4c4>)
 8004d30:	f023 0304 	bic.w	r3, r3, #4
 8004d34:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d015      	beq.n	8004d6a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d3e:	f7fd fbbb 	bl	80024b8 <HAL_GetTick>
 8004d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d44:	e00a      	b.n	8004d5c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d46:	f7fd fbb7 	bl	80024b8 <HAL_GetTick>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d901      	bls.n	8004d5c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004d58:	2303      	movs	r3, #3
 8004d5a:	e0b1      	b.n	8004ec0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d5c:	4b4b      	ldr	r3, [pc, #300]	@ (8004e8c <HAL_RCC_OscConfig+0x4c4>)
 8004d5e:	6a1b      	ldr	r3, [r3, #32]
 8004d60:	f003 0302 	and.w	r3, r3, #2
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d0ee      	beq.n	8004d46 <HAL_RCC_OscConfig+0x37e>
 8004d68:	e014      	b.n	8004d94 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d6a:	f7fd fba5 	bl	80024b8 <HAL_GetTick>
 8004d6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d70:	e00a      	b.n	8004d88 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d72:	f7fd fba1 	bl	80024b8 <HAL_GetTick>
 8004d76:	4602      	mov	r2, r0
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d901      	bls.n	8004d88 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	e09b      	b.n	8004ec0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d88:	4b40      	ldr	r3, [pc, #256]	@ (8004e8c <HAL_RCC_OscConfig+0x4c4>)
 8004d8a:	6a1b      	ldr	r3, [r3, #32]
 8004d8c:	f003 0302 	and.w	r3, r3, #2
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d1ee      	bne.n	8004d72 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004d94:	7dfb      	ldrb	r3, [r7, #23]
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d105      	bne.n	8004da6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d9a:	4b3c      	ldr	r3, [pc, #240]	@ (8004e8c <HAL_RCC_OscConfig+0x4c4>)
 8004d9c:	69db      	ldr	r3, [r3, #28]
 8004d9e:	4a3b      	ldr	r2, [pc, #236]	@ (8004e8c <HAL_RCC_OscConfig+0x4c4>)
 8004da0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004da4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	69db      	ldr	r3, [r3, #28]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	f000 8087 	beq.w	8004ebe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004db0:	4b36      	ldr	r3, [pc, #216]	@ (8004e8c <HAL_RCC_OscConfig+0x4c4>)
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	f003 030c 	and.w	r3, r3, #12
 8004db8:	2b08      	cmp	r3, #8
 8004dba:	d061      	beq.n	8004e80 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	69db      	ldr	r3, [r3, #28]
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d146      	bne.n	8004e52 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dc4:	4b33      	ldr	r3, [pc, #204]	@ (8004e94 <HAL_RCC_OscConfig+0x4cc>)
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dca:	f7fd fb75 	bl	80024b8 <HAL_GetTick>
 8004dce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004dd0:	e008      	b.n	8004de4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dd2:	f7fd fb71 	bl	80024b8 <HAL_GetTick>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d901      	bls.n	8004de4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004de0:	2303      	movs	r3, #3
 8004de2:	e06d      	b.n	8004ec0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004de4:	4b29      	ldr	r3, [pc, #164]	@ (8004e8c <HAL_RCC_OscConfig+0x4c4>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d1f0      	bne.n	8004dd2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6a1b      	ldr	r3, [r3, #32]
 8004df4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004df8:	d108      	bne.n	8004e0c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004dfa:	4b24      	ldr	r3, [pc, #144]	@ (8004e8c <HAL_RCC_OscConfig+0x4c4>)
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	4921      	ldr	r1, [pc, #132]	@ (8004e8c <HAL_RCC_OscConfig+0x4c4>)
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e0c:	4b1f      	ldr	r3, [pc, #124]	@ (8004e8c <HAL_RCC_OscConfig+0x4c4>)
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6a19      	ldr	r1, [r3, #32]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e1c:	430b      	orrs	r3, r1
 8004e1e:	491b      	ldr	r1, [pc, #108]	@ (8004e8c <HAL_RCC_OscConfig+0x4c4>)
 8004e20:	4313      	orrs	r3, r2
 8004e22:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e24:	4b1b      	ldr	r3, [pc, #108]	@ (8004e94 <HAL_RCC_OscConfig+0x4cc>)
 8004e26:	2201      	movs	r2, #1
 8004e28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e2a:	f7fd fb45 	bl	80024b8 <HAL_GetTick>
 8004e2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e30:	e008      	b.n	8004e44 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e32:	f7fd fb41 	bl	80024b8 <HAL_GetTick>
 8004e36:	4602      	mov	r2, r0
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d901      	bls.n	8004e44 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	e03d      	b.n	8004ec0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e44:	4b11      	ldr	r3, [pc, #68]	@ (8004e8c <HAL_RCC_OscConfig+0x4c4>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d0f0      	beq.n	8004e32 <HAL_RCC_OscConfig+0x46a>
 8004e50:	e035      	b.n	8004ebe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e52:	4b10      	ldr	r3, [pc, #64]	@ (8004e94 <HAL_RCC_OscConfig+0x4cc>)
 8004e54:	2200      	movs	r2, #0
 8004e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e58:	f7fd fb2e 	bl	80024b8 <HAL_GetTick>
 8004e5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e5e:	e008      	b.n	8004e72 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e60:	f7fd fb2a 	bl	80024b8 <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d901      	bls.n	8004e72 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e026      	b.n	8004ec0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e72:	4b06      	ldr	r3, [pc, #24]	@ (8004e8c <HAL_RCC_OscConfig+0x4c4>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d1f0      	bne.n	8004e60 <HAL_RCC_OscConfig+0x498>
 8004e7e:	e01e      	b.n	8004ebe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	69db      	ldr	r3, [r3, #28]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d107      	bne.n	8004e98 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e019      	b.n	8004ec0 <HAL_RCC_OscConfig+0x4f8>
 8004e8c:	40021000 	.word	0x40021000
 8004e90:	40007000 	.word	0x40007000
 8004e94:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004e98:	4b0b      	ldr	r3, [pc, #44]	@ (8004ec8 <HAL_RCC_OscConfig+0x500>)
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a1b      	ldr	r3, [r3, #32]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d106      	bne.n	8004eba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d001      	beq.n	8004ebe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e000      	b.n	8004ec0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3718      	adds	r7, #24
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	40021000 	.word	0x40021000

08004ecc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d101      	bne.n	8004ee0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e0d0      	b.n	8005082 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ee0:	4b6a      	ldr	r3, [pc, #424]	@ (800508c <HAL_RCC_ClockConfig+0x1c0>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0307 	and.w	r3, r3, #7
 8004ee8:	683a      	ldr	r2, [r7, #0]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d910      	bls.n	8004f10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eee:	4b67      	ldr	r3, [pc, #412]	@ (800508c <HAL_RCC_ClockConfig+0x1c0>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f023 0207 	bic.w	r2, r3, #7
 8004ef6:	4965      	ldr	r1, [pc, #404]	@ (800508c <HAL_RCC_ClockConfig+0x1c0>)
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004efe:	4b63      	ldr	r3, [pc, #396]	@ (800508c <HAL_RCC_ClockConfig+0x1c0>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0307 	and.w	r3, r3, #7
 8004f06:	683a      	ldr	r2, [r7, #0]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d001      	beq.n	8004f10 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e0b8      	b.n	8005082 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 0302 	and.w	r3, r3, #2
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d020      	beq.n	8004f5e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0304 	and.w	r3, r3, #4
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d005      	beq.n	8004f34 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f28:	4b59      	ldr	r3, [pc, #356]	@ (8005090 <HAL_RCC_ClockConfig+0x1c4>)
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	4a58      	ldr	r2, [pc, #352]	@ (8005090 <HAL_RCC_ClockConfig+0x1c4>)
 8004f2e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004f32:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 0308 	and.w	r3, r3, #8
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d005      	beq.n	8004f4c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f40:	4b53      	ldr	r3, [pc, #332]	@ (8005090 <HAL_RCC_ClockConfig+0x1c4>)
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	4a52      	ldr	r2, [pc, #328]	@ (8005090 <HAL_RCC_ClockConfig+0x1c4>)
 8004f46:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004f4a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f4c:	4b50      	ldr	r3, [pc, #320]	@ (8005090 <HAL_RCC_ClockConfig+0x1c4>)
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	494d      	ldr	r1, [pc, #308]	@ (8005090 <HAL_RCC_ClockConfig+0x1c4>)
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0301 	and.w	r3, r3, #1
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d040      	beq.n	8004fec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d107      	bne.n	8004f82 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f72:	4b47      	ldr	r3, [pc, #284]	@ (8005090 <HAL_RCC_ClockConfig+0x1c4>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d115      	bne.n	8004faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e07f      	b.n	8005082 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d107      	bne.n	8004f9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f8a:	4b41      	ldr	r3, [pc, #260]	@ (8005090 <HAL_RCC_ClockConfig+0x1c4>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d109      	bne.n	8004faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e073      	b.n	8005082 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f9a:	4b3d      	ldr	r3, [pc, #244]	@ (8005090 <HAL_RCC_ClockConfig+0x1c4>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0302 	and.w	r3, r3, #2
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d101      	bne.n	8004faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e06b      	b.n	8005082 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004faa:	4b39      	ldr	r3, [pc, #228]	@ (8005090 <HAL_RCC_ClockConfig+0x1c4>)
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	f023 0203 	bic.w	r2, r3, #3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	4936      	ldr	r1, [pc, #216]	@ (8005090 <HAL_RCC_ClockConfig+0x1c4>)
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fbc:	f7fd fa7c 	bl	80024b8 <HAL_GetTick>
 8004fc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fc2:	e00a      	b.n	8004fda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fc4:	f7fd fa78 	bl	80024b8 <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d901      	bls.n	8004fda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e053      	b.n	8005082 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fda:	4b2d      	ldr	r3, [pc, #180]	@ (8005090 <HAL_RCC_ClockConfig+0x1c4>)
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	f003 020c 	and.w	r2, r3, #12
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d1eb      	bne.n	8004fc4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004fec:	4b27      	ldr	r3, [pc, #156]	@ (800508c <HAL_RCC_ClockConfig+0x1c0>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0307 	and.w	r3, r3, #7
 8004ff4:	683a      	ldr	r2, [r7, #0]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d210      	bcs.n	800501c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ffa:	4b24      	ldr	r3, [pc, #144]	@ (800508c <HAL_RCC_ClockConfig+0x1c0>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f023 0207 	bic.w	r2, r3, #7
 8005002:	4922      	ldr	r1, [pc, #136]	@ (800508c <HAL_RCC_ClockConfig+0x1c0>)
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	4313      	orrs	r3, r2
 8005008:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800500a:	4b20      	ldr	r3, [pc, #128]	@ (800508c <HAL_RCC_ClockConfig+0x1c0>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0307 	and.w	r3, r3, #7
 8005012:	683a      	ldr	r2, [r7, #0]
 8005014:	429a      	cmp	r2, r3
 8005016:	d001      	beq.n	800501c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e032      	b.n	8005082 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0304 	and.w	r3, r3, #4
 8005024:	2b00      	cmp	r3, #0
 8005026:	d008      	beq.n	800503a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005028:	4b19      	ldr	r3, [pc, #100]	@ (8005090 <HAL_RCC_ClockConfig+0x1c4>)
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	4916      	ldr	r1, [pc, #88]	@ (8005090 <HAL_RCC_ClockConfig+0x1c4>)
 8005036:	4313      	orrs	r3, r2
 8005038:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0308 	and.w	r3, r3, #8
 8005042:	2b00      	cmp	r3, #0
 8005044:	d009      	beq.n	800505a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005046:	4b12      	ldr	r3, [pc, #72]	@ (8005090 <HAL_RCC_ClockConfig+0x1c4>)
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	00db      	lsls	r3, r3, #3
 8005054:	490e      	ldr	r1, [pc, #56]	@ (8005090 <HAL_RCC_ClockConfig+0x1c4>)
 8005056:	4313      	orrs	r3, r2
 8005058:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800505a:	f000 f821 	bl	80050a0 <HAL_RCC_GetSysClockFreq>
 800505e:	4602      	mov	r2, r0
 8005060:	4b0b      	ldr	r3, [pc, #44]	@ (8005090 <HAL_RCC_ClockConfig+0x1c4>)
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	091b      	lsrs	r3, r3, #4
 8005066:	f003 030f 	and.w	r3, r3, #15
 800506a:	490a      	ldr	r1, [pc, #40]	@ (8005094 <HAL_RCC_ClockConfig+0x1c8>)
 800506c:	5ccb      	ldrb	r3, [r1, r3]
 800506e:	fa22 f303 	lsr.w	r3, r2, r3
 8005072:	4a09      	ldr	r2, [pc, #36]	@ (8005098 <HAL_RCC_ClockConfig+0x1cc>)
 8005074:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005076:	4b09      	ldr	r3, [pc, #36]	@ (800509c <HAL_RCC_ClockConfig+0x1d0>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4618      	mov	r0, r3
 800507c:	f7fd f9da 	bl	8002434 <HAL_InitTick>

  return HAL_OK;
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	3710      	adds	r7, #16
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	40022000 	.word	0x40022000
 8005090:	40021000 	.word	0x40021000
 8005094:	0800d960 	.word	0x0800d960
 8005098:	20000004 	.word	0x20000004
 800509c:	20000008 	.word	0x20000008

080050a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b087      	sub	sp, #28
 80050a4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80050a6:	2300      	movs	r3, #0
 80050a8:	60fb      	str	r3, [r7, #12]
 80050aa:	2300      	movs	r3, #0
 80050ac:	60bb      	str	r3, [r7, #8]
 80050ae:	2300      	movs	r3, #0
 80050b0:	617b      	str	r3, [r7, #20]
 80050b2:	2300      	movs	r3, #0
 80050b4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80050b6:	2300      	movs	r3, #0
 80050b8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80050ba:	4b1e      	ldr	r3, [pc, #120]	@ (8005134 <HAL_RCC_GetSysClockFreq+0x94>)
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f003 030c 	and.w	r3, r3, #12
 80050c6:	2b04      	cmp	r3, #4
 80050c8:	d002      	beq.n	80050d0 <HAL_RCC_GetSysClockFreq+0x30>
 80050ca:	2b08      	cmp	r3, #8
 80050cc:	d003      	beq.n	80050d6 <HAL_RCC_GetSysClockFreq+0x36>
 80050ce:	e027      	b.n	8005120 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80050d0:	4b19      	ldr	r3, [pc, #100]	@ (8005138 <HAL_RCC_GetSysClockFreq+0x98>)
 80050d2:	613b      	str	r3, [r7, #16]
      break;
 80050d4:	e027      	b.n	8005126 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	0c9b      	lsrs	r3, r3, #18
 80050da:	f003 030f 	and.w	r3, r3, #15
 80050de:	4a17      	ldr	r2, [pc, #92]	@ (800513c <HAL_RCC_GetSysClockFreq+0x9c>)
 80050e0:	5cd3      	ldrb	r3, [r2, r3]
 80050e2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d010      	beq.n	8005110 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80050ee:	4b11      	ldr	r3, [pc, #68]	@ (8005134 <HAL_RCC_GetSysClockFreq+0x94>)
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	0c5b      	lsrs	r3, r3, #17
 80050f4:	f003 0301 	and.w	r3, r3, #1
 80050f8:	4a11      	ldr	r2, [pc, #68]	@ (8005140 <HAL_RCC_GetSysClockFreq+0xa0>)
 80050fa:	5cd3      	ldrb	r3, [r2, r3]
 80050fc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a0d      	ldr	r2, [pc, #52]	@ (8005138 <HAL_RCC_GetSysClockFreq+0x98>)
 8005102:	fb03 f202 	mul.w	r2, r3, r2
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	fbb2 f3f3 	udiv	r3, r2, r3
 800510c:	617b      	str	r3, [r7, #20]
 800510e:	e004      	b.n	800511a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a0c      	ldr	r2, [pc, #48]	@ (8005144 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005114:	fb02 f303 	mul.w	r3, r2, r3
 8005118:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	613b      	str	r3, [r7, #16]
      break;
 800511e:	e002      	b.n	8005126 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005120:	4b05      	ldr	r3, [pc, #20]	@ (8005138 <HAL_RCC_GetSysClockFreq+0x98>)
 8005122:	613b      	str	r3, [r7, #16]
      break;
 8005124:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005126:	693b      	ldr	r3, [r7, #16]
}
 8005128:	4618      	mov	r0, r3
 800512a:	371c      	adds	r7, #28
 800512c:	46bd      	mov	sp, r7
 800512e:	bc80      	pop	{r7}
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop
 8005134:	40021000 	.word	0x40021000
 8005138:	007a1200 	.word	0x007a1200
 800513c:	0800d978 	.word	0x0800d978
 8005140:	0800d988 	.word	0x0800d988
 8005144:	003d0900 	.word	0x003d0900

08005148 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005148:	b480      	push	{r7}
 800514a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800514c:	4b02      	ldr	r3, [pc, #8]	@ (8005158 <HAL_RCC_GetHCLKFreq+0x10>)
 800514e:	681b      	ldr	r3, [r3, #0]
}
 8005150:	4618      	mov	r0, r3
 8005152:	46bd      	mov	sp, r7
 8005154:	bc80      	pop	{r7}
 8005156:	4770      	bx	lr
 8005158:	20000004 	.word	0x20000004

0800515c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005160:	f7ff fff2 	bl	8005148 <HAL_RCC_GetHCLKFreq>
 8005164:	4602      	mov	r2, r0
 8005166:	4b05      	ldr	r3, [pc, #20]	@ (800517c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	0a1b      	lsrs	r3, r3, #8
 800516c:	f003 0307 	and.w	r3, r3, #7
 8005170:	4903      	ldr	r1, [pc, #12]	@ (8005180 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005172:	5ccb      	ldrb	r3, [r1, r3]
 8005174:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005178:	4618      	mov	r0, r3
 800517a:	bd80      	pop	{r7, pc}
 800517c:	40021000 	.word	0x40021000
 8005180:	0800d970 	.word	0x0800d970

08005184 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005188:	f7ff ffde 	bl	8005148 <HAL_RCC_GetHCLKFreq>
 800518c:	4602      	mov	r2, r0
 800518e:	4b05      	ldr	r3, [pc, #20]	@ (80051a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	0adb      	lsrs	r3, r3, #11
 8005194:	f003 0307 	and.w	r3, r3, #7
 8005198:	4903      	ldr	r1, [pc, #12]	@ (80051a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800519a:	5ccb      	ldrb	r3, [r1, r3]
 800519c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	40021000 	.word	0x40021000
 80051a8:	0800d970 	.word	0x0800d970

080051ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b085      	sub	sp, #20
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80051b4:	4b0a      	ldr	r3, [pc, #40]	@ (80051e0 <RCC_Delay+0x34>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a0a      	ldr	r2, [pc, #40]	@ (80051e4 <RCC_Delay+0x38>)
 80051ba:	fba2 2303 	umull	r2, r3, r2, r3
 80051be:	0a5b      	lsrs	r3, r3, #9
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	fb02 f303 	mul.w	r3, r2, r3
 80051c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80051c8:	bf00      	nop
  }
  while (Delay --);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	1e5a      	subs	r2, r3, #1
 80051ce:	60fa      	str	r2, [r7, #12]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d1f9      	bne.n	80051c8 <RCC_Delay+0x1c>
}
 80051d4:	bf00      	nop
 80051d6:	bf00      	nop
 80051d8:	3714      	adds	r7, #20
 80051da:	46bd      	mov	sp, r7
 80051dc:	bc80      	pop	{r7}
 80051de:	4770      	bx	lr
 80051e0:	20000004 	.word	0x20000004
 80051e4:	10624dd3 	.word	0x10624dd3

080051e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b086      	sub	sp, #24
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80051f0:	2300      	movs	r3, #0
 80051f2:	613b      	str	r3, [r7, #16]
 80051f4:	2300      	movs	r3, #0
 80051f6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 0301 	and.w	r3, r3, #1
 8005200:	2b00      	cmp	r3, #0
 8005202:	d07d      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005204:	2300      	movs	r3, #0
 8005206:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005208:	4b4f      	ldr	r3, [pc, #316]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800520a:	69db      	ldr	r3, [r3, #28]
 800520c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005210:	2b00      	cmp	r3, #0
 8005212:	d10d      	bne.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005214:	4b4c      	ldr	r3, [pc, #304]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005216:	69db      	ldr	r3, [r3, #28]
 8005218:	4a4b      	ldr	r2, [pc, #300]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800521a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800521e:	61d3      	str	r3, [r2, #28]
 8005220:	4b49      	ldr	r3, [pc, #292]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005222:	69db      	ldr	r3, [r3, #28]
 8005224:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005228:	60bb      	str	r3, [r7, #8]
 800522a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800522c:	2301      	movs	r3, #1
 800522e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005230:	4b46      	ldr	r3, [pc, #280]	@ (800534c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005238:	2b00      	cmp	r3, #0
 800523a:	d118      	bne.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800523c:	4b43      	ldr	r3, [pc, #268]	@ (800534c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a42      	ldr	r2, [pc, #264]	@ (800534c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005242:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005246:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005248:	f7fd f936 	bl	80024b8 <HAL_GetTick>
 800524c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800524e:	e008      	b.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005250:	f7fd f932 	bl	80024b8 <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	2b64      	cmp	r3, #100	@ 0x64
 800525c:	d901      	bls.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e06d      	b.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005262:	4b3a      	ldr	r3, [pc, #232]	@ (800534c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800526a:	2b00      	cmp	r3, #0
 800526c:	d0f0      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800526e:	4b36      	ldr	r3, [pc, #216]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005270:	6a1b      	ldr	r3, [r3, #32]
 8005272:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005276:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d02e      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005286:	68fa      	ldr	r2, [r7, #12]
 8005288:	429a      	cmp	r2, r3
 800528a:	d027      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800528c:	4b2e      	ldr	r3, [pc, #184]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800528e:	6a1b      	ldr	r3, [r3, #32]
 8005290:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005294:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005296:	4b2e      	ldr	r3, [pc, #184]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005298:	2201      	movs	r2, #1
 800529a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800529c:	4b2c      	ldr	r3, [pc, #176]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800529e:	2200      	movs	r2, #0
 80052a0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80052a2:	4a29      	ldr	r2, [pc, #164]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f003 0301 	and.w	r3, r3, #1
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d014      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052b2:	f7fd f901 	bl	80024b8 <HAL_GetTick>
 80052b6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052b8:	e00a      	b.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052ba:	f7fd f8fd 	bl	80024b8 <HAL_GetTick>
 80052be:	4602      	mov	r2, r0
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d901      	bls.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80052cc:	2303      	movs	r3, #3
 80052ce:	e036      	b.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052d0:	4b1d      	ldr	r3, [pc, #116]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052d2:	6a1b      	ldr	r3, [r3, #32]
 80052d4:	f003 0302 	and.w	r3, r3, #2
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d0ee      	beq.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052dc:	4b1a      	ldr	r3, [pc, #104]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052de:	6a1b      	ldr	r3, [r3, #32]
 80052e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	4917      	ldr	r1, [pc, #92]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052ea:	4313      	orrs	r3, r2
 80052ec:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80052ee:	7dfb      	ldrb	r3, [r7, #23]
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d105      	bne.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052f4:	4b14      	ldr	r3, [pc, #80]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052f6:	69db      	ldr	r3, [r3, #28]
 80052f8:	4a13      	ldr	r2, [pc, #76]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052fe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0302 	and.w	r3, r3, #2
 8005308:	2b00      	cmp	r3, #0
 800530a:	d008      	beq.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800530c:	4b0e      	ldr	r3, [pc, #56]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	490b      	ldr	r1, [pc, #44]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800531a:	4313      	orrs	r3, r2
 800531c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 0310 	and.w	r3, r3, #16
 8005326:	2b00      	cmp	r3, #0
 8005328:	d008      	beq.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800532a:	4b07      	ldr	r3, [pc, #28]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	4904      	ldr	r1, [pc, #16]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005338:	4313      	orrs	r3, r2
 800533a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3718      	adds	r7, #24
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop
 8005348:	40021000 	.word	0x40021000
 800534c:	40007000 	.word	0x40007000
 8005350:	42420440 	.word	0x42420440

08005354 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b082      	sub	sp, #8
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d101      	bne.n	8005366 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e042      	b.n	80053ec <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800536c:	b2db      	uxtb	r3, r3
 800536e:	2b00      	cmp	r3, #0
 8005370:	d106      	bne.n	8005380 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f7fc ff36 	bl	80021ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2224      	movs	r2, #36	@ 0x24
 8005384:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	68da      	ldr	r2, [r3, #12]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005396:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f000 ff4f 	bl	800623c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	691a      	ldr	r2, [r3, #16]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80053ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	695a      	ldr	r2, [r3, #20]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80053bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	68da      	ldr	r2, [r3, #12]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80053cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2220      	movs	r2, #32
 80053d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2220      	movs	r2, #32
 80053e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80053ea:	2300      	movs	r3, #0
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3708      	adds	r7, #8
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}

080053f4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b08a      	sub	sp, #40	@ 0x28
 80053f8:	af02      	add	r7, sp, #8
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	603b      	str	r3, [r7, #0]
 8005400:	4613      	mov	r3, r2
 8005402:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005404:	2300      	movs	r3, #0
 8005406:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800540e:	b2db      	uxtb	r3, r3
 8005410:	2b20      	cmp	r3, #32
 8005412:	d175      	bne.n	8005500 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d002      	beq.n	8005420 <HAL_UART_Transmit+0x2c>
 800541a:	88fb      	ldrh	r3, [r7, #6]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d101      	bne.n	8005424 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	e06e      	b.n	8005502 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2200      	movs	r2, #0
 8005428:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2221      	movs	r2, #33	@ 0x21
 800542e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005432:	f7fd f841 	bl	80024b8 <HAL_GetTick>
 8005436:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	88fa      	ldrh	r2, [r7, #6]
 800543c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	88fa      	ldrh	r2, [r7, #6]
 8005442:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800544c:	d108      	bne.n	8005460 <HAL_UART_Transmit+0x6c>
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d104      	bne.n	8005460 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005456:	2300      	movs	r3, #0
 8005458:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	61bb      	str	r3, [r7, #24]
 800545e:	e003      	b.n	8005468 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005464:	2300      	movs	r3, #0
 8005466:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005468:	e02e      	b.n	80054c8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	9300      	str	r3, [sp, #0]
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	2200      	movs	r2, #0
 8005472:	2180      	movs	r1, #128	@ 0x80
 8005474:	68f8      	ldr	r0, [r7, #12]
 8005476:	f000 fc2c 	bl	8005cd2 <UART_WaitOnFlagUntilTimeout>
 800547a:	4603      	mov	r3, r0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d005      	beq.n	800548c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2220      	movs	r2, #32
 8005484:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005488:	2303      	movs	r3, #3
 800548a:	e03a      	b.n	8005502 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d10b      	bne.n	80054aa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	881b      	ldrh	r3, [r3, #0]
 8005496:	461a      	mov	r2, r3
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80054a2:	69bb      	ldr	r3, [r7, #24]
 80054a4:	3302      	adds	r3, #2
 80054a6:	61bb      	str	r3, [r7, #24]
 80054a8:	e007      	b.n	80054ba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	781a      	ldrb	r2, [r3, #0]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	3301      	adds	r3, #1
 80054b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80054be:	b29b      	uxth	r3, r3
 80054c0:	3b01      	subs	r3, #1
 80054c2:	b29a      	uxth	r2, r3
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d1cb      	bne.n	800546a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	9300      	str	r3, [sp, #0]
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	2200      	movs	r2, #0
 80054da:	2140      	movs	r1, #64	@ 0x40
 80054dc:	68f8      	ldr	r0, [r7, #12]
 80054de:	f000 fbf8 	bl	8005cd2 <UART_WaitOnFlagUntilTimeout>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d005      	beq.n	80054f4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2220      	movs	r2, #32
 80054ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80054f0:	2303      	movs	r3, #3
 80054f2:	e006      	b.n	8005502 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2220      	movs	r2, #32
 80054f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80054fc:	2300      	movs	r3, #0
 80054fe:	e000      	b.n	8005502 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005500:	2302      	movs	r3, #2
  }
}
 8005502:	4618      	mov	r0, r3
 8005504:	3720      	adds	r7, #32
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}

0800550a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800550a:	b580      	push	{r7, lr}
 800550c:	b084      	sub	sp, #16
 800550e:	af00      	add	r7, sp, #0
 8005510:	60f8      	str	r0, [r7, #12]
 8005512:	60b9      	str	r1, [r7, #8]
 8005514:	4613      	mov	r3, r2
 8005516:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800551e:	b2db      	uxtb	r3, r3
 8005520:	2b20      	cmp	r3, #32
 8005522:	d112      	bne.n	800554a <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d002      	beq.n	8005530 <HAL_UART_Receive_DMA+0x26>
 800552a:	88fb      	ldrh	r3, [r7, #6]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d101      	bne.n	8005534 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	e00b      	b.n	800554c <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2200      	movs	r2, #0
 8005538:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800553a:	88fb      	ldrh	r3, [r7, #6]
 800553c:	461a      	mov	r2, r3
 800553e:	68b9      	ldr	r1, [r7, #8]
 8005540:	68f8      	ldr	r0, [r7, #12]
 8005542:	f000 fc1f 	bl	8005d84 <UART_Start_Receive_DMA>
 8005546:	4603      	mov	r3, r0
 8005548:	e000      	b.n	800554c <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800554a:	2302      	movs	r3, #2
  }
}
 800554c:	4618      	mov	r0, r3
 800554e:	3710      	adds	r7, #16
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}

08005554 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b0ba      	sub	sp, #232	@ 0xe8
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	695b      	ldr	r3, [r3, #20]
 8005576:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800557a:	2300      	movs	r3, #0
 800557c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005580:	2300      	movs	r3, #0
 8005582:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800558a:	f003 030f 	and.w	r3, r3, #15
 800558e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005592:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005596:	2b00      	cmp	r3, #0
 8005598:	d10f      	bne.n	80055ba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800559a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800559e:	f003 0320 	and.w	r3, r3, #32
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d009      	beq.n	80055ba <HAL_UART_IRQHandler+0x66>
 80055a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055aa:	f003 0320 	and.w	r3, r3, #32
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d003      	beq.n	80055ba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 fd84 	bl	80060c0 <UART_Receive_IT>
      return;
 80055b8:	e25b      	b.n	8005a72 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80055ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80055be:	2b00      	cmp	r3, #0
 80055c0:	f000 80de 	beq.w	8005780 <HAL_UART_IRQHandler+0x22c>
 80055c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055c8:	f003 0301 	and.w	r3, r3, #1
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d106      	bne.n	80055de <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80055d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055d4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80055d8:	2b00      	cmp	r3, #0
 80055da:	f000 80d1 	beq.w	8005780 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80055de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055e2:	f003 0301 	and.w	r3, r3, #1
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00b      	beq.n	8005602 <HAL_UART_IRQHandler+0xae>
 80055ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d005      	beq.n	8005602 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055fa:	f043 0201 	orr.w	r2, r3, #1
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005606:	f003 0304 	and.w	r3, r3, #4
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00b      	beq.n	8005626 <HAL_UART_IRQHandler+0xd2>
 800560e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005612:	f003 0301 	and.w	r3, r3, #1
 8005616:	2b00      	cmp	r3, #0
 8005618:	d005      	beq.n	8005626 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800561e:	f043 0202 	orr.w	r2, r3, #2
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800562a:	f003 0302 	and.w	r3, r3, #2
 800562e:	2b00      	cmp	r3, #0
 8005630:	d00b      	beq.n	800564a <HAL_UART_IRQHandler+0xf6>
 8005632:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005636:	f003 0301 	and.w	r3, r3, #1
 800563a:	2b00      	cmp	r3, #0
 800563c:	d005      	beq.n	800564a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005642:	f043 0204 	orr.w	r2, r3, #4
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800564a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800564e:	f003 0308 	and.w	r3, r3, #8
 8005652:	2b00      	cmp	r3, #0
 8005654:	d011      	beq.n	800567a <HAL_UART_IRQHandler+0x126>
 8005656:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800565a:	f003 0320 	and.w	r3, r3, #32
 800565e:	2b00      	cmp	r3, #0
 8005660:	d105      	bne.n	800566e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005662:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005666:	f003 0301 	and.w	r3, r3, #1
 800566a:	2b00      	cmp	r3, #0
 800566c:	d005      	beq.n	800567a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005672:	f043 0208 	orr.w	r2, r3, #8
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800567e:	2b00      	cmp	r3, #0
 8005680:	f000 81f2 	beq.w	8005a68 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005684:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005688:	f003 0320 	and.w	r3, r3, #32
 800568c:	2b00      	cmp	r3, #0
 800568e:	d008      	beq.n	80056a2 <HAL_UART_IRQHandler+0x14e>
 8005690:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005694:	f003 0320 	and.w	r3, r3, #32
 8005698:	2b00      	cmp	r3, #0
 800569a:	d002      	beq.n	80056a2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f000 fd0f 	bl	80060c0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	695b      	ldr	r3, [r3, #20]
 80056a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	bf14      	ite	ne
 80056b0:	2301      	movne	r3, #1
 80056b2:	2300      	moveq	r3, #0
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056be:	f003 0308 	and.w	r3, r3, #8
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d103      	bne.n	80056ce <HAL_UART_IRQHandler+0x17a>
 80056c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d04f      	beq.n	800576e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 fc19 	bl	8005f06 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	695b      	ldr	r3, [r3, #20]
 80056da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d041      	beq.n	8005766 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	3314      	adds	r3, #20
 80056e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80056f0:	e853 3f00 	ldrex	r3, [r3]
 80056f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80056f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80056fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005700:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	3314      	adds	r3, #20
 800570a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800570e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005712:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005716:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800571a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800571e:	e841 2300 	strex	r3, r2, [r1]
 8005722:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005726:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d1d9      	bne.n	80056e2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005732:	2b00      	cmp	r3, #0
 8005734:	d013      	beq.n	800575e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800573a:	4a7e      	ldr	r2, [pc, #504]	@ (8005934 <HAL_UART_IRQHandler+0x3e0>)
 800573c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005742:	4618      	mov	r0, r3
 8005744:	f7fd f8c6 	bl	80028d4 <HAL_DMA_Abort_IT>
 8005748:	4603      	mov	r3, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	d016      	beq.n	800577c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005752:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005758:	4610      	mov	r0, r2
 800575a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800575c:	e00e      	b.n	800577c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 f9a5 	bl	8005aae <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005764:	e00a      	b.n	800577c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f000 f9a1 	bl	8005aae <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800576c:	e006      	b.n	800577c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 f99d 	bl	8005aae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800577a:	e175      	b.n	8005a68 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800577c:	bf00      	nop
    return;
 800577e:	e173      	b.n	8005a68 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005784:	2b01      	cmp	r3, #1
 8005786:	f040 814f 	bne.w	8005a28 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800578a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800578e:	f003 0310 	and.w	r3, r3, #16
 8005792:	2b00      	cmp	r3, #0
 8005794:	f000 8148 	beq.w	8005a28 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005798:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800579c:	f003 0310 	and.w	r3, r3, #16
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	f000 8141 	beq.w	8005a28 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80057a6:	2300      	movs	r3, #0
 80057a8:	60bb      	str	r3, [r7, #8]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	60bb      	str	r3, [r7, #8]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	60bb      	str	r3, [r7, #8]
 80057ba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	695b      	ldr	r3, [r3, #20]
 80057c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	f000 80b6 	beq.w	8005938 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80057d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80057dc:	2b00      	cmp	r3, #0
 80057de:	f000 8145 	beq.w	8005a6c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80057e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80057ea:	429a      	cmp	r2, r3
 80057ec:	f080 813e 	bcs.w	8005a6c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80057f6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057fc:	699b      	ldr	r3, [r3, #24]
 80057fe:	2b20      	cmp	r3, #32
 8005800:	f000 8088 	beq.w	8005914 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	330c      	adds	r3, #12
 800580a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800580e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005812:	e853 3f00 	ldrex	r3, [r3]
 8005816:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800581a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800581e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005822:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	330c      	adds	r3, #12
 800582c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005830:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005834:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005838:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800583c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005840:	e841 2300 	strex	r3, r2, [r1]
 8005844:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005848:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800584c:	2b00      	cmp	r3, #0
 800584e:	d1d9      	bne.n	8005804 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	3314      	adds	r3, #20
 8005856:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005858:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800585a:	e853 3f00 	ldrex	r3, [r3]
 800585e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005860:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005862:	f023 0301 	bic.w	r3, r3, #1
 8005866:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	3314      	adds	r3, #20
 8005870:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005874:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005878:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800587a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800587c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005880:	e841 2300 	strex	r3, r2, [r1]
 8005884:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005886:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005888:	2b00      	cmp	r3, #0
 800588a:	d1e1      	bne.n	8005850 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	3314      	adds	r3, #20
 8005892:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005894:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005896:	e853 3f00 	ldrex	r3, [r3]
 800589a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800589c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800589e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	3314      	adds	r3, #20
 80058ac:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80058b0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80058b2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80058b6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80058b8:	e841 2300 	strex	r3, r2, [r1]
 80058bc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80058be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d1e3      	bne.n	800588c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2220      	movs	r2, #32
 80058c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	330c      	adds	r3, #12
 80058d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058dc:	e853 3f00 	ldrex	r3, [r3]
 80058e0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80058e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80058e4:	f023 0310 	bic.w	r3, r3, #16
 80058e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	330c      	adds	r3, #12
 80058f2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80058f6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80058f8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058fa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80058fc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80058fe:	e841 2300 	strex	r3, r2, [r1]
 8005902:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005904:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005906:	2b00      	cmp	r3, #0
 8005908:	d1e3      	bne.n	80058d2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800590e:	4618      	mov	r0, r3
 8005910:	f7fc ffa4 	bl	800285c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2202      	movs	r2, #2
 8005918:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005922:	b29b      	uxth	r3, r3
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	b29b      	uxth	r3, r3
 8005928:	4619      	mov	r1, r3
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 f8c8 	bl	8005ac0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005930:	e09c      	b.n	8005a6c <HAL_UART_IRQHandler+0x518>
 8005932:	bf00      	nop
 8005934:	08005fcb 	.word	0x08005fcb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005940:	b29b      	uxth	r3, r3
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800594c:	b29b      	uxth	r3, r3
 800594e:	2b00      	cmp	r3, #0
 8005950:	f000 808e 	beq.w	8005a70 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005954:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005958:	2b00      	cmp	r3, #0
 800595a:	f000 8089 	beq.w	8005a70 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	330c      	adds	r3, #12
 8005964:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005968:	e853 3f00 	ldrex	r3, [r3]
 800596c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800596e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005970:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005974:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	330c      	adds	r3, #12
 800597e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005982:	647a      	str	r2, [r7, #68]	@ 0x44
 8005984:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005986:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005988:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800598a:	e841 2300 	strex	r3, r2, [r1]
 800598e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005990:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005992:	2b00      	cmp	r3, #0
 8005994:	d1e3      	bne.n	800595e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	3314      	adds	r3, #20
 800599c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a0:	e853 3f00 	ldrex	r3, [r3]
 80059a4:	623b      	str	r3, [r7, #32]
   return(result);
 80059a6:	6a3b      	ldr	r3, [r7, #32]
 80059a8:	f023 0301 	bic.w	r3, r3, #1
 80059ac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	3314      	adds	r3, #20
 80059b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80059ba:	633a      	str	r2, [r7, #48]	@ 0x30
 80059bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80059c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059c2:	e841 2300 	strex	r3, r2, [r1]
 80059c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80059c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d1e3      	bne.n	8005996 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2220      	movs	r2, #32
 80059d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	330c      	adds	r3, #12
 80059e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	e853 3f00 	ldrex	r3, [r3]
 80059ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f023 0310 	bic.w	r3, r3, #16
 80059f2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	330c      	adds	r3, #12
 80059fc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005a00:	61fa      	str	r2, [r7, #28]
 8005a02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a04:	69b9      	ldr	r1, [r7, #24]
 8005a06:	69fa      	ldr	r2, [r7, #28]
 8005a08:	e841 2300 	strex	r3, r2, [r1]
 8005a0c:	617b      	str	r3, [r7, #20]
   return(result);
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d1e3      	bne.n	80059dc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2202      	movs	r2, #2
 8005a18:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005a1a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005a1e:	4619      	mov	r1, r3
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f000 f84d 	bl	8005ac0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005a26:	e023      	b.n	8005a70 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005a28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d009      	beq.n	8005a48 <HAL_UART_IRQHandler+0x4f4>
 8005a34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d003      	beq.n	8005a48 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f000 fad6 	bl	8005ff2 <UART_Transmit_IT>
    return;
 8005a46:	e014      	b.n	8005a72 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005a48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d00e      	beq.n	8005a72 <HAL_UART_IRQHandler+0x51e>
 8005a54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d008      	beq.n	8005a72 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f000 fb15 	bl	8006090 <UART_EndTransmit_IT>
    return;
 8005a66:	e004      	b.n	8005a72 <HAL_UART_IRQHandler+0x51e>
    return;
 8005a68:	bf00      	nop
 8005a6a:	e002      	b.n	8005a72 <HAL_UART_IRQHandler+0x51e>
      return;
 8005a6c:	bf00      	nop
 8005a6e:	e000      	b.n	8005a72 <HAL_UART_IRQHandler+0x51e>
      return;
 8005a70:	bf00      	nop
  }
}
 8005a72:	37e8      	adds	r7, #232	@ 0xe8
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005a80:	bf00      	nop
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bc80      	pop	{r7}
 8005a88:	4770      	bx	lr

08005a8a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a8a:	b480      	push	{r7}
 8005a8c:	b083      	sub	sp, #12
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005a92:	bf00      	nop
 8005a94:	370c      	adds	r7, #12
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bc80      	pop	{r7}
 8005a9a:	4770      	bx	lr

08005a9c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005aa4:	bf00      	nop
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bc80      	pop	{r7}
 8005aac:	4770      	bx	lr

08005aae <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005aae:	b480      	push	{r7}
 8005ab0:	b083      	sub	sp, #12
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005ab6:	bf00      	nop
 8005ab8:	370c      	adds	r7, #12
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bc80      	pop	{r7}
 8005abe:	4770      	bx	lr

08005ac0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b083      	sub	sp, #12
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	460b      	mov	r3, r1
 8005aca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005acc:	bf00      	nop
 8005ace:	370c      	adds	r7, #12
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bc80      	pop	{r7}
 8005ad4:	4770      	bx	lr

08005ad6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005ad6:	b580      	push	{r7, lr}
 8005ad8:	b09c      	sub	sp, #112	@ 0x70
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ae2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 0320 	and.w	r3, r3, #32
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d172      	bne.n	8005bd8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005af2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005af4:	2200      	movs	r2, #0
 8005af6:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005af8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	330c      	adds	r3, #12
 8005afe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b02:	e853 3f00 	ldrex	r3, [r3]
 8005b06:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005b08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b0a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b0e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	330c      	adds	r3, #12
 8005b16:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005b18:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005b1a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b1c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005b1e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005b20:	e841 2300 	strex	r3, r2, [r1]
 8005b24:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005b26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d1e5      	bne.n	8005af8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	3314      	adds	r3, #20
 8005b32:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b36:	e853 3f00 	ldrex	r3, [r3]
 8005b3a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b3e:	f023 0301 	bic.w	r3, r3, #1
 8005b42:	667b      	str	r3, [r7, #100]	@ 0x64
 8005b44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	3314      	adds	r3, #20
 8005b4a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005b4c:	647a      	str	r2, [r7, #68]	@ 0x44
 8005b4e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b50:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b54:	e841 2300 	strex	r3, r2, [r1]
 8005b58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d1e5      	bne.n	8005b2c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	3314      	adds	r3, #20
 8005b66:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b6a:	e853 3f00 	ldrex	r3, [r3]
 8005b6e:	623b      	str	r3, [r7, #32]
   return(result);
 8005b70:	6a3b      	ldr	r3, [r7, #32]
 8005b72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b76:	663b      	str	r3, [r7, #96]	@ 0x60
 8005b78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	3314      	adds	r3, #20
 8005b7e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005b80:	633a      	str	r2, [r7, #48]	@ 0x30
 8005b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b84:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b88:	e841 2300 	strex	r3, r2, [r1]
 8005b8c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d1e5      	bne.n	8005b60 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005b94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b96:	2220      	movs	r2, #32
 8005b98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d119      	bne.n	8005bd8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ba4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	330c      	adds	r3, #12
 8005baa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	e853 3f00 	ldrex	r3, [r3]
 8005bb2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f023 0310 	bic.w	r3, r3, #16
 8005bba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005bbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	330c      	adds	r3, #12
 8005bc2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005bc4:	61fa      	str	r2, [r7, #28]
 8005bc6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc8:	69b9      	ldr	r1, [r7, #24]
 8005bca:	69fa      	ldr	r2, [r7, #28]
 8005bcc:	e841 2300 	strex	r3, r2, [r1]
 8005bd0:	617b      	str	r3, [r7, #20]
   return(result);
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d1e5      	bne.n	8005ba4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005bd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005bda:	2200      	movs	r2, #0
 8005bdc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bde:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d106      	bne.n	8005bf4 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005be6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005be8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005bea:	4619      	mov	r1, r3
 8005bec:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005bee:	f7ff ff67 	bl	8005ac0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005bf2:	e002      	b.n	8005bfa <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005bf4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005bf6:	f7ff ff48 	bl	8005a8a <HAL_UART_RxCpltCallback>
}
 8005bfa:	bf00      	nop
 8005bfc:	3770      	adds	r7, #112	@ 0x70
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}

08005c02 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005c02:	b580      	push	{r7, lr}
 8005c04:	b084      	sub	sp, #16
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c0e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2201      	movs	r2, #1
 8005c14:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d108      	bne.n	8005c30 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005c22:	085b      	lsrs	r3, r3, #1
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	4619      	mov	r1, r3
 8005c28:	68f8      	ldr	r0, [r7, #12]
 8005c2a:	f7ff ff49 	bl	8005ac0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005c2e:	e002      	b.n	8005c36 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005c30:	68f8      	ldr	r0, [r7, #12]
 8005c32:	f7ff ff33 	bl	8005a9c <HAL_UART_RxHalfCpltCallback>
}
 8005c36:	bf00      	nop
 8005c38:	3710      	adds	r7, #16
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}

08005c3e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005c3e:	b580      	push	{r7, lr}
 8005c40:	b084      	sub	sp, #16
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005c46:	2300      	movs	r3, #0
 8005c48:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c4e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	695b      	ldr	r3, [r3, #20]
 8005c56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	bf14      	ite	ne
 8005c5e:	2301      	movne	r3, #1
 8005c60:	2300      	moveq	r3, #0
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	2b21      	cmp	r3, #33	@ 0x21
 8005c70:	d108      	bne.n	8005c84 <UART_DMAError+0x46>
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d005      	beq.n	8005c84 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005c7e:	68b8      	ldr	r0, [r7, #8]
 8005c80:	f000 f91a 	bl	8005eb8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	695b      	ldr	r3, [r3, #20]
 8005c8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	bf14      	ite	ne
 8005c92:	2301      	movne	r3, #1
 8005c94:	2300      	moveq	r3, #0
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	2b22      	cmp	r3, #34	@ 0x22
 8005ca4:	d108      	bne.n	8005cb8 <UART_DMAError+0x7a>
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d005      	beq.n	8005cb8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8005cb2:	68b8      	ldr	r0, [r7, #8]
 8005cb4:	f000 f927 	bl	8005f06 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cbc:	f043 0210 	orr.w	r2, r3, #16
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005cc4:	68b8      	ldr	r0, [r7, #8]
 8005cc6:	f7ff fef2 	bl	8005aae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005cca:	bf00      	nop
 8005ccc:	3710      	adds	r7, #16
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}

08005cd2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005cd2:	b580      	push	{r7, lr}
 8005cd4:	b086      	sub	sp, #24
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	60f8      	str	r0, [r7, #12]
 8005cda:	60b9      	str	r1, [r7, #8]
 8005cdc:	603b      	str	r3, [r7, #0]
 8005cde:	4613      	mov	r3, r2
 8005ce0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ce2:	e03b      	b.n	8005d5c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ce4:	6a3b      	ldr	r3, [r7, #32]
 8005ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cea:	d037      	beq.n	8005d5c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cec:	f7fc fbe4 	bl	80024b8 <HAL_GetTick>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	6a3a      	ldr	r2, [r7, #32]
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d302      	bcc.n	8005d02 <UART_WaitOnFlagUntilTimeout+0x30>
 8005cfc:	6a3b      	ldr	r3, [r7, #32]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d101      	bne.n	8005d06 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	e03a      	b.n	8005d7c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	f003 0304 	and.w	r3, r3, #4
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d023      	beq.n	8005d5c <UART_WaitOnFlagUntilTimeout+0x8a>
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	2b80      	cmp	r3, #128	@ 0x80
 8005d18:	d020      	beq.n	8005d5c <UART_WaitOnFlagUntilTimeout+0x8a>
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	2b40      	cmp	r3, #64	@ 0x40
 8005d1e:	d01d      	beq.n	8005d5c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f003 0308 	and.w	r3, r3, #8
 8005d2a:	2b08      	cmp	r3, #8
 8005d2c:	d116      	bne.n	8005d5c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005d2e:	2300      	movs	r3, #0
 8005d30:	617b      	str	r3, [r7, #20]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	617b      	str	r3, [r7, #20]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	617b      	str	r3, [r7, #20]
 8005d42:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d44:	68f8      	ldr	r0, [r7, #12]
 8005d46:	f000 f8de 	bl	8005f06 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2208      	movs	r2, #8
 8005d4e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e00f      	b.n	8005d7c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	4013      	ands	r3, r2
 8005d66:	68ba      	ldr	r2, [r7, #8]
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	bf0c      	ite	eq
 8005d6c:	2301      	moveq	r3, #1
 8005d6e:	2300      	movne	r3, #0
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	461a      	mov	r2, r3
 8005d74:	79fb      	ldrb	r3, [r7, #7]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d0b4      	beq.n	8005ce4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d7a:	2300      	movs	r3, #0
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3718      	adds	r7, #24
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b098      	sub	sp, #96	@ 0x60
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	60b9      	str	r1, [r7, #8]
 8005d8e:	4613      	mov	r3, r2
 8005d90:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005d92:	68ba      	ldr	r2, [r7, #8]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	88fa      	ldrh	r2, [r7, #6]
 8005d9c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2200      	movs	r2, #0
 8005da2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2222      	movs	r2, #34	@ 0x22
 8005da8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005db0:	4a3e      	ldr	r2, [pc, #248]	@ (8005eac <UART_Start_Receive_DMA+0x128>)
 8005db2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005db8:	4a3d      	ldr	r2, [pc, #244]	@ (8005eb0 <UART_Start_Receive_DMA+0x12c>)
 8005dba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dc0:	4a3c      	ldr	r2, [pc, #240]	@ (8005eb4 <UART_Start_Receive_DMA+0x130>)
 8005dc2:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dc8:	2200      	movs	r2, #0
 8005dca:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005dcc:	f107 0308 	add.w	r3, r7, #8
 8005dd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	3304      	adds	r3, #4
 8005ddc:	4619      	mov	r1, r3
 8005dde:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	88fb      	ldrh	r3, [r7, #6]
 8005de4:	f7fc fcda 	bl	800279c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005de8:	2300      	movs	r3, #0
 8005dea:	613b      	str	r3, [r7, #16]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	613b      	str	r3, [r7, #16]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	613b      	str	r3, [r7, #16]
 8005dfc:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d019      	beq.n	8005e3a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	330c      	adds	r3, #12
 8005e0c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e10:	e853 3f00 	ldrex	r3, [r3]
 8005e14:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005e16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e1c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	330c      	adds	r3, #12
 8005e24:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005e26:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005e28:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e2a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005e2c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005e2e:	e841 2300 	strex	r3, r2, [r1]
 8005e32:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005e34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d1e5      	bne.n	8005e06 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	3314      	adds	r3, #20
 8005e40:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e44:	e853 3f00 	ldrex	r3, [r3]
 8005e48:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e4c:	f043 0301 	orr.w	r3, r3, #1
 8005e50:	657b      	str	r3, [r7, #84]	@ 0x54
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	3314      	adds	r3, #20
 8005e58:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005e5a:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005e5c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e5e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005e60:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005e62:	e841 2300 	strex	r3, r2, [r1]
 8005e66:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d1e5      	bne.n	8005e3a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	3314      	adds	r3, #20
 8005e74:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e76:	69bb      	ldr	r3, [r7, #24]
 8005e78:	e853 3f00 	ldrex	r3, [r3]
 8005e7c:	617b      	str	r3, [r7, #20]
   return(result);
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e84:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	3314      	adds	r3, #20
 8005e8c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005e8e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005e90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e92:	6a39      	ldr	r1, [r7, #32]
 8005e94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e96:	e841 2300 	strex	r3, r2, [r1]
 8005e9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e9c:	69fb      	ldr	r3, [r7, #28]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d1e5      	bne.n	8005e6e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005ea2:	2300      	movs	r3, #0
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3760      	adds	r7, #96	@ 0x60
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	08005ad7 	.word	0x08005ad7
 8005eb0:	08005c03 	.word	0x08005c03
 8005eb4:	08005c3f 	.word	0x08005c3f

08005eb8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b089      	sub	sp, #36	@ 0x24
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	330c      	adds	r3, #12
 8005ec6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	e853 3f00 	ldrex	r3, [r3]
 8005ece:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005ed6:	61fb      	str	r3, [r7, #28]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	330c      	adds	r3, #12
 8005ede:	69fa      	ldr	r2, [r7, #28]
 8005ee0:	61ba      	str	r2, [r7, #24]
 8005ee2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee4:	6979      	ldr	r1, [r7, #20]
 8005ee6:	69ba      	ldr	r2, [r7, #24]
 8005ee8:	e841 2300 	strex	r3, r2, [r1]
 8005eec:	613b      	str	r3, [r7, #16]
   return(result);
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d1e5      	bne.n	8005ec0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2220      	movs	r2, #32
 8005ef8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005efc:	bf00      	nop
 8005efe:	3724      	adds	r7, #36	@ 0x24
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bc80      	pop	{r7}
 8005f04:	4770      	bx	lr

08005f06 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f06:	b480      	push	{r7}
 8005f08:	b095      	sub	sp, #84	@ 0x54
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	330c      	adds	r3, #12
 8005f14:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f18:	e853 3f00 	ldrex	r3, [r3]
 8005f1c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f20:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f24:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	330c      	adds	r3, #12
 8005f2c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005f2e:	643a      	str	r2, [r7, #64]	@ 0x40
 8005f30:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f32:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005f34:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005f36:	e841 2300 	strex	r3, r2, [r1]
 8005f3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005f3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d1e5      	bne.n	8005f0e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	3314      	adds	r3, #20
 8005f48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f4a:	6a3b      	ldr	r3, [r7, #32]
 8005f4c:	e853 3f00 	ldrex	r3, [r3]
 8005f50:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	f023 0301 	bic.w	r3, r3, #1
 8005f58:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	3314      	adds	r3, #20
 8005f60:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f64:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f6a:	e841 2300 	strex	r3, r2, [r1]
 8005f6e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d1e5      	bne.n	8005f42 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d119      	bne.n	8005fb2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	330c      	adds	r3, #12
 8005f84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	e853 3f00 	ldrex	r3, [r3]
 8005f8c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	f023 0310 	bic.w	r3, r3, #16
 8005f94:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	330c      	adds	r3, #12
 8005f9c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005f9e:	61ba      	str	r2, [r7, #24]
 8005fa0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa2:	6979      	ldr	r1, [r7, #20]
 8005fa4:	69ba      	ldr	r2, [r7, #24]
 8005fa6:	e841 2300 	strex	r3, r2, [r1]
 8005faa:	613b      	str	r3, [r7, #16]
   return(result);
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d1e5      	bne.n	8005f7e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2220      	movs	r2, #32
 8005fb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005fc0:	bf00      	nop
 8005fc2:	3754      	adds	r7, #84	@ 0x54
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bc80      	pop	{r7}
 8005fc8:	4770      	bx	lr

08005fca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005fca:	b580      	push	{r7, lr}
 8005fcc:	b084      	sub	sp, #16
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fd6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005fe4:	68f8      	ldr	r0, [r7, #12]
 8005fe6:	f7ff fd62 	bl	8005aae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fea:	bf00      	nop
 8005fec:	3710      	adds	r7, #16
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}

08005ff2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005ff2:	b480      	push	{r7}
 8005ff4:	b085      	sub	sp, #20
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006000:	b2db      	uxtb	r3, r3
 8006002:	2b21      	cmp	r3, #33	@ 0x21
 8006004:	d13e      	bne.n	8006084 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800600e:	d114      	bne.n	800603a <UART_Transmit_IT+0x48>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	691b      	ldr	r3, [r3, #16]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d110      	bne.n	800603a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6a1b      	ldr	r3, [r3, #32]
 800601c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	881b      	ldrh	r3, [r3, #0]
 8006022:	461a      	mov	r2, r3
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800602c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6a1b      	ldr	r3, [r3, #32]
 8006032:	1c9a      	adds	r2, r3, #2
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	621a      	str	r2, [r3, #32]
 8006038:	e008      	b.n	800604c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a1b      	ldr	r3, [r3, #32]
 800603e:	1c59      	adds	r1, r3, #1
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	6211      	str	r1, [r2, #32]
 8006044:	781a      	ldrb	r2, [r3, #0]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006050:	b29b      	uxth	r3, r3
 8006052:	3b01      	subs	r3, #1
 8006054:	b29b      	uxth	r3, r3
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	4619      	mov	r1, r3
 800605a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800605c:	2b00      	cmp	r3, #0
 800605e:	d10f      	bne.n	8006080 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	68da      	ldr	r2, [r3, #12]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800606e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	68da      	ldr	r2, [r3, #12]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800607e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006080:	2300      	movs	r3, #0
 8006082:	e000      	b.n	8006086 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006084:	2302      	movs	r3, #2
  }
}
 8006086:	4618      	mov	r0, r3
 8006088:	3714      	adds	r7, #20
 800608a:	46bd      	mov	sp, r7
 800608c:	bc80      	pop	{r7}
 800608e:	4770      	bx	lr

08006090 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b082      	sub	sp, #8
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	68da      	ldr	r2, [r3, #12]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80060a6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2220      	movs	r2, #32
 80060ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f7ff fce1 	bl	8005a78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3708      	adds	r7, #8
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b08c      	sub	sp, #48	@ 0x30
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	2b22      	cmp	r3, #34	@ 0x22
 80060d2:	f040 80ae 	bne.w	8006232 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060de:	d117      	bne.n	8006110 <UART_Receive_IT+0x50>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	691b      	ldr	r3, [r3, #16]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d113      	bne.n	8006110 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80060e8:	2300      	movs	r3, #0
 80060ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060f0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060fe:	b29a      	uxth	r2, r3
 8006100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006102:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006108:	1c9a      	adds	r2, r3, #2
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	629a      	str	r2, [r3, #40]	@ 0x28
 800610e:	e026      	b.n	800615e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006114:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006116:	2300      	movs	r3, #0
 8006118:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006122:	d007      	beq.n	8006134 <UART_Receive_IT+0x74>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d10a      	bne.n	8006142 <UART_Receive_IT+0x82>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	691b      	ldr	r3, [r3, #16]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d106      	bne.n	8006142 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	b2da      	uxtb	r2, r3
 800613c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800613e:	701a      	strb	r2, [r3, #0]
 8006140:	e008      	b.n	8006154 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	b2db      	uxtb	r3, r3
 800614a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800614e:	b2da      	uxtb	r2, r3
 8006150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006152:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006158:	1c5a      	adds	r2, r3, #1
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006162:	b29b      	uxth	r3, r3
 8006164:	3b01      	subs	r3, #1
 8006166:	b29b      	uxth	r3, r3
 8006168:	687a      	ldr	r2, [r7, #4]
 800616a:	4619      	mov	r1, r3
 800616c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800616e:	2b00      	cmp	r3, #0
 8006170:	d15d      	bne.n	800622e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	68da      	ldr	r2, [r3, #12]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f022 0220 	bic.w	r2, r2, #32
 8006180:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	68da      	ldr	r2, [r3, #12]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006190:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	695a      	ldr	r2, [r3, #20]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f022 0201 	bic.w	r2, r2, #1
 80061a0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2220      	movs	r2, #32
 80061a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d135      	bne.n	8006224 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	330c      	adds	r3, #12
 80061c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	e853 3f00 	ldrex	r3, [r3]
 80061cc:	613b      	str	r3, [r7, #16]
   return(result);
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	f023 0310 	bic.w	r3, r3, #16
 80061d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	330c      	adds	r3, #12
 80061dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061de:	623a      	str	r2, [r7, #32]
 80061e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e2:	69f9      	ldr	r1, [r7, #28]
 80061e4:	6a3a      	ldr	r2, [r7, #32]
 80061e6:	e841 2300 	strex	r3, r2, [r1]
 80061ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d1e5      	bne.n	80061be <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 0310 	and.w	r3, r3, #16
 80061fc:	2b10      	cmp	r3, #16
 80061fe:	d10a      	bne.n	8006216 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006200:	2300      	movs	r3, #0
 8006202:	60fb      	str	r3, [r7, #12]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	60fb      	str	r3, [r7, #12]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	60fb      	str	r3, [r7, #12]
 8006214:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800621a:	4619      	mov	r1, r3
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f7ff fc4f 	bl	8005ac0 <HAL_UARTEx_RxEventCallback>
 8006222:	e002      	b.n	800622a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f7ff fc30 	bl	8005a8a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800622a:	2300      	movs	r3, #0
 800622c:	e002      	b.n	8006234 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800622e:	2300      	movs	r3, #0
 8006230:	e000      	b.n	8006234 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006232:	2302      	movs	r3, #2
  }
}
 8006234:	4618      	mov	r0, r3
 8006236:	3730      	adds	r7, #48	@ 0x30
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}

0800623c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b084      	sub	sp, #16
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	68da      	ldr	r2, [r3, #12]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	430a      	orrs	r2, r1
 8006258:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	689a      	ldr	r2, [r3, #8]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	431a      	orrs	r2, r3
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	695b      	ldr	r3, [r3, #20]
 8006268:	4313      	orrs	r3, r2
 800626a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8006276:	f023 030c 	bic.w	r3, r3, #12
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	6812      	ldr	r2, [r2, #0]
 800627e:	68b9      	ldr	r1, [r7, #8]
 8006280:	430b      	orrs	r3, r1
 8006282:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	695b      	ldr	r3, [r3, #20]
 800628a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	699a      	ldr	r2, [r3, #24]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	430a      	orrs	r2, r1
 8006298:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a2c      	ldr	r2, [pc, #176]	@ (8006350 <UART_SetConfig+0x114>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d103      	bne.n	80062ac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80062a4:	f7fe ff6e 	bl	8005184 <HAL_RCC_GetPCLK2Freq>
 80062a8:	60f8      	str	r0, [r7, #12]
 80062aa:	e002      	b.n	80062b2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80062ac:	f7fe ff56 	bl	800515c <HAL_RCC_GetPCLK1Freq>
 80062b0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	4613      	mov	r3, r2
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	4413      	add	r3, r2
 80062ba:	009a      	lsls	r2, r3, #2
 80062bc:	441a      	add	r2, r3
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80062c8:	4a22      	ldr	r2, [pc, #136]	@ (8006354 <UART_SetConfig+0x118>)
 80062ca:	fba2 2303 	umull	r2, r3, r2, r3
 80062ce:	095b      	lsrs	r3, r3, #5
 80062d0:	0119      	lsls	r1, r3, #4
 80062d2:	68fa      	ldr	r2, [r7, #12]
 80062d4:	4613      	mov	r3, r2
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	4413      	add	r3, r2
 80062da:	009a      	lsls	r2, r3, #2
 80062dc:	441a      	add	r2, r3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80062e8:	4b1a      	ldr	r3, [pc, #104]	@ (8006354 <UART_SetConfig+0x118>)
 80062ea:	fba3 0302 	umull	r0, r3, r3, r2
 80062ee:	095b      	lsrs	r3, r3, #5
 80062f0:	2064      	movs	r0, #100	@ 0x64
 80062f2:	fb00 f303 	mul.w	r3, r0, r3
 80062f6:	1ad3      	subs	r3, r2, r3
 80062f8:	011b      	lsls	r3, r3, #4
 80062fa:	3332      	adds	r3, #50	@ 0x32
 80062fc:	4a15      	ldr	r2, [pc, #84]	@ (8006354 <UART_SetConfig+0x118>)
 80062fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006302:	095b      	lsrs	r3, r3, #5
 8006304:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006308:	4419      	add	r1, r3
 800630a:	68fa      	ldr	r2, [r7, #12]
 800630c:	4613      	mov	r3, r2
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	4413      	add	r3, r2
 8006312:	009a      	lsls	r2, r3, #2
 8006314:	441a      	add	r2, r3
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	009b      	lsls	r3, r3, #2
 800631c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006320:	4b0c      	ldr	r3, [pc, #48]	@ (8006354 <UART_SetConfig+0x118>)
 8006322:	fba3 0302 	umull	r0, r3, r3, r2
 8006326:	095b      	lsrs	r3, r3, #5
 8006328:	2064      	movs	r0, #100	@ 0x64
 800632a:	fb00 f303 	mul.w	r3, r0, r3
 800632e:	1ad3      	subs	r3, r2, r3
 8006330:	011b      	lsls	r3, r3, #4
 8006332:	3332      	adds	r3, #50	@ 0x32
 8006334:	4a07      	ldr	r2, [pc, #28]	@ (8006354 <UART_SetConfig+0x118>)
 8006336:	fba2 2303 	umull	r2, r3, r2, r3
 800633a:	095b      	lsrs	r3, r3, #5
 800633c:	f003 020f 	and.w	r2, r3, #15
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	440a      	add	r2, r1
 8006346:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006348:	bf00      	nop
 800634a:	3710      	adds	r7, #16
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}
 8006350:	40013800 	.word	0x40013800
 8006354:	51eb851f 	.word	0x51eb851f

08006358 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006358:	b480      	push	{r7}
 800635a:	b085      	sub	sp, #20
 800635c:	af00      	add	r7, sp, #0
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	4638      	mov	r0, r7
 8006362:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006366:	2300      	movs	r3, #0
}
 8006368:	4618      	mov	r0, r3
 800636a:	3714      	adds	r7, #20
 800636c:	46bd      	mov	sp, r7
 800636e:	bc80      	pop	{r7}
 8006370:	4770      	bx	lr

08006372 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006372:	b480      	push	{r7}
 8006374:	b085      	sub	sp, #20
 8006376:	af00      	add	r7, sp, #0
 8006378:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2200      	movs	r2, #0
 800637e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006382:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8006386:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	b29a      	uxth	r2, r3
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006392:	2300      	movs	r3, #0
}
 8006394:	4618      	mov	r0, r3
 8006396:	3714      	adds	r7, #20
 8006398:	46bd      	mov	sp, r7
 800639a:	bc80      	pop	{r7}
 800639c:	4770      	bx	lr

0800639e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800639e:	b480      	push	{r7}
 80063a0:	b085      	sub	sp, #20
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80063a6:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80063aa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80063b2:	b29a      	uxth	r2, r3
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	43db      	mvns	r3, r3
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	4013      	ands	r3, r2
 80063be:	b29a      	uxth	r2, r3
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80063c6:	2300      	movs	r3, #0
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3714      	adds	r7, #20
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bc80      	pop	{r7}
 80063d0:	4770      	bx	lr

080063d2 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80063d2:	b480      	push	{r7}
 80063d4:	b083      	sub	sp, #12
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
 80063da:	460b      	mov	r3, r1
 80063dc:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80063de:	2300      	movs	r3, #0
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bc80      	pop	{r7}
 80063e8:	4770      	bx	lr

080063ea <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80063ea:	b480      	push	{r7}
 80063ec:	b085      	sub	sp, #20
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	60f8      	str	r0, [r7, #12]
 80063f2:	4638      	mov	r0, r7
 80063f4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2201      	movs	r2, #1
 80063fc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2200      	movs	r2, #0
 8006404:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2200      	movs	r2, #0
 800640c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2200      	movs	r2, #0
 8006414:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006418:	2300      	movs	r3, #0
}
 800641a:	4618      	mov	r0, r3
 800641c:	3714      	adds	r7, #20
 800641e:	46bd      	mov	sp, r7
 8006420:	bc80      	pop	{r7}
 8006422:	4770      	bx	lr

08006424 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006424:	b480      	push	{r7}
 8006426:	b09d      	sub	sp, #116	@ 0x74
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800642e:	2300      	movs	r3, #0
 8006430:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	009b      	lsls	r3, r3, #2
 800643c:	4413      	add	r3, r2
 800643e:	881b      	ldrh	r3, [r3, #0]
 8006440:	b29b      	uxth	r3, r3
 8006442:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8006446:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800644a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	78db      	ldrb	r3, [r3, #3]
 8006452:	2b03      	cmp	r3, #3
 8006454:	d81f      	bhi.n	8006496 <USB_ActivateEndpoint+0x72>
 8006456:	a201      	add	r2, pc, #4	@ (adr r2, 800645c <USB_ActivateEndpoint+0x38>)
 8006458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800645c:	0800646d 	.word	0x0800646d
 8006460:	08006489 	.word	0x08006489
 8006464:	0800649f 	.word	0x0800649f
 8006468:	0800647b 	.word	0x0800647b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800646c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006470:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006474:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006478:	e012      	b.n	80064a0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800647a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800647e:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8006482:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006486:	e00b      	b.n	80064a0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006488:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800648c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006490:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006494:	e004      	b.n	80064a0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800649c:	e000      	b.n	80064a0 <USB_ActivateEndpoint+0x7c>
      break;
 800649e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	441a      	add	r2, r3
 80064aa:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80064ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064be:	b29b      	uxth	r3, r3
 80064c0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	4413      	add	r3, r2
 80064cc:	881b      	ldrh	r3, [r3, #0]
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064d8:	b29b      	uxth	r3, r3
 80064da:	683a      	ldr	r2, [r7, #0]
 80064dc:	7812      	ldrb	r2, [r2, #0]
 80064de:	4313      	orrs	r3, r2
 80064e0:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	441a      	add	r2, r3
 80064ee:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80064f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006502:	b29b      	uxth	r3, r3
 8006504:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	7b1b      	ldrb	r3, [r3, #12]
 800650a:	2b00      	cmp	r3, #0
 800650c:	f040 8178 	bne.w	8006800 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	785b      	ldrb	r3, [r3, #1]
 8006514:	2b00      	cmp	r3, #0
 8006516:	f000 8084 	beq.w	8006622 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	61bb      	str	r3, [r7, #24]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006524:	b29b      	uxth	r3, r3
 8006526:	461a      	mov	r2, r3
 8006528:	69bb      	ldr	r3, [r7, #24]
 800652a:	4413      	add	r3, r2
 800652c:	61bb      	str	r3, [r7, #24]
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	011a      	lsls	r2, r3, #4
 8006534:	69bb      	ldr	r3, [r7, #24]
 8006536:	4413      	add	r3, r2
 8006538:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800653c:	617b      	str	r3, [r7, #20]
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	88db      	ldrh	r3, [r3, #6]
 8006542:	085b      	lsrs	r3, r3, #1
 8006544:	b29b      	uxth	r3, r3
 8006546:	005b      	lsls	r3, r3, #1
 8006548:	b29a      	uxth	r2, r3
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	009b      	lsls	r3, r3, #2
 8006556:	4413      	add	r3, r2
 8006558:	881b      	ldrh	r3, [r3, #0]
 800655a:	827b      	strh	r3, [r7, #18]
 800655c:	8a7b      	ldrh	r3, [r7, #18]
 800655e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006562:	2b00      	cmp	r3, #0
 8006564:	d01b      	beq.n	800659e <USB_ActivateEndpoint+0x17a>
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	4413      	add	r3, r2
 8006570:	881b      	ldrh	r3, [r3, #0]
 8006572:	b29b      	uxth	r3, r3
 8006574:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006578:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800657c:	823b      	strh	r3, [r7, #16]
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	441a      	add	r2, r3
 8006588:	8a3b      	ldrh	r3, [r7, #16]
 800658a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800658e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006592:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006596:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800659a:	b29b      	uxth	r3, r3
 800659c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	78db      	ldrb	r3, [r3, #3]
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d020      	beq.n	80065e8 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	4413      	add	r3, r2
 80065b0:	881b      	ldrh	r3, [r3, #0]
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065bc:	81bb      	strh	r3, [r7, #12]
 80065be:	89bb      	ldrh	r3, [r7, #12]
 80065c0:	f083 0320 	eor.w	r3, r3, #32
 80065c4:	81bb      	strh	r3, [r7, #12]
 80065c6:	687a      	ldr	r2, [r7, #4]
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	781b      	ldrb	r3, [r3, #0]
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	441a      	add	r2, r3
 80065d0:	89bb      	ldrh	r3, [r7, #12]
 80065d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	8013      	strh	r3, [r2, #0]
 80065e6:	e2d5      	b.n	8006b94 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	4413      	add	r3, r2
 80065f2:	881b      	ldrh	r3, [r3, #0]
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065fe:	81fb      	strh	r3, [r7, #14]
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	441a      	add	r2, r3
 800660a:	89fb      	ldrh	r3, [r7, #14]
 800660c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006610:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006614:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006618:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800661c:	b29b      	uxth	r3, r3
 800661e:	8013      	strh	r3, [r2, #0]
 8006620:	e2b8      	b.n	8006b94 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	633b      	str	r3, [r7, #48]	@ 0x30
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800662c:	b29b      	uxth	r3, r3
 800662e:	461a      	mov	r2, r3
 8006630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006632:	4413      	add	r3, r2
 8006634:	633b      	str	r3, [r7, #48]	@ 0x30
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	011a      	lsls	r2, r3, #4
 800663c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800663e:	4413      	add	r3, r2
 8006640:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8006644:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	88db      	ldrh	r3, [r3, #6]
 800664a:	085b      	lsrs	r3, r3, #1
 800664c:	b29b      	uxth	r3, r3
 800664e:	005b      	lsls	r3, r3, #1
 8006650:	b29a      	uxth	r2, r3
 8006652:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006654:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	62bb      	str	r3, [r7, #40]	@ 0x28
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006660:	b29b      	uxth	r3, r3
 8006662:	461a      	mov	r2, r3
 8006664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006666:	4413      	add	r3, r2
 8006668:	62bb      	str	r3, [r7, #40]	@ 0x28
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	011a      	lsls	r2, r3, #4
 8006670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006672:	4413      	add	r3, r2
 8006674:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006678:	627b      	str	r3, [r7, #36]	@ 0x24
 800667a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800667c:	881b      	ldrh	r3, [r3, #0]
 800667e:	b29b      	uxth	r3, r3
 8006680:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006684:	b29a      	uxth	r2, r3
 8006686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006688:	801a      	strh	r2, [r3, #0]
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	691b      	ldr	r3, [r3, #16]
 800668e:	2b3e      	cmp	r3, #62	@ 0x3e
 8006690:	d91d      	bls.n	80066ce <USB_ActivateEndpoint+0x2aa>
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	691b      	ldr	r3, [r3, #16]
 8006696:	095b      	lsrs	r3, r3, #5
 8006698:	66bb      	str	r3, [r7, #104]	@ 0x68
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	691b      	ldr	r3, [r3, #16]
 800669e:	f003 031f 	and.w	r3, r3, #31
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d102      	bne.n	80066ac <USB_ActivateEndpoint+0x288>
 80066a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80066a8:	3b01      	subs	r3, #1
 80066aa:	66bb      	str	r3, [r7, #104]	@ 0x68
 80066ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ae:	881b      	ldrh	r3, [r3, #0]
 80066b0:	b29a      	uxth	r2, r3
 80066b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	029b      	lsls	r3, r3, #10
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	4313      	orrs	r3, r2
 80066bc:	b29b      	uxth	r3, r3
 80066be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066c6:	b29a      	uxth	r2, r3
 80066c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ca:	801a      	strh	r2, [r3, #0]
 80066cc:	e026      	b.n	800671c <USB_ActivateEndpoint+0x2f8>
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d10a      	bne.n	80066ec <USB_ActivateEndpoint+0x2c8>
 80066d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066d8:	881b      	ldrh	r3, [r3, #0]
 80066da:	b29b      	uxth	r3, r3
 80066dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066e4:	b29a      	uxth	r2, r3
 80066e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066e8:	801a      	strh	r2, [r3, #0]
 80066ea:	e017      	b.n	800671c <USB_ActivateEndpoint+0x2f8>
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	691b      	ldr	r3, [r3, #16]
 80066f0:	085b      	lsrs	r3, r3, #1
 80066f2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	691b      	ldr	r3, [r3, #16]
 80066f8:	f003 0301 	and.w	r3, r3, #1
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d002      	beq.n	8006706 <USB_ActivateEndpoint+0x2e2>
 8006700:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006702:	3301      	adds	r3, #1
 8006704:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006708:	881b      	ldrh	r3, [r3, #0]
 800670a:	b29a      	uxth	r2, r3
 800670c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800670e:	b29b      	uxth	r3, r3
 8006710:	029b      	lsls	r3, r3, #10
 8006712:	b29b      	uxth	r3, r3
 8006714:	4313      	orrs	r3, r2
 8006716:	b29a      	uxth	r2, r3
 8006718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800671a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	4413      	add	r3, r2
 8006726:	881b      	ldrh	r3, [r3, #0]
 8006728:	847b      	strh	r3, [r7, #34]	@ 0x22
 800672a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800672c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006730:	2b00      	cmp	r3, #0
 8006732:	d01b      	beq.n	800676c <USB_ActivateEndpoint+0x348>
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	009b      	lsls	r3, r3, #2
 800673c:	4413      	add	r3, r2
 800673e:	881b      	ldrh	r3, [r3, #0]
 8006740:	b29b      	uxth	r3, r3
 8006742:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006746:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800674a:	843b      	strh	r3, [r7, #32]
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	781b      	ldrb	r3, [r3, #0]
 8006752:	009b      	lsls	r3, r3, #2
 8006754:	441a      	add	r2, r3
 8006756:	8c3b      	ldrh	r3, [r7, #32]
 8006758:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800675c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006760:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006764:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006768:	b29b      	uxth	r3, r3
 800676a:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d124      	bne.n	80067be <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	4413      	add	r3, r2
 800677e:	881b      	ldrh	r3, [r3, #0]
 8006780:	b29b      	uxth	r3, r3
 8006782:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006786:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800678a:	83bb      	strh	r3, [r7, #28]
 800678c:	8bbb      	ldrh	r3, [r7, #28]
 800678e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006792:	83bb      	strh	r3, [r7, #28]
 8006794:	8bbb      	ldrh	r3, [r7, #28]
 8006796:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800679a:	83bb      	strh	r3, [r7, #28]
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	441a      	add	r2, r3
 80067a6:	8bbb      	ldrh	r3, [r7, #28]
 80067a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	8013      	strh	r3, [r2, #0]
 80067bc:	e1ea      	b.n	8006b94 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	4413      	add	r3, r2
 80067c8:	881b      	ldrh	r3, [r3, #0]
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80067d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067d4:	83fb      	strh	r3, [r7, #30]
 80067d6:	8bfb      	ldrh	r3, [r7, #30]
 80067d8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80067dc:	83fb      	strh	r3, [r7, #30]
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	441a      	add	r2, r3
 80067e8:	8bfb      	ldrh	r3, [r7, #30]
 80067ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	8013      	strh	r3, [r2, #0]
 80067fe:	e1c9      	b.n	8006b94 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	78db      	ldrb	r3, [r3, #3]
 8006804:	2b02      	cmp	r3, #2
 8006806:	d11e      	bne.n	8006846 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	781b      	ldrb	r3, [r3, #0]
 800680e:	009b      	lsls	r3, r3, #2
 8006810:	4413      	add	r3, r2
 8006812:	881b      	ldrh	r3, [r3, #0]
 8006814:	b29b      	uxth	r3, r3
 8006816:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800681a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800681e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	009b      	lsls	r3, r3, #2
 800682a:	441a      	add	r2, r3
 800682c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006830:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006834:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006838:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800683c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006840:	b29b      	uxth	r3, r3
 8006842:	8013      	strh	r3, [r2, #0]
 8006844:	e01d      	b.n	8006882 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006846:	687a      	ldr	r2, [r7, #4]
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	009b      	lsls	r3, r3, #2
 800684e:	4413      	add	r3, r2
 8006850:	881b      	ldrh	r3, [r3, #0]
 8006852:	b29b      	uxth	r3, r3
 8006854:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006858:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800685c:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	441a      	add	r2, r3
 800686a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800686e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006872:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006876:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800687a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800687e:	b29b      	uxth	r3, r3
 8006880:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800688c:	b29b      	uxth	r3, r3
 800688e:	461a      	mov	r2, r3
 8006890:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006892:	4413      	add	r3, r2
 8006894:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	011a      	lsls	r2, r3, #4
 800689c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800689e:	4413      	add	r3, r2
 80068a0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80068a4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	891b      	ldrh	r3, [r3, #8]
 80068aa:	085b      	lsrs	r3, r3, #1
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	005b      	lsls	r3, r3, #1
 80068b0:	b29a      	uxth	r2, r3
 80068b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80068b4:	801a      	strh	r2, [r3, #0]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	657b      	str	r3, [r7, #84]	@ 0x54
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	461a      	mov	r2, r3
 80068c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80068c6:	4413      	add	r3, r2
 80068c8:	657b      	str	r3, [r7, #84]	@ 0x54
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	011a      	lsls	r2, r3, #4
 80068d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80068d2:	4413      	add	r3, r2
 80068d4:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80068d8:	653b      	str	r3, [r7, #80]	@ 0x50
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	895b      	ldrh	r3, [r3, #10]
 80068de:	085b      	lsrs	r3, r3, #1
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	005b      	lsls	r3, r3, #1
 80068e4:	b29a      	uxth	r2, r3
 80068e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80068e8:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	785b      	ldrb	r3, [r3, #1]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	f040 8093 	bne.w	8006a1a <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	009b      	lsls	r3, r3, #2
 80068fc:	4413      	add	r3, r2
 80068fe:	881b      	ldrh	r3, [r3, #0]
 8006900:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8006904:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006908:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800690c:	2b00      	cmp	r3, #0
 800690e:	d01b      	beq.n	8006948 <USB_ActivateEndpoint+0x524>
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	4413      	add	r3, r2
 800691a:	881b      	ldrh	r3, [r3, #0]
 800691c:	b29b      	uxth	r3, r3
 800691e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006922:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006926:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	781b      	ldrb	r3, [r3, #0]
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	441a      	add	r2, r3
 8006932:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006934:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006938:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800693c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006940:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006944:	b29b      	uxth	r3, r3
 8006946:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	4413      	add	r3, r2
 8006952:	881b      	ldrh	r3, [r3, #0]
 8006954:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8006956:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006958:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800695c:	2b00      	cmp	r3, #0
 800695e:	d01b      	beq.n	8006998 <USB_ActivateEndpoint+0x574>
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	4413      	add	r3, r2
 800696a:	881b      	ldrh	r3, [r3, #0]
 800696c:	b29b      	uxth	r3, r3
 800696e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006972:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006976:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	441a      	add	r2, r3
 8006982:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006984:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006988:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800698c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006990:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006994:	b29b      	uxth	r3, r3
 8006996:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	009b      	lsls	r3, r3, #2
 80069a0:	4413      	add	r3, r2
 80069a2:	881b      	ldrh	r3, [r3, #0]
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80069aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069ae:	873b      	strh	r3, [r7, #56]	@ 0x38
 80069b0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80069b2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80069b6:	873b      	strh	r3, [r7, #56]	@ 0x38
 80069b8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80069ba:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80069be:	873b      	strh	r3, [r7, #56]	@ 0x38
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	441a      	add	r2, r3
 80069ca:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80069cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069dc:	b29b      	uxth	r3, r3
 80069de:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	4413      	add	r3, r2
 80069ea:	881b      	ldrh	r3, [r3, #0]
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069f6:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	441a      	add	r2, r3
 8006a02:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006a04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	8013      	strh	r3, [r2, #0]
 8006a18:	e0bc      	b.n	8006b94 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	4413      	add	r3, r2
 8006a24:	881b      	ldrh	r3, [r3, #0]
 8006a26:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8006a2a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006a2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d01d      	beq.n	8006a72 <USB_ActivateEndpoint+0x64e>
 8006a36:	687a      	ldr	r2, [r7, #4]
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	4413      	add	r3, r2
 8006a40:	881b      	ldrh	r3, [r3, #0]
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a4c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	009b      	lsls	r3, r3, #2
 8006a58:	441a      	add	r2, r3
 8006a5a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8006a5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a66:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006a6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	4413      	add	r3, r2
 8006a7c:	881b      	ldrh	r3, [r3, #0]
 8006a7e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8006a82:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006a86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d01d      	beq.n	8006aca <USB_ActivateEndpoint+0x6a6>
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	781b      	ldrb	r3, [r3, #0]
 8006a94:	009b      	lsls	r3, r3, #2
 8006a96:	4413      	add	r3, r2
 8006a98:	881b      	ldrh	r3, [r3, #0]
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006aa0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006aa4:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8006aa8:	687a      	ldr	r2, [r7, #4]
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	009b      	lsls	r3, r3, #2
 8006ab0:	441a      	add	r2, r3
 8006ab2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006ab6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006aba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006abe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ac2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	78db      	ldrb	r3, [r3, #3]
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d024      	beq.n	8006b1c <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	009b      	lsls	r3, r3, #2
 8006ada:	4413      	add	r3, r2
 8006adc:	881b      	ldrh	r3, [r3, #0]
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ae4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ae8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006aec:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006af0:	f083 0320 	eor.w	r3, r3, #32
 8006af4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	441a      	add	r2, r3
 8006b02:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006b06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	8013      	strh	r3, [r2, #0]
 8006b1a:	e01d      	b.n	8006b58 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	781b      	ldrb	r3, [r3, #0]
 8006b22:	009b      	lsls	r3, r3, #2
 8006b24:	4413      	add	r3, r2
 8006b26:	881b      	ldrh	r3, [r3, #0]
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b32:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	009b      	lsls	r3, r3, #2
 8006b3e:	441a      	add	r2, r3
 8006b40:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006b44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	4413      	add	r3, r2
 8006b62:	881b      	ldrh	r3, [r3, #0]
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006b6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b6e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	441a      	add	r2, r3
 8006b7c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8006b80:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b84:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006b94:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3774      	adds	r7, #116	@ 0x74
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bc80      	pop	{r7}
 8006ba0:	4770      	bx	lr
 8006ba2:	bf00      	nop

08006ba4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b08d      	sub	sp, #52	@ 0x34
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	7b1b      	ldrb	r3, [r3, #12]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	f040 808e 	bne.w	8006cd4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	785b      	ldrb	r3, [r3, #1]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d044      	beq.n	8006c4a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	009b      	lsls	r3, r3, #2
 8006bc8:	4413      	add	r3, r2
 8006bca:	881b      	ldrh	r3, [r3, #0]
 8006bcc:	81bb      	strh	r3, [r7, #12]
 8006bce:	89bb      	ldrh	r3, [r7, #12]
 8006bd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d01b      	beq.n	8006c10 <USB_DeactivateEndpoint+0x6c>
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	009b      	lsls	r3, r3, #2
 8006be0:	4413      	add	r3, r2
 8006be2:	881b      	ldrh	r3, [r3, #0]
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bee:	817b      	strh	r3, [r7, #10]
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	441a      	add	r2, r3
 8006bfa:	897b      	ldrh	r3, [r7, #10]
 8006bfc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c00:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c08:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	781b      	ldrb	r3, [r3, #0]
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	4413      	add	r3, r2
 8006c1a:	881b      	ldrh	r3, [r3, #0]
 8006c1c:	b29b      	uxth	r3, r3
 8006c1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c26:	813b      	strh	r3, [r7, #8]
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	441a      	add	r2, r3
 8006c32:	893b      	ldrh	r3, [r7, #8]
 8006c34:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c38:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	8013      	strh	r3, [r2, #0]
 8006c48:	e192      	b.n	8006f70 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c4a:	687a      	ldr	r2, [r7, #4]
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	4413      	add	r3, r2
 8006c54:	881b      	ldrh	r3, [r3, #0]
 8006c56:	827b      	strh	r3, [r7, #18]
 8006c58:	8a7b      	ldrh	r3, [r7, #18]
 8006c5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d01b      	beq.n	8006c9a <USB_DeactivateEndpoint+0xf6>
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	4413      	add	r3, r2
 8006c6c:	881b      	ldrh	r3, [r3, #0]
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c78:	823b      	strh	r3, [r7, #16]
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	009b      	lsls	r3, r3, #2
 8006c82:	441a      	add	r2, r3
 8006c84:	8a3b      	ldrh	r3, [r7, #16]
 8006c86:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c8a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c8e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006c92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	4413      	add	r3, r2
 8006ca4:	881b      	ldrh	r3, [r3, #0]
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006cac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cb0:	81fb      	strh	r3, [r7, #14]
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	441a      	add	r2, r3
 8006cbc:	89fb      	ldrh	r3, [r7, #14]
 8006cbe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006cc2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006cc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006cca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	8013      	strh	r3, [r2, #0]
 8006cd2:	e14d      	b.n	8006f70 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	785b      	ldrb	r3, [r3, #1]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	f040 80a5 	bne.w	8006e28 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	009b      	lsls	r3, r3, #2
 8006ce6:	4413      	add	r3, r2
 8006ce8:	881b      	ldrh	r3, [r3, #0]
 8006cea:	843b      	strh	r3, [r7, #32]
 8006cec:	8c3b      	ldrh	r3, [r7, #32]
 8006cee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d01b      	beq.n	8006d2e <USB_DeactivateEndpoint+0x18a>
 8006cf6:	687a      	ldr	r2, [r7, #4]
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	4413      	add	r3, r2
 8006d00:	881b      	ldrh	r3, [r3, #0]
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d0c:	83fb      	strh	r3, [r7, #30]
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	441a      	add	r2, r3
 8006d18:	8bfb      	ldrh	r3, [r7, #30]
 8006d1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d22:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006d26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	781b      	ldrb	r3, [r3, #0]
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	4413      	add	r3, r2
 8006d38:	881b      	ldrh	r3, [r3, #0]
 8006d3a:	83bb      	strh	r3, [r7, #28]
 8006d3c:	8bbb      	ldrh	r3, [r7, #28]
 8006d3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d01b      	beq.n	8006d7e <USB_DeactivateEndpoint+0x1da>
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	781b      	ldrb	r3, [r3, #0]
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	4413      	add	r3, r2
 8006d50:	881b      	ldrh	r3, [r3, #0]
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d5c:	837b      	strh	r3, [r7, #26]
 8006d5e:	687a      	ldr	r2, [r7, #4]
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	009b      	lsls	r3, r3, #2
 8006d66:	441a      	add	r2, r3
 8006d68:	8b7b      	ldrh	r3, [r7, #26]
 8006d6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d76:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006d7e:	687a      	ldr	r2, [r7, #4]
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	781b      	ldrb	r3, [r3, #0]
 8006d84:	009b      	lsls	r3, r3, #2
 8006d86:	4413      	add	r3, r2
 8006d88:	881b      	ldrh	r3, [r3, #0]
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d94:	833b      	strh	r3, [r7, #24]
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	441a      	add	r2, r3
 8006da0:	8b3b      	ldrh	r3, [r7, #24]
 8006da2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006da6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006daa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006dae:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006db6:	687a      	ldr	r2, [r7, #4]
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	4413      	add	r3, r2
 8006dc0:	881b      	ldrh	r3, [r3, #0]
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006dc8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dcc:	82fb      	strh	r3, [r7, #22]
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	441a      	add	r2, r3
 8006dd8:	8afb      	ldrh	r3, [r7, #22]
 8006dda:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006dde:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006de2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006de6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006dee:	687a      	ldr	r2, [r7, #4]
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	4413      	add	r3, r2
 8006df8:	881b      	ldrh	r3, [r3, #0]
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e04:	82bb      	strh	r3, [r7, #20]
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	441a      	add	r2, r3
 8006e10:	8abb      	ldrh	r3, [r7, #20]
 8006e12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	8013      	strh	r3, [r2, #0]
 8006e26:	e0a3      	b.n	8006f70 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e28:	687a      	ldr	r2, [r7, #4]
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	781b      	ldrb	r3, [r3, #0]
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	4413      	add	r3, r2
 8006e32:	881b      	ldrh	r3, [r3, #0]
 8006e34:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8006e36:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006e38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d01b      	beq.n	8006e78 <USB_DeactivateEndpoint+0x2d4>
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	781b      	ldrb	r3, [r3, #0]
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	4413      	add	r3, r2
 8006e4a:	881b      	ldrh	r3, [r3, #0]
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e56:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	009b      	lsls	r3, r3, #2
 8006e60:	441a      	add	r2, r3
 8006e62:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006e64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e6c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006e70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e78:	687a      	ldr	r2, [r7, #4]
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	781b      	ldrb	r3, [r3, #0]
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	4413      	add	r3, r2
 8006e82:	881b      	ldrh	r3, [r3, #0]
 8006e84:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006e86:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006e88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d01b      	beq.n	8006ec8 <USB_DeactivateEndpoint+0x324>
 8006e90:	687a      	ldr	r2, [r7, #4]
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	781b      	ldrb	r3, [r3, #0]
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	4413      	add	r3, r2
 8006e9a:	881b      	ldrh	r3, [r3, #0]
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ea2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ea6:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	009b      	lsls	r3, r3, #2
 8006eb0:	441a      	add	r2, r3
 8006eb2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006eb4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006eb8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ebc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ec0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006ec8:	687a      	ldr	r2, [r7, #4]
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	009b      	lsls	r3, r3, #2
 8006ed0:	4413      	add	r3, r2
 8006ed2:	881b      	ldrh	r3, [r3, #0]
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006eda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ede:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	781b      	ldrb	r3, [r3, #0]
 8006ee6:	009b      	lsls	r3, r3, #2
 8006ee8:	441a      	add	r2, r3
 8006eea:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006eec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ef0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ef4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006ef8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	781b      	ldrb	r3, [r3, #0]
 8006f06:	009b      	lsls	r3, r3, #2
 8006f08:	4413      	add	r3, r2
 8006f0a:	881b      	ldrh	r3, [r3, #0]
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f16:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	009b      	lsls	r3, r3, #2
 8006f20:	441a      	add	r2, r3
 8006f22:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006f24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	009b      	lsls	r3, r3, #2
 8006f40:	4413      	add	r3, r2
 8006f42:	881b      	ldrh	r3, [r3, #0]
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006f4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f4e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	441a      	add	r2, r3
 8006f5a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006f5c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f60:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006f70:	2300      	movs	r3, #0
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3734      	adds	r7, #52	@ 0x34
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bc80      	pop	{r7}
 8006f7a:	4770      	bx	lr

08006f7c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b0c2      	sub	sp, #264	@ 0x108
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f8a:	6018      	str	r0, [r3, #0]
 8006f8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f94:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006f96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	785b      	ldrb	r3, [r3, #1]
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	f040 86b7 	bne.w	8007d16 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006fa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	699a      	ldr	r2, [r3, #24]
 8006fb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	691b      	ldr	r3, [r3, #16]
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d908      	bls.n	8006fd6 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006fc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	691b      	ldr	r3, [r3, #16]
 8006fd0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006fd4:	e007      	b.n	8006fe6 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006fd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	699b      	ldr	r3, [r3, #24]
 8006fe2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006fe6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	7b1b      	ldrb	r3, [r3, #12]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d13a      	bne.n	800706c <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006ff6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ffa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	6959      	ldr	r1, [r3, #20]
 8007002:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007006:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	88da      	ldrh	r2, [r3, #6]
 800700e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007012:	b29b      	uxth	r3, r3
 8007014:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007018:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800701c:	6800      	ldr	r0, [r0, #0]
 800701e:	f001 fc9c 	bl	800895a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007022:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007026:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	613b      	str	r3, [r7, #16]
 800702e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007032:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800703c:	b29b      	uxth	r3, r3
 800703e:	461a      	mov	r2, r3
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	4413      	add	r3, r2
 8007044:	613b      	str	r3, [r7, #16]
 8007046:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800704a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	781b      	ldrb	r3, [r3, #0]
 8007052:	011a      	lsls	r2, r3, #4
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	4413      	add	r3, r2
 8007058:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800705c:	60fb      	str	r3, [r7, #12]
 800705e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007062:	b29a      	uxth	r2, r3
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	801a      	strh	r2, [r3, #0]
 8007068:	f000 be1f 	b.w	8007caa <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800706c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007070:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	78db      	ldrb	r3, [r3, #3]
 8007078:	2b02      	cmp	r3, #2
 800707a:	f040 8462 	bne.w	8007942 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800707e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007082:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	6a1a      	ldr	r2, [r3, #32]
 800708a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800708e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	691b      	ldr	r3, [r3, #16]
 8007096:	429a      	cmp	r2, r3
 8007098:	f240 83df 	bls.w	800785a <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800709c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	781b      	ldrb	r3, [r3, #0]
 80070b2:	009b      	lsls	r3, r3, #2
 80070b4:	4413      	add	r3, r2
 80070b6:	881b      	ldrh	r3, [r3, #0]
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80070be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070c2:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80070c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	781b      	ldrb	r3, [r3, #0]
 80070dc:	009b      	lsls	r3, r3, #2
 80070de:	441a      	add	r2, r3
 80070e0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80070e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070ec:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80070f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80070f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	6a1a      	ldr	r2, [r3, #32]
 8007104:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007108:	1ad2      	subs	r2, r2, r3
 800710a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800710e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007116:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800711a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800711e:	681a      	ldr	r2, [r3, #0]
 8007120:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007124:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	781b      	ldrb	r3, [r3, #0]
 800712c:	009b      	lsls	r3, r3, #2
 800712e:	4413      	add	r3, r2
 8007130:	881b      	ldrh	r3, [r3, #0]
 8007132:	b29b      	uxth	r3, r3
 8007134:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007138:	2b00      	cmp	r3, #0
 800713a:	f000 81c7 	beq.w	80074cc <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800713e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007142:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	633b      	str	r3, [r7, #48]	@ 0x30
 800714a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800714e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	785b      	ldrb	r3, [r3, #1]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d177      	bne.n	800724a <USB_EPStartXfer+0x2ce>
 800715a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800715e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007166:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800716a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007174:	b29b      	uxth	r3, r3
 8007176:	461a      	mov	r2, r3
 8007178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800717a:	4413      	add	r3, r2
 800717c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800717e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007182:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	781b      	ldrb	r3, [r3, #0]
 800718a:	011a      	lsls	r2, r3, #4
 800718c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800718e:	4413      	add	r3, r2
 8007190:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007194:	627b      	str	r3, [r7, #36]	@ 0x24
 8007196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007198:	881b      	ldrh	r3, [r3, #0]
 800719a:	b29b      	uxth	r3, r3
 800719c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80071a0:	b29a      	uxth	r2, r3
 80071a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071a4:	801a      	strh	r2, [r3, #0]
 80071a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071aa:	2b3e      	cmp	r3, #62	@ 0x3e
 80071ac:	d921      	bls.n	80071f2 <USB_EPStartXfer+0x276>
 80071ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071b2:	095b      	lsrs	r3, r3, #5
 80071b4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80071b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071bc:	f003 031f 	and.w	r3, r3, #31
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d104      	bne.n	80071ce <USB_EPStartXfer+0x252>
 80071c4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80071c8:	3b01      	subs	r3, #1
 80071ca:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80071ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d0:	881b      	ldrh	r3, [r3, #0]
 80071d2:	b29a      	uxth	r2, r3
 80071d4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80071d8:	b29b      	uxth	r3, r3
 80071da:	029b      	lsls	r3, r3, #10
 80071dc:	b29b      	uxth	r3, r3
 80071de:	4313      	orrs	r3, r2
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071ea:	b29a      	uxth	r2, r3
 80071ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ee:	801a      	strh	r2, [r3, #0]
 80071f0:	e050      	b.n	8007294 <USB_EPStartXfer+0x318>
 80071f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d10a      	bne.n	8007210 <USB_EPStartXfer+0x294>
 80071fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071fc:	881b      	ldrh	r3, [r3, #0]
 80071fe:	b29b      	uxth	r3, r3
 8007200:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007204:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007208:	b29a      	uxth	r2, r3
 800720a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800720c:	801a      	strh	r2, [r3, #0]
 800720e:	e041      	b.n	8007294 <USB_EPStartXfer+0x318>
 8007210:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007214:	085b      	lsrs	r3, r3, #1
 8007216:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800721a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800721e:	f003 0301 	and.w	r3, r3, #1
 8007222:	2b00      	cmp	r3, #0
 8007224:	d004      	beq.n	8007230 <USB_EPStartXfer+0x2b4>
 8007226:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800722a:	3301      	adds	r3, #1
 800722c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007232:	881b      	ldrh	r3, [r3, #0]
 8007234:	b29a      	uxth	r2, r3
 8007236:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800723a:	b29b      	uxth	r3, r3
 800723c:	029b      	lsls	r3, r3, #10
 800723e:	b29b      	uxth	r3, r3
 8007240:	4313      	orrs	r3, r2
 8007242:	b29a      	uxth	r2, r3
 8007244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007246:	801a      	strh	r2, [r3, #0]
 8007248:	e024      	b.n	8007294 <USB_EPStartXfer+0x318>
 800724a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800724e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	785b      	ldrb	r3, [r3, #1]
 8007256:	2b01      	cmp	r3, #1
 8007258:	d11c      	bne.n	8007294 <USB_EPStartXfer+0x318>
 800725a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800725e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007268:	b29b      	uxth	r3, r3
 800726a:	461a      	mov	r2, r3
 800726c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800726e:	4413      	add	r3, r2
 8007270:	633b      	str	r3, [r7, #48]	@ 0x30
 8007272:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007276:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	781b      	ldrb	r3, [r3, #0]
 800727e:	011a      	lsls	r2, r3, #4
 8007280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007282:	4413      	add	r3, r2
 8007284:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007288:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800728a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800728e:	b29a      	uxth	r2, r3
 8007290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007292:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007294:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007298:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	895b      	ldrh	r3, [r3, #10]
 80072a0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80072a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	6959      	ldr	r1, [r3, #20]
 80072b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80072ba:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80072be:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80072c2:	6800      	ldr	r0, [r0, #0]
 80072c4:	f001 fb49 	bl	800895a <USB_WritePMA>
            ep->xfer_buff += len;
 80072c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	695a      	ldr	r2, [r3, #20]
 80072d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072d8:	441a      	add	r2, r3
 80072da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80072e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	6a1a      	ldr	r2, [r3, #32]
 80072f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	691b      	ldr	r3, [r3, #16]
 80072fe:	429a      	cmp	r2, r3
 8007300:	d90f      	bls.n	8007322 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8007302:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007306:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	6a1a      	ldr	r2, [r3, #32]
 800730e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007312:	1ad2      	subs	r2, r2, r3
 8007314:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007318:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	621a      	str	r2, [r3, #32]
 8007320:	e00e      	b.n	8007340 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8007322:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007326:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	6a1b      	ldr	r3, [r3, #32]
 800732e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007332:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007336:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	2200      	movs	r2, #0
 800733e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007340:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007344:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	785b      	ldrb	r3, [r3, #1]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d177      	bne.n	8007440 <USB_EPStartXfer+0x4c4>
 8007350:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007354:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	61bb      	str	r3, [r7, #24]
 800735c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007360:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800736a:	b29b      	uxth	r3, r3
 800736c:	461a      	mov	r2, r3
 800736e:	69bb      	ldr	r3, [r7, #24]
 8007370:	4413      	add	r3, r2
 8007372:	61bb      	str	r3, [r7, #24]
 8007374:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007378:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	781b      	ldrb	r3, [r3, #0]
 8007380:	011a      	lsls	r2, r3, #4
 8007382:	69bb      	ldr	r3, [r7, #24]
 8007384:	4413      	add	r3, r2
 8007386:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800738a:	617b      	str	r3, [r7, #20]
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	881b      	ldrh	r3, [r3, #0]
 8007390:	b29b      	uxth	r3, r3
 8007392:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007396:	b29a      	uxth	r2, r3
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	801a      	strh	r2, [r3, #0]
 800739c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073a0:	2b3e      	cmp	r3, #62	@ 0x3e
 80073a2:	d921      	bls.n	80073e8 <USB_EPStartXfer+0x46c>
 80073a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073a8:	095b      	lsrs	r3, r3, #5
 80073aa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80073ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073b2:	f003 031f 	and.w	r3, r3, #31
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d104      	bne.n	80073c4 <USB_EPStartXfer+0x448>
 80073ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80073be:	3b01      	subs	r3, #1
 80073c0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	881b      	ldrh	r3, [r3, #0]
 80073c8:	b29a      	uxth	r2, r3
 80073ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	029b      	lsls	r3, r3, #10
 80073d2:	b29b      	uxth	r3, r3
 80073d4:	4313      	orrs	r3, r2
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073e0:	b29a      	uxth	r2, r3
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	801a      	strh	r2, [r3, #0]
 80073e6:	e056      	b.n	8007496 <USB_EPStartXfer+0x51a>
 80073e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d10a      	bne.n	8007406 <USB_EPStartXfer+0x48a>
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	881b      	ldrh	r3, [r3, #0]
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073fe:	b29a      	uxth	r2, r3
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	801a      	strh	r2, [r3, #0]
 8007404:	e047      	b.n	8007496 <USB_EPStartXfer+0x51a>
 8007406:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800740a:	085b      	lsrs	r3, r3, #1
 800740c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007410:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007414:	f003 0301 	and.w	r3, r3, #1
 8007418:	2b00      	cmp	r3, #0
 800741a:	d004      	beq.n	8007426 <USB_EPStartXfer+0x4aa>
 800741c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007420:	3301      	adds	r3, #1
 8007422:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	881b      	ldrh	r3, [r3, #0]
 800742a:	b29a      	uxth	r2, r3
 800742c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007430:	b29b      	uxth	r3, r3
 8007432:	029b      	lsls	r3, r3, #10
 8007434:	b29b      	uxth	r3, r3
 8007436:	4313      	orrs	r3, r2
 8007438:	b29a      	uxth	r2, r3
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	801a      	strh	r2, [r3, #0]
 800743e:	e02a      	b.n	8007496 <USB_EPStartXfer+0x51a>
 8007440:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007444:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	785b      	ldrb	r3, [r3, #1]
 800744c:	2b01      	cmp	r3, #1
 800744e:	d122      	bne.n	8007496 <USB_EPStartXfer+0x51a>
 8007450:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007454:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	623b      	str	r3, [r7, #32]
 800745c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007460:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800746a:	b29b      	uxth	r3, r3
 800746c:	461a      	mov	r2, r3
 800746e:	6a3b      	ldr	r3, [r7, #32]
 8007470:	4413      	add	r3, r2
 8007472:	623b      	str	r3, [r7, #32]
 8007474:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007478:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	781b      	ldrb	r3, [r3, #0]
 8007480:	011a      	lsls	r2, r3, #4
 8007482:	6a3b      	ldr	r3, [r7, #32]
 8007484:	4413      	add	r3, r2
 8007486:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800748a:	61fb      	str	r3, [r7, #28]
 800748c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007490:	b29a      	uxth	r2, r3
 8007492:	69fb      	ldr	r3, [r7, #28]
 8007494:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007496:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800749a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	891b      	ldrh	r3, [r3, #8]
 80074a2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80074a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	6959      	ldr	r1, [r3, #20]
 80074b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80074bc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80074c0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80074c4:	6800      	ldr	r0, [r0, #0]
 80074c6:	f001 fa48 	bl	800895a <USB_WritePMA>
 80074ca:	e3ee      	b.n	8007caa <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80074cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	785b      	ldrb	r3, [r3, #1]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d177      	bne.n	80075cc <USB_EPStartXfer+0x650>
 80074dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80074e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074f6:	b29b      	uxth	r3, r3
 80074f8:	461a      	mov	r2, r3
 80074fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80074fc:	4413      	add	r3, r2
 80074fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007500:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007504:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	781b      	ldrb	r3, [r3, #0]
 800750c:	011a      	lsls	r2, r3, #4
 800750e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007510:	4413      	add	r3, r2
 8007512:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007516:	647b      	str	r3, [r7, #68]	@ 0x44
 8007518:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800751a:	881b      	ldrh	r3, [r3, #0]
 800751c:	b29b      	uxth	r3, r3
 800751e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007522:	b29a      	uxth	r2, r3
 8007524:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007526:	801a      	strh	r2, [r3, #0]
 8007528:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800752c:	2b3e      	cmp	r3, #62	@ 0x3e
 800752e:	d921      	bls.n	8007574 <USB_EPStartXfer+0x5f8>
 8007530:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007534:	095b      	lsrs	r3, r3, #5
 8007536:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800753a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800753e:	f003 031f 	and.w	r3, r3, #31
 8007542:	2b00      	cmp	r3, #0
 8007544:	d104      	bne.n	8007550 <USB_EPStartXfer+0x5d4>
 8007546:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800754a:	3b01      	subs	r3, #1
 800754c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007550:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007552:	881b      	ldrh	r3, [r3, #0]
 8007554:	b29a      	uxth	r2, r3
 8007556:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800755a:	b29b      	uxth	r3, r3
 800755c:	029b      	lsls	r3, r3, #10
 800755e:	b29b      	uxth	r3, r3
 8007560:	4313      	orrs	r3, r2
 8007562:	b29b      	uxth	r3, r3
 8007564:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007568:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800756c:	b29a      	uxth	r2, r3
 800756e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007570:	801a      	strh	r2, [r3, #0]
 8007572:	e056      	b.n	8007622 <USB_EPStartXfer+0x6a6>
 8007574:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007578:	2b00      	cmp	r3, #0
 800757a:	d10a      	bne.n	8007592 <USB_EPStartXfer+0x616>
 800757c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800757e:	881b      	ldrh	r3, [r3, #0]
 8007580:	b29b      	uxth	r3, r3
 8007582:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007586:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800758a:	b29a      	uxth	r2, r3
 800758c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800758e:	801a      	strh	r2, [r3, #0]
 8007590:	e047      	b.n	8007622 <USB_EPStartXfer+0x6a6>
 8007592:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007596:	085b      	lsrs	r3, r3, #1
 8007598:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800759c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075a0:	f003 0301 	and.w	r3, r3, #1
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d004      	beq.n	80075b2 <USB_EPStartXfer+0x636>
 80075a8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80075ac:	3301      	adds	r3, #1
 80075ae:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80075b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80075b4:	881b      	ldrh	r3, [r3, #0]
 80075b6:	b29a      	uxth	r2, r3
 80075b8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80075bc:	b29b      	uxth	r3, r3
 80075be:	029b      	lsls	r3, r3, #10
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	4313      	orrs	r3, r2
 80075c4:	b29a      	uxth	r2, r3
 80075c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80075c8:	801a      	strh	r2, [r3, #0]
 80075ca:	e02a      	b.n	8007622 <USB_EPStartXfer+0x6a6>
 80075cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	785b      	ldrb	r3, [r3, #1]
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d122      	bne.n	8007622 <USB_EPStartXfer+0x6a6>
 80075dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80075e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	461a      	mov	r2, r3
 80075fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80075fc:	4413      	add	r3, r2
 80075fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8007600:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007604:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	011a      	lsls	r2, r3, #4
 800760e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007610:	4413      	add	r3, r2
 8007612:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007616:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007618:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800761c:	b29a      	uxth	r2, r3
 800761e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007620:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007622:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007626:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	891b      	ldrh	r3, [r3, #8]
 800762e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007632:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007636:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	6959      	ldr	r1, [r3, #20]
 800763e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007642:	b29b      	uxth	r3, r3
 8007644:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007648:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800764c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007650:	6800      	ldr	r0, [r0, #0]
 8007652:	f001 f982 	bl	800895a <USB_WritePMA>
            ep->xfer_buff += len;
 8007656:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800765a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	695a      	ldr	r2, [r3, #20]
 8007662:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007666:	441a      	add	r2, r3
 8007668:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800766c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007674:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007678:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	6a1a      	ldr	r2, [r3, #32]
 8007680:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007684:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	691b      	ldr	r3, [r3, #16]
 800768c:	429a      	cmp	r2, r3
 800768e:	d90f      	bls.n	80076b0 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8007690:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007694:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	6a1a      	ldr	r2, [r3, #32]
 800769c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076a0:	1ad2      	subs	r2, r2, r3
 80076a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	621a      	str	r2, [r3, #32]
 80076ae:	e00e      	b.n	80076ce <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80076b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	6a1b      	ldr	r3, [r3, #32]
 80076bc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80076c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	2200      	movs	r2, #0
 80076cc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80076ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80076da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	785b      	ldrb	r3, [r3, #1]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d177      	bne.n	80077da <USB_EPStartXfer+0x85e>
 80076ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80076f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007704:	b29b      	uxth	r3, r3
 8007706:	461a      	mov	r2, r3
 8007708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800770a:	4413      	add	r3, r2
 800770c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800770e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007712:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	781b      	ldrb	r3, [r3, #0]
 800771a:	011a      	lsls	r2, r3, #4
 800771c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800771e:	4413      	add	r3, r2
 8007720:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007724:	637b      	str	r3, [r7, #52]	@ 0x34
 8007726:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007728:	881b      	ldrh	r3, [r3, #0]
 800772a:	b29b      	uxth	r3, r3
 800772c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007730:	b29a      	uxth	r2, r3
 8007732:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007734:	801a      	strh	r2, [r3, #0]
 8007736:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800773a:	2b3e      	cmp	r3, #62	@ 0x3e
 800773c:	d921      	bls.n	8007782 <USB_EPStartXfer+0x806>
 800773e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007742:	095b      	lsrs	r3, r3, #5
 8007744:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007748:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800774c:	f003 031f 	and.w	r3, r3, #31
 8007750:	2b00      	cmp	r3, #0
 8007752:	d104      	bne.n	800775e <USB_EPStartXfer+0x7e2>
 8007754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007758:	3b01      	subs	r3, #1
 800775a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800775e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007760:	881b      	ldrh	r3, [r3, #0]
 8007762:	b29a      	uxth	r2, r3
 8007764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007768:	b29b      	uxth	r3, r3
 800776a:	029b      	lsls	r3, r3, #10
 800776c:	b29b      	uxth	r3, r3
 800776e:	4313      	orrs	r3, r2
 8007770:	b29b      	uxth	r3, r3
 8007772:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007776:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800777a:	b29a      	uxth	r2, r3
 800777c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800777e:	801a      	strh	r2, [r3, #0]
 8007780:	e050      	b.n	8007824 <USB_EPStartXfer+0x8a8>
 8007782:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007786:	2b00      	cmp	r3, #0
 8007788:	d10a      	bne.n	80077a0 <USB_EPStartXfer+0x824>
 800778a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800778c:	881b      	ldrh	r3, [r3, #0]
 800778e:	b29b      	uxth	r3, r3
 8007790:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007794:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007798:	b29a      	uxth	r2, r3
 800779a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800779c:	801a      	strh	r2, [r3, #0]
 800779e:	e041      	b.n	8007824 <USB_EPStartXfer+0x8a8>
 80077a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077a4:	085b      	lsrs	r3, r3, #1
 80077a6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80077aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077ae:	f003 0301 	and.w	r3, r3, #1
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d004      	beq.n	80077c0 <USB_EPStartXfer+0x844>
 80077b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077ba:	3301      	adds	r3, #1
 80077bc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80077c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077c2:	881b      	ldrh	r3, [r3, #0]
 80077c4:	b29a      	uxth	r2, r3
 80077c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	029b      	lsls	r3, r3, #10
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	4313      	orrs	r3, r2
 80077d2:	b29a      	uxth	r2, r3
 80077d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077d6:	801a      	strh	r2, [r3, #0]
 80077d8:	e024      	b.n	8007824 <USB_EPStartXfer+0x8a8>
 80077da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	785b      	ldrb	r3, [r3, #1]
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	d11c      	bne.n	8007824 <USB_EPStartXfer+0x8a8>
 80077ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	461a      	mov	r2, r3
 80077fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077fe:	4413      	add	r3, r2
 8007800:	643b      	str	r3, [r7, #64]	@ 0x40
 8007802:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007806:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	781b      	ldrb	r3, [r3, #0]
 800780e:	011a      	lsls	r2, r3, #4
 8007810:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007812:	4413      	add	r3, r2
 8007814:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007818:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800781a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800781e:	b29a      	uxth	r2, r3
 8007820:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007822:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007824:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007828:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	895b      	ldrh	r3, [r3, #10]
 8007830:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007834:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007838:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	6959      	ldr	r1, [r3, #20]
 8007840:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007844:	b29b      	uxth	r3, r3
 8007846:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800784a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800784e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007852:	6800      	ldr	r0, [r0, #0]
 8007854:	f001 f881 	bl	800895a <USB_WritePMA>
 8007858:	e227      	b.n	8007caa <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800785a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800785e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	6a1b      	ldr	r3, [r3, #32]
 8007866:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800786a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800786e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007872:	681a      	ldr	r2, [r3, #0]
 8007874:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007878:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	781b      	ldrb	r3, [r3, #0]
 8007880:	009b      	lsls	r3, r3, #2
 8007882:	4413      	add	r3, r2
 8007884:	881b      	ldrh	r3, [r3, #0]
 8007886:	b29b      	uxth	r3, r3
 8007888:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800788c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007890:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007894:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007898:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800789c:	681a      	ldr	r2, [r3, #0]
 800789e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	781b      	ldrb	r3, [r3, #0]
 80078aa:	009b      	lsls	r3, r3, #2
 80078ac:	441a      	add	r2, r3
 80078ae:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80078b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80078b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80078ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80078be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80078c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80078d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	461a      	mov	r2, r3
 80078e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80078e6:	4413      	add	r3, r2
 80078e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80078ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	781b      	ldrb	r3, [r3, #0]
 80078f6:	011a      	lsls	r2, r3, #4
 80078f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80078fa:	4413      	add	r3, r2
 80078fc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007900:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007902:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007906:	b29a      	uxth	r2, r3
 8007908:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800790a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800790c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007910:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	891b      	ldrh	r3, [r3, #8]
 8007918:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800791c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007920:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	6959      	ldr	r1, [r3, #20]
 8007928:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800792c:	b29b      	uxth	r3, r3
 800792e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007932:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007936:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800793a:	6800      	ldr	r0, [r0, #0]
 800793c:	f001 f80d 	bl	800895a <USB_WritePMA>
 8007940:	e1b3      	b.n	8007caa <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007942:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007946:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	6a1a      	ldr	r2, [r3, #32]
 800794e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007952:	1ad2      	subs	r2, r2, r3
 8007954:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007958:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007960:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007964:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007968:	681a      	ldr	r2, [r3, #0]
 800796a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800796e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	009b      	lsls	r3, r3, #2
 8007978:	4413      	add	r3, r2
 800797a:	881b      	ldrh	r3, [r3, #0]
 800797c:	b29b      	uxth	r3, r3
 800797e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007982:	2b00      	cmp	r3, #0
 8007984:	f000 80c6 	beq.w	8007b14 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007988:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800798c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	673b      	str	r3, [r7, #112]	@ 0x70
 8007994:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007998:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	785b      	ldrb	r3, [r3, #1]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d177      	bne.n	8007a94 <USB_EPStartXfer+0xb18>
 80079a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	66bb      	str	r3, [r7, #104]	@ 0x68
 80079b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079be:	b29b      	uxth	r3, r3
 80079c0:	461a      	mov	r2, r3
 80079c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80079c4:	4413      	add	r3, r2
 80079c6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80079c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	781b      	ldrb	r3, [r3, #0]
 80079d4:	011a      	lsls	r2, r3, #4
 80079d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80079d8:	4413      	add	r3, r2
 80079da:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80079de:	667b      	str	r3, [r7, #100]	@ 0x64
 80079e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80079e2:	881b      	ldrh	r3, [r3, #0]
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80079ea:	b29a      	uxth	r2, r3
 80079ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80079ee:	801a      	strh	r2, [r3, #0]
 80079f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079f4:	2b3e      	cmp	r3, #62	@ 0x3e
 80079f6:	d921      	bls.n	8007a3c <USB_EPStartXfer+0xac0>
 80079f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079fc:	095b      	lsrs	r3, r3, #5
 80079fe:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007a02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a06:	f003 031f 	and.w	r3, r3, #31
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d104      	bne.n	8007a18 <USB_EPStartXfer+0xa9c>
 8007a0e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007a12:	3b01      	subs	r3, #1
 8007a14:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007a18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007a1a:	881b      	ldrh	r3, [r3, #0]
 8007a1c:	b29a      	uxth	r2, r3
 8007a1e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007a22:	b29b      	uxth	r3, r3
 8007a24:	029b      	lsls	r3, r3, #10
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a34:	b29a      	uxth	r2, r3
 8007a36:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007a38:	801a      	strh	r2, [r3, #0]
 8007a3a:	e050      	b.n	8007ade <USB_EPStartXfer+0xb62>
 8007a3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d10a      	bne.n	8007a5a <USB_EPStartXfer+0xade>
 8007a44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007a46:	881b      	ldrh	r3, [r3, #0]
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a52:	b29a      	uxth	r2, r3
 8007a54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007a56:	801a      	strh	r2, [r3, #0]
 8007a58:	e041      	b.n	8007ade <USB_EPStartXfer+0xb62>
 8007a5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a5e:	085b      	lsrs	r3, r3, #1
 8007a60:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007a64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a68:	f003 0301 	and.w	r3, r3, #1
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d004      	beq.n	8007a7a <USB_EPStartXfer+0xafe>
 8007a70:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007a74:	3301      	adds	r3, #1
 8007a76:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007a7a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007a7c:	881b      	ldrh	r3, [r3, #0]
 8007a7e:	b29a      	uxth	r2, r3
 8007a80:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007a84:	b29b      	uxth	r3, r3
 8007a86:	029b      	lsls	r3, r3, #10
 8007a88:	b29b      	uxth	r3, r3
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	b29a      	uxth	r2, r3
 8007a8e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007a90:	801a      	strh	r2, [r3, #0]
 8007a92:	e024      	b.n	8007ade <USB_EPStartXfer+0xb62>
 8007a94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	785b      	ldrb	r3, [r3, #1]
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d11c      	bne.n	8007ade <USB_EPStartXfer+0xb62>
 8007aa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aa8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007ab8:	4413      	add	r3, r2
 8007aba:	673b      	str	r3, [r7, #112]	@ 0x70
 8007abc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ac0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	781b      	ldrb	r3, [r3, #0]
 8007ac8:	011a      	lsls	r2, r3, #4
 8007aca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007acc:	4413      	add	r3, r2
 8007ace:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007ad2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ad8:	b29a      	uxth	r2, r3
 8007ada:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007adc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007ade:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ae2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	895b      	ldrh	r3, [r3, #10]
 8007aea:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007aee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007af2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	6959      	ldr	r1, [r3, #20]
 8007afa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007afe:	b29b      	uxth	r3, r3
 8007b00:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007b04:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007b08:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007b0c:	6800      	ldr	r0, [r0, #0]
 8007b0e:	f000 ff24 	bl	800895a <USB_WritePMA>
 8007b12:	e0ca      	b.n	8007caa <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007b14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	785b      	ldrb	r3, [r3, #1]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d177      	bne.n	8007c14 <USB_EPStartXfer+0xc98>
 8007b24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b28:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007b30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b34:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	461a      	mov	r2, r3
 8007b42:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007b44:	4413      	add	r3, r2
 8007b46:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007b48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	781b      	ldrb	r3, [r3, #0]
 8007b54:	011a      	lsls	r2, r3, #4
 8007b56:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007b58:	4413      	add	r3, r2
 8007b5a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007b5e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007b60:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007b62:	881b      	ldrh	r3, [r3, #0]
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b6a:	b29a      	uxth	r2, r3
 8007b6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007b6e:	801a      	strh	r2, [r3, #0]
 8007b70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b74:	2b3e      	cmp	r3, #62	@ 0x3e
 8007b76:	d921      	bls.n	8007bbc <USB_EPStartXfer+0xc40>
 8007b78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b7c:	095b      	lsrs	r3, r3, #5
 8007b7e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007b82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b86:	f003 031f 	and.w	r3, r3, #31
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d104      	bne.n	8007b98 <USB_EPStartXfer+0xc1c>
 8007b8e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007b92:	3b01      	subs	r3, #1
 8007b94:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007b98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007b9a:	881b      	ldrh	r3, [r3, #0]
 8007b9c:	b29a      	uxth	r2, r3
 8007b9e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007ba2:	b29b      	uxth	r3, r3
 8007ba4:	029b      	lsls	r3, r3, #10
 8007ba6:	b29b      	uxth	r3, r3
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bb4:	b29a      	uxth	r2, r3
 8007bb6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007bb8:	801a      	strh	r2, [r3, #0]
 8007bba:	e05c      	b.n	8007c76 <USB_EPStartXfer+0xcfa>
 8007bbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d10a      	bne.n	8007bda <USB_EPStartXfer+0xc5e>
 8007bc4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007bc6:	881b      	ldrh	r3, [r3, #0]
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bd2:	b29a      	uxth	r2, r3
 8007bd4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007bd6:	801a      	strh	r2, [r3, #0]
 8007bd8:	e04d      	b.n	8007c76 <USB_EPStartXfer+0xcfa>
 8007bda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bde:	085b      	lsrs	r3, r3, #1
 8007be0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007be4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007be8:	f003 0301 	and.w	r3, r3, #1
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d004      	beq.n	8007bfa <USB_EPStartXfer+0xc7e>
 8007bf0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007bf4:	3301      	adds	r3, #1
 8007bf6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007bfa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007bfc:	881b      	ldrh	r3, [r3, #0]
 8007bfe:	b29a      	uxth	r2, r3
 8007c00:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	029b      	lsls	r3, r3, #10
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	b29a      	uxth	r2, r3
 8007c0e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007c10:	801a      	strh	r2, [r3, #0]
 8007c12:	e030      	b.n	8007c76 <USB_EPStartXfer+0xcfa>
 8007c14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	785b      	ldrb	r3, [r3, #1]
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d128      	bne.n	8007c76 <USB_EPStartXfer+0xcfa>
 8007c24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c28:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007c32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	461a      	mov	r2, r3
 8007c44:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007c48:	4413      	add	r3, r2
 8007c4a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007c4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	781b      	ldrb	r3, [r3, #0]
 8007c5a:	011a      	lsls	r2, r3, #4
 8007c5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007c60:	4413      	add	r3, r2
 8007c62:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007c66:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007c6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c6e:	b29a      	uxth	r2, r3
 8007c70:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007c74:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007c76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	891b      	ldrh	r3, [r3, #8]
 8007c82:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	6959      	ldr	r1, [r3, #20]
 8007c92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c96:	b29b      	uxth	r3, r3
 8007c98:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007c9c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007ca0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007ca4:	6800      	ldr	r0, [r0, #0]
 8007ca6:	f000 fe58 	bl	800895a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007caa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007cb2:	681a      	ldr	r2, [r3, #0]
 8007cb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	781b      	ldrb	r3, [r3, #0]
 8007cc0:	009b      	lsls	r3, r3, #2
 8007cc2:	4413      	add	r3, r2
 8007cc4:	881b      	ldrh	r3, [r3, #0]
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ccc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007cd0:	817b      	strh	r3, [r7, #10]
 8007cd2:	897b      	ldrh	r3, [r7, #10]
 8007cd4:	f083 0310 	eor.w	r3, r3, #16
 8007cd8:	817b      	strh	r3, [r7, #10]
 8007cda:	897b      	ldrh	r3, [r7, #10]
 8007cdc:	f083 0320 	eor.w	r3, r3, #32
 8007ce0:	817b      	strh	r3, [r7, #10]
 8007ce2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ce6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007cea:	681a      	ldr	r2, [r3, #0]
 8007cec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cf0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	781b      	ldrb	r3, [r3, #0]
 8007cf8:	009b      	lsls	r3, r3, #2
 8007cfa:	441a      	add	r2, r3
 8007cfc:	897b      	ldrh	r3, [r7, #10]
 8007cfe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	8013      	strh	r3, [r2, #0]
 8007d12:	f000 bcde 	b.w	80086d2 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007d16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	7b1b      	ldrb	r3, [r3, #12]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	f040 80bb 	bne.w	8007e9e <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007d28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	699a      	ldr	r2, [r3, #24]
 8007d34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	691b      	ldr	r3, [r3, #16]
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d917      	bls.n	8007d74 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8007d44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	691b      	ldr	r3, [r3, #16]
 8007d50:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8007d54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	699a      	ldr	r2, [r3, #24]
 8007d60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d64:	1ad2      	subs	r2, r2, r3
 8007d66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	619a      	str	r2, [r3, #24]
 8007d72:	e00e      	b.n	8007d92 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007d74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	699b      	ldr	r3, [r3, #24]
 8007d80:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8007d84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007d92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d96:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007da0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007da4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	461a      	mov	r2, r3
 8007db2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007db6:	4413      	add	r3, r2
 8007db8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007dbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	781b      	ldrb	r3, [r3, #0]
 8007dc8:	011a      	lsls	r2, r3, #4
 8007dca:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007dce:	4413      	add	r3, r2
 8007dd0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007dd4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007dd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007ddc:	881b      	ldrh	r3, [r3, #0]
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007de4:	b29a      	uxth	r2, r3
 8007de6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007dea:	801a      	strh	r2, [r3, #0]
 8007dec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007df0:	2b3e      	cmp	r3, #62	@ 0x3e
 8007df2:	d924      	bls.n	8007e3e <USB_EPStartXfer+0xec2>
 8007df4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007df8:	095b      	lsrs	r3, r3, #5
 8007dfa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007dfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e02:	f003 031f 	and.w	r3, r3, #31
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d104      	bne.n	8007e14 <USB_EPStartXfer+0xe98>
 8007e0a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007e0e:	3b01      	subs	r3, #1
 8007e10:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007e14:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007e18:	881b      	ldrh	r3, [r3, #0]
 8007e1a:	b29a      	uxth	r2, r3
 8007e1c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007e20:	b29b      	uxth	r3, r3
 8007e22:	029b      	lsls	r3, r3, #10
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	4313      	orrs	r3, r2
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e32:	b29a      	uxth	r2, r3
 8007e34:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007e38:	801a      	strh	r2, [r3, #0]
 8007e3a:	f000 bc10 	b.w	800865e <USB_EPStartXfer+0x16e2>
 8007e3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d10c      	bne.n	8007e60 <USB_EPStartXfer+0xee4>
 8007e46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007e4a:	881b      	ldrh	r3, [r3, #0]
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e56:	b29a      	uxth	r2, r3
 8007e58:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007e5c:	801a      	strh	r2, [r3, #0]
 8007e5e:	e3fe      	b.n	800865e <USB_EPStartXfer+0x16e2>
 8007e60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e64:	085b      	lsrs	r3, r3, #1
 8007e66:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007e6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e6e:	f003 0301 	and.w	r3, r3, #1
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d004      	beq.n	8007e80 <USB_EPStartXfer+0xf04>
 8007e76:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007e7a:	3301      	adds	r3, #1
 8007e7c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007e80:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007e84:	881b      	ldrh	r3, [r3, #0]
 8007e86:	b29a      	uxth	r2, r3
 8007e88:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	029b      	lsls	r3, r3, #10
 8007e90:	b29b      	uxth	r3, r3
 8007e92:	4313      	orrs	r3, r2
 8007e94:	b29a      	uxth	r2, r3
 8007e96:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007e9a:	801a      	strh	r2, [r3, #0]
 8007e9c:	e3df      	b.n	800865e <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007e9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ea2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	78db      	ldrb	r3, [r3, #3]
 8007eaa:	2b02      	cmp	r3, #2
 8007eac:	f040 8218 	bne.w	80082e0 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007eb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	785b      	ldrb	r3, [r3, #1]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	f040 809d 	bne.w	8007ffc <USB_EPStartXfer+0x1080>
 8007ec2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ec6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007ed0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ed4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	461a      	mov	r2, r3
 8007ee2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007ee6:	4413      	add	r3, r2
 8007ee8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007eec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ef0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	011a      	lsls	r2, r3, #4
 8007efa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007efe:	4413      	add	r3, r2
 8007f00:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007f04:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007f08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007f0c:	881b      	ldrh	r3, [r3, #0]
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f14:	b29a      	uxth	r2, r3
 8007f16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007f1a:	801a      	strh	r2, [r3, #0]
 8007f1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	691b      	ldr	r3, [r3, #16]
 8007f28:	2b3e      	cmp	r3, #62	@ 0x3e
 8007f2a:	d92b      	bls.n	8007f84 <USB_EPStartXfer+0x1008>
 8007f2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	691b      	ldr	r3, [r3, #16]
 8007f38:	095b      	lsrs	r3, r3, #5
 8007f3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007f3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	691b      	ldr	r3, [r3, #16]
 8007f4a:	f003 031f 	and.w	r3, r3, #31
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d104      	bne.n	8007f5c <USB_EPStartXfer+0xfe0>
 8007f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f56:	3b01      	subs	r3, #1
 8007f58:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007f5c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007f60:	881b      	ldrh	r3, [r3, #0]
 8007f62:	b29a      	uxth	r2, r3
 8007f64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f68:	b29b      	uxth	r3, r3
 8007f6a:	029b      	lsls	r3, r3, #10
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	b29b      	uxth	r3, r3
 8007f72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f7a:	b29a      	uxth	r2, r3
 8007f7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007f80:	801a      	strh	r2, [r3, #0]
 8007f82:	e070      	b.n	8008066 <USB_EPStartXfer+0x10ea>
 8007f84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	691b      	ldr	r3, [r3, #16]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d10c      	bne.n	8007fae <USB_EPStartXfer+0x1032>
 8007f94:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007f98:	881b      	ldrh	r3, [r3, #0]
 8007f9a:	b29b      	uxth	r3, r3
 8007f9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fa0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fa4:	b29a      	uxth	r2, r3
 8007fa6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007faa:	801a      	strh	r2, [r3, #0]
 8007fac:	e05b      	b.n	8008066 <USB_EPStartXfer+0x10ea>
 8007fae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	691b      	ldr	r3, [r3, #16]
 8007fba:	085b      	lsrs	r3, r3, #1
 8007fbc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007fc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	691b      	ldr	r3, [r3, #16]
 8007fcc:	f003 0301 	and.w	r3, r3, #1
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d004      	beq.n	8007fde <USB_EPStartXfer+0x1062>
 8007fd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fd8:	3301      	adds	r3, #1
 8007fda:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007fde:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007fe2:	881b      	ldrh	r3, [r3, #0]
 8007fe4:	b29a      	uxth	r2, r3
 8007fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	029b      	lsls	r3, r3, #10
 8007fee:	b29b      	uxth	r3, r3
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	b29a      	uxth	r2, r3
 8007ff4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007ff8:	801a      	strh	r2, [r3, #0]
 8007ffa:	e034      	b.n	8008066 <USB_EPStartXfer+0x10ea>
 8007ffc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008000:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	785b      	ldrb	r3, [r3, #1]
 8008008:	2b01      	cmp	r3, #1
 800800a:	d12c      	bne.n	8008066 <USB_EPStartXfer+0x10ea>
 800800c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008010:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800801a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800801e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008028:	b29b      	uxth	r3, r3
 800802a:	461a      	mov	r2, r3
 800802c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008030:	4413      	add	r3, r2
 8008032:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008036:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800803a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	781b      	ldrb	r3, [r3, #0]
 8008042:	011a      	lsls	r2, r3, #4
 8008044:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008048:	4413      	add	r3, r2
 800804a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800804e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008052:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008056:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	691b      	ldr	r3, [r3, #16]
 800805e:	b29a      	uxth	r2, r3
 8008060:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008064:	801a      	strh	r2, [r3, #0]
 8008066:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800806a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008074:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008078:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	785b      	ldrb	r3, [r3, #1]
 8008080:	2b00      	cmp	r3, #0
 8008082:	f040 809d 	bne.w	80081c0 <USB_EPStartXfer+0x1244>
 8008086:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800808a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008094:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008098:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80080a2:	b29b      	uxth	r3, r3
 80080a4:	461a      	mov	r2, r3
 80080a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80080aa:	4413      	add	r3, r2
 80080ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80080b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	011a      	lsls	r2, r3, #4
 80080be:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80080c2:	4413      	add	r3, r2
 80080c4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80080c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80080cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80080d0:	881b      	ldrh	r3, [r3, #0]
 80080d2:	b29b      	uxth	r3, r3
 80080d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80080d8:	b29a      	uxth	r2, r3
 80080da:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80080de:	801a      	strh	r2, [r3, #0]
 80080e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	691b      	ldr	r3, [r3, #16]
 80080ec:	2b3e      	cmp	r3, #62	@ 0x3e
 80080ee:	d92b      	bls.n	8008148 <USB_EPStartXfer+0x11cc>
 80080f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	691b      	ldr	r3, [r3, #16]
 80080fc:	095b      	lsrs	r3, r3, #5
 80080fe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008102:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008106:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	691b      	ldr	r3, [r3, #16]
 800810e:	f003 031f 	and.w	r3, r3, #31
 8008112:	2b00      	cmp	r3, #0
 8008114:	d104      	bne.n	8008120 <USB_EPStartXfer+0x11a4>
 8008116:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800811a:	3b01      	subs	r3, #1
 800811c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008120:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008124:	881b      	ldrh	r3, [r3, #0]
 8008126:	b29a      	uxth	r2, r3
 8008128:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800812c:	b29b      	uxth	r3, r3
 800812e:	029b      	lsls	r3, r3, #10
 8008130:	b29b      	uxth	r3, r3
 8008132:	4313      	orrs	r3, r2
 8008134:	b29b      	uxth	r3, r3
 8008136:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800813a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800813e:	b29a      	uxth	r2, r3
 8008140:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008144:	801a      	strh	r2, [r3, #0]
 8008146:	e069      	b.n	800821c <USB_EPStartXfer+0x12a0>
 8008148:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800814c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	691b      	ldr	r3, [r3, #16]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d10c      	bne.n	8008172 <USB_EPStartXfer+0x11f6>
 8008158:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800815c:	881b      	ldrh	r3, [r3, #0]
 800815e:	b29b      	uxth	r3, r3
 8008160:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008164:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008168:	b29a      	uxth	r2, r3
 800816a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800816e:	801a      	strh	r2, [r3, #0]
 8008170:	e054      	b.n	800821c <USB_EPStartXfer+0x12a0>
 8008172:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008176:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	691b      	ldr	r3, [r3, #16]
 800817e:	085b      	lsrs	r3, r3, #1
 8008180:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008184:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008188:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	691b      	ldr	r3, [r3, #16]
 8008190:	f003 0301 	and.w	r3, r3, #1
 8008194:	2b00      	cmp	r3, #0
 8008196:	d004      	beq.n	80081a2 <USB_EPStartXfer+0x1226>
 8008198:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800819c:	3301      	adds	r3, #1
 800819e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80081a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80081a6:	881b      	ldrh	r3, [r3, #0]
 80081a8:	b29a      	uxth	r2, r3
 80081aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	029b      	lsls	r3, r3, #10
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	4313      	orrs	r3, r2
 80081b6:	b29a      	uxth	r2, r3
 80081b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80081bc:	801a      	strh	r2, [r3, #0]
 80081be:	e02d      	b.n	800821c <USB_EPStartXfer+0x12a0>
 80081c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	785b      	ldrb	r3, [r3, #1]
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d125      	bne.n	800821c <USB_EPStartXfer+0x12a0>
 80081d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80081de:	b29b      	uxth	r3, r3
 80081e0:	461a      	mov	r2, r3
 80081e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80081e6:	4413      	add	r3, r2
 80081e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80081ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	781b      	ldrb	r3, [r3, #0]
 80081f8:	011a      	lsls	r2, r3, #4
 80081fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80081fe:	4413      	add	r3, r2
 8008200:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008204:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008208:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800820c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	691b      	ldr	r3, [r3, #16]
 8008214:	b29a      	uxth	r2, r3
 8008216:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800821a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800821c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008220:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	69db      	ldr	r3, [r3, #28]
 8008228:	2b00      	cmp	r3, #0
 800822a:	f000 8218 	beq.w	800865e <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800822e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008232:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008236:	681a      	ldr	r2, [r3, #0]
 8008238:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800823c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	781b      	ldrb	r3, [r3, #0]
 8008244:	009b      	lsls	r3, r3, #2
 8008246:	4413      	add	r3, r2
 8008248:	881b      	ldrh	r3, [r3, #0]
 800824a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800824e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008252:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008256:	2b00      	cmp	r3, #0
 8008258:	d005      	beq.n	8008266 <USB_EPStartXfer+0x12ea>
 800825a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800825e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008262:	2b00      	cmp	r3, #0
 8008264:	d10d      	bne.n	8008282 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008266:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800826a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800826e:	2b00      	cmp	r3, #0
 8008270:	f040 81f5 	bne.w	800865e <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008274:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008278:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800827c:	2b00      	cmp	r3, #0
 800827e:	f040 81ee 	bne.w	800865e <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8008282:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008286:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800828a:	681a      	ldr	r2, [r3, #0]
 800828c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008290:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	781b      	ldrb	r3, [r3, #0]
 8008298:	009b      	lsls	r3, r3, #2
 800829a:	4413      	add	r3, r2
 800829c:	881b      	ldrh	r3, [r3, #0]
 800829e:	b29b      	uxth	r3, r3
 80082a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80082a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082a8:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80082ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082b4:	681a      	ldr	r2, [r3, #0]
 80082b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	781b      	ldrb	r3, [r3, #0]
 80082c2:	009b      	lsls	r3, r3, #2
 80082c4:	441a      	add	r2, r3
 80082c6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80082ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80082ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80082d6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80082da:	b29b      	uxth	r3, r3
 80082dc:	8013      	strh	r3, [r2, #0]
 80082de:	e1be      	b.n	800865e <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80082e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	78db      	ldrb	r3, [r3, #3]
 80082ec:	2b01      	cmp	r3, #1
 80082ee:	f040 81b4 	bne.w	800865a <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80082f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	699a      	ldr	r2, [r3, #24]
 80082fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008302:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	691b      	ldr	r3, [r3, #16]
 800830a:	429a      	cmp	r2, r3
 800830c:	d917      	bls.n	800833e <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800830e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008312:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	691b      	ldr	r3, [r3, #16]
 800831a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800831e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008322:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	699a      	ldr	r2, [r3, #24]
 800832a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800832e:	1ad2      	subs	r2, r2, r3
 8008330:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008334:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	619a      	str	r2, [r3, #24]
 800833c:	e00e      	b.n	800835c <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800833e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008342:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	699b      	ldr	r3, [r3, #24]
 800834a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800834e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008352:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	2200      	movs	r2, #0
 800835a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800835c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008360:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	785b      	ldrb	r3, [r3, #1]
 8008368:	2b00      	cmp	r3, #0
 800836a:	f040 8085 	bne.w	8008478 <USB_EPStartXfer+0x14fc>
 800836e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008372:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800837c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008380:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800838a:	b29b      	uxth	r3, r3
 800838c:	461a      	mov	r2, r3
 800838e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008392:	4413      	add	r3, r2
 8008394:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008398:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800839c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	781b      	ldrb	r3, [r3, #0]
 80083a4:	011a      	lsls	r2, r3, #4
 80083a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80083aa:	4413      	add	r3, r2
 80083ac:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80083b0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80083b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80083b8:	881b      	ldrh	r3, [r3, #0]
 80083ba:	b29b      	uxth	r3, r3
 80083bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80083c0:	b29a      	uxth	r2, r3
 80083c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80083c6:	801a      	strh	r2, [r3, #0]
 80083c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083cc:	2b3e      	cmp	r3, #62	@ 0x3e
 80083ce:	d923      	bls.n	8008418 <USB_EPStartXfer+0x149c>
 80083d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083d4:	095b      	lsrs	r3, r3, #5
 80083d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80083da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083de:	f003 031f 	and.w	r3, r3, #31
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d104      	bne.n	80083f0 <USB_EPStartXfer+0x1474>
 80083e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80083ea:	3b01      	subs	r3, #1
 80083ec:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80083f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80083f4:	881b      	ldrh	r3, [r3, #0]
 80083f6:	b29a      	uxth	r2, r3
 80083f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80083fc:	b29b      	uxth	r3, r3
 80083fe:	029b      	lsls	r3, r3, #10
 8008400:	b29b      	uxth	r3, r3
 8008402:	4313      	orrs	r3, r2
 8008404:	b29b      	uxth	r3, r3
 8008406:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800840a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800840e:	b29a      	uxth	r2, r3
 8008410:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008414:	801a      	strh	r2, [r3, #0]
 8008416:	e060      	b.n	80084da <USB_EPStartXfer+0x155e>
 8008418:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800841c:	2b00      	cmp	r3, #0
 800841e:	d10c      	bne.n	800843a <USB_EPStartXfer+0x14be>
 8008420:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008424:	881b      	ldrh	r3, [r3, #0]
 8008426:	b29b      	uxth	r3, r3
 8008428:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800842c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008430:	b29a      	uxth	r2, r3
 8008432:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008436:	801a      	strh	r2, [r3, #0]
 8008438:	e04f      	b.n	80084da <USB_EPStartXfer+0x155e>
 800843a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800843e:	085b      	lsrs	r3, r3, #1
 8008440:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008444:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008448:	f003 0301 	and.w	r3, r3, #1
 800844c:	2b00      	cmp	r3, #0
 800844e:	d004      	beq.n	800845a <USB_EPStartXfer+0x14de>
 8008450:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008454:	3301      	adds	r3, #1
 8008456:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800845a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800845e:	881b      	ldrh	r3, [r3, #0]
 8008460:	b29a      	uxth	r2, r3
 8008462:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008466:	b29b      	uxth	r3, r3
 8008468:	029b      	lsls	r3, r3, #10
 800846a:	b29b      	uxth	r3, r3
 800846c:	4313      	orrs	r3, r2
 800846e:	b29a      	uxth	r2, r3
 8008470:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008474:	801a      	strh	r2, [r3, #0]
 8008476:	e030      	b.n	80084da <USB_EPStartXfer+0x155e>
 8008478:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800847c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	785b      	ldrb	r3, [r3, #1]
 8008484:	2b01      	cmp	r3, #1
 8008486:	d128      	bne.n	80084da <USB_EPStartXfer+0x155e>
 8008488:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800848c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008496:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800849a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80084a4:	b29b      	uxth	r3, r3
 80084a6:	461a      	mov	r2, r3
 80084a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80084ac:	4413      	add	r3, r2
 80084ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80084b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	781b      	ldrb	r3, [r3, #0]
 80084be:	011a      	lsls	r2, r3, #4
 80084c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80084c4:	4413      	add	r3, r2
 80084c6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80084ca:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80084ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084d2:	b29a      	uxth	r2, r3
 80084d4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80084d8:	801a      	strh	r2, [r3, #0]
 80084da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80084e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	785b      	ldrb	r3, [r3, #1]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	f040 8085 	bne.w	8008604 <USB_EPStartXfer+0x1688>
 80084fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008508:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800850c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008516:	b29b      	uxth	r3, r3
 8008518:	461a      	mov	r2, r3
 800851a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800851e:	4413      	add	r3, r2
 8008520:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008524:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008528:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	781b      	ldrb	r3, [r3, #0]
 8008530:	011a      	lsls	r2, r3, #4
 8008532:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008536:	4413      	add	r3, r2
 8008538:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800853c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008540:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008544:	881b      	ldrh	r3, [r3, #0]
 8008546:	b29b      	uxth	r3, r3
 8008548:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800854c:	b29a      	uxth	r2, r3
 800854e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008552:	801a      	strh	r2, [r3, #0]
 8008554:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008558:	2b3e      	cmp	r3, #62	@ 0x3e
 800855a:	d923      	bls.n	80085a4 <USB_EPStartXfer+0x1628>
 800855c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008560:	095b      	lsrs	r3, r3, #5
 8008562:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008566:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800856a:	f003 031f 	and.w	r3, r3, #31
 800856e:	2b00      	cmp	r3, #0
 8008570:	d104      	bne.n	800857c <USB_EPStartXfer+0x1600>
 8008572:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008576:	3b01      	subs	r3, #1
 8008578:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800857c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008580:	881b      	ldrh	r3, [r3, #0]
 8008582:	b29a      	uxth	r2, r3
 8008584:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008588:	b29b      	uxth	r3, r3
 800858a:	029b      	lsls	r3, r3, #10
 800858c:	b29b      	uxth	r3, r3
 800858e:	4313      	orrs	r3, r2
 8008590:	b29b      	uxth	r3, r3
 8008592:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008596:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800859a:	b29a      	uxth	r2, r3
 800859c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80085a0:	801a      	strh	r2, [r3, #0]
 80085a2:	e05c      	b.n	800865e <USB_EPStartXfer+0x16e2>
 80085a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d10c      	bne.n	80085c6 <USB_EPStartXfer+0x164a>
 80085ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80085b0:	881b      	ldrh	r3, [r3, #0]
 80085b2:	b29b      	uxth	r3, r3
 80085b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085bc:	b29a      	uxth	r2, r3
 80085be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80085c2:	801a      	strh	r2, [r3, #0]
 80085c4:	e04b      	b.n	800865e <USB_EPStartXfer+0x16e2>
 80085c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085ca:	085b      	lsrs	r3, r3, #1
 80085cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80085d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085d4:	f003 0301 	and.w	r3, r3, #1
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d004      	beq.n	80085e6 <USB_EPStartXfer+0x166a>
 80085dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80085e0:	3301      	adds	r3, #1
 80085e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80085e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80085ea:	881b      	ldrh	r3, [r3, #0]
 80085ec:	b29a      	uxth	r2, r3
 80085ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80085f2:	b29b      	uxth	r3, r3
 80085f4:	029b      	lsls	r3, r3, #10
 80085f6:	b29b      	uxth	r3, r3
 80085f8:	4313      	orrs	r3, r2
 80085fa:	b29a      	uxth	r2, r3
 80085fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008600:	801a      	strh	r2, [r3, #0]
 8008602:	e02c      	b.n	800865e <USB_EPStartXfer+0x16e2>
 8008604:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008608:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	785b      	ldrb	r3, [r3, #1]
 8008610:	2b01      	cmp	r3, #1
 8008612:	d124      	bne.n	800865e <USB_EPStartXfer+0x16e2>
 8008614:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008618:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008622:	b29b      	uxth	r3, r3
 8008624:	461a      	mov	r2, r3
 8008626:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800862a:	4413      	add	r3, r2
 800862c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008630:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008634:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	781b      	ldrb	r3, [r3, #0]
 800863c:	011a      	lsls	r2, r3, #4
 800863e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008642:	4413      	add	r3, r2
 8008644:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008648:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800864c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008650:	b29a      	uxth	r2, r3
 8008652:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008656:	801a      	strh	r2, [r3, #0]
 8008658:	e001      	b.n	800865e <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800865a:	2301      	movs	r3, #1
 800865c:	e03a      	b.n	80086d4 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800865e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008662:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008666:	681a      	ldr	r2, [r3, #0]
 8008668:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800866c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	781b      	ldrb	r3, [r3, #0]
 8008674:	009b      	lsls	r3, r3, #2
 8008676:	4413      	add	r3, r2
 8008678:	881b      	ldrh	r3, [r3, #0]
 800867a:	b29b      	uxth	r3, r3
 800867c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008680:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008684:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008688:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800868c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008690:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008694:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008698:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800869c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80086a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80086a8:	681a      	ldr	r2, [r3, #0]
 80086aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	781b      	ldrb	r3, [r3, #0]
 80086b6:	009b      	lsls	r3, r3, #2
 80086b8:	441a      	add	r2, r3
 80086ba:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80086be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80086c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80086c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80086ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086ce:	b29b      	uxth	r3, r3
 80086d0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80086d2:	2300      	movs	r3, #0
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}

080086de <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80086de:	b480      	push	{r7}
 80086e0:	b085      	sub	sp, #20
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	6078      	str	r0, [r7, #4]
 80086e6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	785b      	ldrb	r3, [r3, #1]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d020      	beq.n	8008732 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80086f0:	687a      	ldr	r2, [r7, #4]
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	781b      	ldrb	r3, [r3, #0]
 80086f6:	009b      	lsls	r3, r3, #2
 80086f8:	4413      	add	r3, r2
 80086fa:	881b      	ldrh	r3, [r3, #0]
 80086fc:	b29b      	uxth	r3, r3
 80086fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008702:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008706:	81bb      	strh	r3, [r7, #12]
 8008708:	89bb      	ldrh	r3, [r7, #12]
 800870a:	f083 0310 	eor.w	r3, r3, #16
 800870e:	81bb      	strh	r3, [r7, #12]
 8008710:	687a      	ldr	r2, [r7, #4]
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	009b      	lsls	r3, r3, #2
 8008718:	441a      	add	r2, r3
 800871a:	89bb      	ldrh	r3, [r7, #12]
 800871c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008720:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008724:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008728:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800872c:	b29b      	uxth	r3, r3
 800872e:	8013      	strh	r3, [r2, #0]
 8008730:	e01f      	b.n	8008772 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008732:	687a      	ldr	r2, [r7, #4]
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	781b      	ldrb	r3, [r3, #0]
 8008738:	009b      	lsls	r3, r3, #2
 800873a:	4413      	add	r3, r2
 800873c:	881b      	ldrh	r3, [r3, #0]
 800873e:	b29b      	uxth	r3, r3
 8008740:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008744:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008748:	81fb      	strh	r3, [r7, #14]
 800874a:	89fb      	ldrh	r3, [r7, #14]
 800874c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008750:	81fb      	strh	r3, [r7, #14]
 8008752:	687a      	ldr	r2, [r7, #4]
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	781b      	ldrb	r3, [r3, #0]
 8008758:	009b      	lsls	r3, r3, #2
 800875a:	441a      	add	r2, r3
 800875c:	89fb      	ldrh	r3, [r7, #14]
 800875e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008762:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008766:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800876a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800876e:	b29b      	uxth	r3, r3
 8008770:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008772:	2300      	movs	r3, #0
}
 8008774:	4618      	mov	r0, r3
 8008776:	3714      	adds	r7, #20
 8008778:	46bd      	mov	sp, r7
 800877a:	bc80      	pop	{r7}
 800877c:	4770      	bx	lr

0800877e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800877e:	b480      	push	{r7}
 8008780:	b087      	sub	sp, #28
 8008782:	af00      	add	r7, sp, #0
 8008784:	6078      	str	r0, [r7, #4]
 8008786:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	7b1b      	ldrb	r3, [r3, #12]
 800878c:	2b00      	cmp	r3, #0
 800878e:	f040 809d 	bne.w	80088cc <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	785b      	ldrb	r3, [r3, #1]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d04c      	beq.n	8008834 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800879a:	687a      	ldr	r2, [r7, #4]
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	781b      	ldrb	r3, [r3, #0]
 80087a0:	009b      	lsls	r3, r3, #2
 80087a2:	4413      	add	r3, r2
 80087a4:	881b      	ldrh	r3, [r3, #0]
 80087a6:	823b      	strh	r3, [r7, #16]
 80087a8:	8a3b      	ldrh	r3, [r7, #16]
 80087aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d01b      	beq.n	80087ea <USB_EPClearStall+0x6c>
 80087b2:	687a      	ldr	r2, [r7, #4]
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	781b      	ldrb	r3, [r3, #0]
 80087b8:	009b      	lsls	r3, r3, #2
 80087ba:	4413      	add	r3, r2
 80087bc:	881b      	ldrh	r3, [r3, #0]
 80087be:	b29b      	uxth	r3, r3
 80087c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80087c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087c8:	81fb      	strh	r3, [r7, #14]
 80087ca:	687a      	ldr	r2, [r7, #4]
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	781b      	ldrb	r3, [r3, #0]
 80087d0:	009b      	lsls	r3, r3, #2
 80087d2:	441a      	add	r2, r3
 80087d4:	89fb      	ldrh	r3, [r7, #14]
 80087d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80087da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80087de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80087e2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80087e6:	b29b      	uxth	r3, r3
 80087e8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	78db      	ldrb	r3, [r3, #3]
 80087ee:	2b01      	cmp	r3, #1
 80087f0:	d06c      	beq.n	80088cc <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80087f2:	687a      	ldr	r2, [r7, #4]
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	781b      	ldrb	r3, [r3, #0]
 80087f8:	009b      	lsls	r3, r3, #2
 80087fa:	4413      	add	r3, r2
 80087fc:	881b      	ldrh	r3, [r3, #0]
 80087fe:	b29b      	uxth	r3, r3
 8008800:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008804:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008808:	81bb      	strh	r3, [r7, #12]
 800880a:	89bb      	ldrh	r3, [r7, #12]
 800880c:	f083 0320 	eor.w	r3, r3, #32
 8008810:	81bb      	strh	r3, [r7, #12]
 8008812:	687a      	ldr	r2, [r7, #4]
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	781b      	ldrb	r3, [r3, #0]
 8008818:	009b      	lsls	r3, r3, #2
 800881a:	441a      	add	r2, r3
 800881c:	89bb      	ldrh	r3, [r7, #12]
 800881e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008822:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008826:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800882a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800882e:	b29b      	uxth	r3, r3
 8008830:	8013      	strh	r3, [r2, #0]
 8008832:	e04b      	b.n	80088cc <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008834:	687a      	ldr	r2, [r7, #4]
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	781b      	ldrb	r3, [r3, #0]
 800883a:	009b      	lsls	r3, r3, #2
 800883c:	4413      	add	r3, r2
 800883e:	881b      	ldrh	r3, [r3, #0]
 8008840:	82fb      	strh	r3, [r7, #22]
 8008842:	8afb      	ldrh	r3, [r7, #22]
 8008844:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008848:	2b00      	cmp	r3, #0
 800884a:	d01b      	beq.n	8008884 <USB_EPClearStall+0x106>
 800884c:	687a      	ldr	r2, [r7, #4]
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	781b      	ldrb	r3, [r3, #0]
 8008852:	009b      	lsls	r3, r3, #2
 8008854:	4413      	add	r3, r2
 8008856:	881b      	ldrh	r3, [r3, #0]
 8008858:	b29b      	uxth	r3, r3
 800885a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800885e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008862:	82bb      	strh	r3, [r7, #20]
 8008864:	687a      	ldr	r2, [r7, #4]
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	781b      	ldrb	r3, [r3, #0]
 800886a:	009b      	lsls	r3, r3, #2
 800886c:	441a      	add	r2, r3
 800886e:	8abb      	ldrh	r3, [r7, #20]
 8008870:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008874:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008878:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800887c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008880:	b29b      	uxth	r3, r3
 8008882:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008884:	687a      	ldr	r2, [r7, #4]
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	781b      	ldrb	r3, [r3, #0]
 800888a:	009b      	lsls	r3, r3, #2
 800888c:	4413      	add	r3, r2
 800888e:	881b      	ldrh	r3, [r3, #0]
 8008890:	b29b      	uxth	r3, r3
 8008892:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008896:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800889a:	827b      	strh	r3, [r7, #18]
 800889c:	8a7b      	ldrh	r3, [r7, #18]
 800889e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80088a2:	827b      	strh	r3, [r7, #18]
 80088a4:	8a7b      	ldrh	r3, [r7, #18]
 80088a6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80088aa:	827b      	strh	r3, [r7, #18]
 80088ac:	687a      	ldr	r2, [r7, #4]
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	781b      	ldrb	r3, [r3, #0]
 80088b2:	009b      	lsls	r3, r3, #2
 80088b4:	441a      	add	r2, r3
 80088b6:	8a7b      	ldrh	r3, [r7, #18]
 80088b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80088bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80088c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80088c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088c8:	b29b      	uxth	r3, r3
 80088ca:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80088cc:	2300      	movs	r3, #0
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	371c      	adds	r7, #28
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bc80      	pop	{r7}
 80088d6:	4770      	bx	lr

080088d8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80088d8:	b480      	push	{r7}
 80088da:	b083      	sub	sp, #12
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	460b      	mov	r3, r1
 80088e2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80088e4:	78fb      	ldrb	r3, [r7, #3]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d103      	bne.n	80088f2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2280      	movs	r2, #128	@ 0x80
 80088ee:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80088f2:	2300      	movs	r3, #0
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	370c      	adds	r7, #12
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bc80      	pop	{r7}
 80088fc:	4770      	bx	lr

080088fe <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80088fe:	b480      	push	{r7}
 8008900:	b083      	sub	sp, #12
 8008902:	af00      	add	r7, sp, #0
 8008904:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008906:	2300      	movs	r3, #0
}
 8008908:	4618      	mov	r0, r3
 800890a:	370c      	adds	r7, #12
 800890c:	46bd      	mov	sp, r7
 800890e:	bc80      	pop	{r7}
 8008910:	4770      	bx	lr

08008912 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008912:	b480      	push	{r7}
 8008914:	b083      	sub	sp, #12
 8008916:	af00      	add	r7, sp, #0
 8008918:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800891a:	2300      	movs	r3, #0
}
 800891c:	4618      	mov	r0, r3
 800891e:	370c      	adds	r7, #12
 8008920:	46bd      	mov	sp, r7
 8008922:	bc80      	pop	{r7}
 8008924:	4770      	bx	lr

08008926 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8008926:	b480      	push	{r7}
 8008928:	b085      	sub	sp, #20
 800892a:	af00      	add	r7, sp, #0
 800892c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008934:	b29b      	uxth	r3, r3
 8008936:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008938:	68fb      	ldr	r3, [r7, #12]
}
 800893a:	4618      	mov	r0, r3
 800893c:	3714      	adds	r7, #20
 800893e:	46bd      	mov	sp, r7
 8008940:	bc80      	pop	{r7}
 8008942:	4770      	bx	lr

08008944 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008944:	b480      	push	{r7}
 8008946:	b083      	sub	sp, #12
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800894e:	2300      	movs	r3, #0
}
 8008950:	4618      	mov	r0, r3
 8008952:	370c      	adds	r7, #12
 8008954:	46bd      	mov	sp, r7
 8008956:	bc80      	pop	{r7}
 8008958:	4770      	bx	lr

0800895a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800895a:	b480      	push	{r7}
 800895c:	b08b      	sub	sp, #44	@ 0x2c
 800895e:	af00      	add	r7, sp, #0
 8008960:	60f8      	str	r0, [r7, #12]
 8008962:	60b9      	str	r1, [r7, #8]
 8008964:	4611      	mov	r1, r2
 8008966:	461a      	mov	r2, r3
 8008968:	460b      	mov	r3, r1
 800896a:	80fb      	strh	r3, [r7, #6]
 800896c:	4613      	mov	r3, r2
 800896e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008970:	88bb      	ldrh	r3, [r7, #4]
 8008972:	3301      	adds	r3, #1
 8008974:	085b      	lsrs	r3, r3, #1
 8008976:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008980:	88fb      	ldrh	r3, [r7, #6]
 8008982:	005a      	lsls	r2, r3, #1
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	4413      	add	r3, r2
 8008988:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800898c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800898e:	69bb      	ldr	r3, [r7, #24]
 8008990:	627b      	str	r3, [r7, #36]	@ 0x24
 8008992:	e01e      	b.n	80089d2 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8008994:	69fb      	ldr	r3, [r7, #28]
 8008996:	781b      	ldrb	r3, [r3, #0]
 8008998:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800899a:	69fb      	ldr	r3, [r7, #28]
 800899c:	3301      	adds	r3, #1
 800899e:	781b      	ldrb	r3, [r3, #0]
 80089a0:	021b      	lsls	r3, r3, #8
 80089a2:	b21a      	sxth	r2, r3
 80089a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80089a8:	4313      	orrs	r3, r2
 80089aa:	b21b      	sxth	r3, r3
 80089ac:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80089ae:	6a3b      	ldr	r3, [r7, #32]
 80089b0:	8a7a      	ldrh	r2, [r7, #18]
 80089b2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80089b4:	6a3b      	ldr	r3, [r7, #32]
 80089b6:	3302      	adds	r3, #2
 80089b8:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 80089ba:	6a3b      	ldr	r3, [r7, #32]
 80089bc:	3302      	adds	r3, #2
 80089be:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 80089c0:	69fb      	ldr	r3, [r7, #28]
 80089c2:	3301      	adds	r3, #1
 80089c4:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80089c6:	69fb      	ldr	r3, [r7, #28]
 80089c8:	3301      	adds	r3, #1
 80089ca:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80089cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089ce:	3b01      	subs	r3, #1
 80089d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80089d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d1dd      	bne.n	8008994 <USB_WritePMA+0x3a>
  }
}
 80089d8:	bf00      	nop
 80089da:	bf00      	nop
 80089dc:	372c      	adds	r7, #44	@ 0x2c
 80089de:	46bd      	mov	sp, r7
 80089e0:	bc80      	pop	{r7}
 80089e2:	4770      	bx	lr

080089e4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b08b      	sub	sp, #44	@ 0x2c
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	60f8      	str	r0, [r7, #12]
 80089ec:	60b9      	str	r1, [r7, #8]
 80089ee:	4611      	mov	r1, r2
 80089f0:	461a      	mov	r2, r3
 80089f2:	460b      	mov	r3, r1
 80089f4:	80fb      	strh	r3, [r7, #6]
 80089f6:	4613      	mov	r3, r2
 80089f8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80089fa:	88bb      	ldrh	r3, [r7, #4]
 80089fc:	085b      	lsrs	r3, r3, #1
 80089fe:	b29b      	uxth	r3, r3
 8008a00:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008a0a:	88fb      	ldrh	r3, [r7, #6]
 8008a0c:	005a      	lsls	r2, r3, #1
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	4413      	add	r3, r2
 8008a12:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008a16:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008a18:	69bb      	ldr	r3, [r7, #24]
 8008a1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8008a1c:	e01b      	b.n	8008a56 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008a1e:	6a3b      	ldr	r3, [r7, #32]
 8008a20:	881b      	ldrh	r3, [r3, #0]
 8008a22:	b29b      	uxth	r3, r3
 8008a24:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008a26:	6a3b      	ldr	r3, [r7, #32]
 8008a28:	3302      	adds	r3, #2
 8008a2a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	b2da      	uxtb	r2, r3
 8008a30:	69fb      	ldr	r3, [r7, #28]
 8008a32:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008a34:	69fb      	ldr	r3, [r7, #28]
 8008a36:	3301      	adds	r3, #1
 8008a38:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	0a1b      	lsrs	r3, r3, #8
 8008a3e:	b2da      	uxtb	r2, r3
 8008a40:	69fb      	ldr	r3, [r7, #28]
 8008a42:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008a44:	69fb      	ldr	r3, [r7, #28]
 8008a46:	3301      	adds	r3, #1
 8008a48:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008a4a:	6a3b      	ldr	r3, [r7, #32]
 8008a4c:	3302      	adds	r3, #2
 8008a4e:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8008a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a52:	3b01      	subs	r3, #1
 8008a54:	627b      	str	r3, [r7, #36]	@ 0x24
 8008a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d1e0      	bne.n	8008a1e <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008a5c:	88bb      	ldrh	r3, [r7, #4]
 8008a5e:	f003 0301 	and.w	r3, r3, #1
 8008a62:	b29b      	uxth	r3, r3
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d007      	beq.n	8008a78 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8008a68:	6a3b      	ldr	r3, [r7, #32]
 8008a6a:	881b      	ldrh	r3, [r3, #0]
 8008a6c:	b29b      	uxth	r3, r3
 8008a6e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008a70:	693b      	ldr	r3, [r7, #16]
 8008a72:	b2da      	uxtb	r2, r3
 8008a74:	69fb      	ldr	r3, [r7, #28]
 8008a76:	701a      	strb	r2, [r3, #0]
  }
}
 8008a78:	bf00      	nop
 8008a7a:	372c      	adds	r7, #44	@ 0x2c
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bc80      	pop	{r7}
 8008a80:	4770      	bx	lr

08008a82 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a82:	b580      	push	{r7, lr}
 8008a84:	b082      	sub	sp, #8
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	6078      	str	r0, [r7, #4]
 8008a8a:	460b      	mov	r3, r1
 8008a8c:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8008a8e:	2304      	movs	r3, #4
 8008a90:	2203      	movs	r2, #3
 8008a92:	2181      	movs	r1, #129	@ 0x81
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f001 fc5e 	bl	800a356 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2201      	movs	r2, #1
 8008a9e:	62da      	str	r2, [r3, #44]	@ 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8008aa0:	2010      	movs	r0, #16
 8008aa2:	f001 fd6b 	bl	800a57c <USBD_static_malloc>
 8008aa6:	4602      	mov	r2, r0
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d101      	bne.n	8008abc <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 8008ab8:	2302      	movs	r3, #2
 8008aba:	e005      	b.n	8008ac8 <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 8008ac6:	2300      	movs	r3, #0
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3708      	adds	r7, #8
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}

08008ad0 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b082      	sub	sp, #8
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
 8008ad8:	460b      	mov	r3, r1
 8008ada:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8008adc:	2181      	movs	r1, #129	@ 0x81
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f001 fc5f 	bl	800a3a2 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d009      	beq.n	8008b08 <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008afa:	4618      	mov	r0, r3
 8008afc:	f001 fd4a 	bl	800a594 <USBD_static_free>
    pdev->pClassData = NULL;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2200      	movs	r2, #0
 8008b04:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return USBD_OK;
 8008b08:	2300      	movs	r3, #0
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	3708      	adds	r7, #8
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}
	...

08008b14 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b088      	sub	sp, #32
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
 8008b1c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b24:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8008b26:	2300      	movs	r3, #0
 8008b28:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b32:	2300      	movs	r3, #0
 8008b34:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	781b      	ldrb	r3, [r3, #0]
 8008b3a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d045      	beq.n	8008bce <USBD_HID_Setup+0xba>
 8008b42:	2b20      	cmp	r3, #32
 8008b44:	f040 80d3 	bne.w	8008cee <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	785b      	ldrb	r3, [r3, #1]
 8008b4c:	3b02      	subs	r3, #2
 8008b4e:	2b09      	cmp	r3, #9
 8008b50:	d835      	bhi.n	8008bbe <USBD_HID_Setup+0xaa>
 8008b52:	a201      	add	r2, pc, #4	@ (adr r2, 8008b58 <USBD_HID_Setup+0x44>)
 8008b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b58:	08008baf 	.word	0x08008baf
 8008b5c:	08008b8f 	.word	0x08008b8f
 8008b60:	08008bbf 	.word	0x08008bbf
 8008b64:	08008bbf 	.word	0x08008bbf
 8008b68:	08008bbf 	.word	0x08008bbf
 8008b6c:	08008bbf 	.word	0x08008bbf
 8008b70:	08008bbf 	.word	0x08008bbf
 8008b74:	08008bbf 	.word	0x08008bbf
 8008b78:	08008b9d 	.word	0x08008b9d
 8008b7c:	08008b81 	.word	0x08008b81
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	885b      	ldrh	r3, [r3, #2]
 8008b84:	b2db      	uxtb	r3, r3
 8008b86:	461a      	mov	r2, r3
 8008b88:	693b      	ldr	r3, [r7, #16]
 8008b8a:	601a      	str	r2, [r3, #0]
          break;
 8008b8c:	e01e      	b.n	8008bcc <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8008b8e:	693b      	ldr	r3, [r7, #16]
 8008b90:	2201      	movs	r2, #1
 8008b92:	4619      	mov	r1, r3
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f001 f91f 	bl	8009dd8 <USBD_CtlSendData>
          break;
 8008b9a:	e017      	b.n	8008bcc <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	885b      	ldrh	r3, [r3, #2]
 8008ba0:	0a1b      	lsrs	r3, r3, #8
 8008ba2:	b29b      	uxth	r3, r3
 8008ba4:	b2db      	uxtb	r3, r3
 8008ba6:	461a      	mov	r2, r3
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	605a      	str	r2, [r3, #4]
          break;
 8008bac:	e00e      	b.n	8008bcc <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	3304      	adds	r3, #4
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	4619      	mov	r1, r3
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f001 f90e 	bl	8009dd8 <USBD_CtlSendData>
          break;
 8008bbc:	e006      	b.n	8008bcc <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 8008bbe:	6839      	ldr	r1, [r7, #0]
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f001 f89f 	bl	8009d04 <USBD_CtlError>
          ret = USBD_FAIL;
 8008bc6:	2302      	movs	r3, #2
 8008bc8:	75fb      	strb	r3, [r7, #23]
          break;
 8008bca:	bf00      	nop
      }
      break;
 8008bcc:	e096      	b.n	8008cfc <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	785b      	ldrb	r3, [r3, #1]
 8008bd2:	2b0b      	cmp	r3, #11
 8008bd4:	f200 8083 	bhi.w	8008cde <USBD_HID_Setup+0x1ca>
 8008bd8:	a201      	add	r2, pc, #4	@ (adr r2, 8008be0 <USBD_HID_Setup+0xcc>)
 8008bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bde:	bf00      	nop
 8008be0:	08008c11 	.word	0x08008c11
 8008be4:	08008cdf 	.word	0x08008cdf
 8008be8:	08008cdf 	.word	0x08008cdf
 8008bec:	08008cdf 	.word	0x08008cdf
 8008bf0:	08008cdf 	.word	0x08008cdf
 8008bf4:	08008cdf 	.word	0x08008cdf
 8008bf8:	08008c39 	.word	0x08008c39
 8008bfc:	08008cdf 	.word	0x08008cdf
 8008c00:	08008cdf 	.word	0x08008cdf
 8008c04:	08008cdf 	.word	0x08008cdf
 8008c08:	08008c91 	.word	0x08008c91
 8008c0c:	08008cb9 	.word	0x08008cb9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c16:	2b03      	cmp	r3, #3
 8008c18:	d107      	bne.n	8008c2a <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008c1a:	f107 030e 	add.w	r3, r7, #14
 8008c1e:	2202      	movs	r2, #2
 8008c20:	4619      	mov	r1, r3
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f001 f8d8 	bl	8009dd8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008c28:	e060      	b.n	8008cec <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8008c2a:	6839      	ldr	r1, [r7, #0]
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f001 f869 	bl	8009d04 <USBD_CtlError>
            ret = USBD_FAIL;
 8008c32:	2302      	movs	r3, #2
 8008c34:	75fb      	strb	r3, [r7, #23]
          break;
 8008c36:	e059      	b.n	8008cec <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	885b      	ldrh	r3, [r3, #2]
 8008c3c:	0a1b      	lsrs	r3, r3, #8
 8008c3e:	b29b      	uxth	r3, r3
 8008c40:	2b22      	cmp	r3, #34	@ 0x22
 8008c42:	d108      	bne.n	8008c56 <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	88db      	ldrh	r3, [r3, #6]
 8008c48:	2b4a      	cmp	r3, #74	@ 0x4a
 8008c4a:	bf28      	it	cs
 8008c4c:	234a      	movcs	r3, #74	@ 0x4a
 8008c4e:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 8008c50:	4b2d      	ldr	r3, [pc, #180]	@ (8008d08 <USBD_HID_Setup+0x1f4>)
 8008c52:	61bb      	str	r3, [r7, #24]
 8008c54:	e015      	b.n	8008c82 <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	885b      	ldrh	r3, [r3, #2]
 8008c5a:	0a1b      	lsrs	r3, r3, #8
 8008c5c:	b29b      	uxth	r3, r3
 8008c5e:	2b21      	cmp	r3, #33	@ 0x21
 8008c60:	d108      	bne.n	8008c74 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8008c62:	4b2a      	ldr	r3, [pc, #168]	@ (8008d0c <USBD_HID_Setup+0x1f8>)
 8008c64:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	88db      	ldrh	r3, [r3, #6]
 8008c6a:	2b09      	cmp	r3, #9
 8008c6c:	bf28      	it	cs
 8008c6e:	2309      	movcs	r3, #9
 8008c70:	83fb      	strh	r3, [r7, #30]
 8008c72:	e006      	b.n	8008c82 <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8008c74:	6839      	ldr	r1, [r7, #0]
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f001 f844 	bl	8009d04 <USBD_CtlError>
            ret = USBD_FAIL;
 8008c7c:	2302      	movs	r3, #2
 8008c7e:	75fb      	strb	r3, [r7, #23]
            break;
 8008c80:	e034      	b.n	8008cec <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8008c82:	8bfb      	ldrh	r3, [r7, #30]
 8008c84:	461a      	mov	r2, r3
 8008c86:	69b9      	ldr	r1, [r7, #24]
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f001 f8a5 	bl	8009dd8 <USBD_CtlSendData>
          break;
 8008c8e:	e02d      	b.n	8008cec <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c96:	2b03      	cmp	r3, #3
 8008c98:	d107      	bne.n	8008caa <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	3308      	adds	r3, #8
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	4619      	mov	r1, r3
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f001 f898 	bl	8009dd8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008ca8:	e020      	b.n	8008cec <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8008caa:	6839      	ldr	r1, [r7, #0]
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f001 f829 	bl	8009d04 <USBD_CtlError>
            ret = USBD_FAIL;
 8008cb2:	2302      	movs	r3, #2
 8008cb4:	75fb      	strb	r3, [r7, #23]
          break;
 8008cb6:	e019      	b.n	8008cec <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008cbe:	2b03      	cmp	r3, #3
 8008cc0:	d106      	bne.n	8008cd0 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	885b      	ldrh	r3, [r3, #2]
 8008cc6:	b2db      	uxtb	r3, r3
 8008cc8:	461a      	mov	r2, r3
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008cce:	e00d      	b.n	8008cec <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8008cd0:	6839      	ldr	r1, [r7, #0]
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f001 f816 	bl	8009d04 <USBD_CtlError>
            ret = USBD_FAIL;
 8008cd8:	2302      	movs	r3, #2
 8008cda:	75fb      	strb	r3, [r7, #23]
          break;
 8008cdc:	e006      	b.n	8008cec <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 8008cde:	6839      	ldr	r1, [r7, #0]
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f001 f80f 	bl	8009d04 <USBD_CtlError>
          ret = USBD_FAIL;
 8008ce6:	2302      	movs	r3, #2
 8008ce8:	75fb      	strb	r3, [r7, #23]
          break;
 8008cea:	bf00      	nop
      }
      break;
 8008cec:	e006      	b.n	8008cfc <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 8008cee:	6839      	ldr	r1, [r7, #0]
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f001 f807 	bl	8009d04 <USBD_CtlError>
      ret = USBD_FAIL;
 8008cf6:	2302      	movs	r3, #2
 8008cf8:	75fb      	strb	r3, [r7, #23]
      break;
 8008cfa:	bf00      	nop
  }

  return ret;
 8008cfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3720      	adds	r7, #32
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}
 8008d06:	bf00      	nop
 8008d08:	200000cc 	.word	0x200000cc
 8008d0c:	200000b4 	.word	0x200000b4

08008d10 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8008d10:	b480      	push	{r7}
 8008d12:	b083      	sub	sp, #12
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2222      	movs	r2, #34	@ 0x22
 8008d1c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8008d1e:	4b03      	ldr	r3, [pc, #12]	@ (8008d2c <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	370c      	adds	r7, #12
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bc80      	pop	{r7}
 8008d28:	4770      	bx	lr
 8008d2a:	bf00      	nop
 8008d2c:	20000048 	.word	0x20000048

08008d30 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b083      	sub	sp, #12
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2222      	movs	r2, #34	@ 0x22
 8008d3c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8008d3e:	4b03      	ldr	r3, [pc, #12]	@ (8008d4c <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	370c      	adds	r7, #12
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bc80      	pop	{r7}
 8008d48:	4770      	bx	lr
 8008d4a:	bf00      	nop
 8008d4c:	2000006c 	.word	0x2000006c

08008d50 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b083      	sub	sp, #12
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2222      	movs	r2, #34	@ 0x22
 8008d5c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8008d5e:	4b03      	ldr	r3, [pc, #12]	@ (8008d6c <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	370c      	adds	r7, #12
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bc80      	pop	{r7}
 8008d68:	4770      	bx	lr
 8008d6a:	bf00      	nop
 8008d6c:	20000090 	.word	0x20000090

08008d70 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b083      	sub	sp, #12
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
 8008d78:	460b      	mov	r3, r1
 8008d7a:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d82:	2200      	movs	r2, #0
 8008d84:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8008d86:	2300      	movs	r3, #0
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	370c      	adds	r7, #12
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bc80      	pop	{r7}
 8008d90:	4770      	bx	lr
	...

08008d94 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b083      	sub	sp, #12
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	220a      	movs	r2, #10
 8008da0:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8008da2:	4b03      	ldr	r3, [pc, #12]	@ (8008db0 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	370c      	adds	r7, #12
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bc80      	pop	{r7}
 8008dac:	4770      	bx	lr
 8008dae:	bf00      	nop
 8008db0:	200000c0 	.word	0x200000c0

08008db4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b084      	sub	sp, #16
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	60f8      	str	r0, [r7, #12]
 8008dbc:	60b9      	str	r1, [r7, #8]
 8008dbe:	4613      	mov	r3, r2
 8008dc0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d101      	bne.n	8008dcc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008dc8:	2302      	movs	r3, #2
 8008dca:	e01a      	b.n	8008e02 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d003      	beq.n	8008dde <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d003      	beq.n	8008dec <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	68ba      	ldr	r2, [r7, #8]
 8008de8:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	2201      	movs	r2, #1
 8008df0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	79fa      	ldrb	r2, [r7, #7]
 8008df8:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008dfa:	68f8      	ldr	r0, [r7, #12]
 8008dfc:	f001 fa48 	bl	800a290 <USBD_LL_Init>

  return USBD_OK;
 8008e00:	2300      	movs	r3, #0
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3710      	adds	r7, #16
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}

08008e0a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008e0a:	b480      	push	{r7}
 8008e0c:	b085      	sub	sp, #20
 8008e0e:	af00      	add	r7, sp, #0
 8008e10:	6078      	str	r0, [r7, #4]
 8008e12:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008e14:	2300      	movs	r3, #0
 8008e16:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d006      	beq.n	8008e2c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	683a      	ldr	r2, [r7, #0]
 8008e22:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8008e26:	2300      	movs	r3, #0
 8008e28:	73fb      	strb	r3, [r7, #15]
 8008e2a:	e001      	b.n	8008e30 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008e2c:	2302      	movs	r3, #2
 8008e2e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	3714      	adds	r7, #20
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bc80      	pop	{r7}
 8008e3a:	4770      	bx	lr

08008e3c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b082      	sub	sp, #8
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f001 fa6b 	bl	800a320 <USBD_LL_Start>

  return USBD_OK;
 8008e4a:	2300      	movs	r3, #0
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3708      	adds	r7, #8
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}

08008e54 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b083      	sub	sp, #12
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008e5c:	2300      	movs	r3, #0
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	370c      	adds	r7, #12
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bc80      	pop	{r7}
 8008e66:	4770      	bx	lr

08008e68 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b084      	sub	sp, #16
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	460b      	mov	r3, r1
 8008e72:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008e74:	2302      	movs	r3, #2
 8008e76:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d00c      	beq.n	8008e9c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	78fa      	ldrb	r2, [r7, #3]
 8008e8c:	4611      	mov	r1, r2
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	4798      	blx	r3
 8008e92:	4603      	mov	r3, r0
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d101      	bne.n	8008e9c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3710      	adds	r7, #16
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}

08008ea6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008ea6:	b580      	push	{r7, lr}
 8008ea8:	b082      	sub	sp, #8
 8008eaa:	af00      	add	r7, sp, #0
 8008eac:	6078      	str	r0, [r7, #4]
 8008eae:	460b      	mov	r3, r1
 8008eb0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008eb8:	685b      	ldr	r3, [r3, #4]
 8008eba:	78fa      	ldrb	r2, [r7, #3]
 8008ebc:	4611      	mov	r1, r2
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	4798      	blx	r3

  return USBD_OK;
 8008ec2:	2300      	movs	r3, #0
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	3708      	adds	r7, #8
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}

08008ecc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b082      	sub	sp, #8
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
 8008ed4:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008edc:	6839      	ldr	r1, [r7, #0]
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f000 fed7 	bl	8009c92 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2201      	movs	r2, #1
 8008ee8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008ef2:	461a      	mov	r2, r3
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008f00:	f003 031f 	and.w	r3, r3, #31
 8008f04:	2b02      	cmp	r3, #2
 8008f06:	d016      	beq.n	8008f36 <USBD_LL_SetupStage+0x6a>
 8008f08:	2b02      	cmp	r3, #2
 8008f0a:	d81c      	bhi.n	8008f46 <USBD_LL_SetupStage+0x7a>
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d002      	beq.n	8008f16 <USBD_LL_SetupStage+0x4a>
 8008f10:	2b01      	cmp	r3, #1
 8008f12:	d008      	beq.n	8008f26 <USBD_LL_SetupStage+0x5a>
 8008f14:	e017      	b.n	8008f46 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008f1c:	4619      	mov	r1, r3
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 f9ca 	bl	80092b8 <USBD_StdDevReq>
      break;
 8008f24:	e01a      	b.n	8008f5c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008f2c:	4619      	mov	r1, r3
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f000 fa2c 	bl	800938c <USBD_StdItfReq>
      break;
 8008f34:	e012      	b.n	8008f5c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008f3c:	4619      	mov	r1, r3
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f000 fa6c 	bl	800941c <USBD_StdEPReq>
      break;
 8008f44:	e00a      	b.n	8008f5c <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008f4c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008f50:	b2db      	uxtb	r3, r3
 8008f52:	4619      	mov	r1, r3
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f001 fa43 	bl	800a3e0 <USBD_LL_StallEP>
      break;
 8008f5a:	bf00      	nop
  }

  return USBD_OK;
 8008f5c:	2300      	movs	r3, #0
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3708      	adds	r7, #8
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}

08008f66 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008f66:	b580      	push	{r7, lr}
 8008f68:	b086      	sub	sp, #24
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	60f8      	str	r0, [r7, #12]
 8008f6e:	460b      	mov	r3, r1
 8008f70:	607a      	str	r2, [r7, #4]
 8008f72:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008f74:	7afb      	ldrb	r3, [r7, #11]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d14b      	bne.n	8009012 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008f80:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008f88:	2b03      	cmp	r3, #3
 8008f8a:	d134      	bne.n	8008ff6 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008f8c:	697b      	ldr	r3, [r7, #20]
 8008f8e:	68da      	ldr	r2, [r3, #12]
 8008f90:	697b      	ldr	r3, [r7, #20]
 8008f92:	691b      	ldr	r3, [r3, #16]
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d919      	bls.n	8008fcc <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	68da      	ldr	r2, [r3, #12]
 8008f9c:	697b      	ldr	r3, [r7, #20]
 8008f9e:	691b      	ldr	r3, [r3, #16]
 8008fa0:	1ad2      	subs	r2, r2, r3
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	68da      	ldr	r2, [r3, #12]
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008fae:	429a      	cmp	r2, r3
 8008fb0:	d203      	bcs.n	8008fba <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008fb6:	b29b      	uxth	r3, r3
 8008fb8:	e002      	b.n	8008fc0 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008fbe:	b29b      	uxth	r3, r3
 8008fc0:	461a      	mov	r2, r3
 8008fc2:	6879      	ldr	r1, [r7, #4]
 8008fc4:	68f8      	ldr	r0, [r7, #12]
 8008fc6:	f000 ff35 	bl	8009e34 <USBD_CtlContinueRx>
 8008fca:	e038      	b.n	800903e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fd2:	691b      	ldr	r3, [r3, #16]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d00a      	beq.n	8008fee <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008fde:	2b03      	cmp	r3, #3
 8008fe0:	d105      	bne.n	8008fee <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fe8:	691b      	ldr	r3, [r3, #16]
 8008fea:	68f8      	ldr	r0, [r7, #12]
 8008fec:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008fee:	68f8      	ldr	r0, [r7, #12]
 8008ff0:	f000 ff32 	bl	8009e58 <USBD_CtlSendStatus>
 8008ff4:	e023      	b.n	800903e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008ffc:	2b05      	cmp	r3, #5
 8008ffe:	d11e      	bne.n	800903e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	2200      	movs	r2, #0
 8009004:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009008:	2100      	movs	r1, #0
 800900a:	68f8      	ldr	r0, [r7, #12]
 800900c:	f001 f9e8 	bl	800a3e0 <USBD_LL_StallEP>
 8009010:	e015      	b.n	800903e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009018:	699b      	ldr	r3, [r3, #24]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d00d      	beq.n	800903a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009024:	2b03      	cmp	r3, #3
 8009026:	d108      	bne.n	800903a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800902e:	699b      	ldr	r3, [r3, #24]
 8009030:	7afa      	ldrb	r2, [r7, #11]
 8009032:	4611      	mov	r1, r2
 8009034:	68f8      	ldr	r0, [r7, #12]
 8009036:	4798      	blx	r3
 8009038:	e001      	b.n	800903e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800903a:	2302      	movs	r3, #2
 800903c:	e000      	b.n	8009040 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800903e:	2300      	movs	r3, #0
}
 8009040:	4618      	mov	r0, r3
 8009042:	3718      	adds	r7, #24
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}

08009048 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b086      	sub	sp, #24
 800904c:	af00      	add	r7, sp, #0
 800904e:	60f8      	str	r0, [r7, #12]
 8009050:	460b      	mov	r3, r1
 8009052:	607a      	str	r2, [r7, #4]
 8009054:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009056:	7afb      	ldrb	r3, [r7, #11]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d17f      	bne.n	800915c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	3314      	adds	r3, #20
 8009060:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009068:	2b02      	cmp	r3, #2
 800906a:	d15c      	bne.n	8009126 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	68da      	ldr	r2, [r3, #12]
 8009070:	697b      	ldr	r3, [r7, #20]
 8009072:	691b      	ldr	r3, [r3, #16]
 8009074:	429a      	cmp	r2, r3
 8009076:	d915      	bls.n	80090a4 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	68da      	ldr	r2, [r3, #12]
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	691b      	ldr	r3, [r3, #16]
 8009080:	1ad2      	subs	r2, r2, r3
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	68db      	ldr	r3, [r3, #12]
 800908a:	b29b      	uxth	r3, r3
 800908c:	461a      	mov	r2, r3
 800908e:	6879      	ldr	r1, [r7, #4]
 8009090:	68f8      	ldr	r0, [r7, #12]
 8009092:	f000 febd 	bl	8009e10 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009096:	2300      	movs	r3, #0
 8009098:	2200      	movs	r2, #0
 800909a:	2100      	movs	r1, #0
 800909c:	68f8      	ldr	r0, [r7, #12]
 800909e:	f001 fa4a 	bl	800a536 <USBD_LL_PrepareReceive>
 80090a2:	e04e      	b.n	8009142 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	689b      	ldr	r3, [r3, #8]
 80090a8:	697a      	ldr	r2, [r7, #20]
 80090aa:	6912      	ldr	r2, [r2, #16]
 80090ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80090b0:	fb01 f202 	mul.w	r2, r1, r2
 80090b4:	1a9b      	subs	r3, r3, r2
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d11c      	bne.n	80090f4 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	689a      	ldr	r2, [r3, #8]
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80090c2:	429a      	cmp	r2, r3
 80090c4:	d316      	bcc.n	80090f4 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	689a      	ldr	r2, [r3, #8]
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80090d0:	429a      	cmp	r2, r3
 80090d2:	d20f      	bcs.n	80090f4 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80090d4:	2200      	movs	r2, #0
 80090d6:	2100      	movs	r1, #0
 80090d8:	68f8      	ldr	r0, [r7, #12]
 80090da:	f000 fe99 	bl	8009e10 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	2200      	movs	r2, #0
 80090e2:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80090e6:	2300      	movs	r3, #0
 80090e8:	2200      	movs	r2, #0
 80090ea:	2100      	movs	r1, #0
 80090ec:	68f8      	ldr	r0, [r7, #12]
 80090ee:	f001 fa22 	bl	800a536 <USBD_LL_PrepareReceive>
 80090f2:	e026      	b.n	8009142 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090fa:	68db      	ldr	r3, [r3, #12]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d00a      	beq.n	8009116 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009106:	2b03      	cmp	r3, #3
 8009108:	d105      	bne.n	8009116 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009110:	68db      	ldr	r3, [r3, #12]
 8009112:	68f8      	ldr	r0, [r7, #12]
 8009114:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009116:	2180      	movs	r1, #128	@ 0x80
 8009118:	68f8      	ldr	r0, [r7, #12]
 800911a:	f001 f961 	bl	800a3e0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800911e:	68f8      	ldr	r0, [r7, #12]
 8009120:	f000 fead 	bl	8009e7e <USBD_CtlReceiveStatus>
 8009124:	e00d      	b.n	8009142 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800912c:	2b04      	cmp	r3, #4
 800912e:	d004      	beq.n	800913a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009136:	2b00      	cmp	r3, #0
 8009138:	d103      	bne.n	8009142 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800913a:	2180      	movs	r1, #128	@ 0x80
 800913c:	68f8      	ldr	r0, [r7, #12]
 800913e:	f001 f94f 	bl	800a3e0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009148:	2b01      	cmp	r3, #1
 800914a:	d11d      	bne.n	8009188 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800914c:	68f8      	ldr	r0, [r7, #12]
 800914e:	f7ff fe81 	bl	8008e54 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	2200      	movs	r2, #0
 8009156:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800915a:	e015      	b.n	8009188 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009162:	695b      	ldr	r3, [r3, #20]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d00d      	beq.n	8009184 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800916e:	2b03      	cmp	r3, #3
 8009170:	d108      	bne.n	8009184 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009178:	695b      	ldr	r3, [r3, #20]
 800917a:	7afa      	ldrb	r2, [r7, #11]
 800917c:	4611      	mov	r1, r2
 800917e:	68f8      	ldr	r0, [r7, #12]
 8009180:	4798      	blx	r3
 8009182:	e001      	b.n	8009188 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009184:	2302      	movs	r3, #2
 8009186:	e000      	b.n	800918a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009188:	2300      	movs	r3, #0
}
 800918a:	4618      	mov	r0, r3
 800918c:	3718      	adds	r7, #24
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}

08009192 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009192:	b580      	push	{r7, lr}
 8009194:	b082      	sub	sp, #8
 8009196:	af00      	add	r7, sp, #0
 8009198:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800919a:	2340      	movs	r3, #64	@ 0x40
 800919c:	2200      	movs	r2, #0
 800919e:	2100      	movs	r1, #0
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f001 f8d8 	bl	800a356 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2201      	movs	r2, #1
 80091aa:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2240      	movs	r2, #64	@ 0x40
 80091b2:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80091b6:	2340      	movs	r3, #64	@ 0x40
 80091b8:	2200      	movs	r2, #0
 80091ba:	2180      	movs	r1, #128	@ 0x80
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f001 f8ca 	bl	800a356 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2201      	movs	r2, #1
 80091c6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2240      	movs	r2, #64	@ 0x40
 80091cc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2201      	movs	r2, #1
 80091d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2200      	movs	r2, #0
 80091da:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2200      	movs	r2, #0
 80091e2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2200      	movs	r2, #0
 80091e8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d009      	beq.n	800920a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091fc:	685b      	ldr	r3, [r3, #4]
 80091fe:	687a      	ldr	r2, [r7, #4]
 8009200:	6852      	ldr	r2, [r2, #4]
 8009202:	b2d2      	uxtb	r2, r2
 8009204:	4611      	mov	r1, r2
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	4798      	blx	r3
  }

  return USBD_OK;
 800920a:	2300      	movs	r3, #0
}
 800920c:	4618      	mov	r0, r3
 800920e:	3708      	adds	r7, #8
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}

08009214 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009214:	b480      	push	{r7}
 8009216:	b083      	sub	sp, #12
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
 800921c:	460b      	mov	r3, r1
 800921e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	78fa      	ldrb	r2, [r7, #3]
 8009224:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009226:	2300      	movs	r3, #0
}
 8009228:	4618      	mov	r0, r3
 800922a:	370c      	adds	r7, #12
 800922c:	46bd      	mov	sp, r7
 800922e:	bc80      	pop	{r7}
 8009230:	4770      	bx	lr

08009232 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009232:	b480      	push	{r7}
 8009234:	b083      	sub	sp, #12
 8009236:	af00      	add	r7, sp, #0
 8009238:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2204      	movs	r2, #4
 800924a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800924e:	2300      	movs	r3, #0
}
 8009250:	4618      	mov	r0, r3
 8009252:	370c      	adds	r7, #12
 8009254:	46bd      	mov	sp, r7
 8009256:	bc80      	pop	{r7}
 8009258:	4770      	bx	lr

0800925a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800925a:	b480      	push	{r7}
 800925c:	b083      	sub	sp, #12
 800925e:	af00      	add	r7, sp, #0
 8009260:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009268:	2b04      	cmp	r3, #4
 800926a:	d105      	bne.n	8009278 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009278:	2300      	movs	r3, #0
}
 800927a:	4618      	mov	r0, r3
 800927c:	370c      	adds	r7, #12
 800927e:	46bd      	mov	sp, r7
 8009280:	bc80      	pop	{r7}
 8009282:	4770      	bx	lr

08009284 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b082      	sub	sp, #8
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009292:	2b03      	cmp	r3, #3
 8009294:	d10b      	bne.n	80092ae <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800929c:	69db      	ldr	r3, [r3, #28]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d005      	beq.n	80092ae <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092a8:	69db      	ldr	r3, [r3, #28]
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80092ae:	2300      	movs	r3, #0
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	3708      	adds	r7, #8
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}

080092b8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b084      	sub	sp, #16
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
 80092c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80092c2:	2300      	movs	r3, #0
 80092c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	781b      	ldrb	r3, [r3, #0]
 80092ca:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80092ce:	2b40      	cmp	r3, #64	@ 0x40
 80092d0:	d005      	beq.n	80092de <USBD_StdDevReq+0x26>
 80092d2:	2b40      	cmp	r3, #64	@ 0x40
 80092d4:	d84f      	bhi.n	8009376 <USBD_StdDevReq+0xbe>
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d009      	beq.n	80092ee <USBD_StdDevReq+0x36>
 80092da:	2b20      	cmp	r3, #32
 80092dc:	d14b      	bne.n	8009376 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092e4:	689b      	ldr	r3, [r3, #8]
 80092e6:	6839      	ldr	r1, [r7, #0]
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	4798      	blx	r3
      break;
 80092ec:	e048      	b.n	8009380 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	785b      	ldrb	r3, [r3, #1]
 80092f2:	2b09      	cmp	r3, #9
 80092f4:	d839      	bhi.n	800936a <USBD_StdDevReq+0xb2>
 80092f6:	a201      	add	r2, pc, #4	@ (adr r2, 80092fc <USBD_StdDevReq+0x44>)
 80092f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092fc:	0800934d 	.word	0x0800934d
 8009300:	08009361 	.word	0x08009361
 8009304:	0800936b 	.word	0x0800936b
 8009308:	08009357 	.word	0x08009357
 800930c:	0800936b 	.word	0x0800936b
 8009310:	0800932f 	.word	0x0800932f
 8009314:	08009325 	.word	0x08009325
 8009318:	0800936b 	.word	0x0800936b
 800931c:	08009343 	.word	0x08009343
 8009320:	08009339 	.word	0x08009339
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009324:	6839      	ldr	r1, [r7, #0]
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f000 f9dc 	bl	80096e4 <USBD_GetDescriptor>
          break;
 800932c:	e022      	b.n	8009374 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800932e:	6839      	ldr	r1, [r7, #0]
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f000 fb3f 	bl	80099b4 <USBD_SetAddress>
          break;
 8009336:	e01d      	b.n	8009374 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009338:	6839      	ldr	r1, [r7, #0]
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	f000 fb7e 	bl	8009a3c <USBD_SetConfig>
          break;
 8009340:	e018      	b.n	8009374 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009342:	6839      	ldr	r1, [r7, #0]
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f000 fc07 	bl	8009b58 <USBD_GetConfig>
          break;
 800934a:	e013      	b.n	8009374 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800934c:	6839      	ldr	r1, [r7, #0]
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f000 fc37 	bl	8009bc2 <USBD_GetStatus>
          break;
 8009354:	e00e      	b.n	8009374 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009356:	6839      	ldr	r1, [r7, #0]
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f000 fc65 	bl	8009c28 <USBD_SetFeature>
          break;
 800935e:	e009      	b.n	8009374 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009360:	6839      	ldr	r1, [r7, #0]
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f000 fc74 	bl	8009c50 <USBD_ClrFeature>
          break;
 8009368:	e004      	b.n	8009374 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800936a:	6839      	ldr	r1, [r7, #0]
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f000 fcc9 	bl	8009d04 <USBD_CtlError>
          break;
 8009372:	bf00      	nop
      }
      break;
 8009374:	e004      	b.n	8009380 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009376:	6839      	ldr	r1, [r7, #0]
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f000 fcc3 	bl	8009d04 <USBD_CtlError>
      break;
 800937e:	bf00      	nop
  }

  return ret;
 8009380:	7bfb      	ldrb	r3, [r7, #15]
}
 8009382:	4618      	mov	r0, r3
 8009384:	3710      	adds	r7, #16
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}
 800938a:	bf00      	nop

0800938c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b084      	sub	sp, #16
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
 8009394:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009396:	2300      	movs	r3, #0
 8009398:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	781b      	ldrb	r3, [r3, #0]
 800939e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80093a2:	2b40      	cmp	r3, #64	@ 0x40
 80093a4:	d005      	beq.n	80093b2 <USBD_StdItfReq+0x26>
 80093a6:	2b40      	cmp	r3, #64	@ 0x40
 80093a8:	d82e      	bhi.n	8009408 <USBD_StdItfReq+0x7c>
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d001      	beq.n	80093b2 <USBD_StdItfReq+0x26>
 80093ae:	2b20      	cmp	r3, #32
 80093b0:	d12a      	bne.n	8009408 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093b8:	3b01      	subs	r3, #1
 80093ba:	2b02      	cmp	r3, #2
 80093bc:	d81d      	bhi.n	80093fa <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	889b      	ldrh	r3, [r3, #4]
 80093c2:	b2db      	uxtb	r3, r3
 80093c4:	2b01      	cmp	r3, #1
 80093c6:	d813      	bhi.n	80093f0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093ce:	689b      	ldr	r3, [r3, #8]
 80093d0:	6839      	ldr	r1, [r7, #0]
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	4798      	blx	r3
 80093d6:	4603      	mov	r3, r0
 80093d8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	88db      	ldrh	r3, [r3, #6]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d110      	bne.n	8009404 <USBD_StdItfReq+0x78>
 80093e2:	7bfb      	ldrb	r3, [r7, #15]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d10d      	bne.n	8009404 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f000 fd35 	bl	8009e58 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80093ee:	e009      	b.n	8009404 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80093f0:	6839      	ldr	r1, [r7, #0]
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f000 fc86 	bl	8009d04 <USBD_CtlError>
          break;
 80093f8:	e004      	b.n	8009404 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80093fa:	6839      	ldr	r1, [r7, #0]
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f000 fc81 	bl	8009d04 <USBD_CtlError>
          break;
 8009402:	e000      	b.n	8009406 <USBD_StdItfReq+0x7a>
          break;
 8009404:	bf00      	nop
      }
      break;
 8009406:	e004      	b.n	8009412 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009408:	6839      	ldr	r1, [r7, #0]
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f000 fc7a 	bl	8009d04 <USBD_CtlError>
      break;
 8009410:	bf00      	nop
  }

  return USBD_OK;
 8009412:	2300      	movs	r3, #0
}
 8009414:	4618      	mov	r0, r3
 8009416:	3710      	adds	r7, #16
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}

0800941c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b084      	sub	sp, #16
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
 8009424:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009426:	2300      	movs	r3, #0
 8009428:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	889b      	ldrh	r3, [r3, #4]
 800942e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	781b      	ldrb	r3, [r3, #0]
 8009434:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009438:	2b40      	cmp	r3, #64	@ 0x40
 800943a:	d007      	beq.n	800944c <USBD_StdEPReq+0x30>
 800943c:	2b40      	cmp	r3, #64	@ 0x40
 800943e:	f200 8146 	bhi.w	80096ce <USBD_StdEPReq+0x2b2>
 8009442:	2b00      	cmp	r3, #0
 8009444:	d00a      	beq.n	800945c <USBD_StdEPReq+0x40>
 8009446:	2b20      	cmp	r3, #32
 8009448:	f040 8141 	bne.w	80096ce <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009452:	689b      	ldr	r3, [r3, #8]
 8009454:	6839      	ldr	r1, [r7, #0]
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	4798      	blx	r3
      break;
 800945a:	e13d      	b.n	80096d8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	781b      	ldrb	r3, [r3, #0]
 8009460:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009464:	2b20      	cmp	r3, #32
 8009466:	d10a      	bne.n	800947e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800946e:	689b      	ldr	r3, [r3, #8]
 8009470:	6839      	ldr	r1, [r7, #0]
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	4798      	blx	r3
 8009476:	4603      	mov	r3, r0
 8009478:	73fb      	strb	r3, [r7, #15]

        return ret;
 800947a:	7bfb      	ldrb	r3, [r7, #15]
 800947c:	e12d      	b.n	80096da <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	785b      	ldrb	r3, [r3, #1]
 8009482:	2b03      	cmp	r3, #3
 8009484:	d007      	beq.n	8009496 <USBD_StdEPReq+0x7a>
 8009486:	2b03      	cmp	r3, #3
 8009488:	f300 811b 	bgt.w	80096c2 <USBD_StdEPReq+0x2a6>
 800948c:	2b00      	cmp	r3, #0
 800948e:	d072      	beq.n	8009576 <USBD_StdEPReq+0x15a>
 8009490:	2b01      	cmp	r3, #1
 8009492:	d03a      	beq.n	800950a <USBD_StdEPReq+0xee>
 8009494:	e115      	b.n	80096c2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800949c:	2b02      	cmp	r3, #2
 800949e:	d002      	beq.n	80094a6 <USBD_StdEPReq+0x8a>
 80094a0:	2b03      	cmp	r3, #3
 80094a2:	d015      	beq.n	80094d0 <USBD_StdEPReq+0xb4>
 80094a4:	e02b      	b.n	80094fe <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80094a6:	7bbb      	ldrb	r3, [r7, #14]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d00c      	beq.n	80094c6 <USBD_StdEPReq+0xaa>
 80094ac:	7bbb      	ldrb	r3, [r7, #14]
 80094ae:	2b80      	cmp	r3, #128	@ 0x80
 80094b0:	d009      	beq.n	80094c6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80094b2:	7bbb      	ldrb	r3, [r7, #14]
 80094b4:	4619      	mov	r1, r3
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f000 ff92 	bl	800a3e0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80094bc:	2180      	movs	r1, #128	@ 0x80
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f000 ff8e 	bl	800a3e0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80094c4:	e020      	b.n	8009508 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80094c6:	6839      	ldr	r1, [r7, #0]
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f000 fc1b 	bl	8009d04 <USBD_CtlError>
              break;
 80094ce:	e01b      	b.n	8009508 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	885b      	ldrh	r3, [r3, #2]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d10e      	bne.n	80094f6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80094d8:	7bbb      	ldrb	r3, [r7, #14]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d00b      	beq.n	80094f6 <USBD_StdEPReq+0xda>
 80094de:	7bbb      	ldrb	r3, [r7, #14]
 80094e0:	2b80      	cmp	r3, #128	@ 0x80
 80094e2:	d008      	beq.n	80094f6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	88db      	ldrh	r3, [r3, #6]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d104      	bne.n	80094f6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80094ec:	7bbb      	ldrb	r3, [r7, #14]
 80094ee:	4619      	mov	r1, r3
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f000 ff75 	bl	800a3e0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f000 fcae 	bl	8009e58 <USBD_CtlSendStatus>

              break;
 80094fc:	e004      	b.n	8009508 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80094fe:	6839      	ldr	r1, [r7, #0]
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f000 fbff 	bl	8009d04 <USBD_CtlError>
              break;
 8009506:	bf00      	nop
          }
          break;
 8009508:	e0e0      	b.n	80096cc <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009510:	2b02      	cmp	r3, #2
 8009512:	d002      	beq.n	800951a <USBD_StdEPReq+0xfe>
 8009514:	2b03      	cmp	r3, #3
 8009516:	d015      	beq.n	8009544 <USBD_StdEPReq+0x128>
 8009518:	e026      	b.n	8009568 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800951a:	7bbb      	ldrb	r3, [r7, #14]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d00c      	beq.n	800953a <USBD_StdEPReq+0x11e>
 8009520:	7bbb      	ldrb	r3, [r7, #14]
 8009522:	2b80      	cmp	r3, #128	@ 0x80
 8009524:	d009      	beq.n	800953a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009526:	7bbb      	ldrb	r3, [r7, #14]
 8009528:	4619      	mov	r1, r3
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f000 ff58 	bl	800a3e0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009530:	2180      	movs	r1, #128	@ 0x80
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f000 ff54 	bl	800a3e0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009538:	e01c      	b.n	8009574 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800953a:	6839      	ldr	r1, [r7, #0]
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f000 fbe1 	bl	8009d04 <USBD_CtlError>
              break;
 8009542:	e017      	b.n	8009574 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	885b      	ldrh	r3, [r3, #2]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d112      	bne.n	8009572 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800954c:	7bbb      	ldrb	r3, [r7, #14]
 800954e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009552:	2b00      	cmp	r3, #0
 8009554:	d004      	beq.n	8009560 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009556:	7bbb      	ldrb	r3, [r7, #14]
 8009558:	4619      	mov	r1, r3
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f000 ff5f 	bl	800a41e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f000 fc79 	bl	8009e58 <USBD_CtlSendStatus>
              }
              break;
 8009566:	e004      	b.n	8009572 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009568:	6839      	ldr	r1, [r7, #0]
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f000 fbca 	bl	8009d04 <USBD_CtlError>
              break;
 8009570:	e000      	b.n	8009574 <USBD_StdEPReq+0x158>
              break;
 8009572:	bf00      	nop
          }
          break;
 8009574:	e0aa      	b.n	80096cc <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800957c:	2b02      	cmp	r3, #2
 800957e:	d002      	beq.n	8009586 <USBD_StdEPReq+0x16a>
 8009580:	2b03      	cmp	r3, #3
 8009582:	d032      	beq.n	80095ea <USBD_StdEPReq+0x1ce>
 8009584:	e097      	b.n	80096b6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009586:	7bbb      	ldrb	r3, [r7, #14]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d007      	beq.n	800959c <USBD_StdEPReq+0x180>
 800958c:	7bbb      	ldrb	r3, [r7, #14]
 800958e:	2b80      	cmp	r3, #128	@ 0x80
 8009590:	d004      	beq.n	800959c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009592:	6839      	ldr	r1, [r7, #0]
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f000 fbb5 	bl	8009d04 <USBD_CtlError>
                break;
 800959a:	e091      	b.n	80096c0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800959c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	da0b      	bge.n	80095bc <USBD_StdEPReq+0x1a0>
 80095a4:	7bbb      	ldrb	r3, [r7, #14]
 80095a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80095aa:	4613      	mov	r3, r2
 80095ac:	009b      	lsls	r3, r3, #2
 80095ae:	4413      	add	r3, r2
 80095b0:	009b      	lsls	r3, r3, #2
 80095b2:	3310      	adds	r3, #16
 80095b4:	687a      	ldr	r2, [r7, #4]
 80095b6:	4413      	add	r3, r2
 80095b8:	3304      	adds	r3, #4
 80095ba:	e00b      	b.n	80095d4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80095bc:	7bbb      	ldrb	r3, [r7, #14]
 80095be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80095c2:	4613      	mov	r3, r2
 80095c4:	009b      	lsls	r3, r3, #2
 80095c6:	4413      	add	r3, r2
 80095c8:	009b      	lsls	r3, r3, #2
 80095ca:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80095ce:	687a      	ldr	r2, [r7, #4]
 80095d0:	4413      	add	r3, r2
 80095d2:	3304      	adds	r3, #4
 80095d4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	2200      	movs	r2, #0
 80095da:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	2202      	movs	r2, #2
 80095e0:	4619      	mov	r1, r3
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f000 fbf8 	bl	8009dd8 <USBD_CtlSendData>
              break;
 80095e8:	e06a      	b.n	80096c0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80095ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	da11      	bge.n	8009616 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80095f2:	7bbb      	ldrb	r3, [r7, #14]
 80095f4:	f003 020f 	and.w	r2, r3, #15
 80095f8:	6879      	ldr	r1, [r7, #4]
 80095fa:	4613      	mov	r3, r2
 80095fc:	009b      	lsls	r3, r3, #2
 80095fe:	4413      	add	r3, r2
 8009600:	009b      	lsls	r3, r3, #2
 8009602:	440b      	add	r3, r1
 8009604:	3318      	adds	r3, #24
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d117      	bne.n	800963c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800960c:	6839      	ldr	r1, [r7, #0]
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f000 fb78 	bl	8009d04 <USBD_CtlError>
                  break;
 8009614:	e054      	b.n	80096c0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009616:	7bbb      	ldrb	r3, [r7, #14]
 8009618:	f003 020f 	and.w	r2, r3, #15
 800961c:	6879      	ldr	r1, [r7, #4]
 800961e:	4613      	mov	r3, r2
 8009620:	009b      	lsls	r3, r3, #2
 8009622:	4413      	add	r3, r2
 8009624:	009b      	lsls	r3, r3, #2
 8009626:	440b      	add	r3, r1
 8009628:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d104      	bne.n	800963c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009632:	6839      	ldr	r1, [r7, #0]
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f000 fb65 	bl	8009d04 <USBD_CtlError>
                  break;
 800963a:	e041      	b.n	80096c0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800963c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009640:	2b00      	cmp	r3, #0
 8009642:	da0b      	bge.n	800965c <USBD_StdEPReq+0x240>
 8009644:	7bbb      	ldrb	r3, [r7, #14]
 8009646:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800964a:	4613      	mov	r3, r2
 800964c:	009b      	lsls	r3, r3, #2
 800964e:	4413      	add	r3, r2
 8009650:	009b      	lsls	r3, r3, #2
 8009652:	3310      	adds	r3, #16
 8009654:	687a      	ldr	r2, [r7, #4]
 8009656:	4413      	add	r3, r2
 8009658:	3304      	adds	r3, #4
 800965a:	e00b      	b.n	8009674 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800965c:	7bbb      	ldrb	r3, [r7, #14]
 800965e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009662:	4613      	mov	r3, r2
 8009664:	009b      	lsls	r3, r3, #2
 8009666:	4413      	add	r3, r2
 8009668:	009b      	lsls	r3, r3, #2
 800966a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800966e:	687a      	ldr	r2, [r7, #4]
 8009670:	4413      	add	r3, r2
 8009672:	3304      	adds	r3, #4
 8009674:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009676:	7bbb      	ldrb	r3, [r7, #14]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d002      	beq.n	8009682 <USBD_StdEPReq+0x266>
 800967c:	7bbb      	ldrb	r3, [r7, #14]
 800967e:	2b80      	cmp	r3, #128	@ 0x80
 8009680:	d103      	bne.n	800968a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	2200      	movs	r2, #0
 8009686:	601a      	str	r2, [r3, #0]
 8009688:	e00e      	b.n	80096a8 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800968a:	7bbb      	ldrb	r3, [r7, #14]
 800968c:	4619      	mov	r1, r3
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f000 fee4 	bl	800a45c <USBD_LL_IsStallEP>
 8009694:	4603      	mov	r3, r0
 8009696:	2b00      	cmp	r3, #0
 8009698:	d003      	beq.n	80096a2 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	2201      	movs	r2, #1
 800969e:	601a      	str	r2, [r3, #0]
 80096a0:	e002      	b.n	80096a8 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	2200      	movs	r2, #0
 80096a6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	2202      	movs	r2, #2
 80096ac:	4619      	mov	r1, r3
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f000 fb92 	bl	8009dd8 <USBD_CtlSendData>
              break;
 80096b4:	e004      	b.n	80096c0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80096b6:	6839      	ldr	r1, [r7, #0]
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f000 fb23 	bl	8009d04 <USBD_CtlError>
              break;
 80096be:	bf00      	nop
          }
          break;
 80096c0:	e004      	b.n	80096cc <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80096c2:	6839      	ldr	r1, [r7, #0]
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f000 fb1d 	bl	8009d04 <USBD_CtlError>
          break;
 80096ca:	bf00      	nop
      }
      break;
 80096cc:	e004      	b.n	80096d8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80096ce:	6839      	ldr	r1, [r7, #0]
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f000 fb17 	bl	8009d04 <USBD_CtlError>
      break;
 80096d6:	bf00      	nop
  }

  return ret;
 80096d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80096da:	4618      	mov	r0, r3
 80096dc:	3710      	adds	r7, #16
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}
	...

080096e4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b084      	sub	sp, #16
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
 80096ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80096ee:	2300      	movs	r3, #0
 80096f0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80096f2:	2300      	movs	r3, #0
 80096f4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80096f6:	2300      	movs	r3, #0
 80096f8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	885b      	ldrh	r3, [r3, #2]
 80096fe:	0a1b      	lsrs	r3, r3, #8
 8009700:	b29b      	uxth	r3, r3
 8009702:	3b01      	subs	r3, #1
 8009704:	2b06      	cmp	r3, #6
 8009706:	f200 8128 	bhi.w	800995a <USBD_GetDescriptor+0x276>
 800970a:	a201      	add	r2, pc, #4	@ (adr r2, 8009710 <USBD_GetDescriptor+0x2c>)
 800970c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009710:	0800972d 	.word	0x0800972d
 8009714:	08009745 	.word	0x08009745
 8009718:	08009785 	.word	0x08009785
 800971c:	0800995b 	.word	0x0800995b
 8009720:	0800995b 	.word	0x0800995b
 8009724:	080098fb 	.word	0x080098fb
 8009728:	08009927 	.word	0x08009927
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	687a      	ldr	r2, [r7, #4]
 8009736:	7c12      	ldrb	r2, [r2, #16]
 8009738:	f107 0108 	add.w	r1, r7, #8
 800973c:	4610      	mov	r0, r2
 800973e:	4798      	blx	r3
 8009740:	60f8      	str	r0, [r7, #12]
      break;
 8009742:	e112      	b.n	800996a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	7c1b      	ldrb	r3, [r3, #16]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d10d      	bne.n	8009768 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009754:	f107 0208 	add.w	r2, r7, #8
 8009758:	4610      	mov	r0, r2
 800975a:	4798      	blx	r3
 800975c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	3301      	adds	r3, #1
 8009762:	2202      	movs	r2, #2
 8009764:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009766:	e100      	b.n	800996a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800976e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009770:	f107 0208 	add.w	r2, r7, #8
 8009774:	4610      	mov	r0, r2
 8009776:	4798      	blx	r3
 8009778:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	3301      	adds	r3, #1
 800977e:	2202      	movs	r2, #2
 8009780:	701a      	strb	r2, [r3, #0]
      break;
 8009782:	e0f2      	b.n	800996a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	885b      	ldrh	r3, [r3, #2]
 8009788:	b2db      	uxtb	r3, r3
 800978a:	2b05      	cmp	r3, #5
 800978c:	f200 80ac 	bhi.w	80098e8 <USBD_GetDescriptor+0x204>
 8009790:	a201      	add	r2, pc, #4	@ (adr r2, 8009798 <USBD_GetDescriptor+0xb4>)
 8009792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009796:	bf00      	nop
 8009798:	080097b1 	.word	0x080097b1
 800979c:	080097e5 	.word	0x080097e5
 80097a0:	08009819 	.word	0x08009819
 80097a4:	0800984d 	.word	0x0800984d
 80097a8:	08009881 	.word	0x08009881
 80097ac:	080098b5 	.word	0x080098b5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80097b6:	685b      	ldr	r3, [r3, #4]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d00b      	beq.n	80097d4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80097c2:	685b      	ldr	r3, [r3, #4]
 80097c4:	687a      	ldr	r2, [r7, #4]
 80097c6:	7c12      	ldrb	r2, [r2, #16]
 80097c8:	f107 0108 	add.w	r1, r7, #8
 80097cc:	4610      	mov	r0, r2
 80097ce:	4798      	blx	r3
 80097d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097d2:	e091      	b.n	80098f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80097d4:	6839      	ldr	r1, [r7, #0]
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f000 fa94 	bl	8009d04 <USBD_CtlError>
            err++;
 80097dc:	7afb      	ldrb	r3, [r7, #11]
 80097de:	3301      	adds	r3, #1
 80097e0:	72fb      	strb	r3, [r7, #11]
          break;
 80097e2:	e089      	b.n	80098f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80097ea:	689b      	ldr	r3, [r3, #8]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d00b      	beq.n	8009808 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80097f6:	689b      	ldr	r3, [r3, #8]
 80097f8:	687a      	ldr	r2, [r7, #4]
 80097fa:	7c12      	ldrb	r2, [r2, #16]
 80097fc:	f107 0108 	add.w	r1, r7, #8
 8009800:	4610      	mov	r0, r2
 8009802:	4798      	blx	r3
 8009804:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009806:	e077      	b.n	80098f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009808:	6839      	ldr	r1, [r7, #0]
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f000 fa7a 	bl	8009d04 <USBD_CtlError>
            err++;
 8009810:	7afb      	ldrb	r3, [r7, #11]
 8009812:	3301      	adds	r3, #1
 8009814:	72fb      	strb	r3, [r7, #11]
          break;
 8009816:	e06f      	b.n	80098f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800981e:	68db      	ldr	r3, [r3, #12]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d00b      	beq.n	800983c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800982a:	68db      	ldr	r3, [r3, #12]
 800982c:	687a      	ldr	r2, [r7, #4]
 800982e:	7c12      	ldrb	r2, [r2, #16]
 8009830:	f107 0108 	add.w	r1, r7, #8
 8009834:	4610      	mov	r0, r2
 8009836:	4798      	blx	r3
 8009838:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800983a:	e05d      	b.n	80098f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800983c:	6839      	ldr	r1, [r7, #0]
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f000 fa60 	bl	8009d04 <USBD_CtlError>
            err++;
 8009844:	7afb      	ldrb	r3, [r7, #11]
 8009846:	3301      	adds	r3, #1
 8009848:	72fb      	strb	r3, [r7, #11]
          break;
 800984a:	e055      	b.n	80098f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009852:	691b      	ldr	r3, [r3, #16]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d00b      	beq.n	8009870 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800985e:	691b      	ldr	r3, [r3, #16]
 8009860:	687a      	ldr	r2, [r7, #4]
 8009862:	7c12      	ldrb	r2, [r2, #16]
 8009864:	f107 0108 	add.w	r1, r7, #8
 8009868:	4610      	mov	r0, r2
 800986a:	4798      	blx	r3
 800986c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800986e:	e043      	b.n	80098f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009870:	6839      	ldr	r1, [r7, #0]
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f000 fa46 	bl	8009d04 <USBD_CtlError>
            err++;
 8009878:	7afb      	ldrb	r3, [r7, #11]
 800987a:	3301      	adds	r3, #1
 800987c:	72fb      	strb	r3, [r7, #11]
          break;
 800987e:	e03b      	b.n	80098f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009886:	695b      	ldr	r3, [r3, #20]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d00b      	beq.n	80098a4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009892:	695b      	ldr	r3, [r3, #20]
 8009894:	687a      	ldr	r2, [r7, #4]
 8009896:	7c12      	ldrb	r2, [r2, #16]
 8009898:	f107 0108 	add.w	r1, r7, #8
 800989c:	4610      	mov	r0, r2
 800989e:	4798      	blx	r3
 80098a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098a2:	e029      	b.n	80098f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80098a4:	6839      	ldr	r1, [r7, #0]
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f000 fa2c 	bl	8009d04 <USBD_CtlError>
            err++;
 80098ac:	7afb      	ldrb	r3, [r7, #11]
 80098ae:	3301      	adds	r3, #1
 80098b0:	72fb      	strb	r3, [r7, #11]
          break;
 80098b2:	e021      	b.n	80098f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80098ba:	699b      	ldr	r3, [r3, #24]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d00b      	beq.n	80098d8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80098c6:	699b      	ldr	r3, [r3, #24]
 80098c8:	687a      	ldr	r2, [r7, #4]
 80098ca:	7c12      	ldrb	r2, [r2, #16]
 80098cc:	f107 0108 	add.w	r1, r7, #8
 80098d0:	4610      	mov	r0, r2
 80098d2:	4798      	blx	r3
 80098d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098d6:	e00f      	b.n	80098f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80098d8:	6839      	ldr	r1, [r7, #0]
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f000 fa12 	bl	8009d04 <USBD_CtlError>
            err++;
 80098e0:	7afb      	ldrb	r3, [r7, #11]
 80098e2:	3301      	adds	r3, #1
 80098e4:	72fb      	strb	r3, [r7, #11]
          break;
 80098e6:	e007      	b.n	80098f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80098e8:	6839      	ldr	r1, [r7, #0]
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f000 fa0a 	bl	8009d04 <USBD_CtlError>
          err++;
 80098f0:	7afb      	ldrb	r3, [r7, #11]
 80098f2:	3301      	adds	r3, #1
 80098f4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80098f6:	e038      	b.n	800996a <USBD_GetDescriptor+0x286>
 80098f8:	e037      	b.n	800996a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	7c1b      	ldrb	r3, [r3, #16]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d109      	bne.n	8009916 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009908:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800990a:	f107 0208 	add.w	r2, r7, #8
 800990e:	4610      	mov	r0, r2
 8009910:	4798      	blx	r3
 8009912:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009914:	e029      	b.n	800996a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009916:	6839      	ldr	r1, [r7, #0]
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	f000 f9f3 	bl	8009d04 <USBD_CtlError>
        err++;
 800991e:	7afb      	ldrb	r3, [r7, #11]
 8009920:	3301      	adds	r3, #1
 8009922:	72fb      	strb	r3, [r7, #11]
      break;
 8009924:	e021      	b.n	800996a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	7c1b      	ldrb	r3, [r3, #16]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d10d      	bne.n	800994a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009936:	f107 0208 	add.w	r2, r7, #8
 800993a:	4610      	mov	r0, r2
 800993c:	4798      	blx	r3
 800993e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	3301      	adds	r3, #1
 8009944:	2207      	movs	r2, #7
 8009946:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009948:	e00f      	b.n	800996a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800994a:	6839      	ldr	r1, [r7, #0]
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f000 f9d9 	bl	8009d04 <USBD_CtlError>
        err++;
 8009952:	7afb      	ldrb	r3, [r7, #11]
 8009954:	3301      	adds	r3, #1
 8009956:	72fb      	strb	r3, [r7, #11]
      break;
 8009958:	e007      	b.n	800996a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800995a:	6839      	ldr	r1, [r7, #0]
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f000 f9d1 	bl	8009d04 <USBD_CtlError>
      err++;
 8009962:	7afb      	ldrb	r3, [r7, #11]
 8009964:	3301      	adds	r3, #1
 8009966:	72fb      	strb	r3, [r7, #11]
      break;
 8009968:	bf00      	nop
  }

  if (err != 0U)
 800996a:	7afb      	ldrb	r3, [r7, #11]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d11c      	bne.n	80099aa <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009970:	893b      	ldrh	r3, [r7, #8]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d011      	beq.n	800999a <USBD_GetDescriptor+0x2b6>
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	88db      	ldrh	r3, [r3, #6]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d00d      	beq.n	800999a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	88da      	ldrh	r2, [r3, #6]
 8009982:	893b      	ldrh	r3, [r7, #8]
 8009984:	4293      	cmp	r3, r2
 8009986:	bf28      	it	cs
 8009988:	4613      	movcs	r3, r2
 800998a:	b29b      	uxth	r3, r3
 800998c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800998e:	893b      	ldrh	r3, [r7, #8]
 8009990:	461a      	mov	r2, r3
 8009992:	68f9      	ldr	r1, [r7, #12]
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	f000 fa1f 	bl	8009dd8 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	88db      	ldrh	r3, [r3, #6]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d104      	bne.n	80099ac <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f000 fa58 	bl	8009e58 <USBD_CtlSendStatus>
 80099a8:	e000      	b.n	80099ac <USBD_GetDescriptor+0x2c8>
    return;
 80099aa:	bf00      	nop
    }
  }
}
 80099ac:	3710      	adds	r7, #16
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}
 80099b2:	bf00      	nop

080099b4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b084      	sub	sp, #16
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
 80099bc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	889b      	ldrh	r3, [r3, #4]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d130      	bne.n	8009a28 <USBD_SetAddress+0x74>
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	88db      	ldrh	r3, [r3, #6]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d12c      	bne.n	8009a28 <USBD_SetAddress+0x74>
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	885b      	ldrh	r3, [r3, #2]
 80099d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80099d4:	d828      	bhi.n	8009a28 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	885b      	ldrh	r3, [r3, #2]
 80099da:	b2db      	uxtb	r3, r3
 80099dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80099e0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099e8:	2b03      	cmp	r3, #3
 80099ea:	d104      	bne.n	80099f6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80099ec:	6839      	ldr	r1, [r7, #0]
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f000 f988 	bl	8009d04 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099f4:	e01d      	b.n	8009a32 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	7bfa      	ldrb	r2, [r7, #15]
 80099fa:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80099fe:	7bfb      	ldrb	r3, [r7, #15]
 8009a00:	4619      	mov	r1, r3
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f000 fd55 	bl	800a4b2 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f000 fa25 	bl	8009e58 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009a0e:	7bfb      	ldrb	r3, [r7, #15]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d004      	beq.n	8009a1e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2202      	movs	r2, #2
 8009a18:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a1c:	e009      	b.n	8009a32 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2201      	movs	r2, #1
 8009a22:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a26:	e004      	b.n	8009a32 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009a28:	6839      	ldr	r1, [r7, #0]
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f000 f96a 	bl	8009d04 <USBD_CtlError>
  }
}
 8009a30:	bf00      	nop
 8009a32:	bf00      	nop
 8009a34:	3710      	adds	r7, #16
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}
	...

08009a3c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b082      	sub	sp, #8
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
 8009a44:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	885b      	ldrh	r3, [r3, #2]
 8009a4a:	b2da      	uxtb	r2, r3
 8009a4c:	4b41      	ldr	r3, [pc, #260]	@ (8009b54 <USBD_SetConfig+0x118>)
 8009a4e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009a50:	4b40      	ldr	r3, [pc, #256]	@ (8009b54 <USBD_SetConfig+0x118>)
 8009a52:	781b      	ldrb	r3, [r3, #0]
 8009a54:	2b01      	cmp	r3, #1
 8009a56:	d904      	bls.n	8009a62 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009a58:	6839      	ldr	r1, [r7, #0]
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f000 f952 	bl	8009d04 <USBD_CtlError>
 8009a60:	e075      	b.n	8009b4e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a68:	2b02      	cmp	r3, #2
 8009a6a:	d002      	beq.n	8009a72 <USBD_SetConfig+0x36>
 8009a6c:	2b03      	cmp	r3, #3
 8009a6e:	d023      	beq.n	8009ab8 <USBD_SetConfig+0x7c>
 8009a70:	e062      	b.n	8009b38 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009a72:	4b38      	ldr	r3, [pc, #224]	@ (8009b54 <USBD_SetConfig+0x118>)
 8009a74:	781b      	ldrb	r3, [r3, #0]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d01a      	beq.n	8009ab0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009a7a:	4b36      	ldr	r3, [pc, #216]	@ (8009b54 <USBD_SetConfig+0x118>)
 8009a7c:	781b      	ldrb	r3, [r3, #0]
 8009a7e:	461a      	mov	r2, r3
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2203      	movs	r2, #3
 8009a88:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009a8c:	4b31      	ldr	r3, [pc, #196]	@ (8009b54 <USBD_SetConfig+0x118>)
 8009a8e:	781b      	ldrb	r3, [r3, #0]
 8009a90:	4619      	mov	r1, r3
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f7ff f9e8 	bl	8008e68 <USBD_SetClassConfig>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	2b02      	cmp	r3, #2
 8009a9c:	d104      	bne.n	8009aa8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009a9e:	6839      	ldr	r1, [r7, #0]
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f000 f92f 	bl	8009d04 <USBD_CtlError>
            return;
 8009aa6:	e052      	b.n	8009b4e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f000 f9d5 	bl	8009e58 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009aae:	e04e      	b.n	8009b4e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f000 f9d1 	bl	8009e58 <USBD_CtlSendStatus>
        break;
 8009ab6:	e04a      	b.n	8009b4e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009ab8:	4b26      	ldr	r3, [pc, #152]	@ (8009b54 <USBD_SetConfig+0x118>)
 8009aba:	781b      	ldrb	r3, [r3, #0]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d112      	bne.n	8009ae6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2202      	movs	r2, #2
 8009ac4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8009ac8:	4b22      	ldr	r3, [pc, #136]	@ (8009b54 <USBD_SetConfig+0x118>)
 8009aca:	781b      	ldrb	r3, [r3, #0]
 8009acc:	461a      	mov	r2, r3
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009ad2:	4b20      	ldr	r3, [pc, #128]	@ (8009b54 <USBD_SetConfig+0x118>)
 8009ad4:	781b      	ldrb	r3, [r3, #0]
 8009ad6:	4619      	mov	r1, r3
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f7ff f9e4 	bl	8008ea6 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f000 f9ba 	bl	8009e58 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009ae4:	e033      	b.n	8009b4e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009ae6:	4b1b      	ldr	r3, [pc, #108]	@ (8009b54 <USBD_SetConfig+0x118>)
 8009ae8:	781b      	ldrb	r3, [r3, #0]
 8009aea:	461a      	mov	r2, r3
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	685b      	ldr	r3, [r3, #4]
 8009af0:	429a      	cmp	r2, r3
 8009af2:	d01d      	beq.n	8009b30 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	685b      	ldr	r3, [r3, #4]
 8009af8:	b2db      	uxtb	r3, r3
 8009afa:	4619      	mov	r1, r3
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f7ff f9d2 	bl	8008ea6 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009b02:	4b14      	ldr	r3, [pc, #80]	@ (8009b54 <USBD_SetConfig+0x118>)
 8009b04:	781b      	ldrb	r3, [r3, #0]
 8009b06:	461a      	mov	r2, r3
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009b0c:	4b11      	ldr	r3, [pc, #68]	@ (8009b54 <USBD_SetConfig+0x118>)
 8009b0e:	781b      	ldrb	r3, [r3, #0]
 8009b10:	4619      	mov	r1, r3
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f7ff f9a8 	bl	8008e68 <USBD_SetClassConfig>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	2b02      	cmp	r3, #2
 8009b1c:	d104      	bne.n	8009b28 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009b1e:	6839      	ldr	r1, [r7, #0]
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f000 f8ef 	bl	8009d04 <USBD_CtlError>
            return;
 8009b26:	e012      	b.n	8009b4e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f000 f995 	bl	8009e58 <USBD_CtlSendStatus>
        break;
 8009b2e:	e00e      	b.n	8009b4e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f000 f991 	bl	8009e58 <USBD_CtlSendStatus>
        break;
 8009b36:	e00a      	b.n	8009b4e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009b38:	6839      	ldr	r1, [r7, #0]
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f000 f8e2 	bl	8009d04 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009b40:	4b04      	ldr	r3, [pc, #16]	@ (8009b54 <USBD_SetConfig+0x118>)
 8009b42:	781b      	ldrb	r3, [r3, #0]
 8009b44:	4619      	mov	r1, r3
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f7ff f9ad 	bl	8008ea6 <USBD_ClrClassConfig>
        break;
 8009b4c:	bf00      	nop
    }
  }
}
 8009b4e:	3708      	adds	r7, #8
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}
 8009b54:	200009c0 	.word	0x200009c0

08009b58 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b082      	sub	sp, #8
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
 8009b60:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	88db      	ldrh	r3, [r3, #6]
 8009b66:	2b01      	cmp	r3, #1
 8009b68:	d004      	beq.n	8009b74 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009b6a:	6839      	ldr	r1, [r7, #0]
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f000 f8c9 	bl	8009d04 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009b72:	e022      	b.n	8009bba <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b7a:	2b02      	cmp	r3, #2
 8009b7c:	dc02      	bgt.n	8009b84 <USBD_GetConfig+0x2c>
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	dc03      	bgt.n	8009b8a <USBD_GetConfig+0x32>
 8009b82:	e015      	b.n	8009bb0 <USBD_GetConfig+0x58>
 8009b84:	2b03      	cmp	r3, #3
 8009b86:	d00b      	beq.n	8009ba0 <USBD_GetConfig+0x48>
 8009b88:	e012      	b.n	8009bb0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	3308      	adds	r3, #8
 8009b94:	2201      	movs	r2, #1
 8009b96:	4619      	mov	r1, r3
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f000 f91d 	bl	8009dd8 <USBD_CtlSendData>
        break;
 8009b9e:	e00c      	b.n	8009bba <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	3304      	adds	r3, #4
 8009ba4:	2201      	movs	r2, #1
 8009ba6:	4619      	mov	r1, r3
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f000 f915 	bl	8009dd8 <USBD_CtlSendData>
        break;
 8009bae:	e004      	b.n	8009bba <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009bb0:	6839      	ldr	r1, [r7, #0]
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f000 f8a6 	bl	8009d04 <USBD_CtlError>
        break;
 8009bb8:	bf00      	nop
}
 8009bba:	bf00      	nop
 8009bbc:	3708      	adds	r7, #8
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}

08009bc2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bc2:	b580      	push	{r7, lr}
 8009bc4:	b082      	sub	sp, #8
 8009bc6:	af00      	add	r7, sp, #0
 8009bc8:	6078      	str	r0, [r7, #4]
 8009bca:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009bd2:	3b01      	subs	r3, #1
 8009bd4:	2b02      	cmp	r3, #2
 8009bd6:	d81e      	bhi.n	8009c16 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	88db      	ldrh	r3, [r3, #6]
 8009bdc:	2b02      	cmp	r3, #2
 8009bde:	d004      	beq.n	8009bea <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009be0:	6839      	ldr	r1, [r7, #0]
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f000 f88e 	bl	8009d04 <USBD_CtlError>
        break;
 8009be8:	e01a      	b.n	8009c20 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2201      	movs	r2, #1
 8009bee:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d005      	beq.n	8009c06 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	68db      	ldr	r3, [r3, #12]
 8009bfe:	f043 0202 	orr.w	r2, r3, #2
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	330c      	adds	r3, #12
 8009c0a:	2202      	movs	r2, #2
 8009c0c:	4619      	mov	r1, r3
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f000 f8e2 	bl	8009dd8 <USBD_CtlSendData>
      break;
 8009c14:	e004      	b.n	8009c20 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009c16:	6839      	ldr	r1, [r7, #0]
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	f000 f873 	bl	8009d04 <USBD_CtlError>
      break;
 8009c1e:	bf00      	nop
  }
}
 8009c20:	bf00      	nop
 8009c22:	3708      	adds	r7, #8
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}

08009c28 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b082      	sub	sp, #8
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
 8009c30:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	885b      	ldrh	r3, [r3, #2]
 8009c36:	2b01      	cmp	r3, #1
 8009c38:	d106      	bne.n	8009c48 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2201      	movs	r2, #1
 8009c3e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	f000 f908 	bl	8009e58 <USBD_CtlSendStatus>
  }
}
 8009c48:	bf00      	nop
 8009c4a:	3708      	adds	r7, #8
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd80      	pop	{r7, pc}

08009c50 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b082      	sub	sp, #8
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
 8009c58:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c60:	3b01      	subs	r3, #1
 8009c62:	2b02      	cmp	r3, #2
 8009c64:	d80b      	bhi.n	8009c7e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	885b      	ldrh	r3, [r3, #2]
 8009c6a:	2b01      	cmp	r3, #1
 8009c6c:	d10c      	bne.n	8009c88 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2200      	movs	r2, #0
 8009c72:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f000 f8ee 	bl	8009e58 <USBD_CtlSendStatus>
      }
      break;
 8009c7c:	e004      	b.n	8009c88 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009c7e:	6839      	ldr	r1, [r7, #0]
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f000 f83f 	bl	8009d04 <USBD_CtlError>
      break;
 8009c86:	e000      	b.n	8009c8a <USBD_ClrFeature+0x3a>
      break;
 8009c88:	bf00      	nop
  }
}
 8009c8a:	bf00      	nop
 8009c8c:	3708      	adds	r7, #8
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}

08009c92 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009c92:	b480      	push	{r7}
 8009c94:	b083      	sub	sp, #12
 8009c96:	af00      	add	r7, sp, #0
 8009c98:	6078      	str	r0, [r7, #4]
 8009c9a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	781a      	ldrb	r2, [r3, #0]
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	785a      	ldrb	r2, [r3, #1]
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	3302      	adds	r3, #2
 8009cb0:	781b      	ldrb	r3, [r3, #0]
 8009cb2:	461a      	mov	r2, r3
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	3303      	adds	r3, #3
 8009cb8:	781b      	ldrb	r3, [r3, #0]
 8009cba:	021b      	lsls	r3, r3, #8
 8009cbc:	b29b      	uxth	r3, r3
 8009cbe:	4413      	add	r3, r2
 8009cc0:	b29a      	uxth	r2, r3
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	3304      	adds	r3, #4
 8009cca:	781b      	ldrb	r3, [r3, #0]
 8009ccc:	461a      	mov	r2, r3
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	3305      	adds	r3, #5
 8009cd2:	781b      	ldrb	r3, [r3, #0]
 8009cd4:	021b      	lsls	r3, r3, #8
 8009cd6:	b29b      	uxth	r3, r3
 8009cd8:	4413      	add	r3, r2
 8009cda:	b29a      	uxth	r2, r3
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	3306      	adds	r3, #6
 8009ce4:	781b      	ldrb	r3, [r3, #0]
 8009ce6:	461a      	mov	r2, r3
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	3307      	adds	r3, #7
 8009cec:	781b      	ldrb	r3, [r3, #0]
 8009cee:	021b      	lsls	r3, r3, #8
 8009cf0:	b29b      	uxth	r3, r3
 8009cf2:	4413      	add	r3, r2
 8009cf4:	b29a      	uxth	r2, r3
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	80da      	strh	r2, [r3, #6]

}
 8009cfa:	bf00      	nop
 8009cfc:	370c      	adds	r7, #12
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bc80      	pop	{r7}
 8009d02:	4770      	bx	lr

08009d04 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b082      	sub	sp, #8
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
 8009d0c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009d0e:	2180      	movs	r1, #128	@ 0x80
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f000 fb65 	bl	800a3e0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009d16:	2100      	movs	r1, #0
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f000 fb61 	bl	800a3e0 <USBD_LL_StallEP>
}
 8009d1e:	bf00      	nop
 8009d20:	3708      	adds	r7, #8
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}

08009d26 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009d26:	b580      	push	{r7, lr}
 8009d28:	b086      	sub	sp, #24
 8009d2a:	af00      	add	r7, sp, #0
 8009d2c:	60f8      	str	r0, [r7, #12]
 8009d2e:	60b9      	str	r1, [r7, #8]
 8009d30:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009d32:	2300      	movs	r3, #0
 8009d34:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d032      	beq.n	8009da2 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009d3c:	68f8      	ldr	r0, [r7, #12]
 8009d3e:	f000 f834 	bl	8009daa <USBD_GetLen>
 8009d42:	4603      	mov	r3, r0
 8009d44:	3301      	adds	r3, #1
 8009d46:	b29b      	uxth	r3, r3
 8009d48:	005b      	lsls	r3, r3, #1
 8009d4a:	b29a      	uxth	r2, r3
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009d50:	7dfb      	ldrb	r3, [r7, #23]
 8009d52:	1c5a      	adds	r2, r3, #1
 8009d54:	75fa      	strb	r2, [r7, #23]
 8009d56:	461a      	mov	r2, r3
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	4413      	add	r3, r2
 8009d5c:	687a      	ldr	r2, [r7, #4]
 8009d5e:	7812      	ldrb	r2, [r2, #0]
 8009d60:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009d62:	7dfb      	ldrb	r3, [r7, #23]
 8009d64:	1c5a      	adds	r2, r3, #1
 8009d66:	75fa      	strb	r2, [r7, #23]
 8009d68:	461a      	mov	r2, r3
 8009d6a:	68bb      	ldr	r3, [r7, #8]
 8009d6c:	4413      	add	r3, r2
 8009d6e:	2203      	movs	r2, #3
 8009d70:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009d72:	e012      	b.n	8009d9a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	1c5a      	adds	r2, r3, #1
 8009d78:	60fa      	str	r2, [r7, #12]
 8009d7a:	7dfa      	ldrb	r2, [r7, #23]
 8009d7c:	1c51      	adds	r1, r2, #1
 8009d7e:	75f9      	strb	r1, [r7, #23]
 8009d80:	4611      	mov	r1, r2
 8009d82:	68ba      	ldr	r2, [r7, #8]
 8009d84:	440a      	add	r2, r1
 8009d86:	781b      	ldrb	r3, [r3, #0]
 8009d88:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009d8a:	7dfb      	ldrb	r3, [r7, #23]
 8009d8c:	1c5a      	adds	r2, r3, #1
 8009d8e:	75fa      	strb	r2, [r7, #23]
 8009d90:	461a      	mov	r2, r3
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	4413      	add	r3, r2
 8009d96:	2200      	movs	r2, #0
 8009d98:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	781b      	ldrb	r3, [r3, #0]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d1e8      	bne.n	8009d74 <USBD_GetString+0x4e>
    }
  }
}
 8009da2:	bf00      	nop
 8009da4:	3718      	adds	r7, #24
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bd80      	pop	{r7, pc}

08009daa <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009daa:	b480      	push	{r7}
 8009dac:	b085      	sub	sp, #20
 8009dae:	af00      	add	r7, sp, #0
 8009db0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009db2:	2300      	movs	r3, #0
 8009db4:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009db6:	e005      	b.n	8009dc4 <USBD_GetLen+0x1a>
  {
    len++;
 8009db8:	7bfb      	ldrb	r3, [r7, #15]
 8009dba:	3301      	adds	r3, #1
 8009dbc:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	3301      	adds	r3, #1
 8009dc2:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	781b      	ldrb	r3, [r3, #0]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d1f5      	bne.n	8009db8 <USBD_GetLen+0xe>
  }

  return len;
 8009dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dce:	4618      	mov	r0, r3
 8009dd0:	3714      	adds	r7, #20
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bc80      	pop	{r7}
 8009dd6:	4770      	bx	lr

08009dd8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b084      	sub	sp, #16
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	60f8      	str	r0, [r7, #12]
 8009de0:	60b9      	str	r1, [r7, #8]
 8009de2:	4613      	mov	r3, r2
 8009de4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	2202      	movs	r2, #2
 8009dea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009dee:	88fa      	ldrh	r2, [r7, #6]
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009df4:	88fa      	ldrh	r2, [r7, #6]
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009dfa:	88fb      	ldrh	r3, [r7, #6]
 8009dfc:	68ba      	ldr	r2, [r7, #8]
 8009dfe:	2100      	movs	r1, #0
 8009e00:	68f8      	ldr	r0, [r7, #12]
 8009e02:	f000 fb75 	bl	800a4f0 <USBD_LL_Transmit>

  return USBD_OK;
 8009e06:	2300      	movs	r3, #0
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	3710      	adds	r7, #16
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd80      	pop	{r7, pc}

08009e10 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b084      	sub	sp, #16
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	60f8      	str	r0, [r7, #12]
 8009e18:	60b9      	str	r1, [r7, #8]
 8009e1a:	4613      	mov	r3, r2
 8009e1c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009e1e:	88fb      	ldrh	r3, [r7, #6]
 8009e20:	68ba      	ldr	r2, [r7, #8]
 8009e22:	2100      	movs	r1, #0
 8009e24:	68f8      	ldr	r0, [r7, #12]
 8009e26:	f000 fb63 	bl	800a4f0 <USBD_LL_Transmit>

  return USBD_OK;
 8009e2a:	2300      	movs	r3, #0
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	3710      	adds	r7, #16
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}

08009e34 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b084      	sub	sp, #16
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	60f8      	str	r0, [r7, #12]
 8009e3c:	60b9      	str	r1, [r7, #8]
 8009e3e:	4613      	mov	r3, r2
 8009e40:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009e42:	88fb      	ldrh	r3, [r7, #6]
 8009e44:	68ba      	ldr	r2, [r7, #8]
 8009e46:	2100      	movs	r1, #0
 8009e48:	68f8      	ldr	r0, [r7, #12]
 8009e4a:	f000 fb74 	bl	800a536 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e4e:	2300      	movs	r3, #0
}
 8009e50:	4618      	mov	r0, r3
 8009e52:	3710      	adds	r7, #16
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bd80      	pop	{r7, pc}

08009e58 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b082      	sub	sp, #8
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2204      	movs	r2, #4
 8009e64:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009e68:	2300      	movs	r3, #0
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	2100      	movs	r1, #0
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f000 fb3e 	bl	800a4f0 <USBD_LL_Transmit>

  return USBD_OK;
 8009e74:	2300      	movs	r3, #0
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	3708      	adds	r7, #8
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}

08009e7e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009e7e:	b580      	push	{r7, lr}
 8009e80:	b082      	sub	sp, #8
 8009e82:	af00      	add	r7, sp, #0
 8009e84:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2205      	movs	r2, #5
 8009e8a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009e8e:	2300      	movs	r3, #0
 8009e90:	2200      	movs	r2, #0
 8009e92:	2100      	movs	r1, #0
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	f000 fb4e 	bl	800a536 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e9a:	2300      	movs	r3, #0
}
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	3708      	adds	r7, #8
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bd80      	pop	{r7, pc}

08009ea4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	490e      	ldr	r1, [pc, #56]	@ (8009ee4 <MX_USB_DEVICE_Init+0x40>)
 8009eac:	480e      	ldr	r0, [pc, #56]	@ (8009ee8 <MX_USB_DEVICE_Init+0x44>)
 8009eae:	f7fe ff81 	bl	8008db4 <USBD_Init>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d001      	beq.n	8009ebc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009eb8:	f7f7 ffe6 	bl	8001e88 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8009ebc:	490b      	ldr	r1, [pc, #44]	@ (8009eec <MX_USB_DEVICE_Init+0x48>)
 8009ebe:	480a      	ldr	r0, [pc, #40]	@ (8009ee8 <MX_USB_DEVICE_Init+0x44>)
 8009ec0:	f7fe ffa3 	bl	8008e0a <USBD_RegisterClass>
 8009ec4:	4603      	mov	r3, r0
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d001      	beq.n	8009ece <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009eca:	f7f7 ffdd 	bl	8001e88 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009ece:	4806      	ldr	r0, [pc, #24]	@ (8009ee8 <MX_USB_DEVICE_Init+0x44>)
 8009ed0:	f7fe ffb4 	bl	8008e3c <USBD_Start>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d001      	beq.n	8009ede <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8009eda:	f7f7 ffd5 	bl	8001e88 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009ede:	bf00      	nop
 8009ee0:	bd80      	pop	{r7, pc}
 8009ee2:	bf00      	nop
 8009ee4:	20000118 	.word	0x20000118
 8009ee8:	200009c4 	.word	0x200009c4
 8009eec:	20000010 	.word	0x20000010

08009ef0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ef0:	b480      	push	{r7}
 8009ef2:	b083      	sub	sp, #12
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	6039      	str	r1, [r7, #0]
 8009efa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	2212      	movs	r2, #18
 8009f00:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009f02:	4b03      	ldr	r3, [pc, #12]	@ (8009f10 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009f04:	4618      	mov	r0, r3
 8009f06:	370c      	adds	r7, #12
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bc80      	pop	{r7}
 8009f0c:	4770      	bx	lr
 8009f0e:	bf00      	nop
 8009f10:	20000134 	.word	0x20000134

08009f14 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f14:	b480      	push	{r7}
 8009f16:	b083      	sub	sp, #12
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	6039      	str	r1, [r7, #0]
 8009f1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	2204      	movs	r2, #4
 8009f24:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009f26:	4b03      	ldr	r3, [pc, #12]	@ (8009f34 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	370c      	adds	r7, #12
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	bc80      	pop	{r7}
 8009f30:	4770      	bx	lr
 8009f32:	bf00      	nop
 8009f34:	20000148 	.word	0x20000148

08009f38 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b082      	sub	sp, #8
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	4603      	mov	r3, r0
 8009f40:	6039      	str	r1, [r7, #0]
 8009f42:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009f44:	79fb      	ldrb	r3, [r7, #7]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d105      	bne.n	8009f56 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009f4a:	683a      	ldr	r2, [r7, #0]
 8009f4c:	4907      	ldr	r1, [pc, #28]	@ (8009f6c <USBD_FS_ProductStrDescriptor+0x34>)
 8009f4e:	4808      	ldr	r0, [pc, #32]	@ (8009f70 <USBD_FS_ProductStrDescriptor+0x38>)
 8009f50:	f7ff fee9 	bl	8009d26 <USBD_GetString>
 8009f54:	e004      	b.n	8009f60 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009f56:	683a      	ldr	r2, [r7, #0]
 8009f58:	4904      	ldr	r1, [pc, #16]	@ (8009f6c <USBD_FS_ProductStrDescriptor+0x34>)
 8009f5a:	4805      	ldr	r0, [pc, #20]	@ (8009f70 <USBD_FS_ProductStrDescriptor+0x38>)
 8009f5c:	f7ff fee3 	bl	8009d26 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009f60:	4b02      	ldr	r3, [pc, #8]	@ (8009f6c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	3708      	adds	r7, #8
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}
 8009f6a:	bf00      	nop
 8009f6c:	20000c88 	.word	0x20000c88
 8009f70:	0800d918 	.word	0x0800d918

08009f74 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b082      	sub	sp, #8
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	6039      	str	r1, [r7, #0]
 8009f7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009f80:	683a      	ldr	r2, [r7, #0]
 8009f82:	4904      	ldr	r1, [pc, #16]	@ (8009f94 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009f84:	4804      	ldr	r0, [pc, #16]	@ (8009f98 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009f86:	f7ff fece 	bl	8009d26 <USBD_GetString>
  return USBD_StrDesc;
 8009f8a:	4b02      	ldr	r3, [pc, #8]	@ (8009f94 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	3708      	adds	r7, #8
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}
 8009f94:	20000c88 	.word	0x20000c88
 8009f98:	0800d930 	.word	0x0800d930

08009f9c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b082      	sub	sp, #8
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	6039      	str	r1, [r7, #0]
 8009fa6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	221a      	movs	r2, #26
 8009fac:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009fae:	f000 f843 	bl	800a038 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009fb2:	4b02      	ldr	r3, [pc, #8]	@ (8009fbc <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	3708      	adds	r7, #8
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}
 8009fbc:	2000014c 	.word	0x2000014c

08009fc0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b082      	sub	sp, #8
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	6039      	str	r1, [r7, #0]
 8009fca:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009fcc:	79fb      	ldrb	r3, [r7, #7]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d105      	bne.n	8009fde <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009fd2:	683a      	ldr	r2, [r7, #0]
 8009fd4:	4907      	ldr	r1, [pc, #28]	@ (8009ff4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009fd6:	4808      	ldr	r0, [pc, #32]	@ (8009ff8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009fd8:	f7ff fea5 	bl	8009d26 <USBD_GetString>
 8009fdc:	e004      	b.n	8009fe8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009fde:	683a      	ldr	r2, [r7, #0]
 8009fe0:	4904      	ldr	r1, [pc, #16]	@ (8009ff4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009fe2:	4805      	ldr	r0, [pc, #20]	@ (8009ff8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009fe4:	f7ff fe9f 	bl	8009d26 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009fe8:	4b02      	ldr	r3, [pc, #8]	@ (8009ff4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	3708      	adds	r7, #8
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}
 8009ff2:	bf00      	nop
 8009ff4:	20000c88 	.word	0x20000c88
 8009ff8:	0800d944 	.word	0x0800d944

08009ffc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b082      	sub	sp, #8
 800a000:	af00      	add	r7, sp, #0
 800a002:	4603      	mov	r3, r0
 800a004:	6039      	str	r1, [r7, #0]
 800a006:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a008:	79fb      	ldrb	r3, [r7, #7]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d105      	bne.n	800a01a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a00e:	683a      	ldr	r2, [r7, #0]
 800a010:	4907      	ldr	r1, [pc, #28]	@ (800a030 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a012:	4808      	ldr	r0, [pc, #32]	@ (800a034 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a014:	f7ff fe87 	bl	8009d26 <USBD_GetString>
 800a018:	e004      	b.n	800a024 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a01a:	683a      	ldr	r2, [r7, #0]
 800a01c:	4904      	ldr	r1, [pc, #16]	@ (800a030 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a01e:	4805      	ldr	r0, [pc, #20]	@ (800a034 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a020:	f7ff fe81 	bl	8009d26 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a024:	4b02      	ldr	r3, [pc, #8]	@ (800a030 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a026:	4618      	mov	r0, r3
 800a028:	3708      	adds	r7, #8
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}
 800a02e:	bf00      	nop
 800a030:	20000c88 	.word	0x20000c88
 800a034:	0800d950 	.word	0x0800d950

0800a038 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b084      	sub	sp, #16
 800a03c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a03e:	4b0f      	ldr	r3, [pc, #60]	@ (800a07c <Get_SerialNum+0x44>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a044:	4b0e      	ldr	r3, [pc, #56]	@ (800a080 <Get_SerialNum+0x48>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a04a:	4b0e      	ldr	r3, [pc, #56]	@ (800a084 <Get_SerialNum+0x4c>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a050:	68fa      	ldr	r2, [r7, #12]
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	4413      	add	r3, r2
 800a056:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d009      	beq.n	800a072 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a05e:	2208      	movs	r2, #8
 800a060:	4909      	ldr	r1, [pc, #36]	@ (800a088 <Get_SerialNum+0x50>)
 800a062:	68f8      	ldr	r0, [r7, #12]
 800a064:	f000 f814 	bl	800a090 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a068:	2204      	movs	r2, #4
 800a06a:	4908      	ldr	r1, [pc, #32]	@ (800a08c <Get_SerialNum+0x54>)
 800a06c:	68b8      	ldr	r0, [r7, #8]
 800a06e:	f000 f80f 	bl	800a090 <IntToUnicode>
  }
}
 800a072:	bf00      	nop
 800a074:	3710      	adds	r7, #16
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}
 800a07a:	bf00      	nop
 800a07c:	1ffff7e8 	.word	0x1ffff7e8
 800a080:	1ffff7ec 	.word	0x1ffff7ec
 800a084:	1ffff7f0 	.word	0x1ffff7f0
 800a088:	2000014e 	.word	0x2000014e
 800a08c:	2000015e 	.word	0x2000015e

0800a090 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a090:	b480      	push	{r7}
 800a092:	b087      	sub	sp, #28
 800a094:	af00      	add	r7, sp, #0
 800a096:	60f8      	str	r0, [r7, #12]
 800a098:	60b9      	str	r1, [r7, #8]
 800a09a:	4613      	mov	r3, r2
 800a09c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a09e:	2300      	movs	r3, #0
 800a0a0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	75fb      	strb	r3, [r7, #23]
 800a0a6:	e027      	b.n	800a0f8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	0f1b      	lsrs	r3, r3, #28
 800a0ac:	2b09      	cmp	r3, #9
 800a0ae:	d80b      	bhi.n	800a0c8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	0f1b      	lsrs	r3, r3, #28
 800a0b4:	b2da      	uxtb	r2, r3
 800a0b6:	7dfb      	ldrb	r3, [r7, #23]
 800a0b8:	005b      	lsls	r3, r3, #1
 800a0ba:	4619      	mov	r1, r3
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	440b      	add	r3, r1
 800a0c0:	3230      	adds	r2, #48	@ 0x30
 800a0c2:	b2d2      	uxtb	r2, r2
 800a0c4:	701a      	strb	r2, [r3, #0]
 800a0c6:	e00a      	b.n	800a0de <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	0f1b      	lsrs	r3, r3, #28
 800a0cc:	b2da      	uxtb	r2, r3
 800a0ce:	7dfb      	ldrb	r3, [r7, #23]
 800a0d0:	005b      	lsls	r3, r3, #1
 800a0d2:	4619      	mov	r1, r3
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	440b      	add	r3, r1
 800a0d8:	3237      	adds	r2, #55	@ 0x37
 800a0da:	b2d2      	uxtb	r2, r2
 800a0dc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	011b      	lsls	r3, r3, #4
 800a0e2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a0e4:	7dfb      	ldrb	r3, [r7, #23]
 800a0e6:	005b      	lsls	r3, r3, #1
 800a0e8:	3301      	adds	r3, #1
 800a0ea:	68ba      	ldr	r2, [r7, #8]
 800a0ec:	4413      	add	r3, r2
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a0f2:	7dfb      	ldrb	r3, [r7, #23]
 800a0f4:	3301      	adds	r3, #1
 800a0f6:	75fb      	strb	r3, [r7, #23]
 800a0f8:	7dfa      	ldrb	r2, [r7, #23]
 800a0fa:	79fb      	ldrb	r3, [r7, #7]
 800a0fc:	429a      	cmp	r2, r3
 800a0fe:	d3d3      	bcc.n	800a0a8 <IntToUnicode+0x18>
  }
}
 800a100:	bf00      	nop
 800a102:	bf00      	nop
 800a104:	371c      	adds	r7, #28
 800a106:	46bd      	mov	sp, r7
 800a108:	bc80      	pop	{r7}
 800a10a:	4770      	bx	lr

0800a10c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b084      	sub	sp, #16
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	4a0d      	ldr	r2, [pc, #52]	@ (800a150 <HAL_PCD_MspInit+0x44>)
 800a11a:	4293      	cmp	r3, r2
 800a11c:	d113      	bne.n	800a146 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a11e:	4b0d      	ldr	r3, [pc, #52]	@ (800a154 <HAL_PCD_MspInit+0x48>)
 800a120:	69db      	ldr	r3, [r3, #28]
 800a122:	4a0c      	ldr	r2, [pc, #48]	@ (800a154 <HAL_PCD_MspInit+0x48>)
 800a124:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a128:	61d3      	str	r3, [r2, #28]
 800a12a:	4b0a      	ldr	r3, [pc, #40]	@ (800a154 <HAL_PCD_MspInit+0x48>)
 800a12c:	69db      	ldr	r3, [r3, #28]
 800a12e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a132:	60fb      	str	r3, [r7, #12]
 800a134:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a136:	2200      	movs	r2, #0
 800a138:	2100      	movs	r1, #0
 800a13a:	2014      	movs	r0, #20
 800a13c:	f7f8 fa9d 	bl	800267a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a140:	2014      	movs	r0, #20
 800a142:	f7f8 fab6 	bl	80026b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a146:	bf00      	nop
 800a148:	3710      	adds	r7, #16
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}
 800a14e:	bf00      	nop
 800a150:	40005c00 	.word	0x40005c00
 800a154:	40021000 	.word	0x40021000

0800a158 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b082      	sub	sp, #8
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800a16c:	4619      	mov	r1, r3
 800a16e:	4610      	mov	r0, r2
 800a170:	f7fe feac 	bl	8008ecc <USBD_LL_SetupStage>
}
 800a174:	bf00      	nop
 800a176:	3708      	adds	r7, #8
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}

0800a17c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b082      	sub	sp, #8
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
 800a184:	460b      	mov	r3, r1
 800a186:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800a18e:	78fa      	ldrb	r2, [r7, #3]
 800a190:	6879      	ldr	r1, [r7, #4]
 800a192:	4613      	mov	r3, r2
 800a194:	009b      	lsls	r3, r3, #2
 800a196:	4413      	add	r3, r2
 800a198:	00db      	lsls	r3, r3, #3
 800a19a:	440b      	add	r3, r1
 800a19c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a1a0:	681a      	ldr	r2, [r3, #0]
 800a1a2:	78fb      	ldrb	r3, [r7, #3]
 800a1a4:	4619      	mov	r1, r3
 800a1a6:	f7fe fede 	bl	8008f66 <USBD_LL_DataOutStage>
}
 800a1aa:	bf00      	nop
 800a1ac:	3708      	adds	r7, #8
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bd80      	pop	{r7, pc}

0800a1b2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1b2:	b580      	push	{r7, lr}
 800a1b4:	b082      	sub	sp, #8
 800a1b6:	af00      	add	r7, sp, #0
 800a1b8:	6078      	str	r0, [r7, #4]
 800a1ba:	460b      	mov	r3, r1
 800a1bc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800a1c4:	78fa      	ldrb	r2, [r7, #3]
 800a1c6:	6879      	ldr	r1, [r7, #4]
 800a1c8:	4613      	mov	r3, r2
 800a1ca:	009b      	lsls	r3, r3, #2
 800a1cc:	4413      	add	r3, r2
 800a1ce:	00db      	lsls	r3, r3, #3
 800a1d0:	440b      	add	r3, r1
 800a1d2:	3324      	adds	r3, #36	@ 0x24
 800a1d4:	681a      	ldr	r2, [r3, #0]
 800a1d6:	78fb      	ldrb	r3, [r7, #3]
 800a1d8:	4619      	mov	r1, r3
 800a1da:	f7fe ff35 	bl	8009048 <USBD_LL_DataInStage>
}
 800a1de:	bf00      	nop
 800a1e0:	3708      	adds	r7, #8
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}

0800a1e6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1e6:	b580      	push	{r7, lr}
 800a1e8:	b082      	sub	sp, #8
 800a1ea:	af00      	add	r7, sp, #0
 800a1ec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	f7ff f845 	bl	8009284 <USBD_LL_SOF>
}
 800a1fa:	bf00      	nop
 800a1fc:	3708      	adds	r7, #8
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}

0800a202 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a202:	b580      	push	{r7, lr}
 800a204:	b084      	sub	sp, #16
 800a206:	af00      	add	r7, sp, #0
 800a208:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a20a:	2301      	movs	r3, #1
 800a20c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	799b      	ldrb	r3, [r3, #6]
 800a212:	2b02      	cmp	r3, #2
 800a214:	d001      	beq.n	800a21a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a216:	f7f7 fe37 	bl	8001e88 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a220:	7bfa      	ldrb	r2, [r7, #15]
 800a222:	4611      	mov	r1, r2
 800a224:	4618      	mov	r0, r3
 800a226:	f7fe fff5 	bl	8009214 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a230:	4618      	mov	r0, r3
 800a232:	f7fe ffae 	bl	8009192 <USBD_LL_Reset>
}
 800a236:	bf00      	nop
 800a238:	3710      	adds	r7, #16
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}
	...

0800a240 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b082      	sub	sp, #8
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a24e:	4618      	mov	r0, r3
 800a250:	f7fe ffef 	bl	8009232 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	7a9b      	ldrb	r3, [r3, #10]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d005      	beq.n	800a268 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a25c:	4b04      	ldr	r3, [pc, #16]	@ (800a270 <HAL_PCD_SuspendCallback+0x30>)
 800a25e:	691b      	ldr	r3, [r3, #16]
 800a260:	4a03      	ldr	r2, [pc, #12]	@ (800a270 <HAL_PCD_SuspendCallback+0x30>)
 800a262:	f043 0306 	orr.w	r3, r3, #6
 800a266:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a268:	bf00      	nop
 800a26a:	3708      	adds	r7, #8
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}
 800a270:	e000ed00 	.word	0xe000ed00

0800a274 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b082      	sub	sp, #8
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a282:	4618      	mov	r0, r3
 800a284:	f7fe ffe9 	bl	800925a <USBD_LL_Resume>
}
 800a288:	bf00      	nop
 800a28a:	3708      	adds	r7, #8
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}

0800a290 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b082      	sub	sp, #8
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a298:	4a1f      	ldr	r2, [pc, #124]	@ (800a318 <USBD_LL_Init+0x88>)
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	4a1d      	ldr	r2, [pc, #116]	@ (800a318 <USBD_LL_Init+0x88>)
 800a2a4:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a2a8:	4b1b      	ldr	r3, [pc, #108]	@ (800a318 <USBD_LL_Init+0x88>)
 800a2aa:	4a1c      	ldr	r2, [pc, #112]	@ (800a31c <USBD_LL_Init+0x8c>)
 800a2ac:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a2ae:	4b1a      	ldr	r3, [pc, #104]	@ (800a318 <USBD_LL_Init+0x88>)
 800a2b0:	2208      	movs	r2, #8
 800a2b2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a2b4:	4b18      	ldr	r3, [pc, #96]	@ (800a318 <USBD_LL_Init+0x88>)
 800a2b6:	2202      	movs	r2, #2
 800a2b8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a2ba:	4b17      	ldr	r3, [pc, #92]	@ (800a318 <USBD_LL_Init+0x88>)
 800a2bc:	2200      	movs	r2, #0
 800a2be:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a2c0:	4b15      	ldr	r3, [pc, #84]	@ (800a318 <USBD_LL_Init+0x88>)
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a2c6:	4b14      	ldr	r3, [pc, #80]	@ (800a318 <USBD_LL_Init+0x88>)
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a2cc:	4812      	ldr	r0, [pc, #72]	@ (800a318 <USBD_LL_Init+0x88>)
 800a2ce:	f7f8 fe31 	bl	8002f34 <HAL_PCD_Init>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d001      	beq.n	800a2dc <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a2d8:	f7f7 fdd6 	bl	8001e88 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a2e2:	2318      	movs	r3, #24
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	2100      	movs	r1, #0
 800a2e8:	f7fa fb2b 	bl	8004942 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a2f2:	2358      	movs	r3, #88	@ 0x58
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	2180      	movs	r1, #128	@ 0x80
 800a2f8:	f7fa fb23 	bl	8004942 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a302:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a306:	2200      	movs	r2, #0
 800a308:	2181      	movs	r1, #129	@ 0x81
 800a30a:	f7fa fb1a 	bl	8004942 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 800a30e:	2300      	movs	r3, #0
}
 800a310:	4618      	mov	r0, r3
 800a312:	3708      	adds	r7, #8
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}
 800a318:	20000e88 	.word	0x20000e88
 800a31c:	40005c00 	.word	0x40005c00

0800a320 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b084      	sub	sp, #16
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a328:	2300      	movs	r3, #0
 800a32a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a32c:	2300      	movs	r3, #0
 800a32e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a336:	4618      	mov	r0, r3
 800a338:	f7f8 fef2 	bl	8003120 <HAL_PCD_Start>
 800a33c:	4603      	mov	r3, r0
 800a33e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a340:	7bfb      	ldrb	r3, [r7, #15]
 800a342:	4618      	mov	r0, r3
 800a344:	f000 f93a 	bl	800a5bc <USBD_Get_USB_Status>
 800a348:	4603      	mov	r3, r0
 800a34a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a34c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a34e:	4618      	mov	r0, r3
 800a350:	3710      	adds	r7, #16
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}

0800a356 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a356:	b580      	push	{r7, lr}
 800a358:	b084      	sub	sp, #16
 800a35a:	af00      	add	r7, sp, #0
 800a35c:	6078      	str	r0, [r7, #4]
 800a35e:	4608      	mov	r0, r1
 800a360:	4611      	mov	r1, r2
 800a362:	461a      	mov	r2, r3
 800a364:	4603      	mov	r3, r0
 800a366:	70fb      	strb	r3, [r7, #3]
 800a368:	460b      	mov	r3, r1
 800a36a:	70bb      	strb	r3, [r7, #2]
 800a36c:	4613      	mov	r3, r2
 800a36e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a370:	2300      	movs	r3, #0
 800a372:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a374:	2300      	movs	r3, #0
 800a376:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a37e:	78bb      	ldrb	r3, [r7, #2]
 800a380:	883a      	ldrh	r2, [r7, #0]
 800a382:	78f9      	ldrb	r1, [r7, #3]
 800a384:	f7f9 f846 	bl	8003414 <HAL_PCD_EP_Open>
 800a388:	4603      	mov	r3, r0
 800a38a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a38c:	7bfb      	ldrb	r3, [r7, #15]
 800a38e:	4618      	mov	r0, r3
 800a390:	f000 f914 	bl	800a5bc <USBD_Get_USB_Status>
 800a394:	4603      	mov	r3, r0
 800a396:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a398:	7bbb      	ldrb	r3, [r7, #14]
}
 800a39a:	4618      	mov	r0, r3
 800a39c:	3710      	adds	r7, #16
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}

0800a3a2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a3a2:	b580      	push	{r7, lr}
 800a3a4:	b084      	sub	sp, #16
 800a3a6:	af00      	add	r7, sp, #0
 800a3a8:	6078      	str	r0, [r7, #4]
 800a3aa:	460b      	mov	r3, r1
 800a3ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a3bc:	78fa      	ldrb	r2, [r7, #3]
 800a3be:	4611      	mov	r1, r2
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	f7f9 f884 	bl	80034ce <HAL_PCD_EP_Close>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3ca:	7bfb      	ldrb	r3, [r7, #15]
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	f000 f8f5 	bl	800a5bc <USBD_Get_USB_Status>
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a3d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	3710      	adds	r7, #16
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bd80      	pop	{r7, pc}

0800a3e0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b084      	sub	sp, #16
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
 800a3e8:	460b      	mov	r3, r1
 800a3ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a3fa:	78fa      	ldrb	r2, [r7, #3]
 800a3fc:	4611      	mov	r1, r2
 800a3fe:	4618      	mov	r0, r3
 800a400:	f7f9 f915 	bl	800362e <HAL_PCD_EP_SetStall>
 800a404:	4603      	mov	r3, r0
 800a406:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a408:	7bfb      	ldrb	r3, [r7, #15]
 800a40a:	4618      	mov	r0, r3
 800a40c:	f000 f8d6 	bl	800a5bc <USBD_Get_USB_Status>
 800a410:	4603      	mov	r3, r0
 800a412:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a414:	7bbb      	ldrb	r3, [r7, #14]
}
 800a416:	4618      	mov	r0, r3
 800a418:	3710      	adds	r7, #16
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bd80      	pop	{r7, pc}

0800a41e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a41e:	b580      	push	{r7, lr}
 800a420:	b084      	sub	sp, #16
 800a422:	af00      	add	r7, sp, #0
 800a424:	6078      	str	r0, [r7, #4]
 800a426:	460b      	mov	r3, r1
 800a428:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a42a:	2300      	movs	r3, #0
 800a42c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a42e:	2300      	movs	r3, #0
 800a430:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a438:	78fa      	ldrb	r2, [r7, #3]
 800a43a:	4611      	mov	r1, r2
 800a43c:	4618      	mov	r0, r3
 800a43e:	f7f9 f956 	bl	80036ee <HAL_PCD_EP_ClrStall>
 800a442:	4603      	mov	r3, r0
 800a444:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a446:	7bfb      	ldrb	r3, [r7, #15]
 800a448:	4618      	mov	r0, r3
 800a44a:	f000 f8b7 	bl	800a5bc <USBD_Get_USB_Status>
 800a44e:	4603      	mov	r3, r0
 800a450:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a452:	7bbb      	ldrb	r3, [r7, #14]
}
 800a454:	4618      	mov	r0, r3
 800a456:	3710      	adds	r7, #16
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}

0800a45c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a45c:	b480      	push	{r7}
 800a45e:	b085      	sub	sp, #20
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
 800a464:	460b      	mov	r3, r1
 800a466:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a46e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a470:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a474:	2b00      	cmp	r3, #0
 800a476:	da0b      	bge.n	800a490 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a478:	78fb      	ldrb	r3, [r7, #3]
 800a47a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a47e:	68f9      	ldr	r1, [r7, #12]
 800a480:	4613      	mov	r3, r2
 800a482:	009b      	lsls	r3, r3, #2
 800a484:	4413      	add	r3, r2
 800a486:	00db      	lsls	r3, r3, #3
 800a488:	440b      	add	r3, r1
 800a48a:	3312      	adds	r3, #18
 800a48c:	781b      	ldrb	r3, [r3, #0]
 800a48e:	e00b      	b.n	800a4a8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a490:	78fb      	ldrb	r3, [r7, #3]
 800a492:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a496:	68f9      	ldr	r1, [r7, #12]
 800a498:	4613      	mov	r3, r2
 800a49a:	009b      	lsls	r3, r3, #2
 800a49c:	4413      	add	r3, r2
 800a49e:	00db      	lsls	r3, r3, #3
 800a4a0:	440b      	add	r3, r1
 800a4a2:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800a4a6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	3714      	adds	r7, #20
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bc80      	pop	{r7}
 800a4b0:	4770      	bx	lr

0800a4b2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a4b2:	b580      	push	{r7, lr}
 800a4b4:	b084      	sub	sp, #16
 800a4b6:	af00      	add	r7, sp, #0
 800a4b8:	6078      	str	r0, [r7, #4]
 800a4ba:	460b      	mov	r3, r1
 800a4bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4be:	2300      	movs	r3, #0
 800a4c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a4cc:	78fa      	ldrb	r2, [r7, #3]
 800a4ce:	4611      	mov	r1, r2
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	f7f8 ff7b 	bl	80033cc <HAL_PCD_SetAddress>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4da:	7bfb      	ldrb	r3, [r7, #15]
 800a4dc:	4618      	mov	r0, r3
 800a4de:	f000 f86d 	bl	800a5bc <USBD_Get_USB_Status>
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4e6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	3710      	adds	r7, #16
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bd80      	pop	{r7, pc}

0800a4f0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b086      	sub	sp, #24
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	60f8      	str	r0, [r7, #12]
 800a4f8:	607a      	str	r2, [r7, #4]
 800a4fa:	461a      	mov	r2, r3
 800a4fc:	460b      	mov	r3, r1
 800a4fe:	72fb      	strb	r3, [r7, #11]
 800a500:	4613      	mov	r3, r2
 800a502:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a504:	2300      	movs	r3, #0
 800a506:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a508:	2300      	movs	r3, #0
 800a50a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a512:	893b      	ldrh	r3, [r7, #8]
 800a514:	7af9      	ldrb	r1, [r7, #11]
 800a516:	687a      	ldr	r2, [r7, #4]
 800a518:	f7f9 f852 	bl	80035c0 <HAL_PCD_EP_Transmit>
 800a51c:	4603      	mov	r3, r0
 800a51e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a520:	7dfb      	ldrb	r3, [r7, #23]
 800a522:	4618      	mov	r0, r3
 800a524:	f000 f84a 	bl	800a5bc <USBD_Get_USB_Status>
 800a528:	4603      	mov	r3, r0
 800a52a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a52c:	7dbb      	ldrb	r3, [r7, #22]
}
 800a52e:	4618      	mov	r0, r3
 800a530:	3718      	adds	r7, #24
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}

0800a536 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a536:	b580      	push	{r7, lr}
 800a538:	b086      	sub	sp, #24
 800a53a:	af00      	add	r7, sp, #0
 800a53c:	60f8      	str	r0, [r7, #12]
 800a53e:	607a      	str	r2, [r7, #4]
 800a540:	461a      	mov	r2, r3
 800a542:	460b      	mov	r3, r1
 800a544:	72fb      	strb	r3, [r7, #11]
 800a546:	4613      	mov	r3, r2
 800a548:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a54a:	2300      	movs	r3, #0
 800a54c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a54e:	2300      	movs	r3, #0
 800a550:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a558:	893b      	ldrh	r3, [r7, #8]
 800a55a:	7af9      	ldrb	r1, [r7, #11]
 800a55c:	687a      	ldr	r2, [r7, #4]
 800a55e:	f7f8 fffe 	bl	800355e <HAL_PCD_EP_Receive>
 800a562:	4603      	mov	r3, r0
 800a564:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a566:	7dfb      	ldrb	r3, [r7, #23]
 800a568:	4618      	mov	r0, r3
 800a56a:	f000 f827 	bl	800a5bc <USBD_Get_USB_Status>
 800a56e:	4603      	mov	r3, r0
 800a570:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a572:	7dbb      	ldrb	r3, [r7, #22]
}
 800a574:	4618      	mov	r0, r3
 800a576:	3718      	adds	r7, #24
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}

0800a57c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a57c:	b480      	push	{r7}
 800a57e:	b083      	sub	sp, #12
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a584:	4b02      	ldr	r3, [pc, #8]	@ (800a590 <USBD_static_malloc+0x14>)
}
 800a586:	4618      	mov	r0, r3
 800a588:	370c      	adds	r7, #12
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bc80      	pop	{r7}
 800a58e:	4770      	bx	lr
 800a590:	20001160 	.word	0x20001160

0800a594 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a594:	b480      	push	{r7}
 800a596:	b083      	sub	sp, #12
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]

}
 800a59c:	bf00      	nop
 800a59e:	370c      	adds	r7, #12
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bc80      	pop	{r7}
 800a5a4:	4770      	bx	lr

0800a5a6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5a6:	b480      	push	{r7}
 800a5a8:	b083      	sub	sp, #12
 800a5aa:	af00      	add	r7, sp, #0
 800a5ac:	6078      	str	r0, [r7, #4]
 800a5ae:	460b      	mov	r3, r1
 800a5b0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a5b2:	bf00      	nop
 800a5b4:	370c      	adds	r7, #12
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bc80      	pop	{r7}
 800a5ba:	4770      	bx	lr

0800a5bc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a5bc:	b480      	push	{r7}
 800a5be:	b085      	sub	sp, #20
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a5ca:	79fb      	ldrb	r3, [r7, #7]
 800a5cc:	2b03      	cmp	r3, #3
 800a5ce:	d817      	bhi.n	800a600 <USBD_Get_USB_Status+0x44>
 800a5d0:	a201      	add	r2, pc, #4	@ (adr r2, 800a5d8 <USBD_Get_USB_Status+0x1c>)
 800a5d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5d6:	bf00      	nop
 800a5d8:	0800a5e9 	.word	0x0800a5e9
 800a5dc:	0800a5ef 	.word	0x0800a5ef
 800a5e0:	0800a5f5 	.word	0x0800a5f5
 800a5e4:	0800a5fb 	.word	0x0800a5fb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	73fb      	strb	r3, [r7, #15]
    break;
 800a5ec:	e00b      	b.n	800a606 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a5ee:	2302      	movs	r3, #2
 800a5f0:	73fb      	strb	r3, [r7, #15]
    break;
 800a5f2:	e008      	b.n	800a606 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	73fb      	strb	r3, [r7, #15]
    break;
 800a5f8:	e005      	b.n	800a606 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a5fa:	2302      	movs	r3, #2
 800a5fc:	73fb      	strb	r3, [r7, #15]
    break;
 800a5fe:	e002      	b.n	800a606 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a600:	2302      	movs	r3, #2
 800a602:	73fb      	strb	r3, [r7, #15]
    break;
 800a604:	bf00      	nop
  }
  return usb_status;
 800a606:	7bfb      	ldrb	r3, [r7, #15]
}
 800a608:	4618      	mov	r0, r3
 800a60a:	3714      	adds	r7, #20
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bc80      	pop	{r7}
 800a610:	4770      	bx	lr
 800a612:	bf00      	nop

0800a614 <sulp>:
 800a614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a618:	460f      	mov	r7, r1
 800a61a:	4690      	mov	r8, r2
 800a61c:	f002 f890 	bl	800c740 <__ulp>
 800a620:	4604      	mov	r4, r0
 800a622:	460d      	mov	r5, r1
 800a624:	f1b8 0f00 	cmp.w	r8, #0
 800a628:	d011      	beq.n	800a64e <sulp+0x3a>
 800a62a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800a62e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a632:	2b00      	cmp	r3, #0
 800a634:	dd0b      	ble.n	800a64e <sulp+0x3a>
 800a636:	2400      	movs	r4, #0
 800a638:	051b      	lsls	r3, r3, #20
 800a63a:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a63e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a642:	4622      	mov	r2, r4
 800a644:	462b      	mov	r3, r5
 800a646:	f7f5 ff49 	bl	80004dc <__aeabi_dmul>
 800a64a:	4604      	mov	r4, r0
 800a64c:	460d      	mov	r5, r1
 800a64e:	4620      	mov	r0, r4
 800a650:	4629      	mov	r1, r5
 800a652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800a658 <_strtod_l>:
 800a658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a65c:	b09f      	sub	sp, #124	@ 0x7c
 800a65e:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a660:	2200      	movs	r2, #0
 800a662:	460c      	mov	r4, r1
 800a664:	921a      	str	r2, [sp, #104]	@ 0x68
 800a666:	f04f 0a00 	mov.w	sl, #0
 800a66a:	f04f 0b00 	mov.w	fp, #0
 800a66e:	460a      	mov	r2, r1
 800a670:	9005      	str	r0, [sp, #20]
 800a672:	9219      	str	r2, [sp, #100]	@ 0x64
 800a674:	7811      	ldrb	r1, [r2, #0]
 800a676:	292b      	cmp	r1, #43	@ 0x2b
 800a678:	d048      	beq.n	800a70c <_strtod_l+0xb4>
 800a67a:	d836      	bhi.n	800a6ea <_strtod_l+0x92>
 800a67c:	290d      	cmp	r1, #13
 800a67e:	d830      	bhi.n	800a6e2 <_strtod_l+0x8a>
 800a680:	2908      	cmp	r1, #8
 800a682:	d830      	bhi.n	800a6e6 <_strtod_l+0x8e>
 800a684:	2900      	cmp	r1, #0
 800a686:	d039      	beq.n	800a6fc <_strtod_l+0xa4>
 800a688:	2200      	movs	r2, #0
 800a68a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a68c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a68e:	782a      	ldrb	r2, [r5, #0]
 800a690:	2a30      	cmp	r2, #48	@ 0x30
 800a692:	f040 80b1 	bne.w	800a7f8 <_strtod_l+0x1a0>
 800a696:	786a      	ldrb	r2, [r5, #1]
 800a698:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a69c:	2a58      	cmp	r2, #88	@ 0x58
 800a69e:	d16c      	bne.n	800a77a <_strtod_l+0x122>
 800a6a0:	9302      	str	r3, [sp, #8]
 800a6a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a6a4:	4a8e      	ldr	r2, [pc, #568]	@ (800a8e0 <_strtod_l+0x288>)
 800a6a6:	9301      	str	r3, [sp, #4]
 800a6a8:	ab1a      	add	r3, sp, #104	@ 0x68
 800a6aa:	9300      	str	r3, [sp, #0]
 800a6ac:	9805      	ldr	r0, [sp, #20]
 800a6ae:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a6b0:	a919      	add	r1, sp, #100	@ 0x64
 800a6b2:	f001 f941 	bl	800b938 <__gethex>
 800a6b6:	f010 060f 	ands.w	r6, r0, #15
 800a6ba:	4604      	mov	r4, r0
 800a6bc:	d005      	beq.n	800a6ca <_strtod_l+0x72>
 800a6be:	2e06      	cmp	r6, #6
 800a6c0:	d126      	bne.n	800a710 <_strtod_l+0xb8>
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	3501      	adds	r5, #1
 800a6c6:	9519      	str	r5, [sp, #100]	@ 0x64
 800a6c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a6ca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	f040 8584 	bne.w	800b1da <_strtod_l+0xb82>
 800a6d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a6d4:	b1bb      	cbz	r3, 800a706 <_strtod_l+0xae>
 800a6d6:	4650      	mov	r0, sl
 800a6d8:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800a6dc:	b01f      	add	sp, #124	@ 0x7c
 800a6de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6e2:	2920      	cmp	r1, #32
 800a6e4:	d1d0      	bne.n	800a688 <_strtod_l+0x30>
 800a6e6:	3201      	adds	r2, #1
 800a6e8:	e7c3      	b.n	800a672 <_strtod_l+0x1a>
 800a6ea:	292d      	cmp	r1, #45	@ 0x2d
 800a6ec:	d1cc      	bne.n	800a688 <_strtod_l+0x30>
 800a6ee:	2101      	movs	r1, #1
 800a6f0:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a6f2:	1c51      	adds	r1, r2, #1
 800a6f4:	9119      	str	r1, [sp, #100]	@ 0x64
 800a6f6:	7852      	ldrb	r2, [r2, #1]
 800a6f8:	2a00      	cmp	r2, #0
 800a6fa:	d1c7      	bne.n	800a68c <_strtod_l+0x34>
 800a6fc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a6fe:	9419      	str	r4, [sp, #100]	@ 0x64
 800a700:	2b00      	cmp	r3, #0
 800a702:	f040 8568 	bne.w	800b1d6 <_strtod_l+0xb7e>
 800a706:	4650      	mov	r0, sl
 800a708:	4659      	mov	r1, fp
 800a70a:	e7e7      	b.n	800a6dc <_strtod_l+0x84>
 800a70c:	2100      	movs	r1, #0
 800a70e:	e7ef      	b.n	800a6f0 <_strtod_l+0x98>
 800a710:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a712:	b13a      	cbz	r2, 800a724 <_strtod_l+0xcc>
 800a714:	2135      	movs	r1, #53	@ 0x35
 800a716:	a81c      	add	r0, sp, #112	@ 0x70
 800a718:	f002 f902 	bl	800c920 <__copybits>
 800a71c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a71e:	9805      	ldr	r0, [sp, #20]
 800a720:	f001 fcdc 	bl	800c0dc <_Bfree>
 800a724:	3e01      	subs	r6, #1
 800a726:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a728:	2e04      	cmp	r6, #4
 800a72a:	d806      	bhi.n	800a73a <_strtod_l+0xe2>
 800a72c:	e8df f006 	tbb	[pc, r6]
 800a730:	201d0314 	.word	0x201d0314
 800a734:	14          	.byte	0x14
 800a735:	00          	.byte	0x00
 800a736:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a73a:	05e1      	lsls	r1, r4, #23
 800a73c:	bf48      	it	mi
 800a73e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a742:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a746:	0d1b      	lsrs	r3, r3, #20
 800a748:	051b      	lsls	r3, r3, #20
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d1bd      	bne.n	800a6ca <_strtod_l+0x72>
 800a74e:	f000 fff5 	bl	800b73c <__errno>
 800a752:	2322      	movs	r3, #34	@ 0x22
 800a754:	6003      	str	r3, [r0, #0]
 800a756:	e7b8      	b.n	800a6ca <_strtod_l+0x72>
 800a758:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a75c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a760:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a764:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a768:	e7e7      	b.n	800a73a <_strtod_l+0xe2>
 800a76a:	f8df b178 	ldr.w	fp, [pc, #376]	@ 800a8e4 <_strtod_l+0x28c>
 800a76e:	e7e4      	b.n	800a73a <_strtod_l+0xe2>
 800a770:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a774:	f04f 3aff 	mov.w	sl, #4294967295
 800a778:	e7df      	b.n	800a73a <_strtod_l+0xe2>
 800a77a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a77c:	1c5a      	adds	r2, r3, #1
 800a77e:	9219      	str	r2, [sp, #100]	@ 0x64
 800a780:	785b      	ldrb	r3, [r3, #1]
 800a782:	2b30      	cmp	r3, #48	@ 0x30
 800a784:	d0f9      	beq.n	800a77a <_strtod_l+0x122>
 800a786:	2b00      	cmp	r3, #0
 800a788:	d09f      	beq.n	800a6ca <_strtod_l+0x72>
 800a78a:	2301      	movs	r3, #1
 800a78c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a78e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a790:	220a      	movs	r2, #10
 800a792:	930c      	str	r3, [sp, #48]	@ 0x30
 800a794:	2300      	movs	r3, #0
 800a796:	461f      	mov	r7, r3
 800a798:	9308      	str	r3, [sp, #32]
 800a79a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a79c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a79e:	7805      	ldrb	r5, [r0, #0]
 800a7a0:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a7a4:	b2d9      	uxtb	r1, r3
 800a7a6:	2909      	cmp	r1, #9
 800a7a8:	d928      	bls.n	800a7fc <_strtod_l+0x1a4>
 800a7aa:	2201      	movs	r2, #1
 800a7ac:	494e      	ldr	r1, [pc, #312]	@ (800a8e8 <_strtod_l+0x290>)
 800a7ae:	f000 ff41 	bl	800b634 <strncmp>
 800a7b2:	2800      	cmp	r0, #0
 800a7b4:	d032      	beq.n	800a81c <_strtod_l+0x1c4>
 800a7b6:	2000      	movs	r0, #0
 800a7b8:	462a      	mov	r2, r5
 800a7ba:	4681      	mov	r9, r0
 800a7bc:	463d      	mov	r5, r7
 800a7be:	4603      	mov	r3, r0
 800a7c0:	2a65      	cmp	r2, #101	@ 0x65
 800a7c2:	d001      	beq.n	800a7c8 <_strtod_l+0x170>
 800a7c4:	2a45      	cmp	r2, #69	@ 0x45
 800a7c6:	d114      	bne.n	800a7f2 <_strtod_l+0x19a>
 800a7c8:	b91d      	cbnz	r5, 800a7d2 <_strtod_l+0x17a>
 800a7ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a7cc:	4302      	orrs	r2, r0
 800a7ce:	d095      	beq.n	800a6fc <_strtod_l+0xa4>
 800a7d0:	2500      	movs	r5, #0
 800a7d2:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a7d4:	1c62      	adds	r2, r4, #1
 800a7d6:	9219      	str	r2, [sp, #100]	@ 0x64
 800a7d8:	7862      	ldrb	r2, [r4, #1]
 800a7da:	2a2b      	cmp	r2, #43	@ 0x2b
 800a7dc:	d077      	beq.n	800a8ce <_strtod_l+0x276>
 800a7de:	2a2d      	cmp	r2, #45	@ 0x2d
 800a7e0:	d07b      	beq.n	800a8da <_strtod_l+0x282>
 800a7e2:	f04f 0c00 	mov.w	ip, #0
 800a7e6:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a7ea:	2909      	cmp	r1, #9
 800a7ec:	f240 8082 	bls.w	800a8f4 <_strtod_l+0x29c>
 800a7f0:	9419      	str	r4, [sp, #100]	@ 0x64
 800a7f2:	f04f 0800 	mov.w	r8, #0
 800a7f6:	e0a2      	b.n	800a93e <_strtod_l+0x2e6>
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	e7c7      	b.n	800a78c <_strtod_l+0x134>
 800a7fc:	2f08      	cmp	r7, #8
 800a7fe:	bfd5      	itete	le
 800a800:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800a802:	9908      	ldrgt	r1, [sp, #32]
 800a804:	fb02 3301 	mlale	r3, r2, r1, r3
 800a808:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a80c:	f100 0001 	add.w	r0, r0, #1
 800a810:	bfd4      	ite	le
 800a812:	930a      	strle	r3, [sp, #40]	@ 0x28
 800a814:	9308      	strgt	r3, [sp, #32]
 800a816:	3701      	adds	r7, #1
 800a818:	9019      	str	r0, [sp, #100]	@ 0x64
 800a81a:	e7bf      	b.n	800a79c <_strtod_l+0x144>
 800a81c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a81e:	1c5a      	adds	r2, r3, #1
 800a820:	9219      	str	r2, [sp, #100]	@ 0x64
 800a822:	785a      	ldrb	r2, [r3, #1]
 800a824:	b37f      	cbz	r7, 800a886 <_strtod_l+0x22e>
 800a826:	4681      	mov	r9, r0
 800a828:	463d      	mov	r5, r7
 800a82a:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a82e:	2b09      	cmp	r3, #9
 800a830:	d912      	bls.n	800a858 <_strtod_l+0x200>
 800a832:	2301      	movs	r3, #1
 800a834:	e7c4      	b.n	800a7c0 <_strtod_l+0x168>
 800a836:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a838:	3001      	adds	r0, #1
 800a83a:	1c5a      	adds	r2, r3, #1
 800a83c:	9219      	str	r2, [sp, #100]	@ 0x64
 800a83e:	785a      	ldrb	r2, [r3, #1]
 800a840:	2a30      	cmp	r2, #48	@ 0x30
 800a842:	d0f8      	beq.n	800a836 <_strtod_l+0x1de>
 800a844:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a848:	2b08      	cmp	r3, #8
 800a84a:	f200 84cb 	bhi.w	800b1e4 <_strtod_l+0xb8c>
 800a84e:	4681      	mov	r9, r0
 800a850:	2000      	movs	r0, #0
 800a852:	4605      	mov	r5, r0
 800a854:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a856:	930c      	str	r3, [sp, #48]	@ 0x30
 800a858:	3a30      	subs	r2, #48	@ 0x30
 800a85a:	f100 0301 	add.w	r3, r0, #1
 800a85e:	d02a      	beq.n	800a8b6 <_strtod_l+0x25e>
 800a860:	4499      	add	r9, r3
 800a862:	210a      	movs	r1, #10
 800a864:	462b      	mov	r3, r5
 800a866:	eb00 0c05 	add.w	ip, r0, r5
 800a86a:	4563      	cmp	r3, ip
 800a86c:	d10d      	bne.n	800a88a <_strtod_l+0x232>
 800a86e:	1c69      	adds	r1, r5, #1
 800a870:	4401      	add	r1, r0
 800a872:	4428      	add	r0, r5
 800a874:	2808      	cmp	r0, #8
 800a876:	dc16      	bgt.n	800a8a6 <_strtod_l+0x24e>
 800a878:	230a      	movs	r3, #10
 800a87a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a87c:	fb03 2300 	mla	r3, r3, r0, r2
 800a880:	930a      	str	r3, [sp, #40]	@ 0x28
 800a882:	2300      	movs	r3, #0
 800a884:	e018      	b.n	800a8b8 <_strtod_l+0x260>
 800a886:	4638      	mov	r0, r7
 800a888:	e7da      	b.n	800a840 <_strtod_l+0x1e8>
 800a88a:	2b08      	cmp	r3, #8
 800a88c:	f103 0301 	add.w	r3, r3, #1
 800a890:	dc03      	bgt.n	800a89a <_strtod_l+0x242>
 800a892:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a894:	434e      	muls	r6, r1
 800a896:	960a      	str	r6, [sp, #40]	@ 0x28
 800a898:	e7e7      	b.n	800a86a <_strtod_l+0x212>
 800a89a:	2b10      	cmp	r3, #16
 800a89c:	bfde      	ittt	le
 800a89e:	9e08      	ldrle	r6, [sp, #32]
 800a8a0:	434e      	mulle	r6, r1
 800a8a2:	9608      	strle	r6, [sp, #32]
 800a8a4:	e7e1      	b.n	800a86a <_strtod_l+0x212>
 800a8a6:	280f      	cmp	r0, #15
 800a8a8:	dceb      	bgt.n	800a882 <_strtod_l+0x22a>
 800a8aa:	230a      	movs	r3, #10
 800a8ac:	9808      	ldr	r0, [sp, #32]
 800a8ae:	fb03 2300 	mla	r3, r3, r0, r2
 800a8b2:	9308      	str	r3, [sp, #32]
 800a8b4:	e7e5      	b.n	800a882 <_strtod_l+0x22a>
 800a8b6:	4629      	mov	r1, r5
 800a8b8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a8ba:	460d      	mov	r5, r1
 800a8bc:	1c50      	adds	r0, r2, #1
 800a8be:	9019      	str	r0, [sp, #100]	@ 0x64
 800a8c0:	7852      	ldrb	r2, [r2, #1]
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	e7b1      	b.n	800a82a <_strtod_l+0x1d2>
 800a8c6:	f04f 0900 	mov.w	r9, #0
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	e77d      	b.n	800a7ca <_strtod_l+0x172>
 800a8ce:	f04f 0c00 	mov.w	ip, #0
 800a8d2:	1ca2      	adds	r2, r4, #2
 800a8d4:	9219      	str	r2, [sp, #100]	@ 0x64
 800a8d6:	78a2      	ldrb	r2, [r4, #2]
 800a8d8:	e785      	b.n	800a7e6 <_strtod_l+0x18e>
 800a8da:	f04f 0c01 	mov.w	ip, #1
 800a8de:	e7f8      	b.n	800a8d2 <_strtod_l+0x27a>
 800a8e0:	0800d9ac 	.word	0x0800d9ac
 800a8e4:	7ff00000 	.word	0x7ff00000
 800a8e8:	0800d98a 	.word	0x0800d98a
 800a8ec:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a8ee:	1c51      	adds	r1, r2, #1
 800a8f0:	9119      	str	r1, [sp, #100]	@ 0x64
 800a8f2:	7852      	ldrb	r2, [r2, #1]
 800a8f4:	2a30      	cmp	r2, #48	@ 0x30
 800a8f6:	d0f9      	beq.n	800a8ec <_strtod_l+0x294>
 800a8f8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a8fc:	2908      	cmp	r1, #8
 800a8fe:	f63f af78 	bhi.w	800a7f2 <_strtod_l+0x19a>
 800a902:	f04f 080a 	mov.w	r8, #10
 800a906:	3a30      	subs	r2, #48	@ 0x30
 800a908:	920e      	str	r2, [sp, #56]	@ 0x38
 800a90a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a90c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a90e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a910:	1c56      	adds	r6, r2, #1
 800a912:	9619      	str	r6, [sp, #100]	@ 0x64
 800a914:	7852      	ldrb	r2, [r2, #1]
 800a916:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a91a:	f1be 0f09 	cmp.w	lr, #9
 800a91e:	d939      	bls.n	800a994 <_strtod_l+0x33c>
 800a920:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a922:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a926:	1a76      	subs	r6, r6, r1
 800a928:	2e08      	cmp	r6, #8
 800a92a:	dc03      	bgt.n	800a934 <_strtod_l+0x2dc>
 800a92c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a92e:	4588      	cmp	r8, r1
 800a930:	bfa8      	it	ge
 800a932:	4688      	movge	r8, r1
 800a934:	f1bc 0f00 	cmp.w	ip, #0
 800a938:	d001      	beq.n	800a93e <_strtod_l+0x2e6>
 800a93a:	f1c8 0800 	rsb	r8, r8, #0
 800a93e:	2d00      	cmp	r5, #0
 800a940:	d14e      	bne.n	800a9e0 <_strtod_l+0x388>
 800a942:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a944:	4308      	orrs	r0, r1
 800a946:	f47f aec0 	bne.w	800a6ca <_strtod_l+0x72>
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	f47f aed6 	bne.w	800a6fc <_strtod_l+0xa4>
 800a950:	2a69      	cmp	r2, #105	@ 0x69
 800a952:	d028      	beq.n	800a9a6 <_strtod_l+0x34e>
 800a954:	dc25      	bgt.n	800a9a2 <_strtod_l+0x34a>
 800a956:	2a49      	cmp	r2, #73	@ 0x49
 800a958:	d025      	beq.n	800a9a6 <_strtod_l+0x34e>
 800a95a:	2a4e      	cmp	r2, #78	@ 0x4e
 800a95c:	f47f aece 	bne.w	800a6fc <_strtod_l+0xa4>
 800a960:	499a      	ldr	r1, [pc, #616]	@ (800abcc <_strtod_l+0x574>)
 800a962:	a819      	add	r0, sp, #100	@ 0x64
 800a964:	f001 fa0a 	bl	800bd7c <__match>
 800a968:	2800      	cmp	r0, #0
 800a96a:	f43f aec7 	beq.w	800a6fc <_strtod_l+0xa4>
 800a96e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a970:	781b      	ldrb	r3, [r3, #0]
 800a972:	2b28      	cmp	r3, #40	@ 0x28
 800a974:	d12e      	bne.n	800a9d4 <_strtod_l+0x37c>
 800a976:	4996      	ldr	r1, [pc, #600]	@ (800abd0 <_strtod_l+0x578>)
 800a978:	aa1c      	add	r2, sp, #112	@ 0x70
 800a97a:	a819      	add	r0, sp, #100	@ 0x64
 800a97c:	f001 fa12 	bl	800bda4 <__hexnan>
 800a980:	2805      	cmp	r0, #5
 800a982:	d127      	bne.n	800a9d4 <_strtod_l+0x37c>
 800a984:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a986:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a98a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a98e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a992:	e69a      	b.n	800a6ca <_strtod_l+0x72>
 800a994:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a996:	fb08 2101 	mla	r1, r8, r1, r2
 800a99a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a99e:	920e      	str	r2, [sp, #56]	@ 0x38
 800a9a0:	e7b5      	b.n	800a90e <_strtod_l+0x2b6>
 800a9a2:	2a6e      	cmp	r2, #110	@ 0x6e
 800a9a4:	e7da      	b.n	800a95c <_strtod_l+0x304>
 800a9a6:	498b      	ldr	r1, [pc, #556]	@ (800abd4 <_strtod_l+0x57c>)
 800a9a8:	a819      	add	r0, sp, #100	@ 0x64
 800a9aa:	f001 f9e7 	bl	800bd7c <__match>
 800a9ae:	2800      	cmp	r0, #0
 800a9b0:	f43f aea4 	beq.w	800a6fc <_strtod_l+0xa4>
 800a9b4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a9b6:	4988      	ldr	r1, [pc, #544]	@ (800abd8 <_strtod_l+0x580>)
 800a9b8:	3b01      	subs	r3, #1
 800a9ba:	a819      	add	r0, sp, #100	@ 0x64
 800a9bc:	9319      	str	r3, [sp, #100]	@ 0x64
 800a9be:	f001 f9dd 	bl	800bd7c <__match>
 800a9c2:	b910      	cbnz	r0, 800a9ca <_strtod_l+0x372>
 800a9c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a9c6:	3301      	adds	r3, #1
 800a9c8:	9319      	str	r3, [sp, #100]	@ 0x64
 800a9ca:	f04f 0a00 	mov.w	sl, #0
 800a9ce:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 800abdc <_strtod_l+0x584>
 800a9d2:	e67a      	b.n	800a6ca <_strtod_l+0x72>
 800a9d4:	4882      	ldr	r0, [pc, #520]	@ (800abe0 <_strtod_l+0x588>)
 800a9d6:	f000 fef5 	bl	800b7c4 <nan>
 800a9da:	4682      	mov	sl, r0
 800a9dc:	468b      	mov	fp, r1
 800a9de:	e674      	b.n	800a6ca <_strtod_l+0x72>
 800a9e0:	eba8 0309 	sub.w	r3, r8, r9
 800a9e4:	2f00      	cmp	r7, #0
 800a9e6:	bf08      	it	eq
 800a9e8:	462f      	moveq	r7, r5
 800a9ea:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a9ec:	2d10      	cmp	r5, #16
 800a9ee:	462c      	mov	r4, r5
 800a9f0:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9f2:	bfa8      	it	ge
 800a9f4:	2410      	movge	r4, #16
 800a9f6:	f7f5 fcf7 	bl	80003e8 <__aeabi_ui2d>
 800a9fa:	2d09      	cmp	r5, #9
 800a9fc:	4682      	mov	sl, r0
 800a9fe:	468b      	mov	fp, r1
 800aa00:	dc11      	bgt.n	800aa26 <_strtod_l+0x3ce>
 800aa02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	f43f ae60 	beq.w	800a6ca <_strtod_l+0x72>
 800aa0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa0c:	dd76      	ble.n	800aafc <_strtod_l+0x4a4>
 800aa0e:	2b16      	cmp	r3, #22
 800aa10:	dc5d      	bgt.n	800aace <_strtod_l+0x476>
 800aa12:	4974      	ldr	r1, [pc, #464]	@ (800abe4 <_strtod_l+0x58c>)
 800aa14:	4652      	mov	r2, sl
 800aa16:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800aa1a:	465b      	mov	r3, fp
 800aa1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa20:	f7f5 fd5c 	bl	80004dc <__aeabi_dmul>
 800aa24:	e7d9      	b.n	800a9da <_strtod_l+0x382>
 800aa26:	4b6f      	ldr	r3, [pc, #444]	@ (800abe4 <_strtod_l+0x58c>)
 800aa28:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800aa2c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800aa30:	f7f5 fd54 	bl	80004dc <__aeabi_dmul>
 800aa34:	4682      	mov	sl, r0
 800aa36:	9808      	ldr	r0, [sp, #32]
 800aa38:	468b      	mov	fp, r1
 800aa3a:	f7f5 fcd5 	bl	80003e8 <__aeabi_ui2d>
 800aa3e:	4602      	mov	r2, r0
 800aa40:	460b      	mov	r3, r1
 800aa42:	4650      	mov	r0, sl
 800aa44:	4659      	mov	r1, fp
 800aa46:	f7f5 fb93 	bl	8000170 <__adddf3>
 800aa4a:	2d0f      	cmp	r5, #15
 800aa4c:	4682      	mov	sl, r0
 800aa4e:	468b      	mov	fp, r1
 800aa50:	ddd7      	ble.n	800aa02 <_strtod_l+0x3aa>
 800aa52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa54:	1b2c      	subs	r4, r5, r4
 800aa56:	441c      	add	r4, r3
 800aa58:	2c00      	cmp	r4, #0
 800aa5a:	f340 8096 	ble.w	800ab8a <_strtod_l+0x532>
 800aa5e:	f014 030f 	ands.w	r3, r4, #15
 800aa62:	d00a      	beq.n	800aa7a <_strtod_l+0x422>
 800aa64:	495f      	ldr	r1, [pc, #380]	@ (800abe4 <_strtod_l+0x58c>)
 800aa66:	4652      	mov	r2, sl
 800aa68:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800aa6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa70:	465b      	mov	r3, fp
 800aa72:	f7f5 fd33 	bl	80004dc <__aeabi_dmul>
 800aa76:	4682      	mov	sl, r0
 800aa78:	468b      	mov	fp, r1
 800aa7a:	f034 040f 	bics.w	r4, r4, #15
 800aa7e:	d073      	beq.n	800ab68 <_strtod_l+0x510>
 800aa80:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800aa84:	dd48      	ble.n	800ab18 <_strtod_l+0x4c0>
 800aa86:	2400      	movs	r4, #0
 800aa88:	46a0      	mov	r8, r4
 800aa8a:	46a1      	mov	r9, r4
 800aa8c:	940a      	str	r4, [sp, #40]	@ 0x28
 800aa8e:	2322      	movs	r3, #34	@ 0x22
 800aa90:	f04f 0a00 	mov.w	sl, #0
 800aa94:	9a05      	ldr	r2, [sp, #20]
 800aa96:	f8df b144 	ldr.w	fp, [pc, #324]	@ 800abdc <_strtod_l+0x584>
 800aa9a:	6013      	str	r3, [r2, #0]
 800aa9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	f43f ae13 	beq.w	800a6ca <_strtod_l+0x72>
 800aaa4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aaa6:	9805      	ldr	r0, [sp, #20]
 800aaa8:	f001 fb18 	bl	800c0dc <_Bfree>
 800aaac:	4649      	mov	r1, r9
 800aaae:	9805      	ldr	r0, [sp, #20]
 800aab0:	f001 fb14 	bl	800c0dc <_Bfree>
 800aab4:	4641      	mov	r1, r8
 800aab6:	9805      	ldr	r0, [sp, #20]
 800aab8:	f001 fb10 	bl	800c0dc <_Bfree>
 800aabc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800aabe:	9805      	ldr	r0, [sp, #20]
 800aac0:	f001 fb0c 	bl	800c0dc <_Bfree>
 800aac4:	4621      	mov	r1, r4
 800aac6:	9805      	ldr	r0, [sp, #20]
 800aac8:	f001 fb08 	bl	800c0dc <_Bfree>
 800aacc:	e5fd      	b.n	800a6ca <_strtod_l+0x72>
 800aace:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aad0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800aad4:	4293      	cmp	r3, r2
 800aad6:	dbbc      	blt.n	800aa52 <_strtod_l+0x3fa>
 800aad8:	4c42      	ldr	r4, [pc, #264]	@ (800abe4 <_strtod_l+0x58c>)
 800aada:	f1c5 050f 	rsb	r5, r5, #15
 800aade:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800aae2:	4652      	mov	r2, sl
 800aae4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aae8:	465b      	mov	r3, fp
 800aaea:	f7f5 fcf7 	bl	80004dc <__aeabi_dmul>
 800aaee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aaf0:	1b5d      	subs	r5, r3, r5
 800aaf2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800aaf6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800aafa:	e791      	b.n	800aa20 <_strtod_l+0x3c8>
 800aafc:	3316      	adds	r3, #22
 800aafe:	dba8      	blt.n	800aa52 <_strtod_l+0x3fa>
 800ab00:	4b38      	ldr	r3, [pc, #224]	@ (800abe4 <_strtod_l+0x58c>)
 800ab02:	eba9 0808 	sub.w	r8, r9, r8
 800ab06:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800ab0a:	4650      	mov	r0, sl
 800ab0c:	e9d8 2300 	ldrd	r2, r3, [r8]
 800ab10:	4659      	mov	r1, fp
 800ab12:	f7f5 fe0d 	bl	8000730 <__aeabi_ddiv>
 800ab16:	e760      	b.n	800a9da <_strtod_l+0x382>
 800ab18:	4b33      	ldr	r3, [pc, #204]	@ (800abe8 <_strtod_l+0x590>)
 800ab1a:	4650      	mov	r0, sl
 800ab1c:	9308      	str	r3, [sp, #32]
 800ab1e:	2300      	movs	r3, #0
 800ab20:	4659      	mov	r1, fp
 800ab22:	461e      	mov	r6, r3
 800ab24:	1124      	asrs	r4, r4, #4
 800ab26:	2c01      	cmp	r4, #1
 800ab28:	dc21      	bgt.n	800ab6e <_strtod_l+0x516>
 800ab2a:	b10b      	cbz	r3, 800ab30 <_strtod_l+0x4d8>
 800ab2c:	4682      	mov	sl, r0
 800ab2e:	468b      	mov	fp, r1
 800ab30:	492d      	ldr	r1, [pc, #180]	@ (800abe8 <_strtod_l+0x590>)
 800ab32:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800ab36:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800ab3a:	4652      	mov	r2, sl
 800ab3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab40:	465b      	mov	r3, fp
 800ab42:	f7f5 fccb 	bl	80004dc <__aeabi_dmul>
 800ab46:	4b25      	ldr	r3, [pc, #148]	@ (800abdc <_strtod_l+0x584>)
 800ab48:	460a      	mov	r2, r1
 800ab4a:	400b      	ands	r3, r1
 800ab4c:	4927      	ldr	r1, [pc, #156]	@ (800abec <_strtod_l+0x594>)
 800ab4e:	4682      	mov	sl, r0
 800ab50:	428b      	cmp	r3, r1
 800ab52:	d898      	bhi.n	800aa86 <_strtod_l+0x42e>
 800ab54:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800ab58:	428b      	cmp	r3, r1
 800ab5a:	bf86      	itte	hi
 800ab5c:	f04f 3aff 	movhi.w	sl, #4294967295
 800ab60:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800abf0 <_strtod_l+0x598>
 800ab64:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800ab68:	2300      	movs	r3, #0
 800ab6a:	9308      	str	r3, [sp, #32]
 800ab6c:	e07a      	b.n	800ac64 <_strtod_l+0x60c>
 800ab6e:	07e2      	lsls	r2, r4, #31
 800ab70:	d505      	bpl.n	800ab7e <_strtod_l+0x526>
 800ab72:	9b08      	ldr	r3, [sp, #32]
 800ab74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab78:	f7f5 fcb0 	bl	80004dc <__aeabi_dmul>
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	9a08      	ldr	r2, [sp, #32]
 800ab80:	3601      	adds	r6, #1
 800ab82:	3208      	adds	r2, #8
 800ab84:	1064      	asrs	r4, r4, #1
 800ab86:	9208      	str	r2, [sp, #32]
 800ab88:	e7cd      	b.n	800ab26 <_strtod_l+0x4ce>
 800ab8a:	d0ed      	beq.n	800ab68 <_strtod_l+0x510>
 800ab8c:	4264      	negs	r4, r4
 800ab8e:	f014 020f 	ands.w	r2, r4, #15
 800ab92:	d00a      	beq.n	800abaa <_strtod_l+0x552>
 800ab94:	4b13      	ldr	r3, [pc, #76]	@ (800abe4 <_strtod_l+0x58c>)
 800ab96:	4650      	mov	r0, sl
 800ab98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab9c:	4659      	mov	r1, fp
 800ab9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aba2:	f7f5 fdc5 	bl	8000730 <__aeabi_ddiv>
 800aba6:	4682      	mov	sl, r0
 800aba8:	468b      	mov	fp, r1
 800abaa:	1124      	asrs	r4, r4, #4
 800abac:	d0dc      	beq.n	800ab68 <_strtod_l+0x510>
 800abae:	2c1f      	cmp	r4, #31
 800abb0:	dd20      	ble.n	800abf4 <_strtod_l+0x59c>
 800abb2:	2400      	movs	r4, #0
 800abb4:	46a0      	mov	r8, r4
 800abb6:	46a1      	mov	r9, r4
 800abb8:	940a      	str	r4, [sp, #40]	@ 0x28
 800abba:	2322      	movs	r3, #34	@ 0x22
 800abbc:	9a05      	ldr	r2, [sp, #20]
 800abbe:	f04f 0a00 	mov.w	sl, #0
 800abc2:	f04f 0b00 	mov.w	fp, #0
 800abc6:	6013      	str	r3, [r2, #0]
 800abc8:	e768      	b.n	800aa9c <_strtod_l+0x444>
 800abca:	bf00      	nop
 800abcc:	0800d995 	.word	0x0800d995
 800abd0:	0800d998 	.word	0x0800d998
 800abd4:	0800d98c 	.word	0x0800d98c
 800abd8:	0800d98f 	.word	0x0800d98f
 800abdc:	7ff00000 	.word	0x7ff00000
 800abe0:	0800dd3e 	.word	0x0800dd3e
 800abe4:	0800dc08 	.word	0x0800dc08
 800abe8:	0800dbe0 	.word	0x0800dbe0
 800abec:	7ca00000 	.word	0x7ca00000
 800abf0:	7fefffff 	.word	0x7fefffff
 800abf4:	f014 0310 	ands.w	r3, r4, #16
 800abf8:	bf18      	it	ne
 800abfa:	236a      	movne	r3, #106	@ 0x6a
 800abfc:	4650      	mov	r0, sl
 800abfe:	9308      	str	r3, [sp, #32]
 800ac00:	4659      	mov	r1, fp
 800ac02:	2300      	movs	r3, #0
 800ac04:	4ea9      	ldr	r6, [pc, #676]	@ (800aeac <_strtod_l+0x854>)
 800ac06:	07e2      	lsls	r2, r4, #31
 800ac08:	d504      	bpl.n	800ac14 <_strtod_l+0x5bc>
 800ac0a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ac0e:	f7f5 fc65 	bl	80004dc <__aeabi_dmul>
 800ac12:	2301      	movs	r3, #1
 800ac14:	1064      	asrs	r4, r4, #1
 800ac16:	f106 0608 	add.w	r6, r6, #8
 800ac1a:	d1f4      	bne.n	800ac06 <_strtod_l+0x5ae>
 800ac1c:	b10b      	cbz	r3, 800ac22 <_strtod_l+0x5ca>
 800ac1e:	4682      	mov	sl, r0
 800ac20:	468b      	mov	fp, r1
 800ac22:	9b08      	ldr	r3, [sp, #32]
 800ac24:	b1b3      	cbz	r3, 800ac54 <_strtod_l+0x5fc>
 800ac26:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ac2a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	4659      	mov	r1, fp
 800ac32:	dd0f      	ble.n	800ac54 <_strtod_l+0x5fc>
 800ac34:	2b1f      	cmp	r3, #31
 800ac36:	dd57      	ble.n	800ace8 <_strtod_l+0x690>
 800ac38:	2b34      	cmp	r3, #52	@ 0x34
 800ac3a:	bfd8      	it	le
 800ac3c:	f04f 33ff 	movle.w	r3, #4294967295
 800ac40:	f04f 0a00 	mov.w	sl, #0
 800ac44:	bfcf      	iteee	gt
 800ac46:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800ac4a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800ac4e:	4093      	lslle	r3, r2
 800ac50:	ea03 0b01 	andle.w	fp, r3, r1
 800ac54:	2200      	movs	r2, #0
 800ac56:	2300      	movs	r3, #0
 800ac58:	4650      	mov	r0, sl
 800ac5a:	4659      	mov	r1, fp
 800ac5c:	f7f5 fea6 	bl	80009ac <__aeabi_dcmpeq>
 800ac60:	2800      	cmp	r0, #0
 800ac62:	d1a6      	bne.n	800abb2 <_strtod_l+0x55a>
 800ac64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac66:	463a      	mov	r2, r7
 800ac68:	9300      	str	r3, [sp, #0]
 800ac6a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ac6c:	462b      	mov	r3, r5
 800ac6e:	9805      	ldr	r0, [sp, #20]
 800ac70:	f001 fa9c 	bl	800c1ac <__s2b>
 800ac74:	900a      	str	r0, [sp, #40]	@ 0x28
 800ac76:	2800      	cmp	r0, #0
 800ac78:	f43f af05 	beq.w	800aa86 <_strtod_l+0x42e>
 800ac7c:	2400      	movs	r4, #0
 800ac7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ac80:	eba9 0308 	sub.w	r3, r9, r8
 800ac84:	2a00      	cmp	r2, #0
 800ac86:	bfa8      	it	ge
 800ac88:	2300      	movge	r3, #0
 800ac8a:	46a0      	mov	r8, r4
 800ac8c:	9312      	str	r3, [sp, #72]	@ 0x48
 800ac8e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ac92:	9316      	str	r3, [sp, #88]	@ 0x58
 800ac94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac96:	9805      	ldr	r0, [sp, #20]
 800ac98:	6859      	ldr	r1, [r3, #4]
 800ac9a:	f001 f9df 	bl	800c05c <_Balloc>
 800ac9e:	4681      	mov	r9, r0
 800aca0:	2800      	cmp	r0, #0
 800aca2:	f43f aef4 	beq.w	800aa8e <_strtod_l+0x436>
 800aca6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aca8:	300c      	adds	r0, #12
 800acaa:	691a      	ldr	r2, [r3, #16]
 800acac:	f103 010c 	add.w	r1, r3, #12
 800acb0:	3202      	adds	r2, #2
 800acb2:	0092      	lsls	r2, r2, #2
 800acb4:	f000 fd77 	bl	800b7a6 <memcpy>
 800acb8:	ab1c      	add	r3, sp, #112	@ 0x70
 800acba:	9301      	str	r3, [sp, #4]
 800acbc:	ab1b      	add	r3, sp, #108	@ 0x6c
 800acbe:	9300      	str	r3, [sp, #0]
 800acc0:	4652      	mov	r2, sl
 800acc2:	465b      	mov	r3, fp
 800acc4:	9805      	ldr	r0, [sp, #20]
 800acc6:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800acca:	f001 fda1 	bl	800c810 <__d2b>
 800acce:	901a      	str	r0, [sp, #104]	@ 0x68
 800acd0:	2800      	cmp	r0, #0
 800acd2:	f43f aedc 	beq.w	800aa8e <_strtod_l+0x436>
 800acd6:	2101      	movs	r1, #1
 800acd8:	9805      	ldr	r0, [sp, #20]
 800acda:	f001 fafd 	bl	800c2d8 <__i2b>
 800acde:	4680      	mov	r8, r0
 800ace0:	b948      	cbnz	r0, 800acf6 <_strtod_l+0x69e>
 800ace2:	f04f 0800 	mov.w	r8, #0
 800ace6:	e6d2      	b.n	800aa8e <_strtod_l+0x436>
 800ace8:	f04f 32ff 	mov.w	r2, #4294967295
 800acec:	fa02 f303 	lsl.w	r3, r2, r3
 800acf0:	ea03 0a0a 	and.w	sl, r3, sl
 800acf4:	e7ae      	b.n	800ac54 <_strtod_l+0x5fc>
 800acf6:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800acf8:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800acfa:	2d00      	cmp	r5, #0
 800acfc:	bfab      	itete	ge
 800acfe:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800ad00:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800ad02:	18ef      	addge	r7, r5, r3
 800ad04:	1b5e      	sublt	r6, r3, r5
 800ad06:	9b08      	ldr	r3, [sp, #32]
 800ad08:	bfa8      	it	ge
 800ad0a:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800ad0c:	eba5 0503 	sub.w	r5, r5, r3
 800ad10:	4415      	add	r5, r2
 800ad12:	4b67      	ldr	r3, [pc, #412]	@ (800aeb0 <_strtod_l+0x858>)
 800ad14:	f105 35ff 	add.w	r5, r5, #4294967295
 800ad18:	bfb8      	it	lt
 800ad1a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800ad1c:	429d      	cmp	r5, r3
 800ad1e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800ad22:	da50      	bge.n	800adc6 <_strtod_l+0x76e>
 800ad24:	1b5b      	subs	r3, r3, r5
 800ad26:	2b1f      	cmp	r3, #31
 800ad28:	f04f 0101 	mov.w	r1, #1
 800ad2c:	eba2 0203 	sub.w	r2, r2, r3
 800ad30:	dc3d      	bgt.n	800adae <_strtod_l+0x756>
 800ad32:	fa01 f303 	lsl.w	r3, r1, r3
 800ad36:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ad38:	2300      	movs	r3, #0
 800ad3a:	9310      	str	r3, [sp, #64]	@ 0x40
 800ad3c:	18bd      	adds	r5, r7, r2
 800ad3e:	9b08      	ldr	r3, [sp, #32]
 800ad40:	42af      	cmp	r7, r5
 800ad42:	4416      	add	r6, r2
 800ad44:	441e      	add	r6, r3
 800ad46:	463b      	mov	r3, r7
 800ad48:	bfa8      	it	ge
 800ad4a:	462b      	movge	r3, r5
 800ad4c:	42b3      	cmp	r3, r6
 800ad4e:	bfa8      	it	ge
 800ad50:	4633      	movge	r3, r6
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	bfc2      	ittt	gt
 800ad56:	1aed      	subgt	r5, r5, r3
 800ad58:	1af6      	subgt	r6, r6, r3
 800ad5a:	1aff      	subgt	r7, r7, r3
 800ad5c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	dd16      	ble.n	800ad90 <_strtod_l+0x738>
 800ad62:	4641      	mov	r1, r8
 800ad64:	461a      	mov	r2, r3
 800ad66:	9805      	ldr	r0, [sp, #20]
 800ad68:	f001 fb74 	bl	800c454 <__pow5mult>
 800ad6c:	4680      	mov	r8, r0
 800ad6e:	2800      	cmp	r0, #0
 800ad70:	d0b7      	beq.n	800ace2 <_strtod_l+0x68a>
 800ad72:	4601      	mov	r1, r0
 800ad74:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ad76:	9805      	ldr	r0, [sp, #20]
 800ad78:	f001 fac4 	bl	800c304 <__multiply>
 800ad7c:	900e      	str	r0, [sp, #56]	@ 0x38
 800ad7e:	2800      	cmp	r0, #0
 800ad80:	f43f ae85 	beq.w	800aa8e <_strtod_l+0x436>
 800ad84:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ad86:	9805      	ldr	r0, [sp, #20]
 800ad88:	f001 f9a8 	bl	800c0dc <_Bfree>
 800ad8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ad8e:	931a      	str	r3, [sp, #104]	@ 0x68
 800ad90:	2d00      	cmp	r5, #0
 800ad92:	dc1d      	bgt.n	800add0 <_strtod_l+0x778>
 800ad94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	dd23      	ble.n	800ade2 <_strtod_l+0x78a>
 800ad9a:	4649      	mov	r1, r9
 800ad9c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ad9e:	9805      	ldr	r0, [sp, #20]
 800ada0:	f001 fb58 	bl	800c454 <__pow5mult>
 800ada4:	4681      	mov	r9, r0
 800ada6:	b9e0      	cbnz	r0, 800ade2 <_strtod_l+0x78a>
 800ada8:	f04f 0900 	mov.w	r9, #0
 800adac:	e66f      	b.n	800aa8e <_strtod_l+0x436>
 800adae:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800adb2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800adb6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800adba:	35e2      	adds	r5, #226	@ 0xe2
 800adbc:	fa01 f305 	lsl.w	r3, r1, r5
 800adc0:	9310      	str	r3, [sp, #64]	@ 0x40
 800adc2:	9113      	str	r1, [sp, #76]	@ 0x4c
 800adc4:	e7ba      	b.n	800ad3c <_strtod_l+0x6e4>
 800adc6:	2300      	movs	r3, #0
 800adc8:	9310      	str	r3, [sp, #64]	@ 0x40
 800adca:	2301      	movs	r3, #1
 800adcc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800adce:	e7b5      	b.n	800ad3c <_strtod_l+0x6e4>
 800add0:	462a      	mov	r2, r5
 800add2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800add4:	9805      	ldr	r0, [sp, #20]
 800add6:	f001 fb97 	bl	800c508 <__lshift>
 800adda:	901a      	str	r0, [sp, #104]	@ 0x68
 800addc:	2800      	cmp	r0, #0
 800adde:	d1d9      	bne.n	800ad94 <_strtod_l+0x73c>
 800ade0:	e655      	b.n	800aa8e <_strtod_l+0x436>
 800ade2:	2e00      	cmp	r6, #0
 800ade4:	dd07      	ble.n	800adf6 <_strtod_l+0x79e>
 800ade6:	4649      	mov	r1, r9
 800ade8:	4632      	mov	r2, r6
 800adea:	9805      	ldr	r0, [sp, #20]
 800adec:	f001 fb8c 	bl	800c508 <__lshift>
 800adf0:	4681      	mov	r9, r0
 800adf2:	2800      	cmp	r0, #0
 800adf4:	d0d8      	beq.n	800ada8 <_strtod_l+0x750>
 800adf6:	2f00      	cmp	r7, #0
 800adf8:	dd08      	ble.n	800ae0c <_strtod_l+0x7b4>
 800adfa:	4641      	mov	r1, r8
 800adfc:	463a      	mov	r2, r7
 800adfe:	9805      	ldr	r0, [sp, #20]
 800ae00:	f001 fb82 	bl	800c508 <__lshift>
 800ae04:	4680      	mov	r8, r0
 800ae06:	2800      	cmp	r0, #0
 800ae08:	f43f ae41 	beq.w	800aa8e <_strtod_l+0x436>
 800ae0c:	464a      	mov	r2, r9
 800ae0e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ae10:	9805      	ldr	r0, [sp, #20]
 800ae12:	f001 fc01 	bl	800c618 <__mdiff>
 800ae16:	4604      	mov	r4, r0
 800ae18:	2800      	cmp	r0, #0
 800ae1a:	f43f ae38 	beq.w	800aa8e <_strtod_l+0x436>
 800ae1e:	68c3      	ldr	r3, [r0, #12]
 800ae20:	4641      	mov	r1, r8
 800ae22:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ae24:	2300      	movs	r3, #0
 800ae26:	60c3      	str	r3, [r0, #12]
 800ae28:	f001 fbda 	bl	800c5e0 <__mcmp>
 800ae2c:	2800      	cmp	r0, #0
 800ae2e:	da45      	bge.n	800aebc <_strtod_l+0x864>
 800ae30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae32:	ea53 030a 	orrs.w	r3, r3, sl
 800ae36:	d16b      	bne.n	800af10 <_strtod_l+0x8b8>
 800ae38:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d167      	bne.n	800af10 <_strtod_l+0x8b8>
 800ae40:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ae44:	0d1b      	lsrs	r3, r3, #20
 800ae46:	051b      	lsls	r3, r3, #20
 800ae48:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ae4c:	d960      	bls.n	800af10 <_strtod_l+0x8b8>
 800ae4e:	6963      	ldr	r3, [r4, #20]
 800ae50:	b913      	cbnz	r3, 800ae58 <_strtod_l+0x800>
 800ae52:	6923      	ldr	r3, [r4, #16]
 800ae54:	2b01      	cmp	r3, #1
 800ae56:	dd5b      	ble.n	800af10 <_strtod_l+0x8b8>
 800ae58:	4621      	mov	r1, r4
 800ae5a:	2201      	movs	r2, #1
 800ae5c:	9805      	ldr	r0, [sp, #20]
 800ae5e:	f001 fb53 	bl	800c508 <__lshift>
 800ae62:	4641      	mov	r1, r8
 800ae64:	4604      	mov	r4, r0
 800ae66:	f001 fbbb 	bl	800c5e0 <__mcmp>
 800ae6a:	2800      	cmp	r0, #0
 800ae6c:	dd50      	ble.n	800af10 <_strtod_l+0x8b8>
 800ae6e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ae72:	9a08      	ldr	r2, [sp, #32]
 800ae74:	0d1b      	lsrs	r3, r3, #20
 800ae76:	051b      	lsls	r3, r3, #20
 800ae78:	2a00      	cmp	r2, #0
 800ae7a:	d06a      	beq.n	800af52 <_strtod_l+0x8fa>
 800ae7c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ae80:	d867      	bhi.n	800af52 <_strtod_l+0x8fa>
 800ae82:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800ae86:	f67f ae98 	bls.w	800abba <_strtod_l+0x562>
 800ae8a:	4650      	mov	r0, sl
 800ae8c:	4659      	mov	r1, fp
 800ae8e:	4b09      	ldr	r3, [pc, #36]	@ (800aeb4 <_strtod_l+0x85c>)
 800ae90:	2200      	movs	r2, #0
 800ae92:	f7f5 fb23 	bl	80004dc <__aeabi_dmul>
 800ae96:	4b08      	ldr	r3, [pc, #32]	@ (800aeb8 <_strtod_l+0x860>)
 800ae98:	4682      	mov	sl, r0
 800ae9a:	400b      	ands	r3, r1
 800ae9c:	468b      	mov	fp, r1
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	f47f ae00 	bne.w	800aaa4 <_strtod_l+0x44c>
 800aea4:	2322      	movs	r3, #34	@ 0x22
 800aea6:	9a05      	ldr	r2, [sp, #20]
 800aea8:	6013      	str	r3, [r2, #0]
 800aeaa:	e5fb      	b.n	800aaa4 <_strtod_l+0x44c>
 800aeac:	0800d9c0 	.word	0x0800d9c0
 800aeb0:	fffffc02 	.word	0xfffffc02
 800aeb4:	39500000 	.word	0x39500000
 800aeb8:	7ff00000 	.word	0x7ff00000
 800aebc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800aec0:	d165      	bne.n	800af8e <_strtod_l+0x936>
 800aec2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800aec4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aec8:	b35a      	cbz	r2, 800af22 <_strtod_l+0x8ca>
 800aeca:	4a99      	ldr	r2, [pc, #612]	@ (800b130 <_strtod_l+0xad8>)
 800aecc:	4293      	cmp	r3, r2
 800aece:	d12b      	bne.n	800af28 <_strtod_l+0x8d0>
 800aed0:	9b08      	ldr	r3, [sp, #32]
 800aed2:	4651      	mov	r1, sl
 800aed4:	b303      	cbz	r3, 800af18 <_strtod_l+0x8c0>
 800aed6:	465a      	mov	r2, fp
 800aed8:	4b96      	ldr	r3, [pc, #600]	@ (800b134 <_strtod_l+0xadc>)
 800aeda:	4013      	ands	r3, r2
 800aedc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800aee0:	f04f 32ff 	mov.w	r2, #4294967295
 800aee4:	d81b      	bhi.n	800af1e <_strtod_l+0x8c6>
 800aee6:	0d1b      	lsrs	r3, r3, #20
 800aee8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800aeec:	fa02 f303 	lsl.w	r3, r2, r3
 800aef0:	4299      	cmp	r1, r3
 800aef2:	d119      	bne.n	800af28 <_strtod_l+0x8d0>
 800aef4:	4b90      	ldr	r3, [pc, #576]	@ (800b138 <_strtod_l+0xae0>)
 800aef6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aef8:	429a      	cmp	r2, r3
 800aefa:	d102      	bne.n	800af02 <_strtod_l+0x8aa>
 800aefc:	3101      	adds	r1, #1
 800aefe:	f43f adc6 	beq.w	800aa8e <_strtod_l+0x436>
 800af02:	f04f 0a00 	mov.w	sl, #0
 800af06:	4b8b      	ldr	r3, [pc, #556]	@ (800b134 <_strtod_l+0xadc>)
 800af08:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800af0a:	401a      	ands	r2, r3
 800af0c:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800af10:	9b08      	ldr	r3, [sp, #32]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d1b9      	bne.n	800ae8a <_strtod_l+0x832>
 800af16:	e5c5      	b.n	800aaa4 <_strtod_l+0x44c>
 800af18:	f04f 33ff 	mov.w	r3, #4294967295
 800af1c:	e7e8      	b.n	800aef0 <_strtod_l+0x898>
 800af1e:	4613      	mov	r3, r2
 800af20:	e7e6      	b.n	800aef0 <_strtod_l+0x898>
 800af22:	ea53 030a 	orrs.w	r3, r3, sl
 800af26:	d0a2      	beq.n	800ae6e <_strtod_l+0x816>
 800af28:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800af2a:	b1db      	cbz	r3, 800af64 <_strtod_l+0x90c>
 800af2c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800af2e:	4213      	tst	r3, r2
 800af30:	d0ee      	beq.n	800af10 <_strtod_l+0x8b8>
 800af32:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af34:	4650      	mov	r0, sl
 800af36:	4659      	mov	r1, fp
 800af38:	9a08      	ldr	r2, [sp, #32]
 800af3a:	b1bb      	cbz	r3, 800af6c <_strtod_l+0x914>
 800af3c:	f7ff fb6a 	bl	800a614 <sulp>
 800af40:	4602      	mov	r2, r0
 800af42:	460b      	mov	r3, r1
 800af44:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800af48:	f7f5 f912 	bl	8000170 <__adddf3>
 800af4c:	4682      	mov	sl, r0
 800af4e:	468b      	mov	fp, r1
 800af50:	e7de      	b.n	800af10 <_strtod_l+0x8b8>
 800af52:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800af56:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800af5a:	f04f 3aff 	mov.w	sl, #4294967295
 800af5e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800af62:	e7d5      	b.n	800af10 <_strtod_l+0x8b8>
 800af64:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800af66:	ea13 0f0a 	tst.w	r3, sl
 800af6a:	e7e1      	b.n	800af30 <_strtod_l+0x8d8>
 800af6c:	f7ff fb52 	bl	800a614 <sulp>
 800af70:	4602      	mov	r2, r0
 800af72:	460b      	mov	r3, r1
 800af74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800af78:	f7f5 f8f8 	bl	800016c <__aeabi_dsub>
 800af7c:	2200      	movs	r2, #0
 800af7e:	2300      	movs	r3, #0
 800af80:	4682      	mov	sl, r0
 800af82:	468b      	mov	fp, r1
 800af84:	f7f5 fd12 	bl	80009ac <__aeabi_dcmpeq>
 800af88:	2800      	cmp	r0, #0
 800af8a:	d0c1      	beq.n	800af10 <_strtod_l+0x8b8>
 800af8c:	e615      	b.n	800abba <_strtod_l+0x562>
 800af8e:	4641      	mov	r1, r8
 800af90:	4620      	mov	r0, r4
 800af92:	f001 fc95 	bl	800c8c0 <__ratio>
 800af96:	2200      	movs	r2, #0
 800af98:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800af9c:	4606      	mov	r6, r0
 800af9e:	460f      	mov	r7, r1
 800afa0:	f7f5 fd18 	bl	80009d4 <__aeabi_dcmple>
 800afa4:	2800      	cmp	r0, #0
 800afa6:	d06d      	beq.n	800b084 <_strtod_l+0xa2c>
 800afa8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d178      	bne.n	800b0a0 <_strtod_l+0xa48>
 800afae:	f1ba 0f00 	cmp.w	sl, #0
 800afb2:	d156      	bne.n	800b062 <_strtod_l+0xa0a>
 800afb4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800afb6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d158      	bne.n	800b070 <_strtod_l+0xa18>
 800afbe:	2200      	movs	r2, #0
 800afc0:	4630      	mov	r0, r6
 800afc2:	4639      	mov	r1, r7
 800afc4:	4b5d      	ldr	r3, [pc, #372]	@ (800b13c <_strtod_l+0xae4>)
 800afc6:	f7f5 fcfb 	bl	80009c0 <__aeabi_dcmplt>
 800afca:	2800      	cmp	r0, #0
 800afcc:	d157      	bne.n	800b07e <_strtod_l+0xa26>
 800afce:	4630      	mov	r0, r6
 800afd0:	4639      	mov	r1, r7
 800afd2:	2200      	movs	r2, #0
 800afd4:	4b5a      	ldr	r3, [pc, #360]	@ (800b140 <_strtod_l+0xae8>)
 800afd6:	f7f5 fa81 	bl	80004dc <__aeabi_dmul>
 800afda:	4606      	mov	r6, r0
 800afdc:	460f      	mov	r7, r1
 800afde:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800afe2:	9606      	str	r6, [sp, #24]
 800afe4:	9307      	str	r3, [sp, #28]
 800afe6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800afea:	4d52      	ldr	r5, [pc, #328]	@ (800b134 <_strtod_l+0xadc>)
 800afec:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800aff0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aff2:	401d      	ands	r5, r3
 800aff4:	4b53      	ldr	r3, [pc, #332]	@ (800b144 <_strtod_l+0xaec>)
 800aff6:	429d      	cmp	r5, r3
 800aff8:	f040 80aa 	bne.w	800b150 <_strtod_l+0xaf8>
 800affc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800affe:	4650      	mov	r0, sl
 800b000:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b004:	4659      	mov	r1, fp
 800b006:	f001 fb9b 	bl	800c740 <__ulp>
 800b00a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b00e:	f7f5 fa65 	bl	80004dc <__aeabi_dmul>
 800b012:	4652      	mov	r2, sl
 800b014:	465b      	mov	r3, fp
 800b016:	f7f5 f8ab 	bl	8000170 <__adddf3>
 800b01a:	460b      	mov	r3, r1
 800b01c:	4945      	ldr	r1, [pc, #276]	@ (800b134 <_strtod_l+0xadc>)
 800b01e:	4a4a      	ldr	r2, [pc, #296]	@ (800b148 <_strtod_l+0xaf0>)
 800b020:	4019      	ands	r1, r3
 800b022:	4291      	cmp	r1, r2
 800b024:	4682      	mov	sl, r0
 800b026:	d942      	bls.n	800b0ae <_strtod_l+0xa56>
 800b028:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b02a:	4b43      	ldr	r3, [pc, #268]	@ (800b138 <_strtod_l+0xae0>)
 800b02c:	429a      	cmp	r2, r3
 800b02e:	d103      	bne.n	800b038 <_strtod_l+0x9e0>
 800b030:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b032:	3301      	adds	r3, #1
 800b034:	f43f ad2b 	beq.w	800aa8e <_strtod_l+0x436>
 800b038:	f04f 3aff 	mov.w	sl, #4294967295
 800b03c:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 800b138 <_strtod_l+0xae0>
 800b040:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b042:	9805      	ldr	r0, [sp, #20]
 800b044:	f001 f84a 	bl	800c0dc <_Bfree>
 800b048:	4649      	mov	r1, r9
 800b04a:	9805      	ldr	r0, [sp, #20]
 800b04c:	f001 f846 	bl	800c0dc <_Bfree>
 800b050:	4641      	mov	r1, r8
 800b052:	9805      	ldr	r0, [sp, #20]
 800b054:	f001 f842 	bl	800c0dc <_Bfree>
 800b058:	4621      	mov	r1, r4
 800b05a:	9805      	ldr	r0, [sp, #20]
 800b05c:	f001 f83e 	bl	800c0dc <_Bfree>
 800b060:	e618      	b.n	800ac94 <_strtod_l+0x63c>
 800b062:	f1ba 0f01 	cmp.w	sl, #1
 800b066:	d103      	bne.n	800b070 <_strtod_l+0xa18>
 800b068:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	f43f ada5 	beq.w	800abba <_strtod_l+0x562>
 800b070:	2200      	movs	r2, #0
 800b072:	4b36      	ldr	r3, [pc, #216]	@ (800b14c <_strtod_l+0xaf4>)
 800b074:	2600      	movs	r6, #0
 800b076:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b07a:	4f30      	ldr	r7, [pc, #192]	@ (800b13c <_strtod_l+0xae4>)
 800b07c:	e7b3      	b.n	800afe6 <_strtod_l+0x98e>
 800b07e:	2600      	movs	r6, #0
 800b080:	4f2f      	ldr	r7, [pc, #188]	@ (800b140 <_strtod_l+0xae8>)
 800b082:	e7ac      	b.n	800afde <_strtod_l+0x986>
 800b084:	4630      	mov	r0, r6
 800b086:	4639      	mov	r1, r7
 800b088:	4b2d      	ldr	r3, [pc, #180]	@ (800b140 <_strtod_l+0xae8>)
 800b08a:	2200      	movs	r2, #0
 800b08c:	f7f5 fa26 	bl	80004dc <__aeabi_dmul>
 800b090:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b092:	4606      	mov	r6, r0
 800b094:	460f      	mov	r7, r1
 800b096:	2b00      	cmp	r3, #0
 800b098:	d0a1      	beq.n	800afde <_strtod_l+0x986>
 800b09a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b09e:	e7a2      	b.n	800afe6 <_strtod_l+0x98e>
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	4b26      	ldr	r3, [pc, #152]	@ (800b13c <_strtod_l+0xae4>)
 800b0a4:	4616      	mov	r6, r2
 800b0a6:	461f      	mov	r7, r3
 800b0a8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b0ac:	e79b      	b.n	800afe6 <_strtod_l+0x98e>
 800b0ae:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b0b2:	9b08      	ldr	r3, [sp, #32]
 800b0b4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d1c1      	bne.n	800b040 <_strtod_l+0x9e8>
 800b0bc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b0c0:	0d1b      	lsrs	r3, r3, #20
 800b0c2:	051b      	lsls	r3, r3, #20
 800b0c4:	429d      	cmp	r5, r3
 800b0c6:	d1bb      	bne.n	800b040 <_strtod_l+0x9e8>
 800b0c8:	4630      	mov	r0, r6
 800b0ca:	4639      	mov	r1, r7
 800b0cc:	f7f5 fdb2 	bl	8000c34 <__aeabi_d2lz>
 800b0d0:	f7f5 f9d6 	bl	8000480 <__aeabi_l2d>
 800b0d4:	4602      	mov	r2, r0
 800b0d6:	460b      	mov	r3, r1
 800b0d8:	4630      	mov	r0, r6
 800b0da:	4639      	mov	r1, r7
 800b0dc:	f7f5 f846 	bl	800016c <__aeabi_dsub>
 800b0e0:	460b      	mov	r3, r1
 800b0e2:	4602      	mov	r2, r0
 800b0e4:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b0e8:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b0ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b0ee:	ea46 060a 	orr.w	r6, r6, sl
 800b0f2:	431e      	orrs	r6, r3
 800b0f4:	d069      	beq.n	800b1ca <_strtod_l+0xb72>
 800b0f6:	a30a      	add	r3, pc, #40	@ (adr r3, 800b120 <_strtod_l+0xac8>)
 800b0f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0fc:	f7f5 fc60 	bl	80009c0 <__aeabi_dcmplt>
 800b100:	2800      	cmp	r0, #0
 800b102:	f47f accf 	bne.w	800aaa4 <_strtod_l+0x44c>
 800b106:	a308      	add	r3, pc, #32	@ (adr r3, 800b128 <_strtod_l+0xad0>)
 800b108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b10c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b110:	f7f5 fc74 	bl	80009fc <__aeabi_dcmpgt>
 800b114:	2800      	cmp	r0, #0
 800b116:	d093      	beq.n	800b040 <_strtod_l+0x9e8>
 800b118:	e4c4      	b.n	800aaa4 <_strtod_l+0x44c>
 800b11a:	bf00      	nop
 800b11c:	f3af 8000 	nop.w
 800b120:	94a03595 	.word	0x94a03595
 800b124:	3fdfffff 	.word	0x3fdfffff
 800b128:	35afe535 	.word	0x35afe535
 800b12c:	3fe00000 	.word	0x3fe00000
 800b130:	000fffff 	.word	0x000fffff
 800b134:	7ff00000 	.word	0x7ff00000
 800b138:	7fefffff 	.word	0x7fefffff
 800b13c:	3ff00000 	.word	0x3ff00000
 800b140:	3fe00000 	.word	0x3fe00000
 800b144:	7fe00000 	.word	0x7fe00000
 800b148:	7c9fffff 	.word	0x7c9fffff
 800b14c:	bff00000 	.word	0xbff00000
 800b150:	9b08      	ldr	r3, [sp, #32]
 800b152:	b323      	cbz	r3, 800b19e <_strtod_l+0xb46>
 800b154:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b158:	d821      	bhi.n	800b19e <_strtod_l+0xb46>
 800b15a:	a327      	add	r3, pc, #156	@ (adr r3, 800b1f8 <_strtod_l+0xba0>)
 800b15c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b160:	4630      	mov	r0, r6
 800b162:	4639      	mov	r1, r7
 800b164:	f7f5 fc36 	bl	80009d4 <__aeabi_dcmple>
 800b168:	b1a0      	cbz	r0, 800b194 <_strtod_l+0xb3c>
 800b16a:	4639      	mov	r1, r7
 800b16c:	4630      	mov	r0, r6
 800b16e:	f7f5 fc65 	bl	8000a3c <__aeabi_d2uiz>
 800b172:	2801      	cmp	r0, #1
 800b174:	bf38      	it	cc
 800b176:	2001      	movcc	r0, #1
 800b178:	f7f5 f936 	bl	80003e8 <__aeabi_ui2d>
 800b17c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b17e:	4606      	mov	r6, r0
 800b180:	460f      	mov	r7, r1
 800b182:	b9fb      	cbnz	r3, 800b1c4 <_strtod_l+0xb6c>
 800b184:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b188:	9014      	str	r0, [sp, #80]	@ 0x50
 800b18a:	9315      	str	r3, [sp, #84]	@ 0x54
 800b18c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b190:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b194:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b196:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b19a:	1b5b      	subs	r3, r3, r5
 800b19c:	9311      	str	r3, [sp, #68]	@ 0x44
 800b19e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b1a2:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b1a6:	f001 facb 	bl	800c740 <__ulp>
 800b1aa:	4602      	mov	r2, r0
 800b1ac:	460b      	mov	r3, r1
 800b1ae:	4650      	mov	r0, sl
 800b1b0:	4659      	mov	r1, fp
 800b1b2:	f7f5 f993 	bl	80004dc <__aeabi_dmul>
 800b1b6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b1ba:	f7f4 ffd9 	bl	8000170 <__adddf3>
 800b1be:	4682      	mov	sl, r0
 800b1c0:	468b      	mov	fp, r1
 800b1c2:	e776      	b.n	800b0b2 <_strtod_l+0xa5a>
 800b1c4:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b1c8:	e7e0      	b.n	800b18c <_strtod_l+0xb34>
 800b1ca:	a30d      	add	r3, pc, #52	@ (adr r3, 800b200 <_strtod_l+0xba8>)
 800b1cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1d0:	f7f5 fbf6 	bl	80009c0 <__aeabi_dcmplt>
 800b1d4:	e79e      	b.n	800b114 <_strtod_l+0xabc>
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b1da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b1dc:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b1de:	6013      	str	r3, [r2, #0]
 800b1e0:	f7ff ba77 	b.w	800a6d2 <_strtod_l+0x7a>
 800b1e4:	2a65      	cmp	r2, #101	@ 0x65
 800b1e6:	f43f ab6e 	beq.w	800a8c6 <_strtod_l+0x26e>
 800b1ea:	2a45      	cmp	r2, #69	@ 0x45
 800b1ec:	f43f ab6b 	beq.w	800a8c6 <_strtod_l+0x26e>
 800b1f0:	2301      	movs	r3, #1
 800b1f2:	f7ff bba6 	b.w	800a942 <_strtod_l+0x2ea>
 800b1f6:	bf00      	nop
 800b1f8:	ffc00000 	.word	0xffc00000
 800b1fc:	41dfffff 	.word	0x41dfffff
 800b200:	94a03595 	.word	0x94a03595
 800b204:	3fcfffff 	.word	0x3fcfffff

0800b208 <strtof>:
 800b208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b20c:	4d24      	ldr	r5, [pc, #144]	@ (800b2a0 <strtof+0x98>)
 800b20e:	460a      	mov	r2, r1
 800b210:	4b24      	ldr	r3, [pc, #144]	@ (800b2a4 <strtof+0x9c>)
 800b212:	4601      	mov	r1, r0
 800b214:	6828      	ldr	r0, [r5, #0]
 800b216:	f7ff fa1f 	bl	800a658 <_strtod_l>
 800b21a:	4602      	mov	r2, r0
 800b21c:	460b      	mov	r3, r1
 800b21e:	4606      	mov	r6, r0
 800b220:	460f      	mov	r7, r1
 800b222:	f7f5 fbf5 	bl	8000a10 <__aeabi_dcmpun>
 800b226:	b168      	cbz	r0, 800b244 <strtof+0x3c>
 800b228:	2f00      	cmp	r7, #0
 800b22a:	481f      	ldr	r0, [pc, #124]	@ (800b2a8 <strtof+0xa0>)
 800b22c:	da06      	bge.n	800b23c <strtof+0x34>
 800b22e:	f000 facf 	bl	800b7d0 <nanf>
 800b232:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 800b236:	4620      	mov	r0, r4
 800b238:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b23c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b240:	f000 bac6 	b.w	800b7d0 <nanf>
 800b244:	4639      	mov	r1, r7
 800b246:	4630      	mov	r0, r6
 800b248:	f7f5 fc18 	bl	8000a7c <__aeabi_d2f>
 800b24c:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 800b250:	4604      	mov	r4, r0
 800b252:	4916      	ldr	r1, [pc, #88]	@ (800b2ac <strtof+0xa4>)
 800b254:	4640      	mov	r0, r8
 800b256:	f7f5 fcd7 	bl	8000c08 <__aeabi_fcmpun>
 800b25a:	b9b0      	cbnz	r0, 800b28a <strtof+0x82>
 800b25c:	4640      	mov	r0, r8
 800b25e:	4913      	ldr	r1, [pc, #76]	@ (800b2ac <strtof+0xa4>)
 800b260:	f7f5 fcb4 	bl	8000bcc <__aeabi_fcmple>
 800b264:	b988      	cbnz	r0, 800b28a <strtof+0x82>
 800b266:	f027 4900 	bic.w	r9, r7, #2147483648	@ 0x80000000
 800b26a:	f04f 32ff 	mov.w	r2, #4294967295
 800b26e:	4630      	mov	r0, r6
 800b270:	4649      	mov	r1, r9
 800b272:	4b0f      	ldr	r3, [pc, #60]	@ (800b2b0 <strtof+0xa8>)
 800b274:	f7f5 fbcc 	bl	8000a10 <__aeabi_dcmpun>
 800b278:	b970      	cbnz	r0, 800b298 <strtof+0x90>
 800b27a:	f04f 32ff 	mov.w	r2, #4294967295
 800b27e:	4630      	mov	r0, r6
 800b280:	4649      	mov	r1, r9
 800b282:	4b0b      	ldr	r3, [pc, #44]	@ (800b2b0 <strtof+0xa8>)
 800b284:	f7f5 fba6 	bl	80009d4 <__aeabi_dcmple>
 800b288:	b930      	cbnz	r0, 800b298 <strtof+0x90>
 800b28a:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 800b28e:	d1d2      	bne.n	800b236 <strtof+0x2e>
 800b290:	4b08      	ldr	r3, [pc, #32]	@ (800b2b4 <strtof+0xac>)
 800b292:	403b      	ands	r3, r7
 800b294:	2b00      	cmp	r3, #0
 800b296:	d0ce      	beq.n	800b236 <strtof+0x2e>
 800b298:	2222      	movs	r2, #34	@ 0x22
 800b29a:	682b      	ldr	r3, [r5, #0]
 800b29c:	601a      	str	r2, [r3, #0]
 800b29e:	e7ca      	b.n	800b236 <strtof+0x2e>
 800b2a0:	200002e0 	.word	0x200002e0
 800b2a4:	20000174 	.word	0x20000174
 800b2a8:	0800dd3e 	.word	0x0800dd3e
 800b2ac:	7f7fffff 	.word	0x7f7fffff
 800b2b0:	7fefffff 	.word	0x7fefffff
 800b2b4:	7ff00000 	.word	0x7ff00000

0800b2b8 <_strtoul_l.constprop.0>:
 800b2b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b2bc:	4686      	mov	lr, r0
 800b2be:	460d      	mov	r5, r1
 800b2c0:	4e33      	ldr	r6, [pc, #204]	@ (800b390 <_strtoul_l.constprop.0+0xd8>)
 800b2c2:	4628      	mov	r0, r5
 800b2c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b2c8:	5d37      	ldrb	r7, [r6, r4]
 800b2ca:	f017 0708 	ands.w	r7, r7, #8
 800b2ce:	d1f8      	bne.n	800b2c2 <_strtoul_l.constprop.0+0xa>
 800b2d0:	2c2d      	cmp	r4, #45	@ 0x2d
 800b2d2:	d12f      	bne.n	800b334 <_strtoul_l.constprop.0+0x7c>
 800b2d4:	2701      	movs	r7, #1
 800b2d6:	782c      	ldrb	r4, [r5, #0]
 800b2d8:	1c85      	adds	r5, r0, #2
 800b2da:	f033 0010 	bics.w	r0, r3, #16
 800b2de:	d109      	bne.n	800b2f4 <_strtoul_l.constprop.0+0x3c>
 800b2e0:	2c30      	cmp	r4, #48	@ 0x30
 800b2e2:	d12c      	bne.n	800b33e <_strtoul_l.constprop.0+0x86>
 800b2e4:	7828      	ldrb	r0, [r5, #0]
 800b2e6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800b2ea:	2858      	cmp	r0, #88	@ 0x58
 800b2ec:	d127      	bne.n	800b33e <_strtoul_l.constprop.0+0x86>
 800b2ee:	2310      	movs	r3, #16
 800b2f0:	786c      	ldrb	r4, [r5, #1]
 800b2f2:	3502      	adds	r5, #2
 800b2f4:	f04f 38ff 	mov.w	r8, #4294967295
 800b2f8:	fbb8 f8f3 	udiv	r8, r8, r3
 800b2fc:	2600      	movs	r6, #0
 800b2fe:	fb03 f908 	mul.w	r9, r3, r8
 800b302:	4630      	mov	r0, r6
 800b304:	ea6f 0909 	mvn.w	r9, r9
 800b308:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800b30c:	f1bc 0f09 	cmp.w	ip, #9
 800b310:	d81c      	bhi.n	800b34c <_strtoul_l.constprop.0+0x94>
 800b312:	4664      	mov	r4, ip
 800b314:	42a3      	cmp	r3, r4
 800b316:	dd2a      	ble.n	800b36e <_strtoul_l.constprop.0+0xb6>
 800b318:	f1b6 3fff 	cmp.w	r6, #4294967295
 800b31c:	d007      	beq.n	800b32e <_strtoul_l.constprop.0+0x76>
 800b31e:	4580      	cmp	r8, r0
 800b320:	d322      	bcc.n	800b368 <_strtoul_l.constprop.0+0xb0>
 800b322:	d101      	bne.n	800b328 <_strtoul_l.constprop.0+0x70>
 800b324:	45a1      	cmp	r9, r4
 800b326:	db1f      	blt.n	800b368 <_strtoul_l.constprop.0+0xb0>
 800b328:	2601      	movs	r6, #1
 800b32a:	fb00 4003 	mla	r0, r0, r3, r4
 800b32e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b332:	e7e9      	b.n	800b308 <_strtoul_l.constprop.0+0x50>
 800b334:	2c2b      	cmp	r4, #43	@ 0x2b
 800b336:	bf04      	itt	eq
 800b338:	782c      	ldrbeq	r4, [r5, #0]
 800b33a:	1c85      	addeq	r5, r0, #2
 800b33c:	e7cd      	b.n	800b2da <_strtoul_l.constprop.0+0x22>
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d1d8      	bne.n	800b2f4 <_strtoul_l.constprop.0+0x3c>
 800b342:	2c30      	cmp	r4, #48	@ 0x30
 800b344:	bf0c      	ite	eq
 800b346:	2308      	moveq	r3, #8
 800b348:	230a      	movne	r3, #10
 800b34a:	e7d3      	b.n	800b2f4 <_strtoul_l.constprop.0+0x3c>
 800b34c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800b350:	f1bc 0f19 	cmp.w	ip, #25
 800b354:	d801      	bhi.n	800b35a <_strtoul_l.constprop.0+0xa2>
 800b356:	3c37      	subs	r4, #55	@ 0x37
 800b358:	e7dc      	b.n	800b314 <_strtoul_l.constprop.0+0x5c>
 800b35a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800b35e:	f1bc 0f19 	cmp.w	ip, #25
 800b362:	d804      	bhi.n	800b36e <_strtoul_l.constprop.0+0xb6>
 800b364:	3c57      	subs	r4, #87	@ 0x57
 800b366:	e7d5      	b.n	800b314 <_strtoul_l.constprop.0+0x5c>
 800b368:	f04f 36ff 	mov.w	r6, #4294967295
 800b36c:	e7df      	b.n	800b32e <_strtoul_l.constprop.0+0x76>
 800b36e:	1c73      	adds	r3, r6, #1
 800b370:	d106      	bne.n	800b380 <_strtoul_l.constprop.0+0xc8>
 800b372:	2322      	movs	r3, #34	@ 0x22
 800b374:	4630      	mov	r0, r6
 800b376:	f8ce 3000 	str.w	r3, [lr]
 800b37a:	b932      	cbnz	r2, 800b38a <_strtoul_l.constprop.0+0xd2>
 800b37c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b380:	b107      	cbz	r7, 800b384 <_strtoul_l.constprop.0+0xcc>
 800b382:	4240      	negs	r0, r0
 800b384:	2a00      	cmp	r2, #0
 800b386:	d0f9      	beq.n	800b37c <_strtoul_l.constprop.0+0xc4>
 800b388:	b106      	cbz	r6, 800b38c <_strtoul_l.constprop.0+0xd4>
 800b38a:	1e69      	subs	r1, r5, #1
 800b38c:	6011      	str	r1, [r2, #0]
 800b38e:	e7f5      	b.n	800b37c <_strtoul_l.constprop.0+0xc4>
 800b390:	0800d9e9 	.word	0x0800d9e9

0800b394 <strtoul>:
 800b394:	4613      	mov	r3, r2
 800b396:	460a      	mov	r2, r1
 800b398:	4601      	mov	r1, r0
 800b39a:	4802      	ldr	r0, [pc, #8]	@ (800b3a4 <strtoul+0x10>)
 800b39c:	6800      	ldr	r0, [r0, #0]
 800b39e:	f7ff bf8b 	b.w	800b2b8 <_strtoul_l.constprop.0>
 800b3a2:	bf00      	nop
 800b3a4:	200002e0 	.word	0x200002e0

0800b3a8 <std>:
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	b510      	push	{r4, lr}
 800b3ac:	4604      	mov	r4, r0
 800b3ae:	e9c0 3300 	strd	r3, r3, [r0]
 800b3b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b3b6:	6083      	str	r3, [r0, #8]
 800b3b8:	8181      	strh	r1, [r0, #12]
 800b3ba:	6643      	str	r3, [r0, #100]	@ 0x64
 800b3bc:	81c2      	strh	r2, [r0, #14]
 800b3be:	6183      	str	r3, [r0, #24]
 800b3c0:	4619      	mov	r1, r3
 800b3c2:	2208      	movs	r2, #8
 800b3c4:	305c      	adds	r0, #92	@ 0x5c
 800b3c6:	f000 f92d 	bl	800b624 <memset>
 800b3ca:	4b0d      	ldr	r3, [pc, #52]	@ (800b400 <std+0x58>)
 800b3cc:	6224      	str	r4, [r4, #32]
 800b3ce:	6263      	str	r3, [r4, #36]	@ 0x24
 800b3d0:	4b0c      	ldr	r3, [pc, #48]	@ (800b404 <std+0x5c>)
 800b3d2:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b3d4:	4b0c      	ldr	r3, [pc, #48]	@ (800b408 <std+0x60>)
 800b3d6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b3d8:	4b0c      	ldr	r3, [pc, #48]	@ (800b40c <std+0x64>)
 800b3da:	6323      	str	r3, [r4, #48]	@ 0x30
 800b3dc:	4b0c      	ldr	r3, [pc, #48]	@ (800b410 <std+0x68>)
 800b3de:	429c      	cmp	r4, r3
 800b3e0:	d006      	beq.n	800b3f0 <std+0x48>
 800b3e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b3e6:	4294      	cmp	r4, r2
 800b3e8:	d002      	beq.n	800b3f0 <std+0x48>
 800b3ea:	33d0      	adds	r3, #208	@ 0xd0
 800b3ec:	429c      	cmp	r4, r3
 800b3ee:	d105      	bne.n	800b3fc <std+0x54>
 800b3f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b3f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3f8:	f000 b9ca 	b.w	800b790 <__retarget_lock_init_recursive>
 800b3fc:	bd10      	pop	{r4, pc}
 800b3fe:	bf00      	nop
 800b400:	0800b52d 	.word	0x0800b52d
 800b404:	0800b54f 	.word	0x0800b54f
 800b408:	0800b587 	.word	0x0800b587
 800b40c:	0800b5ab 	.word	0x0800b5ab
 800b410:	20001174 	.word	0x20001174

0800b414 <stdio_exit_handler>:
 800b414:	4a02      	ldr	r2, [pc, #8]	@ (800b420 <stdio_exit_handler+0xc>)
 800b416:	4903      	ldr	r1, [pc, #12]	@ (800b424 <stdio_exit_handler+0x10>)
 800b418:	4803      	ldr	r0, [pc, #12]	@ (800b428 <stdio_exit_handler+0x14>)
 800b41a:	f000 b869 	b.w	800b4f0 <_fwalk_sglue>
 800b41e:	bf00      	nop
 800b420:	20000168 	.word	0x20000168
 800b424:	0800d095 	.word	0x0800d095
 800b428:	200002e4 	.word	0x200002e4

0800b42c <cleanup_stdio>:
 800b42c:	6841      	ldr	r1, [r0, #4]
 800b42e:	4b0c      	ldr	r3, [pc, #48]	@ (800b460 <cleanup_stdio+0x34>)
 800b430:	b510      	push	{r4, lr}
 800b432:	4299      	cmp	r1, r3
 800b434:	4604      	mov	r4, r0
 800b436:	d001      	beq.n	800b43c <cleanup_stdio+0x10>
 800b438:	f001 fe2c 	bl	800d094 <_fflush_r>
 800b43c:	68a1      	ldr	r1, [r4, #8]
 800b43e:	4b09      	ldr	r3, [pc, #36]	@ (800b464 <cleanup_stdio+0x38>)
 800b440:	4299      	cmp	r1, r3
 800b442:	d002      	beq.n	800b44a <cleanup_stdio+0x1e>
 800b444:	4620      	mov	r0, r4
 800b446:	f001 fe25 	bl	800d094 <_fflush_r>
 800b44a:	68e1      	ldr	r1, [r4, #12]
 800b44c:	4b06      	ldr	r3, [pc, #24]	@ (800b468 <cleanup_stdio+0x3c>)
 800b44e:	4299      	cmp	r1, r3
 800b450:	d004      	beq.n	800b45c <cleanup_stdio+0x30>
 800b452:	4620      	mov	r0, r4
 800b454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b458:	f001 be1c 	b.w	800d094 <_fflush_r>
 800b45c:	bd10      	pop	{r4, pc}
 800b45e:	bf00      	nop
 800b460:	20001174 	.word	0x20001174
 800b464:	200011dc 	.word	0x200011dc
 800b468:	20001244 	.word	0x20001244

0800b46c <global_stdio_init.part.0>:
 800b46c:	b510      	push	{r4, lr}
 800b46e:	4b0b      	ldr	r3, [pc, #44]	@ (800b49c <global_stdio_init.part.0+0x30>)
 800b470:	4c0b      	ldr	r4, [pc, #44]	@ (800b4a0 <global_stdio_init.part.0+0x34>)
 800b472:	4a0c      	ldr	r2, [pc, #48]	@ (800b4a4 <global_stdio_init.part.0+0x38>)
 800b474:	4620      	mov	r0, r4
 800b476:	601a      	str	r2, [r3, #0]
 800b478:	2104      	movs	r1, #4
 800b47a:	2200      	movs	r2, #0
 800b47c:	f7ff ff94 	bl	800b3a8 <std>
 800b480:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b484:	2201      	movs	r2, #1
 800b486:	2109      	movs	r1, #9
 800b488:	f7ff ff8e 	bl	800b3a8 <std>
 800b48c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b490:	2202      	movs	r2, #2
 800b492:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b496:	2112      	movs	r1, #18
 800b498:	f7ff bf86 	b.w	800b3a8 <std>
 800b49c:	200012ac 	.word	0x200012ac
 800b4a0:	20001174 	.word	0x20001174
 800b4a4:	0800b415 	.word	0x0800b415

0800b4a8 <__sfp_lock_acquire>:
 800b4a8:	4801      	ldr	r0, [pc, #4]	@ (800b4b0 <__sfp_lock_acquire+0x8>)
 800b4aa:	f000 b972 	b.w	800b792 <__retarget_lock_acquire_recursive>
 800b4ae:	bf00      	nop
 800b4b0:	200012b5 	.word	0x200012b5

0800b4b4 <__sfp_lock_release>:
 800b4b4:	4801      	ldr	r0, [pc, #4]	@ (800b4bc <__sfp_lock_release+0x8>)
 800b4b6:	f000 b96d 	b.w	800b794 <__retarget_lock_release_recursive>
 800b4ba:	bf00      	nop
 800b4bc:	200012b5 	.word	0x200012b5

0800b4c0 <__sinit>:
 800b4c0:	b510      	push	{r4, lr}
 800b4c2:	4604      	mov	r4, r0
 800b4c4:	f7ff fff0 	bl	800b4a8 <__sfp_lock_acquire>
 800b4c8:	6a23      	ldr	r3, [r4, #32]
 800b4ca:	b11b      	cbz	r3, 800b4d4 <__sinit+0x14>
 800b4cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4d0:	f7ff bff0 	b.w	800b4b4 <__sfp_lock_release>
 800b4d4:	4b04      	ldr	r3, [pc, #16]	@ (800b4e8 <__sinit+0x28>)
 800b4d6:	6223      	str	r3, [r4, #32]
 800b4d8:	4b04      	ldr	r3, [pc, #16]	@ (800b4ec <__sinit+0x2c>)
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d1f5      	bne.n	800b4cc <__sinit+0xc>
 800b4e0:	f7ff ffc4 	bl	800b46c <global_stdio_init.part.0>
 800b4e4:	e7f2      	b.n	800b4cc <__sinit+0xc>
 800b4e6:	bf00      	nop
 800b4e8:	0800b42d 	.word	0x0800b42d
 800b4ec:	200012ac 	.word	0x200012ac

0800b4f0 <_fwalk_sglue>:
 800b4f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4f4:	4607      	mov	r7, r0
 800b4f6:	4688      	mov	r8, r1
 800b4f8:	4614      	mov	r4, r2
 800b4fa:	2600      	movs	r6, #0
 800b4fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b500:	f1b9 0901 	subs.w	r9, r9, #1
 800b504:	d505      	bpl.n	800b512 <_fwalk_sglue+0x22>
 800b506:	6824      	ldr	r4, [r4, #0]
 800b508:	2c00      	cmp	r4, #0
 800b50a:	d1f7      	bne.n	800b4fc <_fwalk_sglue+0xc>
 800b50c:	4630      	mov	r0, r6
 800b50e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b512:	89ab      	ldrh	r3, [r5, #12]
 800b514:	2b01      	cmp	r3, #1
 800b516:	d907      	bls.n	800b528 <_fwalk_sglue+0x38>
 800b518:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b51c:	3301      	adds	r3, #1
 800b51e:	d003      	beq.n	800b528 <_fwalk_sglue+0x38>
 800b520:	4629      	mov	r1, r5
 800b522:	4638      	mov	r0, r7
 800b524:	47c0      	blx	r8
 800b526:	4306      	orrs	r6, r0
 800b528:	3568      	adds	r5, #104	@ 0x68
 800b52a:	e7e9      	b.n	800b500 <_fwalk_sglue+0x10>

0800b52c <__sread>:
 800b52c:	b510      	push	{r4, lr}
 800b52e:	460c      	mov	r4, r1
 800b530:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b534:	f000 f8de 	bl	800b6f4 <_read_r>
 800b538:	2800      	cmp	r0, #0
 800b53a:	bfab      	itete	ge
 800b53c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b53e:	89a3      	ldrhlt	r3, [r4, #12]
 800b540:	181b      	addge	r3, r3, r0
 800b542:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b546:	bfac      	ite	ge
 800b548:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b54a:	81a3      	strhlt	r3, [r4, #12]
 800b54c:	bd10      	pop	{r4, pc}

0800b54e <__swrite>:
 800b54e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b552:	461f      	mov	r7, r3
 800b554:	898b      	ldrh	r3, [r1, #12]
 800b556:	4605      	mov	r5, r0
 800b558:	05db      	lsls	r3, r3, #23
 800b55a:	460c      	mov	r4, r1
 800b55c:	4616      	mov	r6, r2
 800b55e:	d505      	bpl.n	800b56c <__swrite+0x1e>
 800b560:	2302      	movs	r3, #2
 800b562:	2200      	movs	r2, #0
 800b564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b568:	f000 f8b2 	bl	800b6d0 <_lseek_r>
 800b56c:	89a3      	ldrh	r3, [r4, #12]
 800b56e:	4632      	mov	r2, r6
 800b570:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b574:	81a3      	strh	r3, [r4, #12]
 800b576:	4628      	mov	r0, r5
 800b578:	463b      	mov	r3, r7
 800b57a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b57e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b582:	f000 b8c9 	b.w	800b718 <_write_r>

0800b586 <__sseek>:
 800b586:	b510      	push	{r4, lr}
 800b588:	460c      	mov	r4, r1
 800b58a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b58e:	f000 f89f 	bl	800b6d0 <_lseek_r>
 800b592:	1c43      	adds	r3, r0, #1
 800b594:	89a3      	ldrh	r3, [r4, #12]
 800b596:	bf15      	itete	ne
 800b598:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b59a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b59e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b5a2:	81a3      	strheq	r3, [r4, #12]
 800b5a4:	bf18      	it	ne
 800b5a6:	81a3      	strhne	r3, [r4, #12]
 800b5a8:	bd10      	pop	{r4, pc}

0800b5aa <__sclose>:
 800b5aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5ae:	f000 b87f 	b.w	800b6b0 <_close_r>

0800b5b2 <_vsniprintf_r>:
 800b5b2:	b530      	push	{r4, r5, lr}
 800b5b4:	4614      	mov	r4, r2
 800b5b6:	2c00      	cmp	r4, #0
 800b5b8:	4605      	mov	r5, r0
 800b5ba:	461a      	mov	r2, r3
 800b5bc:	b09b      	sub	sp, #108	@ 0x6c
 800b5be:	da05      	bge.n	800b5cc <_vsniprintf_r+0x1a>
 800b5c0:	238b      	movs	r3, #139	@ 0x8b
 800b5c2:	6003      	str	r3, [r0, #0]
 800b5c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b5c8:	b01b      	add	sp, #108	@ 0x6c
 800b5ca:	bd30      	pop	{r4, r5, pc}
 800b5cc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b5d0:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b5d4:	bf0c      	ite	eq
 800b5d6:	4623      	moveq	r3, r4
 800b5d8:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b5dc:	9302      	str	r3, [sp, #8]
 800b5de:	9305      	str	r3, [sp, #20]
 800b5e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b5e4:	9100      	str	r1, [sp, #0]
 800b5e6:	9104      	str	r1, [sp, #16]
 800b5e8:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b5ec:	4669      	mov	r1, sp
 800b5ee:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800b5f0:	f001 fa42 	bl	800ca78 <_svfiprintf_r>
 800b5f4:	1c43      	adds	r3, r0, #1
 800b5f6:	bfbc      	itt	lt
 800b5f8:	238b      	movlt	r3, #139	@ 0x8b
 800b5fa:	602b      	strlt	r3, [r5, #0]
 800b5fc:	2c00      	cmp	r4, #0
 800b5fe:	d0e3      	beq.n	800b5c8 <_vsniprintf_r+0x16>
 800b600:	2200      	movs	r2, #0
 800b602:	9b00      	ldr	r3, [sp, #0]
 800b604:	701a      	strb	r2, [r3, #0]
 800b606:	e7df      	b.n	800b5c8 <_vsniprintf_r+0x16>

0800b608 <vsniprintf>:
 800b608:	b507      	push	{r0, r1, r2, lr}
 800b60a:	9300      	str	r3, [sp, #0]
 800b60c:	4613      	mov	r3, r2
 800b60e:	460a      	mov	r2, r1
 800b610:	4601      	mov	r1, r0
 800b612:	4803      	ldr	r0, [pc, #12]	@ (800b620 <vsniprintf+0x18>)
 800b614:	6800      	ldr	r0, [r0, #0]
 800b616:	f7ff ffcc 	bl	800b5b2 <_vsniprintf_r>
 800b61a:	b003      	add	sp, #12
 800b61c:	f85d fb04 	ldr.w	pc, [sp], #4
 800b620:	200002e0 	.word	0x200002e0

0800b624 <memset>:
 800b624:	4603      	mov	r3, r0
 800b626:	4402      	add	r2, r0
 800b628:	4293      	cmp	r3, r2
 800b62a:	d100      	bne.n	800b62e <memset+0xa>
 800b62c:	4770      	bx	lr
 800b62e:	f803 1b01 	strb.w	r1, [r3], #1
 800b632:	e7f9      	b.n	800b628 <memset+0x4>

0800b634 <strncmp>:
 800b634:	b510      	push	{r4, lr}
 800b636:	b16a      	cbz	r2, 800b654 <strncmp+0x20>
 800b638:	3901      	subs	r1, #1
 800b63a:	1884      	adds	r4, r0, r2
 800b63c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b640:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b644:	429a      	cmp	r2, r3
 800b646:	d103      	bne.n	800b650 <strncmp+0x1c>
 800b648:	42a0      	cmp	r0, r4
 800b64a:	d001      	beq.n	800b650 <strncmp+0x1c>
 800b64c:	2a00      	cmp	r2, #0
 800b64e:	d1f5      	bne.n	800b63c <strncmp+0x8>
 800b650:	1ad0      	subs	r0, r2, r3
 800b652:	bd10      	pop	{r4, pc}
 800b654:	4610      	mov	r0, r2
 800b656:	e7fc      	b.n	800b652 <strncmp+0x1e>

0800b658 <__strtok_r>:
 800b658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b65a:	4604      	mov	r4, r0
 800b65c:	b908      	cbnz	r0, 800b662 <__strtok_r+0xa>
 800b65e:	6814      	ldr	r4, [r2, #0]
 800b660:	b144      	cbz	r4, 800b674 <__strtok_r+0x1c>
 800b662:	460f      	mov	r7, r1
 800b664:	4620      	mov	r0, r4
 800b666:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b66a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b66e:	b91e      	cbnz	r6, 800b678 <__strtok_r+0x20>
 800b670:	b965      	cbnz	r5, 800b68c <__strtok_r+0x34>
 800b672:	6015      	str	r5, [r2, #0]
 800b674:	2000      	movs	r0, #0
 800b676:	e005      	b.n	800b684 <__strtok_r+0x2c>
 800b678:	42b5      	cmp	r5, r6
 800b67a:	d1f6      	bne.n	800b66a <__strtok_r+0x12>
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d1f0      	bne.n	800b662 <__strtok_r+0xa>
 800b680:	6014      	str	r4, [r2, #0]
 800b682:	7003      	strb	r3, [r0, #0]
 800b684:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b686:	461c      	mov	r4, r3
 800b688:	e00c      	b.n	800b6a4 <__strtok_r+0x4c>
 800b68a:	b915      	cbnz	r5, 800b692 <__strtok_r+0x3a>
 800b68c:	460e      	mov	r6, r1
 800b68e:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b692:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b696:	42ab      	cmp	r3, r5
 800b698:	d1f7      	bne.n	800b68a <__strtok_r+0x32>
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d0f3      	beq.n	800b686 <__strtok_r+0x2e>
 800b69e:	2300      	movs	r3, #0
 800b6a0:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b6a4:	6014      	str	r4, [r2, #0]
 800b6a6:	e7ed      	b.n	800b684 <__strtok_r+0x2c>

0800b6a8 <strtok_r>:
 800b6a8:	2301      	movs	r3, #1
 800b6aa:	f7ff bfd5 	b.w	800b658 <__strtok_r>
	...

0800b6b0 <_close_r>:
 800b6b0:	b538      	push	{r3, r4, r5, lr}
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	4d05      	ldr	r5, [pc, #20]	@ (800b6cc <_close_r+0x1c>)
 800b6b6:	4604      	mov	r4, r0
 800b6b8:	4608      	mov	r0, r1
 800b6ba:	602b      	str	r3, [r5, #0]
 800b6bc:	f7f6 fcd5 	bl	800206a <_close>
 800b6c0:	1c43      	adds	r3, r0, #1
 800b6c2:	d102      	bne.n	800b6ca <_close_r+0x1a>
 800b6c4:	682b      	ldr	r3, [r5, #0]
 800b6c6:	b103      	cbz	r3, 800b6ca <_close_r+0x1a>
 800b6c8:	6023      	str	r3, [r4, #0]
 800b6ca:	bd38      	pop	{r3, r4, r5, pc}
 800b6cc:	200012b0 	.word	0x200012b0

0800b6d0 <_lseek_r>:
 800b6d0:	b538      	push	{r3, r4, r5, lr}
 800b6d2:	4604      	mov	r4, r0
 800b6d4:	4608      	mov	r0, r1
 800b6d6:	4611      	mov	r1, r2
 800b6d8:	2200      	movs	r2, #0
 800b6da:	4d05      	ldr	r5, [pc, #20]	@ (800b6f0 <_lseek_r+0x20>)
 800b6dc:	602a      	str	r2, [r5, #0]
 800b6de:	461a      	mov	r2, r3
 800b6e0:	f7f6 fce7 	bl	80020b2 <_lseek>
 800b6e4:	1c43      	adds	r3, r0, #1
 800b6e6:	d102      	bne.n	800b6ee <_lseek_r+0x1e>
 800b6e8:	682b      	ldr	r3, [r5, #0]
 800b6ea:	b103      	cbz	r3, 800b6ee <_lseek_r+0x1e>
 800b6ec:	6023      	str	r3, [r4, #0]
 800b6ee:	bd38      	pop	{r3, r4, r5, pc}
 800b6f0:	200012b0 	.word	0x200012b0

0800b6f4 <_read_r>:
 800b6f4:	b538      	push	{r3, r4, r5, lr}
 800b6f6:	4604      	mov	r4, r0
 800b6f8:	4608      	mov	r0, r1
 800b6fa:	4611      	mov	r1, r2
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	4d05      	ldr	r5, [pc, #20]	@ (800b714 <_read_r+0x20>)
 800b700:	602a      	str	r2, [r5, #0]
 800b702:	461a      	mov	r2, r3
 800b704:	f7f6 fc78 	bl	8001ff8 <_read>
 800b708:	1c43      	adds	r3, r0, #1
 800b70a:	d102      	bne.n	800b712 <_read_r+0x1e>
 800b70c:	682b      	ldr	r3, [r5, #0]
 800b70e:	b103      	cbz	r3, 800b712 <_read_r+0x1e>
 800b710:	6023      	str	r3, [r4, #0]
 800b712:	bd38      	pop	{r3, r4, r5, pc}
 800b714:	200012b0 	.word	0x200012b0

0800b718 <_write_r>:
 800b718:	b538      	push	{r3, r4, r5, lr}
 800b71a:	4604      	mov	r4, r0
 800b71c:	4608      	mov	r0, r1
 800b71e:	4611      	mov	r1, r2
 800b720:	2200      	movs	r2, #0
 800b722:	4d05      	ldr	r5, [pc, #20]	@ (800b738 <_write_r+0x20>)
 800b724:	602a      	str	r2, [r5, #0]
 800b726:	461a      	mov	r2, r3
 800b728:	f7f6 fc83 	bl	8002032 <_write>
 800b72c:	1c43      	adds	r3, r0, #1
 800b72e:	d102      	bne.n	800b736 <_write_r+0x1e>
 800b730:	682b      	ldr	r3, [r5, #0]
 800b732:	b103      	cbz	r3, 800b736 <_write_r+0x1e>
 800b734:	6023      	str	r3, [r4, #0]
 800b736:	bd38      	pop	{r3, r4, r5, pc}
 800b738:	200012b0 	.word	0x200012b0

0800b73c <__errno>:
 800b73c:	4b01      	ldr	r3, [pc, #4]	@ (800b744 <__errno+0x8>)
 800b73e:	6818      	ldr	r0, [r3, #0]
 800b740:	4770      	bx	lr
 800b742:	bf00      	nop
 800b744:	200002e0 	.word	0x200002e0

0800b748 <__libc_init_array>:
 800b748:	b570      	push	{r4, r5, r6, lr}
 800b74a:	2600      	movs	r6, #0
 800b74c:	4d0c      	ldr	r5, [pc, #48]	@ (800b780 <__libc_init_array+0x38>)
 800b74e:	4c0d      	ldr	r4, [pc, #52]	@ (800b784 <__libc_init_array+0x3c>)
 800b750:	1b64      	subs	r4, r4, r5
 800b752:	10a4      	asrs	r4, r4, #2
 800b754:	42a6      	cmp	r6, r4
 800b756:	d109      	bne.n	800b76c <__libc_init_array+0x24>
 800b758:	f002 f820 	bl	800d79c <_init>
 800b75c:	2600      	movs	r6, #0
 800b75e:	4d0a      	ldr	r5, [pc, #40]	@ (800b788 <__libc_init_array+0x40>)
 800b760:	4c0a      	ldr	r4, [pc, #40]	@ (800b78c <__libc_init_array+0x44>)
 800b762:	1b64      	subs	r4, r4, r5
 800b764:	10a4      	asrs	r4, r4, #2
 800b766:	42a6      	cmp	r6, r4
 800b768:	d105      	bne.n	800b776 <__libc_init_array+0x2e>
 800b76a:	bd70      	pop	{r4, r5, r6, pc}
 800b76c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b770:	4798      	blx	r3
 800b772:	3601      	adds	r6, #1
 800b774:	e7ee      	b.n	800b754 <__libc_init_array+0xc>
 800b776:	f855 3b04 	ldr.w	r3, [r5], #4
 800b77a:	4798      	blx	r3
 800b77c:	3601      	adds	r6, #1
 800b77e:	e7f2      	b.n	800b766 <__libc_init_array+0x1e>
 800b780:	0800dd48 	.word	0x0800dd48
 800b784:	0800dd48 	.word	0x0800dd48
 800b788:	0800dd48 	.word	0x0800dd48
 800b78c:	0800dd4c 	.word	0x0800dd4c

0800b790 <__retarget_lock_init_recursive>:
 800b790:	4770      	bx	lr

0800b792 <__retarget_lock_acquire_recursive>:
 800b792:	4770      	bx	lr

0800b794 <__retarget_lock_release_recursive>:
 800b794:	4770      	bx	lr

0800b796 <strcpy>:
 800b796:	4603      	mov	r3, r0
 800b798:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b79c:	f803 2b01 	strb.w	r2, [r3], #1
 800b7a0:	2a00      	cmp	r2, #0
 800b7a2:	d1f9      	bne.n	800b798 <strcpy+0x2>
 800b7a4:	4770      	bx	lr

0800b7a6 <memcpy>:
 800b7a6:	440a      	add	r2, r1
 800b7a8:	4291      	cmp	r1, r2
 800b7aa:	f100 33ff 	add.w	r3, r0, #4294967295
 800b7ae:	d100      	bne.n	800b7b2 <memcpy+0xc>
 800b7b0:	4770      	bx	lr
 800b7b2:	b510      	push	{r4, lr}
 800b7b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b7b8:	4291      	cmp	r1, r2
 800b7ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b7be:	d1f9      	bne.n	800b7b4 <memcpy+0xe>
 800b7c0:	bd10      	pop	{r4, pc}
	...

0800b7c4 <nan>:
 800b7c4:	2000      	movs	r0, #0
 800b7c6:	4901      	ldr	r1, [pc, #4]	@ (800b7cc <nan+0x8>)
 800b7c8:	4770      	bx	lr
 800b7ca:	bf00      	nop
 800b7cc:	7ff80000 	.word	0x7ff80000

0800b7d0 <nanf>:
 800b7d0:	4800      	ldr	r0, [pc, #0]	@ (800b7d4 <nanf+0x4>)
 800b7d2:	4770      	bx	lr
 800b7d4:	7fc00000 	.word	0x7fc00000

0800b7d8 <_free_r>:
 800b7d8:	b538      	push	{r3, r4, r5, lr}
 800b7da:	4605      	mov	r5, r0
 800b7dc:	2900      	cmp	r1, #0
 800b7de:	d040      	beq.n	800b862 <_free_r+0x8a>
 800b7e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b7e4:	1f0c      	subs	r4, r1, #4
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	bfb8      	it	lt
 800b7ea:	18e4      	addlt	r4, r4, r3
 800b7ec:	f000 fc2a 	bl	800c044 <__malloc_lock>
 800b7f0:	4a1c      	ldr	r2, [pc, #112]	@ (800b864 <_free_r+0x8c>)
 800b7f2:	6813      	ldr	r3, [r2, #0]
 800b7f4:	b933      	cbnz	r3, 800b804 <_free_r+0x2c>
 800b7f6:	6063      	str	r3, [r4, #4]
 800b7f8:	6014      	str	r4, [r2, #0]
 800b7fa:	4628      	mov	r0, r5
 800b7fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b800:	f000 bc26 	b.w	800c050 <__malloc_unlock>
 800b804:	42a3      	cmp	r3, r4
 800b806:	d908      	bls.n	800b81a <_free_r+0x42>
 800b808:	6820      	ldr	r0, [r4, #0]
 800b80a:	1821      	adds	r1, r4, r0
 800b80c:	428b      	cmp	r3, r1
 800b80e:	bf01      	itttt	eq
 800b810:	6819      	ldreq	r1, [r3, #0]
 800b812:	685b      	ldreq	r3, [r3, #4]
 800b814:	1809      	addeq	r1, r1, r0
 800b816:	6021      	streq	r1, [r4, #0]
 800b818:	e7ed      	b.n	800b7f6 <_free_r+0x1e>
 800b81a:	461a      	mov	r2, r3
 800b81c:	685b      	ldr	r3, [r3, #4]
 800b81e:	b10b      	cbz	r3, 800b824 <_free_r+0x4c>
 800b820:	42a3      	cmp	r3, r4
 800b822:	d9fa      	bls.n	800b81a <_free_r+0x42>
 800b824:	6811      	ldr	r1, [r2, #0]
 800b826:	1850      	adds	r0, r2, r1
 800b828:	42a0      	cmp	r0, r4
 800b82a:	d10b      	bne.n	800b844 <_free_r+0x6c>
 800b82c:	6820      	ldr	r0, [r4, #0]
 800b82e:	4401      	add	r1, r0
 800b830:	1850      	adds	r0, r2, r1
 800b832:	4283      	cmp	r3, r0
 800b834:	6011      	str	r1, [r2, #0]
 800b836:	d1e0      	bne.n	800b7fa <_free_r+0x22>
 800b838:	6818      	ldr	r0, [r3, #0]
 800b83a:	685b      	ldr	r3, [r3, #4]
 800b83c:	4408      	add	r0, r1
 800b83e:	6010      	str	r0, [r2, #0]
 800b840:	6053      	str	r3, [r2, #4]
 800b842:	e7da      	b.n	800b7fa <_free_r+0x22>
 800b844:	d902      	bls.n	800b84c <_free_r+0x74>
 800b846:	230c      	movs	r3, #12
 800b848:	602b      	str	r3, [r5, #0]
 800b84a:	e7d6      	b.n	800b7fa <_free_r+0x22>
 800b84c:	6820      	ldr	r0, [r4, #0]
 800b84e:	1821      	adds	r1, r4, r0
 800b850:	428b      	cmp	r3, r1
 800b852:	bf01      	itttt	eq
 800b854:	6819      	ldreq	r1, [r3, #0]
 800b856:	685b      	ldreq	r3, [r3, #4]
 800b858:	1809      	addeq	r1, r1, r0
 800b85a:	6021      	streq	r1, [r4, #0]
 800b85c:	6063      	str	r3, [r4, #4]
 800b85e:	6054      	str	r4, [r2, #4]
 800b860:	e7cb      	b.n	800b7fa <_free_r+0x22>
 800b862:	bd38      	pop	{r3, r4, r5, pc}
 800b864:	200012bc 	.word	0x200012bc

0800b868 <rshift>:
 800b868:	6903      	ldr	r3, [r0, #16]
 800b86a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b86e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b872:	f100 0414 	add.w	r4, r0, #20
 800b876:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b87a:	dd46      	ble.n	800b90a <rshift+0xa2>
 800b87c:	f011 011f 	ands.w	r1, r1, #31
 800b880:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b884:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b888:	d10c      	bne.n	800b8a4 <rshift+0x3c>
 800b88a:	4629      	mov	r1, r5
 800b88c:	f100 0710 	add.w	r7, r0, #16
 800b890:	42b1      	cmp	r1, r6
 800b892:	d335      	bcc.n	800b900 <rshift+0x98>
 800b894:	1a9b      	subs	r3, r3, r2
 800b896:	009b      	lsls	r3, r3, #2
 800b898:	1eea      	subs	r2, r5, #3
 800b89a:	4296      	cmp	r6, r2
 800b89c:	bf38      	it	cc
 800b89e:	2300      	movcc	r3, #0
 800b8a0:	4423      	add	r3, r4
 800b8a2:	e015      	b.n	800b8d0 <rshift+0x68>
 800b8a4:	46a1      	mov	r9, r4
 800b8a6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b8aa:	f1c1 0820 	rsb	r8, r1, #32
 800b8ae:	40cf      	lsrs	r7, r1
 800b8b0:	f105 0e04 	add.w	lr, r5, #4
 800b8b4:	4576      	cmp	r6, lr
 800b8b6:	46f4      	mov	ip, lr
 800b8b8:	d816      	bhi.n	800b8e8 <rshift+0x80>
 800b8ba:	1a9a      	subs	r2, r3, r2
 800b8bc:	0092      	lsls	r2, r2, #2
 800b8be:	3a04      	subs	r2, #4
 800b8c0:	3501      	adds	r5, #1
 800b8c2:	42ae      	cmp	r6, r5
 800b8c4:	bf38      	it	cc
 800b8c6:	2200      	movcc	r2, #0
 800b8c8:	18a3      	adds	r3, r4, r2
 800b8ca:	50a7      	str	r7, [r4, r2]
 800b8cc:	b107      	cbz	r7, 800b8d0 <rshift+0x68>
 800b8ce:	3304      	adds	r3, #4
 800b8d0:	42a3      	cmp	r3, r4
 800b8d2:	eba3 0204 	sub.w	r2, r3, r4
 800b8d6:	bf08      	it	eq
 800b8d8:	2300      	moveq	r3, #0
 800b8da:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b8de:	6102      	str	r2, [r0, #16]
 800b8e0:	bf08      	it	eq
 800b8e2:	6143      	streq	r3, [r0, #20]
 800b8e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b8e8:	f8dc c000 	ldr.w	ip, [ip]
 800b8ec:	fa0c fc08 	lsl.w	ip, ip, r8
 800b8f0:	ea4c 0707 	orr.w	r7, ip, r7
 800b8f4:	f849 7b04 	str.w	r7, [r9], #4
 800b8f8:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b8fc:	40cf      	lsrs	r7, r1
 800b8fe:	e7d9      	b.n	800b8b4 <rshift+0x4c>
 800b900:	f851 cb04 	ldr.w	ip, [r1], #4
 800b904:	f847 cf04 	str.w	ip, [r7, #4]!
 800b908:	e7c2      	b.n	800b890 <rshift+0x28>
 800b90a:	4623      	mov	r3, r4
 800b90c:	e7e0      	b.n	800b8d0 <rshift+0x68>

0800b90e <__hexdig_fun>:
 800b90e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b912:	2b09      	cmp	r3, #9
 800b914:	d802      	bhi.n	800b91c <__hexdig_fun+0xe>
 800b916:	3820      	subs	r0, #32
 800b918:	b2c0      	uxtb	r0, r0
 800b91a:	4770      	bx	lr
 800b91c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b920:	2b05      	cmp	r3, #5
 800b922:	d801      	bhi.n	800b928 <__hexdig_fun+0x1a>
 800b924:	3847      	subs	r0, #71	@ 0x47
 800b926:	e7f7      	b.n	800b918 <__hexdig_fun+0xa>
 800b928:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b92c:	2b05      	cmp	r3, #5
 800b92e:	d801      	bhi.n	800b934 <__hexdig_fun+0x26>
 800b930:	3827      	subs	r0, #39	@ 0x27
 800b932:	e7f1      	b.n	800b918 <__hexdig_fun+0xa>
 800b934:	2000      	movs	r0, #0
 800b936:	4770      	bx	lr

0800b938 <__gethex>:
 800b938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b93c:	468a      	mov	sl, r1
 800b93e:	4690      	mov	r8, r2
 800b940:	b085      	sub	sp, #20
 800b942:	9302      	str	r3, [sp, #8]
 800b944:	680b      	ldr	r3, [r1, #0]
 800b946:	9001      	str	r0, [sp, #4]
 800b948:	1c9c      	adds	r4, r3, #2
 800b94a:	46a1      	mov	r9, r4
 800b94c:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b950:	2830      	cmp	r0, #48	@ 0x30
 800b952:	d0fa      	beq.n	800b94a <__gethex+0x12>
 800b954:	eba9 0303 	sub.w	r3, r9, r3
 800b958:	f1a3 0b02 	sub.w	fp, r3, #2
 800b95c:	f7ff ffd7 	bl	800b90e <__hexdig_fun>
 800b960:	4605      	mov	r5, r0
 800b962:	2800      	cmp	r0, #0
 800b964:	d168      	bne.n	800ba38 <__gethex+0x100>
 800b966:	2201      	movs	r2, #1
 800b968:	4648      	mov	r0, r9
 800b96a:	499f      	ldr	r1, [pc, #636]	@ (800bbe8 <__gethex+0x2b0>)
 800b96c:	f7ff fe62 	bl	800b634 <strncmp>
 800b970:	4607      	mov	r7, r0
 800b972:	2800      	cmp	r0, #0
 800b974:	d167      	bne.n	800ba46 <__gethex+0x10e>
 800b976:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b97a:	4626      	mov	r6, r4
 800b97c:	f7ff ffc7 	bl	800b90e <__hexdig_fun>
 800b980:	2800      	cmp	r0, #0
 800b982:	d062      	beq.n	800ba4a <__gethex+0x112>
 800b984:	4623      	mov	r3, r4
 800b986:	7818      	ldrb	r0, [r3, #0]
 800b988:	4699      	mov	r9, r3
 800b98a:	2830      	cmp	r0, #48	@ 0x30
 800b98c:	f103 0301 	add.w	r3, r3, #1
 800b990:	d0f9      	beq.n	800b986 <__gethex+0x4e>
 800b992:	f7ff ffbc 	bl	800b90e <__hexdig_fun>
 800b996:	fab0 f580 	clz	r5, r0
 800b99a:	f04f 0b01 	mov.w	fp, #1
 800b99e:	096d      	lsrs	r5, r5, #5
 800b9a0:	464a      	mov	r2, r9
 800b9a2:	4616      	mov	r6, r2
 800b9a4:	7830      	ldrb	r0, [r6, #0]
 800b9a6:	3201      	adds	r2, #1
 800b9a8:	f7ff ffb1 	bl	800b90e <__hexdig_fun>
 800b9ac:	2800      	cmp	r0, #0
 800b9ae:	d1f8      	bne.n	800b9a2 <__gethex+0x6a>
 800b9b0:	2201      	movs	r2, #1
 800b9b2:	4630      	mov	r0, r6
 800b9b4:	498c      	ldr	r1, [pc, #560]	@ (800bbe8 <__gethex+0x2b0>)
 800b9b6:	f7ff fe3d 	bl	800b634 <strncmp>
 800b9ba:	2800      	cmp	r0, #0
 800b9bc:	d13f      	bne.n	800ba3e <__gethex+0x106>
 800b9be:	b944      	cbnz	r4, 800b9d2 <__gethex+0x9a>
 800b9c0:	1c74      	adds	r4, r6, #1
 800b9c2:	4622      	mov	r2, r4
 800b9c4:	4616      	mov	r6, r2
 800b9c6:	7830      	ldrb	r0, [r6, #0]
 800b9c8:	3201      	adds	r2, #1
 800b9ca:	f7ff ffa0 	bl	800b90e <__hexdig_fun>
 800b9ce:	2800      	cmp	r0, #0
 800b9d0:	d1f8      	bne.n	800b9c4 <__gethex+0x8c>
 800b9d2:	1ba4      	subs	r4, r4, r6
 800b9d4:	00a7      	lsls	r7, r4, #2
 800b9d6:	7833      	ldrb	r3, [r6, #0]
 800b9d8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b9dc:	2b50      	cmp	r3, #80	@ 0x50
 800b9de:	d13e      	bne.n	800ba5e <__gethex+0x126>
 800b9e0:	7873      	ldrb	r3, [r6, #1]
 800b9e2:	2b2b      	cmp	r3, #43	@ 0x2b
 800b9e4:	d033      	beq.n	800ba4e <__gethex+0x116>
 800b9e6:	2b2d      	cmp	r3, #45	@ 0x2d
 800b9e8:	d034      	beq.n	800ba54 <__gethex+0x11c>
 800b9ea:	2400      	movs	r4, #0
 800b9ec:	1c71      	adds	r1, r6, #1
 800b9ee:	7808      	ldrb	r0, [r1, #0]
 800b9f0:	f7ff ff8d 	bl	800b90e <__hexdig_fun>
 800b9f4:	1e43      	subs	r3, r0, #1
 800b9f6:	b2db      	uxtb	r3, r3
 800b9f8:	2b18      	cmp	r3, #24
 800b9fa:	d830      	bhi.n	800ba5e <__gethex+0x126>
 800b9fc:	f1a0 0210 	sub.w	r2, r0, #16
 800ba00:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ba04:	f7ff ff83 	bl	800b90e <__hexdig_fun>
 800ba08:	f100 3cff 	add.w	ip, r0, #4294967295
 800ba0c:	fa5f fc8c 	uxtb.w	ip, ip
 800ba10:	f1bc 0f18 	cmp.w	ip, #24
 800ba14:	f04f 030a 	mov.w	r3, #10
 800ba18:	d91e      	bls.n	800ba58 <__gethex+0x120>
 800ba1a:	b104      	cbz	r4, 800ba1e <__gethex+0xe6>
 800ba1c:	4252      	negs	r2, r2
 800ba1e:	4417      	add	r7, r2
 800ba20:	f8ca 1000 	str.w	r1, [sl]
 800ba24:	b1ed      	cbz	r5, 800ba62 <__gethex+0x12a>
 800ba26:	f1bb 0f00 	cmp.w	fp, #0
 800ba2a:	bf0c      	ite	eq
 800ba2c:	2506      	moveq	r5, #6
 800ba2e:	2500      	movne	r5, #0
 800ba30:	4628      	mov	r0, r5
 800ba32:	b005      	add	sp, #20
 800ba34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba38:	2500      	movs	r5, #0
 800ba3a:	462c      	mov	r4, r5
 800ba3c:	e7b0      	b.n	800b9a0 <__gethex+0x68>
 800ba3e:	2c00      	cmp	r4, #0
 800ba40:	d1c7      	bne.n	800b9d2 <__gethex+0x9a>
 800ba42:	4627      	mov	r7, r4
 800ba44:	e7c7      	b.n	800b9d6 <__gethex+0x9e>
 800ba46:	464e      	mov	r6, r9
 800ba48:	462f      	mov	r7, r5
 800ba4a:	2501      	movs	r5, #1
 800ba4c:	e7c3      	b.n	800b9d6 <__gethex+0x9e>
 800ba4e:	2400      	movs	r4, #0
 800ba50:	1cb1      	adds	r1, r6, #2
 800ba52:	e7cc      	b.n	800b9ee <__gethex+0xb6>
 800ba54:	2401      	movs	r4, #1
 800ba56:	e7fb      	b.n	800ba50 <__gethex+0x118>
 800ba58:	fb03 0002 	mla	r0, r3, r2, r0
 800ba5c:	e7ce      	b.n	800b9fc <__gethex+0xc4>
 800ba5e:	4631      	mov	r1, r6
 800ba60:	e7de      	b.n	800ba20 <__gethex+0xe8>
 800ba62:	4629      	mov	r1, r5
 800ba64:	eba6 0309 	sub.w	r3, r6, r9
 800ba68:	3b01      	subs	r3, #1
 800ba6a:	2b07      	cmp	r3, #7
 800ba6c:	dc0a      	bgt.n	800ba84 <__gethex+0x14c>
 800ba6e:	9801      	ldr	r0, [sp, #4]
 800ba70:	f000 faf4 	bl	800c05c <_Balloc>
 800ba74:	4604      	mov	r4, r0
 800ba76:	b940      	cbnz	r0, 800ba8a <__gethex+0x152>
 800ba78:	4602      	mov	r2, r0
 800ba7a:	21e4      	movs	r1, #228	@ 0xe4
 800ba7c:	4b5b      	ldr	r3, [pc, #364]	@ (800bbec <__gethex+0x2b4>)
 800ba7e:	485c      	ldr	r0, [pc, #368]	@ (800bbf0 <__gethex+0x2b8>)
 800ba80:	f001 fb68 	bl	800d154 <__assert_func>
 800ba84:	3101      	adds	r1, #1
 800ba86:	105b      	asrs	r3, r3, #1
 800ba88:	e7ef      	b.n	800ba6a <__gethex+0x132>
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	f100 0a14 	add.w	sl, r0, #20
 800ba90:	4655      	mov	r5, sl
 800ba92:	469b      	mov	fp, r3
 800ba94:	45b1      	cmp	r9, r6
 800ba96:	d337      	bcc.n	800bb08 <__gethex+0x1d0>
 800ba98:	f845 bb04 	str.w	fp, [r5], #4
 800ba9c:	eba5 050a 	sub.w	r5, r5, sl
 800baa0:	10ad      	asrs	r5, r5, #2
 800baa2:	6125      	str	r5, [r4, #16]
 800baa4:	4658      	mov	r0, fp
 800baa6:	f000 fbcb 	bl	800c240 <__hi0bits>
 800baaa:	016d      	lsls	r5, r5, #5
 800baac:	f8d8 6000 	ldr.w	r6, [r8]
 800bab0:	1a2d      	subs	r5, r5, r0
 800bab2:	42b5      	cmp	r5, r6
 800bab4:	dd54      	ble.n	800bb60 <__gethex+0x228>
 800bab6:	1bad      	subs	r5, r5, r6
 800bab8:	4629      	mov	r1, r5
 800baba:	4620      	mov	r0, r4
 800babc:	f000 ff53 	bl	800c966 <__any_on>
 800bac0:	4681      	mov	r9, r0
 800bac2:	b178      	cbz	r0, 800bae4 <__gethex+0x1ac>
 800bac4:	f04f 0901 	mov.w	r9, #1
 800bac8:	1e6b      	subs	r3, r5, #1
 800baca:	1159      	asrs	r1, r3, #5
 800bacc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800bad0:	f003 021f 	and.w	r2, r3, #31
 800bad4:	fa09 f202 	lsl.w	r2, r9, r2
 800bad8:	420a      	tst	r2, r1
 800bada:	d003      	beq.n	800bae4 <__gethex+0x1ac>
 800badc:	454b      	cmp	r3, r9
 800bade:	dc36      	bgt.n	800bb4e <__gethex+0x216>
 800bae0:	f04f 0902 	mov.w	r9, #2
 800bae4:	4629      	mov	r1, r5
 800bae6:	4620      	mov	r0, r4
 800bae8:	f7ff febe 	bl	800b868 <rshift>
 800baec:	442f      	add	r7, r5
 800baee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800baf2:	42bb      	cmp	r3, r7
 800baf4:	da42      	bge.n	800bb7c <__gethex+0x244>
 800baf6:	4621      	mov	r1, r4
 800baf8:	9801      	ldr	r0, [sp, #4]
 800bafa:	f000 faef 	bl	800c0dc <_Bfree>
 800bafe:	2300      	movs	r3, #0
 800bb00:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bb02:	25a3      	movs	r5, #163	@ 0xa3
 800bb04:	6013      	str	r3, [r2, #0]
 800bb06:	e793      	b.n	800ba30 <__gethex+0xf8>
 800bb08:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800bb0c:	2a2e      	cmp	r2, #46	@ 0x2e
 800bb0e:	d012      	beq.n	800bb36 <__gethex+0x1fe>
 800bb10:	2b20      	cmp	r3, #32
 800bb12:	d104      	bne.n	800bb1e <__gethex+0x1e6>
 800bb14:	f845 bb04 	str.w	fp, [r5], #4
 800bb18:	f04f 0b00 	mov.w	fp, #0
 800bb1c:	465b      	mov	r3, fp
 800bb1e:	7830      	ldrb	r0, [r6, #0]
 800bb20:	9303      	str	r3, [sp, #12]
 800bb22:	f7ff fef4 	bl	800b90e <__hexdig_fun>
 800bb26:	9b03      	ldr	r3, [sp, #12]
 800bb28:	f000 000f 	and.w	r0, r0, #15
 800bb2c:	4098      	lsls	r0, r3
 800bb2e:	ea4b 0b00 	orr.w	fp, fp, r0
 800bb32:	3304      	adds	r3, #4
 800bb34:	e7ae      	b.n	800ba94 <__gethex+0x15c>
 800bb36:	45b1      	cmp	r9, r6
 800bb38:	d8ea      	bhi.n	800bb10 <__gethex+0x1d8>
 800bb3a:	2201      	movs	r2, #1
 800bb3c:	4630      	mov	r0, r6
 800bb3e:	492a      	ldr	r1, [pc, #168]	@ (800bbe8 <__gethex+0x2b0>)
 800bb40:	9303      	str	r3, [sp, #12]
 800bb42:	f7ff fd77 	bl	800b634 <strncmp>
 800bb46:	9b03      	ldr	r3, [sp, #12]
 800bb48:	2800      	cmp	r0, #0
 800bb4a:	d1e1      	bne.n	800bb10 <__gethex+0x1d8>
 800bb4c:	e7a2      	b.n	800ba94 <__gethex+0x15c>
 800bb4e:	4620      	mov	r0, r4
 800bb50:	1ea9      	subs	r1, r5, #2
 800bb52:	f000 ff08 	bl	800c966 <__any_on>
 800bb56:	2800      	cmp	r0, #0
 800bb58:	d0c2      	beq.n	800bae0 <__gethex+0x1a8>
 800bb5a:	f04f 0903 	mov.w	r9, #3
 800bb5e:	e7c1      	b.n	800bae4 <__gethex+0x1ac>
 800bb60:	da09      	bge.n	800bb76 <__gethex+0x23e>
 800bb62:	1b75      	subs	r5, r6, r5
 800bb64:	4621      	mov	r1, r4
 800bb66:	462a      	mov	r2, r5
 800bb68:	9801      	ldr	r0, [sp, #4]
 800bb6a:	f000 fccd 	bl	800c508 <__lshift>
 800bb6e:	4604      	mov	r4, r0
 800bb70:	1b7f      	subs	r7, r7, r5
 800bb72:	f100 0a14 	add.w	sl, r0, #20
 800bb76:	f04f 0900 	mov.w	r9, #0
 800bb7a:	e7b8      	b.n	800baee <__gethex+0x1b6>
 800bb7c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800bb80:	42bd      	cmp	r5, r7
 800bb82:	dd6f      	ble.n	800bc64 <__gethex+0x32c>
 800bb84:	1bed      	subs	r5, r5, r7
 800bb86:	42ae      	cmp	r6, r5
 800bb88:	dc34      	bgt.n	800bbf4 <__gethex+0x2bc>
 800bb8a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bb8e:	2b02      	cmp	r3, #2
 800bb90:	d022      	beq.n	800bbd8 <__gethex+0x2a0>
 800bb92:	2b03      	cmp	r3, #3
 800bb94:	d024      	beq.n	800bbe0 <__gethex+0x2a8>
 800bb96:	2b01      	cmp	r3, #1
 800bb98:	d115      	bne.n	800bbc6 <__gethex+0x28e>
 800bb9a:	42ae      	cmp	r6, r5
 800bb9c:	d113      	bne.n	800bbc6 <__gethex+0x28e>
 800bb9e:	2e01      	cmp	r6, #1
 800bba0:	d10b      	bne.n	800bbba <__gethex+0x282>
 800bba2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bba6:	9a02      	ldr	r2, [sp, #8]
 800bba8:	2562      	movs	r5, #98	@ 0x62
 800bbaa:	6013      	str	r3, [r2, #0]
 800bbac:	2301      	movs	r3, #1
 800bbae:	6123      	str	r3, [r4, #16]
 800bbb0:	f8ca 3000 	str.w	r3, [sl]
 800bbb4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bbb6:	601c      	str	r4, [r3, #0]
 800bbb8:	e73a      	b.n	800ba30 <__gethex+0xf8>
 800bbba:	4620      	mov	r0, r4
 800bbbc:	1e71      	subs	r1, r6, #1
 800bbbe:	f000 fed2 	bl	800c966 <__any_on>
 800bbc2:	2800      	cmp	r0, #0
 800bbc4:	d1ed      	bne.n	800bba2 <__gethex+0x26a>
 800bbc6:	4621      	mov	r1, r4
 800bbc8:	9801      	ldr	r0, [sp, #4]
 800bbca:	f000 fa87 	bl	800c0dc <_Bfree>
 800bbce:	2300      	movs	r3, #0
 800bbd0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bbd2:	2550      	movs	r5, #80	@ 0x50
 800bbd4:	6013      	str	r3, [r2, #0]
 800bbd6:	e72b      	b.n	800ba30 <__gethex+0xf8>
 800bbd8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d1f3      	bne.n	800bbc6 <__gethex+0x28e>
 800bbde:	e7e0      	b.n	800bba2 <__gethex+0x26a>
 800bbe0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d1dd      	bne.n	800bba2 <__gethex+0x26a>
 800bbe6:	e7ee      	b.n	800bbc6 <__gethex+0x28e>
 800bbe8:	0800d98a 	.word	0x0800d98a
 800bbec:	0800daf1 	.word	0x0800daf1
 800bbf0:	0800db02 	.word	0x0800db02
 800bbf4:	1e6f      	subs	r7, r5, #1
 800bbf6:	f1b9 0f00 	cmp.w	r9, #0
 800bbfa:	d130      	bne.n	800bc5e <__gethex+0x326>
 800bbfc:	b127      	cbz	r7, 800bc08 <__gethex+0x2d0>
 800bbfe:	4639      	mov	r1, r7
 800bc00:	4620      	mov	r0, r4
 800bc02:	f000 feb0 	bl	800c966 <__any_on>
 800bc06:	4681      	mov	r9, r0
 800bc08:	2301      	movs	r3, #1
 800bc0a:	4629      	mov	r1, r5
 800bc0c:	1b76      	subs	r6, r6, r5
 800bc0e:	2502      	movs	r5, #2
 800bc10:	117a      	asrs	r2, r7, #5
 800bc12:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800bc16:	f007 071f 	and.w	r7, r7, #31
 800bc1a:	40bb      	lsls	r3, r7
 800bc1c:	4213      	tst	r3, r2
 800bc1e:	4620      	mov	r0, r4
 800bc20:	bf18      	it	ne
 800bc22:	f049 0902 	orrne.w	r9, r9, #2
 800bc26:	f7ff fe1f 	bl	800b868 <rshift>
 800bc2a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800bc2e:	f1b9 0f00 	cmp.w	r9, #0
 800bc32:	d047      	beq.n	800bcc4 <__gethex+0x38c>
 800bc34:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bc38:	2b02      	cmp	r3, #2
 800bc3a:	d015      	beq.n	800bc68 <__gethex+0x330>
 800bc3c:	2b03      	cmp	r3, #3
 800bc3e:	d017      	beq.n	800bc70 <__gethex+0x338>
 800bc40:	2b01      	cmp	r3, #1
 800bc42:	d109      	bne.n	800bc58 <__gethex+0x320>
 800bc44:	f019 0f02 	tst.w	r9, #2
 800bc48:	d006      	beq.n	800bc58 <__gethex+0x320>
 800bc4a:	f8da 3000 	ldr.w	r3, [sl]
 800bc4e:	ea49 0903 	orr.w	r9, r9, r3
 800bc52:	f019 0f01 	tst.w	r9, #1
 800bc56:	d10e      	bne.n	800bc76 <__gethex+0x33e>
 800bc58:	f045 0510 	orr.w	r5, r5, #16
 800bc5c:	e032      	b.n	800bcc4 <__gethex+0x38c>
 800bc5e:	f04f 0901 	mov.w	r9, #1
 800bc62:	e7d1      	b.n	800bc08 <__gethex+0x2d0>
 800bc64:	2501      	movs	r5, #1
 800bc66:	e7e2      	b.n	800bc2e <__gethex+0x2f6>
 800bc68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bc6a:	f1c3 0301 	rsb	r3, r3, #1
 800bc6e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bc70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d0f0      	beq.n	800bc58 <__gethex+0x320>
 800bc76:	f04f 0c00 	mov.w	ip, #0
 800bc7a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bc7e:	f104 0314 	add.w	r3, r4, #20
 800bc82:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800bc86:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc90:	f1b2 3fff 	cmp.w	r2, #4294967295
 800bc94:	d01b      	beq.n	800bcce <__gethex+0x396>
 800bc96:	3201      	adds	r2, #1
 800bc98:	6002      	str	r2, [r0, #0]
 800bc9a:	2d02      	cmp	r5, #2
 800bc9c:	f104 0314 	add.w	r3, r4, #20
 800bca0:	d13c      	bne.n	800bd1c <__gethex+0x3e4>
 800bca2:	f8d8 2000 	ldr.w	r2, [r8]
 800bca6:	3a01      	subs	r2, #1
 800bca8:	42b2      	cmp	r2, r6
 800bcaa:	d109      	bne.n	800bcc0 <__gethex+0x388>
 800bcac:	2201      	movs	r2, #1
 800bcae:	1171      	asrs	r1, r6, #5
 800bcb0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bcb4:	f006 061f 	and.w	r6, r6, #31
 800bcb8:	fa02 f606 	lsl.w	r6, r2, r6
 800bcbc:	421e      	tst	r6, r3
 800bcbe:	d13a      	bne.n	800bd36 <__gethex+0x3fe>
 800bcc0:	f045 0520 	orr.w	r5, r5, #32
 800bcc4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bcc6:	601c      	str	r4, [r3, #0]
 800bcc8:	9b02      	ldr	r3, [sp, #8]
 800bcca:	601f      	str	r7, [r3, #0]
 800bccc:	e6b0      	b.n	800ba30 <__gethex+0xf8>
 800bcce:	4299      	cmp	r1, r3
 800bcd0:	f843 cc04 	str.w	ip, [r3, #-4]
 800bcd4:	d8d9      	bhi.n	800bc8a <__gethex+0x352>
 800bcd6:	68a3      	ldr	r3, [r4, #8]
 800bcd8:	459b      	cmp	fp, r3
 800bcda:	db17      	blt.n	800bd0c <__gethex+0x3d4>
 800bcdc:	6861      	ldr	r1, [r4, #4]
 800bcde:	9801      	ldr	r0, [sp, #4]
 800bce0:	3101      	adds	r1, #1
 800bce2:	f000 f9bb 	bl	800c05c <_Balloc>
 800bce6:	4681      	mov	r9, r0
 800bce8:	b918      	cbnz	r0, 800bcf2 <__gethex+0x3ba>
 800bcea:	4602      	mov	r2, r0
 800bcec:	2184      	movs	r1, #132	@ 0x84
 800bcee:	4b19      	ldr	r3, [pc, #100]	@ (800bd54 <__gethex+0x41c>)
 800bcf0:	e6c5      	b.n	800ba7e <__gethex+0x146>
 800bcf2:	6922      	ldr	r2, [r4, #16]
 800bcf4:	f104 010c 	add.w	r1, r4, #12
 800bcf8:	3202      	adds	r2, #2
 800bcfa:	0092      	lsls	r2, r2, #2
 800bcfc:	300c      	adds	r0, #12
 800bcfe:	f7ff fd52 	bl	800b7a6 <memcpy>
 800bd02:	4621      	mov	r1, r4
 800bd04:	9801      	ldr	r0, [sp, #4]
 800bd06:	f000 f9e9 	bl	800c0dc <_Bfree>
 800bd0a:	464c      	mov	r4, r9
 800bd0c:	6923      	ldr	r3, [r4, #16]
 800bd0e:	1c5a      	adds	r2, r3, #1
 800bd10:	6122      	str	r2, [r4, #16]
 800bd12:	2201      	movs	r2, #1
 800bd14:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bd18:	615a      	str	r2, [r3, #20]
 800bd1a:	e7be      	b.n	800bc9a <__gethex+0x362>
 800bd1c:	6922      	ldr	r2, [r4, #16]
 800bd1e:	455a      	cmp	r2, fp
 800bd20:	dd0b      	ble.n	800bd3a <__gethex+0x402>
 800bd22:	2101      	movs	r1, #1
 800bd24:	4620      	mov	r0, r4
 800bd26:	f7ff fd9f 	bl	800b868 <rshift>
 800bd2a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bd2e:	3701      	adds	r7, #1
 800bd30:	42bb      	cmp	r3, r7
 800bd32:	f6ff aee0 	blt.w	800baf6 <__gethex+0x1be>
 800bd36:	2501      	movs	r5, #1
 800bd38:	e7c2      	b.n	800bcc0 <__gethex+0x388>
 800bd3a:	f016 061f 	ands.w	r6, r6, #31
 800bd3e:	d0fa      	beq.n	800bd36 <__gethex+0x3fe>
 800bd40:	4453      	add	r3, sl
 800bd42:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800bd46:	f000 fa7b 	bl	800c240 <__hi0bits>
 800bd4a:	f1c6 0620 	rsb	r6, r6, #32
 800bd4e:	42b0      	cmp	r0, r6
 800bd50:	dbe7      	blt.n	800bd22 <__gethex+0x3ea>
 800bd52:	e7f0      	b.n	800bd36 <__gethex+0x3fe>
 800bd54:	0800daf1 	.word	0x0800daf1

0800bd58 <L_shift>:
 800bd58:	f1c2 0208 	rsb	r2, r2, #8
 800bd5c:	0092      	lsls	r2, r2, #2
 800bd5e:	b570      	push	{r4, r5, r6, lr}
 800bd60:	f1c2 0620 	rsb	r6, r2, #32
 800bd64:	6843      	ldr	r3, [r0, #4]
 800bd66:	6804      	ldr	r4, [r0, #0]
 800bd68:	fa03 f506 	lsl.w	r5, r3, r6
 800bd6c:	432c      	orrs	r4, r5
 800bd6e:	40d3      	lsrs	r3, r2
 800bd70:	6004      	str	r4, [r0, #0]
 800bd72:	f840 3f04 	str.w	r3, [r0, #4]!
 800bd76:	4288      	cmp	r0, r1
 800bd78:	d3f4      	bcc.n	800bd64 <L_shift+0xc>
 800bd7a:	bd70      	pop	{r4, r5, r6, pc}

0800bd7c <__match>:
 800bd7c:	b530      	push	{r4, r5, lr}
 800bd7e:	6803      	ldr	r3, [r0, #0]
 800bd80:	3301      	adds	r3, #1
 800bd82:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd86:	b914      	cbnz	r4, 800bd8e <__match+0x12>
 800bd88:	6003      	str	r3, [r0, #0]
 800bd8a:	2001      	movs	r0, #1
 800bd8c:	bd30      	pop	{r4, r5, pc}
 800bd8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd92:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800bd96:	2d19      	cmp	r5, #25
 800bd98:	bf98      	it	ls
 800bd9a:	3220      	addls	r2, #32
 800bd9c:	42a2      	cmp	r2, r4
 800bd9e:	d0f0      	beq.n	800bd82 <__match+0x6>
 800bda0:	2000      	movs	r0, #0
 800bda2:	e7f3      	b.n	800bd8c <__match+0x10>

0800bda4 <__hexnan>:
 800bda4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bda8:	2500      	movs	r5, #0
 800bdaa:	680b      	ldr	r3, [r1, #0]
 800bdac:	4682      	mov	sl, r0
 800bdae:	115e      	asrs	r6, r3, #5
 800bdb0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bdb4:	f013 031f 	ands.w	r3, r3, #31
 800bdb8:	bf18      	it	ne
 800bdba:	3604      	addne	r6, #4
 800bdbc:	1f37      	subs	r7, r6, #4
 800bdbe:	4690      	mov	r8, r2
 800bdc0:	46b9      	mov	r9, r7
 800bdc2:	463c      	mov	r4, r7
 800bdc4:	46ab      	mov	fp, r5
 800bdc6:	b087      	sub	sp, #28
 800bdc8:	6801      	ldr	r1, [r0, #0]
 800bdca:	9301      	str	r3, [sp, #4]
 800bdcc:	f846 5c04 	str.w	r5, [r6, #-4]
 800bdd0:	9502      	str	r5, [sp, #8]
 800bdd2:	784a      	ldrb	r2, [r1, #1]
 800bdd4:	1c4b      	adds	r3, r1, #1
 800bdd6:	9303      	str	r3, [sp, #12]
 800bdd8:	b342      	cbz	r2, 800be2c <__hexnan+0x88>
 800bdda:	4610      	mov	r0, r2
 800bddc:	9105      	str	r1, [sp, #20]
 800bdde:	9204      	str	r2, [sp, #16]
 800bde0:	f7ff fd95 	bl	800b90e <__hexdig_fun>
 800bde4:	2800      	cmp	r0, #0
 800bde6:	d151      	bne.n	800be8c <__hexnan+0xe8>
 800bde8:	9a04      	ldr	r2, [sp, #16]
 800bdea:	9905      	ldr	r1, [sp, #20]
 800bdec:	2a20      	cmp	r2, #32
 800bdee:	d818      	bhi.n	800be22 <__hexnan+0x7e>
 800bdf0:	9b02      	ldr	r3, [sp, #8]
 800bdf2:	459b      	cmp	fp, r3
 800bdf4:	dd13      	ble.n	800be1e <__hexnan+0x7a>
 800bdf6:	454c      	cmp	r4, r9
 800bdf8:	d206      	bcs.n	800be08 <__hexnan+0x64>
 800bdfa:	2d07      	cmp	r5, #7
 800bdfc:	dc04      	bgt.n	800be08 <__hexnan+0x64>
 800bdfe:	462a      	mov	r2, r5
 800be00:	4649      	mov	r1, r9
 800be02:	4620      	mov	r0, r4
 800be04:	f7ff ffa8 	bl	800bd58 <L_shift>
 800be08:	4544      	cmp	r4, r8
 800be0a:	d952      	bls.n	800beb2 <__hexnan+0x10e>
 800be0c:	2300      	movs	r3, #0
 800be0e:	f1a4 0904 	sub.w	r9, r4, #4
 800be12:	f844 3c04 	str.w	r3, [r4, #-4]
 800be16:	461d      	mov	r5, r3
 800be18:	464c      	mov	r4, r9
 800be1a:	f8cd b008 	str.w	fp, [sp, #8]
 800be1e:	9903      	ldr	r1, [sp, #12]
 800be20:	e7d7      	b.n	800bdd2 <__hexnan+0x2e>
 800be22:	2a29      	cmp	r2, #41	@ 0x29
 800be24:	d157      	bne.n	800bed6 <__hexnan+0x132>
 800be26:	3102      	adds	r1, #2
 800be28:	f8ca 1000 	str.w	r1, [sl]
 800be2c:	f1bb 0f00 	cmp.w	fp, #0
 800be30:	d051      	beq.n	800bed6 <__hexnan+0x132>
 800be32:	454c      	cmp	r4, r9
 800be34:	d206      	bcs.n	800be44 <__hexnan+0xa0>
 800be36:	2d07      	cmp	r5, #7
 800be38:	dc04      	bgt.n	800be44 <__hexnan+0xa0>
 800be3a:	462a      	mov	r2, r5
 800be3c:	4649      	mov	r1, r9
 800be3e:	4620      	mov	r0, r4
 800be40:	f7ff ff8a 	bl	800bd58 <L_shift>
 800be44:	4544      	cmp	r4, r8
 800be46:	d936      	bls.n	800beb6 <__hexnan+0x112>
 800be48:	4623      	mov	r3, r4
 800be4a:	f1a8 0204 	sub.w	r2, r8, #4
 800be4e:	f853 1b04 	ldr.w	r1, [r3], #4
 800be52:	429f      	cmp	r7, r3
 800be54:	f842 1f04 	str.w	r1, [r2, #4]!
 800be58:	d2f9      	bcs.n	800be4e <__hexnan+0xaa>
 800be5a:	1b3b      	subs	r3, r7, r4
 800be5c:	f023 0303 	bic.w	r3, r3, #3
 800be60:	3304      	adds	r3, #4
 800be62:	3401      	adds	r4, #1
 800be64:	3e03      	subs	r6, #3
 800be66:	42b4      	cmp	r4, r6
 800be68:	bf88      	it	hi
 800be6a:	2304      	movhi	r3, #4
 800be6c:	2200      	movs	r2, #0
 800be6e:	4443      	add	r3, r8
 800be70:	f843 2b04 	str.w	r2, [r3], #4
 800be74:	429f      	cmp	r7, r3
 800be76:	d2fb      	bcs.n	800be70 <__hexnan+0xcc>
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	b91b      	cbnz	r3, 800be84 <__hexnan+0xe0>
 800be7c:	4547      	cmp	r7, r8
 800be7e:	d128      	bne.n	800bed2 <__hexnan+0x12e>
 800be80:	2301      	movs	r3, #1
 800be82:	603b      	str	r3, [r7, #0]
 800be84:	2005      	movs	r0, #5
 800be86:	b007      	add	sp, #28
 800be88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be8c:	3501      	adds	r5, #1
 800be8e:	2d08      	cmp	r5, #8
 800be90:	f10b 0b01 	add.w	fp, fp, #1
 800be94:	dd06      	ble.n	800bea4 <__hexnan+0x100>
 800be96:	4544      	cmp	r4, r8
 800be98:	d9c1      	bls.n	800be1e <__hexnan+0x7a>
 800be9a:	2300      	movs	r3, #0
 800be9c:	2501      	movs	r5, #1
 800be9e:	f844 3c04 	str.w	r3, [r4, #-4]
 800bea2:	3c04      	subs	r4, #4
 800bea4:	6822      	ldr	r2, [r4, #0]
 800bea6:	f000 000f 	and.w	r0, r0, #15
 800beaa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800beae:	6020      	str	r0, [r4, #0]
 800beb0:	e7b5      	b.n	800be1e <__hexnan+0x7a>
 800beb2:	2508      	movs	r5, #8
 800beb4:	e7b3      	b.n	800be1e <__hexnan+0x7a>
 800beb6:	9b01      	ldr	r3, [sp, #4]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d0dd      	beq.n	800be78 <__hexnan+0xd4>
 800bebc:	f04f 32ff 	mov.w	r2, #4294967295
 800bec0:	f1c3 0320 	rsb	r3, r3, #32
 800bec4:	40da      	lsrs	r2, r3
 800bec6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800beca:	4013      	ands	r3, r2
 800becc:	f846 3c04 	str.w	r3, [r6, #-4]
 800bed0:	e7d2      	b.n	800be78 <__hexnan+0xd4>
 800bed2:	3f04      	subs	r7, #4
 800bed4:	e7d0      	b.n	800be78 <__hexnan+0xd4>
 800bed6:	2004      	movs	r0, #4
 800bed8:	e7d5      	b.n	800be86 <__hexnan+0xe2>
	...

0800bedc <sbrk_aligned>:
 800bedc:	b570      	push	{r4, r5, r6, lr}
 800bede:	4e0f      	ldr	r6, [pc, #60]	@ (800bf1c <sbrk_aligned+0x40>)
 800bee0:	460c      	mov	r4, r1
 800bee2:	6831      	ldr	r1, [r6, #0]
 800bee4:	4605      	mov	r5, r0
 800bee6:	b911      	cbnz	r1, 800beee <sbrk_aligned+0x12>
 800bee8:	f001 f916 	bl	800d118 <_sbrk_r>
 800beec:	6030      	str	r0, [r6, #0]
 800beee:	4621      	mov	r1, r4
 800bef0:	4628      	mov	r0, r5
 800bef2:	f001 f911 	bl	800d118 <_sbrk_r>
 800bef6:	1c43      	adds	r3, r0, #1
 800bef8:	d103      	bne.n	800bf02 <sbrk_aligned+0x26>
 800befa:	f04f 34ff 	mov.w	r4, #4294967295
 800befe:	4620      	mov	r0, r4
 800bf00:	bd70      	pop	{r4, r5, r6, pc}
 800bf02:	1cc4      	adds	r4, r0, #3
 800bf04:	f024 0403 	bic.w	r4, r4, #3
 800bf08:	42a0      	cmp	r0, r4
 800bf0a:	d0f8      	beq.n	800befe <sbrk_aligned+0x22>
 800bf0c:	1a21      	subs	r1, r4, r0
 800bf0e:	4628      	mov	r0, r5
 800bf10:	f001 f902 	bl	800d118 <_sbrk_r>
 800bf14:	3001      	adds	r0, #1
 800bf16:	d1f2      	bne.n	800befe <sbrk_aligned+0x22>
 800bf18:	e7ef      	b.n	800befa <sbrk_aligned+0x1e>
 800bf1a:	bf00      	nop
 800bf1c:	200012b8 	.word	0x200012b8

0800bf20 <_malloc_r>:
 800bf20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf24:	1ccd      	adds	r5, r1, #3
 800bf26:	f025 0503 	bic.w	r5, r5, #3
 800bf2a:	3508      	adds	r5, #8
 800bf2c:	2d0c      	cmp	r5, #12
 800bf2e:	bf38      	it	cc
 800bf30:	250c      	movcc	r5, #12
 800bf32:	2d00      	cmp	r5, #0
 800bf34:	4606      	mov	r6, r0
 800bf36:	db01      	blt.n	800bf3c <_malloc_r+0x1c>
 800bf38:	42a9      	cmp	r1, r5
 800bf3a:	d904      	bls.n	800bf46 <_malloc_r+0x26>
 800bf3c:	230c      	movs	r3, #12
 800bf3e:	6033      	str	r3, [r6, #0]
 800bf40:	2000      	movs	r0, #0
 800bf42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c01c <_malloc_r+0xfc>
 800bf4a:	f000 f87b 	bl	800c044 <__malloc_lock>
 800bf4e:	f8d8 3000 	ldr.w	r3, [r8]
 800bf52:	461c      	mov	r4, r3
 800bf54:	bb44      	cbnz	r4, 800bfa8 <_malloc_r+0x88>
 800bf56:	4629      	mov	r1, r5
 800bf58:	4630      	mov	r0, r6
 800bf5a:	f7ff ffbf 	bl	800bedc <sbrk_aligned>
 800bf5e:	1c43      	adds	r3, r0, #1
 800bf60:	4604      	mov	r4, r0
 800bf62:	d158      	bne.n	800c016 <_malloc_r+0xf6>
 800bf64:	f8d8 4000 	ldr.w	r4, [r8]
 800bf68:	4627      	mov	r7, r4
 800bf6a:	2f00      	cmp	r7, #0
 800bf6c:	d143      	bne.n	800bff6 <_malloc_r+0xd6>
 800bf6e:	2c00      	cmp	r4, #0
 800bf70:	d04b      	beq.n	800c00a <_malloc_r+0xea>
 800bf72:	6823      	ldr	r3, [r4, #0]
 800bf74:	4639      	mov	r1, r7
 800bf76:	4630      	mov	r0, r6
 800bf78:	eb04 0903 	add.w	r9, r4, r3
 800bf7c:	f001 f8cc 	bl	800d118 <_sbrk_r>
 800bf80:	4581      	cmp	r9, r0
 800bf82:	d142      	bne.n	800c00a <_malloc_r+0xea>
 800bf84:	6821      	ldr	r1, [r4, #0]
 800bf86:	4630      	mov	r0, r6
 800bf88:	1a6d      	subs	r5, r5, r1
 800bf8a:	4629      	mov	r1, r5
 800bf8c:	f7ff ffa6 	bl	800bedc <sbrk_aligned>
 800bf90:	3001      	adds	r0, #1
 800bf92:	d03a      	beq.n	800c00a <_malloc_r+0xea>
 800bf94:	6823      	ldr	r3, [r4, #0]
 800bf96:	442b      	add	r3, r5
 800bf98:	6023      	str	r3, [r4, #0]
 800bf9a:	f8d8 3000 	ldr.w	r3, [r8]
 800bf9e:	685a      	ldr	r2, [r3, #4]
 800bfa0:	bb62      	cbnz	r2, 800bffc <_malloc_r+0xdc>
 800bfa2:	f8c8 7000 	str.w	r7, [r8]
 800bfa6:	e00f      	b.n	800bfc8 <_malloc_r+0xa8>
 800bfa8:	6822      	ldr	r2, [r4, #0]
 800bfaa:	1b52      	subs	r2, r2, r5
 800bfac:	d420      	bmi.n	800bff0 <_malloc_r+0xd0>
 800bfae:	2a0b      	cmp	r2, #11
 800bfb0:	d917      	bls.n	800bfe2 <_malloc_r+0xc2>
 800bfb2:	1961      	adds	r1, r4, r5
 800bfb4:	42a3      	cmp	r3, r4
 800bfb6:	6025      	str	r5, [r4, #0]
 800bfb8:	bf18      	it	ne
 800bfba:	6059      	strne	r1, [r3, #4]
 800bfbc:	6863      	ldr	r3, [r4, #4]
 800bfbe:	bf08      	it	eq
 800bfc0:	f8c8 1000 	streq.w	r1, [r8]
 800bfc4:	5162      	str	r2, [r4, r5]
 800bfc6:	604b      	str	r3, [r1, #4]
 800bfc8:	4630      	mov	r0, r6
 800bfca:	f000 f841 	bl	800c050 <__malloc_unlock>
 800bfce:	f104 000b 	add.w	r0, r4, #11
 800bfd2:	1d23      	adds	r3, r4, #4
 800bfd4:	f020 0007 	bic.w	r0, r0, #7
 800bfd8:	1ac2      	subs	r2, r0, r3
 800bfda:	bf1c      	itt	ne
 800bfdc:	1a1b      	subne	r3, r3, r0
 800bfde:	50a3      	strne	r3, [r4, r2]
 800bfe0:	e7af      	b.n	800bf42 <_malloc_r+0x22>
 800bfe2:	6862      	ldr	r2, [r4, #4]
 800bfe4:	42a3      	cmp	r3, r4
 800bfe6:	bf0c      	ite	eq
 800bfe8:	f8c8 2000 	streq.w	r2, [r8]
 800bfec:	605a      	strne	r2, [r3, #4]
 800bfee:	e7eb      	b.n	800bfc8 <_malloc_r+0xa8>
 800bff0:	4623      	mov	r3, r4
 800bff2:	6864      	ldr	r4, [r4, #4]
 800bff4:	e7ae      	b.n	800bf54 <_malloc_r+0x34>
 800bff6:	463c      	mov	r4, r7
 800bff8:	687f      	ldr	r7, [r7, #4]
 800bffa:	e7b6      	b.n	800bf6a <_malloc_r+0x4a>
 800bffc:	461a      	mov	r2, r3
 800bffe:	685b      	ldr	r3, [r3, #4]
 800c000:	42a3      	cmp	r3, r4
 800c002:	d1fb      	bne.n	800bffc <_malloc_r+0xdc>
 800c004:	2300      	movs	r3, #0
 800c006:	6053      	str	r3, [r2, #4]
 800c008:	e7de      	b.n	800bfc8 <_malloc_r+0xa8>
 800c00a:	230c      	movs	r3, #12
 800c00c:	4630      	mov	r0, r6
 800c00e:	6033      	str	r3, [r6, #0]
 800c010:	f000 f81e 	bl	800c050 <__malloc_unlock>
 800c014:	e794      	b.n	800bf40 <_malloc_r+0x20>
 800c016:	6005      	str	r5, [r0, #0]
 800c018:	e7d6      	b.n	800bfc8 <_malloc_r+0xa8>
 800c01a:	bf00      	nop
 800c01c:	200012bc 	.word	0x200012bc

0800c020 <__ascii_mbtowc>:
 800c020:	b082      	sub	sp, #8
 800c022:	b901      	cbnz	r1, 800c026 <__ascii_mbtowc+0x6>
 800c024:	a901      	add	r1, sp, #4
 800c026:	b142      	cbz	r2, 800c03a <__ascii_mbtowc+0x1a>
 800c028:	b14b      	cbz	r3, 800c03e <__ascii_mbtowc+0x1e>
 800c02a:	7813      	ldrb	r3, [r2, #0]
 800c02c:	600b      	str	r3, [r1, #0]
 800c02e:	7812      	ldrb	r2, [r2, #0]
 800c030:	1e10      	subs	r0, r2, #0
 800c032:	bf18      	it	ne
 800c034:	2001      	movne	r0, #1
 800c036:	b002      	add	sp, #8
 800c038:	4770      	bx	lr
 800c03a:	4610      	mov	r0, r2
 800c03c:	e7fb      	b.n	800c036 <__ascii_mbtowc+0x16>
 800c03e:	f06f 0001 	mvn.w	r0, #1
 800c042:	e7f8      	b.n	800c036 <__ascii_mbtowc+0x16>

0800c044 <__malloc_lock>:
 800c044:	4801      	ldr	r0, [pc, #4]	@ (800c04c <__malloc_lock+0x8>)
 800c046:	f7ff bba4 	b.w	800b792 <__retarget_lock_acquire_recursive>
 800c04a:	bf00      	nop
 800c04c:	200012b4 	.word	0x200012b4

0800c050 <__malloc_unlock>:
 800c050:	4801      	ldr	r0, [pc, #4]	@ (800c058 <__malloc_unlock+0x8>)
 800c052:	f7ff bb9f 	b.w	800b794 <__retarget_lock_release_recursive>
 800c056:	bf00      	nop
 800c058:	200012b4 	.word	0x200012b4

0800c05c <_Balloc>:
 800c05c:	b570      	push	{r4, r5, r6, lr}
 800c05e:	69c6      	ldr	r6, [r0, #28]
 800c060:	4604      	mov	r4, r0
 800c062:	460d      	mov	r5, r1
 800c064:	b976      	cbnz	r6, 800c084 <_Balloc+0x28>
 800c066:	2010      	movs	r0, #16
 800c068:	f001 f8a6 	bl	800d1b8 <malloc>
 800c06c:	4602      	mov	r2, r0
 800c06e:	61e0      	str	r0, [r4, #28]
 800c070:	b920      	cbnz	r0, 800c07c <_Balloc+0x20>
 800c072:	216b      	movs	r1, #107	@ 0x6b
 800c074:	4b17      	ldr	r3, [pc, #92]	@ (800c0d4 <_Balloc+0x78>)
 800c076:	4818      	ldr	r0, [pc, #96]	@ (800c0d8 <_Balloc+0x7c>)
 800c078:	f001 f86c 	bl	800d154 <__assert_func>
 800c07c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c080:	6006      	str	r6, [r0, #0]
 800c082:	60c6      	str	r6, [r0, #12]
 800c084:	69e6      	ldr	r6, [r4, #28]
 800c086:	68f3      	ldr	r3, [r6, #12]
 800c088:	b183      	cbz	r3, 800c0ac <_Balloc+0x50>
 800c08a:	69e3      	ldr	r3, [r4, #28]
 800c08c:	68db      	ldr	r3, [r3, #12]
 800c08e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c092:	b9b8      	cbnz	r0, 800c0c4 <_Balloc+0x68>
 800c094:	2101      	movs	r1, #1
 800c096:	fa01 f605 	lsl.w	r6, r1, r5
 800c09a:	1d72      	adds	r2, r6, #5
 800c09c:	4620      	mov	r0, r4
 800c09e:	0092      	lsls	r2, r2, #2
 800c0a0:	f001 f876 	bl	800d190 <_calloc_r>
 800c0a4:	b160      	cbz	r0, 800c0c0 <_Balloc+0x64>
 800c0a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c0aa:	e00e      	b.n	800c0ca <_Balloc+0x6e>
 800c0ac:	2221      	movs	r2, #33	@ 0x21
 800c0ae:	2104      	movs	r1, #4
 800c0b0:	4620      	mov	r0, r4
 800c0b2:	f001 f86d 	bl	800d190 <_calloc_r>
 800c0b6:	69e3      	ldr	r3, [r4, #28]
 800c0b8:	60f0      	str	r0, [r6, #12]
 800c0ba:	68db      	ldr	r3, [r3, #12]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d1e4      	bne.n	800c08a <_Balloc+0x2e>
 800c0c0:	2000      	movs	r0, #0
 800c0c2:	bd70      	pop	{r4, r5, r6, pc}
 800c0c4:	6802      	ldr	r2, [r0, #0]
 800c0c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c0d0:	e7f7      	b.n	800c0c2 <_Balloc+0x66>
 800c0d2:	bf00      	nop
 800c0d4:	0800db62 	.word	0x0800db62
 800c0d8:	0800db79 	.word	0x0800db79

0800c0dc <_Bfree>:
 800c0dc:	b570      	push	{r4, r5, r6, lr}
 800c0de:	69c6      	ldr	r6, [r0, #28]
 800c0e0:	4605      	mov	r5, r0
 800c0e2:	460c      	mov	r4, r1
 800c0e4:	b976      	cbnz	r6, 800c104 <_Bfree+0x28>
 800c0e6:	2010      	movs	r0, #16
 800c0e8:	f001 f866 	bl	800d1b8 <malloc>
 800c0ec:	4602      	mov	r2, r0
 800c0ee:	61e8      	str	r0, [r5, #28]
 800c0f0:	b920      	cbnz	r0, 800c0fc <_Bfree+0x20>
 800c0f2:	218f      	movs	r1, #143	@ 0x8f
 800c0f4:	4b08      	ldr	r3, [pc, #32]	@ (800c118 <_Bfree+0x3c>)
 800c0f6:	4809      	ldr	r0, [pc, #36]	@ (800c11c <_Bfree+0x40>)
 800c0f8:	f001 f82c 	bl	800d154 <__assert_func>
 800c0fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c100:	6006      	str	r6, [r0, #0]
 800c102:	60c6      	str	r6, [r0, #12]
 800c104:	b13c      	cbz	r4, 800c116 <_Bfree+0x3a>
 800c106:	69eb      	ldr	r3, [r5, #28]
 800c108:	6862      	ldr	r2, [r4, #4]
 800c10a:	68db      	ldr	r3, [r3, #12]
 800c10c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c110:	6021      	str	r1, [r4, #0]
 800c112:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c116:	bd70      	pop	{r4, r5, r6, pc}
 800c118:	0800db62 	.word	0x0800db62
 800c11c:	0800db79 	.word	0x0800db79

0800c120 <__multadd>:
 800c120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c124:	4607      	mov	r7, r0
 800c126:	460c      	mov	r4, r1
 800c128:	461e      	mov	r6, r3
 800c12a:	2000      	movs	r0, #0
 800c12c:	690d      	ldr	r5, [r1, #16]
 800c12e:	f101 0c14 	add.w	ip, r1, #20
 800c132:	f8dc 3000 	ldr.w	r3, [ip]
 800c136:	3001      	adds	r0, #1
 800c138:	b299      	uxth	r1, r3
 800c13a:	fb02 6101 	mla	r1, r2, r1, r6
 800c13e:	0c1e      	lsrs	r6, r3, #16
 800c140:	0c0b      	lsrs	r3, r1, #16
 800c142:	fb02 3306 	mla	r3, r2, r6, r3
 800c146:	b289      	uxth	r1, r1
 800c148:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c14c:	4285      	cmp	r5, r0
 800c14e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c152:	f84c 1b04 	str.w	r1, [ip], #4
 800c156:	dcec      	bgt.n	800c132 <__multadd+0x12>
 800c158:	b30e      	cbz	r6, 800c19e <__multadd+0x7e>
 800c15a:	68a3      	ldr	r3, [r4, #8]
 800c15c:	42ab      	cmp	r3, r5
 800c15e:	dc19      	bgt.n	800c194 <__multadd+0x74>
 800c160:	6861      	ldr	r1, [r4, #4]
 800c162:	4638      	mov	r0, r7
 800c164:	3101      	adds	r1, #1
 800c166:	f7ff ff79 	bl	800c05c <_Balloc>
 800c16a:	4680      	mov	r8, r0
 800c16c:	b928      	cbnz	r0, 800c17a <__multadd+0x5a>
 800c16e:	4602      	mov	r2, r0
 800c170:	21ba      	movs	r1, #186	@ 0xba
 800c172:	4b0c      	ldr	r3, [pc, #48]	@ (800c1a4 <__multadd+0x84>)
 800c174:	480c      	ldr	r0, [pc, #48]	@ (800c1a8 <__multadd+0x88>)
 800c176:	f000 ffed 	bl	800d154 <__assert_func>
 800c17a:	6922      	ldr	r2, [r4, #16]
 800c17c:	f104 010c 	add.w	r1, r4, #12
 800c180:	3202      	adds	r2, #2
 800c182:	0092      	lsls	r2, r2, #2
 800c184:	300c      	adds	r0, #12
 800c186:	f7ff fb0e 	bl	800b7a6 <memcpy>
 800c18a:	4621      	mov	r1, r4
 800c18c:	4638      	mov	r0, r7
 800c18e:	f7ff ffa5 	bl	800c0dc <_Bfree>
 800c192:	4644      	mov	r4, r8
 800c194:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c198:	3501      	adds	r5, #1
 800c19a:	615e      	str	r6, [r3, #20]
 800c19c:	6125      	str	r5, [r4, #16]
 800c19e:	4620      	mov	r0, r4
 800c1a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1a4:	0800daf1 	.word	0x0800daf1
 800c1a8:	0800db79 	.word	0x0800db79

0800c1ac <__s2b>:
 800c1ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1b0:	4615      	mov	r5, r2
 800c1b2:	2209      	movs	r2, #9
 800c1b4:	461f      	mov	r7, r3
 800c1b6:	3308      	adds	r3, #8
 800c1b8:	460c      	mov	r4, r1
 800c1ba:	fb93 f3f2 	sdiv	r3, r3, r2
 800c1be:	4606      	mov	r6, r0
 800c1c0:	2201      	movs	r2, #1
 800c1c2:	2100      	movs	r1, #0
 800c1c4:	429a      	cmp	r2, r3
 800c1c6:	db09      	blt.n	800c1dc <__s2b+0x30>
 800c1c8:	4630      	mov	r0, r6
 800c1ca:	f7ff ff47 	bl	800c05c <_Balloc>
 800c1ce:	b940      	cbnz	r0, 800c1e2 <__s2b+0x36>
 800c1d0:	4602      	mov	r2, r0
 800c1d2:	21d3      	movs	r1, #211	@ 0xd3
 800c1d4:	4b18      	ldr	r3, [pc, #96]	@ (800c238 <__s2b+0x8c>)
 800c1d6:	4819      	ldr	r0, [pc, #100]	@ (800c23c <__s2b+0x90>)
 800c1d8:	f000 ffbc 	bl	800d154 <__assert_func>
 800c1dc:	0052      	lsls	r2, r2, #1
 800c1de:	3101      	adds	r1, #1
 800c1e0:	e7f0      	b.n	800c1c4 <__s2b+0x18>
 800c1e2:	9b08      	ldr	r3, [sp, #32]
 800c1e4:	2d09      	cmp	r5, #9
 800c1e6:	6143      	str	r3, [r0, #20]
 800c1e8:	f04f 0301 	mov.w	r3, #1
 800c1ec:	6103      	str	r3, [r0, #16]
 800c1ee:	dd16      	ble.n	800c21e <__s2b+0x72>
 800c1f0:	f104 0909 	add.w	r9, r4, #9
 800c1f4:	46c8      	mov	r8, r9
 800c1f6:	442c      	add	r4, r5
 800c1f8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c1fc:	4601      	mov	r1, r0
 800c1fe:	220a      	movs	r2, #10
 800c200:	4630      	mov	r0, r6
 800c202:	3b30      	subs	r3, #48	@ 0x30
 800c204:	f7ff ff8c 	bl	800c120 <__multadd>
 800c208:	45a0      	cmp	r8, r4
 800c20a:	d1f5      	bne.n	800c1f8 <__s2b+0x4c>
 800c20c:	f1a5 0408 	sub.w	r4, r5, #8
 800c210:	444c      	add	r4, r9
 800c212:	1b2d      	subs	r5, r5, r4
 800c214:	1963      	adds	r3, r4, r5
 800c216:	42bb      	cmp	r3, r7
 800c218:	db04      	blt.n	800c224 <__s2b+0x78>
 800c21a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c21e:	2509      	movs	r5, #9
 800c220:	340a      	adds	r4, #10
 800c222:	e7f6      	b.n	800c212 <__s2b+0x66>
 800c224:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c228:	4601      	mov	r1, r0
 800c22a:	220a      	movs	r2, #10
 800c22c:	4630      	mov	r0, r6
 800c22e:	3b30      	subs	r3, #48	@ 0x30
 800c230:	f7ff ff76 	bl	800c120 <__multadd>
 800c234:	e7ee      	b.n	800c214 <__s2b+0x68>
 800c236:	bf00      	nop
 800c238:	0800daf1 	.word	0x0800daf1
 800c23c:	0800db79 	.word	0x0800db79

0800c240 <__hi0bits>:
 800c240:	4603      	mov	r3, r0
 800c242:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c246:	bf3a      	itte	cc
 800c248:	0403      	lslcc	r3, r0, #16
 800c24a:	2010      	movcc	r0, #16
 800c24c:	2000      	movcs	r0, #0
 800c24e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c252:	bf3c      	itt	cc
 800c254:	021b      	lslcc	r3, r3, #8
 800c256:	3008      	addcc	r0, #8
 800c258:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c25c:	bf3c      	itt	cc
 800c25e:	011b      	lslcc	r3, r3, #4
 800c260:	3004      	addcc	r0, #4
 800c262:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c266:	bf3c      	itt	cc
 800c268:	009b      	lslcc	r3, r3, #2
 800c26a:	3002      	addcc	r0, #2
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	db05      	blt.n	800c27c <__hi0bits+0x3c>
 800c270:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c274:	f100 0001 	add.w	r0, r0, #1
 800c278:	bf08      	it	eq
 800c27a:	2020      	moveq	r0, #32
 800c27c:	4770      	bx	lr

0800c27e <__lo0bits>:
 800c27e:	6803      	ldr	r3, [r0, #0]
 800c280:	4602      	mov	r2, r0
 800c282:	f013 0007 	ands.w	r0, r3, #7
 800c286:	d00b      	beq.n	800c2a0 <__lo0bits+0x22>
 800c288:	07d9      	lsls	r1, r3, #31
 800c28a:	d421      	bmi.n	800c2d0 <__lo0bits+0x52>
 800c28c:	0798      	lsls	r0, r3, #30
 800c28e:	bf49      	itett	mi
 800c290:	085b      	lsrmi	r3, r3, #1
 800c292:	089b      	lsrpl	r3, r3, #2
 800c294:	2001      	movmi	r0, #1
 800c296:	6013      	strmi	r3, [r2, #0]
 800c298:	bf5c      	itt	pl
 800c29a:	2002      	movpl	r0, #2
 800c29c:	6013      	strpl	r3, [r2, #0]
 800c29e:	4770      	bx	lr
 800c2a0:	b299      	uxth	r1, r3
 800c2a2:	b909      	cbnz	r1, 800c2a8 <__lo0bits+0x2a>
 800c2a4:	2010      	movs	r0, #16
 800c2a6:	0c1b      	lsrs	r3, r3, #16
 800c2a8:	b2d9      	uxtb	r1, r3
 800c2aa:	b909      	cbnz	r1, 800c2b0 <__lo0bits+0x32>
 800c2ac:	3008      	adds	r0, #8
 800c2ae:	0a1b      	lsrs	r3, r3, #8
 800c2b0:	0719      	lsls	r1, r3, #28
 800c2b2:	bf04      	itt	eq
 800c2b4:	091b      	lsreq	r3, r3, #4
 800c2b6:	3004      	addeq	r0, #4
 800c2b8:	0799      	lsls	r1, r3, #30
 800c2ba:	bf04      	itt	eq
 800c2bc:	089b      	lsreq	r3, r3, #2
 800c2be:	3002      	addeq	r0, #2
 800c2c0:	07d9      	lsls	r1, r3, #31
 800c2c2:	d403      	bmi.n	800c2cc <__lo0bits+0x4e>
 800c2c4:	085b      	lsrs	r3, r3, #1
 800c2c6:	f100 0001 	add.w	r0, r0, #1
 800c2ca:	d003      	beq.n	800c2d4 <__lo0bits+0x56>
 800c2cc:	6013      	str	r3, [r2, #0]
 800c2ce:	4770      	bx	lr
 800c2d0:	2000      	movs	r0, #0
 800c2d2:	4770      	bx	lr
 800c2d4:	2020      	movs	r0, #32
 800c2d6:	4770      	bx	lr

0800c2d8 <__i2b>:
 800c2d8:	b510      	push	{r4, lr}
 800c2da:	460c      	mov	r4, r1
 800c2dc:	2101      	movs	r1, #1
 800c2de:	f7ff febd 	bl	800c05c <_Balloc>
 800c2e2:	4602      	mov	r2, r0
 800c2e4:	b928      	cbnz	r0, 800c2f2 <__i2b+0x1a>
 800c2e6:	f240 1145 	movw	r1, #325	@ 0x145
 800c2ea:	4b04      	ldr	r3, [pc, #16]	@ (800c2fc <__i2b+0x24>)
 800c2ec:	4804      	ldr	r0, [pc, #16]	@ (800c300 <__i2b+0x28>)
 800c2ee:	f000 ff31 	bl	800d154 <__assert_func>
 800c2f2:	2301      	movs	r3, #1
 800c2f4:	6144      	str	r4, [r0, #20]
 800c2f6:	6103      	str	r3, [r0, #16]
 800c2f8:	bd10      	pop	{r4, pc}
 800c2fa:	bf00      	nop
 800c2fc:	0800daf1 	.word	0x0800daf1
 800c300:	0800db79 	.word	0x0800db79

0800c304 <__multiply>:
 800c304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c308:	4614      	mov	r4, r2
 800c30a:	690a      	ldr	r2, [r1, #16]
 800c30c:	6923      	ldr	r3, [r4, #16]
 800c30e:	460f      	mov	r7, r1
 800c310:	429a      	cmp	r2, r3
 800c312:	bfa2      	ittt	ge
 800c314:	4623      	movge	r3, r4
 800c316:	460c      	movge	r4, r1
 800c318:	461f      	movge	r7, r3
 800c31a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c31e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c322:	68a3      	ldr	r3, [r4, #8]
 800c324:	6861      	ldr	r1, [r4, #4]
 800c326:	eb0a 0609 	add.w	r6, sl, r9
 800c32a:	42b3      	cmp	r3, r6
 800c32c:	b085      	sub	sp, #20
 800c32e:	bfb8      	it	lt
 800c330:	3101      	addlt	r1, #1
 800c332:	f7ff fe93 	bl	800c05c <_Balloc>
 800c336:	b930      	cbnz	r0, 800c346 <__multiply+0x42>
 800c338:	4602      	mov	r2, r0
 800c33a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c33e:	4b43      	ldr	r3, [pc, #268]	@ (800c44c <__multiply+0x148>)
 800c340:	4843      	ldr	r0, [pc, #268]	@ (800c450 <__multiply+0x14c>)
 800c342:	f000 ff07 	bl	800d154 <__assert_func>
 800c346:	f100 0514 	add.w	r5, r0, #20
 800c34a:	462b      	mov	r3, r5
 800c34c:	2200      	movs	r2, #0
 800c34e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c352:	4543      	cmp	r3, r8
 800c354:	d321      	bcc.n	800c39a <__multiply+0x96>
 800c356:	f107 0114 	add.w	r1, r7, #20
 800c35a:	f104 0214 	add.w	r2, r4, #20
 800c35e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c362:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c366:	9302      	str	r3, [sp, #8]
 800c368:	1b13      	subs	r3, r2, r4
 800c36a:	3b15      	subs	r3, #21
 800c36c:	f023 0303 	bic.w	r3, r3, #3
 800c370:	3304      	adds	r3, #4
 800c372:	f104 0715 	add.w	r7, r4, #21
 800c376:	42ba      	cmp	r2, r7
 800c378:	bf38      	it	cc
 800c37a:	2304      	movcc	r3, #4
 800c37c:	9301      	str	r3, [sp, #4]
 800c37e:	9b02      	ldr	r3, [sp, #8]
 800c380:	9103      	str	r1, [sp, #12]
 800c382:	428b      	cmp	r3, r1
 800c384:	d80c      	bhi.n	800c3a0 <__multiply+0x9c>
 800c386:	2e00      	cmp	r6, #0
 800c388:	dd03      	ble.n	800c392 <__multiply+0x8e>
 800c38a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d05a      	beq.n	800c448 <__multiply+0x144>
 800c392:	6106      	str	r6, [r0, #16]
 800c394:	b005      	add	sp, #20
 800c396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c39a:	f843 2b04 	str.w	r2, [r3], #4
 800c39e:	e7d8      	b.n	800c352 <__multiply+0x4e>
 800c3a0:	f8b1 a000 	ldrh.w	sl, [r1]
 800c3a4:	f1ba 0f00 	cmp.w	sl, #0
 800c3a8:	d023      	beq.n	800c3f2 <__multiply+0xee>
 800c3aa:	46a9      	mov	r9, r5
 800c3ac:	f04f 0c00 	mov.w	ip, #0
 800c3b0:	f104 0e14 	add.w	lr, r4, #20
 800c3b4:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c3b8:	f8d9 3000 	ldr.w	r3, [r9]
 800c3bc:	fa1f fb87 	uxth.w	fp, r7
 800c3c0:	b29b      	uxth	r3, r3
 800c3c2:	fb0a 330b 	mla	r3, sl, fp, r3
 800c3c6:	4463      	add	r3, ip
 800c3c8:	f8d9 c000 	ldr.w	ip, [r9]
 800c3cc:	0c3f      	lsrs	r7, r7, #16
 800c3ce:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800c3d2:	fb0a c707 	mla	r7, sl, r7, ip
 800c3d6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c3da:	b29b      	uxth	r3, r3
 800c3dc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c3e0:	4572      	cmp	r2, lr
 800c3e2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c3e6:	f849 3b04 	str.w	r3, [r9], #4
 800c3ea:	d8e3      	bhi.n	800c3b4 <__multiply+0xb0>
 800c3ec:	9b01      	ldr	r3, [sp, #4]
 800c3ee:	f845 c003 	str.w	ip, [r5, r3]
 800c3f2:	9b03      	ldr	r3, [sp, #12]
 800c3f4:	3104      	adds	r1, #4
 800c3f6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c3fa:	f1b9 0f00 	cmp.w	r9, #0
 800c3fe:	d021      	beq.n	800c444 <__multiply+0x140>
 800c400:	46ae      	mov	lr, r5
 800c402:	f04f 0a00 	mov.w	sl, #0
 800c406:	682b      	ldr	r3, [r5, #0]
 800c408:	f104 0c14 	add.w	ip, r4, #20
 800c40c:	f8bc b000 	ldrh.w	fp, [ip]
 800c410:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c414:	b29b      	uxth	r3, r3
 800c416:	fb09 770b 	mla	r7, r9, fp, r7
 800c41a:	4457      	add	r7, sl
 800c41c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c420:	f84e 3b04 	str.w	r3, [lr], #4
 800c424:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c428:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c42c:	f8be 3000 	ldrh.w	r3, [lr]
 800c430:	4562      	cmp	r2, ip
 800c432:	fb09 330a 	mla	r3, r9, sl, r3
 800c436:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c43a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c43e:	d8e5      	bhi.n	800c40c <__multiply+0x108>
 800c440:	9f01      	ldr	r7, [sp, #4]
 800c442:	51eb      	str	r3, [r5, r7]
 800c444:	3504      	adds	r5, #4
 800c446:	e79a      	b.n	800c37e <__multiply+0x7a>
 800c448:	3e01      	subs	r6, #1
 800c44a:	e79c      	b.n	800c386 <__multiply+0x82>
 800c44c:	0800daf1 	.word	0x0800daf1
 800c450:	0800db79 	.word	0x0800db79

0800c454 <__pow5mult>:
 800c454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c458:	4615      	mov	r5, r2
 800c45a:	f012 0203 	ands.w	r2, r2, #3
 800c45e:	4607      	mov	r7, r0
 800c460:	460e      	mov	r6, r1
 800c462:	d007      	beq.n	800c474 <__pow5mult+0x20>
 800c464:	4c25      	ldr	r4, [pc, #148]	@ (800c4fc <__pow5mult+0xa8>)
 800c466:	3a01      	subs	r2, #1
 800c468:	2300      	movs	r3, #0
 800c46a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c46e:	f7ff fe57 	bl	800c120 <__multadd>
 800c472:	4606      	mov	r6, r0
 800c474:	10ad      	asrs	r5, r5, #2
 800c476:	d03d      	beq.n	800c4f4 <__pow5mult+0xa0>
 800c478:	69fc      	ldr	r4, [r7, #28]
 800c47a:	b97c      	cbnz	r4, 800c49c <__pow5mult+0x48>
 800c47c:	2010      	movs	r0, #16
 800c47e:	f000 fe9b 	bl	800d1b8 <malloc>
 800c482:	4602      	mov	r2, r0
 800c484:	61f8      	str	r0, [r7, #28]
 800c486:	b928      	cbnz	r0, 800c494 <__pow5mult+0x40>
 800c488:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c48c:	4b1c      	ldr	r3, [pc, #112]	@ (800c500 <__pow5mult+0xac>)
 800c48e:	481d      	ldr	r0, [pc, #116]	@ (800c504 <__pow5mult+0xb0>)
 800c490:	f000 fe60 	bl	800d154 <__assert_func>
 800c494:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c498:	6004      	str	r4, [r0, #0]
 800c49a:	60c4      	str	r4, [r0, #12]
 800c49c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c4a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c4a4:	b94c      	cbnz	r4, 800c4ba <__pow5mult+0x66>
 800c4a6:	f240 2171 	movw	r1, #625	@ 0x271
 800c4aa:	4638      	mov	r0, r7
 800c4ac:	f7ff ff14 	bl	800c2d8 <__i2b>
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	4604      	mov	r4, r0
 800c4b4:	f8c8 0008 	str.w	r0, [r8, #8]
 800c4b8:	6003      	str	r3, [r0, #0]
 800c4ba:	f04f 0900 	mov.w	r9, #0
 800c4be:	07eb      	lsls	r3, r5, #31
 800c4c0:	d50a      	bpl.n	800c4d8 <__pow5mult+0x84>
 800c4c2:	4631      	mov	r1, r6
 800c4c4:	4622      	mov	r2, r4
 800c4c6:	4638      	mov	r0, r7
 800c4c8:	f7ff ff1c 	bl	800c304 <__multiply>
 800c4cc:	4680      	mov	r8, r0
 800c4ce:	4631      	mov	r1, r6
 800c4d0:	4638      	mov	r0, r7
 800c4d2:	f7ff fe03 	bl	800c0dc <_Bfree>
 800c4d6:	4646      	mov	r6, r8
 800c4d8:	106d      	asrs	r5, r5, #1
 800c4da:	d00b      	beq.n	800c4f4 <__pow5mult+0xa0>
 800c4dc:	6820      	ldr	r0, [r4, #0]
 800c4de:	b938      	cbnz	r0, 800c4f0 <__pow5mult+0x9c>
 800c4e0:	4622      	mov	r2, r4
 800c4e2:	4621      	mov	r1, r4
 800c4e4:	4638      	mov	r0, r7
 800c4e6:	f7ff ff0d 	bl	800c304 <__multiply>
 800c4ea:	6020      	str	r0, [r4, #0]
 800c4ec:	f8c0 9000 	str.w	r9, [r0]
 800c4f0:	4604      	mov	r4, r0
 800c4f2:	e7e4      	b.n	800c4be <__pow5mult+0x6a>
 800c4f4:	4630      	mov	r0, r6
 800c4f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4fa:	bf00      	nop
 800c4fc:	0800dbd4 	.word	0x0800dbd4
 800c500:	0800db62 	.word	0x0800db62
 800c504:	0800db79 	.word	0x0800db79

0800c508 <__lshift>:
 800c508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c50c:	460c      	mov	r4, r1
 800c50e:	4607      	mov	r7, r0
 800c510:	4691      	mov	r9, r2
 800c512:	6923      	ldr	r3, [r4, #16]
 800c514:	6849      	ldr	r1, [r1, #4]
 800c516:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c51a:	68a3      	ldr	r3, [r4, #8]
 800c51c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c520:	f108 0601 	add.w	r6, r8, #1
 800c524:	42b3      	cmp	r3, r6
 800c526:	db0b      	blt.n	800c540 <__lshift+0x38>
 800c528:	4638      	mov	r0, r7
 800c52a:	f7ff fd97 	bl	800c05c <_Balloc>
 800c52e:	4605      	mov	r5, r0
 800c530:	b948      	cbnz	r0, 800c546 <__lshift+0x3e>
 800c532:	4602      	mov	r2, r0
 800c534:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c538:	4b27      	ldr	r3, [pc, #156]	@ (800c5d8 <__lshift+0xd0>)
 800c53a:	4828      	ldr	r0, [pc, #160]	@ (800c5dc <__lshift+0xd4>)
 800c53c:	f000 fe0a 	bl	800d154 <__assert_func>
 800c540:	3101      	adds	r1, #1
 800c542:	005b      	lsls	r3, r3, #1
 800c544:	e7ee      	b.n	800c524 <__lshift+0x1c>
 800c546:	2300      	movs	r3, #0
 800c548:	f100 0114 	add.w	r1, r0, #20
 800c54c:	f100 0210 	add.w	r2, r0, #16
 800c550:	4618      	mov	r0, r3
 800c552:	4553      	cmp	r3, sl
 800c554:	db33      	blt.n	800c5be <__lshift+0xb6>
 800c556:	6920      	ldr	r0, [r4, #16]
 800c558:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c55c:	f104 0314 	add.w	r3, r4, #20
 800c560:	f019 091f 	ands.w	r9, r9, #31
 800c564:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c568:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c56c:	d02b      	beq.n	800c5c6 <__lshift+0xbe>
 800c56e:	468a      	mov	sl, r1
 800c570:	2200      	movs	r2, #0
 800c572:	f1c9 0e20 	rsb	lr, r9, #32
 800c576:	6818      	ldr	r0, [r3, #0]
 800c578:	fa00 f009 	lsl.w	r0, r0, r9
 800c57c:	4310      	orrs	r0, r2
 800c57e:	f84a 0b04 	str.w	r0, [sl], #4
 800c582:	f853 2b04 	ldr.w	r2, [r3], #4
 800c586:	459c      	cmp	ip, r3
 800c588:	fa22 f20e 	lsr.w	r2, r2, lr
 800c58c:	d8f3      	bhi.n	800c576 <__lshift+0x6e>
 800c58e:	ebac 0304 	sub.w	r3, ip, r4
 800c592:	3b15      	subs	r3, #21
 800c594:	f023 0303 	bic.w	r3, r3, #3
 800c598:	3304      	adds	r3, #4
 800c59a:	f104 0015 	add.w	r0, r4, #21
 800c59e:	4584      	cmp	ip, r0
 800c5a0:	bf38      	it	cc
 800c5a2:	2304      	movcc	r3, #4
 800c5a4:	50ca      	str	r2, [r1, r3]
 800c5a6:	b10a      	cbz	r2, 800c5ac <__lshift+0xa4>
 800c5a8:	f108 0602 	add.w	r6, r8, #2
 800c5ac:	3e01      	subs	r6, #1
 800c5ae:	4638      	mov	r0, r7
 800c5b0:	4621      	mov	r1, r4
 800c5b2:	612e      	str	r6, [r5, #16]
 800c5b4:	f7ff fd92 	bl	800c0dc <_Bfree>
 800c5b8:	4628      	mov	r0, r5
 800c5ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5be:	f842 0f04 	str.w	r0, [r2, #4]!
 800c5c2:	3301      	adds	r3, #1
 800c5c4:	e7c5      	b.n	800c552 <__lshift+0x4a>
 800c5c6:	3904      	subs	r1, #4
 800c5c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5cc:	459c      	cmp	ip, r3
 800c5ce:	f841 2f04 	str.w	r2, [r1, #4]!
 800c5d2:	d8f9      	bhi.n	800c5c8 <__lshift+0xc0>
 800c5d4:	e7ea      	b.n	800c5ac <__lshift+0xa4>
 800c5d6:	bf00      	nop
 800c5d8:	0800daf1 	.word	0x0800daf1
 800c5dc:	0800db79 	.word	0x0800db79

0800c5e0 <__mcmp>:
 800c5e0:	4603      	mov	r3, r0
 800c5e2:	690a      	ldr	r2, [r1, #16]
 800c5e4:	6900      	ldr	r0, [r0, #16]
 800c5e6:	b530      	push	{r4, r5, lr}
 800c5e8:	1a80      	subs	r0, r0, r2
 800c5ea:	d10e      	bne.n	800c60a <__mcmp+0x2a>
 800c5ec:	3314      	adds	r3, #20
 800c5ee:	3114      	adds	r1, #20
 800c5f0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c5f4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c5f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c5fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c600:	4295      	cmp	r5, r2
 800c602:	d003      	beq.n	800c60c <__mcmp+0x2c>
 800c604:	d205      	bcs.n	800c612 <__mcmp+0x32>
 800c606:	f04f 30ff 	mov.w	r0, #4294967295
 800c60a:	bd30      	pop	{r4, r5, pc}
 800c60c:	42a3      	cmp	r3, r4
 800c60e:	d3f3      	bcc.n	800c5f8 <__mcmp+0x18>
 800c610:	e7fb      	b.n	800c60a <__mcmp+0x2a>
 800c612:	2001      	movs	r0, #1
 800c614:	e7f9      	b.n	800c60a <__mcmp+0x2a>
	...

0800c618 <__mdiff>:
 800c618:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c61c:	4689      	mov	r9, r1
 800c61e:	4606      	mov	r6, r0
 800c620:	4611      	mov	r1, r2
 800c622:	4648      	mov	r0, r9
 800c624:	4614      	mov	r4, r2
 800c626:	f7ff ffdb 	bl	800c5e0 <__mcmp>
 800c62a:	1e05      	subs	r5, r0, #0
 800c62c:	d112      	bne.n	800c654 <__mdiff+0x3c>
 800c62e:	4629      	mov	r1, r5
 800c630:	4630      	mov	r0, r6
 800c632:	f7ff fd13 	bl	800c05c <_Balloc>
 800c636:	4602      	mov	r2, r0
 800c638:	b928      	cbnz	r0, 800c646 <__mdiff+0x2e>
 800c63a:	f240 2137 	movw	r1, #567	@ 0x237
 800c63e:	4b3e      	ldr	r3, [pc, #248]	@ (800c738 <__mdiff+0x120>)
 800c640:	483e      	ldr	r0, [pc, #248]	@ (800c73c <__mdiff+0x124>)
 800c642:	f000 fd87 	bl	800d154 <__assert_func>
 800c646:	2301      	movs	r3, #1
 800c648:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c64c:	4610      	mov	r0, r2
 800c64e:	b003      	add	sp, #12
 800c650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c654:	bfbc      	itt	lt
 800c656:	464b      	movlt	r3, r9
 800c658:	46a1      	movlt	r9, r4
 800c65a:	4630      	mov	r0, r6
 800c65c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c660:	bfba      	itte	lt
 800c662:	461c      	movlt	r4, r3
 800c664:	2501      	movlt	r5, #1
 800c666:	2500      	movge	r5, #0
 800c668:	f7ff fcf8 	bl	800c05c <_Balloc>
 800c66c:	4602      	mov	r2, r0
 800c66e:	b918      	cbnz	r0, 800c678 <__mdiff+0x60>
 800c670:	f240 2145 	movw	r1, #581	@ 0x245
 800c674:	4b30      	ldr	r3, [pc, #192]	@ (800c738 <__mdiff+0x120>)
 800c676:	e7e3      	b.n	800c640 <__mdiff+0x28>
 800c678:	f100 0b14 	add.w	fp, r0, #20
 800c67c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c680:	f109 0310 	add.w	r3, r9, #16
 800c684:	60c5      	str	r5, [r0, #12]
 800c686:	f04f 0c00 	mov.w	ip, #0
 800c68a:	f109 0514 	add.w	r5, r9, #20
 800c68e:	46d9      	mov	r9, fp
 800c690:	6926      	ldr	r6, [r4, #16]
 800c692:	f104 0e14 	add.w	lr, r4, #20
 800c696:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c69a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c69e:	9301      	str	r3, [sp, #4]
 800c6a0:	9b01      	ldr	r3, [sp, #4]
 800c6a2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c6a6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c6aa:	b281      	uxth	r1, r0
 800c6ac:	9301      	str	r3, [sp, #4]
 800c6ae:	fa1f f38a 	uxth.w	r3, sl
 800c6b2:	1a5b      	subs	r3, r3, r1
 800c6b4:	0c00      	lsrs	r0, r0, #16
 800c6b6:	4463      	add	r3, ip
 800c6b8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c6bc:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c6c0:	b29b      	uxth	r3, r3
 800c6c2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c6c6:	4576      	cmp	r6, lr
 800c6c8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c6cc:	f849 3b04 	str.w	r3, [r9], #4
 800c6d0:	d8e6      	bhi.n	800c6a0 <__mdiff+0x88>
 800c6d2:	1b33      	subs	r3, r6, r4
 800c6d4:	3b15      	subs	r3, #21
 800c6d6:	f023 0303 	bic.w	r3, r3, #3
 800c6da:	3415      	adds	r4, #21
 800c6dc:	3304      	adds	r3, #4
 800c6de:	42a6      	cmp	r6, r4
 800c6e0:	bf38      	it	cc
 800c6e2:	2304      	movcc	r3, #4
 800c6e4:	441d      	add	r5, r3
 800c6e6:	445b      	add	r3, fp
 800c6e8:	461e      	mov	r6, r3
 800c6ea:	462c      	mov	r4, r5
 800c6ec:	4544      	cmp	r4, r8
 800c6ee:	d30e      	bcc.n	800c70e <__mdiff+0xf6>
 800c6f0:	f108 0103 	add.w	r1, r8, #3
 800c6f4:	1b49      	subs	r1, r1, r5
 800c6f6:	f021 0103 	bic.w	r1, r1, #3
 800c6fa:	3d03      	subs	r5, #3
 800c6fc:	45a8      	cmp	r8, r5
 800c6fe:	bf38      	it	cc
 800c700:	2100      	movcc	r1, #0
 800c702:	440b      	add	r3, r1
 800c704:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c708:	b199      	cbz	r1, 800c732 <__mdiff+0x11a>
 800c70a:	6117      	str	r7, [r2, #16]
 800c70c:	e79e      	b.n	800c64c <__mdiff+0x34>
 800c70e:	46e6      	mov	lr, ip
 800c710:	f854 1b04 	ldr.w	r1, [r4], #4
 800c714:	fa1f fc81 	uxth.w	ip, r1
 800c718:	44f4      	add	ip, lr
 800c71a:	0c08      	lsrs	r0, r1, #16
 800c71c:	4471      	add	r1, lr
 800c71e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c722:	b289      	uxth	r1, r1
 800c724:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c728:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c72c:	f846 1b04 	str.w	r1, [r6], #4
 800c730:	e7dc      	b.n	800c6ec <__mdiff+0xd4>
 800c732:	3f01      	subs	r7, #1
 800c734:	e7e6      	b.n	800c704 <__mdiff+0xec>
 800c736:	bf00      	nop
 800c738:	0800daf1 	.word	0x0800daf1
 800c73c:	0800db79 	.word	0x0800db79

0800c740 <__ulp>:
 800c740:	4b0e      	ldr	r3, [pc, #56]	@ (800c77c <__ulp+0x3c>)
 800c742:	400b      	ands	r3, r1
 800c744:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c748:	2b00      	cmp	r3, #0
 800c74a:	dc08      	bgt.n	800c75e <__ulp+0x1e>
 800c74c:	425b      	negs	r3, r3
 800c74e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c752:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c756:	da04      	bge.n	800c762 <__ulp+0x22>
 800c758:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c75c:	4113      	asrs	r3, r2
 800c75e:	2200      	movs	r2, #0
 800c760:	e008      	b.n	800c774 <__ulp+0x34>
 800c762:	f1a2 0314 	sub.w	r3, r2, #20
 800c766:	2b1e      	cmp	r3, #30
 800c768:	bfd6      	itet	le
 800c76a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c76e:	2201      	movgt	r2, #1
 800c770:	40da      	lsrle	r2, r3
 800c772:	2300      	movs	r3, #0
 800c774:	4619      	mov	r1, r3
 800c776:	4610      	mov	r0, r2
 800c778:	4770      	bx	lr
 800c77a:	bf00      	nop
 800c77c:	7ff00000 	.word	0x7ff00000

0800c780 <__b2d>:
 800c780:	6902      	ldr	r2, [r0, #16]
 800c782:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c784:	f100 0614 	add.w	r6, r0, #20
 800c788:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800c78c:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800c790:	4f1e      	ldr	r7, [pc, #120]	@ (800c80c <__b2d+0x8c>)
 800c792:	4620      	mov	r0, r4
 800c794:	f7ff fd54 	bl	800c240 <__hi0bits>
 800c798:	4603      	mov	r3, r0
 800c79a:	f1c0 0020 	rsb	r0, r0, #32
 800c79e:	2b0a      	cmp	r3, #10
 800c7a0:	f1a2 0504 	sub.w	r5, r2, #4
 800c7a4:	6008      	str	r0, [r1, #0]
 800c7a6:	dc12      	bgt.n	800c7ce <__b2d+0x4e>
 800c7a8:	42ae      	cmp	r6, r5
 800c7aa:	bf2c      	ite	cs
 800c7ac:	2200      	movcs	r2, #0
 800c7ae:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800c7b2:	f1c3 0c0b 	rsb	ip, r3, #11
 800c7b6:	3315      	adds	r3, #21
 800c7b8:	fa24 fe0c 	lsr.w	lr, r4, ip
 800c7bc:	fa04 f303 	lsl.w	r3, r4, r3
 800c7c0:	fa22 f20c 	lsr.w	r2, r2, ip
 800c7c4:	ea4e 0107 	orr.w	r1, lr, r7
 800c7c8:	431a      	orrs	r2, r3
 800c7ca:	4610      	mov	r0, r2
 800c7cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c7ce:	42ae      	cmp	r6, r5
 800c7d0:	bf36      	itet	cc
 800c7d2:	f1a2 0508 	subcc.w	r5, r2, #8
 800c7d6:	2200      	movcs	r2, #0
 800c7d8:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800c7dc:	3b0b      	subs	r3, #11
 800c7de:	d012      	beq.n	800c806 <__b2d+0x86>
 800c7e0:	f1c3 0720 	rsb	r7, r3, #32
 800c7e4:	fa22 f107 	lsr.w	r1, r2, r7
 800c7e8:	409c      	lsls	r4, r3
 800c7ea:	430c      	orrs	r4, r1
 800c7ec:	42b5      	cmp	r5, r6
 800c7ee:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800c7f2:	bf94      	ite	ls
 800c7f4:	2400      	movls	r4, #0
 800c7f6:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800c7fa:	409a      	lsls	r2, r3
 800c7fc:	40fc      	lsrs	r4, r7
 800c7fe:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800c802:	4322      	orrs	r2, r4
 800c804:	e7e1      	b.n	800c7ca <__b2d+0x4a>
 800c806:	ea44 0107 	orr.w	r1, r4, r7
 800c80a:	e7de      	b.n	800c7ca <__b2d+0x4a>
 800c80c:	3ff00000 	.word	0x3ff00000

0800c810 <__d2b>:
 800c810:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800c814:	2101      	movs	r1, #1
 800c816:	4690      	mov	r8, r2
 800c818:	4699      	mov	r9, r3
 800c81a:	9e08      	ldr	r6, [sp, #32]
 800c81c:	f7ff fc1e 	bl	800c05c <_Balloc>
 800c820:	4604      	mov	r4, r0
 800c822:	b930      	cbnz	r0, 800c832 <__d2b+0x22>
 800c824:	4602      	mov	r2, r0
 800c826:	f240 310f 	movw	r1, #783	@ 0x30f
 800c82a:	4b23      	ldr	r3, [pc, #140]	@ (800c8b8 <__d2b+0xa8>)
 800c82c:	4823      	ldr	r0, [pc, #140]	@ (800c8bc <__d2b+0xac>)
 800c82e:	f000 fc91 	bl	800d154 <__assert_func>
 800c832:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c836:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c83a:	b10d      	cbz	r5, 800c840 <__d2b+0x30>
 800c83c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c840:	9301      	str	r3, [sp, #4]
 800c842:	f1b8 0300 	subs.w	r3, r8, #0
 800c846:	d024      	beq.n	800c892 <__d2b+0x82>
 800c848:	4668      	mov	r0, sp
 800c84a:	9300      	str	r3, [sp, #0]
 800c84c:	f7ff fd17 	bl	800c27e <__lo0bits>
 800c850:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c854:	b1d8      	cbz	r0, 800c88e <__d2b+0x7e>
 800c856:	f1c0 0320 	rsb	r3, r0, #32
 800c85a:	fa02 f303 	lsl.w	r3, r2, r3
 800c85e:	430b      	orrs	r3, r1
 800c860:	40c2      	lsrs	r2, r0
 800c862:	6163      	str	r3, [r4, #20]
 800c864:	9201      	str	r2, [sp, #4]
 800c866:	9b01      	ldr	r3, [sp, #4]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	bf0c      	ite	eq
 800c86c:	2201      	moveq	r2, #1
 800c86e:	2202      	movne	r2, #2
 800c870:	61a3      	str	r3, [r4, #24]
 800c872:	6122      	str	r2, [r4, #16]
 800c874:	b1ad      	cbz	r5, 800c8a2 <__d2b+0x92>
 800c876:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c87a:	4405      	add	r5, r0
 800c87c:	6035      	str	r5, [r6, #0]
 800c87e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c882:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c884:	6018      	str	r0, [r3, #0]
 800c886:	4620      	mov	r0, r4
 800c888:	b002      	add	sp, #8
 800c88a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800c88e:	6161      	str	r1, [r4, #20]
 800c890:	e7e9      	b.n	800c866 <__d2b+0x56>
 800c892:	a801      	add	r0, sp, #4
 800c894:	f7ff fcf3 	bl	800c27e <__lo0bits>
 800c898:	9b01      	ldr	r3, [sp, #4]
 800c89a:	2201      	movs	r2, #1
 800c89c:	6163      	str	r3, [r4, #20]
 800c89e:	3020      	adds	r0, #32
 800c8a0:	e7e7      	b.n	800c872 <__d2b+0x62>
 800c8a2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c8a6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c8aa:	6030      	str	r0, [r6, #0]
 800c8ac:	6918      	ldr	r0, [r3, #16]
 800c8ae:	f7ff fcc7 	bl	800c240 <__hi0bits>
 800c8b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c8b6:	e7e4      	b.n	800c882 <__d2b+0x72>
 800c8b8:	0800daf1 	.word	0x0800daf1
 800c8bc:	0800db79 	.word	0x0800db79

0800c8c0 <__ratio>:
 800c8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8c4:	b085      	sub	sp, #20
 800c8c6:	e9cd 1000 	strd	r1, r0, [sp]
 800c8ca:	a902      	add	r1, sp, #8
 800c8cc:	f7ff ff58 	bl	800c780 <__b2d>
 800c8d0:	468b      	mov	fp, r1
 800c8d2:	4606      	mov	r6, r0
 800c8d4:	460f      	mov	r7, r1
 800c8d6:	9800      	ldr	r0, [sp, #0]
 800c8d8:	a903      	add	r1, sp, #12
 800c8da:	f7ff ff51 	bl	800c780 <__b2d>
 800c8de:	460d      	mov	r5, r1
 800c8e0:	9b01      	ldr	r3, [sp, #4]
 800c8e2:	4689      	mov	r9, r1
 800c8e4:	6919      	ldr	r1, [r3, #16]
 800c8e6:	9b00      	ldr	r3, [sp, #0]
 800c8e8:	4604      	mov	r4, r0
 800c8ea:	691b      	ldr	r3, [r3, #16]
 800c8ec:	4630      	mov	r0, r6
 800c8ee:	1ac9      	subs	r1, r1, r3
 800c8f0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c8f4:	1a9b      	subs	r3, r3, r2
 800c8f6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	bfcd      	iteet	gt
 800c8fe:	463a      	movgt	r2, r7
 800c900:	462a      	movle	r2, r5
 800c902:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c906:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800c90a:	bfd8      	it	le
 800c90c:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c910:	464b      	mov	r3, r9
 800c912:	4622      	mov	r2, r4
 800c914:	4659      	mov	r1, fp
 800c916:	f7f3 ff0b 	bl	8000730 <__aeabi_ddiv>
 800c91a:	b005      	add	sp, #20
 800c91c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c920 <__copybits>:
 800c920:	3901      	subs	r1, #1
 800c922:	b570      	push	{r4, r5, r6, lr}
 800c924:	1149      	asrs	r1, r1, #5
 800c926:	6914      	ldr	r4, [r2, #16]
 800c928:	3101      	adds	r1, #1
 800c92a:	f102 0314 	add.w	r3, r2, #20
 800c92e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c932:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c936:	1f05      	subs	r5, r0, #4
 800c938:	42a3      	cmp	r3, r4
 800c93a:	d30c      	bcc.n	800c956 <__copybits+0x36>
 800c93c:	1aa3      	subs	r3, r4, r2
 800c93e:	3b11      	subs	r3, #17
 800c940:	f023 0303 	bic.w	r3, r3, #3
 800c944:	3211      	adds	r2, #17
 800c946:	42a2      	cmp	r2, r4
 800c948:	bf88      	it	hi
 800c94a:	2300      	movhi	r3, #0
 800c94c:	4418      	add	r0, r3
 800c94e:	2300      	movs	r3, #0
 800c950:	4288      	cmp	r0, r1
 800c952:	d305      	bcc.n	800c960 <__copybits+0x40>
 800c954:	bd70      	pop	{r4, r5, r6, pc}
 800c956:	f853 6b04 	ldr.w	r6, [r3], #4
 800c95a:	f845 6f04 	str.w	r6, [r5, #4]!
 800c95e:	e7eb      	b.n	800c938 <__copybits+0x18>
 800c960:	f840 3b04 	str.w	r3, [r0], #4
 800c964:	e7f4      	b.n	800c950 <__copybits+0x30>

0800c966 <__any_on>:
 800c966:	f100 0214 	add.w	r2, r0, #20
 800c96a:	6900      	ldr	r0, [r0, #16]
 800c96c:	114b      	asrs	r3, r1, #5
 800c96e:	4298      	cmp	r0, r3
 800c970:	b510      	push	{r4, lr}
 800c972:	db11      	blt.n	800c998 <__any_on+0x32>
 800c974:	dd0a      	ble.n	800c98c <__any_on+0x26>
 800c976:	f011 011f 	ands.w	r1, r1, #31
 800c97a:	d007      	beq.n	800c98c <__any_on+0x26>
 800c97c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c980:	fa24 f001 	lsr.w	r0, r4, r1
 800c984:	fa00 f101 	lsl.w	r1, r0, r1
 800c988:	428c      	cmp	r4, r1
 800c98a:	d10b      	bne.n	800c9a4 <__any_on+0x3e>
 800c98c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c990:	4293      	cmp	r3, r2
 800c992:	d803      	bhi.n	800c99c <__any_on+0x36>
 800c994:	2000      	movs	r0, #0
 800c996:	bd10      	pop	{r4, pc}
 800c998:	4603      	mov	r3, r0
 800c99a:	e7f7      	b.n	800c98c <__any_on+0x26>
 800c99c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c9a0:	2900      	cmp	r1, #0
 800c9a2:	d0f5      	beq.n	800c990 <__any_on+0x2a>
 800c9a4:	2001      	movs	r0, #1
 800c9a6:	e7f6      	b.n	800c996 <__any_on+0x30>

0800c9a8 <__ascii_wctomb>:
 800c9a8:	4603      	mov	r3, r0
 800c9aa:	4608      	mov	r0, r1
 800c9ac:	b141      	cbz	r1, 800c9c0 <__ascii_wctomb+0x18>
 800c9ae:	2aff      	cmp	r2, #255	@ 0xff
 800c9b0:	d904      	bls.n	800c9bc <__ascii_wctomb+0x14>
 800c9b2:	228a      	movs	r2, #138	@ 0x8a
 800c9b4:	f04f 30ff 	mov.w	r0, #4294967295
 800c9b8:	601a      	str	r2, [r3, #0]
 800c9ba:	4770      	bx	lr
 800c9bc:	2001      	movs	r0, #1
 800c9be:	700a      	strb	r2, [r1, #0]
 800c9c0:	4770      	bx	lr

0800c9c2 <__ssputs_r>:
 800c9c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9c6:	461f      	mov	r7, r3
 800c9c8:	688e      	ldr	r6, [r1, #8]
 800c9ca:	4682      	mov	sl, r0
 800c9cc:	42be      	cmp	r6, r7
 800c9ce:	460c      	mov	r4, r1
 800c9d0:	4690      	mov	r8, r2
 800c9d2:	680b      	ldr	r3, [r1, #0]
 800c9d4:	d82d      	bhi.n	800ca32 <__ssputs_r+0x70>
 800c9d6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c9da:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c9de:	d026      	beq.n	800ca2e <__ssputs_r+0x6c>
 800c9e0:	6965      	ldr	r5, [r4, #20]
 800c9e2:	6909      	ldr	r1, [r1, #16]
 800c9e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c9e8:	eba3 0901 	sub.w	r9, r3, r1
 800c9ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c9f0:	1c7b      	adds	r3, r7, #1
 800c9f2:	444b      	add	r3, r9
 800c9f4:	106d      	asrs	r5, r5, #1
 800c9f6:	429d      	cmp	r5, r3
 800c9f8:	bf38      	it	cc
 800c9fa:	461d      	movcc	r5, r3
 800c9fc:	0553      	lsls	r3, r2, #21
 800c9fe:	d527      	bpl.n	800ca50 <__ssputs_r+0x8e>
 800ca00:	4629      	mov	r1, r5
 800ca02:	f7ff fa8d 	bl	800bf20 <_malloc_r>
 800ca06:	4606      	mov	r6, r0
 800ca08:	b360      	cbz	r0, 800ca64 <__ssputs_r+0xa2>
 800ca0a:	464a      	mov	r2, r9
 800ca0c:	6921      	ldr	r1, [r4, #16]
 800ca0e:	f7fe feca 	bl	800b7a6 <memcpy>
 800ca12:	89a3      	ldrh	r3, [r4, #12]
 800ca14:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ca18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca1c:	81a3      	strh	r3, [r4, #12]
 800ca1e:	6126      	str	r6, [r4, #16]
 800ca20:	444e      	add	r6, r9
 800ca22:	6026      	str	r6, [r4, #0]
 800ca24:	463e      	mov	r6, r7
 800ca26:	6165      	str	r5, [r4, #20]
 800ca28:	eba5 0509 	sub.w	r5, r5, r9
 800ca2c:	60a5      	str	r5, [r4, #8]
 800ca2e:	42be      	cmp	r6, r7
 800ca30:	d900      	bls.n	800ca34 <__ssputs_r+0x72>
 800ca32:	463e      	mov	r6, r7
 800ca34:	4632      	mov	r2, r6
 800ca36:	4641      	mov	r1, r8
 800ca38:	6820      	ldr	r0, [r4, #0]
 800ca3a:	f000 fb53 	bl	800d0e4 <memmove>
 800ca3e:	2000      	movs	r0, #0
 800ca40:	68a3      	ldr	r3, [r4, #8]
 800ca42:	1b9b      	subs	r3, r3, r6
 800ca44:	60a3      	str	r3, [r4, #8]
 800ca46:	6823      	ldr	r3, [r4, #0]
 800ca48:	4433      	add	r3, r6
 800ca4a:	6023      	str	r3, [r4, #0]
 800ca4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca50:	462a      	mov	r2, r5
 800ca52:	f000 fbb9 	bl	800d1c8 <_realloc_r>
 800ca56:	4606      	mov	r6, r0
 800ca58:	2800      	cmp	r0, #0
 800ca5a:	d1e0      	bne.n	800ca1e <__ssputs_r+0x5c>
 800ca5c:	4650      	mov	r0, sl
 800ca5e:	6921      	ldr	r1, [r4, #16]
 800ca60:	f7fe feba 	bl	800b7d8 <_free_r>
 800ca64:	230c      	movs	r3, #12
 800ca66:	f8ca 3000 	str.w	r3, [sl]
 800ca6a:	89a3      	ldrh	r3, [r4, #12]
 800ca6c:	f04f 30ff 	mov.w	r0, #4294967295
 800ca70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ca74:	81a3      	strh	r3, [r4, #12]
 800ca76:	e7e9      	b.n	800ca4c <__ssputs_r+0x8a>

0800ca78 <_svfiprintf_r>:
 800ca78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca7c:	4698      	mov	r8, r3
 800ca7e:	898b      	ldrh	r3, [r1, #12]
 800ca80:	4607      	mov	r7, r0
 800ca82:	061b      	lsls	r3, r3, #24
 800ca84:	460d      	mov	r5, r1
 800ca86:	4614      	mov	r4, r2
 800ca88:	b09d      	sub	sp, #116	@ 0x74
 800ca8a:	d510      	bpl.n	800caae <_svfiprintf_r+0x36>
 800ca8c:	690b      	ldr	r3, [r1, #16]
 800ca8e:	b973      	cbnz	r3, 800caae <_svfiprintf_r+0x36>
 800ca90:	2140      	movs	r1, #64	@ 0x40
 800ca92:	f7ff fa45 	bl	800bf20 <_malloc_r>
 800ca96:	6028      	str	r0, [r5, #0]
 800ca98:	6128      	str	r0, [r5, #16]
 800ca9a:	b930      	cbnz	r0, 800caaa <_svfiprintf_r+0x32>
 800ca9c:	230c      	movs	r3, #12
 800ca9e:	603b      	str	r3, [r7, #0]
 800caa0:	f04f 30ff 	mov.w	r0, #4294967295
 800caa4:	b01d      	add	sp, #116	@ 0x74
 800caa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caaa:	2340      	movs	r3, #64	@ 0x40
 800caac:	616b      	str	r3, [r5, #20]
 800caae:	2300      	movs	r3, #0
 800cab0:	9309      	str	r3, [sp, #36]	@ 0x24
 800cab2:	2320      	movs	r3, #32
 800cab4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cab8:	2330      	movs	r3, #48	@ 0x30
 800caba:	f04f 0901 	mov.w	r9, #1
 800cabe:	f8cd 800c 	str.w	r8, [sp, #12]
 800cac2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800cc5c <_svfiprintf_r+0x1e4>
 800cac6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800caca:	4623      	mov	r3, r4
 800cacc:	469a      	mov	sl, r3
 800cace:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cad2:	b10a      	cbz	r2, 800cad8 <_svfiprintf_r+0x60>
 800cad4:	2a25      	cmp	r2, #37	@ 0x25
 800cad6:	d1f9      	bne.n	800cacc <_svfiprintf_r+0x54>
 800cad8:	ebba 0b04 	subs.w	fp, sl, r4
 800cadc:	d00b      	beq.n	800caf6 <_svfiprintf_r+0x7e>
 800cade:	465b      	mov	r3, fp
 800cae0:	4622      	mov	r2, r4
 800cae2:	4629      	mov	r1, r5
 800cae4:	4638      	mov	r0, r7
 800cae6:	f7ff ff6c 	bl	800c9c2 <__ssputs_r>
 800caea:	3001      	adds	r0, #1
 800caec:	f000 80a7 	beq.w	800cc3e <_svfiprintf_r+0x1c6>
 800caf0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800caf2:	445a      	add	r2, fp
 800caf4:	9209      	str	r2, [sp, #36]	@ 0x24
 800caf6:	f89a 3000 	ldrb.w	r3, [sl]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	f000 809f 	beq.w	800cc3e <_svfiprintf_r+0x1c6>
 800cb00:	2300      	movs	r3, #0
 800cb02:	f04f 32ff 	mov.w	r2, #4294967295
 800cb06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb0a:	f10a 0a01 	add.w	sl, sl, #1
 800cb0e:	9304      	str	r3, [sp, #16]
 800cb10:	9307      	str	r3, [sp, #28]
 800cb12:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cb16:	931a      	str	r3, [sp, #104]	@ 0x68
 800cb18:	4654      	mov	r4, sl
 800cb1a:	2205      	movs	r2, #5
 800cb1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb20:	484e      	ldr	r0, [pc, #312]	@ (800cc5c <_svfiprintf_r+0x1e4>)
 800cb22:	f000 fb09 	bl	800d138 <memchr>
 800cb26:	9a04      	ldr	r2, [sp, #16]
 800cb28:	b9d8      	cbnz	r0, 800cb62 <_svfiprintf_r+0xea>
 800cb2a:	06d0      	lsls	r0, r2, #27
 800cb2c:	bf44      	itt	mi
 800cb2e:	2320      	movmi	r3, #32
 800cb30:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cb34:	0711      	lsls	r1, r2, #28
 800cb36:	bf44      	itt	mi
 800cb38:	232b      	movmi	r3, #43	@ 0x2b
 800cb3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cb3e:	f89a 3000 	ldrb.w	r3, [sl]
 800cb42:	2b2a      	cmp	r3, #42	@ 0x2a
 800cb44:	d015      	beq.n	800cb72 <_svfiprintf_r+0xfa>
 800cb46:	4654      	mov	r4, sl
 800cb48:	2000      	movs	r0, #0
 800cb4a:	f04f 0c0a 	mov.w	ip, #10
 800cb4e:	9a07      	ldr	r2, [sp, #28]
 800cb50:	4621      	mov	r1, r4
 800cb52:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb56:	3b30      	subs	r3, #48	@ 0x30
 800cb58:	2b09      	cmp	r3, #9
 800cb5a:	d94b      	bls.n	800cbf4 <_svfiprintf_r+0x17c>
 800cb5c:	b1b0      	cbz	r0, 800cb8c <_svfiprintf_r+0x114>
 800cb5e:	9207      	str	r2, [sp, #28]
 800cb60:	e014      	b.n	800cb8c <_svfiprintf_r+0x114>
 800cb62:	eba0 0308 	sub.w	r3, r0, r8
 800cb66:	fa09 f303 	lsl.w	r3, r9, r3
 800cb6a:	4313      	orrs	r3, r2
 800cb6c:	46a2      	mov	sl, r4
 800cb6e:	9304      	str	r3, [sp, #16]
 800cb70:	e7d2      	b.n	800cb18 <_svfiprintf_r+0xa0>
 800cb72:	9b03      	ldr	r3, [sp, #12]
 800cb74:	1d19      	adds	r1, r3, #4
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	9103      	str	r1, [sp, #12]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	bfbb      	ittet	lt
 800cb7e:	425b      	neglt	r3, r3
 800cb80:	f042 0202 	orrlt.w	r2, r2, #2
 800cb84:	9307      	strge	r3, [sp, #28]
 800cb86:	9307      	strlt	r3, [sp, #28]
 800cb88:	bfb8      	it	lt
 800cb8a:	9204      	strlt	r2, [sp, #16]
 800cb8c:	7823      	ldrb	r3, [r4, #0]
 800cb8e:	2b2e      	cmp	r3, #46	@ 0x2e
 800cb90:	d10a      	bne.n	800cba8 <_svfiprintf_r+0x130>
 800cb92:	7863      	ldrb	r3, [r4, #1]
 800cb94:	2b2a      	cmp	r3, #42	@ 0x2a
 800cb96:	d132      	bne.n	800cbfe <_svfiprintf_r+0x186>
 800cb98:	9b03      	ldr	r3, [sp, #12]
 800cb9a:	3402      	adds	r4, #2
 800cb9c:	1d1a      	adds	r2, r3, #4
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	9203      	str	r2, [sp, #12]
 800cba2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cba6:	9305      	str	r3, [sp, #20]
 800cba8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800cc60 <_svfiprintf_r+0x1e8>
 800cbac:	2203      	movs	r2, #3
 800cbae:	4650      	mov	r0, sl
 800cbb0:	7821      	ldrb	r1, [r4, #0]
 800cbb2:	f000 fac1 	bl	800d138 <memchr>
 800cbb6:	b138      	cbz	r0, 800cbc8 <_svfiprintf_r+0x150>
 800cbb8:	2240      	movs	r2, #64	@ 0x40
 800cbba:	9b04      	ldr	r3, [sp, #16]
 800cbbc:	eba0 000a 	sub.w	r0, r0, sl
 800cbc0:	4082      	lsls	r2, r0
 800cbc2:	4313      	orrs	r3, r2
 800cbc4:	3401      	adds	r4, #1
 800cbc6:	9304      	str	r3, [sp, #16]
 800cbc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbcc:	2206      	movs	r2, #6
 800cbce:	4825      	ldr	r0, [pc, #148]	@ (800cc64 <_svfiprintf_r+0x1ec>)
 800cbd0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cbd4:	f000 fab0 	bl	800d138 <memchr>
 800cbd8:	2800      	cmp	r0, #0
 800cbda:	d036      	beq.n	800cc4a <_svfiprintf_r+0x1d2>
 800cbdc:	4b22      	ldr	r3, [pc, #136]	@ (800cc68 <_svfiprintf_r+0x1f0>)
 800cbde:	bb1b      	cbnz	r3, 800cc28 <_svfiprintf_r+0x1b0>
 800cbe0:	9b03      	ldr	r3, [sp, #12]
 800cbe2:	3307      	adds	r3, #7
 800cbe4:	f023 0307 	bic.w	r3, r3, #7
 800cbe8:	3308      	adds	r3, #8
 800cbea:	9303      	str	r3, [sp, #12]
 800cbec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cbee:	4433      	add	r3, r6
 800cbf0:	9309      	str	r3, [sp, #36]	@ 0x24
 800cbf2:	e76a      	b.n	800caca <_svfiprintf_r+0x52>
 800cbf4:	460c      	mov	r4, r1
 800cbf6:	2001      	movs	r0, #1
 800cbf8:	fb0c 3202 	mla	r2, ip, r2, r3
 800cbfc:	e7a8      	b.n	800cb50 <_svfiprintf_r+0xd8>
 800cbfe:	2300      	movs	r3, #0
 800cc00:	f04f 0c0a 	mov.w	ip, #10
 800cc04:	4619      	mov	r1, r3
 800cc06:	3401      	adds	r4, #1
 800cc08:	9305      	str	r3, [sp, #20]
 800cc0a:	4620      	mov	r0, r4
 800cc0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc10:	3a30      	subs	r2, #48	@ 0x30
 800cc12:	2a09      	cmp	r2, #9
 800cc14:	d903      	bls.n	800cc1e <_svfiprintf_r+0x1a6>
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d0c6      	beq.n	800cba8 <_svfiprintf_r+0x130>
 800cc1a:	9105      	str	r1, [sp, #20]
 800cc1c:	e7c4      	b.n	800cba8 <_svfiprintf_r+0x130>
 800cc1e:	4604      	mov	r4, r0
 800cc20:	2301      	movs	r3, #1
 800cc22:	fb0c 2101 	mla	r1, ip, r1, r2
 800cc26:	e7f0      	b.n	800cc0a <_svfiprintf_r+0x192>
 800cc28:	ab03      	add	r3, sp, #12
 800cc2a:	9300      	str	r3, [sp, #0]
 800cc2c:	462a      	mov	r2, r5
 800cc2e:	4638      	mov	r0, r7
 800cc30:	4b0e      	ldr	r3, [pc, #56]	@ (800cc6c <_svfiprintf_r+0x1f4>)
 800cc32:	a904      	add	r1, sp, #16
 800cc34:	f3af 8000 	nop.w
 800cc38:	1c42      	adds	r2, r0, #1
 800cc3a:	4606      	mov	r6, r0
 800cc3c:	d1d6      	bne.n	800cbec <_svfiprintf_r+0x174>
 800cc3e:	89ab      	ldrh	r3, [r5, #12]
 800cc40:	065b      	lsls	r3, r3, #25
 800cc42:	f53f af2d 	bmi.w	800caa0 <_svfiprintf_r+0x28>
 800cc46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cc48:	e72c      	b.n	800caa4 <_svfiprintf_r+0x2c>
 800cc4a:	ab03      	add	r3, sp, #12
 800cc4c:	9300      	str	r3, [sp, #0]
 800cc4e:	462a      	mov	r2, r5
 800cc50:	4638      	mov	r0, r7
 800cc52:	4b06      	ldr	r3, [pc, #24]	@ (800cc6c <_svfiprintf_r+0x1f4>)
 800cc54:	a904      	add	r1, sp, #16
 800cc56:	f000 f87d 	bl	800cd54 <_printf_i>
 800cc5a:	e7ed      	b.n	800cc38 <_svfiprintf_r+0x1c0>
 800cc5c:	0800dcd0 	.word	0x0800dcd0
 800cc60:	0800dcd6 	.word	0x0800dcd6
 800cc64:	0800dcda 	.word	0x0800dcda
 800cc68:	00000000 	.word	0x00000000
 800cc6c:	0800c9c3 	.word	0x0800c9c3

0800cc70 <_printf_common>:
 800cc70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc74:	4616      	mov	r6, r2
 800cc76:	4698      	mov	r8, r3
 800cc78:	688a      	ldr	r2, [r1, #8]
 800cc7a:	690b      	ldr	r3, [r1, #16]
 800cc7c:	4607      	mov	r7, r0
 800cc7e:	4293      	cmp	r3, r2
 800cc80:	bfb8      	it	lt
 800cc82:	4613      	movlt	r3, r2
 800cc84:	6033      	str	r3, [r6, #0]
 800cc86:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800cc8a:	460c      	mov	r4, r1
 800cc8c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cc90:	b10a      	cbz	r2, 800cc96 <_printf_common+0x26>
 800cc92:	3301      	adds	r3, #1
 800cc94:	6033      	str	r3, [r6, #0]
 800cc96:	6823      	ldr	r3, [r4, #0]
 800cc98:	0699      	lsls	r1, r3, #26
 800cc9a:	bf42      	ittt	mi
 800cc9c:	6833      	ldrmi	r3, [r6, #0]
 800cc9e:	3302      	addmi	r3, #2
 800cca0:	6033      	strmi	r3, [r6, #0]
 800cca2:	6825      	ldr	r5, [r4, #0]
 800cca4:	f015 0506 	ands.w	r5, r5, #6
 800cca8:	d106      	bne.n	800ccb8 <_printf_common+0x48>
 800ccaa:	f104 0a19 	add.w	sl, r4, #25
 800ccae:	68e3      	ldr	r3, [r4, #12]
 800ccb0:	6832      	ldr	r2, [r6, #0]
 800ccb2:	1a9b      	subs	r3, r3, r2
 800ccb4:	42ab      	cmp	r3, r5
 800ccb6:	dc2b      	bgt.n	800cd10 <_printf_common+0xa0>
 800ccb8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ccbc:	6822      	ldr	r2, [r4, #0]
 800ccbe:	3b00      	subs	r3, #0
 800ccc0:	bf18      	it	ne
 800ccc2:	2301      	movne	r3, #1
 800ccc4:	0692      	lsls	r2, r2, #26
 800ccc6:	d430      	bmi.n	800cd2a <_printf_common+0xba>
 800ccc8:	4641      	mov	r1, r8
 800ccca:	4638      	mov	r0, r7
 800cccc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ccd0:	47c8      	blx	r9
 800ccd2:	3001      	adds	r0, #1
 800ccd4:	d023      	beq.n	800cd1e <_printf_common+0xae>
 800ccd6:	6823      	ldr	r3, [r4, #0]
 800ccd8:	6922      	ldr	r2, [r4, #16]
 800ccda:	f003 0306 	and.w	r3, r3, #6
 800ccde:	2b04      	cmp	r3, #4
 800cce0:	bf14      	ite	ne
 800cce2:	2500      	movne	r5, #0
 800cce4:	6833      	ldreq	r3, [r6, #0]
 800cce6:	f04f 0600 	mov.w	r6, #0
 800ccea:	bf08      	it	eq
 800ccec:	68e5      	ldreq	r5, [r4, #12]
 800ccee:	f104 041a 	add.w	r4, r4, #26
 800ccf2:	bf08      	it	eq
 800ccf4:	1aed      	subeq	r5, r5, r3
 800ccf6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800ccfa:	bf08      	it	eq
 800ccfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cd00:	4293      	cmp	r3, r2
 800cd02:	bfc4      	itt	gt
 800cd04:	1a9b      	subgt	r3, r3, r2
 800cd06:	18ed      	addgt	r5, r5, r3
 800cd08:	42b5      	cmp	r5, r6
 800cd0a:	d11a      	bne.n	800cd42 <_printf_common+0xd2>
 800cd0c:	2000      	movs	r0, #0
 800cd0e:	e008      	b.n	800cd22 <_printf_common+0xb2>
 800cd10:	2301      	movs	r3, #1
 800cd12:	4652      	mov	r2, sl
 800cd14:	4641      	mov	r1, r8
 800cd16:	4638      	mov	r0, r7
 800cd18:	47c8      	blx	r9
 800cd1a:	3001      	adds	r0, #1
 800cd1c:	d103      	bne.n	800cd26 <_printf_common+0xb6>
 800cd1e:	f04f 30ff 	mov.w	r0, #4294967295
 800cd22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd26:	3501      	adds	r5, #1
 800cd28:	e7c1      	b.n	800ccae <_printf_common+0x3e>
 800cd2a:	2030      	movs	r0, #48	@ 0x30
 800cd2c:	18e1      	adds	r1, r4, r3
 800cd2e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cd32:	1c5a      	adds	r2, r3, #1
 800cd34:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cd38:	4422      	add	r2, r4
 800cd3a:	3302      	adds	r3, #2
 800cd3c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cd40:	e7c2      	b.n	800ccc8 <_printf_common+0x58>
 800cd42:	2301      	movs	r3, #1
 800cd44:	4622      	mov	r2, r4
 800cd46:	4641      	mov	r1, r8
 800cd48:	4638      	mov	r0, r7
 800cd4a:	47c8      	blx	r9
 800cd4c:	3001      	adds	r0, #1
 800cd4e:	d0e6      	beq.n	800cd1e <_printf_common+0xae>
 800cd50:	3601      	adds	r6, #1
 800cd52:	e7d9      	b.n	800cd08 <_printf_common+0x98>

0800cd54 <_printf_i>:
 800cd54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cd58:	7e0f      	ldrb	r7, [r1, #24]
 800cd5a:	4691      	mov	r9, r2
 800cd5c:	2f78      	cmp	r7, #120	@ 0x78
 800cd5e:	4680      	mov	r8, r0
 800cd60:	460c      	mov	r4, r1
 800cd62:	469a      	mov	sl, r3
 800cd64:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cd66:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cd6a:	d807      	bhi.n	800cd7c <_printf_i+0x28>
 800cd6c:	2f62      	cmp	r7, #98	@ 0x62
 800cd6e:	d80a      	bhi.n	800cd86 <_printf_i+0x32>
 800cd70:	2f00      	cmp	r7, #0
 800cd72:	f000 80d3 	beq.w	800cf1c <_printf_i+0x1c8>
 800cd76:	2f58      	cmp	r7, #88	@ 0x58
 800cd78:	f000 80ba 	beq.w	800cef0 <_printf_i+0x19c>
 800cd7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cd80:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cd84:	e03a      	b.n	800cdfc <_printf_i+0xa8>
 800cd86:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cd8a:	2b15      	cmp	r3, #21
 800cd8c:	d8f6      	bhi.n	800cd7c <_printf_i+0x28>
 800cd8e:	a101      	add	r1, pc, #4	@ (adr r1, 800cd94 <_printf_i+0x40>)
 800cd90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cd94:	0800cded 	.word	0x0800cded
 800cd98:	0800ce01 	.word	0x0800ce01
 800cd9c:	0800cd7d 	.word	0x0800cd7d
 800cda0:	0800cd7d 	.word	0x0800cd7d
 800cda4:	0800cd7d 	.word	0x0800cd7d
 800cda8:	0800cd7d 	.word	0x0800cd7d
 800cdac:	0800ce01 	.word	0x0800ce01
 800cdb0:	0800cd7d 	.word	0x0800cd7d
 800cdb4:	0800cd7d 	.word	0x0800cd7d
 800cdb8:	0800cd7d 	.word	0x0800cd7d
 800cdbc:	0800cd7d 	.word	0x0800cd7d
 800cdc0:	0800cf03 	.word	0x0800cf03
 800cdc4:	0800ce2b 	.word	0x0800ce2b
 800cdc8:	0800cebd 	.word	0x0800cebd
 800cdcc:	0800cd7d 	.word	0x0800cd7d
 800cdd0:	0800cd7d 	.word	0x0800cd7d
 800cdd4:	0800cf25 	.word	0x0800cf25
 800cdd8:	0800cd7d 	.word	0x0800cd7d
 800cddc:	0800ce2b 	.word	0x0800ce2b
 800cde0:	0800cd7d 	.word	0x0800cd7d
 800cde4:	0800cd7d 	.word	0x0800cd7d
 800cde8:	0800cec5 	.word	0x0800cec5
 800cdec:	6833      	ldr	r3, [r6, #0]
 800cdee:	1d1a      	adds	r2, r3, #4
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	6032      	str	r2, [r6, #0]
 800cdf4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cdf8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cdfc:	2301      	movs	r3, #1
 800cdfe:	e09e      	b.n	800cf3e <_printf_i+0x1ea>
 800ce00:	6833      	ldr	r3, [r6, #0]
 800ce02:	6820      	ldr	r0, [r4, #0]
 800ce04:	1d19      	adds	r1, r3, #4
 800ce06:	6031      	str	r1, [r6, #0]
 800ce08:	0606      	lsls	r6, r0, #24
 800ce0a:	d501      	bpl.n	800ce10 <_printf_i+0xbc>
 800ce0c:	681d      	ldr	r5, [r3, #0]
 800ce0e:	e003      	b.n	800ce18 <_printf_i+0xc4>
 800ce10:	0645      	lsls	r5, r0, #25
 800ce12:	d5fb      	bpl.n	800ce0c <_printf_i+0xb8>
 800ce14:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ce18:	2d00      	cmp	r5, #0
 800ce1a:	da03      	bge.n	800ce24 <_printf_i+0xd0>
 800ce1c:	232d      	movs	r3, #45	@ 0x2d
 800ce1e:	426d      	negs	r5, r5
 800ce20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ce24:	230a      	movs	r3, #10
 800ce26:	4859      	ldr	r0, [pc, #356]	@ (800cf8c <_printf_i+0x238>)
 800ce28:	e011      	b.n	800ce4e <_printf_i+0xfa>
 800ce2a:	6821      	ldr	r1, [r4, #0]
 800ce2c:	6833      	ldr	r3, [r6, #0]
 800ce2e:	0608      	lsls	r0, r1, #24
 800ce30:	f853 5b04 	ldr.w	r5, [r3], #4
 800ce34:	d402      	bmi.n	800ce3c <_printf_i+0xe8>
 800ce36:	0649      	lsls	r1, r1, #25
 800ce38:	bf48      	it	mi
 800ce3a:	b2ad      	uxthmi	r5, r5
 800ce3c:	2f6f      	cmp	r7, #111	@ 0x6f
 800ce3e:	6033      	str	r3, [r6, #0]
 800ce40:	bf14      	ite	ne
 800ce42:	230a      	movne	r3, #10
 800ce44:	2308      	moveq	r3, #8
 800ce46:	4851      	ldr	r0, [pc, #324]	@ (800cf8c <_printf_i+0x238>)
 800ce48:	2100      	movs	r1, #0
 800ce4a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ce4e:	6866      	ldr	r6, [r4, #4]
 800ce50:	2e00      	cmp	r6, #0
 800ce52:	bfa8      	it	ge
 800ce54:	6821      	ldrge	r1, [r4, #0]
 800ce56:	60a6      	str	r6, [r4, #8]
 800ce58:	bfa4      	itt	ge
 800ce5a:	f021 0104 	bicge.w	r1, r1, #4
 800ce5e:	6021      	strge	r1, [r4, #0]
 800ce60:	b90d      	cbnz	r5, 800ce66 <_printf_i+0x112>
 800ce62:	2e00      	cmp	r6, #0
 800ce64:	d04b      	beq.n	800cefe <_printf_i+0x1aa>
 800ce66:	4616      	mov	r6, r2
 800ce68:	fbb5 f1f3 	udiv	r1, r5, r3
 800ce6c:	fb03 5711 	mls	r7, r3, r1, r5
 800ce70:	5dc7      	ldrb	r7, [r0, r7]
 800ce72:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ce76:	462f      	mov	r7, r5
 800ce78:	42bb      	cmp	r3, r7
 800ce7a:	460d      	mov	r5, r1
 800ce7c:	d9f4      	bls.n	800ce68 <_printf_i+0x114>
 800ce7e:	2b08      	cmp	r3, #8
 800ce80:	d10b      	bne.n	800ce9a <_printf_i+0x146>
 800ce82:	6823      	ldr	r3, [r4, #0]
 800ce84:	07df      	lsls	r7, r3, #31
 800ce86:	d508      	bpl.n	800ce9a <_printf_i+0x146>
 800ce88:	6923      	ldr	r3, [r4, #16]
 800ce8a:	6861      	ldr	r1, [r4, #4]
 800ce8c:	4299      	cmp	r1, r3
 800ce8e:	bfde      	ittt	le
 800ce90:	2330      	movle	r3, #48	@ 0x30
 800ce92:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ce96:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ce9a:	1b92      	subs	r2, r2, r6
 800ce9c:	6122      	str	r2, [r4, #16]
 800ce9e:	464b      	mov	r3, r9
 800cea0:	4621      	mov	r1, r4
 800cea2:	4640      	mov	r0, r8
 800cea4:	f8cd a000 	str.w	sl, [sp]
 800cea8:	aa03      	add	r2, sp, #12
 800ceaa:	f7ff fee1 	bl	800cc70 <_printf_common>
 800ceae:	3001      	adds	r0, #1
 800ceb0:	d14a      	bne.n	800cf48 <_printf_i+0x1f4>
 800ceb2:	f04f 30ff 	mov.w	r0, #4294967295
 800ceb6:	b004      	add	sp, #16
 800ceb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cebc:	6823      	ldr	r3, [r4, #0]
 800cebe:	f043 0320 	orr.w	r3, r3, #32
 800cec2:	6023      	str	r3, [r4, #0]
 800cec4:	2778      	movs	r7, #120	@ 0x78
 800cec6:	4832      	ldr	r0, [pc, #200]	@ (800cf90 <_printf_i+0x23c>)
 800cec8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cecc:	6823      	ldr	r3, [r4, #0]
 800cece:	6831      	ldr	r1, [r6, #0]
 800ced0:	061f      	lsls	r7, r3, #24
 800ced2:	f851 5b04 	ldr.w	r5, [r1], #4
 800ced6:	d402      	bmi.n	800cede <_printf_i+0x18a>
 800ced8:	065f      	lsls	r7, r3, #25
 800ceda:	bf48      	it	mi
 800cedc:	b2ad      	uxthmi	r5, r5
 800cede:	6031      	str	r1, [r6, #0]
 800cee0:	07d9      	lsls	r1, r3, #31
 800cee2:	bf44      	itt	mi
 800cee4:	f043 0320 	orrmi.w	r3, r3, #32
 800cee8:	6023      	strmi	r3, [r4, #0]
 800ceea:	b11d      	cbz	r5, 800cef4 <_printf_i+0x1a0>
 800ceec:	2310      	movs	r3, #16
 800ceee:	e7ab      	b.n	800ce48 <_printf_i+0xf4>
 800cef0:	4826      	ldr	r0, [pc, #152]	@ (800cf8c <_printf_i+0x238>)
 800cef2:	e7e9      	b.n	800cec8 <_printf_i+0x174>
 800cef4:	6823      	ldr	r3, [r4, #0]
 800cef6:	f023 0320 	bic.w	r3, r3, #32
 800cefa:	6023      	str	r3, [r4, #0]
 800cefc:	e7f6      	b.n	800ceec <_printf_i+0x198>
 800cefe:	4616      	mov	r6, r2
 800cf00:	e7bd      	b.n	800ce7e <_printf_i+0x12a>
 800cf02:	6833      	ldr	r3, [r6, #0]
 800cf04:	6825      	ldr	r5, [r4, #0]
 800cf06:	1d18      	adds	r0, r3, #4
 800cf08:	6961      	ldr	r1, [r4, #20]
 800cf0a:	6030      	str	r0, [r6, #0]
 800cf0c:	062e      	lsls	r6, r5, #24
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	d501      	bpl.n	800cf16 <_printf_i+0x1c2>
 800cf12:	6019      	str	r1, [r3, #0]
 800cf14:	e002      	b.n	800cf1c <_printf_i+0x1c8>
 800cf16:	0668      	lsls	r0, r5, #25
 800cf18:	d5fb      	bpl.n	800cf12 <_printf_i+0x1be>
 800cf1a:	8019      	strh	r1, [r3, #0]
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	4616      	mov	r6, r2
 800cf20:	6123      	str	r3, [r4, #16]
 800cf22:	e7bc      	b.n	800ce9e <_printf_i+0x14a>
 800cf24:	6833      	ldr	r3, [r6, #0]
 800cf26:	2100      	movs	r1, #0
 800cf28:	1d1a      	adds	r2, r3, #4
 800cf2a:	6032      	str	r2, [r6, #0]
 800cf2c:	681e      	ldr	r6, [r3, #0]
 800cf2e:	6862      	ldr	r2, [r4, #4]
 800cf30:	4630      	mov	r0, r6
 800cf32:	f000 f901 	bl	800d138 <memchr>
 800cf36:	b108      	cbz	r0, 800cf3c <_printf_i+0x1e8>
 800cf38:	1b80      	subs	r0, r0, r6
 800cf3a:	6060      	str	r0, [r4, #4]
 800cf3c:	6863      	ldr	r3, [r4, #4]
 800cf3e:	6123      	str	r3, [r4, #16]
 800cf40:	2300      	movs	r3, #0
 800cf42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cf46:	e7aa      	b.n	800ce9e <_printf_i+0x14a>
 800cf48:	4632      	mov	r2, r6
 800cf4a:	4649      	mov	r1, r9
 800cf4c:	4640      	mov	r0, r8
 800cf4e:	6923      	ldr	r3, [r4, #16]
 800cf50:	47d0      	blx	sl
 800cf52:	3001      	adds	r0, #1
 800cf54:	d0ad      	beq.n	800ceb2 <_printf_i+0x15e>
 800cf56:	6823      	ldr	r3, [r4, #0]
 800cf58:	079b      	lsls	r3, r3, #30
 800cf5a:	d413      	bmi.n	800cf84 <_printf_i+0x230>
 800cf5c:	68e0      	ldr	r0, [r4, #12]
 800cf5e:	9b03      	ldr	r3, [sp, #12]
 800cf60:	4298      	cmp	r0, r3
 800cf62:	bfb8      	it	lt
 800cf64:	4618      	movlt	r0, r3
 800cf66:	e7a6      	b.n	800ceb6 <_printf_i+0x162>
 800cf68:	2301      	movs	r3, #1
 800cf6a:	4632      	mov	r2, r6
 800cf6c:	4649      	mov	r1, r9
 800cf6e:	4640      	mov	r0, r8
 800cf70:	47d0      	blx	sl
 800cf72:	3001      	adds	r0, #1
 800cf74:	d09d      	beq.n	800ceb2 <_printf_i+0x15e>
 800cf76:	3501      	adds	r5, #1
 800cf78:	68e3      	ldr	r3, [r4, #12]
 800cf7a:	9903      	ldr	r1, [sp, #12]
 800cf7c:	1a5b      	subs	r3, r3, r1
 800cf7e:	42ab      	cmp	r3, r5
 800cf80:	dcf2      	bgt.n	800cf68 <_printf_i+0x214>
 800cf82:	e7eb      	b.n	800cf5c <_printf_i+0x208>
 800cf84:	2500      	movs	r5, #0
 800cf86:	f104 0619 	add.w	r6, r4, #25
 800cf8a:	e7f5      	b.n	800cf78 <_printf_i+0x224>
 800cf8c:	0800dce1 	.word	0x0800dce1
 800cf90:	0800dcf2 	.word	0x0800dcf2

0800cf94 <__sflush_r>:
 800cf94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cf98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf9a:	0716      	lsls	r6, r2, #28
 800cf9c:	4605      	mov	r5, r0
 800cf9e:	460c      	mov	r4, r1
 800cfa0:	d454      	bmi.n	800d04c <__sflush_r+0xb8>
 800cfa2:	684b      	ldr	r3, [r1, #4]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	dc02      	bgt.n	800cfae <__sflush_r+0x1a>
 800cfa8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	dd48      	ble.n	800d040 <__sflush_r+0xac>
 800cfae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cfb0:	2e00      	cmp	r6, #0
 800cfb2:	d045      	beq.n	800d040 <__sflush_r+0xac>
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cfba:	682f      	ldr	r7, [r5, #0]
 800cfbc:	6a21      	ldr	r1, [r4, #32]
 800cfbe:	602b      	str	r3, [r5, #0]
 800cfc0:	d030      	beq.n	800d024 <__sflush_r+0x90>
 800cfc2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cfc4:	89a3      	ldrh	r3, [r4, #12]
 800cfc6:	0759      	lsls	r1, r3, #29
 800cfc8:	d505      	bpl.n	800cfd6 <__sflush_r+0x42>
 800cfca:	6863      	ldr	r3, [r4, #4]
 800cfcc:	1ad2      	subs	r2, r2, r3
 800cfce:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cfd0:	b10b      	cbz	r3, 800cfd6 <__sflush_r+0x42>
 800cfd2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cfd4:	1ad2      	subs	r2, r2, r3
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	4628      	mov	r0, r5
 800cfda:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cfdc:	6a21      	ldr	r1, [r4, #32]
 800cfde:	47b0      	blx	r6
 800cfe0:	1c43      	adds	r3, r0, #1
 800cfe2:	89a3      	ldrh	r3, [r4, #12]
 800cfe4:	d106      	bne.n	800cff4 <__sflush_r+0x60>
 800cfe6:	6829      	ldr	r1, [r5, #0]
 800cfe8:	291d      	cmp	r1, #29
 800cfea:	d82b      	bhi.n	800d044 <__sflush_r+0xb0>
 800cfec:	4a28      	ldr	r2, [pc, #160]	@ (800d090 <__sflush_r+0xfc>)
 800cfee:	410a      	asrs	r2, r1
 800cff0:	07d6      	lsls	r6, r2, #31
 800cff2:	d427      	bmi.n	800d044 <__sflush_r+0xb0>
 800cff4:	2200      	movs	r2, #0
 800cff6:	6062      	str	r2, [r4, #4]
 800cff8:	6922      	ldr	r2, [r4, #16]
 800cffa:	04d9      	lsls	r1, r3, #19
 800cffc:	6022      	str	r2, [r4, #0]
 800cffe:	d504      	bpl.n	800d00a <__sflush_r+0x76>
 800d000:	1c42      	adds	r2, r0, #1
 800d002:	d101      	bne.n	800d008 <__sflush_r+0x74>
 800d004:	682b      	ldr	r3, [r5, #0]
 800d006:	b903      	cbnz	r3, 800d00a <__sflush_r+0x76>
 800d008:	6560      	str	r0, [r4, #84]	@ 0x54
 800d00a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d00c:	602f      	str	r7, [r5, #0]
 800d00e:	b1b9      	cbz	r1, 800d040 <__sflush_r+0xac>
 800d010:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d014:	4299      	cmp	r1, r3
 800d016:	d002      	beq.n	800d01e <__sflush_r+0x8a>
 800d018:	4628      	mov	r0, r5
 800d01a:	f7fe fbdd 	bl	800b7d8 <_free_r>
 800d01e:	2300      	movs	r3, #0
 800d020:	6363      	str	r3, [r4, #52]	@ 0x34
 800d022:	e00d      	b.n	800d040 <__sflush_r+0xac>
 800d024:	2301      	movs	r3, #1
 800d026:	4628      	mov	r0, r5
 800d028:	47b0      	blx	r6
 800d02a:	4602      	mov	r2, r0
 800d02c:	1c50      	adds	r0, r2, #1
 800d02e:	d1c9      	bne.n	800cfc4 <__sflush_r+0x30>
 800d030:	682b      	ldr	r3, [r5, #0]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d0c6      	beq.n	800cfc4 <__sflush_r+0x30>
 800d036:	2b1d      	cmp	r3, #29
 800d038:	d001      	beq.n	800d03e <__sflush_r+0xaa>
 800d03a:	2b16      	cmp	r3, #22
 800d03c:	d11d      	bne.n	800d07a <__sflush_r+0xe6>
 800d03e:	602f      	str	r7, [r5, #0]
 800d040:	2000      	movs	r0, #0
 800d042:	e021      	b.n	800d088 <__sflush_r+0xf4>
 800d044:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d048:	b21b      	sxth	r3, r3
 800d04a:	e01a      	b.n	800d082 <__sflush_r+0xee>
 800d04c:	690f      	ldr	r7, [r1, #16]
 800d04e:	2f00      	cmp	r7, #0
 800d050:	d0f6      	beq.n	800d040 <__sflush_r+0xac>
 800d052:	0793      	lsls	r3, r2, #30
 800d054:	bf18      	it	ne
 800d056:	2300      	movne	r3, #0
 800d058:	680e      	ldr	r6, [r1, #0]
 800d05a:	bf08      	it	eq
 800d05c:	694b      	ldreq	r3, [r1, #20]
 800d05e:	1bf6      	subs	r6, r6, r7
 800d060:	600f      	str	r7, [r1, #0]
 800d062:	608b      	str	r3, [r1, #8]
 800d064:	2e00      	cmp	r6, #0
 800d066:	ddeb      	ble.n	800d040 <__sflush_r+0xac>
 800d068:	4633      	mov	r3, r6
 800d06a:	463a      	mov	r2, r7
 800d06c:	4628      	mov	r0, r5
 800d06e:	6a21      	ldr	r1, [r4, #32]
 800d070:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800d074:	47e0      	blx	ip
 800d076:	2800      	cmp	r0, #0
 800d078:	dc07      	bgt.n	800d08a <__sflush_r+0xf6>
 800d07a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d07e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d082:	f04f 30ff 	mov.w	r0, #4294967295
 800d086:	81a3      	strh	r3, [r4, #12]
 800d088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d08a:	4407      	add	r7, r0
 800d08c:	1a36      	subs	r6, r6, r0
 800d08e:	e7e9      	b.n	800d064 <__sflush_r+0xd0>
 800d090:	dfbffffe 	.word	0xdfbffffe

0800d094 <_fflush_r>:
 800d094:	b538      	push	{r3, r4, r5, lr}
 800d096:	690b      	ldr	r3, [r1, #16]
 800d098:	4605      	mov	r5, r0
 800d09a:	460c      	mov	r4, r1
 800d09c:	b913      	cbnz	r3, 800d0a4 <_fflush_r+0x10>
 800d09e:	2500      	movs	r5, #0
 800d0a0:	4628      	mov	r0, r5
 800d0a2:	bd38      	pop	{r3, r4, r5, pc}
 800d0a4:	b118      	cbz	r0, 800d0ae <_fflush_r+0x1a>
 800d0a6:	6a03      	ldr	r3, [r0, #32]
 800d0a8:	b90b      	cbnz	r3, 800d0ae <_fflush_r+0x1a>
 800d0aa:	f7fe fa09 	bl	800b4c0 <__sinit>
 800d0ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d0f3      	beq.n	800d09e <_fflush_r+0xa>
 800d0b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d0b8:	07d0      	lsls	r0, r2, #31
 800d0ba:	d404      	bmi.n	800d0c6 <_fflush_r+0x32>
 800d0bc:	0599      	lsls	r1, r3, #22
 800d0be:	d402      	bmi.n	800d0c6 <_fflush_r+0x32>
 800d0c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d0c2:	f7fe fb66 	bl	800b792 <__retarget_lock_acquire_recursive>
 800d0c6:	4628      	mov	r0, r5
 800d0c8:	4621      	mov	r1, r4
 800d0ca:	f7ff ff63 	bl	800cf94 <__sflush_r>
 800d0ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d0d0:	4605      	mov	r5, r0
 800d0d2:	07da      	lsls	r2, r3, #31
 800d0d4:	d4e4      	bmi.n	800d0a0 <_fflush_r+0xc>
 800d0d6:	89a3      	ldrh	r3, [r4, #12]
 800d0d8:	059b      	lsls	r3, r3, #22
 800d0da:	d4e1      	bmi.n	800d0a0 <_fflush_r+0xc>
 800d0dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d0de:	f7fe fb59 	bl	800b794 <__retarget_lock_release_recursive>
 800d0e2:	e7dd      	b.n	800d0a0 <_fflush_r+0xc>

0800d0e4 <memmove>:
 800d0e4:	4288      	cmp	r0, r1
 800d0e6:	b510      	push	{r4, lr}
 800d0e8:	eb01 0402 	add.w	r4, r1, r2
 800d0ec:	d902      	bls.n	800d0f4 <memmove+0x10>
 800d0ee:	4284      	cmp	r4, r0
 800d0f0:	4623      	mov	r3, r4
 800d0f2:	d807      	bhi.n	800d104 <memmove+0x20>
 800d0f4:	1e43      	subs	r3, r0, #1
 800d0f6:	42a1      	cmp	r1, r4
 800d0f8:	d008      	beq.n	800d10c <memmove+0x28>
 800d0fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d0fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d102:	e7f8      	b.n	800d0f6 <memmove+0x12>
 800d104:	4601      	mov	r1, r0
 800d106:	4402      	add	r2, r0
 800d108:	428a      	cmp	r2, r1
 800d10a:	d100      	bne.n	800d10e <memmove+0x2a>
 800d10c:	bd10      	pop	{r4, pc}
 800d10e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d112:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d116:	e7f7      	b.n	800d108 <memmove+0x24>

0800d118 <_sbrk_r>:
 800d118:	b538      	push	{r3, r4, r5, lr}
 800d11a:	2300      	movs	r3, #0
 800d11c:	4d05      	ldr	r5, [pc, #20]	@ (800d134 <_sbrk_r+0x1c>)
 800d11e:	4604      	mov	r4, r0
 800d120:	4608      	mov	r0, r1
 800d122:	602b      	str	r3, [r5, #0]
 800d124:	f7f4 ffd2 	bl	80020cc <_sbrk>
 800d128:	1c43      	adds	r3, r0, #1
 800d12a:	d102      	bne.n	800d132 <_sbrk_r+0x1a>
 800d12c:	682b      	ldr	r3, [r5, #0]
 800d12e:	b103      	cbz	r3, 800d132 <_sbrk_r+0x1a>
 800d130:	6023      	str	r3, [r4, #0]
 800d132:	bd38      	pop	{r3, r4, r5, pc}
 800d134:	200012b0 	.word	0x200012b0

0800d138 <memchr>:
 800d138:	4603      	mov	r3, r0
 800d13a:	b510      	push	{r4, lr}
 800d13c:	b2c9      	uxtb	r1, r1
 800d13e:	4402      	add	r2, r0
 800d140:	4293      	cmp	r3, r2
 800d142:	4618      	mov	r0, r3
 800d144:	d101      	bne.n	800d14a <memchr+0x12>
 800d146:	2000      	movs	r0, #0
 800d148:	e003      	b.n	800d152 <memchr+0x1a>
 800d14a:	7804      	ldrb	r4, [r0, #0]
 800d14c:	3301      	adds	r3, #1
 800d14e:	428c      	cmp	r4, r1
 800d150:	d1f6      	bne.n	800d140 <memchr+0x8>
 800d152:	bd10      	pop	{r4, pc}

0800d154 <__assert_func>:
 800d154:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d156:	4614      	mov	r4, r2
 800d158:	461a      	mov	r2, r3
 800d15a:	4b09      	ldr	r3, [pc, #36]	@ (800d180 <__assert_func+0x2c>)
 800d15c:	4605      	mov	r5, r0
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	68d8      	ldr	r0, [r3, #12]
 800d162:	b954      	cbnz	r4, 800d17a <__assert_func+0x26>
 800d164:	4b07      	ldr	r3, [pc, #28]	@ (800d184 <__assert_func+0x30>)
 800d166:	461c      	mov	r4, r3
 800d168:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d16c:	9100      	str	r1, [sp, #0]
 800d16e:	462b      	mov	r3, r5
 800d170:	4905      	ldr	r1, [pc, #20]	@ (800d188 <__assert_func+0x34>)
 800d172:	f000 f857 	bl	800d224 <fiprintf>
 800d176:	f000 f867 	bl	800d248 <abort>
 800d17a:	4b04      	ldr	r3, [pc, #16]	@ (800d18c <__assert_func+0x38>)
 800d17c:	e7f4      	b.n	800d168 <__assert_func+0x14>
 800d17e:	bf00      	nop
 800d180:	200002e0 	.word	0x200002e0
 800d184:	0800dd3e 	.word	0x0800dd3e
 800d188:	0800dd10 	.word	0x0800dd10
 800d18c:	0800dd03 	.word	0x0800dd03

0800d190 <_calloc_r>:
 800d190:	b570      	push	{r4, r5, r6, lr}
 800d192:	fba1 5402 	umull	r5, r4, r1, r2
 800d196:	b93c      	cbnz	r4, 800d1a8 <_calloc_r+0x18>
 800d198:	4629      	mov	r1, r5
 800d19a:	f7fe fec1 	bl	800bf20 <_malloc_r>
 800d19e:	4606      	mov	r6, r0
 800d1a0:	b928      	cbnz	r0, 800d1ae <_calloc_r+0x1e>
 800d1a2:	2600      	movs	r6, #0
 800d1a4:	4630      	mov	r0, r6
 800d1a6:	bd70      	pop	{r4, r5, r6, pc}
 800d1a8:	220c      	movs	r2, #12
 800d1aa:	6002      	str	r2, [r0, #0]
 800d1ac:	e7f9      	b.n	800d1a2 <_calloc_r+0x12>
 800d1ae:	462a      	mov	r2, r5
 800d1b0:	4621      	mov	r1, r4
 800d1b2:	f7fe fa37 	bl	800b624 <memset>
 800d1b6:	e7f5      	b.n	800d1a4 <_calloc_r+0x14>

0800d1b8 <malloc>:
 800d1b8:	4b02      	ldr	r3, [pc, #8]	@ (800d1c4 <malloc+0xc>)
 800d1ba:	4601      	mov	r1, r0
 800d1bc:	6818      	ldr	r0, [r3, #0]
 800d1be:	f7fe beaf 	b.w	800bf20 <_malloc_r>
 800d1c2:	bf00      	nop
 800d1c4:	200002e0 	.word	0x200002e0

0800d1c8 <_realloc_r>:
 800d1c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1cc:	4680      	mov	r8, r0
 800d1ce:	4615      	mov	r5, r2
 800d1d0:	460c      	mov	r4, r1
 800d1d2:	b921      	cbnz	r1, 800d1de <_realloc_r+0x16>
 800d1d4:	4611      	mov	r1, r2
 800d1d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d1da:	f7fe bea1 	b.w	800bf20 <_malloc_r>
 800d1de:	b92a      	cbnz	r2, 800d1ec <_realloc_r+0x24>
 800d1e0:	f7fe fafa 	bl	800b7d8 <_free_r>
 800d1e4:	2400      	movs	r4, #0
 800d1e6:	4620      	mov	r0, r4
 800d1e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1ec:	f000 f833 	bl	800d256 <_malloc_usable_size_r>
 800d1f0:	4285      	cmp	r5, r0
 800d1f2:	4606      	mov	r6, r0
 800d1f4:	d802      	bhi.n	800d1fc <_realloc_r+0x34>
 800d1f6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d1fa:	d8f4      	bhi.n	800d1e6 <_realloc_r+0x1e>
 800d1fc:	4629      	mov	r1, r5
 800d1fe:	4640      	mov	r0, r8
 800d200:	f7fe fe8e 	bl	800bf20 <_malloc_r>
 800d204:	4607      	mov	r7, r0
 800d206:	2800      	cmp	r0, #0
 800d208:	d0ec      	beq.n	800d1e4 <_realloc_r+0x1c>
 800d20a:	42b5      	cmp	r5, r6
 800d20c:	462a      	mov	r2, r5
 800d20e:	4621      	mov	r1, r4
 800d210:	bf28      	it	cs
 800d212:	4632      	movcs	r2, r6
 800d214:	f7fe fac7 	bl	800b7a6 <memcpy>
 800d218:	4621      	mov	r1, r4
 800d21a:	4640      	mov	r0, r8
 800d21c:	f7fe fadc 	bl	800b7d8 <_free_r>
 800d220:	463c      	mov	r4, r7
 800d222:	e7e0      	b.n	800d1e6 <_realloc_r+0x1e>

0800d224 <fiprintf>:
 800d224:	b40e      	push	{r1, r2, r3}
 800d226:	b503      	push	{r0, r1, lr}
 800d228:	4601      	mov	r1, r0
 800d22a:	ab03      	add	r3, sp, #12
 800d22c:	4805      	ldr	r0, [pc, #20]	@ (800d244 <fiprintf+0x20>)
 800d22e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d232:	6800      	ldr	r0, [r0, #0]
 800d234:	9301      	str	r3, [sp, #4]
 800d236:	f000 f83d 	bl	800d2b4 <_vfiprintf_r>
 800d23a:	b002      	add	sp, #8
 800d23c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d240:	b003      	add	sp, #12
 800d242:	4770      	bx	lr
 800d244:	200002e0 	.word	0x200002e0

0800d248 <abort>:
 800d248:	2006      	movs	r0, #6
 800d24a:	b508      	push	{r3, lr}
 800d24c:	f000 fa06 	bl	800d65c <raise>
 800d250:	2001      	movs	r0, #1
 800d252:	f7f4 fec6 	bl	8001fe2 <_exit>

0800d256 <_malloc_usable_size_r>:
 800d256:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d25a:	1f18      	subs	r0, r3, #4
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	bfbc      	itt	lt
 800d260:	580b      	ldrlt	r3, [r1, r0]
 800d262:	18c0      	addlt	r0, r0, r3
 800d264:	4770      	bx	lr

0800d266 <__sfputc_r>:
 800d266:	6893      	ldr	r3, [r2, #8]
 800d268:	b410      	push	{r4}
 800d26a:	3b01      	subs	r3, #1
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	6093      	str	r3, [r2, #8]
 800d270:	da07      	bge.n	800d282 <__sfputc_r+0x1c>
 800d272:	6994      	ldr	r4, [r2, #24]
 800d274:	42a3      	cmp	r3, r4
 800d276:	db01      	blt.n	800d27c <__sfputc_r+0x16>
 800d278:	290a      	cmp	r1, #10
 800d27a:	d102      	bne.n	800d282 <__sfputc_r+0x1c>
 800d27c:	bc10      	pop	{r4}
 800d27e:	f000 b931 	b.w	800d4e4 <__swbuf_r>
 800d282:	6813      	ldr	r3, [r2, #0]
 800d284:	1c58      	adds	r0, r3, #1
 800d286:	6010      	str	r0, [r2, #0]
 800d288:	7019      	strb	r1, [r3, #0]
 800d28a:	4608      	mov	r0, r1
 800d28c:	bc10      	pop	{r4}
 800d28e:	4770      	bx	lr

0800d290 <__sfputs_r>:
 800d290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d292:	4606      	mov	r6, r0
 800d294:	460f      	mov	r7, r1
 800d296:	4614      	mov	r4, r2
 800d298:	18d5      	adds	r5, r2, r3
 800d29a:	42ac      	cmp	r4, r5
 800d29c:	d101      	bne.n	800d2a2 <__sfputs_r+0x12>
 800d29e:	2000      	movs	r0, #0
 800d2a0:	e007      	b.n	800d2b2 <__sfputs_r+0x22>
 800d2a2:	463a      	mov	r2, r7
 800d2a4:	4630      	mov	r0, r6
 800d2a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2aa:	f7ff ffdc 	bl	800d266 <__sfputc_r>
 800d2ae:	1c43      	adds	r3, r0, #1
 800d2b0:	d1f3      	bne.n	800d29a <__sfputs_r+0xa>
 800d2b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d2b4 <_vfiprintf_r>:
 800d2b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2b8:	460d      	mov	r5, r1
 800d2ba:	4614      	mov	r4, r2
 800d2bc:	4698      	mov	r8, r3
 800d2be:	4606      	mov	r6, r0
 800d2c0:	b09d      	sub	sp, #116	@ 0x74
 800d2c2:	b118      	cbz	r0, 800d2cc <_vfiprintf_r+0x18>
 800d2c4:	6a03      	ldr	r3, [r0, #32]
 800d2c6:	b90b      	cbnz	r3, 800d2cc <_vfiprintf_r+0x18>
 800d2c8:	f7fe f8fa 	bl	800b4c0 <__sinit>
 800d2cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d2ce:	07d9      	lsls	r1, r3, #31
 800d2d0:	d405      	bmi.n	800d2de <_vfiprintf_r+0x2a>
 800d2d2:	89ab      	ldrh	r3, [r5, #12]
 800d2d4:	059a      	lsls	r2, r3, #22
 800d2d6:	d402      	bmi.n	800d2de <_vfiprintf_r+0x2a>
 800d2d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d2da:	f7fe fa5a 	bl	800b792 <__retarget_lock_acquire_recursive>
 800d2de:	89ab      	ldrh	r3, [r5, #12]
 800d2e0:	071b      	lsls	r3, r3, #28
 800d2e2:	d501      	bpl.n	800d2e8 <_vfiprintf_r+0x34>
 800d2e4:	692b      	ldr	r3, [r5, #16]
 800d2e6:	b99b      	cbnz	r3, 800d310 <_vfiprintf_r+0x5c>
 800d2e8:	4629      	mov	r1, r5
 800d2ea:	4630      	mov	r0, r6
 800d2ec:	f000 f938 	bl	800d560 <__swsetup_r>
 800d2f0:	b170      	cbz	r0, 800d310 <_vfiprintf_r+0x5c>
 800d2f2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d2f4:	07dc      	lsls	r4, r3, #31
 800d2f6:	d504      	bpl.n	800d302 <_vfiprintf_r+0x4e>
 800d2f8:	f04f 30ff 	mov.w	r0, #4294967295
 800d2fc:	b01d      	add	sp, #116	@ 0x74
 800d2fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d302:	89ab      	ldrh	r3, [r5, #12]
 800d304:	0598      	lsls	r0, r3, #22
 800d306:	d4f7      	bmi.n	800d2f8 <_vfiprintf_r+0x44>
 800d308:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d30a:	f7fe fa43 	bl	800b794 <__retarget_lock_release_recursive>
 800d30e:	e7f3      	b.n	800d2f8 <_vfiprintf_r+0x44>
 800d310:	2300      	movs	r3, #0
 800d312:	9309      	str	r3, [sp, #36]	@ 0x24
 800d314:	2320      	movs	r3, #32
 800d316:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d31a:	2330      	movs	r3, #48	@ 0x30
 800d31c:	f04f 0901 	mov.w	r9, #1
 800d320:	f8cd 800c 	str.w	r8, [sp, #12]
 800d324:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800d4d0 <_vfiprintf_r+0x21c>
 800d328:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d32c:	4623      	mov	r3, r4
 800d32e:	469a      	mov	sl, r3
 800d330:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d334:	b10a      	cbz	r2, 800d33a <_vfiprintf_r+0x86>
 800d336:	2a25      	cmp	r2, #37	@ 0x25
 800d338:	d1f9      	bne.n	800d32e <_vfiprintf_r+0x7a>
 800d33a:	ebba 0b04 	subs.w	fp, sl, r4
 800d33e:	d00b      	beq.n	800d358 <_vfiprintf_r+0xa4>
 800d340:	465b      	mov	r3, fp
 800d342:	4622      	mov	r2, r4
 800d344:	4629      	mov	r1, r5
 800d346:	4630      	mov	r0, r6
 800d348:	f7ff ffa2 	bl	800d290 <__sfputs_r>
 800d34c:	3001      	adds	r0, #1
 800d34e:	f000 80a7 	beq.w	800d4a0 <_vfiprintf_r+0x1ec>
 800d352:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d354:	445a      	add	r2, fp
 800d356:	9209      	str	r2, [sp, #36]	@ 0x24
 800d358:	f89a 3000 	ldrb.w	r3, [sl]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	f000 809f 	beq.w	800d4a0 <_vfiprintf_r+0x1ec>
 800d362:	2300      	movs	r3, #0
 800d364:	f04f 32ff 	mov.w	r2, #4294967295
 800d368:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d36c:	f10a 0a01 	add.w	sl, sl, #1
 800d370:	9304      	str	r3, [sp, #16]
 800d372:	9307      	str	r3, [sp, #28]
 800d374:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d378:	931a      	str	r3, [sp, #104]	@ 0x68
 800d37a:	4654      	mov	r4, sl
 800d37c:	2205      	movs	r2, #5
 800d37e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d382:	4853      	ldr	r0, [pc, #332]	@ (800d4d0 <_vfiprintf_r+0x21c>)
 800d384:	f7ff fed8 	bl	800d138 <memchr>
 800d388:	9a04      	ldr	r2, [sp, #16]
 800d38a:	b9d8      	cbnz	r0, 800d3c4 <_vfiprintf_r+0x110>
 800d38c:	06d1      	lsls	r1, r2, #27
 800d38e:	bf44      	itt	mi
 800d390:	2320      	movmi	r3, #32
 800d392:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d396:	0713      	lsls	r3, r2, #28
 800d398:	bf44      	itt	mi
 800d39a:	232b      	movmi	r3, #43	@ 0x2b
 800d39c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d3a0:	f89a 3000 	ldrb.w	r3, [sl]
 800d3a4:	2b2a      	cmp	r3, #42	@ 0x2a
 800d3a6:	d015      	beq.n	800d3d4 <_vfiprintf_r+0x120>
 800d3a8:	4654      	mov	r4, sl
 800d3aa:	2000      	movs	r0, #0
 800d3ac:	f04f 0c0a 	mov.w	ip, #10
 800d3b0:	9a07      	ldr	r2, [sp, #28]
 800d3b2:	4621      	mov	r1, r4
 800d3b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d3b8:	3b30      	subs	r3, #48	@ 0x30
 800d3ba:	2b09      	cmp	r3, #9
 800d3bc:	d94b      	bls.n	800d456 <_vfiprintf_r+0x1a2>
 800d3be:	b1b0      	cbz	r0, 800d3ee <_vfiprintf_r+0x13a>
 800d3c0:	9207      	str	r2, [sp, #28]
 800d3c2:	e014      	b.n	800d3ee <_vfiprintf_r+0x13a>
 800d3c4:	eba0 0308 	sub.w	r3, r0, r8
 800d3c8:	fa09 f303 	lsl.w	r3, r9, r3
 800d3cc:	4313      	orrs	r3, r2
 800d3ce:	46a2      	mov	sl, r4
 800d3d0:	9304      	str	r3, [sp, #16]
 800d3d2:	e7d2      	b.n	800d37a <_vfiprintf_r+0xc6>
 800d3d4:	9b03      	ldr	r3, [sp, #12]
 800d3d6:	1d19      	adds	r1, r3, #4
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	9103      	str	r1, [sp, #12]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	bfbb      	ittet	lt
 800d3e0:	425b      	neglt	r3, r3
 800d3e2:	f042 0202 	orrlt.w	r2, r2, #2
 800d3e6:	9307      	strge	r3, [sp, #28]
 800d3e8:	9307      	strlt	r3, [sp, #28]
 800d3ea:	bfb8      	it	lt
 800d3ec:	9204      	strlt	r2, [sp, #16]
 800d3ee:	7823      	ldrb	r3, [r4, #0]
 800d3f0:	2b2e      	cmp	r3, #46	@ 0x2e
 800d3f2:	d10a      	bne.n	800d40a <_vfiprintf_r+0x156>
 800d3f4:	7863      	ldrb	r3, [r4, #1]
 800d3f6:	2b2a      	cmp	r3, #42	@ 0x2a
 800d3f8:	d132      	bne.n	800d460 <_vfiprintf_r+0x1ac>
 800d3fa:	9b03      	ldr	r3, [sp, #12]
 800d3fc:	3402      	adds	r4, #2
 800d3fe:	1d1a      	adds	r2, r3, #4
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	9203      	str	r2, [sp, #12]
 800d404:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d408:	9305      	str	r3, [sp, #20]
 800d40a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800d4d4 <_vfiprintf_r+0x220>
 800d40e:	2203      	movs	r2, #3
 800d410:	4650      	mov	r0, sl
 800d412:	7821      	ldrb	r1, [r4, #0]
 800d414:	f7ff fe90 	bl	800d138 <memchr>
 800d418:	b138      	cbz	r0, 800d42a <_vfiprintf_r+0x176>
 800d41a:	2240      	movs	r2, #64	@ 0x40
 800d41c:	9b04      	ldr	r3, [sp, #16]
 800d41e:	eba0 000a 	sub.w	r0, r0, sl
 800d422:	4082      	lsls	r2, r0
 800d424:	4313      	orrs	r3, r2
 800d426:	3401      	adds	r4, #1
 800d428:	9304      	str	r3, [sp, #16]
 800d42a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d42e:	2206      	movs	r2, #6
 800d430:	4829      	ldr	r0, [pc, #164]	@ (800d4d8 <_vfiprintf_r+0x224>)
 800d432:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d436:	f7ff fe7f 	bl	800d138 <memchr>
 800d43a:	2800      	cmp	r0, #0
 800d43c:	d03f      	beq.n	800d4be <_vfiprintf_r+0x20a>
 800d43e:	4b27      	ldr	r3, [pc, #156]	@ (800d4dc <_vfiprintf_r+0x228>)
 800d440:	bb1b      	cbnz	r3, 800d48a <_vfiprintf_r+0x1d6>
 800d442:	9b03      	ldr	r3, [sp, #12]
 800d444:	3307      	adds	r3, #7
 800d446:	f023 0307 	bic.w	r3, r3, #7
 800d44a:	3308      	adds	r3, #8
 800d44c:	9303      	str	r3, [sp, #12]
 800d44e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d450:	443b      	add	r3, r7
 800d452:	9309      	str	r3, [sp, #36]	@ 0x24
 800d454:	e76a      	b.n	800d32c <_vfiprintf_r+0x78>
 800d456:	460c      	mov	r4, r1
 800d458:	2001      	movs	r0, #1
 800d45a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d45e:	e7a8      	b.n	800d3b2 <_vfiprintf_r+0xfe>
 800d460:	2300      	movs	r3, #0
 800d462:	f04f 0c0a 	mov.w	ip, #10
 800d466:	4619      	mov	r1, r3
 800d468:	3401      	adds	r4, #1
 800d46a:	9305      	str	r3, [sp, #20]
 800d46c:	4620      	mov	r0, r4
 800d46e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d472:	3a30      	subs	r2, #48	@ 0x30
 800d474:	2a09      	cmp	r2, #9
 800d476:	d903      	bls.n	800d480 <_vfiprintf_r+0x1cc>
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d0c6      	beq.n	800d40a <_vfiprintf_r+0x156>
 800d47c:	9105      	str	r1, [sp, #20]
 800d47e:	e7c4      	b.n	800d40a <_vfiprintf_r+0x156>
 800d480:	4604      	mov	r4, r0
 800d482:	2301      	movs	r3, #1
 800d484:	fb0c 2101 	mla	r1, ip, r1, r2
 800d488:	e7f0      	b.n	800d46c <_vfiprintf_r+0x1b8>
 800d48a:	ab03      	add	r3, sp, #12
 800d48c:	9300      	str	r3, [sp, #0]
 800d48e:	462a      	mov	r2, r5
 800d490:	4630      	mov	r0, r6
 800d492:	4b13      	ldr	r3, [pc, #76]	@ (800d4e0 <_vfiprintf_r+0x22c>)
 800d494:	a904      	add	r1, sp, #16
 800d496:	f3af 8000 	nop.w
 800d49a:	4607      	mov	r7, r0
 800d49c:	1c78      	adds	r0, r7, #1
 800d49e:	d1d6      	bne.n	800d44e <_vfiprintf_r+0x19a>
 800d4a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d4a2:	07d9      	lsls	r1, r3, #31
 800d4a4:	d405      	bmi.n	800d4b2 <_vfiprintf_r+0x1fe>
 800d4a6:	89ab      	ldrh	r3, [r5, #12]
 800d4a8:	059a      	lsls	r2, r3, #22
 800d4aa:	d402      	bmi.n	800d4b2 <_vfiprintf_r+0x1fe>
 800d4ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d4ae:	f7fe f971 	bl	800b794 <__retarget_lock_release_recursive>
 800d4b2:	89ab      	ldrh	r3, [r5, #12]
 800d4b4:	065b      	lsls	r3, r3, #25
 800d4b6:	f53f af1f 	bmi.w	800d2f8 <_vfiprintf_r+0x44>
 800d4ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d4bc:	e71e      	b.n	800d2fc <_vfiprintf_r+0x48>
 800d4be:	ab03      	add	r3, sp, #12
 800d4c0:	9300      	str	r3, [sp, #0]
 800d4c2:	462a      	mov	r2, r5
 800d4c4:	4630      	mov	r0, r6
 800d4c6:	4b06      	ldr	r3, [pc, #24]	@ (800d4e0 <_vfiprintf_r+0x22c>)
 800d4c8:	a904      	add	r1, sp, #16
 800d4ca:	f7ff fc43 	bl	800cd54 <_printf_i>
 800d4ce:	e7e4      	b.n	800d49a <_vfiprintf_r+0x1e6>
 800d4d0:	0800dcd0 	.word	0x0800dcd0
 800d4d4:	0800dcd6 	.word	0x0800dcd6
 800d4d8:	0800dcda 	.word	0x0800dcda
 800d4dc:	00000000 	.word	0x00000000
 800d4e0:	0800d291 	.word	0x0800d291

0800d4e4 <__swbuf_r>:
 800d4e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4e6:	460e      	mov	r6, r1
 800d4e8:	4614      	mov	r4, r2
 800d4ea:	4605      	mov	r5, r0
 800d4ec:	b118      	cbz	r0, 800d4f6 <__swbuf_r+0x12>
 800d4ee:	6a03      	ldr	r3, [r0, #32]
 800d4f0:	b90b      	cbnz	r3, 800d4f6 <__swbuf_r+0x12>
 800d4f2:	f7fd ffe5 	bl	800b4c0 <__sinit>
 800d4f6:	69a3      	ldr	r3, [r4, #24]
 800d4f8:	60a3      	str	r3, [r4, #8]
 800d4fa:	89a3      	ldrh	r3, [r4, #12]
 800d4fc:	071a      	lsls	r2, r3, #28
 800d4fe:	d501      	bpl.n	800d504 <__swbuf_r+0x20>
 800d500:	6923      	ldr	r3, [r4, #16]
 800d502:	b943      	cbnz	r3, 800d516 <__swbuf_r+0x32>
 800d504:	4621      	mov	r1, r4
 800d506:	4628      	mov	r0, r5
 800d508:	f000 f82a 	bl	800d560 <__swsetup_r>
 800d50c:	b118      	cbz	r0, 800d516 <__swbuf_r+0x32>
 800d50e:	f04f 37ff 	mov.w	r7, #4294967295
 800d512:	4638      	mov	r0, r7
 800d514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d516:	6823      	ldr	r3, [r4, #0]
 800d518:	6922      	ldr	r2, [r4, #16]
 800d51a:	b2f6      	uxtb	r6, r6
 800d51c:	1a98      	subs	r0, r3, r2
 800d51e:	6963      	ldr	r3, [r4, #20]
 800d520:	4637      	mov	r7, r6
 800d522:	4283      	cmp	r3, r0
 800d524:	dc05      	bgt.n	800d532 <__swbuf_r+0x4e>
 800d526:	4621      	mov	r1, r4
 800d528:	4628      	mov	r0, r5
 800d52a:	f7ff fdb3 	bl	800d094 <_fflush_r>
 800d52e:	2800      	cmp	r0, #0
 800d530:	d1ed      	bne.n	800d50e <__swbuf_r+0x2a>
 800d532:	68a3      	ldr	r3, [r4, #8]
 800d534:	3b01      	subs	r3, #1
 800d536:	60a3      	str	r3, [r4, #8]
 800d538:	6823      	ldr	r3, [r4, #0]
 800d53a:	1c5a      	adds	r2, r3, #1
 800d53c:	6022      	str	r2, [r4, #0]
 800d53e:	701e      	strb	r6, [r3, #0]
 800d540:	6962      	ldr	r2, [r4, #20]
 800d542:	1c43      	adds	r3, r0, #1
 800d544:	429a      	cmp	r2, r3
 800d546:	d004      	beq.n	800d552 <__swbuf_r+0x6e>
 800d548:	89a3      	ldrh	r3, [r4, #12]
 800d54a:	07db      	lsls	r3, r3, #31
 800d54c:	d5e1      	bpl.n	800d512 <__swbuf_r+0x2e>
 800d54e:	2e0a      	cmp	r6, #10
 800d550:	d1df      	bne.n	800d512 <__swbuf_r+0x2e>
 800d552:	4621      	mov	r1, r4
 800d554:	4628      	mov	r0, r5
 800d556:	f7ff fd9d 	bl	800d094 <_fflush_r>
 800d55a:	2800      	cmp	r0, #0
 800d55c:	d0d9      	beq.n	800d512 <__swbuf_r+0x2e>
 800d55e:	e7d6      	b.n	800d50e <__swbuf_r+0x2a>

0800d560 <__swsetup_r>:
 800d560:	b538      	push	{r3, r4, r5, lr}
 800d562:	4b29      	ldr	r3, [pc, #164]	@ (800d608 <__swsetup_r+0xa8>)
 800d564:	4605      	mov	r5, r0
 800d566:	6818      	ldr	r0, [r3, #0]
 800d568:	460c      	mov	r4, r1
 800d56a:	b118      	cbz	r0, 800d574 <__swsetup_r+0x14>
 800d56c:	6a03      	ldr	r3, [r0, #32]
 800d56e:	b90b      	cbnz	r3, 800d574 <__swsetup_r+0x14>
 800d570:	f7fd ffa6 	bl	800b4c0 <__sinit>
 800d574:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d578:	0719      	lsls	r1, r3, #28
 800d57a:	d422      	bmi.n	800d5c2 <__swsetup_r+0x62>
 800d57c:	06da      	lsls	r2, r3, #27
 800d57e:	d407      	bmi.n	800d590 <__swsetup_r+0x30>
 800d580:	2209      	movs	r2, #9
 800d582:	602a      	str	r2, [r5, #0]
 800d584:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d588:	f04f 30ff 	mov.w	r0, #4294967295
 800d58c:	81a3      	strh	r3, [r4, #12]
 800d58e:	e033      	b.n	800d5f8 <__swsetup_r+0x98>
 800d590:	0758      	lsls	r0, r3, #29
 800d592:	d512      	bpl.n	800d5ba <__swsetup_r+0x5a>
 800d594:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d596:	b141      	cbz	r1, 800d5aa <__swsetup_r+0x4a>
 800d598:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d59c:	4299      	cmp	r1, r3
 800d59e:	d002      	beq.n	800d5a6 <__swsetup_r+0x46>
 800d5a0:	4628      	mov	r0, r5
 800d5a2:	f7fe f919 	bl	800b7d8 <_free_r>
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	6363      	str	r3, [r4, #52]	@ 0x34
 800d5aa:	89a3      	ldrh	r3, [r4, #12]
 800d5ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d5b0:	81a3      	strh	r3, [r4, #12]
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	6063      	str	r3, [r4, #4]
 800d5b6:	6923      	ldr	r3, [r4, #16]
 800d5b8:	6023      	str	r3, [r4, #0]
 800d5ba:	89a3      	ldrh	r3, [r4, #12]
 800d5bc:	f043 0308 	orr.w	r3, r3, #8
 800d5c0:	81a3      	strh	r3, [r4, #12]
 800d5c2:	6923      	ldr	r3, [r4, #16]
 800d5c4:	b94b      	cbnz	r3, 800d5da <__swsetup_r+0x7a>
 800d5c6:	89a3      	ldrh	r3, [r4, #12]
 800d5c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d5cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d5d0:	d003      	beq.n	800d5da <__swsetup_r+0x7a>
 800d5d2:	4621      	mov	r1, r4
 800d5d4:	4628      	mov	r0, r5
 800d5d6:	f000 f882 	bl	800d6de <__smakebuf_r>
 800d5da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5de:	f013 0201 	ands.w	r2, r3, #1
 800d5e2:	d00a      	beq.n	800d5fa <__swsetup_r+0x9a>
 800d5e4:	2200      	movs	r2, #0
 800d5e6:	60a2      	str	r2, [r4, #8]
 800d5e8:	6962      	ldr	r2, [r4, #20]
 800d5ea:	4252      	negs	r2, r2
 800d5ec:	61a2      	str	r2, [r4, #24]
 800d5ee:	6922      	ldr	r2, [r4, #16]
 800d5f0:	b942      	cbnz	r2, 800d604 <__swsetup_r+0xa4>
 800d5f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d5f6:	d1c5      	bne.n	800d584 <__swsetup_r+0x24>
 800d5f8:	bd38      	pop	{r3, r4, r5, pc}
 800d5fa:	0799      	lsls	r1, r3, #30
 800d5fc:	bf58      	it	pl
 800d5fe:	6962      	ldrpl	r2, [r4, #20]
 800d600:	60a2      	str	r2, [r4, #8]
 800d602:	e7f4      	b.n	800d5ee <__swsetup_r+0x8e>
 800d604:	2000      	movs	r0, #0
 800d606:	e7f7      	b.n	800d5f8 <__swsetup_r+0x98>
 800d608:	200002e0 	.word	0x200002e0

0800d60c <_raise_r>:
 800d60c:	291f      	cmp	r1, #31
 800d60e:	b538      	push	{r3, r4, r5, lr}
 800d610:	4605      	mov	r5, r0
 800d612:	460c      	mov	r4, r1
 800d614:	d904      	bls.n	800d620 <_raise_r+0x14>
 800d616:	2316      	movs	r3, #22
 800d618:	6003      	str	r3, [r0, #0]
 800d61a:	f04f 30ff 	mov.w	r0, #4294967295
 800d61e:	bd38      	pop	{r3, r4, r5, pc}
 800d620:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d622:	b112      	cbz	r2, 800d62a <_raise_r+0x1e>
 800d624:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d628:	b94b      	cbnz	r3, 800d63e <_raise_r+0x32>
 800d62a:	4628      	mov	r0, r5
 800d62c:	f000 f830 	bl	800d690 <_getpid_r>
 800d630:	4622      	mov	r2, r4
 800d632:	4601      	mov	r1, r0
 800d634:	4628      	mov	r0, r5
 800d636:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d63a:	f000 b817 	b.w	800d66c <_kill_r>
 800d63e:	2b01      	cmp	r3, #1
 800d640:	d00a      	beq.n	800d658 <_raise_r+0x4c>
 800d642:	1c59      	adds	r1, r3, #1
 800d644:	d103      	bne.n	800d64e <_raise_r+0x42>
 800d646:	2316      	movs	r3, #22
 800d648:	6003      	str	r3, [r0, #0]
 800d64a:	2001      	movs	r0, #1
 800d64c:	e7e7      	b.n	800d61e <_raise_r+0x12>
 800d64e:	2100      	movs	r1, #0
 800d650:	4620      	mov	r0, r4
 800d652:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d656:	4798      	blx	r3
 800d658:	2000      	movs	r0, #0
 800d65a:	e7e0      	b.n	800d61e <_raise_r+0x12>

0800d65c <raise>:
 800d65c:	4b02      	ldr	r3, [pc, #8]	@ (800d668 <raise+0xc>)
 800d65e:	4601      	mov	r1, r0
 800d660:	6818      	ldr	r0, [r3, #0]
 800d662:	f7ff bfd3 	b.w	800d60c <_raise_r>
 800d666:	bf00      	nop
 800d668:	200002e0 	.word	0x200002e0

0800d66c <_kill_r>:
 800d66c:	b538      	push	{r3, r4, r5, lr}
 800d66e:	2300      	movs	r3, #0
 800d670:	4d06      	ldr	r5, [pc, #24]	@ (800d68c <_kill_r+0x20>)
 800d672:	4604      	mov	r4, r0
 800d674:	4608      	mov	r0, r1
 800d676:	4611      	mov	r1, r2
 800d678:	602b      	str	r3, [r5, #0]
 800d67a:	f7f4 fca2 	bl	8001fc2 <_kill>
 800d67e:	1c43      	adds	r3, r0, #1
 800d680:	d102      	bne.n	800d688 <_kill_r+0x1c>
 800d682:	682b      	ldr	r3, [r5, #0]
 800d684:	b103      	cbz	r3, 800d688 <_kill_r+0x1c>
 800d686:	6023      	str	r3, [r4, #0]
 800d688:	bd38      	pop	{r3, r4, r5, pc}
 800d68a:	bf00      	nop
 800d68c:	200012b0 	.word	0x200012b0

0800d690 <_getpid_r>:
 800d690:	f7f4 bc90 	b.w	8001fb4 <_getpid>

0800d694 <__swhatbuf_r>:
 800d694:	b570      	push	{r4, r5, r6, lr}
 800d696:	460c      	mov	r4, r1
 800d698:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d69c:	4615      	mov	r5, r2
 800d69e:	2900      	cmp	r1, #0
 800d6a0:	461e      	mov	r6, r3
 800d6a2:	b096      	sub	sp, #88	@ 0x58
 800d6a4:	da0c      	bge.n	800d6c0 <__swhatbuf_r+0x2c>
 800d6a6:	89a3      	ldrh	r3, [r4, #12]
 800d6a8:	2100      	movs	r1, #0
 800d6aa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d6ae:	bf14      	ite	ne
 800d6b0:	2340      	movne	r3, #64	@ 0x40
 800d6b2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d6b6:	2000      	movs	r0, #0
 800d6b8:	6031      	str	r1, [r6, #0]
 800d6ba:	602b      	str	r3, [r5, #0]
 800d6bc:	b016      	add	sp, #88	@ 0x58
 800d6be:	bd70      	pop	{r4, r5, r6, pc}
 800d6c0:	466a      	mov	r2, sp
 800d6c2:	f000 f849 	bl	800d758 <_fstat_r>
 800d6c6:	2800      	cmp	r0, #0
 800d6c8:	dbed      	blt.n	800d6a6 <__swhatbuf_r+0x12>
 800d6ca:	9901      	ldr	r1, [sp, #4]
 800d6cc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d6d0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d6d4:	4259      	negs	r1, r3
 800d6d6:	4159      	adcs	r1, r3
 800d6d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d6dc:	e7eb      	b.n	800d6b6 <__swhatbuf_r+0x22>

0800d6de <__smakebuf_r>:
 800d6de:	898b      	ldrh	r3, [r1, #12]
 800d6e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d6e2:	079d      	lsls	r5, r3, #30
 800d6e4:	4606      	mov	r6, r0
 800d6e6:	460c      	mov	r4, r1
 800d6e8:	d507      	bpl.n	800d6fa <__smakebuf_r+0x1c>
 800d6ea:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d6ee:	6023      	str	r3, [r4, #0]
 800d6f0:	6123      	str	r3, [r4, #16]
 800d6f2:	2301      	movs	r3, #1
 800d6f4:	6163      	str	r3, [r4, #20]
 800d6f6:	b003      	add	sp, #12
 800d6f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d6fa:	466a      	mov	r2, sp
 800d6fc:	ab01      	add	r3, sp, #4
 800d6fe:	f7ff ffc9 	bl	800d694 <__swhatbuf_r>
 800d702:	9f00      	ldr	r7, [sp, #0]
 800d704:	4605      	mov	r5, r0
 800d706:	4639      	mov	r1, r7
 800d708:	4630      	mov	r0, r6
 800d70a:	f7fe fc09 	bl	800bf20 <_malloc_r>
 800d70e:	b948      	cbnz	r0, 800d724 <__smakebuf_r+0x46>
 800d710:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d714:	059a      	lsls	r2, r3, #22
 800d716:	d4ee      	bmi.n	800d6f6 <__smakebuf_r+0x18>
 800d718:	f023 0303 	bic.w	r3, r3, #3
 800d71c:	f043 0302 	orr.w	r3, r3, #2
 800d720:	81a3      	strh	r3, [r4, #12]
 800d722:	e7e2      	b.n	800d6ea <__smakebuf_r+0xc>
 800d724:	89a3      	ldrh	r3, [r4, #12]
 800d726:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d72a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d72e:	81a3      	strh	r3, [r4, #12]
 800d730:	9b01      	ldr	r3, [sp, #4]
 800d732:	6020      	str	r0, [r4, #0]
 800d734:	b15b      	cbz	r3, 800d74e <__smakebuf_r+0x70>
 800d736:	4630      	mov	r0, r6
 800d738:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d73c:	f000 f81e 	bl	800d77c <_isatty_r>
 800d740:	b128      	cbz	r0, 800d74e <__smakebuf_r+0x70>
 800d742:	89a3      	ldrh	r3, [r4, #12]
 800d744:	f023 0303 	bic.w	r3, r3, #3
 800d748:	f043 0301 	orr.w	r3, r3, #1
 800d74c:	81a3      	strh	r3, [r4, #12]
 800d74e:	89a3      	ldrh	r3, [r4, #12]
 800d750:	431d      	orrs	r5, r3
 800d752:	81a5      	strh	r5, [r4, #12]
 800d754:	e7cf      	b.n	800d6f6 <__smakebuf_r+0x18>
	...

0800d758 <_fstat_r>:
 800d758:	b538      	push	{r3, r4, r5, lr}
 800d75a:	2300      	movs	r3, #0
 800d75c:	4d06      	ldr	r5, [pc, #24]	@ (800d778 <_fstat_r+0x20>)
 800d75e:	4604      	mov	r4, r0
 800d760:	4608      	mov	r0, r1
 800d762:	4611      	mov	r1, r2
 800d764:	602b      	str	r3, [r5, #0]
 800d766:	f7f4 fc8b 	bl	8002080 <_fstat>
 800d76a:	1c43      	adds	r3, r0, #1
 800d76c:	d102      	bne.n	800d774 <_fstat_r+0x1c>
 800d76e:	682b      	ldr	r3, [r5, #0]
 800d770:	b103      	cbz	r3, 800d774 <_fstat_r+0x1c>
 800d772:	6023      	str	r3, [r4, #0]
 800d774:	bd38      	pop	{r3, r4, r5, pc}
 800d776:	bf00      	nop
 800d778:	200012b0 	.word	0x200012b0

0800d77c <_isatty_r>:
 800d77c:	b538      	push	{r3, r4, r5, lr}
 800d77e:	2300      	movs	r3, #0
 800d780:	4d05      	ldr	r5, [pc, #20]	@ (800d798 <_isatty_r+0x1c>)
 800d782:	4604      	mov	r4, r0
 800d784:	4608      	mov	r0, r1
 800d786:	602b      	str	r3, [r5, #0]
 800d788:	f7f4 fc89 	bl	800209e <_isatty>
 800d78c:	1c43      	adds	r3, r0, #1
 800d78e:	d102      	bne.n	800d796 <_isatty_r+0x1a>
 800d790:	682b      	ldr	r3, [r5, #0]
 800d792:	b103      	cbz	r3, 800d796 <_isatty_r+0x1a>
 800d794:	6023      	str	r3, [r4, #0]
 800d796:	bd38      	pop	{r3, r4, r5, pc}
 800d798:	200012b0 	.word	0x200012b0

0800d79c <_init>:
 800d79c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d79e:	bf00      	nop
 800d7a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7a2:	bc08      	pop	{r3}
 800d7a4:	469e      	mov	lr, r3
 800d7a6:	4770      	bx	lr

0800d7a8 <_fini>:
 800d7a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7aa:	bf00      	nop
 800d7ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7ae:	bc08      	pop	{r3}
 800d7b0:	469e      	mov	lr, r3
 800d7b2:	4770      	bx	lr
