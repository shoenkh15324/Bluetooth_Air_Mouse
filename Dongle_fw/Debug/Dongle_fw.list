
Dongle_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d984  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c8  0800da98  0800da98  0000ea98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e060  0800e060  00010330  2**0
                  CONTENTS
  4 .ARM          00000008  0800e060  0800e060  0000f060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e068  0800e068  00010330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e068  0800e068  0000f068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e06c  0800e06c  0000f06c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000330  20000000  0800e070  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f94  20000330  0800e3a0  00010330  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200012c4  0800e3a0  000112c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010330  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012050  00000000  00000000  00010359  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039ff  00000000  00000000  000223a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f58  00000000  00000000  00025da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b67  00000000  00000000  00026d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b4cf  00000000  00000000  00027867  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015bdf  00000000  00000000  00042d36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089c57  00000000  00000000  00058915  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e256c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005010  00000000  00000000  000e25b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  000e75c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000330 	.word	0x20000330
 800012c:	00000000 	.word	0x00000000
 8000130:	0800da7c 	.word	0x0800da7c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000334 	.word	0x20000334
 800014c:	0800da7c 	.word	0x0800da7c

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	@ 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_d2f>:
 8000a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a94:	bf24      	itt	cs
 8000a96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9e:	d90d      	bls.n	8000abc <__aeabi_d2f+0x30>
 8000aa0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aac:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ab0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab4:	bf08      	it	eq
 8000ab6:	f020 0001 	biceq.w	r0, r0, #1
 8000aba:	4770      	bx	lr
 8000abc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ac0:	d121      	bne.n	8000b06 <__aeabi_d2f+0x7a>
 8000ac2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac6:	bfbc      	itt	lt
 8000ac8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000acc:	4770      	bxlt	lr
 8000ace:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ad2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad6:	f1c2 0218 	rsb	r2, r2, #24
 8000ada:	f1c2 0c20 	rsb	ip, r2, #32
 8000ade:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ae2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae6:	bf18      	it	ne
 8000ae8:	f040 0001 	orrne.w	r0, r0, #1
 8000aec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af8:	ea40 000c 	orr.w	r0, r0, ip
 8000afc:	fa23 f302 	lsr.w	r3, r3, r2
 8000b00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b04:	e7cc      	b.n	8000aa0 <__aeabi_d2f+0x14>
 8000b06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b0a:	d107      	bne.n	8000b1c <__aeabi_d2f+0x90>
 8000b0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b10:	bf1e      	ittt	ne
 8000b12:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b16:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b1a:	4770      	bxne	lr
 8000b1c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b20:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b24:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <__gesf2>:
 8000b2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b30:	e006      	b.n	8000b40 <__cmpsf2+0x4>
 8000b32:	bf00      	nop

08000b34 <__lesf2>:
 8000b34:	f04f 0c01 	mov.w	ip, #1
 8000b38:	e002      	b.n	8000b40 <__cmpsf2+0x4>
 8000b3a:	bf00      	nop

08000b3c <__cmpsf2>:
 8000b3c:	f04f 0c01 	mov.w	ip, #1
 8000b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b44:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b48:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b50:	bf18      	it	ne
 8000b52:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b56:	d011      	beq.n	8000b7c <__cmpsf2+0x40>
 8000b58:	b001      	add	sp, #4
 8000b5a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000b5e:	bf18      	it	ne
 8000b60:	ea90 0f01 	teqne	r0, r1
 8000b64:	bf58      	it	pl
 8000b66:	ebb2 0003 	subspl.w	r0, r2, r3
 8000b6a:	bf88      	it	hi
 8000b6c:	17c8      	asrhi	r0, r1, #31
 8000b6e:	bf38      	it	cc
 8000b70:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000b74:	bf18      	it	ne
 8000b76:	f040 0001 	orrne.w	r0, r0, #1
 8000b7a:	4770      	bx	lr
 8000b7c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b80:	d102      	bne.n	8000b88 <__cmpsf2+0x4c>
 8000b82:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000b86:	d105      	bne.n	8000b94 <__cmpsf2+0x58>
 8000b88:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000b8c:	d1e4      	bne.n	8000b58 <__cmpsf2+0x1c>
 8000b8e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000b92:	d0e1      	beq.n	8000b58 <__cmpsf2+0x1c>
 8000b94:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <__aeabi_cfrcmple>:
 8000b9c:	4684      	mov	ip, r0
 8000b9e:	4608      	mov	r0, r1
 8000ba0:	4661      	mov	r1, ip
 8000ba2:	e7ff      	b.n	8000ba4 <__aeabi_cfcmpeq>

08000ba4 <__aeabi_cfcmpeq>:
 8000ba4:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ba6:	f7ff ffc9 	bl	8000b3c <__cmpsf2>
 8000baa:	2800      	cmp	r0, #0
 8000bac:	bf48      	it	mi
 8000bae:	f110 0f00 	cmnmi.w	r0, #0
 8000bb2:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000bb4 <__aeabi_fcmpeq>:
 8000bb4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb8:	f7ff fff4 	bl	8000ba4 <__aeabi_cfcmpeq>
 8000bbc:	bf0c      	ite	eq
 8000bbe:	2001      	moveq	r0, #1
 8000bc0:	2000      	movne	r0, #0
 8000bc2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_fcmplt>:
 8000bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bcc:	f7ff ffea 	bl	8000ba4 <__aeabi_cfcmpeq>
 8000bd0:	bf34      	ite	cc
 8000bd2:	2001      	movcc	r0, #1
 8000bd4:	2000      	movcs	r0, #0
 8000bd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bda:	bf00      	nop

08000bdc <__aeabi_fcmple>:
 8000bdc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be0:	f7ff ffe0 	bl	8000ba4 <__aeabi_cfcmpeq>
 8000be4:	bf94      	ite	ls
 8000be6:	2001      	movls	r0, #1
 8000be8:	2000      	movhi	r0, #0
 8000bea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bee:	bf00      	nop

08000bf0 <__aeabi_fcmpge>:
 8000bf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf4:	f7ff ffd2 	bl	8000b9c <__aeabi_cfrcmple>
 8000bf8:	bf94      	ite	ls
 8000bfa:	2001      	movls	r0, #1
 8000bfc:	2000      	movhi	r0, #0
 8000bfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c02:	bf00      	nop

08000c04 <__aeabi_fcmpgt>:
 8000c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c08:	f7ff ffc8 	bl	8000b9c <__aeabi_cfrcmple>
 8000c0c:	bf34      	ite	cc
 8000c0e:	2001      	movcc	r0, #1
 8000c10:	2000      	movcs	r0, #0
 8000c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c16:	bf00      	nop

08000c18 <__aeabi_fcmpun>:
 8000c18:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c1c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c24:	d102      	bne.n	8000c2c <__aeabi_fcmpun+0x14>
 8000c26:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000c2a:	d108      	bne.n	8000c3e <__aeabi_fcmpun+0x26>
 8000c2c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000c30:	d102      	bne.n	8000c38 <__aeabi_fcmpun+0x20>
 8000c32:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000c36:	d102      	bne.n	8000c3e <__aeabi_fcmpun+0x26>
 8000c38:	f04f 0000 	mov.w	r0, #0
 8000c3c:	4770      	bx	lr
 8000c3e:	f04f 0001 	mov.w	r0, #1
 8000c42:	4770      	bx	lr

08000c44 <__aeabi_d2lz>:
 8000c44:	b538      	push	{r3, r4, r5, lr}
 8000c46:	2200      	movs	r2, #0
 8000c48:	2300      	movs	r3, #0
 8000c4a:	4604      	mov	r4, r0
 8000c4c:	460d      	mov	r5, r1
 8000c4e:	f7ff febf 	bl	80009d0 <__aeabi_dcmplt>
 8000c52:	b928      	cbnz	r0, 8000c60 <__aeabi_d2lz+0x1c>
 8000c54:	4620      	mov	r0, r4
 8000c56:	4629      	mov	r1, r5
 8000c58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c5c:	f000 b80a 	b.w	8000c74 <__aeabi_d2ulz>
 8000c60:	4620      	mov	r0, r4
 8000c62:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c66:	f000 f805 	bl	8000c74 <__aeabi_d2ulz>
 8000c6a:	4240      	negs	r0, r0
 8000c6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c70:	bd38      	pop	{r3, r4, r5, pc}
 8000c72:	bf00      	nop

08000c74 <__aeabi_d2ulz>:
 8000c74:	b5d0      	push	{r4, r6, r7, lr}
 8000c76:	2200      	movs	r2, #0
 8000c78:	4b0b      	ldr	r3, [pc, #44]	@ (8000ca8 <__aeabi_d2ulz+0x34>)
 8000c7a:	4606      	mov	r6, r0
 8000c7c:	460f      	mov	r7, r1
 8000c7e:	f7ff fc35 	bl	80004ec <__aeabi_dmul>
 8000c82:	f7ff fee3 	bl	8000a4c <__aeabi_d2uiz>
 8000c86:	4604      	mov	r4, r0
 8000c88:	f7ff fbb6 	bl	80003f8 <__aeabi_ui2d>
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	4b07      	ldr	r3, [pc, #28]	@ (8000cac <__aeabi_d2ulz+0x38>)
 8000c90:	f7ff fc2c 	bl	80004ec <__aeabi_dmul>
 8000c94:	4602      	mov	r2, r0
 8000c96:	460b      	mov	r3, r1
 8000c98:	4630      	mov	r0, r6
 8000c9a:	4639      	mov	r1, r7
 8000c9c:	f7ff fa6e 	bl	800017c <__aeabi_dsub>
 8000ca0:	f7ff fed4 	bl	8000a4c <__aeabi_d2uiz>
 8000ca4:	4621      	mov	r1, r4
 8000ca6:	bdd0      	pop	{r4, r6, r7, pc}
 8000ca8:	3df00000 	.word	0x3df00000
 8000cac:	41f00000 	.word	0x41f00000

08000cb0 <send_AT_command>:

uint8_t buf[100];


void send_AT_command(char *command)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)command, strlen(command), 100);
 8000cb8:	6878      	ldr	r0, [r7, #4]
 8000cba:	f7ff fa53 	bl	8000164 <strlen>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	b29a      	uxth	r2, r3
 8000cc2:	2364      	movs	r3, #100	@ 0x64
 8000cc4:	6879      	ldr	r1, [r7, #4]
 8000cc6:	4806      	ldr	r0, [pc, #24]	@ (8000ce0 <send_AT_command+0x30>)
 8000cc8:	f004 fc48 	bl	800555c <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, 100);
 8000ccc:	2364      	movs	r3, #100	@ 0x64
 8000cce:	2202      	movs	r2, #2
 8000cd0:	4904      	ldr	r1, [pc, #16]	@ (8000ce4 <send_AT_command+0x34>)
 8000cd2:	4803      	ldr	r0, [pc, #12]	@ (8000ce0 <send_AT_command+0x30>)
 8000cd4:	f004 fc42 	bl	800555c <HAL_UART_Transmit>
  //HAL_UART_Receive(&huart2, buf, sizeof(buf), 100);
}
 8000cd8:	bf00      	nop
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20000bb4 	.word	0x20000bb4
 8000ce4:	0800da98 	.word	0x0800da98

08000ce8 <BluetoothInit>:

void BluetoothInit()
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  send_AT_command ("AT");
 8000cec:	4810      	ldr	r0, [pc, #64]	@ (8000d30 <BluetoothInit+0x48>)
 8000cee:	f7ff ffdf 	bl	8000cb0 <send_AT_command>
  HAL_Delay (200);
 8000cf2:	20c8      	movs	r0, #200	@ 0xc8
 8000cf4:	f001 fc7a 	bl	80025ec <HAL_Delay>
  send_AT_command ("AT+RENEW");
 8000cf8:	480e      	ldr	r0, [pc, #56]	@ (8000d34 <BluetoothInit+0x4c>)
 8000cfa:	f7ff ffd9 	bl	8000cb0 <send_AT_command>
  HAL_Delay (200);
 8000cfe:	20c8      	movs	r0, #200	@ 0xc8
 8000d00:	f001 fc74 	bl	80025ec <HAL_Delay>
  send_AT_command ("AT+RESET");
 8000d04:	480c      	ldr	r0, [pc, #48]	@ (8000d38 <BluetoothInit+0x50>)
 8000d06:	f7ff ffd3 	bl	8000cb0 <send_AT_command>
  HAL_Delay (200);
 8000d0a:	20c8      	movs	r0, #200	@ 0xc8
 8000d0c:	f001 fc6e 	bl	80025ec <HAL_Delay>
  send_AT_command ("AT+ROLE1");
 8000d10:	480a      	ldr	r0, [pc, #40]	@ (8000d3c <BluetoothInit+0x54>)
 8000d12:	f7ff ffcd 	bl	8000cb0 <send_AT_command>
  HAL_Delay (200);
 8000d16:	20c8      	movs	r0, #200	@ 0xc8
 8000d18:	f001 fc68 	bl	80025ec <HAL_Delay>
  send_AT_command ("AT+RESET");
 8000d1c:	4806      	ldr	r0, [pc, #24]	@ (8000d38 <BluetoothInit+0x50>)
 8000d1e:	f7ff ffc7 	bl	8000cb0 <send_AT_command>
  HAL_Delay (2000);
 8000d22:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000d26:	f001 fc61 	bl	80025ec <HAL_Delay>
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	0800da9c 	.word	0x0800da9c
 8000d34:	0800daa0 	.word	0x0800daa0
 8000d38:	0800daac 	.word	0x0800daac
 8000d3c:	0800dab8 	.word	0x0800dab8

08000d40 <cliInit>:
void cliShowList(cli_args_t *args);
void cliMemoryDump(cli_args_t *args);


bool cliInit(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  cli_node.is_open = false;
 8000d44:	4b1b      	ldr	r3, [pc, #108]	@ (8000db4 <cliInit+0x74>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	721a      	strb	r2, [r3, #8]
  cli_node.is_log  = false;
 8000d4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000db4 <cliInit+0x74>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	725a      	strb	r2, [r3, #9]
  cli_node.state   = CLI_RX_IDLE;
 8000d50:	4b18      	ldr	r3, [pc, #96]	@ (8000db4 <cliInit+0x74>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	741a      	strb	r2, [r3, #16]

  cli_node.hist_line_i     = 0;
 8000d56:	4b17      	ldr	r3, [pc, #92]	@ (8000db4 <cliInit+0x74>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
  cli_node.hist_line_last  = 0;
 8000d5e:	4b15      	ldr	r3, [pc, #84]	@ (8000db4 <cliInit+0x74>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
  cli_node.hist_line_count = 0;
 8000d66:	4b13      	ldr	r3, [pc, #76]	@ (8000db4 <cliInit+0x74>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	f883 2197 	strb.w	r2, [r3, #407]	@ 0x197
  cli_node.hist_line_new   = false;
 8000d6e:	4b11      	ldr	r3, [pc, #68]	@ (8000db4 <cliInit+0x74>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	f883 2194 	strb.w	r2, [r3, #404]	@ 0x194

  cli_node.cmd_args.getData  = cliArgsGetData;
 8000d76:	4b0f      	ldr	r3, [pc, #60]	@ (8000db4 <cliInit+0x74>)
 8000d78:	4a0f      	ldr	r2, [pc, #60]	@ (8000db8 <cliInit+0x78>)
 8000d7a:	f8c3 2434 	str.w	r2, [r3, #1076]	@ 0x434
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 8000d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000db4 <cliInit+0x74>)
 8000d80:	4a0e      	ldr	r2, [pc, #56]	@ (8000dbc <cliInit+0x7c>)
 8000d82:	f8c3 2438 	str.w	r2, [r3, #1080]	@ 0x438
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 8000d86:	4b0b      	ldr	r3, [pc, #44]	@ (8000db4 <cliInit+0x74>)
 8000d88:	4a0d      	ldr	r2, [pc, #52]	@ (8000dc0 <cliInit+0x80>)
 8000d8a:	f8c3 243c 	str.w	r2, [r3, #1084]	@ 0x43c
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 8000d8e:	4b09      	ldr	r3, [pc, #36]	@ (8000db4 <cliInit+0x74>)
 8000d90:	4a0c      	ldr	r2, [pc, #48]	@ (8000dc4 <cliInit+0x84>)
 8000d92:	f8c3 2440 	str.w	r2, [r3, #1088]	@ 0x440

  cliLineClean(&cli_node);
 8000d96:	4807      	ldr	r0, [pc, #28]	@ (8000db4 <cliInit+0x74>)
 8000d98:	f000 fb86 	bl	80014a8 <cliLineClean>

  cliAdd("help", cliShowList);
 8000d9c:	490a      	ldr	r1, [pc, #40]	@ (8000dc8 <cliInit+0x88>)
 8000d9e:	480b      	ldr	r0, [pc, #44]	@ (8000dcc <cliInit+0x8c>)
 8000da0:	f000 fe00 	bl	80019a4 <cliAdd>
  cliAdd("md"  , cliMemoryDump);
 8000da4:	490a      	ldr	r1, [pc, #40]	@ (8000dd0 <cliInit+0x90>)
 8000da6:	480b      	ldr	r0, [pc, #44]	@ (8000dd4 <cliInit+0x94>)
 8000da8:	f000 fdfc 	bl	80019a4 <cliAdd>

  return true;
 8000dac:	2301      	movs	r3, #1
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	2000034c 	.word	0x2000034c
 8000db8:	0800186d 	.word	0x0800186d
 8000dbc:	080018bd 	.word	0x080018bd
 8000dc0:	0800190d 	.word	0x0800190d
 8000dc4:	08001951 	.word	0x08001951
 8000dc8:	08001a39 	.word	0x08001a39
 8000dcc:	0800dac4 	.word	0x0800dac4
 8000dd0:	08001aa9 	.word	0x08001aa9
 8000dd4:	0800dacc 	.word	0x0800dacc

08000dd8 <cliOpen>:

bool cliOpen(uint8_t ch, uint32_t baud)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	6039      	str	r1, [r7, #0]
 8000de2:	71fb      	strb	r3, [r7, #7]
  cli_node.ch = ch;
 8000de4:	4a1c      	ldr	r2, [pc, #112]	@ (8000e58 <cliOpen+0x80>)
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	7013      	strb	r3, [r2, #0]
  cli_node.baud = baud;
 8000dea:	4a1b      	ldr	r2, [pc, #108]	@ (8000e58 <cliOpen+0x80>)
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	6053      	str	r3, [r2, #4]

  qbuffer.in = 0;
 8000df0:	4b1a      	ldr	r3, [pc, #104]	@ (8000e5c <cliOpen+0x84>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
  qbuffer.out = 0;
 8000df6:	4b19      	ldr	r3, [pc, #100]	@ (8000e5c <cliOpen+0x84>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	605a      	str	r2, [r3, #4]
  qbuffer.len = 256;
 8000dfc:	4b17      	ldr	r3, [pc, #92]	@ (8000e5c <cliOpen+0x84>)
 8000dfe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e02:	609a      	str	r2, [r3, #8]
  qbuffer.p_buf = &uart_buf[0];
 8000e04:	4b15      	ldr	r3, [pc, #84]	@ (8000e5c <cliOpen+0x84>)
 8000e06:	4a16      	ldr	r2, [pc, #88]	@ (8000e60 <cliOpen+0x88>)
 8000e08:	60da      	str	r2, [r3, #12]

  cli_node.is_open = true;
 8000e0a:	4b13      	ldr	r3, [pc, #76]	@ (8000e58 <cliOpen+0x80>)
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	721a      	strb	r2, [r3, #8]

  if(ch == CH_CDC)
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d01a      	beq.n	8000e4c <cliOpen+0x74>
  {
  }
  else if(ch == CH_USART1)
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d117      	bne.n	8000e4c <cliOpen+0x74>
  {
    if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&uart_buf, 256) != HAL_OK)
 8000e1c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e20:	490f      	ldr	r1, [pc, #60]	@ (8000e60 <cliOpen+0x88>)
 8000e22:	4810      	ldr	r0, [pc, #64]	@ (8000e64 <cliOpen+0x8c>)
 8000e24:	f004 fcbc 	bl	80057a0 <HAL_UART_Receive_DMA>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d002      	beq.n	8000e34 <cliOpen+0x5c>
    {
      cli_node.is_open = false;
 8000e2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e58 <cliOpen+0x80>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	721a      	strb	r2, [r3, #8]
    }

    qbuffer.in = qbuffer.len - hdma_usart1_rx.Instance->CNDTR;
 8000e34:	4b09      	ldr	r3, [pc, #36]	@ (8000e5c <cliOpen+0x84>)
 8000e36:	689a      	ldr	r2, [r3, #8]
 8000e38:	4b0b      	ldr	r3, [pc, #44]	@ (8000e68 <cliOpen+0x90>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	1ad3      	subs	r3, r2, r3
 8000e40:	4a06      	ldr	r2, [pc, #24]	@ (8000e5c <cliOpen+0x84>)
 8000e42:	6013      	str	r3, [r2, #0]
    qbuffer.out = qbuffer.in;
 8000e44:	4b05      	ldr	r3, [pc, #20]	@ (8000e5c <cliOpen+0x84>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a04      	ldr	r2, [pc, #16]	@ (8000e5c <cliOpen+0x84>)
 8000e4a:	6053      	str	r3, [r2, #4]
  }

  return cli_node.is_open;
 8000e4c:	4b02      	ldr	r3, [pc, #8]	@ (8000e58 <cliOpen+0x80>)
 8000e4e:	7a1b      	ldrb	r3, [r3, #8]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	2000034c 	.word	0x2000034c
 8000e5c:	20000790 	.word	0x20000790
 8000e60:	200007a0 	.word	0x200007a0
 8000e64:	20000b6c 	.word	0x20000b6c
 8000e68:	20000bfc 	.word	0x20000bfc

08000e6c <cliShowLog>:
  cli_node.is_log = false;
  return true;
}

void cliShowLog(cli_t *p_cli)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  if (cli_node.is_log == true)
 8000e74:	4b34      	ldr	r3, [pc, #208]	@ (8000f48 <cliShowLog+0xdc>)
 8000e76:	7a5b      	ldrb	r3, [r3, #9]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d061      	beq.n	8000f40 <cliShowLog+0xd4>
  {
    uartPrintf(p_cli->log_ch, "Cursor  : %d\n", p_cli->line.cursor);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	7a98      	ldrb	r0, [r3, #10]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
 8000e86:	461a      	mov	r2, r3
 8000e88:	4930      	ldr	r1, [pc, #192]	@ (8000f4c <cliShowLog+0xe0>)
 8000e8a:	f000 fedd 	bl	8001c48 <uartPrintf>
    uartPrintf(p_cli->log_ch, "Count   : %d\n", p_cli->line.count);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	7a98      	ldrb	r0, [r3, #10]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
 8000e98:	461a      	mov	r2, r3
 8000e9a:	492d      	ldr	r1, [pc, #180]	@ (8000f50 <cliShowLog+0xe4>)
 8000e9c:	f000 fed4 	bl	8001c48 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf_len : %d\n", p_cli->line.buf_len);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	7a98      	ldrb	r0, [r3, #10]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	f893 32e4 	ldrb.w	r3, [r3, #740]	@ 0x2e4
 8000eaa:	461a      	mov	r2, r3
 8000eac:	4929      	ldr	r1, [pc, #164]	@ (8000f54 <cliShowLog+0xe8>)
 8000eae:	f000 fecb 	bl	8001c48 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf     : %s\n", p_cli->line.buf);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	7a98      	ldrb	r0, [r3, #10]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	4926      	ldr	r1, [pc, #152]	@ (8000f58 <cliShowLog+0xec>)
 8000ec0:	f000 fec2 	bl	8001c48 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_i  : %d\n", p_cli->hist_line_i);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	7a98      	ldrb	r0, [r3, #10]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f993 3195 	ldrsb.w	r3, [r3, #405]	@ 0x195
 8000ece:	461a      	mov	r2, r3
 8000ed0:	4922      	ldr	r1, [pc, #136]	@ (8000f5c <cliShowLog+0xf0>)
 8000ed2:	f000 feb9 	bl	8001c48 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_lt : %d\n", p_cli->hist_line_last);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	7a98      	ldrb	r0, [r3, #10]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	491f      	ldr	r1, [pc, #124]	@ (8000f60 <cliShowLog+0xf4>)
 8000ee4:	f000 feb0 	bl	8001c48 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_c  : %d\n", p_cli->hist_line_count);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	7a98      	ldrb	r0, [r3, #10]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	491b      	ldr	r1, [pc, #108]	@ (8000f64 <cliShowLog+0xf8>)
 8000ef6:	f000 fea7 	bl	8001c48 <uartPrintf>

    for (int i=0; i<p_cli->hist_line_count; i++)
 8000efa:	2300      	movs	r3, #0
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	e012      	b.n	8000f26 <cliShowLog+0xba>
    {
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	7a98      	ldrb	r0, [r3, #10]
 8000f04:	68fa      	ldr	r2, [r7, #12]
 8000f06:	4613      	mov	r3, r2
 8000f08:	015b      	lsls	r3, r3, #5
 8000f0a:	4413      	add	r3, r2
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	4413      	add	r3, r2
 8000f10:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 8000f14:	687a      	ldr	r2, [r7, #4]
 8000f16:	4413      	add	r3, r2
 8000f18:	68fa      	ldr	r2, [r7, #12]
 8000f1a:	4913      	ldr	r1, [pc, #76]	@ (8000f68 <cliShowLog+0xfc>)
 8000f1c:	f000 fe94 	bl	8001c48 <uartPrintf>
    for (int i=0; i<p_cli->hist_line_count; i++)
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	3301      	adds	r3, #1
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	4293      	cmp	r3, r2
 8000f32:	dbe5      	blt.n	8000f00 <cliShowLog+0x94>
    }
    uartPrintf(p_cli->log_ch, "\n");
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	7a9b      	ldrb	r3, [r3, #10]
 8000f38:	490c      	ldr	r1, [pc, #48]	@ (8000f6c <cliShowLog+0x100>)
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f000 fe84 	bl	8001c48 <uartPrintf>
  }
}
 8000f40:	bf00      	nop
 8000f42:	3710      	adds	r7, #16
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	2000034c 	.word	0x2000034c
 8000f4c:	0800dad0 	.word	0x0800dad0
 8000f50:	0800dae0 	.word	0x0800dae0
 8000f54:	0800daf0 	.word	0x0800daf0
 8000f58:	0800db00 	.word	0x0800db00
 8000f5c:	0800db10 	.word	0x0800db10
 8000f60:	0800db20 	.word	0x0800db20
 8000f64:	0800db30 	.word	0x0800db30
 8000f68:	0800db40 	.word	0x0800db40
 8000f6c:	0800db50 	.word	0x0800db50

08000f70 <cliShowPrompt>:

void cliShowPrompt(cli_t *p_cli)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uartPrintf(p_cli->ch, "\n\r");
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	4906      	ldr	r1, [pc, #24]	@ (8000f98 <cliShowPrompt+0x28>)
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f000 fe62 	bl	8001c48 <uartPrintf>
  uartPrintf(p_cli->ch, CLI_PROMPT_STR);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	4904      	ldr	r1, [pc, #16]	@ (8000f9c <cliShowPrompt+0x2c>)
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f000 fe5c 	bl	8001c48 <uartPrintf>
}
 8000f90:	bf00      	nop
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	0800db54 	.word	0x0800db54
 8000f9c:	0800db58 	.word	0x0800db58

08000fa0 <cliMain>:

bool cliMain(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  if (cli_node.is_open != true)
 8000fa4:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe0 <cliMain+0x40>)
 8000fa6:	7a1b      	ldrb	r3, [r3, #8]
 8000fa8:	f083 0301 	eor.w	r3, r3, #1
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <cliMain+0x16>
  {
    return false;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	e012      	b.n	8000fdc <cliMain+0x3c>
  }

  if(uartAvailable(cli_node.ch) > 0)
 8000fb6:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe0 <cliMain+0x40>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f000 fe16 	bl	8001bec <uartAvailable>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d009      	beq.n	8000fda <cliMain+0x3a>
  {
    cliUpdate(&cli_node, uartRead(cli_node.ch));
 8000fc6:	4b06      	ldr	r3, [pc, #24]	@ (8000fe0 <cliMain+0x40>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f000 fe98 	bl	8001d00 <uartRead>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4802      	ldr	r0, [pc, #8]	@ (8000fe0 <cliMain+0x40>)
 8000fd6:	f000 f805 	bl	8000fe4 <cliUpdate>
  }

  return true;
 8000fda:	2301      	movs	r3, #1
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	2000034c 	.word	0x2000034c

08000fe4 <cliUpdate>:
{
  return uartWrite(cli_node.ch, p_data, length);
}

bool cliUpdate(cli_t *p_cli, uint8_t rx_data)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08c      	sub	sp, #48	@ 0x30
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	460b      	mov	r3, r1
 8000fee:	70fb      	strb	r3, [r7, #3]
  bool ret = false;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t tx_buf[8];
  cli_line_t *line;

  line = &p_cli->line;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 8000ffc:	61fb      	str	r3, [r7, #28]


  if (p_cli->state == CLI_RX_IDLE)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	7c1b      	ldrb	r3, [r3, #16]
 8001002:	2b00      	cmp	r3, #0
 8001004:	f040 816d 	bne.w	80012e2 <cliUpdate+0x2fe>
  {
    switch(rx_data)
 8001008:	78fb      	ldrb	r3, [r7, #3]
 800100a:	2b7f      	cmp	r3, #127	@ 0x7f
 800100c:	d02a      	beq.n	8001064 <cliUpdate+0x80>
 800100e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001010:	f300 80da 	bgt.w	80011c8 <cliUpdate+0x1e4>
 8001014:	2b1b      	cmp	r3, #27
 8001016:	d021      	beq.n	800105c <cliUpdate+0x78>
 8001018:	2b1b      	cmp	r3, #27
 800101a:	f300 80d5 	bgt.w	80011c8 <cliUpdate+0x1e4>
 800101e:	2b08      	cmp	r3, #8
 8001020:	d062      	beq.n	80010e8 <cliUpdate+0x104>
 8001022:	2b0d      	cmp	r3, #13
 8001024:	f040 80d0 	bne.w	80011c8 <cliUpdate+0x1e4>
    {
      // 엔터
      //
      case CLI_KEY_ENTER:
        if (line->count > 0)
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800102e:	2b00      	cmp	r3, #0
 8001030:	d005      	beq.n	800103e <cliUpdate+0x5a>
        {
          cliLineAdd(p_cli);
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f000 fa51 	bl	80014da <cliLineAdd>
          cliRunCmd(p_cli);
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f000 fb1d 	bl	8001678 <cliRunCmd>
        }

        line->count = 0;
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	2200      	movs	r2, #0
 8001042:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        line->cursor = 0;
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	2200      	movs	r2, #0
 800104a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        line->buf[0] = 0;
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	2200      	movs	r2, #0
 8001052:	701a      	strb	r2, [r3, #0]
        cliShowPrompt(p_cli);
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f7ff ff8b 	bl	8000f70 <cliShowPrompt>
        break;
 800105a:	e142      	b.n	80012e2 <cliUpdate+0x2fe>


      case CLI_KEY_ESC:
        p_cli->state = CLI_RX_SP1;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2201      	movs	r2, #1
 8001060:	741a      	strb	r2, [r3, #16]
        break;
 8001062:	e13e      	b.n	80012e2 <cliUpdate+0x2fe>


      // DEL
      //
      case CLI_KEY_DEL:
        if (line->cursor < line->count)
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001070:	429a      	cmp	r2, r3
 8001072:	f080 8131 	bcs.w	80012d8 <cliUpdate+0x2f4>
        {
          uint8_t mov_len;

          mov_len = line->count - line->cursor;
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001082:	1ad3      	subs	r3, r2, r3
 8001084:	76fb      	strb	r3, [r7, #27]
          for (int i=1; i<mov_len; i++)
 8001086:	2301      	movs	r3, #1
 8001088:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800108a:	e013      	b.n	80010b4 <cliUpdate+0xd0>
          {
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001092:	461a      	mov	r2, r3
 8001094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001096:	441a      	add	r2, r3
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800109e:	4619      	mov	r1, r3
 80010a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010a2:	440b      	add	r3, r1
 80010a4:	3b01      	subs	r3, #1
 80010a6:	69f9      	ldr	r1, [r7, #28]
 80010a8:	5c89      	ldrb	r1, [r1, r2]
 80010aa:	69fa      	ldr	r2, [r7, #28]
 80010ac:	54d1      	strb	r1, [r2, r3]
          for (int i=1; i<mov_len; i++)
 80010ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010b0:	3301      	adds	r3, #1
 80010b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80010b4:	7efb      	ldrb	r3, [r7, #27]
 80010b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80010b8:	429a      	cmp	r2, r3
 80010ba:	dbe7      	blt.n	800108c <cliUpdate+0xa8>
          }

          line->count--;
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80010c2:	3b01      	subs	r3, #1
 80010c4:	b2da      	uxtb	r2, r3
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          line->buf[line->count] = 0;
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80010d2:	461a      	mov	r2, r3
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	2100      	movs	r1, #0
 80010d8:	5499      	strb	r1, [r3, r2]

          uartPrintf(p_cli->ch, "\x1B[1P");
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	498d      	ldr	r1, [pc, #564]	@ (8001314 <cliUpdate+0x330>)
 80010e0:	4618      	mov	r0, r3
 80010e2:	f000 fdb1 	bl	8001c48 <uartPrintf>
        }
        break;
 80010e6:	e0f7      	b.n	80012d8 <cliUpdate+0x2f4>


      // 백스페이스
      //
      case CLI_KEY_BACK:
        if (line->count > 0 && line->cursor > 0)
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d055      	beq.n	800119e <cliUpdate+0x1ba>
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d050      	beq.n	800119e <cliUpdate+0x1ba>
        {
          if (line->cursor == line->count)
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001108:	429a      	cmp	r2, r3
 800110a:	d10e      	bne.n	800112a <cliUpdate+0x146>
          {
            line->count--;
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001112:	3b01      	subs	r3, #1
 8001114:	b2da      	uxtb	r2, r3
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
            line->buf[line->count] = 0;
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001122:	461a      	mov	r2, r3
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	2100      	movs	r1, #0
 8001128:	5499      	strb	r1, [r3, r2]
          }

          if (line->cursor < line->count)
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001136:	429a      	cmp	r2, r3
 8001138:	d231      	bcs.n	800119e <cliUpdate+0x1ba>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001146:	1ad3      	subs	r3, r2, r3
 8001148:	76bb      	strb	r3, [r7, #26]

            for (int i=0; i<mov_len; i++)
 800114a:	2300      	movs	r3, #0
 800114c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800114e:	e013      	b.n	8001178 <cliUpdate+0x194>
            {
              line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001156:	461a      	mov	r2, r3
 8001158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800115a:	441a      	add	r2, r3
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001162:	4619      	mov	r1, r3
 8001164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001166:	440b      	add	r3, r1
 8001168:	3b01      	subs	r3, #1
 800116a:	69f9      	ldr	r1, [r7, #28]
 800116c:	5c89      	ldrb	r1, [r1, r2]
 800116e:	69fa      	ldr	r2, [r7, #28]
 8001170:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 8001172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001174:	3301      	adds	r3, #1
 8001176:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001178:	7ebb      	ldrb	r3, [r7, #26]
 800117a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800117c:	429a      	cmp	r2, r3
 800117e:	dbe7      	blt.n	8001150 <cliUpdate+0x16c>
            }

            line->count--;
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001186:	3b01      	subs	r3, #1
 8001188:	b2da      	uxtb	r2, r3
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
            line->buf[line->count] = 0;
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001196:	461a      	mov	r2, r3
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	2100      	movs	r1, #0
 800119c:	5499      	strb	r1, [r3, r2]
          }
        }

        if (line->cursor > 0)
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	f000 8099 	beq.w	80012dc <cliUpdate+0x2f8>
        {
          line->cursor--;
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80011b0:	3b01      	subs	r3, #1
 80011b2:	b2da      	uxtb	r2, r3
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	4956      	ldr	r1, [pc, #344]	@ (8001318 <cliUpdate+0x334>)
 80011c0:	4618      	mov	r0, r3
 80011c2:	f000 fd41 	bl	8001c48 <uartPrintf>
        }
        break;
 80011c6:	e089      	b.n	80012dc <cliUpdate+0x2f8>


      default:
        if ((line->count + 1) < line->buf_len)
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80011ce:	3301      	adds	r3, #1
 80011d0:	69fa      	ldr	r2, [r7, #28]
 80011d2:	f892 2040 	ldrb.w	r2, [r2, #64]	@ 0x40
 80011d6:	4293      	cmp	r3, r2
 80011d8:	f280 8082 	bge.w	80012e0 <cliUpdate+0x2fc>
        {
          if (line->cursor == line->count)
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d124      	bne.n	8001236 <cliUpdate+0x252>
          {
            uartWrite(p_cli->ch, &rx_data, 1);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	1cf9      	adds	r1, r7, #3
 80011f2:	2201      	movs	r2, #1
 80011f4:	4618      	mov	r0, r3
 80011f6:	f000 fd5f 	bl	8001cb8 <uartWrite>

            line->buf[line->cursor] = rx_data;
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001200:	461a      	mov	r2, r3
 8001202:	78f9      	ldrb	r1, [r7, #3]
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	5499      	strb	r1, [r3, r2]
            line->count++;
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800120e:	3301      	adds	r3, #1
 8001210:	b2da      	uxtb	r2, r3
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
            line->cursor++;
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800121e:	3301      	adds	r3, #1
 8001220:	b2da      	uxtb	r2, r3
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
            line->buf[line->count] = 0;
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800122e:	461a      	mov	r2, r3
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	2100      	movs	r1, #0
 8001234:	5499      	strb	r1, [r3, r2]
          }
          if (line->cursor < line->count)
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001242:	429a      	cmp	r2, r3
 8001244:	d24c      	bcs.n	80012e0 <cliUpdate+0x2fc>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	767b      	strb	r3, [r7, #25]
            for (int i=0; i<mov_len; i++)
 8001256:	2300      	movs	r3, #0
 8001258:	627b      	str	r3, [r7, #36]	@ 0x24
 800125a:	e013      	b.n	8001284 <cliUpdate+0x2a0>
            {
              line->buf[line->count - i] = line->buf[line->count - i - 1];
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001262:	461a      	mov	r2, r3
 8001264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	1e5a      	subs	r2, r3, #1
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001270:	4619      	mov	r1, r3
 8001272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001274:	1acb      	subs	r3, r1, r3
 8001276:	69f9      	ldr	r1, [r7, #28]
 8001278:	5c89      	ldrb	r1, [r1, r2]
 800127a:	69fa      	ldr	r2, [r7, #28]
 800127c:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 800127e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001280:	3301      	adds	r3, #1
 8001282:	627b      	str	r3, [r7, #36]	@ 0x24
 8001284:	7e7b      	ldrb	r3, [r7, #25]
 8001286:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001288:	429a      	cmp	r2, r3
 800128a:	dbe7      	blt.n	800125c <cliUpdate+0x278>
            }
            line->buf[line->cursor] = rx_data;
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001292:	461a      	mov	r2, r3
 8001294:	78f9      	ldrb	r1, [r7, #3]
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	5499      	strb	r1, [r3, r2]
            line->count++;
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80012a0:	3301      	adds	r3, #1
 80012a2:	b2da      	uxtb	r2, r3
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
            line->cursor++;
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80012b0:	3301      	adds	r3, #1
 80012b2:	b2da      	uxtb	r2, r3
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
            line->buf[line->count] = 0;
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80012c0:	461a      	mov	r2, r3
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	2100      	movs	r1, #0
 80012c6:	5499      	strb	r1, [r3, r2]

            uartPrintf(p_cli->ch, "\x1B[4h%c\x1B[4l", rx_data);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	78fa      	ldrb	r2, [r7, #3]
 80012ce:	4913      	ldr	r1, [pc, #76]	@ (800131c <cliUpdate+0x338>)
 80012d0:	4618      	mov	r0, r3
 80012d2:	f000 fcb9 	bl	8001c48 <uartPrintf>
          }
        }
        break;
 80012d6:	e003      	b.n	80012e0 <cliUpdate+0x2fc>
        break;
 80012d8:	bf00      	nop
 80012da:	e002      	b.n	80012e2 <cliUpdate+0x2fe>
        break;
 80012dc:	bf00      	nop
 80012de:	e000      	b.n	80012e2 <cliUpdate+0x2fe>
        break;
 80012e0:	bf00      	nop
    }
  }

  switch(p_cli->state)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	7c1b      	ldrb	r3, [r3, #16]
 80012e6:	3b01      	subs	r3, #1
 80012e8:	2b03      	cmp	r3, #3
 80012ea:	f200 80d0 	bhi.w	800148e <cliUpdate+0x4aa>
 80012ee:	a201      	add	r2, pc, #4	@ (adr r2, 80012f4 <cliUpdate+0x310>)
 80012f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012f4:	08001305 	.word	0x08001305
 80012f8:	0800130d 	.word	0x0800130d
 80012fc:	08001321 	.word	0x08001321
 8001300:	08001485 	.word	0x08001485
  {
    case CLI_RX_SP1:
      p_cli->state = CLI_RX_SP2;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2202      	movs	r2, #2
 8001308:	741a      	strb	r2, [r3, #16]
      break;
 800130a:	e0c0      	b.n	800148e <cliUpdate+0x4aa>

    case CLI_RX_SP2:
      p_cli->state = CLI_RX_SP3;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2203      	movs	r2, #3
 8001310:	741a      	strb	r2, [r3, #16]
      break;
 8001312:	e0bc      	b.n	800148e <cliUpdate+0x4aa>
 8001314:	0800db60 	.word	0x0800db60
 8001318:	0800db68 	.word	0x0800db68
 800131c:	0800db70 	.word	0x0800db70

    case CLI_RX_SP3:
      p_cli->state = CLI_RX_IDLE;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2200      	movs	r2, #0
 8001324:	741a      	strb	r2, [r3, #16]

      if (rx_data == CLI_KEY_LEFT)
 8001326:	78fb      	ldrb	r3, [r7, #3]
 8001328:	2b44      	cmp	r3, #68	@ 0x44
 800132a:	d11a      	bne.n	8001362 <cliUpdate+0x37e>
      {
        if (line->cursor > 0)
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001332:	2b00      	cmp	r3, #0
 8001334:	d015      	beq.n	8001362 <cliUpdate+0x37e>
        {
          line->cursor--;
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800133c:	3b01      	subs	r3, #1
 800133e:	b2da      	uxtb	r2, r3
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          tx_buf[0] = 0x1B;
 8001346:	231b      	movs	r3, #27
 8001348:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 800134a:	235b      	movs	r3, #91	@ 0x5b
 800134c:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 800134e:	78fb      	ldrb	r3, [r7, #3]
 8001350:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	f107 010c 	add.w	r1, r7, #12
 800135a:	2203      	movs	r2, #3
 800135c:	4618      	mov	r0, r3
 800135e:	f000 fcab 	bl	8001cb8 <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_RIGHT)
 8001362:	78fb      	ldrb	r3, [r7, #3]
 8001364:	2b43      	cmp	r3, #67	@ 0x43
 8001366:	d11d      	bne.n	80013a4 <cliUpdate+0x3c0>
      {
        if (line->cursor < line->count)
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001374:	429a      	cmp	r2, r3
 8001376:	d215      	bcs.n	80013a4 <cliUpdate+0x3c0>
        {
          line->cursor++;
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800137e:	3301      	adds	r3, #1
 8001380:	b2da      	uxtb	r2, r3
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

          tx_buf[0] = 0x1B;
 8001388:	231b      	movs	r3, #27
 800138a:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 800138c:	235b      	movs	r3, #91	@ 0x5b
 800138e:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 8001390:	78fb      	ldrb	r3, [r7, #3]
 8001392:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	f107 010c 	add.w	r1, r7, #12
 800139c:	2203      	movs	r2, #3
 800139e:	4618      	mov	r0, r3
 80013a0:	f000 fc8a 	bl	8001cb8 <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_UP)
 80013a4:	78fb      	ldrb	r3, [r7, #3]
 80013a6:	2b41      	cmp	r3, #65	@ 0x41
 80013a8:	d10c      	bne.n	80013c4 <cliUpdate+0x3e0>
      {
        cliLineChange(p_cli, true);
 80013aa:	2101      	movs	r1, #1
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f000 f8d9 	bl	8001564 <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	781a      	ldrb	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 80013bc:	4619      	mov	r1, r3
 80013be:	4610      	mov	r0, r2
 80013c0:	f000 fc42 	bl	8001c48 <uartPrintf>
      }

      if (rx_data == CLI_KEY_DOWN)
 80013c4:	78fb      	ldrb	r3, [r7, #3]
 80013c6:	2b42      	cmp	r3, #66	@ 0x42
 80013c8:	d10c      	bne.n	80013e4 <cliUpdate+0x400>
      {
        cliLineChange(p_cli, false);
 80013ca:	2100      	movs	r1, #0
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f000 f8c9 	bl	8001564 <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	781a      	ldrb	r2, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 80013dc:	4619      	mov	r1, r3
 80013de:	4610      	mov	r0, r2
 80013e0:	f000 fc32 	bl	8001c48 <uartPrintf>
      }

      if (rx_data == CLI_KEY_HOME)
 80013e4:	78fb      	ldrb	r3, [r7, #3]
 80013e6:	2b31      	cmp	r3, #49	@ 0x31
 80013e8:	d10f      	bne.n	800140a <cliUpdate+0x426>
      {
        uartPrintf(p_cli->ch, "\x1B[%dD", line->cursor);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	7818      	ldrb	r0, [r3, #0]
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80013f4:	461a      	mov	r2, r3
 80013f6:	492a      	ldr	r1, [pc, #168]	@ (80014a0 <cliUpdate+0x4bc>)
 80013f8:	f000 fc26 	bl	8001c48 <uartPrintf>
        line->cursor = 0;
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	2200      	movs	r2, #0
 8001400:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        p_cli->state = CLI_RX_SP4;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2204      	movs	r2, #4
 8001408:	741a      	strb	r2, [r3, #16]
      }

      if (rx_data == CLI_KEY_END)
 800140a:	78fb      	ldrb	r3, [r7, #3]
 800140c:	2b34      	cmp	r3, #52	@ 0x34
 800140e:	d13d      	bne.n	800148c <cliUpdate+0x4a8>
      {
        uint16_t mov_len;

        if (line->cursor < line->count)
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800141c:	429a      	cmp	r2, r3
 800141e:	d20f      	bcs.n	8001440 <cliUpdate+0x45c>
        {
          mov_len = line->count - line->cursor;
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001426:	461a      	mov	r2, r3
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dC", mov_len);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	8afa      	ldrh	r2, [r7, #22]
 8001438:	491a      	ldr	r1, [pc, #104]	@ (80014a4 <cliUpdate+0x4c0>)
 800143a:	4618      	mov	r0, r3
 800143c:	f000 fc04 	bl	8001c48 <uartPrintf>
        }
        if (line->cursor > line->count)
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800144c:	429a      	cmp	r2, r3
 800144e:	d90f      	bls.n	8001470 <cliUpdate+0x48c>
        {
          mov_len = line->cursor - line->count;
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001456:	461a      	mov	r2, r3
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dD", mov_len);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	8afa      	ldrh	r2, [r7, #22]
 8001468:	490d      	ldr	r1, [pc, #52]	@ (80014a0 <cliUpdate+0x4bc>)
 800146a:	4618      	mov	r0, r3
 800146c:	f000 fbec 	bl	8001c48 <uartPrintf>
        }
        line->cursor = line->count;
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        p_cli->state = CLI_RX_SP4;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2204      	movs	r2, #4
 8001480:	741a      	strb	r2, [r3, #16]
      }
      break;
 8001482:	e003      	b.n	800148c <cliUpdate+0x4a8>

    case CLI_RX_SP4:
      p_cli->state = CLI_RX_IDLE;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2200      	movs	r2, #0
 8001488:	741a      	strb	r2, [r3, #16]
      break;
 800148a:	e000      	b.n	800148e <cliUpdate+0x4aa>
      break;
 800148c:	bf00      	nop
  }



  cliShowLog(p_cli);
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f7ff fcec 	bl	8000e6c <cliShowLog>

  return ret;
 8001494:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8001498:	4618      	mov	r0, r3
 800149a:	3730      	adds	r7, #48	@ 0x30
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	0800db7c 	.word	0x0800db7c
 80014a4:	0800db84 	.word	0x0800db84

080014a8 <cliLineClean>:

void cliLineClean(cli_t *p_cli)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  p_cli->line.count   = 0;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2200      	movs	r2, #0
 80014b4:	f883 22e6 	strb.w	r2, [r3, #742]	@ 0x2e6
  p_cli->line.cursor  = 0;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2200      	movs	r2, #0
 80014bc:	f883 22e5 	strb.w	r2, [r3, #741]	@ 0x2e5
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	223f      	movs	r2, #63	@ 0x3f
 80014c4:	f883 22e4 	strb.w	r2, [r3, #740]	@ 0x2e4
  p_cli->line.buf[0]  = 0;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2200      	movs	r2, #0
 80014cc:	f883 22a4 	strb.w	r2, [r3, #676]	@ 0x2a4
}
 80014d0:	bf00      	nop
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bc80      	pop	{r7}
 80014d8:	4770      	bx	lr

080014da <cliLineAdd>:

void cliLineAdd(cli_t *p_cli)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b082      	sub	sp, #8
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]

  p_cli->line_buf[p_cli->hist_line_last] = p_cli->line;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 80014e8:	461a      	mov	r2, r3
 80014ea:	6879      	ldr	r1, [r7, #4]
 80014ec:	4613      	mov	r3, r2
 80014ee:	015b      	lsls	r3, r3, #5
 80014f0:	4413      	add	r3, r2
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	4413      	add	r3, r2
 80014f6:	440b      	add	r3, r1
 80014f8:	f503 72cc 	add.w	r2, r3, #408	@ 0x198
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4610      	mov	r0, r2
 8001500:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 8001504:	2243      	movs	r2, #67	@ 0x43
 8001506:	4619      	mov	r1, r3
 8001508:	f00a fabd 	bl	800ba86 <memcpy>

  if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 8001512:	2b03      	cmp	r3, #3
 8001514:	d807      	bhi.n	8001526 <cliLineAdd+0x4c>
  {
    p_cli->hist_line_count++;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 800151c:	3301      	adds	r3, #1
 800151e:	b2da      	uxtb	r2, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f883 2197 	strb.w	r2, [r3, #407]	@ 0x197
  }

  p_cli->hist_line_i    = p_cli->hist_line_last;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 800152c:	b25a      	sxtb	r2, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
  p_cli->hist_line_last = (p_cli->hist_line_last + 1) % CLI_LINE_HIS_MAX;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 800153a:	3301      	adds	r3, #1
 800153c:	425a      	negs	r2, r3
 800153e:	f003 0303 	and.w	r3, r3, #3
 8001542:	f002 0203 	and.w	r2, r2, #3
 8001546:	bf58      	it	pl
 8001548:	4253      	negpl	r3, r2
 800154a:	b2da      	uxtb	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
  p_cli->hist_line_new  = true;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2201      	movs	r2, #1
 8001556:	f883 2194 	strb.w	r2, [r3, #404]	@ 0x194
}
 800155a:	bf00      	nop
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
	...

08001564 <cliLineChange>:

void cliLineChange(cli_t *p_cli, int8_t key_up)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	460b      	mov	r3, r1
 800156e:	70fb      	strb	r3, [r7, #3]
  uint8_t change_i;


  if (p_cli->hist_line_count == 0)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 8001576:	2b00      	cmp	r3, #0
 8001578:	d076      	beq.n	8001668 <cliLineChange+0x104>
  {
    return;
  }


  if (p_cli->line.cursor > 0)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
 8001580:	2b00      	cmp	r3, #0
 8001582:	d008      	beq.n	8001596 <cliLineChange+0x32>
  {
    uartPrintf(p_cli->ch, "\x1B[%dD", p_cli->line.cursor);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	7818      	ldrb	r0, [r3, #0]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
 800158e:	461a      	mov	r2, r3
 8001590:	4937      	ldr	r1, [pc, #220]	@ (8001670 <cliLineChange+0x10c>)
 8001592:	f000 fb59 	bl	8001c48 <uartPrintf>
  }
  if (p_cli->line.count > 0)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
 800159c:	2b00      	cmp	r3, #0
 800159e:	d008      	beq.n	80015b2 <cliLineChange+0x4e>
  {
    uartPrintf(p_cli->ch, "\x1B[%dP", p_cli->line.count);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	7818      	ldrb	r0, [r3, #0]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
 80015aa:	461a      	mov	r2, r3
 80015ac:	4931      	ldr	r1, [pc, #196]	@ (8001674 <cliLineChange+0x110>)
 80015ae:	f000 fb4b 	bl	8001c48 <uartPrintf>
  }


  if (key_up == true)
 80015b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d125      	bne.n	8001606 <cliLineChange+0xa2>
  {
    if (p_cli->hist_line_new == true)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f893 3194 	ldrb.w	r3, [r3, #404]	@ 0x194
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d006      	beq.n	80015d2 <cliLineChange+0x6e>
    {
      p_cli->hist_line_i = p_cli->hist_line_last;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 80015ca:	b25a      	sxtb	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
    }
    p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) % p_cli->hist_line_count;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f993 3195 	ldrsb.w	r3, [r3, #405]	@ 0x195
 80015d8:	461a      	mov	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 80015e0:	4413      	add	r3, r2
 80015e2:	3b01      	subs	r3, #1
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	f892 2197 	ldrb.w	r2, [r2, #407]	@ 0x197
 80015ea:	fb93 f1f2 	sdiv	r1, r3, r2
 80015ee:	fb01 f202 	mul.w	r2, r1, r2
 80015f2:	1a9b      	subs	r3, r3, r2
 80015f4:	b25a      	sxtb	r2, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
    change_i = p_cli->hist_line_i;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f993 3195 	ldrsb.w	r3, [r3, #405]	@ 0x195
 8001602:	73fb      	strb	r3, [r7, #15]
 8001604:	e013      	b.n	800162e <cliLineChange+0xca>
  }
  else
  {
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f993 3195 	ldrsb.w	r3, [r3, #405]	@ 0x195
 800160c:	3301      	adds	r3, #1
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	f892 2197 	ldrb.w	r2, [r2, #407]	@ 0x197
 8001614:	fb93 f1f2 	sdiv	r1, r3, r2
 8001618:	fb01 f202 	mul.w	r2, r1, r2
 800161c:	1a9b      	subs	r3, r3, r2
 800161e:	b25a      	sxtb	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
    change_i = p_cli->hist_line_i;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f993 3195 	ldrsb.w	r3, [r3, #405]	@ 0x195
 800162c:	73fb      	strb	r3, [r7, #15]
  }

  p_cli->line = p_cli->line_buf[change_i];
 800162e:	7bfa      	ldrb	r2, [r7, #15]
 8001630:	6879      	ldr	r1, [r7, #4]
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	4613      	mov	r3, r2
 8001636:	015b      	lsls	r3, r3, #5
 8001638:	4413      	add	r3, r2
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	4413      	add	r3, r2
 800163e:	4403      	add	r3, r0
 8001640:	f503 72cc 	add.w	r2, r3, #408	@ 0x198
 8001644:	f501 7329 	add.w	r3, r1, #676	@ 0x2a4
 8001648:	4611      	mov	r1, r2
 800164a:	2243      	movs	r2, #67	@ 0x43
 800164c:	4618      	mov	r0, r3
 800164e:	f00a fa1a 	bl	800ba86 <memcpy>
  p_cli->line.cursor = p_cli->line.count;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f893 22e6 	ldrb.w	r2, [r3, #742]	@ 0x2e6
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f883 22e5 	strb.w	r2, [r3, #741]	@ 0x2e5

  p_cli->hist_line_new = false;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2200      	movs	r2, #0
 8001662:	f883 2194 	strb.w	r2, [r3, #404]	@ 0x194
 8001666:	e000      	b.n	800166a <cliLineChange+0x106>
    return;
 8001668:	bf00      	nop
}
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	0800db7c 	.word	0x0800db7c
 8001674:	0800db8c 	.word	0x0800db8c

08001678 <cliRunCmd>:

bool cliRunCmd(cli_t *p_cli)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8001680:	2300      	movs	r3, #0
 8001682:	72fb      	strb	r3, [r7, #11]


  if (cliParseArgs(p_cli) == true)
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f000 f851 	bl	800172c <cliParseArgs>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d046      	beq.n	800171e <cliRunCmd+0xa6>
  {
    cliPrintf("\r\n");
 8001690:	4825      	ldr	r0, [pc, #148]	@ (8001728 <cliRunCmd+0xb0>)
 8001692:	f000 f893 	bl	80017bc <cliPrintf>

    cliToUpper(p_cli->argv[0]);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800169c:	4618      	mov	r0, r3
 800169e:	f000 f8b1 	bl	8001804 <cliToUpper>

    for (int i=0; i<p_cli->cmd_count; i++)
 80016a2:	2300      	movs	r3, #0
 80016a4:	60fb      	str	r3, [r7, #12]
 80016a6:	e033      	b.n	8001710 <cliRunCmd+0x98>
    {
      if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f8d3 0114 	ldr.w	r0, [r3, #276]	@ 0x114
 80016ae:	68fa      	ldr	r2, [r7, #12]
 80016b0:	4613      	mov	r3, r2
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	4413      	add	r3, r2
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	4413      	add	r3, r2
 80016c0:	3304      	adds	r3, #4
 80016c2:	4619      	mov	r1, r3
 80016c4:	f7fe fd44 	bl	8000150 <strcmp>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d11d      	bne.n	800170a <cliRunCmd+0x92>
      {
        p_cli->cmd_args.argc =  p_cli->argc - 1;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f8b3 3112 	ldrh.w	r3, [r3, #274]	@ 0x112
 80016d4:	3b01      	subs	r3, #1
 80016d6:	b29a      	uxth	r2, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f8a3 242c 	strh.w	r2, [r3, #1068]	@ 0x42c
        p_cli->cmd_args.argv = &p_cli->argv[1];
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	f503 728c 	add.w	r2, r3, #280	@ 0x118
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
        p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);
 80016ea:	6879      	ldr	r1, [r7, #4]
 80016ec:	68fa      	ldr	r2, [r7, #12]
 80016ee:	4613      	mov	r3, r2
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	4413      	add	r3, r2
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	440b      	add	r3, r1
 80016f8:	f503 733f 	add.w	r3, r3, #764	@ 0x2fc
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	f202 422c 	addw	r2, r2, #1068	@ 0x42c
 8001704:	4610      	mov	r0, r2
 8001706:	4798      	blx	r3
        break;
 8001708:	e009      	b.n	800171e <cliRunCmd+0xa6>
    for (int i=0; i<p_cli->cmd_count; i++)
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	3301      	adds	r3, #1
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	@ 0x2e8
 8001716:	461a      	mov	r2, r3
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	4293      	cmp	r3, r2
 800171c:	dbc4      	blt.n	80016a8 <cliRunCmd+0x30>
      }
    }
  }

  return ret;
 800171e:	7afb      	ldrb	r3, [r7, #11]
}
 8001720:	4618      	mov	r0, r3
 8001722:	3710      	adds	r7, #16
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	0800db94 	.word	0x0800db94

0800172c <cliParseArgs>:

bool cliParseArgs(cli_t *p_cli)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b088      	sub	sp, #32
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8001734:	2300      	movs	r3, #0
 8001736:	77fb      	strb	r3, [r7, #31]
  char *tok;
  char *next_ptr;
  uint16_t argc = 0;
 8001738:	2300      	movs	r3, #0
 800173a:	82fb      	strh	r3, [r7, #22]
  static const char *delim = " \f\n\r\t\v";
  char *cmdline;
  char **argv;

  p_cli->argc = 0;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	f8a3 2112 	strh.w	r2, [r3, #274]	@ 0x112

  cmdline = (char *)p_cli->line.buf;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 800174a:	613b      	str	r3, [r7, #16]
  argv    = p_cli->argv;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 8001752:	60fb      	str	r3, [r7, #12]

  argv[argc] = NULL;
 8001754:	8afb      	ldrh	r3, [r7, #22]
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	68fa      	ldr	r2, [r7, #12]
 800175a:	4413      	add	r3, r2
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]

  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8001760:	4b15      	ldr	r3, [pc, #84]	@ (80017b8 <cliParseArgs+0x8c>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f107 0208 	add.w	r2, r7, #8
 8001768:	4619      	mov	r1, r3
 800176a:	6938      	ldr	r0, [r7, #16]
 800176c:	f00a f90c 	bl	800b988 <strtok_r>
 8001770:	61b8      	str	r0, [r7, #24]
 8001772:	e010      	b.n	8001796 <cliParseArgs+0x6a>
  {
    argv[argc++] = tok;
 8001774:	8afb      	ldrh	r3, [r7, #22]
 8001776:	1c5a      	adds	r2, r3, #1
 8001778:	82fa      	strh	r2, [r7, #22]
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	68fa      	ldr	r2, [r7, #12]
 800177e:	4413      	add	r3, r2
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	601a      	str	r2, [r3, #0]
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8001784:	4b0c      	ldr	r3, [pc, #48]	@ (80017b8 <cliParseArgs+0x8c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f107 0208 	add.w	r2, r7, #8
 800178c:	4619      	mov	r1, r3
 800178e:	2000      	movs	r0, #0
 8001790:	f00a f8fa 	bl	800b988 <strtok_r>
 8001794:	61b8      	str	r0, [r7, #24]
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d1eb      	bne.n	8001774 <cliParseArgs+0x48>
  }

  p_cli->argc = argc;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	8afa      	ldrh	r2, [r7, #22]
 80017a0:	f8a3 2112 	strh.w	r2, [r3, #274]	@ 0x112

  if (argc > 0)
 80017a4:	8afb      	ldrh	r3, [r7, #22]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <cliParseArgs+0x82>
  {
    ret = true;
 80017aa:	2301      	movs	r3, #1
 80017ac:	77fb      	strb	r3, [r7, #31]
  }

  return ret;
 80017ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3720      	adds	r7, #32
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	20000000 	.word	0x20000000

080017bc <cliPrintf>:

void cliPrintf(const char *fmt, ...)
{
 80017bc:	b40f      	push	{r0, r1, r2, r3}
 80017be:	b580      	push	{r7, lr}
 80017c0:	b084      	sub	sp, #16
 80017c2:	af00      	add	r7, sp, #0
  va_list arg;
  va_start (arg, fmt);
 80017c4:	f107 031c 	add.w	r3, r7, #28
 80017c8:	607b      	str	r3, [r7, #4]
  int32_t len;
  cli_t *p_cli = &cli_node;
 80017ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001800 <cliPrintf+0x44>)
 80017cc:	60fb      	str	r3, [r7, #12]


  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	f103 0011 	add.w	r0, r3, #17
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80017dc:	f00a f884 	bl	800b8e8 <vsniprintf>
 80017e0:	60b8      	str	r0, [r7, #8]
  va_end (arg);

  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	7818      	ldrb	r0, [r3, #0]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	3311      	adds	r3, #17
 80017ea:	68ba      	ldr	r2, [r7, #8]
 80017ec:	4619      	mov	r1, r3
 80017ee:	f000 fa63 	bl	8001cb8 <uartWrite>
}
 80017f2:	bf00      	nop
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80017fc:	b004      	add	sp, #16
 80017fe:	4770      	bx	lr
 8001800:	2000034c 	.word	0x2000034c

08001804 <cliToUpper>:

void cliToUpper(char *str)
{
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  uint16_t i;
  uint8_t  str_ch;

  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 800180c:	2300      	movs	r3, #0
 800180e:	81fb      	strh	r3, [r7, #14]
 8001810:	e018      	b.n	8001844 <cliToUpper+0x40>
  {
    str_ch = str[i];
 8001812:	89fb      	ldrh	r3, [r7, #14]
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	4413      	add	r3, r2
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	737b      	strb	r3, [r7, #13]

    if (str_ch == 0)
 800181c:	7b7b      	ldrb	r3, [r7, #13]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d014      	beq.n	800184c <cliToUpper+0x48>
    {
      break;
    }

    if ((str_ch >= 'a') && (str_ch <= 'z'))
 8001822:	7b7b      	ldrb	r3, [r7, #13]
 8001824:	2b60      	cmp	r3, #96	@ 0x60
 8001826:	d905      	bls.n	8001834 <cliToUpper+0x30>
 8001828:	7b7b      	ldrb	r3, [r7, #13]
 800182a:	2b7a      	cmp	r3, #122	@ 0x7a
 800182c:	d802      	bhi.n	8001834 <cliToUpper+0x30>
    {
      str_ch = str_ch - 'a' + 'A';
 800182e:	7b7b      	ldrb	r3, [r7, #13]
 8001830:	3b20      	subs	r3, #32
 8001832:	737b      	strb	r3, [r7, #13]
    }
    str[i] = str_ch;
 8001834:	89fb      	ldrh	r3, [r7, #14]
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	4413      	add	r3, r2
 800183a:	7b7a      	ldrb	r2, [r7, #13]
 800183c:	701a      	strb	r2, [r3, #0]
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 800183e:	89fb      	ldrh	r3, [r7, #14]
 8001840:	3301      	adds	r3, #1
 8001842:	81fb      	strh	r3, [r7, #14]
 8001844:	89fb      	ldrh	r3, [r7, #14]
 8001846:	2b0f      	cmp	r3, #15
 8001848:	d9e3      	bls.n	8001812 <cliToUpper+0xe>
 800184a:	e000      	b.n	800184e <cliToUpper+0x4a>
      break;
 800184c:	bf00      	nop
  }

  if (i == CLI_CMD_NAME_MAX)
 800184e:	89fb      	ldrh	r3, [r7, #14]
 8001850:	2b10      	cmp	r3, #16
 8001852:	d105      	bne.n	8001860 <cliToUpper+0x5c>
  {
    str[i-1] = 0;
 8001854:	89fb      	ldrh	r3, [r7, #14]
 8001856:	3b01      	subs	r3, #1
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	4413      	add	r3, r2
 800185c:	2200      	movs	r2, #0
 800185e:	701a      	strb	r2, [r3, #0]
  }
}
 8001860:	bf00      	nop
 8001862:	3714      	adds	r7, #20
 8001864:	46bd      	mov	sp, r7
 8001866:	bc80      	pop	{r7}
 8001868:	4770      	bx	lr
	...

0800186c <cliArgsGetData>:

int32_t cliArgsGetData(uint8_t index)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	71fb      	strb	r3, [r7, #7]
  int32_t ret = 0;
 8001876:	2300      	movs	r3, #0
 8001878:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 800187a:	4b0f      	ldr	r3, [pc, #60]	@ (80018b8 <cliArgsGetData+0x4c>)
 800187c:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 800187e:	79fb      	ldrb	r3, [r7, #7]
 8001880:	b29a      	uxth	r2, r3
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	@ 0x42c
 8001888:	429a      	cmp	r2, r3
 800188a:	d301      	bcc.n	8001890 <cliArgsGetData+0x24>
  {
    return 0;
 800188c:	2300      	movs	r3, #0
 800188e:	e00e      	b.n	80018ae <cliArgsGetData+0x42>
  }

  ret = (int32_t)strtoul((const char * ) p_cli->cmd_args.argv[index], (char **)NULL, (int) 0);
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8001896:	79fb      	ldrb	r3, [r7, #7]
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	4413      	add	r3, r2
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2200      	movs	r2, #0
 80018a0:	2100      	movs	r1, #0
 80018a2:	4618      	mov	r0, r3
 80018a4:	f009 fee6 	bl	800b674 <strtoul>
 80018a8:	4603      	mov	r3, r0
 80018aa:	60fb      	str	r3, [r7, #12]

  return ret;
 80018ac:	68fb      	ldr	r3, [r7, #12]
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	2000034c 	.word	0x2000034c

080018bc <cliArgsGetFloat>:

float cliArgsGetFloat(uint8_t index)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	71fb      	strb	r3, [r7, #7]
  float ret = 0.0;
 80018c6:	f04f 0300 	mov.w	r3, #0
 80018ca:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 80018cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001908 <cliArgsGetFloat+0x4c>)
 80018ce:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 80018d0:	79fb      	ldrb	r3, [r7, #7]
 80018d2:	b29a      	uxth	r2, r3
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	@ 0x42c
 80018da:	429a      	cmp	r2, r3
 80018dc:	d302      	bcc.n	80018e4 <cliArgsGetFloat+0x28>
  {
    return 0;
 80018de:	f04f 0300 	mov.w	r3, #0
 80018e2:	e00c      	b.n	80018fe <cliArgsGetFloat+0x42>
  }

  ret = (float)strtof((const char * ) p_cli->cmd_args.argv[index], (char **)NULL);
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 80018ea:	79fb      	ldrb	r3, [r7, #7]
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	4413      	add	r3, r2
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2100      	movs	r1, #0
 80018f4:	4618      	mov	r0, r3
 80018f6:	f009 fdf7 	bl	800b4e8 <strtof>
 80018fa:	60f8      	str	r0, [r7, #12]

  return ret;
 80018fc:	68fb      	ldr	r3, [r7, #12]
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	2000034c 	.word	0x2000034c

0800190c <cliArgsGetStr>:

char *cliArgsGetStr(uint8_t index)
{
 800190c:	b480      	push	{r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	71fb      	strb	r3, [r7, #7]
  char *ret = NULL;
 8001916:	2300      	movs	r3, #0
 8001918:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 800191a:	4b0c      	ldr	r3, [pc, #48]	@ (800194c <cliArgsGetStr+0x40>)
 800191c:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 800191e:	79fb      	ldrb	r3, [r7, #7]
 8001920:	b29a      	uxth	r2, r3
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	@ 0x42c
 8001928:	429a      	cmp	r2, r3
 800192a:	d301      	bcc.n	8001930 <cliArgsGetStr+0x24>
  {
    return 0;
 800192c:	2300      	movs	r3, #0
 800192e:	e008      	b.n	8001942 <cliArgsGetStr+0x36>
  }

  ret = p_cli->cmd_args.argv[index];
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8001936:	79fb      	ldrb	r3, [r7, #7]
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	4413      	add	r3, r2
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	60fb      	str	r3, [r7, #12]

  return ret;
 8001940:	68fb      	ldr	r3, [r7, #12]
}
 8001942:	4618      	mov	r0, r3
 8001944:	3714      	adds	r7, #20
 8001946:	46bd      	mov	sp, r7
 8001948:	bc80      	pop	{r7}
 800194a:	4770      	bx	lr
 800194c:	2000034c 	.word	0x2000034c

08001950 <cliArgsIsStr>:

bool cliArgsIsStr(uint8_t index, char *p_str)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	6039      	str	r1, [r7, #0]
 800195a:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 800195c:	2300      	movs	r3, #0
 800195e:	73fb      	strb	r3, [r7, #15]
  cli_t *p_cli = &cli_node;
 8001960:	4b0f      	ldr	r3, [pc, #60]	@ (80019a0 <cliArgsIsStr+0x50>)
 8001962:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8001964:	79fb      	ldrb	r3, [r7, #7]
 8001966:	b29a      	uxth	r2, r3
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	@ 0x42c
 800196e:	429a      	cmp	r2, r3
 8001970:	d301      	bcc.n	8001976 <cliArgsIsStr+0x26>
  {
    return 0;
 8001972:	2300      	movs	r3, #0
 8001974:	e010      	b.n	8001998 <cliArgsIsStr+0x48>
  }

  if(strcmp(p_str, p_cli->cmd_args.argv[index]) == 0)
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 800197c:	79fb      	ldrb	r3, [r7, #7]
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4413      	add	r3, r2
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4619      	mov	r1, r3
 8001986:	6838      	ldr	r0, [r7, #0]
 8001988:	f7fe fbe2 	bl	8000150 <strcmp>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d101      	bne.n	8001996 <cliArgsIsStr+0x46>
  {
    ret = true;
 8001992:	2301      	movs	r3, #1
 8001994:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001996:	7bfb      	ldrb	r3, [r7, #15]
}
 8001998:	4618      	mov	r0, r3
 800199a:	3710      	adds	r7, #16
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	2000034c 	.word	0x2000034c

080019a4 <cliAdd>:
//    return false;
//  }
}

bool cliAdd(const char *cmd_str, void (*p_func)(cli_args_t *))
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  bool ret = true;
 80019ae:	2301      	movs	r3, #1
 80019b0:	75fb      	strb	r3, [r7, #23]
  cli_t *p_cli = &cli_node;
 80019b2:	4b20      	ldr	r3, [pc, #128]	@ (8001a34 <cliAdd+0x90>)
 80019b4:	613b      	str	r3, [r7, #16]
  uint16_t index;

  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	@ 0x2e8
 80019bc:	2b0f      	cmp	r3, #15
 80019be:	d901      	bls.n	80019c4 <cliAdd+0x20>
  {
    return false;
 80019c0:	2300      	movs	r3, #0
 80019c2:	e032      	b.n	8001a2a <cliAdd+0x86>
  }

  index = p_cli->cmd_count;
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	@ 0x2e8
 80019ca:	81fb      	strh	r3, [r7, #14]

  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 80019cc:	89fa      	ldrh	r2, [r7, #14]
 80019ce:	4613      	mov	r3, r2
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	4413      	add	r3, r2
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	4413      	add	r3, r2
 80019de:	3304      	adds	r3, #4
 80019e0:	6879      	ldr	r1, [r7, #4]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f00a f847 	bl	800ba76 <strcpy>
  p_cli->cmd_list[index].cmd_func = p_func;
 80019e8:	89fa      	ldrh	r2, [r7, #14]
 80019ea:	6939      	ldr	r1, [r7, #16]
 80019ec:	4613      	mov	r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	4413      	add	r3, r2
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	440b      	add	r3, r1
 80019f6:	f503 733f 	add.w	r3, r3, #764	@ 0x2fc
 80019fa:	683a      	ldr	r2, [r7, #0]
 80019fc:	601a      	str	r2, [r3, #0]

  cliToUpper(p_cli->cmd_list[index].cmd_str);
 80019fe:	89fa      	ldrh	r2, [r7, #14]
 8001a00:	4613      	mov	r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	4413      	add	r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	4413      	add	r3, r2
 8001a10:	3304      	adds	r3, #4
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff fef6 	bl	8001804 <cliToUpper>

  p_cli->cmd_count++;
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	@ 0x2e8
 8001a1e:	3301      	adds	r3, #1
 8001a20:	b29a      	uxth	r2, r3
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	f8a3 22e8 	strh.w	r2, [r3, #744]	@ 0x2e8

  return ret;
 8001a28:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3718      	adds	r7, #24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	2000034c 	.word	0x2000034c

08001a38 <cliShowList>:

void cliShowList(cli_args_t *args)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  cli_t *p_cli = &cli_node;
 8001a40:	4b15      	ldr	r3, [pc, #84]	@ (8001a98 <cliShowList+0x60>)
 8001a42:	60bb      	str	r3, [r7, #8]


  cliPrintf("\r\n");
 8001a44:	4815      	ldr	r0, [pc, #84]	@ (8001a9c <cliShowList+0x64>)
 8001a46:	f7ff feb9 	bl	80017bc <cliPrintf>
  cliPrintf("---------- cmd list ---------\r\n");
 8001a4a:	4815      	ldr	r0, [pc, #84]	@ (8001aa0 <cliShowList+0x68>)
 8001a4c:	f7ff feb6 	bl	80017bc <cliPrintf>

  for (int i=0; i<p_cli->cmd_count; i++)
 8001a50:	2300      	movs	r3, #0
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	e012      	b.n	8001a7c <cliShowList+0x44>
  {
    cliPrintf(p_cli->cmd_list[i].cmd_str);
 8001a56:	68fa      	ldr	r2, [r7, #12]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	4413      	add	r3, r2
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 8001a64:	68ba      	ldr	r2, [r7, #8]
 8001a66:	4413      	add	r3, r2
 8001a68:	3304      	adds	r3, #4
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff fea6 	bl	80017bc <cliPrintf>
    cliPrintf("\r\n");
 8001a70:	480a      	ldr	r0, [pc, #40]	@ (8001a9c <cliShowList+0x64>)
 8001a72:	f7ff fea3 	bl	80017bc <cliPrintf>
  for (int i=0; i<p_cli->cmd_count; i++)
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	3301      	adds	r3, #1
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	@ 0x2e8
 8001a82:	461a      	mov	r2, r3
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	4293      	cmp	r3, r2
 8001a88:	dbe5      	blt.n	8001a56 <cliShowList+0x1e>
  }

  cliPrintf("-----------------------------\r\n");
 8001a8a:	4806      	ldr	r0, [pc, #24]	@ (8001aa4 <cliShowList+0x6c>)
 8001a8c:	f7ff fe96 	bl	80017bc <cliPrintf>
}
 8001a90:	bf00      	nop
 8001a92:	3710      	adds	r7, #16
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	2000034c 	.word	0x2000034c
 8001a9c:	0800db94 	.word	0x0800db94
 8001aa0:	0800db98 	.word	0x0800db98
 8001aa4:	0800dbb8 	.word	0x0800dbb8

08001aa8 <cliMemoryDump>:

void cliMemoryDump(cli_args_t *args)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b08c      	sub	sp, #48	@ 0x30
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  int idx, size = 16;
 8001ab0:	2310      	movs	r3, #16
 8001ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
  unsigned int *addr;
  int idx1, i;
  unsigned int *ascptr;
  unsigned char asc[4];

  int    argc = args->argc;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	881b      	ldrh	r3, [r3, #0]
 8001ab8:	617b      	str	r3, [r7, #20]
  char **argv = args->argv;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	613b      	str	r3, [r7, #16]


  if(args->argc < 1)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	881b      	ldrh	r3, [r3, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d103      	bne.n	8001ad0 <cliMemoryDump+0x28>
  {
    cliPrintf(">> md addr [size] \n");
 8001ac8:	4840      	ldr	r0, [pc, #256]	@ (8001bcc <cliMemoryDump+0x124>)
 8001aca:	f7ff fe77 	bl	80017bc <cliPrintf>
 8001ace:	e07a      	b.n	8001bc6 <cliMemoryDump+0x11e>
    return;
  }

  if(argc > 1)
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	dd09      	ble.n	8001aea <cliMemoryDump+0x42>
  {
    size = (int)strtoul((const char * ) argv[1], (char **)NULL, (int) 0);
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	3304      	adds	r3, #4
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2200      	movs	r2, #0
 8001ade:	2100      	movs	r1, #0
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f009 fdc7 	bl	800b674 <strtoul>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
  }
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2200      	movs	r2, #0
 8001af0:	2100      	movs	r1, #0
 8001af2:	4618      	mov	r0, r3
 8001af4:	f009 fdbe 	bl	800b674 <strtoul>
 8001af8:	4603      	mov	r3, r0
 8001afa:	627b      	str	r3, [r7, #36]	@ 0x24
  ascptr = (unsigned int *)addr;
 8001afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001afe:	61bb      	str	r3, [r7, #24]

  cliPrintf("\n   ");
 8001b00:	4833      	ldr	r0, [pc, #204]	@ (8001bd0 <cliMemoryDump+0x128>)
 8001b02:	f7ff fe5b 	bl	80017bc <cliPrintf>
  for (idx = 0; idx<size; idx++)
 8001b06:	2300      	movs	r3, #0
 8001b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b0a:	e058      	b.n	8001bbe <cliMemoryDump+0x116>
  {
    if((idx%4) == 0)
 8001b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b0e:	f003 0303 	and.w	r3, r3, #3
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d104      	bne.n	8001b20 <cliMemoryDump+0x78>
    {
      cliPrintf(" 0x%08X: ", (unsigned int)addr);
 8001b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b18:	4619      	mov	r1, r3
 8001b1a:	482e      	ldr	r0, [pc, #184]	@ (8001bd4 <cliMemoryDump+0x12c>)
 8001b1c:	f7ff fe4e 	bl	80017bc <cliPrintf>
    }
    cliPrintf(" 0x%08X", *(addr));
 8001b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4619      	mov	r1, r3
 8001b26:	482c      	ldr	r0, [pc, #176]	@ (8001bd8 <cliMemoryDump+0x130>)
 8001b28:	f7ff fe48 	bl	80017bc <cliPrintf>

    if ((idx%4) == 3)
 8001b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b2e:	425a      	negs	r2, r3
 8001b30:	f003 0303 	and.w	r3, r3, #3
 8001b34:	f002 0203 	and.w	r2, r2, #3
 8001b38:	bf58      	it	pl
 8001b3a:	4253      	negpl	r3, r2
 8001b3c:	2b03      	cmp	r3, #3
 8001b3e:	d138      	bne.n	8001bb2 <cliMemoryDump+0x10a>
    {
      cliPrintf ("  |");
 8001b40:	4826      	ldr	r0, [pc, #152]	@ (8001bdc <cliMemoryDump+0x134>)
 8001b42:	f7ff fe3b 	bl	80017bc <cliPrintf>
      for (idx1= 0; idx1< 4; idx1++)
 8001b46:	2300      	movs	r3, #0
 8001b48:	623b      	str	r3, [r7, #32]
 8001b4a:	e02c      	b.n	8001ba6 <cliMemoryDump+0xfe>
      {
        memcpy((char *)asc, (char *)ascptr, 4);
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	60fb      	str	r3, [r7, #12]
        for (i=0;i<4;i++)
 8001b52:	2300      	movs	r3, #0
 8001b54:	61fb      	str	r3, [r7, #28]
 8001b56:	e01d      	b.n	8001b94 <cliMemoryDump+0xec>
        {
          if (asc[i] > 0x1f && asc[i] < 0x7f)
 8001b58:	f107 020c 	add.w	r2, r7, #12
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	4413      	add	r3, r2
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	2b1f      	cmp	r3, #31
 8001b64:	d910      	bls.n	8001b88 <cliMemoryDump+0xe0>
 8001b66:	f107 020c 	add.w	r2, r7, #12
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	2b7e      	cmp	r3, #126	@ 0x7e
 8001b72:	d809      	bhi.n	8001b88 <cliMemoryDump+0xe0>
          {
            cliPrintf("%c", asc[i]);
 8001b74:	f107 020c 	add.w	r2, r7, #12
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4817      	ldr	r0, [pc, #92]	@ (8001be0 <cliMemoryDump+0x138>)
 8001b82:	f7ff fe1b 	bl	80017bc <cliPrintf>
 8001b86:	e002      	b.n	8001b8e <cliMemoryDump+0xe6>
          }
          else
          {
            cliPrintf(".");
 8001b88:	4816      	ldr	r0, [pc, #88]	@ (8001be4 <cliMemoryDump+0x13c>)
 8001b8a:	f7ff fe17 	bl	80017bc <cliPrintf>
        for (i=0;i<4;i++)
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	3301      	adds	r3, #1
 8001b92:	61fb      	str	r3, [r7, #28]
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	2b03      	cmp	r3, #3
 8001b98:	ddde      	ble.n	8001b58 <cliMemoryDump+0xb0>
          }
        }
        ascptr+=1;
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	3304      	adds	r3, #4
 8001b9e:	61bb      	str	r3, [r7, #24]
      for (idx1= 0; idx1< 4; idx1++)
 8001ba0:	6a3b      	ldr	r3, [r7, #32]
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	623b      	str	r3, [r7, #32]
 8001ba6:	6a3b      	ldr	r3, [r7, #32]
 8001ba8:	2b03      	cmp	r3, #3
 8001baa:	ddcf      	ble.n	8001b4c <cliMemoryDump+0xa4>
      }
      cliPrintf("|\n   ");
 8001bac:	480e      	ldr	r0, [pc, #56]	@ (8001be8 <cliMemoryDump+0x140>)
 8001bae:	f7ff fe05 	bl	80017bc <cliPrintf>
    }
    addr++;
 8001bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb4:	3304      	adds	r3, #4
 8001bb6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (idx = 0; idx<size; idx++)
 8001bb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bba:	3301      	adds	r3, #1
 8001bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001bbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	dba2      	blt.n	8001b0c <cliMemoryDump+0x64>
  }
}
 8001bc6:	3730      	adds	r7, #48	@ 0x30
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	0800dbd8 	.word	0x0800dbd8
 8001bd0:	0800dbec 	.word	0x0800dbec
 8001bd4:	0800dbf4 	.word	0x0800dbf4
 8001bd8:	0800dc00 	.word	0x0800dc00
 8001bdc:	0800dc08 	.word	0x0800dc08
 8001be0:	0800dc0c 	.word	0x0800dc0c
 8001be4:	0800dc10 	.word	0x0800dc10
 8001be8:	0800dc14 	.word	0x0800dc14

08001bec <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60fb      	str	r3, [r7, #12]

  switch(ch)
 8001bfa:	79fb      	ldrb	r3, [r7, #7]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d017      	beq.n	8001c30 <uartAvailable+0x44>
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d116      	bne.n	8001c32 <uartAvailable+0x46>
    case CH_CDC:
      //ret = cdcAvailable();
      break;

    case CH_USART1:
      qbuffer.in = (qbuffer.len - hdma_usart1_rx.Instance->CNDTR);
 8001c04:	4b0e      	ldr	r3, [pc, #56]	@ (8001c40 <uartAvailable+0x54>)
 8001c06:	689a      	ldr	r2, [r3, #8]
 8001c08:	4b0e      	ldr	r3, [pc, #56]	@ (8001c44 <uartAvailable+0x58>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	4a0b      	ldr	r2, [pc, #44]	@ (8001c40 <uartAvailable+0x54>)
 8001c12:	6013      	str	r3, [r2, #0]
      ret = (qbuffer.in - qbuffer.out) % qbuffer.len;
 8001c14:	4b0a      	ldr	r3, [pc, #40]	@ (8001c40 <uartAvailable+0x54>)
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	4b09      	ldr	r3, [pc, #36]	@ (8001c40 <uartAvailable+0x54>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	4a08      	ldr	r2, [pc, #32]	@ (8001c40 <uartAvailable+0x54>)
 8001c20:	6892      	ldr	r2, [r2, #8]
 8001c22:	fbb3 f1f2 	udiv	r1, r3, r2
 8001c26:	fb01 f202 	mul.w	r2, r1, r2
 8001c2a:	1a9b      	subs	r3, r3, r2
 8001c2c:	60fb      	str	r3, [r7, #12]
      break;
 8001c2e:	e000      	b.n	8001c32 <uartAvailable+0x46>
      break;
 8001c30:	bf00      	nop
  }

  return ret;
 8001c32:	68fb      	ldr	r3, [r7, #12]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3714      	adds	r7, #20
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bc80      	pop	{r7}
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	20000790 	.word	0x20000790
 8001c44:	20000bfc 	.word	0x20000bfc

08001c48 <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
 8001c48:	b40e      	push	{r1, r2, r3}
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b0c7      	sub	sp, #284	@ 0x11c
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	4602      	mov	r2, r0
 8001c52:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001c56:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8001c5a:	701a      	strb	r2, [r3, #0]
  char buf[256];
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
 8001c5c:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8001c60:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001c64:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001c68:	601a      	str	r2, [r3, #0]
  len = vsnprintf(buf, 256, fmt, args);
 8001c6a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001c6e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001c72:	f107 0010 	add.w	r0, r7, #16
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001c7c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c80:	f009 fe32 	bl	800b8e8 <vsniprintf>
 8001c84:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

  ret = uartWrite(ch, (uint8_t *)buf, len);
 8001c88:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001c8c:	f107 0110 	add.w	r1, r7, #16
 8001c90:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001c94:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f000 f80c 	bl	8001cb8 <uartWrite>
 8001ca0:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

  va_end(args);


  return ret;
 8001ca4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001cb4:	b003      	add	sp, #12
 8001cb6:	4770      	bx	lr

08001cb8 <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
 8001cc4:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  if(ch == CH_CDC)
 8001cca:	7bfb      	ldrb	r3, [r7, #15]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d010      	beq.n	8001cf2 <uartWrite+0x3a>
  {
    //ret = cdcWrite(p_data, length);
  }
  else if(ch == CH_USART1)
 8001cd0:	7bfb      	ldrb	r3, [r7, #15]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d10d      	bne.n	8001cf2 <uartWrite+0x3a>
  {
    status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	b29a      	uxth	r2, r3
 8001cda:	2364      	movs	r3, #100	@ 0x64
 8001cdc:	68b9      	ldr	r1, [r7, #8]
 8001cde:	4807      	ldr	r0, [pc, #28]	@ (8001cfc <uartWrite+0x44>)
 8001ce0:	f003 fc3c 	bl	800555c <HAL_UART_Transmit>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	74fb      	strb	r3, [r7, #19]
    if (status == HAL_OK)
 8001ce8:	7cfb      	ldrb	r3, [r7, #19]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d101      	bne.n	8001cf2 <uartWrite+0x3a>
    {
      ret = length;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8001cf2:	697b      	ldr	r3, [r7, #20]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3718      	adds	r7, #24
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	20000b6c 	.word	0x20000b6c

08001d00 <uartRead>:

uint8_t uartRead(uint8_t ch)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	71fb      	strb	r3, [r7, #7]
  uint8_t data = 0;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	73fb      	strb	r3, [r7, #15]

  if(ch == CH_CDC)
 8001d0e:	79fb      	ldrb	r3, [r7, #7]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d009      	beq.n	8001d28 <uartRead+0x28>
  {
    //data = cdcRead();
  }
  else if(ch == CH_USART1)
 8001d14:	79fb      	ldrb	r3, [r7, #7]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d106      	bne.n	8001d28 <uartRead+0x28>
  {
     qbufferRead(&qbuffer, &data,1);
 8001d1a:	f107 030f 	add.w	r3, r7, #15
 8001d1e:	2201      	movs	r2, #1
 8001d20:	4619      	mov	r1, r3
 8001d22:	4804      	ldr	r0, [pc, #16]	@ (8001d34 <uartRead+0x34>)
 8001d24:	f000 f808 	bl	8001d38 <qbufferRead>
  }

  return data;
 8001d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3710      	adds	r7, #16
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	20000790 	.word	0x20000790

08001d38 <qbufferRead>:

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b087      	sub	sp, #28
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8001d44:	2301      	movs	r3, #1
 8001d46:	75fb      	strb	r3, [r7, #23]

  for(int i=0; i<length; i++)
 8001d48:	2300      	movs	r3, #0
 8001d4a:	613b      	str	r3, [r7, #16]
 8001d4c:	e026      	b.n	8001d9c <qbufferRead+0x64>
  {
    if(p_node->p_buf != NULL)
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d009      	beq.n	8001d6a <qbufferRead+0x32>
    {
      p_data[i] = p_node->p_buf[p_node->out];
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	68da      	ldr	r2, [r3, #12]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	441a      	add	r2, r3
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	68b9      	ldr	r1, [r7, #8]
 8001d64:	440b      	add	r3, r1
 8001d66:	7812      	ldrb	r2, [r2, #0]
 8001d68:	701a      	strb	r2, [r3, #0]
    }

    if(p_node->out != p_node->in)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	685a      	ldr	r2, [r3, #4]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d00c      	beq.n	8001d90 <qbufferRead+0x58>
    {
      p_node->out = (p_node->out + 1) % p_node->len;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	68fa      	ldr	r2, [r7, #12]
 8001d7e:	6892      	ldr	r2, [r2, #8]
 8001d80:	fbb3 f1f2 	udiv	r1, r3, r2
 8001d84:	fb01 f202 	mul.w	r2, r1, r2
 8001d88:	1a9a      	subs	r2, r3, r2
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	605a      	str	r2, [r3, #4]
 8001d8e:	e002      	b.n	8001d96 <qbufferRead+0x5e>
    }
    else
    {
      ret = false;
 8001d90:	2300      	movs	r3, #0
 8001d92:	75fb      	strb	r3, [r7, #23]
      break;
 8001d94:	e006      	b.n	8001da4 <qbufferRead+0x6c>
  for(int i=0; i<length; i++)
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	613b      	str	r3, [r7, #16]
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d8d4      	bhi.n	8001d4e <qbufferRead+0x16>
    }
  }

  return ret;
 8001da4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	371c      	adds	r7, #28
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bc80      	pop	{r7}
 8001dae:	4770      	bx	lr

08001db0 <receiveData>:
  }
}


bool receiveData()
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af02      	add	r7, sp, #8
  HAL_UART_Receive(&huart2, (uint8_t *)report, sizeof(report), 100);
 8001db6:	2364      	movs	r3, #100	@ 0x64
 8001db8:	2204      	movs	r2, #4
 8001dba:	490e      	ldr	r1, [pc, #56]	@ (8001df4 <receiveData+0x44>)
 8001dbc:	480e      	ldr	r0, [pc, #56]	@ (8001df8 <receiveData+0x48>)
 8001dbe:	f003 fc58 	bl	8005672 <HAL_UART_Receive>

  //parse_hid_report((char *)temp_report);

  cliPrintf("%d %d %d %d\n", report[0], report[1], report[2], report[3]);
 8001dc2:	4b0c      	ldr	r3, [pc, #48]	@ (8001df4 <receiveData+0x44>)
 8001dc4:	f993 3000 	ldrsb.w	r3, [r3]
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4b0a      	ldr	r3, [pc, #40]	@ (8001df4 <receiveData+0x44>)
 8001dcc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	4b08      	ldr	r3, [pc, #32]	@ (8001df4 <receiveData+0x44>)
 8001dd4:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	4b06      	ldr	r3, [pc, #24]	@ (8001df4 <receiveData+0x44>)
 8001ddc:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001de0:	9300      	str	r3, [sp, #0]
 8001de2:	4603      	mov	r3, r0
 8001de4:	4805      	ldr	r0, [pc, #20]	@ (8001dfc <receiveData+0x4c>)
 8001de6:	f7ff fce9 	bl	80017bc <cliPrintf>

  return 1;
 8001dea:	2301      	movs	r3, #1
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	20000b64 	.word	0x20000b64
 8001df8:	20000bb4 	.word	0x20000bb4
 8001dfc:	0800dc24 	.word	0x0800dc24

08001e00 <dataToHID>:

void dataToHID()
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)report, sizeof(report));
 8001e04:	2204      	movs	r2, #4
 8001e06:	4903      	ldr	r1, [pc, #12]	@ (8001e14 <dataToHID+0x14>)
 8001e08:	4803      	ldr	r0, [pc, #12]	@ (8001e18 <dataToHID+0x18>)
 8001e0a:	f007 f8cd 	bl	8008fa8 <USBD_HID_SendReport>
}
 8001e0e:	bf00      	nop
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	20000b64 	.word	0x20000b64
 8001e18:	200008a0 	.word	0x200008a0

08001e1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e22:	4b10      	ldr	r3, [pc, #64]	@ (8001e64 <MX_DMA_Init+0x48>)
 8001e24:	695b      	ldr	r3, [r3, #20]
 8001e26:	4a0f      	ldr	r2, [pc, #60]	@ (8001e64 <MX_DMA_Init+0x48>)
 8001e28:	f043 0301 	orr.w	r3, r3, #1
 8001e2c:	6153      	str	r3, [r2, #20]
 8001e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8001e64 <MX_DMA_Init+0x48>)
 8001e30:	695b      	ldr	r3, [r3, #20]
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	607b      	str	r3, [r7, #4]
 8001e38:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	200f      	movs	r0, #15
 8001e40:	f000 fccf 	bl	80027e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001e44:	200f      	movs	r0, #15
 8001e46:	f000 fce8 	bl	800281a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	2010      	movs	r0, #16
 8001e50:	f000 fcc7 	bl	80027e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001e54:	2010      	movs	r0, #16
 8001e56:	f000 fce0 	bl	800281a <HAL_NVIC_EnableIRQ>

}
 8001e5a:	bf00      	nop
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40021000 	.word	0x40021000

08001e68 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ea8 <MX_GPIO_Init+0x40>)
 8001e70:	699b      	ldr	r3, [r3, #24]
 8001e72:	4a0d      	ldr	r2, [pc, #52]	@ (8001ea8 <MX_GPIO_Init+0x40>)
 8001e74:	f043 0320 	orr.w	r3, r3, #32
 8001e78:	6193      	str	r3, [r2, #24]
 8001e7a:	4b0b      	ldr	r3, [pc, #44]	@ (8001ea8 <MX_GPIO_Init+0x40>)
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	f003 0320 	and.w	r3, r3, #32
 8001e82:	607b      	str	r3, [r7, #4]
 8001e84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e86:	4b08      	ldr	r3, [pc, #32]	@ (8001ea8 <MX_GPIO_Init+0x40>)
 8001e88:	699b      	ldr	r3, [r3, #24]
 8001e8a:	4a07      	ldr	r2, [pc, #28]	@ (8001ea8 <MX_GPIO_Init+0x40>)
 8001e8c:	f043 0304 	orr.w	r3, r3, #4
 8001e90:	6193      	str	r3, [r2, #24]
 8001e92:	4b05      	ldr	r3, [pc, #20]	@ (8001ea8 <MX_GPIO_Init+0x40>)
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	f003 0304 	and.w	r3, r3, #4
 8001e9a:	603b      	str	r3, [r7, #0]
 8001e9c:	683b      	ldr	r3, [r7, #0]

}
 8001e9e:	bf00      	nop
 8001ea0:	370c      	adds	r7, #12
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bc80      	pop	{r7}
 8001ea6:	4770      	bx	lr
 8001ea8:	40021000 	.word	0x40021000

08001eac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001eb0:	f000 fb3a 	bl	8002528 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001eb4:	f000 f81d 	bl	8001ef2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001eb8:	f7ff ffd6 	bl	8001e68 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ebc:	f7ff ffae 	bl	8001e1c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001ec0:	f000 f9d0 	bl	8002264 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001ec4:	f000 f9f8 	bl	80022b8 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8001ec8:	f008 f95a 	bl	800a180 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  cliInit();
 8001ecc:	f7fe ff38 	bl	8000d40 <cliInit>
  BluetoothInit();
 8001ed0:	f7fe ff0a 	bl	8000ce8 <BluetoothInit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  cliOpen(CH_USART1, 11520);
 8001ed4:	f44f 5134 	mov.w	r1, #11520	@ 0x2d00
 8001ed8:	2001      	movs	r0, #1
 8001eda:	f7fe ff7d 	bl	8000dd8 <cliOpen>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    if(receiveData())
 8001ede:	f7ff ff67 	bl	8001db0 <receiveData>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <main+0x40>
    {
      dataToHID();
 8001ee8:	f7ff ff8a 	bl	8001e00 <dataToHID>
    else
    {
      //BluetoothReset();
    }

    cliMain();
 8001eec:	f7ff f858 	bl	8000fa0 <cliMain>
    if(receiveData())
 8001ef0:	e7f5      	b.n	8001ede <main+0x32>

08001ef2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b094      	sub	sp, #80	@ 0x50
 8001ef6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ef8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001efc:	2228      	movs	r2, #40	@ 0x28
 8001efe:	2100      	movs	r1, #0
 8001f00:	4618      	mov	r0, r3
 8001f02:	f009 fcff 	bl	800b904 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f06:	f107 0314 	add.w	r3, r7, #20
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	601a      	str	r2, [r3, #0]
 8001f0e:	605a      	str	r2, [r3, #4]
 8001f10:	609a      	str	r2, [r3, #8]
 8001f12:	60da      	str	r2, [r3, #12]
 8001f14:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f16:	1d3b      	adds	r3, r7, #4
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	605a      	str	r2, [r3, #4]
 8001f1e:	609a      	str	r2, [r3, #8]
 8001f20:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f22:	2301      	movs	r3, #1
 8001f24:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f26:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f30:	2301      	movs	r3, #1
 8001f32:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f34:	2302      	movs	r3, #2
 8001f36:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f38:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001f3c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001f3e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001f42:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f44:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f002 fdf1 	bl	8004b30 <HAL_RCC_OscConfig>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001f54:	f000 f827 	bl	8001fa6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f58:	230f      	movs	r3, #15
 8001f5a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f60:	2300      	movs	r3, #0
 8001f62:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f64:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f68:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f6e:	f107 0314 	add.w	r3, r7, #20
 8001f72:	2102      	movs	r1, #2
 8001f74:	4618      	mov	r0, r3
 8001f76:	f003 f85d 	bl	8005034 <HAL_RCC_ClockConfig>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001f80:	f000 f811 	bl	8001fa6 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001f84:	2310      	movs	r3, #16
 8001f86:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f8c:	1d3b      	adds	r3, r7, #4
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f003 f9de 	bl	8005350 <HAL_RCCEx_PeriphCLKConfig>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001f9a:	f000 f804 	bl	8001fa6 <Error_Handler>
  }
}
 8001f9e:	bf00      	nop
 8001fa0:	3750      	adds	r7, #80	@ 0x50
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001faa:	b672      	cpsid	i
}
 8001fac:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fae:	bf00      	nop
 8001fb0:	e7fd      	b.n	8001fae <Error_Handler+0x8>
	...

08001fb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001fba:	4b15      	ldr	r3, [pc, #84]	@ (8002010 <HAL_MspInit+0x5c>)
 8001fbc:	699b      	ldr	r3, [r3, #24]
 8001fbe:	4a14      	ldr	r2, [pc, #80]	@ (8002010 <HAL_MspInit+0x5c>)
 8001fc0:	f043 0301 	orr.w	r3, r3, #1
 8001fc4:	6193      	str	r3, [r2, #24]
 8001fc6:	4b12      	ldr	r3, [pc, #72]	@ (8002010 <HAL_MspInit+0x5c>)
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	60bb      	str	r3, [r7, #8]
 8001fd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fd2:	4b0f      	ldr	r3, [pc, #60]	@ (8002010 <HAL_MspInit+0x5c>)
 8001fd4:	69db      	ldr	r3, [r3, #28]
 8001fd6:	4a0e      	ldr	r2, [pc, #56]	@ (8002010 <HAL_MspInit+0x5c>)
 8001fd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fdc:	61d3      	str	r3, [r2, #28]
 8001fde:	4b0c      	ldr	r3, [pc, #48]	@ (8002010 <HAL_MspInit+0x5c>)
 8001fe0:	69db      	ldr	r3, [r3, #28]
 8001fe2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fe6:	607b      	str	r3, [r7, #4]
 8001fe8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001fea:	4b0a      	ldr	r3, [pc, #40]	@ (8002014 <HAL_MspInit+0x60>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	60fb      	str	r3, [r7, #12]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	4a04      	ldr	r2, [pc, #16]	@ (8002014 <HAL_MspInit+0x60>)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002006:	bf00      	nop
 8002008:	3714      	adds	r7, #20
 800200a:	46bd      	mov	sp, r7
 800200c:	bc80      	pop	{r7}
 800200e:	4770      	bx	lr
 8002010:	40021000 	.word	0x40021000
 8002014:	40010000 	.word	0x40010000

08002018 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800201c:	bf00      	nop
 800201e:	e7fd      	b.n	800201c <NMI_Handler+0x4>

08002020 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002024:	bf00      	nop
 8002026:	e7fd      	b.n	8002024 <HardFault_Handler+0x4>

08002028 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800202c:	bf00      	nop
 800202e:	e7fd      	b.n	800202c <MemManage_Handler+0x4>

08002030 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002034:	bf00      	nop
 8002036:	e7fd      	b.n	8002034 <BusFault_Handler+0x4>

08002038 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800203c:	bf00      	nop
 800203e:	e7fd      	b.n	800203c <UsageFault_Handler+0x4>

08002040 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002044:	bf00      	nop
 8002046:	46bd      	mov	sp, r7
 8002048:	bc80      	pop	{r7}
 800204a:	4770      	bx	lr

0800204c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002050:	bf00      	nop
 8002052:	46bd      	mov	sp, r7
 8002054:	bc80      	pop	{r7}
 8002056:	4770      	bx	lr

08002058 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800205c:	bf00      	nop
 800205e:	46bd      	mov	sp, r7
 8002060:	bc80      	pop	{r7}
 8002062:	4770      	bx	lr

08002064 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002068:	f000 faa4 	bl	80025b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800206c:	bf00      	nop
 800206e:	bd80      	pop	{r7, pc}

08002070 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002074:	4802      	ldr	r0, [pc, #8]	@ (8002080 <DMA1_Channel5_IRQHandler+0x10>)
 8002076:	f000 fd59 	bl	8002b2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800207a:	bf00      	nop
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	20000bfc 	.word	0x20000bfc

08002084 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002088:	4802      	ldr	r0, [pc, #8]	@ (8002094 <DMA1_Channel6_IRQHandler+0x10>)
 800208a:	f000 fd4f 	bl	8002b2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800208e:	bf00      	nop
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	20000c40 	.word	0x20000c40

08002098 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800209c:	4802      	ldr	r0, [pc, #8]	@ (80020a8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800209e:	f001 f919 	bl	80032d4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80020a2:	bf00      	nop
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	20000e8c 	.word	0x20000e8c

080020ac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80020b0:	4802      	ldr	r0, [pc, #8]	@ (80020bc <USART1_IRQHandler+0x10>)
 80020b2:	f003 fb9b 	bl	80057ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80020b6:	bf00      	nop
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	20000b6c 	.word	0x20000b6c

080020c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80020c4:	4802      	ldr	r0, [pc, #8]	@ (80020d0 <USART2_IRQHandler+0x10>)
 80020c6:	f003 fb91 	bl	80057ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80020ca:	bf00      	nop
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	20000bb4 	.word	0x20000bb4

080020d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  return 1;
 80020d8:	2301      	movs	r3, #1
}
 80020da:	4618      	mov	r0, r3
 80020dc:	46bd      	mov	sp, r7
 80020de:	bc80      	pop	{r7}
 80020e0:	4770      	bx	lr

080020e2 <_kill>:

int _kill(int pid, int sig)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b082      	sub	sp, #8
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
 80020ea:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020ec:	f009 fc96 	bl	800ba1c <__errno>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2216      	movs	r2, #22
 80020f4:	601a      	str	r2, [r3, #0]
  return -1;
 80020f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <_exit>:

void _exit (int status)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b082      	sub	sp, #8
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800210a:	f04f 31ff 	mov.w	r1, #4294967295
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f7ff ffe7 	bl	80020e2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002114:	bf00      	nop
 8002116:	e7fd      	b.n	8002114 <_exit+0x12>

08002118 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b086      	sub	sp, #24
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002124:	2300      	movs	r3, #0
 8002126:	617b      	str	r3, [r7, #20]
 8002128:	e00a      	b.n	8002140 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800212a:	f3af 8000 	nop.w
 800212e:	4601      	mov	r1, r0
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	1c5a      	adds	r2, r3, #1
 8002134:	60ba      	str	r2, [r7, #8]
 8002136:	b2ca      	uxtb	r2, r1
 8002138:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	3301      	adds	r3, #1
 800213e:	617b      	str	r3, [r7, #20]
 8002140:	697a      	ldr	r2, [r7, #20]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	429a      	cmp	r2, r3
 8002146:	dbf0      	blt.n	800212a <_read+0x12>
  }

  return len;
 8002148:	687b      	ldr	r3, [r7, #4]
}
 800214a:	4618      	mov	r0, r3
 800214c:	3718      	adds	r7, #24
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002152:	b580      	push	{r7, lr}
 8002154:	b086      	sub	sp, #24
 8002156:	af00      	add	r7, sp, #0
 8002158:	60f8      	str	r0, [r7, #12]
 800215a:	60b9      	str	r1, [r7, #8]
 800215c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800215e:	2300      	movs	r3, #0
 8002160:	617b      	str	r3, [r7, #20]
 8002162:	e009      	b.n	8002178 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	1c5a      	adds	r2, r3, #1
 8002168:	60ba      	str	r2, [r7, #8]
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	4618      	mov	r0, r3
 800216e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	3301      	adds	r3, #1
 8002176:	617b      	str	r3, [r7, #20]
 8002178:	697a      	ldr	r2, [r7, #20]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	429a      	cmp	r2, r3
 800217e:	dbf1      	blt.n	8002164 <_write+0x12>
  }
  return len;
 8002180:	687b      	ldr	r3, [r7, #4]
}
 8002182:	4618      	mov	r0, r3
 8002184:	3718      	adds	r7, #24
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <_close>:

int _close(int file)
{
 800218a:	b480      	push	{r7}
 800218c:	b083      	sub	sp, #12
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002192:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002196:	4618      	mov	r0, r3
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	bc80      	pop	{r7}
 800219e:	4770      	bx	lr

080021a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021b0:	605a      	str	r2, [r3, #4]
  return 0;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bc80      	pop	{r7}
 80021bc:	4770      	bx	lr

080021be <_isatty>:

int _isatty(int file)
{
 80021be:	b480      	push	{r7}
 80021c0:	b083      	sub	sp, #12
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021c6:	2301      	movs	r3, #1
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bc80      	pop	{r7}
 80021d0:	4770      	bx	lr

080021d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021d2:	b480      	push	{r7}
 80021d4:	b085      	sub	sp, #20
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	60f8      	str	r0, [r7, #12]
 80021da:	60b9      	str	r1, [r7, #8]
 80021dc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021de:	2300      	movs	r3, #0
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3714      	adds	r7, #20
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bc80      	pop	{r7}
 80021e8:	4770      	bx	lr
	...

080021ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021f4:	4a14      	ldr	r2, [pc, #80]	@ (8002248 <_sbrk+0x5c>)
 80021f6:	4b15      	ldr	r3, [pc, #84]	@ (800224c <_sbrk+0x60>)
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002200:	4b13      	ldr	r3, [pc, #76]	@ (8002250 <_sbrk+0x64>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d102      	bne.n	800220e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002208:	4b11      	ldr	r3, [pc, #68]	@ (8002250 <_sbrk+0x64>)
 800220a:	4a12      	ldr	r2, [pc, #72]	@ (8002254 <_sbrk+0x68>)
 800220c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800220e:	4b10      	ldr	r3, [pc, #64]	@ (8002250 <_sbrk+0x64>)
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4413      	add	r3, r2
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	429a      	cmp	r2, r3
 800221a:	d207      	bcs.n	800222c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800221c:	f009 fbfe 	bl	800ba1c <__errno>
 8002220:	4603      	mov	r3, r0
 8002222:	220c      	movs	r2, #12
 8002224:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002226:	f04f 33ff 	mov.w	r3, #4294967295
 800222a:	e009      	b.n	8002240 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800222c:	4b08      	ldr	r3, [pc, #32]	@ (8002250 <_sbrk+0x64>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002232:	4b07      	ldr	r3, [pc, #28]	@ (8002250 <_sbrk+0x64>)
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4413      	add	r3, r2
 800223a:	4a05      	ldr	r2, [pc, #20]	@ (8002250 <_sbrk+0x64>)
 800223c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800223e:	68fb      	ldr	r3, [r7, #12]
}
 8002240:	4618      	mov	r0, r3
 8002242:	3718      	adds	r7, #24
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	20005000 	.word	0x20005000
 800224c:	00000400 	.word	0x00000400
 8002250:	20000b68 	.word	0x20000b68
 8002254:	200012c8 	.word	0x200012c8

08002258 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800225c:	bf00      	nop
 800225e:	46bd      	mov	sp, r7
 8002260:	bc80      	pop	{r7}
 8002262:	4770      	bx	lr

08002264 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002268:	4b11      	ldr	r3, [pc, #68]	@ (80022b0 <MX_USART1_UART_Init+0x4c>)
 800226a:	4a12      	ldr	r2, [pc, #72]	@ (80022b4 <MX_USART1_UART_Init+0x50>)
 800226c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800226e:	4b10      	ldr	r3, [pc, #64]	@ (80022b0 <MX_USART1_UART_Init+0x4c>)
 8002270:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002274:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002276:	4b0e      	ldr	r3, [pc, #56]	@ (80022b0 <MX_USART1_UART_Init+0x4c>)
 8002278:	2200      	movs	r2, #0
 800227a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800227c:	4b0c      	ldr	r3, [pc, #48]	@ (80022b0 <MX_USART1_UART_Init+0x4c>)
 800227e:	2200      	movs	r2, #0
 8002280:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002282:	4b0b      	ldr	r3, [pc, #44]	@ (80022b0 <MX_USART1_UART_Init+0x4c>)
 8002284:	2200      	movs	r2, #0
 8002286:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002288:	4b09      	ldr	r3, [pc, #36]	@ (80022b0 <MX_USART1_UART_Init+0x4c>)
 800228a:	220c      	movs	r2, #12
 800228c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800228e:	4b08      	ldr	r3, [pc, #32]	@ (80022b0 <MX_USART1_UART_Init+0x4c>)
 8002290:	2200      	movs	r2, #0
 8002292:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002294:	4b06      	ldr	r3, [pc, #24]	@ (80022b0 <MX_USART1_UART_Init+0x4c>)
 8002296:	2200      	movs	r2, #0
 8002298:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800229a:	4805      	ldr	r0, [pc, #20]	@ (80022b0 <MX_USART1_UART_Init+0x4c>)
 800229c:	f003 f90e 	bl	80054bc <HAL_UART_Init>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80022a6:	f7ff fe7e 	bl	8001fa6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80022aa:	bf00      	nop
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	20000b6c 	.word	0x20000b6c
 80022b4:	40013800 	.word	0x40013800

080022b8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80022bc:	4b11      	ldr	r3, [pc, #68]	@ (8002304 <MX_USART2_UART_Init+0x4c>)
 80022be:	4a12      	ldr	r2, [pc, #72]	@ (8002308 <MX_USART2_UART_Init+0x50>)
 80022c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80022c2:	4b10      	ldr	r3, [pc, #64]	@ (8002304 <MX_USART2_UART_Init+0x4c>)
 80022c4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80022c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80022ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002304 <MX_USART2_UART_Init+0x4c>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80022d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002304 <MX_USART2_UART_Init+0x4c>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80022d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002304 <MX_USART2_UART_Init+0x4c>)
 80022d8:	2200      	movs	r2, #0
 80022da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022dc:	4b09      	ldr	r3, [pc, #36]	@ (8002304 <MX_USART2_UART_Init+0x4c>)
 80022de:	220c      	movs	r2, #12
 80022e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022e2:	4b08      	ldr	r3, [pc, #32]	@ (8002304 <MX_USART2_UART_Init+0x4c>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022e8:	4b06      	ldr	r3, [pc, #24]	@ (8002304 <MX_USART2_UART_Init+0x4c>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022ee:	4805      	ldr	r0, [pc, #20]	@ (8002304 <MX_USART2_UART_Init+0x4c>)
 80022f0:	f003 f8e4 	bl	80054bc <HAL_UART_Init>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80022fa:	f7ff fe54 	bl	8001fa6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80022fe:	bf00      	nop
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	20000bb4 	.word	0x20000bb4
 8002308:	40004400 	.word	0x40004400

0800230c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b08a      	sub	sp, #40	@ 0x28
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002314:	f107 0318 	add.w	r3, r7, #24
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	605a      	str	r2, [r3, #4]
 800231e:	609a      	str	r2, [r3, #8]
 8002320:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a65      	ldr	r2, [pc, #404]	@ (80024bc <HAL_UART_MspInit+0x1b0>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d160      	bne.n	80023ee <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800232c:	4b64      	ldr	r3, [pc, #400]	@ (80024c0 <HAL_UART_MspInit+0x1b4>)
 800232e:	699b      	ldr	r3, [r3, #24]
 8002330:	4a63      	ldr	r2, [pc, #396]	@ (80024c0 <HAL_UART_MspInit+0x1b4>)
 8002332:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002336:	6193      	str	r3, [r2, #24]
 8002338:	4b61      	ldr	r3, [pc, #388]	@ (80024c0 <HAL_UART_MspInit+0x1b4>)
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002340:	617b      	str	r3, [r7, #20]
 8002342:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002344:	4b5e      	ldr	r3, [pc, #376]	@ (80024c0 <HAL_UART_MspInit+0x1b4>)
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	4a5d      	ldr	r2, [pc, #372]	@ (80024c0 <HAL_UART_MspInit+0x1b4>)
 800234a:	f043 0304 	orr.w	r3, r3, #4
 800234e:	6193      	str	r3, [r2, #24]
 8002350:	4b5b      	ldr	r3, [pc, #364]	@ (80024c0 <HAL_UART_MspInit+0x1b4>)
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	f003 0304 	and.w	r3, r3, #4
 8002358:	613b      	str	r3, [r7, #16]
 800235a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = UART_CLI_TX_Pin;
 800235c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002360:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002362:	2302      	movs	r3, #2
 8002364:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002366:	2303      	movs	r3, #3
 8002368:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(UART_CLI_TX_GPIO_Port, &GPIO_InitStruct);
 800236a:	f107 0318 	add.w	r3, r7, #24
 800236e:	4619      	mov	r1, r3
 8002370:	4854      	ldr	r0, [pc, #336]	@ (80024c4 <HAL_UART_MspInit+0x1b8>)
 8002372:	f000 fd0f 	bl	8002d94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = UART_CLI_RX_Pin;
 8002376:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800237a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800237c:	2300      	movs	r3, #0
 800237e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002380:	2300      	movs	r3, #0
 8002382:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(UART_CLI_RX_GPIO_Port, &GPIO_InitStruct);
 8002384:	f107 0318 	add.w	r3, r7, #24
 8002388:	4619      	mov	r1, r3
 800238a:	484e      	ldr	r0, [pc, #312]	@ (80024c4 <HAL_UART_MspInit+0x1b8>)
 800238c:	f000 fd02 	bl	8002d94 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002390:	4b4d      	ldr	r3, [pc, #308]	@ (80024c8 <HAL_UART_MspInit+0x1bc>)
 8002392:	4a4e      	ldr	r2, [pc, #312]	@ (80024cc <HAL_UART_MspInit+0x1c0>)
 8002394:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002396:	4b4c      	ldr	r3, [pc, #304]	@ (80024c8 <HAL_UART_MspInit+0x1bc>)
 8002398:	2200      	movs	r2, #0
 800239a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800239c:	4b4a      	ldr	r3, [pc, #296]	@ (80024c8 <HAL_UART_MspInit+0x1bc>)
 800239e:	2200      	movs	r2, #0
 80023a0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80023a2:	4b49      	ldr	r3, [pc, #292]	@ (80024c8 <HAL_UART_MspInit+0x1bc>)
 80023a4:	2280      	movs	r2, #128	@ 0x80
 80023a6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023a8:	4b47      	ldr	r3, [pc, #284]	@ (80024c8 <HAL_UART_MspInit+0x1bc>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023ae:	4b46      	ldr	r3, [pc, #280]	@ (80024c8 <HAL_UART_MspInit+0x1bc>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80023b4:	4b44      	ldr	r3, [pc, #272]	@ (80024c8 <HAL_UART_MspInit+0x1bc>)
 80023b6:	2220      	movs	r2, #32
 80023b8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80023ba:	4b43      	ldr	r3, [pc, #268]	@ (80024c8 <HAL_UART_MspInit+0x1bc>)
 80023bc:	2200      	movs	r2, #0
 80023be:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80023c0:	4841      	ldr	r0, [pc, #260]	@ (80024c8 <HAL_UART_MspInit+0x1bc>)
 80023c2:	f000 fa45 	bl	8002850 <HAL_DMA_Init>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80023cc:	f7ff fdeb 	bl	8001fa6 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4a3d      	ldr	r2, [pc, #244]	@ (80024c8 <HAL_UART_MspInit+0x1bc>)
 80023d4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80023d6:	4a3c      	ldr	r2, [pc, #240]	@ (80024c8 <HAL_UART_MspInit+0x1bc>)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80023dc:	2200      	movs	r2, #0
 80023de:	2100      	movs	r1, #0
 80023e0:	2025      	movs	r0, #37	@ 0x25
 80023e2:	f000 f9fe 	bl	80027e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80023e6:	2025      	movs	r0, #37	@ 0x25
 80023e8:	f000 fa17 	bl	800281a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80023ec:	e062      	b.n	80024b4 <HAL_UART_MspInit+0x1a8>
  else if(uartHandle->Instance==USART2)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a37      	ldr	r2, [pc, #220]	@ (80024d0 <HAL_UART_MspInit+0x1c4>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d15d      	bne.n	80024b4 <HAL_UART_MspInit+0x1a8>
    __HAL_RCC_USART2_CLK_ENABLE();
 80023f8:	4b31      	ldr	r3, [pc, #196]	@ (80024c0 <HAL_UART_MspInit+0x1b4>)
 80023fa:	69db      	ldr	r3, [r3, #28]
 80023fc:	4a30      	ldr	r2, [pc, #192]	@ (80024c0 <HAL_UART_MspInit+0x1b4>)
 80023fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002402:	61d3      	str	r3, [r2, #28]
 8002404:	4b2e      	ldr	r3, [pc, #184]	@ (80024c0 <HAL_UART_MspInit+0x1b4>)
 8002406:	69db      	ldr	r3, [r3, #28]
 8002408:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800240c:	60fb      	str	r3, [r7, #12]
 800240e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002410:	4b2b      	ldr	r3, [pc, #172]	@ (80024c0 <HAL_UART_MspInit+0x1b4>)
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	4a2a      	ldr	r2, [pc, #168]	@ (80024c0 <HAL_UART_MspInit+0x1b4>)
 8002416:	f043 0304 	orr.w	r3, r3, #4
 800241a:	6193      	str	r3, [r2, #24]
 800241c:	4b28      	ldr	r3, [pc, #160]	@ (80024c0 <HAL_UART_MspInit+0x1b4>)
 800241e:	699b      	ldr	r3, [r3, #24]
 8002420:	f003 0304 	and.w	r3, r3, #4
 8002424:	60bb      	str	r3, [r7, #8]
 8002426:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = UART_BT_TX_Pin;
 8002428:	2304      	movs	r3, #4
 800242a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800242c:	2302      	movs	r3, #2
 800242e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002430:	2303      	movs	r3, #3
 8002432:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(UART_BT_TX_GPIO_Port, &GPIO_InitStruct);
 8002434:	f107 0318 	add.w	r3, r7, #24
 8002438:	4619      	mov	r1, r3
 800243a:	4822      	ldr	r0, [pc, #136]	@ (80024c4 <HAL_UART_MspInit+0x1b8>)
 800243c:	f000 fcaa 	bl	8002d94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART_BT_RX_Pin;
 8002440:	2308      	movs	r3, #8
 8002442:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002444:	2300      	movs	r3, #0
 8002446:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002448:	2300      	movs	r3, #0
 800244a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(UART_BT_RX_GPIO_Port, &GPIO_InitStruct);
 800244c:	f107 0318 	add.w	r3, r7, #24
 8002450:	4619      	mov	r1, r3
 8002452:	481c      	ldr	r0, [pc, #112]	@ (80024c4 <HAL_UART_MspInit+0x1b8>)
 8002454:	f000 fc9e 	bl	8002d94 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002458:	4b1e      	ldr	r3, [pc, #120]	@ (80024d4 <HAL_UART_MspInit+0x1c8>)
 800245a:	4a1f      	ldr	r2, [pc, #124]	@ (80024d8 <HAL_UART_MspInit+0x1cc>)
 800245c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800245e:	4b1d      	ldr	r3, [pc, #116]	@ (80024d4 <HAL_UART_MspInit+0x1c8>)
 8002460:	2200      	movs	r2, #0
 8002462:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002464:	4b1b      	ldr	r3, [pc, #108]	@ (80024d4 <HAL_UART_MspInit+0x1c8>)
 8002466:	2200      	movs	r2, #0
 8002468:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800246a:	4b1a      	ldr	r3, [pc, #104]	@ (80024d4 <HAL_UART_MspInit+0x1c8>)
 800246c:	2280      	movs	r2, #128	@ 0x80
 800246e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002470:	4b18      	ldr	r3, [pc, #96]	@ (80024d4 <HAL_UART_MspInit+0x1c8>)
 8002472:	2200      	movs	r2, #0
 8002474:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002476:	4b17      	ldr	r3, [pc, #92]	@ (80024d4 <HAL_UART_MspInit+0x1c8>)
 8002478:	2200      	movs	r2, #0
 800247a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800247c:	4b15      	ldr	r3, [pc, #84]	@ (80024d4 <HAL_UART_MspInit+0x1c8>)
 800247e:	2220      	movs	r2, #32
 8002480:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002482:	4b14      	ldr	r3, [pc, #80]	@ (80024d4 <HAL_UART_MspInit+0x1c8>)
 8002484:	2200      	movs	r2, #0
 8002486:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002488:	4812      	ldr	r0, [pc, #72]	@ (80024d4 <HAL_UART_MspInit+0x1c8>)
 800248a:	f000 f9e1 	bl	8002850 <HAL_DMA_Init>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <HAL_UART_MspInit+0x18c>
      Error_Handler();
 8002494:	f7ff fd87 	bl	8001fa6 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4a0e      	ldr	r2, [pc, #56]	@ (80024d4 <HAL_UART_MspInit+0x1c8>)
 800249c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800249e:	4a0d      	ldr	r2, [pc, #52]	@ (80024d4 <HAL_UART_MspInit+0x1c8>)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80024a4:	2200      	movs	r2, #0
 80024a6:	2100      	movs	r1, #0
 80024a8:	2026      	movs	r0, #38	@ 0x26
 80024aa:	f000 f99a 	bl	80027e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80024ae:	2026      	movs	r0, #38	@ 0x26
 80024b0:	f000 f9b3 	bl	800281a <HAL_NVIC_EnableIRQ>
}
 80024b4:	bf00      	nop
 80024b6:	3728      	adds	r7, #40	@ 0x28
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	40013800 	.word	0x40013800
 80024c0:	40021000 	.word	0x40021000
 80024c4:	40010800 	.word	0x40010800
 80024c8:	20000bfc 	.word	0x20000bfc
 80024cc:	40020058 	.word	0x40020058
 80024d0:	40004400 	.word	0x40004400
 80024d4:	20000c40 	.word	0x20000c40
 80024d8:	4002006c 	.word	0x4002006c

080024dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80024dc:	f7ff febc 	bl	8002258 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024e0:	480b      	ldr	r0, [pc, #44]	@ (8002510 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80024e2:	490c      	ldr	r1, [pc, #48]	@ (8002514 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80024e4:	4a0c      	ldr	r2, [pc, #48]	@ (8002518 <LoopFillZerobss+0x16>)
  movs r3, #0
 80024e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024e8:	e002      	b.n	80024f0 <LoopCopyDataInit>

080024ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024ee:	3304      	adds	r3, #4

080024f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024f4:	d3f9      	bcc.n	80024ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024f6:	4a09      	ldr	r2, [pc, #36]	@ (800251c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80024f8:	4c09      	ldr	r4, [pc, #36]	@ (8002520 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024fc:	e001      	b.n	8002502 <LoopFillZerobss>

080024fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002500:	3204      	adds	r2, #4

08002502 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002502:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002504:	d3fb      	bcc.n	80024fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002506:	f009 fa8f 	bl	800ba28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800250a:	f7ff fccf 	bl	8001eac <main>
  bx lr
 800250e:	4770      	bx	lr
  ldr r0, =_sdata
 8002510:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002514:	20000330 	.word	0x20000330
  ldr r2, =_sidata
 8002518:	0800e070 	.word	0x0800e070
  ldr r2, =_sbss
 800251c:	20000330 	.word	0x20000330
  ldr r4, =_ebss
 8002520:	200012c4 	.word	0x200012c4

08002524 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002524:	e7fe      	b.n	8002524 <ADC1_2_IRQHandler>
	...

08002528 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800252c:	4b08      	ldr	r3, [pc, #32]	@ (8002550 <HAL_Init+0x28>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a07      	ldr	r2, [pc, #28]	@ (8002550 <HAL_Init+0x28>)
 8002532:	f043 0310 	orr.w	r3, r3, #16
 8002536:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002538:	2003      	movs	r0, #3
 800253a:	f000 f947 	bl	80027cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800253e:	200f      	movs	r0, #15
 8002540:	f000 f808 	bl	8002554 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002544:	f7ff fd36 	bl	8001fb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	40022000 	.word	0x40022000

08002554 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800255c:	4b12      	ldr	r3, [pc, #72]	@ (80025a8 <HAL_InitTick+0x54>)
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	4b12      	ldr	r3, [pc, #72]	@ (80025ac <HAL_InitTick+0x58>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	4619      	mov	r1, r3
 8002566:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800256a:	fbb3 f3f1 	udiv	r3, r3, r1
 800256e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002572:	4618      	mov	r0, r3
 8002574:	f000 f95f 	bl	8002836 <HAL_SYSTICK_Config>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e00e      	b.n	80025a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2b0f      	cmp	r3, #15
 8002586:	d80a      	bhi.n	800259e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002588:	2200      	movs	r2, #0
 800258a:	6879      	ldr	r1, [r7, #4]
 800258c:	f04f 30ff 	mov.w	r0, #4294967295
 8002590:	f000 f927 	bl	80027e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002594:	4a06      	ldr	r2, [pc, #24]	@ (80025b0 <HAL_InitTick+0x5c>)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800259a:	2300      	movs	r3, #0
 800259c:	e000      	b.n	80025a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3708      	adds	r7, #8
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	20000004 	.word	0x20000004
 80025ac:	2000000c 	.word	0x2000000c
 80025b0:	20000008 	.word	0x20000008

080025b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025b8:	4b05      	ldr	r3, [pc, #20]	@ (80025d0 <HAL_IncTick+0x1c>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	461a      	mov	r2, r3
 80025be:	4b05      	ldr	r3, [pc, #20]	@ (80025d4 <HAL_IncTick+0x20>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4413      	add	r3, r2
 80025c4:	4a03      	ldr	r2, [pc, #12]	@ (80025d4 <HAL_IncTick+0x20>)
 80025c6:	6013      	str	r3, [r2, #0]
}
 80025c8:	bf00      	nop
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bc80      	pop	{r7}
 80025ce:	4770      	bx	lr
 80025d0:	2000000c 	.word	0x2000000c
 80025d4:	20000c84 	.word	0x20000c84

080025d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  return uwTick;
 80025dc:	4b02      	ldr	r3, [pc, #8]	@ (80025e8 <HAL_GetTick+0x10>)
 80025de:	681b      	ldr	r3, [r3, #0]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bc80      	pop	{r7}
 80025e6:	4770      	bx	lr
 80025e8:	20000c84 	.word	0x20000c84

080025ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025f4:	f7ff fff0 	bl	80025d8 <HAL_GetTick>
 80025f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002604:	d005      	beq.n	8002612 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002606:	4b0a      	ldr	r3, [pc, #40]	@ (8002630 <HAL_Delay+0x44>)
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	461a      	mov	r2, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	4413      	add	r3, r2
 8002610:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002612:	bf00      	nop
 8002614:	f7ff ffe0 	bl	80025d8 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	68fa      	ldr	r2, [r7, #12]
 8002620:	429a      	cmp	r2, r3
 8002622:	d8f7      	bhi.n	8002614 <HAL_Delay+0x28>
  {
  }
}
 8002624:	bf00      	nop
 8002626:	bf00      	nop
 8002628:	3710      	adds	r7, #16
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	2000000c 	.word	0x2000000c

08002634 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002634:	b480      	push	{r7}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f003 0307 	and.w	r3, r3, #7
 8002642:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002644:	4b0c      	ldr	r3, [pc, #48]	@ (8002678 <__NVIC_SetPriorityGrouping+0x44>)
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800264a:	68ba      	ldr	r2, [r7, #8]
 800264c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002650:	4013      	ands	r3, r2
 8002652:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800265c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002660:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002664:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002666:	4a04      	ldr	r2, [pc, #16]	@ (8002678 <__NVIC_SetPriorityGrouping+0x44>)
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	60d3      	str	r3, [r2, #12]
}
 800266c:	bf00      	nop
 800266e:	3714      	adds	r7, #20
 8002670:	46bd      	mov	sp, r7
 8002672:	bc80      	pop	{r7}
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	e000ed00 	.word	0xe000ed00

0800267c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002680:	4b04      	ldr	r3, [pc, #16]	@ (8002694 <__NVIC_GetPriorityGrouping+0x18>)
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	0a1b      	lsrs	r3, r3, #8
 8002686:	f003 0307 	and.w	r3, r3, #7
}
 800268a:	4618      	mov	r0, r3
 800268c:	46bd      	mov	sp, r7
 800268e:	bc80      	pop	{r7}
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	e000ed00 	.word	0xe000ed00

08002698 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	4603      	mov	r3, r0
 80026a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	db0b      	blt.n	80026c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026aa:	79fb      	ldrb	r3, [r7, #7]
 80026ac:	f003 021f 	and.w	r2, r3, #31
 80026b0:	4906      	ldr	r1, [pc, #24]	@ (80026cc <__NVIC_EnableIRQ+0x34>)
 80026b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b6:	095b      	lsrs	r3, r3, #5
 80026b8:	2001      	movs	r0, #1
 80026ba:	fa00 f202 	lsl.w	r2, r0, r2
 80026be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026c2:	bf00      	nop
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bc80      	pop	{r7}
 80026ca:	4770      	bx	lr
 80026cc:	e000e100 	.word	0xe000e100

080026d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	4603      	mov	r3, r0
 80026d8:	6039      	str	r1, [r7, #0]
 80026da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	db0a      	blt.n	80026fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	b2da      	uxtb	r2, r3
 80026e8:	490c      	ldr	r1, [pc, #48]	@ (800271c <__NVIC_SetPriority+0x4c>)
 80026ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ee:	0112      	lsls	r2, r2, #4
 80026f0:	b2d2      	uxtb	r2, r2
 80026f2:	440b      	add	r3, r1
 80026f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026f8:	e00a      	b.n	8002710 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	b2da      	uxtb	r2, r3
 80026fe:	4908      	ldr	r1, [pc, #32]	@ (8002720 <__NVIC_SetPriority+0x50>)
 8002700:	79fb      	ldrb	r3, [r7, #7]
 8002702:	f003 030f 	and.w	r3, r3, #15
 8002706:	3b04      	subs	r3, #4
 8002708:	0112      	lsls	r2, r2, #4
 800270a:	b2d2      	uxtb	r2, r2
 800270c:	440b      	add	r3, r1
 800270e:	761a      	strb	r2, [r3, #24]
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	bc80      	pop	{r7}
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	e000e100 	.word	0xe000e100
 8002720:	e000ed00 	.word	0xe000ed00

08002724 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002724:	b480      	push	{r7}
 8002726:	b089      	sub	sp, #36	@ 0x24
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f003 0307 	and.w	r3, r3, #7
 8002736:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	f1c3 0307 	rsb	r3, r3, #7
 800273e:	2b04      	cmp	r3, #4
 8002740:	bf28      	it	cs
 8002742:	2304      	movcs	r3, #4
 8002744:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	3304      	adds	r3, #4
 800274a:	2b06      	cmp	r3, #6
 800274c:	d902      	bls.n	8002754 <NVIC_EncodePriority+0x30>
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	3b03      	subs	r3, #3
 8002752:	e000      	b.n	8002756 <NVIC_EncodePriority+0x32>
 8002754:	2300      	movs	r3, #0
 8002756:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002758:	f04f 32ff 	mov.w	r2, #4294967295
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	fa02 f303 	lsl.w	r3, r2, r3
 8002762:	43da      	mvns	r2, r3
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	401a      	ands	r2, r3
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800276c:	f04f 31ff 	mov.w	r1, #4294967295
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	fa01 f303 	lsl.w	r3, r1, r3
 8002776:	43d9      	mvns	r1, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800277c:	4313      	orrs	r3, r2
         );
}
 800277e:	4618      	mov	r0, r3
 8002780:	3724      	adds	r7, #36	@ 0x24
 8002782:	46bd      	mov	sp, r7
 8002784:	bc80      	pop	{r7}
 8002786:	4770      	bx	lr

08002788 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	3b01      	subs	r3, #1
 8002794:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002798:	d301      	bcc.n	800279e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800279a:	2301      	movs	r3, #1
 800279c:	e00f      	b.n	80027be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800279e:	4a0a      	ldr	r2, [pc, #40]	@ (80027c8 <SysTick_Config+0x40>)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	3b01      	subs	r3, #1
 80027a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027a6:	210f      	movs	r1, #15
 80027a8:	f04f 30ff 	mov.w	r0, #4294967295
 80027ac:	f7ff ff90 	bl	80026d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027b0:	4b05      	ldr	r3, [pc, #20]	@ (80027c8 <SysTick_Config+0x40>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027b6:	4b04      	ldr	r3, [pc, #16]	@ (80027c8 <SysTick_Config+0x40>)
 80027b8:	2207      	movs	r2, #7
 80027ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	e000e010 	.word	0xe000e010

080027cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f7ff ff2d 	bl	8002634 <__NVIC_SetPriorityGrouping>
}
 80027da:	bf00      	nop
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b086      	sub	sp, #24
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	4603      	mov	r3, r0
 80027ea:	60b9      	str	r1, [r7, #8]
 80027ec:	607a      	str	r2, [r7, #4]
 80027ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027f0:	2300      	movs	r3, #0
 80027f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027f4:	f7ff ff42 	bl	800267c <__NVIC_GetPriorityGrouping>
 80027f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	68b9      	ldr	r1, [r7, #8]
 80027fe:	6978      	ldr	r0, [r7, #20]
 8002800:	f7ff ff90 	bl	8002724 <NVIC_EncodePriority>
 8002804:	4602      	mov	r2, r0
 8002806:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800280a:	4611      	mov	r1, r2
 800280c:	4618      	mov	r0, r3
 800280e:	f7ff ff5f 	bl	80026d0 <__NVIC_SetPriority>
}
 8002812:	bf00      	nop
 8002814:	3718      	adds	r7, #24
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	b082      	sub	sp, #8
 800281e:	af00      	add	r7, sp, #0
 8002820:	4603      	mov	r3, r0
 8002822:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff ff35 	bl	8002698 <__NVIC_EnableIRQ>
}
 800282e:	bf00      	nop
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b082      	sub	sp, #8
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f7ff ffa2 	bl	8002788 <SysTick_Config>
 8002844:	4603      	mov	r3, r0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
	...

08002850 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002850:	b480      	push	{r7}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002858:	2300      	movs	r3, #0
 800285a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e043      	b.n	80028ee <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	461a      	mov	r2, r3
 800286c:	4b22      	ldr	r3, [pc, #136]	@ (80028f8 <HAL_DMA_Init+0xa8>)
 800286e:	4413      	add	r3, r2
 8002870:	4a22      	ldr	r2, [pc, #136]	@ (80028fc <HAL_DMA_Init+0xac>)
 8002872:	fba2 2303 	umull	r2, r3, r2, r3
 8002876:	091b      	lsrs	r3, r3, #4
 8002878:	009a      	lsls	r2, r3, #2
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a1f      	ldr	r2, [pc, #124]	@ (8002900 <HAL_DMA_Init+0xb0>)
 8002882:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2202      	movs	r2, #2
 8002888:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800289a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800289e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80028a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	695b      	ldr	r3, [r3, #20]
 80028ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	69db      	ldr	r3, [r3, #28]
 80028c6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3714      	adds	r7, #20
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bc80      	pop	{r7}
 80028f6:	4770      	bx	lr
 80028f8:	bffdfff8 	.word	0xbffdfff8
 80028fc:	cccccccd 	.word	0xcccccccd
 8002900:	40020000 	.word	0x40020000

08002904 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b086      	sub	sp, #24
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
 8002910:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002912:	2300      	movs	r3, #0
 8002914:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f893 3020 	ldrb.w	r3, [r3, #32]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d101      	bne.n	8002924 <HAL_DMA_Start_IT+0x20>
 8002920:	2302      	movs	r3, #2
 8002922:	e04b      	b.n	80029bc <HAL_DMA_Start_IT+0xb8>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002932:	b2db      	uxtb	r3, r3
 8002934:	2b01      	cmp	r3, #1
 8002936:	d13a      	bne.n	80029ae <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2202      	movs	r2, #2
 800293c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f022 0201 	bic.w	r2, r2, #1
 8002954:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	68b9      	ldr	r1, [r7, #8]
 800295c:	68f8      	ldr	r0, [r7, #12]
 800295e:	f000 f9eb 	bl	8002d38 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002966:	2b00      	cmp	r3, #0
 8002968:	d008      	beq.n	800297c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f042 020e 	orr.w	r2, r2, #14
 8002978:	601a      	str	r2, [r3, #0]
 800297a:	e00f      	b.n	800299c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f022 0204 	bic.w	r2, r2, #4
 800298a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f042 020a 	orr.w	r2, r2, #10
 800299a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f042 0201 	orr.w	r2, r2, #1
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	e005      	b.n	80029ba <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80029b6:	2302      	movs	r3, #2
 80029b8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80029ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3718      	adds	r7, #24
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029cc:	2300      	movs	r3, #0
 80029ce:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d008      	beq.n	80029ee <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2204      	movs	r2, #4
 80029e0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e020      	b.n	8002a30 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f022 020e 	bic.w	r2, r2, #14
 80029fc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f022 0201 	bic.w	r2, r2, #1
 8002a0c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a16:	2101      	movs	r1, #1
 8002a18:	fa01 f202 	lsl.w	r2, r1, r2
 8002a1c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3714      	adds	r7, #20
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bc80      	pop	{r7}
 8002a38:	4770      	bx	lr
	...

08002a3c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a44:	2300      	movs	r3, #0
 8002a46:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d005      	beq.n	8002a60 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2204      	movs	r2, #4
 8002a58:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	73fb      	strb	r3, [r7, #15]
 8002a5e:	e051      	b.n	8002b04 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f022 020e 	bic.w	r2, r2, #14
 8002a6e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f022 0201 	bic.w	r2, r2, #1
 8002a7e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a22      	ldr	r2, [pc, #136]	@ (8002b10 <HAL_DMA_Abort_IT+0xd4>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d029      	beq.n	8002ade <HAL_DMA_Abort_IT+0xa2>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a21      	ldr	r2, [pc, #132]	@ (8002b14 <HAL_DMA_Abort_IT+0xd8>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d022      	beq.n	8002ada <HAL_DMA_Abort_IT+0x9e>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a1f      	ldr	r2, [pc, #124]	@ (8002b18 <HAL_DMA_Abort_IT+0xdc>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d01a      	beq.n	8002ad4 <HAL_DMA_Abort_IT+0x98>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a1e      	ldr	r2, [pc, #120]	@ (8002b1c <HAL_DMA_Abort_IT+0xe0>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d012      	beq.n	8002ace <HAL_DMA_Abort_IT+0x92>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a1c      	ldr	r2, [pc, #112]	@ (8002b20 <HAL_DMA_Abort_IT+0xe4>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d00a      	beq.n	8002ac8 <HAL_DMA_Abort_IT+0x8c>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a1b      	ldr	r2, [pc, #108]	@ (8002b24 <HAL_DMA_Abort_IT+0xe8>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d102      	bne.n	8002ac2 <HAL_DMA_Abort_IT+0x86>
 8002abc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002ac0:	e00e      	b.n	8002ae0 <HAL_DMA_Abort_IT+0xa4>
 8002ac2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002ac6:	e00b      	b.n	8002ae0 <HAL_DMA_Abort_IT+0xa4>
 8002ac8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002acc:	e008      	b.n	8002ae0 <HAL_DMA_Abort_IT+0xa4>
 8002ace:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ad2:	e005      	b.n	8002ae0 <HAL_DMA_Abort_IT+0xa4>
 8002ad4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ad8:	e002      	b.n	8002ae0 <HAL_DMA_Abort_IT+0xa4>
 8002ada:	2310      	movs	r3, #16
 8002adc:	e000      	b.n	8002ae0 <HAL_DMA_Abort_IT+0xa4>
 8002ade:	2301      	movs	r3, #1
 8002ae0:	4a11      	ldr	r2, [pc, #68]	@ (8002b28 <HAL_DMA_Abort_IT+0xec>)
 8002ae2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d003      	beq.n	8002b04 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	4798      	blx	r3
    } 
  }
  return status;
 8002b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3710      	adds	r7, #16
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	40020008 	.word	0x40020008
 8002b14:	4002001c 	.word	0x4002001c
 8002b18:	40020030 	.word	0x40020030
 8002b1c:	40020044 	.word	0x40020044
 8002b20:	40020058 	.word	0x40020058
 8002b24:	4002006c 	.word	0x4002006c
 8002b28:	40020000 	.word	0x40020000

08002b2c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b48:	2204      	movs	r2, #4
 8002b4a:	409a      	lsls	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	4013      	ands	r3, r2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d04f      	beq.n	8002bf4 <HAL_DMA_IRQHandler+0xc8>
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	f003 0304 	and.w	r3, r3, #4
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d04a      	beq.n	8002bf4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0320 	and.w	r3, r3, #32
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d107      	bne.n	8002b7c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f022 0204 	bic.w	r2, r2, #4
 8002b7a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a66      	ldr	r2, [pc, #408]	@ (8002d1c <HAL_DMA_IRQHandler+0x1f0>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d029      	beq.n	8002bda <HAL_DMA_IRQHandler+0xae>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a65      	ldr	r2, [pc, #404]	@ (8002d20 <HAL_DMA_IRQHandler+0x1f4>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d022      	beq.n	8002bd6 <HAL_DMA_IRQHandler+0xaa>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a63      	ldr	r2, [pc, #396]	@ (8002d24 <HAL_DMA_IRQHandler+0x1f8>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d01a      	beq.n	8002bd0 <HAL_DMA_IRQHandler+0xa4>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a62      	ldr	r2, [pc, #392]	@ (8002d28 <HAL_DMA_IRQHandler+0x1fc>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d012      	beq.n	8002bca <HAL_DMA_IRQHandler+0x9e>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a60      	ldr	r2, [pc, #384]	@ (8002d2c <HAL_DMA_IRQHandler+0x200>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d00a      	beq.n	8002bc4 <HAL_DMA_IRQHandler+0x98>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a5f      	ldr	r2, [pc, #380]	@ (8002d30 <HAL_DMA_IRQHandler+0x204>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d102      	bne.n	8002bbe <HAL_DMA_IRQHandler+0x92>
 8002bb8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002bbc:	e00e      	b.n	8002bdc <HAL_DMA_IRQHandler+0xb0>
 8002bbe:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002bc2:	e00b      	b.n	8002bdc <HAL_DMA_IRQHandler+0xb0>
 8002bc4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002bc8:	e008      	b.n	8002bdc <HAL_DMA_IRQHandler+0xb0>
 8002bca:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002bce:	e005      	b.n	8002bdc <HAL_DMA_IRQHandler+0xb0>
 8002bd0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002bd4:	e002      	b.n	8002bdc <HAL_DMA_IRQHandler+0xb0>
 8002bd6:	2340      	movs	r3, #64	@ 0x40
 8002bd8:	e000      	b.n	8002bdc <HAL_DMA_IRQHandler+0xb0>
 8002bda:	2304      	movs	r3, #4
 8002bdc:	4a55      	ldr	r2, [pc, #340]	@ (8002d34 <HAL_DMA_IRQHandler+0x208>)
 8002bde:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	f000 8094 	beq.w	8002d12 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002bf2:	e08e      	b.n	8002d12 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf8:	2202      	movs	r2, #2
 8002bfa:	409a      	lsls	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	4013      	ands	r3, r2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d056      	beq.n	8002cb2 <HAL_DMA_IRQHandler+0x186>
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d051      	beq.n	8002cb2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0320 	and.w	r3, r3, #32
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d10b      	bne.n	8002c34 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f022 020a 	bic.w	r2, r2, #10
 8002c2a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a38      	ldr	r2, [pc, #224]	@ (8002d1c <HAL_DMA_IRQHandler+0x1f0>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d029      	beq.n	8002c92 <HAL_DMA_IRQHandler+0x166>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a37      	ldr	r2, [pc, #220]	@ (8002d20 <HAL_DMA_IRQHandler+0x1f4>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d022      	beq.n	8002c8e <HAL_DMA_IRQHandler+0x162>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a35      	ldr	r2, [pc, #212]	@ (8002d24 <HAL_DMA_IRQHandler+0x1f8>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d01a      	beq.n	8002c88 <HAL_DMA_IRQHandler+0x15c>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a34      	ldr	r2, [pc, #208]	@ (8002d28 <HAL_DMA_IRQHandler+0x1fc>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d012      	beq.n	8002c82 <HAL_DMA_IRQHandler+0x156>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a32      	ldr	r2, [pc, #200]	@ (8002d2c <HAL_DMA_IRQHandler+0x200>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d00a      	beq.n	8002c7c <HAL_DMA_IRQHandler+0x150>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a31      	ldr	r2, [pc, #196]	@ (8002d30 <HAL_DMA_IRQHandler+0x204>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d102      	bne.n	8002c76 <HAL_DMA_IRQHandler+0x14a>
 8002c70:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002c74:	e00e      	b.n	8002c94 <HAL_DMA_IRQHandler+0x168>
 8002c76:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c7a:	e00b      	b.n	8002c94 <HAL_DMA_IRQHandler+0x168>
 8002c7c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c80:	e008      	b.n	8002c94 <HAL_DMA_IRQHandler+0x168>
 8002c82:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c86:	e005      	b.n	8002c94 <HAL_DMA_IRQHandler+0x168>
 8002c88:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c8c:	e002      	b.n	8002c94 <HAL_DMA_IRQHandler+0x168>
 8002c8e:	2320      	movs	r3, #32
 8002c90:	e000      	b.n	8002c94 <HAL_DMA_IRQHandler+0x168>
 8002c92:	2302      	movs	r3, #2
 8002c94:	4a27      	ldr	r2, [pc, #156]	@ (8002d34 <HAL_DMA_IRQHandler+0x208>)
 8002c96:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d034      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002cb0:	e02f      	b.n	8002d12 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb6:	2208      	movs	r2, #8
 8002cb8:	409a      	lsls	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d028      	beq.n	8002d14 <HAL_DMA_IRQHandler+0x1e8>
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	f003 0308 	and.w	r3, r3, #8
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d023      	beq.n	8002d14 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f022 020e 	bic.w	r2, r2, #14
 8002cda:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ce4:	2101      	movs	r1, #1
 8002ce6:	fa01 f202 	lsl.w	r2, r1, r2
 8002cea:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d004      	beq.n	8002d14 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	4798      	blx	r3
    }
  }
  return;
 8002d12:	bf00      	nop
 8002d14:	bf00      	nop
}
 8002d16:	3710      	adds	r7, #16
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	40020008 	.word	0x40020008
 8002d20:	4002001c 	.word	0x4002001c
 8002d24:	40020030 	.word	0x40020030
 8002d28:	40020044 	.word	0x40020044
 8002d2c:	40020058 	.word	0x40020058
 8002d30:	4002006c 	.word	0x4002006c
 8002d34:	40020000 	.word	0x40020000

08002d38 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b085      	sub	sp, #20
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
 8002d44:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d4e:	2101      	movs	r1, #1
 8002d50:	fa01 f202 	lsl.w	r2, r1, r2
 8002d54:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	683a      	ldr	r2, [r7, #0]
 8002d5c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	2b10      	cmp	r3, #16
 8002d64:	d108      	bne.n	8002d78 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68ba      	ldr	r2, [r7, #8]
 8002d74:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002d76:	e007      	b.n	8002d88 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68ba      	ldr	r2, [r7, #8]
 8002d7e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	60da      	str	r2, [r3, #12]
}
 8002d88:	bf00      	nop
 8002d8a:	3714      	adds	r7, #20
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bc80      	pop	{r7}
 8002d90:	4770      	bx	lr
	...

08002d94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b08b      	sub	sp, #44	@ 0x2c
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002da2:	2300      	movs	r3, #0
 8002da4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002da6:	e169      	b.n	800307c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002da8:	2201      	movs	r2, #1
 8002daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dac:	fa02 f303 	lsl.w	r3, r2, r3
 8002db0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	69fa      	ldr	r2, [r7, #28]
 8002db8:	4013      	ands	r3, r2
 8002dba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	f040 8158 	bne.w	8003076 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	4a9a      	ldr	r2, [pc, #616]	@ (8003034 <HAL_GPIO_Init+0x2a0>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d05e      	beq.n	8002e8e <HAL_GPIO_Init+0xfa>
 8002dd0:	4a98      	ldr	r2, [pc, #608]	@ (8003034 <HAL_GPIO_Init+0x2a0>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d875      	bhi.n	8002ec2 <HAL_GPIO_Init+0x12e>
 8002dd6:	4a98      	ldr	r2, [pc, #608]	@ (8003038 <HAL_GPIO_Init+0x2a4>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d058      	beq.n	8002e8e <HAL_GPIO_Init+0xfa>
 8002ddc:	4a96      	ldr	r2, [pc, #600]	@ (8003038 <HAL_GPIO_Init+0x2a4>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d86f      	bhi.n	8002ec2 <HAL_GPIO_Init+0x12e>
 8002de2:	4a96      	ldr	r2, [pc, #600]	@ (800303c <HAL_GPIO_Init+0x2a8>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d052      	beq.n	8002e8e <HAL_GPIO_Init+0xfa>
 8002de8:	4a94      	ldr	r2, [pc, #592]	@ (800303c <HAL_GPIO_Init+0x2a8>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d869      	bhi.n	8002ec2 <HAL_GPIO_Init+0x12e>
 8002dee:	4a94      	ldr	r2, [pc, #592]	@ (8003040 <HAL_GPIO_Init+0x2ac>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d04c      	beq.n	8002e8e <HAL_GPIO_Init+0xfa>
 8002df4:	4a92      	ldr	r2, [pc, #584]	@ (8003040 <HAL_GPIO_Init+0x2ac>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d863      	bhi.n	8002ec2 <HAL_GPIO_Init+0x12e>
 8002dfa:	4a92      	ldr	r2, [pc, #584]	@ (8003044 <HAL_GPIO_Init+0x2b0>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d046      	beq.n	8002e8e <HAL_GPIO_Init+0xfa>
 8002e00:	4a90      	ldr	r2, [pc, #576]	@ (8003044 <HAL_GPIO_Init+0x2b0>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d85d      	bhi.n	8002ec2 <HAL_GPIO_Init+0x12e>
 8002e06:	2b12      	cmp	r3, #18
 8002e08:	d82a      	bhi.n	8002e60 <HAL_GPIO_Init+0xcc>
 8002e0a:	2b12      	cmp	r3, #18
 8002e0c:	d859      	bhi.n	8002ec2 <HAL_GPIO_Init+0x12e>
 8002e0e:	a201      	add	r2, pc, #4	@ (adr r2, 8002e14 <HAL_GPIO_Init+0x80>)
 8002e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e14:	08002e8f 	.word	0x08002e8f
 8002e18:	08002e69 	.word	0x08002e69
 8002e1c:	08002e7b 	.word	0x08002e7b
 8002e20:	08002ebd 	.word	0x08002ebd
 8002e24:	08002ec3 	.word	0x08002ec3
 8002e28:	08002ec3 	.word	0x08002ec3
 8002e2c:	08002ec3 	.word	0x08002ec3
 8002e30:	08002ec3 	.word	0x08002ec3
 8002e34:	08002ec3 	.word	0x08002ec3
 8002e38:	08002ec3 	.word	0x08002ec3
 8002e3c:	08002ec3 	.word	0x08002ec3
 8002e40:	08002ec3 	.word	0x08002ec3
 8002e44:	08002ec3 	.word	0x08002ec3
 8002e48:	08002ec3 	.word	0x08002ec3
 8002e4c:	08002ec3 	.word	0x08002ec3
 8002e50:	08002ec3 	.word	0x08002ec3
 8002e54:	08002ec3 	.word	0x08002ec3
 8002e58:	08002e71 	.word	0x08002e71
 8002e5c:	08002e85 	.word	0x08002e85
 8002e60:	4a79      	ldr	r2, [pc, #484]	@ (8003048 <HAL_GPIO_Init+0x2b4>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d013      	beq.n	8002e8e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002e66:	e02c      	b.n	8002ec2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	623b      	str	r3, [r7, #32]
          break;
 8002e6e:	e029      	b.n	8002ec4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	3304      	adds	r3, #4
 8002e76:	623b      	str	r3, [r7, #32]
          break;
 8002e78:	e024      	b.n	8002ec4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	3308      	adds	r3, #8
 8002e80:	623b      	str	r3, [r7, #32]
          break;
 8002e82:	e01f      	b.n	8002ec4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	330c      	adds	r3, #12
 8002e8a:	623b      	str	r3, [r7, #32]
          break;
 8002e8c:	e01a      	b.n	8002ec4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d102      	bne.n	8002e9c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002e96:	2304      	movs	r3, #4
 8002e98:	623b      	str	r3, [r7, #32]
          break;
 8002e9a:	e013      	b.n	8002ec4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d105      	bne.n	8002eb0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ea4:	2308      	movs	r3, #8
 8002ea6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	69fa      	ldr	r2, [r7, #28]
 8002eac:	611a      	str	r2, [r3, #16]
          break;
 8002eae:	e009      	b.n	8002ec4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002eb0:	2308      	movs	r3, #8
 8002eb2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	69fa      	ldr	r2, [r7, #28]
 8002eb8:	615a      	str	r2, [r3, #20]
          break;
 8002eba:	e003      	b.n	8002ec4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	623b      	str	r3, [r7, #32]
          break;
 8002ec0:	e000      	b.n	8002ec4 <HAL_GPIO_Init+0x130>
          break;
 8002ec2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	2bff      	cmp	r3, #255	@ 0xff
 8002ec8:	d801      	bhi.n	8002ece <HAL_GPIO_Init+0x13a>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	e001      	b.n	8002ed2 <HAL_GPIO_Init+0x13e>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	3304      	adds	r3, #4
 8002ed2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	2bff      	cmp	r3, #255	@ 0xff
 8002ed8:	d802      	bhi.n	8002ee0 <HAL_GPIO_Init+0x14c>
 8002eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	e002      	b.n	8002ee6 <HAL_GPIO_Init+0x152>
 8002ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee2:	3b08      	subs	r3, #8
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	210f      	movs	r1, #15
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef4:	43db      	mvns	r3, r3
 8002ef6:	401a      	ands	r2, r3
 8002ef8:	6a39      	ldr	r1, [r7, #32]
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	fa01 f303 	lsl.w	r3, r1, r3
 8002f00:	431a      	orrs	r2, r3
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	f000 80b1 	beq.w	8003076 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002f14:	4b4d      	ldr	r3, [pc, #308]	@ (800304c <HAL_GPIO_Init+0x2b8>)
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	4a4c      	ldr	r2, [pc, #304]	@ (800304c <HAL_GPIO_Init+0x2b8>)
 8002f1a:	f043 0301 	orr.w	r3, r3, #1
 8002f1e:	6193      	str	r3, [r2, #24]
 8002f20:	4b4a      	ldr	r3, [pc, #296]	@ (800304c <HAL_GPIO_Init+0x2b8>)
 8002f22:	699b      	ldr	r3, [r3, #24]
 8002f24:	f003 0301 	and.w	r3, r3, #1
 8002f28:	60bb      	str	r3, [r7, #8]
 8002f2a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002f2c:	4a48      	ldr	r2, [pc, #288]	@ (8003050 <HAL_GPIO_Init+0x2bc>)
 8002f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f30:	089b      	lsrs	r3, r3, #2
 8002f32:	3302      	adds	r3, #2
 8002f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f38:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f3c:	f003 0303 	and.w	r3, r3, #3
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	220f      	movs	r2, #15
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	43db      	mvns	r3, r3
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a40      	ldr	r2, [pc, #256]	@ (8003054 <HAL_GPIO_Init+0x2c0>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d013      	beq.n	8002f80 <HAL_GPIO_Init+0x1ec>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a3f      	ldr	r2, [pc, #252]	@ (8003058 <HAL_GPIO_Init+0x2c4>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d00d      	beq.n	8002f7c <HAL_GPIO_Init+0x1e8>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a3e      	ldr	r2, [pc, #248]	@ (800305c <HAL_GPIO_Init+0x2c8>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d007      	beq.n	8002f78 <HAL_GPIO_Init+0x1e4>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a3d      	ldr	r2, [pc, #244]	@ (8003060 <HAL_GPIO_Init+0x2cc>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d101      	bne.n	8002f74 <HAL_GPIO_Init+0x1e0>
 8002f70:	2303      	movs	r3, #3
 8002f72:	e006      	b.n	8002f82 <HAL_GPIO_Init+0x1ee>
 8002f74:	2304      	movs	r3, #4
 8002f76:	e004      	b.n	8002f82 <HAL_GPIO_Init+0x1ee>
 8002f78:	2302      	movs	r3, #2
 8002f7a:	e002      	b.n	8002f82 <HAL_GPIO_Init+0x1ee>
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e000      	b.n	8002f82 <HAL_GPIO_Init+0x1ee>
 8002f80:	2300      	movs	r3, #0
 8002f82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f84:	f002 0203 	and.w	r2, r2, #3
 8002f88:	0092      	lsls	r2, r2, #2
 8002f8a:	4093      	lsls	r3, r2
 8002f8c:	68fa      	ldr	r2, [r7, #12]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002f92:	492f      	ldr	r1, [pc, #188]	@ (8003050 <HAL_GPIO_Init+0x2bc>)
 8002f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f96:	089b      	lsrs	r3, r3, #2
 8002f98:	3302      	adds	r3, #2
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d006      	beq.n	8002fba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002fac:	4b2d      	ldr	r3, [pc, #180]	@ (8003064 <HAL_GPIO_Init+0x2d0>)
 8002fae:	689a      	ldr	r2, [r3, #8]
 8002fb0:	492c      	ldr	r1, [pc, #176]	@ (8003064 <HAL_GPIO_Init+0x2d0>)
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	608b      	str	r3, [r1, #8]
 8002fb8:	e006      	b.n	8002fc8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002fba:	4b2a      	ldr	r3, [pc, #168]	@ (8003064 <HAL_GPIO_Init+0x2d0>)
 8002fbc:	689a      	ldr	r2, [r3, #8]
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	43db      	mvns	r3, r3
 8002fc2:	4928      	ldr	r1, [pc, #160]	@ (8003064 <HAL_GPIO_Init+0x2d0>)
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d006      	beq.n	8002fe2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002fd4:	4b23      	ldr	r3, [pc, #140]	@ (8003064 <HAL_GPIO_Init+0x2d0>)
 8002fd6:	68da      	ldr	r2, [r3, #12]
 8002fd8:	4922      	ldr	r1, [pc, #136]	@ (8003064 <HAL_GPIO_Init+0x2d0>)
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	60cb      	str	r3, [r1, #12]
 8002fe0:	e006      	b.n	8002ff0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002fe2:	4b20      	ldr	r3, [pc, #128]	@ (8003064 <HAL_GPIO_Init+0x2d0>)
 8002fe4:	68da      	ldr	r2, [r3, #12]
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	43db      	mvns	r3, r3
 8002fea:	491e      	ldr	r1, [pc, #120]	@ (8003064 <HAL_GPIO_Init+0x2d0>)
 8002fec:	4013      	ands	r3, r2
 8002fee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d006      	beq.n	800300a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ffc:	4b19      	ldr	r3, [pc, #100]	@ (8003064 <HAL_GPIO_Init+0x2d0>)
 8002ffe:	685a      	ldr	r2, [r3, #4]
 8003000:	4918      	ldr	r1, [pc, #96]	@ (8003064 <HAL_GPIO_Init+0x2d0>)
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	4313      	orrs	r3, r2
 8003006:	604b      	str	r3, [r1, #4]
 8003008:	e006      	b.n	8003018 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800300a:	4b16      	ldr	r3, [pc, #88]	@ (8003064 <HAL_GPIO_Init+0x2d0>)
 800300c:	685a      	ldr	r2, [r3, #4]
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	43db      	mvns	r3, r3
 8003012:	4914      	ldr	r1, [pc, #80]	@ (8003064 <HAL_GPIO_Init+0x2d0>)
 8003014:	4013      	ands	r3, r2
 8003016:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d021      	beq.n	8003068 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003024:	4b0f      	ldr	r3, [pc, #60]	@ (8003064 <HAL_GPIO_Init+0x2d0>)
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	490e      	ldr	r1, [pc, #56]	@ (8003064 <HAL_GPIO_Init+0x2d0>)
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	4313      	orrs	r3, r2
 800302e:	600b      	str	r3, [r1, #0]
 8003030:	e021      	b.n	8003076 <HAL_GPIO_Init+0x2e2>
 8003032:	bf00      	nop
 8003034:	10320000 	.word	0x10320000
 8003038:	10310000 	.word	0x10310000
 800303c:	10220000 	.word	0x10220000
 8003040:	10210000 	.word	0x10210000
 8003044:	10120000 	.word	0x10120000
 8003048:	10110000 	.word	0x10110000
 800304c:	40021000 	.word	0x40021000
 8003050:	40010000 	.word	0x40010000
 8003054:	40010800 	.word	0x40010800
 8003058:	40010c00 	.word	0x40010c00
 800305c:	40011000 	.word	0x40011000
 8003060:	40011400 	.word	0x40011400
 8003064:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003068:	4b0b      	ldr	r3, [pc, #44]	@ (8003098 <HAL_GPIO_Init+0x304>)
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	43db      	mvns	r3, r3
 8003070:	4909      	ldr	r1, [pc, #36]	@ (8003098 <HAL_GPIO_Init+0x304>)
 8003072:	4013      	ands	r3, r2
 8003074:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003078:	3301      	adds	r3, #1
 800307a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003082:	fa22 f303 	lsr.w	r3, r2, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	f47f ae8e 	bne.w	8002da8 <HAL_GPIO_Init+0x14>
  }
}
 800308c:	bf00      	nop
 800308e:	bf00      	nop
 8003090:	372c      	adds	r7, #44	@ 0x2c
 8003092:	46bd      	mov	sp, r7
 8003094:	bc80      	pop	{r7}
 8003096:	4770      	bx	lr
 8003098:	40010400 	.word	0x40010400

0800309c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e0e8      	b.n	8003280 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d106      	bne.n	80030c8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f007 f990 	bl	800a3e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2203      	movs	r2, #3
 80030cc:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4618      	mov	r0, r3
 80030dc:	f003 faab 	bl	8006636 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6818      	ldr	r0, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	3304      	adds	r3, #4
 80030e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030ea:	f003 fa81 	bl	80065f0 <USB_CoreInit>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d005      	beq.n	8003100 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2202      	movs	r2, #2
 80030f8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e0bf      	b.n	8003280 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2100      	movs	r1, #0
 8003106:	4618      	mov	r0, r3
 8003108:	f003 faaf 	bl	800666a <USB_SetCurrentMode>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d005      	beq.n	800311e <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2202      	movs	r2, #2
 8003116:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e0b0      	b.n	8003280 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800311e:	2300      	movs	r3, #0
 8003120:	73fb      	strb	r3, [r7, #15]
 8003122:	e03e      	b.n	80031a2 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003124:	7bfa      	ldrb	r2, [r7, #15]
 8003126:	6879      	ldr	r1, [r7, #4]
 8003128:	4613      	mov	r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	4413      	add	r3, r2
 800312e:	00db      	lsls	r3, r3, #3
 8003130:	440b      	add	r3, r1
 8003132:	3311      	adds	r3, #17
 8003134:	2201      	movs	r2, #1
 8003136:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003138:	7bfa      	ldrb	r2, [r7, #15]
 800313a:	6879      	ldr	r1, [r7, #4]
 800313c:	4613      	mov	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	4413      	add	r3, r2
 8003142:	00db      	lsls	r3, r3, #3
 8003144:	440b      	add	r3, r1
 8003146:	3310      	adds	r3, #16
 8003148:	7bfa      	ldrb	r2, [r7, #15]
 800314a:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800314c:	7bfa      	ldrb	r2, [r7, #15]
 800314e:	6879      	ldr	r1, [r7, #4]
 8003150:	4613      	mov	r3, r2
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	4413      	add	r3, r2
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	440b      	add	r3, r1
 800315a:	3313      	adds	r3, #19
 800315c:	2200      	movs	r2, #0
 800315e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003160:	7bfa      	ldrb	r2, [r7, #15]
 8003162:	6879      	ldr	r1, [r7, #4]
 8003164:	4613      	mov	r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	4413      	add	r3, r2
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	440b      	add	r3, r1
 800316e:	3320      	adds	r3, #32
 8003170:	2200      	movs	r2, #0
 8003172:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003174:	7bfa      	ldrb	r2, [r7, #15]
 8003176:	6879      	ldr	r1, [r7, #4]
 8003178:	4613      	mov	r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	4413      	add	r3, r2
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	440b      	add	r3, r1
 8003182:	3324      	adds	r3, #36	@ 0x24
 8003184:	2200      	movs	r2, #0
 8003186:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003188:	7bfb      	ldrb	r3, [r7, #15]
 800318a:	6879      	ldr	r1, [r7, #4]
 800318c:	1c5a      	adds	r2, r3, #1
 800318e:	4613      	mov	r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	4413      	add	r3, r2
 8003194:	00db      	lsls	r3, r3, #3
 8003196:	440b      	add	r3, r1
 8003198:	2200      	movs	r2, #0
 800319a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800319c:	7bfb      	ldrb	r3, [r7, #15]
 800319e:	3301      	adds	r3, #1
 80031a0:	73fb      	strb	r3, [r7, #15]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	791b      	ldrb	r3, [r3, #4]
 80031a6:	7bfa      	ldrb	r2, [r7, #15]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d3bb      	bcc.n	8003124 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031ac:	2300      	movs	r3, #0
 80031ae:	73fb      	strb	r3, [r7, #15]
 80031b0:	e044      	b.n	800323c <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80031b2:	7bfa      	ldrb	r2, [r7, #15]
 80031b4:	6879      	ldr	r1, [r7, #4]
 80031b6:	4613      	mov	r3, r2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	4413      	add	r3, r2
 80031bc:	00db      	lsls	r3, r3, #3
 80031be:	440b      	add	r3, r1
 80031c0:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80031c4:	2200      	movs	r2, #0
 80031c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80031c8:	7bfa      	ldrb	r2, [r7, #15]
 80031ca:	6879      	ldr	r1, [r7, #4]
 80031cc:	4613      	mov	r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	4413      	add	r3, r2
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	440b      	add	r3, r1
 80031d6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80031da:	7bfa      	ldrb	r2, [r7, #15]
 80031dc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80031de:	7bfa      	ldrb	r2, [r7, #15]
 80031e0:	6879      	ldr	r1, [r7, #4]
 80031e2:	4613      	mov	r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	4413      	add	r3, r2
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	440b      	add	r3, r1
 80031ec:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80031f0:	2200      	movs	r2, #0
 80031f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80031f4:	7bfa      	ldrb	r2, [r7, #15]
 80031f6:	6879      	ldr	r1, [r7, #4]
 80031f8:	4613      	mov	r3, r2
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	4413      	add	r3, r2
 80031fe:	00db      	lsls	r3, r3, #3
 8003200:	440b      	add	r3, r1
 8003202:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8003206:	2200      	movs	r2, #0
 8003208:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800320a:	7bfa      	ldrb	r2, [r7, #15]
 800320c:	6879      	ldr	r1, [r7, #4]
 800320e:	4613      	mov	r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	4413      	add	r3, r2
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	440b      	add	r3, r1
 8003218:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800321c:	2200      	movs	r2, #0
 800321e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003220:	7bfa      	ldrb	r2, [r7, #15]
 8003222:	6879      	ldr	r1, [r7, #4]
 8003224:	4613      	mov	r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	4413      	add	r3, r2
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	440b      	add	r3, r1
 800322e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003232:	2200      	movs	r2, #0
 8003234:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003236:	7bfb      	ldrb	r3, [r7, #15]
 8003238:	3301      	adds	r3, #1
 800323a:	73fb      	strb	r3, [r7, #15]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	791b      	ldrb	r3, [r3, #4]
 8003240:	7bfa      	ldrb	r2, [r7, #15]
 8003242:	429a      	cmp	r2, r3
 8003244:	d3b5      	bcc.n	80031b2 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6818      	ldr	r0, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	3304      	adds	r3, #4
 800324e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003250:	f003 fa17 	bl	8006682 <USB_DevInit>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d005      	beq.n	8003266 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2202      	movs	r2, #2
 800325e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e00c      	b.n	8003280 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4618      	mov	r0, r3
 800327a:	f005 fc96 	bl	8008baa <USB_DevDisconnect>

  return HAL_OK;
 800327e:	2300      	movs	r3, #0
}
 8003280:	4618      	mov	r0, r3
 8003282:	3710      	adds	r7, #16
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}

08003288 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003296:	2b01      	cmp	r3, #1
 8003298:	d101      	bne.n	800329e <HAL_PCD_Start+0x16>
 800329a:	2302      	movs	r3, #2
 800329c:	e016      	b.n	80032cc <HAL_PCD_Start+0x44>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2201      	movs	r2, #1
 80032a2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f003 f9ad 	bl	800660a <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80032b0:	2101      	movs	r1, #1
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f007 fae5 	bl	800a882 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4618      	mov	r0, r3
 80032be:	f005 fc6a 	bl	8008b96 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80032ca:	2300      	movs	r3, #0
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3708      	adds	r7, #8
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b088      	sub	sp, #32
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f005 fc6c 	bl	8008bbe <USB_ReadInterrupts>
 80032e6:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d003      	beq.n	80032fa <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 fb03 	bl	80038fe <PCD_EP_ISR_Handler>

    return;
 80032f8:	e119      	b.n	800352e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003300:	2b00      	cmp	r3, #0
 8003302:	d013      	beq.n	800332c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800330c:	b29a      	uxth	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003316:	b292      	uxth	r2, r2
 8003318:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f007 f8de 	bl	800a4de <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003322:	2100      	movs	r1, #0
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f000 f905 	bl	8003534 <HAL_PCD_SetAddress>

    return;
 800332a:	e100      	b.n	800352e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00c      	beq.n	8003350 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800333e:	b29a      	uxth	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003348:	b292      	uxth	r2, r2
 800334a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800334e:	e0ee      	b.n	800352e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00c      	beq.n	8003374 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003362:	b29a      	uxth	r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800336c:	b292      	uxth	r2, r2
 800336e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003372:	e0dc      	b.n	800352e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d027      	beq.n	80033ce <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003386:	b29a      	uxth	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f022 0204 	bic.w	r2, r2, #4
 8003390:	b292      	uxth	r2, r2
 8003392:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800339e:	b29a      	uxth	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f022 0208 	bic.w	r2, r2, #8
 80033a8:	b292      	uxth	r2, r2
 80033aa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f007 f8ce 	bl	800a550 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80033bc:	b29a      	uxth	r2, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80033c6:	b292      	uxth	r2, r2
 80033c8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80033cc:	e0af      	b.n	800352e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f000 8083 	beq.w	80034e0 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80033da:	2300      	movs	r3, #0
 80033dc:	77fb      	strb	r3, [r7, #31]
 80033de:	e010      	b.n	8003402 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	461a      	mov	r2, r3
 80033e6:	7ffb      	ldrb	r3, [r7, #31]
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	441a      	add	r2, r3
 80033ec:	7ffb      	ldrb	r3, [r7, #31]
 80033ee:	8812      	ldrh	r2, [r2, #0]
 80033f0:	b292      	uxth	r2, r2
 80033f2:	005b      	lsls	r3, r3, #1
 80033f4:	3320      	adds	r3, #32
 80033f6:	443b      	add	r3, r7
 80033f8:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80033fc:	7ffb      	ldrb	r3, [r7, #31]
 80033fe:	3301      	adds	r3, #1
 8003400:	77fb      	strb	r3, [r7, #31]
 8003402:	7ffb      	ldrb	r3, [r7, #31]
 8003404:	2b07      	cmp	r3, #7
 8003406:	d9eb      	bls.n	80033e0 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003410:	b29a      	uxth	r2, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f042 0201 	orr.w	r2, r2, #1
 800341a:	b292      	uxth	r2, r2
 800341c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003428:	b29a      	uxth	r2, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f022 0201 	bic.w	r2, r2, #1
 8003432:	b292      	uxth	r2, r2
 8003434:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8003438:	bf00      	nop
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003442:	b29b      	uxth	r3, r3
 8003444:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003448:	2b00      	cmp	r3, #0
 800344a:	d0f6      	beq.n	800343a <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003454:	b29a      	uxth	r2, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800345e:	b292      	uxth	r2, r2
 8003460:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8003464:	2300      	movs	r3, #0
 8003466:	77fb      	strb	r3, [r7, #31]
 8003468:	e00f      	b.n	800348a <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800346a:	7ffb      	ldrb	r3, [r7, #31]
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	6812      	ldr	r2, [r2, #0]
 8003470:	4611      	mov	r1, r2
 8003472:	7ffa      	ldrb	r2, [r7, #31]
 8003474:	0092      	lsls	r2, r2, #2
 8003476:	440a      	add	r2, r1
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	3320      	adds	r3, #32
 800347c:	443b      	add	r3, r7
 800347e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003482:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8003484:	7ffb      	ldrb	r3, [r7, #31]
 8003486:	3301      	adds	r3, #1
 8003488:	77fb      	strb	r3, [r7, #31]
 800348a:	7ffb      	ldrb	r3, [r7, #31]
 800348c:	2b07      	cmp	r3, #7
 800348e:	d9ec      	bls.n	800346a <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003498:	b29a      	uxth	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f042 0208 	orr.w	r2, r2, #8
 80034a2:	b292      	uxth	r2, r2
 80034a4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80034b0:	b29a      	uxth	r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034ba:	b292      	uxth	r2, r2
 80034bc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f042 0204 	orr.w	r2, r2, #4
 80034d2:	b292      	uxth	r2, r2
 80034d4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f007 f81f 	bl	800a51c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80034de:	e026      	b.n	800352e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d00f      	beq.n	800350a <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80034f2:	b29a      	uxth	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80034fc:	b292      	uxth	r2, r2
 80034fe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f006 ffdd 	bl	800a4c2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003508:	e011      	b.n	800352e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003510:	2b00      	cmp	r3, #0
 8003512:	d00c      	beq.n	800352e <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800351c:	b29a      	uxth	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003526:	b292      	uxth	r2, r2
 8003528:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800352c:	bf00      	nop
  }
}
 800352e:	3720      	adds	r7, #32
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}

08003534 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	460b      	mov	r3, r1
 800353e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003546:	2b01      	cmp	r3, #1
 8003548:	d101      	bne.n	800354e <HAL_PCD_SetAddress+0x1a>
 800354a:	2302      	movs	r3, #2
 800354c:	e012      	b.n	8003574 <HAL_PCD_SetAddress+0x40>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2201      	movs	r2, #1
 8003552:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	78fa      	ldrb	r2, [r7, #3]
 800355a:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	78fa      	ldrb	r2, [r7, #3]
 8003562:	4611      	mov	r1, r2
 8003564:	4618      	mov	r0, r3
 8003566:	f005 fb03 	bl	8008b70 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003572:	2300      	movs	r3, #0
}
 8003574:	4618      	mov	r0, r3
 8003576:	3708      	adds	r7, #8
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	4608      	mov	r0, r1
 8003586:	4611      	mov	r1, r2
 8003588:	461a      	mov	r2, r3
 800358a:	4603      	mov	r3, r0
 800358c:	70fb      	strb	r3, [r7, #3]
 800358e:	460b      	mov	r3, r1
 8003590:	803b      	strh	r3, [r7, #0]
 8003592:	4613      	mov	r3, r2
 8003594:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003596:	2300      	movs	r3, #0
 8003598:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800359a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	da0e      	bge.n	80035c0 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035a2:	78fb      	ldrb	r3, [r7, #3]
 80035a4:	f003 0207 	and.w	r2, r3, #7
 80035a8:	4613      	mov	r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	4413      	add	r3, r2
 80035ae:	00db      	lsls	r3, r3, #3
 80035b0:	3310      	adds	r3, #16
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	4413      	add	r3, r2
 80035b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2201      	movs	r2, #1
 80035bc:	705a      	strb	r2, [r3, #1]
 80035be:	e00e      	b.n	80035de <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035c0:	78fb      	ldrb	r3, [r7, #3]
 80035c2:	f003 0207 	and.w	r2, r3, #7
 80035c6:	4613      	mov	r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	4413      	add	r3, r2
 80035cc:	00db      	lsls	r3, r3, #3
 80035ce:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	4413      	add	r3, r2
 80035d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2200      	movs	r2, #0
 80035dc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80035de:	78fb      	ldrb	r3, [r7, #3]
 80035e0:	f003 0307 	and.w	r3, r3, #7
 80035e4:	b2da      	uxtb	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80035ea:	883a      	ldrh	r2, [r7, #0]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	78ba      	ldrb	r2, [r7, #2]
 80035f4:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80035f6:	78bb      	ldrb	r3, [r7, #2]
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d102      	bne.n	8003602 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003608:	2b01      	cmp	r3, #1
 800360a:	d101      	bne.n	8003610 <HAL_PCD_EP_Open+0x94>
 800360c:	2302      	movs	r3, #2
 800360e:	e00e      	b.n	800362e <HAL_PCD_EP_Open+0xb2>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68f9      	ldr	r1, [r7, #12]
 800361e:	4618      	mov	r0, r3
 8003620:	f003 f84c 	bl	80066bc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800362c:	7afb      	ldrb	r3, [r7, #11]
}
 800362e:	4618      	mov	r0, r3
 8003630:	3710      	adds	r7, #16
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}

08003636 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003636:	b580      	push	{r7, lr}
 8003638:	b084      	sub	sp, #16
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
 800363e:	460b      	mov	r3, r1
 8003640:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003642:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003646:	2b00      	cmp	r3, #0
 8003648:	da0e      	bge.n	8003668 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800364a:	78fb      	ldrb	r3, [r7, #3]
 800364c:	f003 0207 	and.w	r2, r3, #7
 8003650:	4613      	mov	r3, r2
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	4413      	add	r3, r2
 8003656:	00db      	lsls	r3, r3, #3
 8003658:	3310      	adds	r3, #16
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	4413      	add	r3, r2
 800365e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2201      	movs	r2, #1
 8003664:	705a      	strb	r2, [r3, #1]
 8003666:	e00e      	b.n	8003686 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003668:	78fb      	ldrb	r3, [r7, #3]
 800366a:	f003 0207 	and.w	r2, r3, #7
 800366e:	4613      	mov	r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	4413      	add	r3, r2
 8003674:	00db      	lsls	r3, r3, #3
 8003676:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	4413      	add	r3, r2
 800367e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003686:	78fb      	ldrb	r3, [r7, #3]
 8003688:	f003 0307 	and.w	r3, r3, #7
 800368c:	b2da      	uxtb	r2, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003698:	2b01      	cmp	r3, #1
 800369a:	d101      	bne.n	80036a0 <HAL_PCD_EP_Close+0x6a>
 800369c:	2302      	movs	r3, #2
 800369e:	e00e      	b.n	80036be <HAL_PCD_EP_Close+0x88>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68f9      	ldr	r1, [r7, #12]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f003 fbc4 	bl	8006e3c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b086      	sub	sp, #24
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	60f8      	str	r0, [r7, #12]
 80036ce:	607a      	str	r2, [r7, #4]
 80036d0:	603b      	str	r3, [r7, #0]
 80036d2:	460b      	mov	r3, r1
 80036d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036d6:	7afb      	ldrb	r3, [r7, #11]
 80036d8:	f003 0207 	and.w	r2, r3, #7
 80036dc:	4613      	mov	r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	4413      	add	r3, r2
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	4413      	add	r3, r2
 80036ec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	683a      	ldr	r2, [r7, #0]
 80036f8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	2200      	movs	r2, #0
 80036fe:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	2200      	movs	r2, #0
 8003704:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003706:	7afb      	ldrb	r3, [r7, #11]
 8003708:	f003 0307 	and.w	r3, r3, #7
 800370c:	b2da      	uxtb	r2, r3
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	6979      	ldr	r1, [r7, #20]
 8003718:	4618      	mov	r0, r3
 800371a:	f003 fd7b 	bl	8007214 <USB_EPStartXfer>

  return HAL_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	3718      	adds	r7, #24
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	607a      	str	r2, [r7, #4]
 8003732:	603b      	str	r3, [r7, #0]
 8003734:	460b      	mov	r3, r1
 8003736:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003738:	7afb      	ldrb	r3, [r7, #11]
 800373a:	f003 0207 	and.w	r2, r3, #7
 800373e:	4613      	mov	r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	4413      	add	r3, r2
 8003744:	00db      	lsls	r3, r3, #3
 8003746:	3310      	adds	r3, #16
 8003748:	68fa      	ldr	r2, [r7, #12]
 800374a:	4413      	add	r3, r2
 800374c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	683a      	ldr	r2, [r7, #0]
 8003758:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	2201      	movs	r2, #1
 800375e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	683a      	ldr	r2, [r7, #0]
 8003766:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	2200      	movs	r2, #0
 800376c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	2201      	movs	r2, #1
 8003772:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003774:	7afb      	ldrb	r3, [r7, #11]
 8003776:	f003 0307 	and.w	r3, r3, #7
 800377a:	b2da      	uxtb	r2, r3
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	6979      	ldr	r1, [r7, #20]
 8003786:	4618      	mov	r0, r3
 8003788:	f003 fd44 	bl	8007214 <USB_EPStartXfer>

  return HAL_OK;
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	3718      	adds	r7, #24
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}

08003796 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003796:	b580      	push	{r7, lr}
 8003798:	b084      	sub	sp, #16
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
 800379e:	460b      	mov	r3, r1
 80037a0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80037a2:	78fb      	ldrb	r3, [r7, #3]
 80037a4:	f003 0307 	and.w	r3, r3, #7
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	7912      	ldrb	r2, [r2, #4]
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d901      	bls.n	80037b4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e04c      	b.n	800384e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80037b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	da0e      	bge.n	80037da <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037bc:	78fb      	ldrb	r3, [r7, #3]
 80037be:	f003 0207 	and.w	r2, r3, #7
 80037c2:	4613      	mov	r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	4413      	add	r3, r2
 80037c8:	00db      	lsls	r3, r3, #3
 80037ca:	3310      	adds	r3, #16
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	4413      	add	r3, r2
 80037d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2201      	movs	r2, #1
 80037d6:	705a      	strb	r2, [r3, #1]
 80037d8:	e00c      	b.n	80037f4 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80037da:	78fa      	ldrb	r2, [r7, #3]
 80037dc:	4613      	mov	r3, r2
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	4413      	add	r3, r2
 80037e2:	00db      	lsls	r3, r3, #3
 80037e4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	4413      	add	r3, r2
 80037ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2201      	movs	r2, #1
 80037f8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037fa:	78fb      	ldrb	r3, [r7, #3]
 80037fc:	f003 0307 	and.w	r3, r3, #7
 8003800:	b2da      	uxtb	r2, r3
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800380c:	2b01      	cmp	r3, #1
 800380e:	d101      	bne.n	8003814 <HAL_PCD_EP_SetStall+0x7e>
 8003810:	2302      	movs	r3, #2
 8003812:	e01c      	b.n	800384e <HAL_PCD_EP_SetStall+0xb8>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68f9      	ldr	r1, [r7, #12]
 8003822:	4618      	mov	r0, r3
 8003824:	f005 f8a7 	bl	8008976 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003828:	78fb      	ldrb	r3, [r7, #3]
 800382a:	f003 0307 	and.w	r3, r3, #7
 800382e:	2b00      	cmp	r3, #0
 8003830:	d108      	bne.n	8003844 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800383c:	4619      	mov	r1, r3
 800383e:	4610      	mov	r0, r2
 8003840:	f005 f9cc 	bl	8008bdc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	3710      	adds	r7, #16
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}

08003856 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003856:	b580      	push	{r7, lr}
 8003858:	b084      	sub	sp, #16
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
 800385e:	460b      	mov	r3, r1
 8003860:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003862:	78fb      	ldrb	r3, [r7, #3]
 8003864:	f003 030f 	and.w	r3, r3, #15
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	7912      	ldrb	r2, [r2, #4]
 800386c:	4293      	cmp	r3, r2
 800386e:	d901      	bls.n	8003874 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e040      	b.n	80038f6 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003874:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003878:	2b00      	cmp	r3, #0
 800387a:	da0e      	bge.n	800389a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800387c:	78fb      	ldrb	r3, [r7, #3]
 800387e:	f003 0207 	and.w	r2, r3, #7
 8003882:	4613      	mov	r3, r2
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	4413      	add	r3, r2
 8003888:	00db      	lsls	r3, r3, #3
 800388a:	3310      	adds	r3, #16
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	4413      	add	r3, r2
 8003890:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2201      	movs	r2, #1
 8003896:	705a      	strb	r2, [r3, #1]
 8003898:	e00e      	b.n	80038b8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800389a:	78fb      	ldrb	r3, [r7, #3]
 800389c:	f003 0207 	and.w	r2, r3, #7
 80038a0:	4613      	mov	r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	4413      	add	r3, r2
 80038a6:	00db      	lsls	r3, r3, #3
 80038a8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	4413      	add	r3, r2
 80038b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2200      	movs	r2, #0
 80038b6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2200      	movs	r2, #0
 80038bc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038be:	78fb      	ldrb	r3, [r7, #3]
 80038c0:	f003 0307 	and.w	r3, r3, #7
 80038c4:	b2da      	uxtb	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d101      	bne.n	80038d8 <HAL_PCD_EP_ClrStall+0x82>
 80038d4:	2302      	movs	r3, #2
 80038d6:	e00e      	b.n	80038f6 <HAL_PCD_EP_ClrStall+0xa0>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	68f9      	ldr	r1, [r7, #12]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f005 f895 	bl	8008a16 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3710      	adds	r7, #16
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80038fe:	b580      	push	{r7, lr}
 8003900:	b096      	sub	sp, #88	@ 0x58
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003906:	e3bb      	b.n	8004080 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003910:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003914:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003918:	b2db      	uxtb	r3, r3
 800391a:	f003 030f 	and.w	r3, r3, #15
 800391e:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8003922:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003926:	2b00      	cmp	r3, #0
 8003928:	f040 8175 	bne.w	8003c16 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800392c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003930:	f003 0310 	and.w	r3, r3, #16
 8003934:	2b00      	cmp	r3, #0
 8003936:	d14e      	bne.n	80039d6 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	881b      	ldrh	r3, [r3, #0]
 800393e:	b29b      	uxth	r3, r3
 8003940:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003944:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003948:	81fb      	strh	r3, [r7, #14]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	89fb      	ldrh	r3, [r7, #14]
 8003950:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003954:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003958:	b29b      	uxth	r3, r3
 800395a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	3310      	adds	r3, #16
 8003960:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800396a:	b29b      	uxth	r3, r3
 800396c:	461a      	mov	r2, r3
 800396e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	00db      	lsls	r3, r3, #3
 8003974:	4413      	add	r3, r2
 8003976:	3302      	adds	r3, #2
 8003978:	005b      	lsls	r3, r3, #1
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	6812      	ldr	r2, [r2, #0]
 800397e:	4413      	add	r3, r2
 8003980:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003984:	881b      	ldrh	r3, [r3, #0]
 8003986:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800398a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800398c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800398e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003990:	695a      	ldr	r2, [r3, #20]
 8003992:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003994:	69db      	ldr	r3, [r3, #28]
 8003996:	441a      	add	r2, r3
 8003998:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800399a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800399c:	2100      	movs	r1, #0
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f006 fd75 	bl	800a48e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	7b5b      	ldrb	r3, [r3, #13]
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f000 8368 	beq.w	8004080 <PCD_EP_ISR_Handler+0x782>
 80039b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039b2:	699b      	ldr	r3, [r3, #24]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	f040 8363 	bne.w	8004080 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	7b5b      	ldrb	r3, [r3, #13]
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80039c4:	b2da      	uxtb	r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	735a      	strb	r2, [r3, #13]
 80039d4:	e354      	b.n	8004080 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80039dc:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	881b      	ldrh	r3, [r3, #0]
 80039e4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80039e8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80039ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d034      	beq.n	8003a5e <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	461a      	mov	r2, r3
 8003a00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	00db      	lsls	r3, r3, #3
 8003a06:	4413      	add	r3, r2
 8003a08:	3306      	adds	r3, #6
 8003a0a:	005b      	lsls	r3, r3, #1
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	6812      	ldr	r2, [r2, #0]
 8003a10:	4413      	add	r3, r2
 8003a12:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003a16:	881b      	ldrh	r3, [r3, #0]
 8003a18:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003a1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a1e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6818      	ldr	r0, [r3, #0]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8003a2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a2c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003a2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a30:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	f005 f922 	bl	8008c7c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	881b      	ldrh	r3, [r3, #0]
 8003a3e:	b29a      	uxth	r2, r3
 8003a40:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003a44:	4013      	ands	r3, r2
 8003a46:	823b      	strh	r3, [r7, #16]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	8a3a      	ldrh	r2, [r7, #16]
 8003a4e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003a52:	b292      	uxth	r2, r2
 8003a54:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f006 fcec 	bl	800a434 <HAL_PCD_SetupStageCallback>
 8003a5c:	e310      	b.n	8004080 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003a5e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f280 830c 	bge.w	8004080 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	881b      	ldrh	r3, [r3, #0]
 8003a6e:	b29a      	uxth	r2, r3
 8003a70:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003a74:	4013      	ands	r3, r2
 8003a76:	83fb      	strh	r3, [r7, #30]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	8bfa      	ldrh	r2, [r7, #30]
 8003a7e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003a82:	b292      	uxth	r2, r2
 8003a84:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	461a      	mov	r2, r3
 8003a92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	00db      	lsls	r3, r3, #3
 8003a98:	4413      	add	r3, r2
 8003a9a:	3306      	adds	r3, #6
 8003a9c:	005b      	lsls	r3, r3, #1
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	6812      	ldr	r2, [r2, #0]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003aa8:	881b      	ldrh	r3, [r3, #0]
 8003aaa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003aae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ab0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003ab2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ab4:	69db      	ldr	r3, [r3, #28]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d019      	beq.n	8003aee <PCD_EP_ISR_Handler+0x1f0>
 8003aba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d015      	beq.n	8003aee <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6818      	ldr	r0, [r3, #0]
 8003ac6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ac8:	6959      	ldr	r1, [r3, #20]
 8003aca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003acc:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003ace:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ad0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	f005 f8d2 	bl	8008c7c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003ad8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ada:	695a      	ldr	r2, [r3, #20]
 8003adc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ade:	69db      	ldr	r3, [r3, #28]
 8003ae0:	441a      	add	r2, r3
 8003ae2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ae4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003ae6:	2100      	movs	r1, #0
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f006 fcb5 	bl	800a458 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	881b      	ldrh	r3, [r3, #0]
 8003af4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003af8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003afc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	f040 82bd 	bne.w	8004080 <PCD_EP_ISR_Handler+0x782>
 8003b06:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003b0a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003b0e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003b12:	f000 82b5 	beq.w	8004080 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	61bb      	str	r3, [r7, #24]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	461a      	mov	r2, r3
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	61bb      	str	r3, [r7, #24]
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003b34:	617b      	str	r3, [r7, #20]
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	881b      	ldrh	r3, [r3, #0]
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b40:	b29a      	uxth	r2, r3
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	801a      	strh	r2, [r3, #0]
 8003b46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	2b3e      	cmp	r3, #62	@ 0x3e
 8003b4c:	d91d      	bls.n	8003b8a <PCD_EP_ISR_Handler+0x28c>
 8003b4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	095b      	lsrs	r3, r3, #5
 8003b54:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	f003 031f 	and.w	r3, r3, #31
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d102      	bne.n	8003b68 <PCD_EP_ISR_Handler+0x26a>
 8003b62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b64:	3b01      	subs	r3, #1
 8003b66:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	881b      	ldrh	r3, [r3, #0]
 8003b6c:	b29a      	uxth	r2, r3
 8003b6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	029b      	lsls	r3, r3, #10
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	4313      	orrs	r3, r2
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b82:	b29a      	uxth	r2, r3
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	801a      	strh	r2, [r3, #0]
 8003b88:	e026      	b.n	8003bd8 <PCD_EP_ISR_Handler+0x2da>
 8003b8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d10a      	bne.n	8003ba8 <PCD_EP_ISR_Handler+0x2aa>
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	881b      	ldrh	r3, [r3, #0]
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ba0:	b29a      	uxth	r2, r3
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	801a      	strh	r2, [r3, #0]
 8003ba6:	e017      	b.n	8003bd8 <PCD_EP_ISR_Handler+0x2da>
 8003ba8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	085b      	lsrs	r3, r3, #1
 8003bae:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	f003 0301 	and.w	r3, r3, #1
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d002      	beq.n	8003bc2 <PCD_EP_ISR_Handler+0x2c4>
 8003bbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	881b      	ldrh	r3, [r3, #0]
 8003bc6:	b29a      	uxth	r2, r3
 8003bc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	029b      	lsls	r3, r3, #10
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	b29a      	uxth	r2, r3
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	881b      	ldrh	r3, [r3, #0]
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003be4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003be8:	827b      	strh	r3, [r7, #18]
 8003bea:	8a7b      	ldrh	r3, [r7, #18]
 8003bec:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003bf0:	827b      	strh	r3, [r7, #18]
 8003bf2:	8a7b      	ldrh	r3, [r7, #18]
 8003bf4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003bf8:	827b      	strh	r3, [r7, #18]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	8a7b      	ldrh	r3, [r7, #18]
 8003c00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	8013      	strh	r3, [r2, #0]
 8003c14:	e234      	b.n	8004080 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	4413      	add	r3, r2
 8003c24:	881b      	ldrh	r3, [r3, #0]
 8003c26:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003c2a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f280 80fc 	bge.w	8003e2c <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	461a      	mov	r2, r3
 8003c3a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	4413      	add	r3, r2
 8003c42:	881b      	ldrh	r3, [r3, #0]
 8003c44:	b29a      	uxth	r2, r3
 8003c46:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	461a      	mov	r2, r3
 8003c56:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	4413      	add	r3, r2
 8003c5e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8003c62:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003c66:	b292      	uxth	r2, r2
 8003c68:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003c6a:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003c6e:	4613      	mov	r3, r2
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	4413      	add	r3, r2
 8003c74:	00db      	lsls	r3, r3, #3
 8003c76:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003c80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c82:	7b1b      	ldrb	r3, [r3, #12]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d125      	bne.n	8003cd4 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	461a      	mov	r2, r3
 8003c94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	00db      	lsls	r3, r3, #3
 8003c9a:	4413      	add	r3, r2
 8003c9c:	3306      	adds	r3, #6
 8003c9e:	005b      	lsls	r3, r3, #1
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	6812      	ldr	r2, [r2, #0]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003caa:	881b      	ldrh	r3, [r3, #0]
 8003cac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cb0:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8003cb4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	f000 8092 	beq.w	8003de2 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6818      	ldr	r0, [r3, #0]
 8003cc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cc4:	6959      	ldr	r1, [r3, #20]
 8003cc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cc8:	88da      	ldrh	r2, [r3, #6]
 8003cca:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003cce:	f004 ffd5 	bl	8008c7c <USB_ReadPMA>
 8003cd2:	e086      	b.n	8003de2 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003cd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cd6:	78db      	ldrb	r3, [r3, #3]
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d10a      	bne.n	8003cf2 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003cdc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f000 f9d9 	bl	800409c <HAL_PCD_EP_DB_Receive>
 8003cea:	4603      	mov	r3, r0
 8003cec:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8003cf0:	e077      	b.n	8003de2 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	4413      	add	r3, r2
 8003d00:	881b      	ldrh	r3, [r3, #0]
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d0c:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	461a      	mov	r2, r3
 8003d16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	441a      	add	r2, r3
 8003d1e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8003d22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d2e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	4413      	add	r3, r2
 8003d44:	881b      	ldrh	r3, [r3, #0]
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d024      	beq.n	8003d9a <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	00db      	lsls	r3, r3, #3
 8003d62:	4413      	add	r3, r2
 8003d64:	3302      	adds	r3, #2
 8003d66:	005b      	lsls	r3, r3, #1
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	6812      	ldr	r2, [r2, #0]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003d72:	881b      	ldrh	r3, [r3, #0]
 8003d74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d78:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003d7c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d02e      	beq.n	8003de2 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6818      	ldr	r0, [r3, #0]
 8003d88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d8a:	6959      	ldr	r1, [r3, #20]
 8003d8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d8e:	891a      	ldrh	r2, [r3, #8]
 8003d90:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003d94:	f004 ff72 	bl	8008c7c <USB_ReadPMA>
 8003d98:	e023      	b.n	8003de2 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	461a      	mov	r2, r3
 8003da6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	00db      	lsls	r3, r3, #3
 8003dac:	4413      	add	r3, r2
 8003dae:	3306      	adds	r3, #6
 8003db0:	005b      	lsls	r3, r3, #1
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	6812      	ldr	r2, [r2, #0]
 8003db6:	4413      	add	r3, r2
 8003db8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003dbc:	881b      	ldrh	r3, [r3, #0]
 8003dbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003dc2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003dc6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d009      	beq.n	8003de2 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6818      	ldr	r0, [r3, #0]
 8003dd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dd4:	6959      	ldr	r1, [r3, #20]
 8003dd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dd8:	895a      	ldrh	r2, [r3, #10]
 8003dda:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003dde:	f004 ff4d 	bl	8008c7c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003de2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003de4:	69da      	ldr	r2, [r3, #28]
 8003de6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003dea:	441a      	add	r2, r3
 8003dec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dee:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003df0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003df2:	695a      	ldr	r2, [r3, #20]
 8003df4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003df8:	441a      	add	r2, r3
 8003dfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dfc:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003dfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e00:	699b      	ldr	r3, [r3, #24]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d005      	beq.n	8003e12 <PCD_EP_ISR_Handler+0x514>
 8003e06:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8003e0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d206      	bcs.n	8003e20 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003e12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	4619      	mov	r1, r3
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f006 fb1d 	bl	800a458 <HAL_PCD_DataOutStageCallback>
 8003e1e:	e005      	b.n	8003e2c <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003e26:	4618      	mov	r0, r3
 8003e28:	f003 f9f4 	bl	8007214 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003e2c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003e30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	f000 8123 	beq.w	8004080 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8003e3a:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003e3e:	4613      	mov	r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	4413      	add	r3, r2
 8003e44:	00db      	lsls	r3, r3, #3
 8003e46:	3310      	adds	r3, #16
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	461a      	mov	r2, r3
 8003e54:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	4413      	add	r3, r2
 8003e5c:	881b      	ldrh	r3, [r3, #0]
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003e64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e68:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	461a      	mov	r2, r3
 8003e72:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	441a      	add	r2, r3
 8003e7a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003e7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003e8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e8c:	78db      	ldrb	r3, [r3, #3]
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	f040 80a2 	bne.w	8003fd8 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8003e94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e96:	2200      	movs	r2, #0
 8003e98:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003e9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e9c:	7b1b      	ldrb	r3, [r3, #12]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	f000 8093 	beq.w	8003fca <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003ea4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003ea8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d046      	beq.n	8003f3e <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003eb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eb2:	785b      	ldrb	r3, [r3, #1]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d126      	bne.n	8003f06 <PCD_EP_ISR_Handler+0x608>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	461a      	mov	r2, r3
 8003eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ecc:	4413      	add	r3, r2
 8003ece:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ed0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	011a      	lsls	r2, r3, #4
 8003ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed8:	4413      	add	r3, r2
 8003eda:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003ede:	623b      	str	r3, [r7, #32]
 8003ee0:	6a3b      	ldr	r3, [r7, #32]
 8003ee2:	881b      	ldrh	r3, [r3, #0]
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003eea:	b29a      	uxth	r2, r3
 8003eec:	6a3b      	ldr	r3, [r7, #32]
 8003eee:	801a      	strh	r2, [r3, #0]
 8003ef0:	6a3b      	ldr	r3, [r7, #32]
 8003ef2:	881b      	ldrh	r3, [r3, #0]
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003efa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003efe:	b29a      	uxth	r2, r3
 8003f00:	6a3b      	ldr	r3, [r7, #32]
 8003f02:	801a      	strh	r2, [r3, #0]
 8003f04:	e061      	b.n	8003fca <PCD_EP_ISR_Handler+0x6cc>
 8003f06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f08:	785b      	ldrb	r3, [r3, #1]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d15d      	bne.n	8003fca <PCD_EP_ISR_Handler+0x6cc>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	461a      	mov	r2, r3
 8003f20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f22:	4413      	add	r3, r2
 8003f24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	011a      	lsls	r2, r3, #4
 8003f2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f2e:	4413      	add	r3, r2
 8003f30:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003f34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f38:	2200      	movs	r2, #0
 8003f3a:	801a      	strh	r2, [r3, #0]
 8003f3c:	e045      	b.n	8003fca <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f46:	785b      	ldrb	r3, [r3, #1]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d126      	bne.n	8003f9a <PCD_EP_ISR_Handler+0x69c>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f60:	4413      	add	r3, r2
 8003f62:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	011a      	lsls	r2, r3, #4
 8003f6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f6c:	4413      	add	r3, r2
 8003f6e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003f72:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f76:	881b      	ldrh	r3, [r3, #0]
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f7e:	b29a      	uxth	r2, r3
 8003f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f82:	801a      	strh	r2, [r3, #0]
 8003f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f86:	881b      	ldrh	r3, [r3, #0]
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f92:	b29a      	uxth	r2, r3
 8003f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f96:	801a      	strh	r2, [r3, #0]
 8003f98:	e017      	b.n	8003fca <PCD_EP_ISR_Handler+0x6cc>
 8003f9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f9c:	785b      	ldrb	r3, [r3, #1]
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d113      	bne.n	8003fca <PCD_EP_ISR_Handler+0x6cc>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	461a      	mov	r2, r3
 8003fae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fb0:	4413      	add	r3, r2
 8003fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003fb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	011a      	lsls	r2, r3, #4
 8003fba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fbc:	4413      	add	r3, r2
 8003fbe:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003fc2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003fc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003fca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	4619      	mov	r1, r3
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f006 fa5c 	bl	800a48e <HAL_PCD_DataInStageCallback>
 8003fd6:	e053      	b.n	8004080 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003fd8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003fdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d146      	bne.n	8004072 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	461a      	mov	r2, r3
 8003ff0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	00db      	lsls	r3, r3, #3
 8003ff6:	4413      	add	r3, r2
 8003ff8:	3302      	adds	r3, #2
 8003ffa:	005b      	lsls	r3, r3, #1
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	6812      	ldr	r2, [r2, #0]
 8004000:	4413      	add	r3, r2
 8004002:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004006:	881b      	ldrh	r3, [r3, #0]
 8004008:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800400c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8004010:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004012:	699a      	ldr	r2, [r3, #24]
 8004014:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004018:	429a      	cmp	r2, r3
 800401a:	d907      	bls.n	800402c <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 800401c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800401e:	699a      	ldr	r2, [r3, #24]
 8004020:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004024:	1ad2      	subs	r2, r2, r3
 8004026:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004028:	619a      	str	r2, [r3, #24]
 800402a:	e002      	b.n	8004032 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 800402c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800402e:	2200      	movs	r2, #0
 8004030:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004032:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004034:	699b      	ldr	r3, [r3, #24]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d106      	bne.n	8004048 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800403a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	4619      	mov	r1, r3
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f006 fa24 	bl	800a48e <HAL_PCD_DataInStageCallback>
 8004046:	e01b      	b.n	8004080 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004048:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800404a:	695a      	ldr	r2, [r3, #20]
 800404c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004050:	441a      	add	r2, r3
 8004052:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004054:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004056:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004058:	69da      	ldr	r2, [r3, #28]
 800405a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800405e:	441a      	add	r2, r3
 8004060:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004062:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800406a:	4618      	mov	r0, r3
 800406c:	f003 f8d2 	bl	8007214 <USB_EPStartXfer>
 8004070:	e006      	b.n	8004080 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004072:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004076:	461a      	mov	r2, r3
 8004078:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 f91b 	bl	80042b6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004088:	b29b      	uxth	r3, r3
 800408a:	b21b      	sxth	r3, r3
 800408c:	2b00      	cmp	r3, #0
 800408e:	f6ff ac3b 	blt.w	8003908 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	3758      	adds	r7, #88	@ 0x58
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b088      	sub	sp, #32
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	60b9      	str	r1, [r7, #8]
 80040a6:	4613      	mov	r3, r2
 80040a8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80040aa:	88fb      	ldrh	r3, [r7, #6]
 80040ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d07e      	beq.n	80041b2 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040bc:	b29b      	uxth	r3, r3
 80040be:	461a      	mov	r2, r3
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	00db      	lsls	r3, r3, #3
 80040c6:	4413      	add	r3, r2
 80040c8:	3302      	adds	r3, #2
 80040ca:	005b      	lsls	r3, r3, #1
 80040cc:	68fa      	ldr	r2, [r7, #12]
 80040ce:	6812      	ldr	r2, [r2, #0]
 80040d0:	4413      	add	r3, r2
 80040d2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80040d6:	881b      	ldrh	r3, [r3, #0]
 80040d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040dc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	699a      	ldr	r2, [r3, #24]
 80040e2:	8b7b      	ldrh	r3, [r7, #26]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d306      	bcc.n	80040f6 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	699a      	ldr	r2, [r3, #24]
 80040ec:	8b7b      	ldrh	r3, [r7, #26]
 80040ee:	1ad2      	subs	r2, r2, r3
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	619a      	str	r2, [r3, #24]
 80040f4:	e002      	b.n	80040fc <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	2200      	movs	r2, #0
 80040fa:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	699b      	ldr	r3, [r3, #24]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d123      	bne.n	800414c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	461a      	mov	r2, r3
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	4413      	add	r3, r2
 8004112:	881b      	ldrh	r3, [r3, #0]
 8004114:	b29b      	uxth	r3, r3
 8004116:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800411a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800411e:	833b      	strh	r3, [r7, #24]
 8004120:	8b3b      	ldrh	r3, [r7, #24]
 8004122:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004126:	833b      	strh	r3, [r7, #24]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	461a      	mov	r2, r3
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	441a      	add	r2, r3
 8004136:	8b3b      	ldrh	r3, [r7, #24]
 8004138:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800413c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004140:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004144:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004148:	b29b      	uxth	r3, r3
 800414a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800414c:	88fb      	ldrh	r3, [r7, #6]
 800414e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004152:	2b00      	cmp	r3, #0
 8004154:	d01f      	beq.n	8004196 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	461a      	mov	r2, r3
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	4413      	add	r3, r2
 8004164:	881b      	ldrh	r3, [r3, #0]
 8004166:	b29b      	uxth	r3, r3
 8004168:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800416c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004170:	82fb      	strh	r3, [r7, #22]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	461a      	mov	r2, r3
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	441a      	add	r2, r3
 8004180:	8afb      	ldrh	r3, [r7, #22]
 8004182:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004186:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800418a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800418e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004192:	b29b      	uxth	r3, r3
 8004194:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004196:	8b7b      	ldrh	r3, [r7, #26]
 8004198:	2b00      	cmp	r3, #0
 800419a:	f000 8087 	beq.w	80042ac <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6818      	ldr	r0, [r3, #0]
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	6959      	ldr	r1, [r3, #20]
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	891a      	ldrh	r2, [r3, #8]
 80041aa:	8b7b      	ldrh	r3, [r7, #26]
 80041ac:	f004 fd66 	bl	8008c7c <USB_ReadPMA>
 80041b0:	e07c      	b.n	80042ac <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	461a      	mov	r2, r3
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	00db      	lsls	r3, r3, #3
 80041c4:	4413      	add	r3, r2
 80041c6:	3306      	adds	r3, #6
 80041c8:	005b      	lsls	r3, r3, #1
 80041ca:	68fa      	ldr	r2, [r7, #12]
 80041cc:	6812      	ldr	r2, [r2, #0]
 80041ce:	4413      	add	r3, r2
 80041d0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80041d4:	881b      	ldrh	r3, [r3, #0]
 80041d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041da:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	699a      	ldr	r2, [r3, #24]
 80041e0:	8b7b      	ldrh	r3, [r7, #26]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d306      	bcc.n	80041f4 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	699a      	ldr	r2, [r3, #24]
 80041ea:	8b7b      	ldrh	r3, [r7, #26]
 80041ec:	1ad2      	subs	r2, r2, r3
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	619a      	str	r2, [r3, #24]
 80041f2:	e002      	b.n	80041fa <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	2200      	movs	r2, #0
 80041f8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d123      	bne.n	800424a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	461a      	mov	r2, r3
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	4413      	add	r3, r2
 8004210:	881b      	ldrh	r3, [r3, #0]
 8004212:	b29b      	uxth	r3, r3
 8004214:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004218:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800421c:	83fb      	strh	r3, [r7, #30]
 800421e:	8bfb      	ldrh	r3, [r7, #30]
 8004220:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004224:	83fb      	strh	r3, [r7, #30]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	461a      	mov	r2, r3
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	441a      	add	r2, r3
 8004234:	8bfb      	ldrh	r3, [r7, #30]
 8004236:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800423a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800423e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004242:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004246:	b29b      	uxth	r3, r3
 8004248:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800424a:	88fb      	ldrh	r3, [r7, #6]
 800424c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004250:	2b00      	cmp	r3, #0
 8004252:	d11f      	bne.n	8004294 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	461a      	mov	r2, r3
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	4413      	add	r3, r2
 8004262:	881b      	ldrh	r3, [r3, #0]
 8004264:	b29b      	uxth	r3, r3
 8004266:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800426a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800426e:	83bb      	strh	r3, [r7, #28]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	461a      	mov	r2, r3
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	441a      	add	r2, r3
 800427e:	8bbb      	ldrh	r3, [r7, #28]
 8004280:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004284:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004288:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800428c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004290:	b29b      	uxth	r3, r3
 8004292:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004294:	8b7b      	ldrh	r3, [r7, #26]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d008      	beq.n	80042ac <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6818      	ldr	r0, [r3, #0]
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	6959      	ldr	r1, [r3, #20]
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	895a      	ldrh	r2, [r3, #10]
 80042a6:	8b7b      	ldrh	r3, [r7, #26]
 80042a8:	f004 fce8 	bl	8008c7c <USB_ReadPMA>
    }
  }

  return count;
 80042ac:	8b7b      	ldrh	r3, [r7, #26]
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3720      	adds	r7, #32
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b0a4      	sub	sp, #144	@ 0x90
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	60f8      	str	r0, [r7, #12]
 80042be:	60b9      	str	r1, [r7, #8]
 80042c0:	4613      	mov	r3, r2
 80042c2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80042c4:	88fb      	ldrh	r3, [r7, #6]
 80042c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	f000 81dd 	beq.w	800468a <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042d8:	b29b      	uxth	r3, r3
 80042da:	461a      	mov	r2, r3
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	00db      	lsls	r3, r3, #3
 80042e2:	4413      	add	r3, r2
 80042e4:	3302      	adds	r3, #2
 80042e6:	005b      	lsls	r3, r3, #1
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	6812      	ldr	r2, [r2, #0]
 80042ec:	4413      	add	r3, r2
 80042ee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80042f2:	881b      	ldrh	r3, [r3, #0]
 80042f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042f8:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	699a      	ldr	r2, [r3, #24]
 8004300:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004304:	429a      	cmp	r2, r3
 8004306:	d907      	bls.n	8004318 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	699a      	ldr	r2, [r3, #24]
 800430c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004310:	1ad2      	subs	r2, r2, r3
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	619a      	str	r2, [r3, #24]
 8004316:	e002      	b.n	800431e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	2200      	movs	r2, #0
 800431c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	2b00      	cmp	r3, #0
 8004324:	f040 80b9 	bne.w	800449a <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	785b      	ldrb	r3, [r3, #1]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d126      	bne.n	800437e <HAL_PCD_EP_DB_Transmit+0xc8>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800433e:	b29b      	uxth	r3, r3
 8004340:	461a      	mov	r2, r3
 8004342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004344:	4413      	add	r3, r2
 8004346:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	011a      	lsls	r2, r3, #4
 800434e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004350:	4413      	add	r3, r2
 8004352:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004356:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800435a:	881b      	ldrh	r3, [r3, #0]
 800435c:	b29b      	uxth	r3, r3
 800435e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004362:	b29a      	uxth	r2, r3
 8004364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004366:	801a      	strh	r2, [r3, #0]
 8004368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800436a:	881b      	ldrh	r3, [r3, #0]
 800436c:	b29b      	uxth	r3, r3
 800436e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004372:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004376:	b29a      	uxth	r2, r3
 8004378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800437a:	801a      	strh	r2, [r3, #0]
 800437c:	e01a      	b.n	80043b4 <HAL_PCD_EP_DB_Transmit+0xfe>
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	785b      	ldrb	r3, [r3, #1]
 8004382:	2b01      	cmp	r3, #1
 8004384:	d116      	bne.n	80043b4 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	637b      	str	r3, [r7, #52]	@ 0x34
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004394:	b29b      	uxth	r3, r3
 8004396:	461a      	mov	r2, r3
 8004398:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800439a:	4413      	add	r3, r2
 800439c:	637b      	str	r3, [r7, #52]	@ 0x34
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	011a      	lsls	r2, r3, #4
 80043a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043a6:	4413      	add	r3, r2
 80043a8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80043ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80043ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043b0:	2200      	movs	r2, #0
 80043b2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	785b      	ldrb	r3, [r3, #1]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d126      	bne.n	8004410 <HAL_PCD_EP_DB_Transmit+0x15a>
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	61fb      	str	r3, [r7, #28]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	461a      	mov	r2, r3
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	4413      	add	r3, r2
 80043d8:	61fb      	str	r3, [r7, #28]
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	011a      	lsls	r2, r3, #4
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	4413      	add	r3, r2
 80043e4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80043e8:	61bb      	str	r3, [r7, #24]
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	881b      	ldrh	r3, [r3, #0]
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043f4:	b29a      	uxth	r2, r3
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	801a      	strh	r2, [r3, #0]
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	881b      	ldrh	r3, [r3, #0]
 80043fe:	b29b      	uxth	r3, r3
 8004400:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004404:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004408:	b29a      	uxth	r2, r3
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	801a      	strh	r2, [r3, #0]
 800440e:	e017      	b.n	8004440 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	785b      	ldrb	r3, [r3, #1]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d113      	bne.n	8004440 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004420:	b29b      	uxth	r3, r3
 8004422:	461a      	mov	r2, r3
 8004424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004426:	4413      	add	r3, r2
 8004428:	627b      	str	r3, [r7, #36]	@ 0x24
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	011a      	lsls	r2, r3, #4
 8004430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004432:	4413      	add	r3, r2
 8004434:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004438:	623b      	str	r3, [r7, #32]
 800443a:	6a3b      	ldr	r3, [r7, #32]
 800443c:	2200      	movs	r2, #0
 800443e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	4619      	mov	r1, r3
 8004446:	68f8      	ldr	r0, [r7, #12]
 8004448:	f006 f821 	bl	800a48e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800444c:	88fb      	ldrh	r3, [r7, #6]
 800444e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004452:	2b00      	cmp	r3, #0
 8004454:	f000 82fc 	beq.w	8004a50 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	461a      	mov	r2, r3
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	4413      	add	r3, r2
 8004466:	881b      	ldrh	r3, [r3, #0]
 8004468:	b29b      	uxth	r3, r3
 800446a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800446e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004472:	82fb      	strh	r3, [r7, #22]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	461a      	mov	r2, r3
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	441a      	add	r2, r3
 8004482:	8afb      	ldrh	r3, [r7, #22]
 8004484:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004488:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800448c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004490:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004494:	b29b      	uxth	r3, r3
 8004496:	8013      	strh	r3, [r2, #0]
 8004498:	e2da      	b.n	8004a50 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800449a:	88fb      	ldrh	r3, [r7, #6]
 800449c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d021      	beq.n	80044e8 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	461a      	mov	r2, r3
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	4413      	add	r3, r2
 80044b2:	881b      	ldrh	r3, [r3, #0]
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044be:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	461a      	mov	r2, r3
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	441a      	add	r2, r3
 80044d0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80044d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80044d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80044dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80044e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	f040 82ae 	bne.w	8004a50 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	695a      	ldr	r2, [r3, #20]
 80044f8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80044fc:	441a      	add	r2, r3
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	69da      	ldr	r2, [r3, #28]
 8004506:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800450a:	441a      	add	r2, r3
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	6a1a      	ldr	r2, [r3, #32]
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	429a      	cmp	r2, r3
 800451a:	d30b      	bcc.n	8004534 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	691b      	ldr	r3, [r3, #16]
 8004520:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	6a1a      	ldr	r2, [r3, #32]
 8004528:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800452c:	1ad2      	subs	r2, r2, r3
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	621a      	str	r2, [r3, #32]
 8004532:	e017      	b.n	8004564 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	6a1b      	ldr	r3, [r3, #32]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d108      	bne.n	800454e <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800453c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004540:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	2200      	movs	r2, #0
 8004548:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800454c:	e00a      	b.n	8004564 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	6a1b      	ldr	r3, [r3, #32]
 800455a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	2200      	movs	r2, #0
 8004562:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	785b      	ldrb	r3, [r3, #1]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d165      	bne.n	8004638 <HAL_PCD_EP_DB_Transmit+0x382>
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800457a:	b29b      	uxth	r3, r3
 800457c:	461a      	mov	r2, r3
 800457e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004580:	4413      	add	r3, r2
 8004582:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	011a      	lsls	r2, r3, #4
 800458a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800458c:	4413      	add	r3, r2
 800458e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004592:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004596:	881b      	ldrh	r3, [r3, #0]
 8004598:	b29b      	uxth	r3, r3
 800459a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800459e:	b29a      	uxth	r2, r3
 80045a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045a2:	801a      	strh	r2, [r3, #0]
 80045a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80045a8:	2b3e      	cmp	r3, #62	@ 0x3e
 80045aa:	d91d      	bls.n	80045e8 <HAL_PCD_EP_DB_Transmit+0x332>
 80045ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80045b0:	095b      	lsrs	r3, r3, #5
 80045b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80045b8:	f003 031f 	and.w	r3, r3, #31
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d102      	bne.n	80045c6 <HAL_PCD_EP_DB_Transmit+0x310>
 80045c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045c2:	3b01      	subs	r3, #1
 80045c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045c8:	881b      	ldrh	r3, [r3, #0]
 80045ca:	b29a      	uxth	r2, r3
 80045cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	029b      	lsls	r3, r3, #10
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	4313      	orrs	r3, r2
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045e0:	b29a      	uxth	r2, r3
 80045e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045e4:	801a      	strh	r2, [r3, #0]
 80045e6:	e044      	b.n	8004672 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80045e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d10a      	bne.n	8004606 <HAL_PCD_EP_DB_Transmit+0x350>
 80045f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045f2:	881b      	ldrh	r3, [r3, #0]
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045fe:	b29a      	uxth	r2, r3
 8004600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004602:	801a      	strh	r2, [r3, #0]
 8004604:	e035      	b.n	8004672 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004606:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800460a:	085b      	lsrs	r3, r3, #1
 800460c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800460e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004612:	f003 0301 	and.w	r3, r3, #1
 8004616:	2b00      	cmp	r3, #0
 8004618:	d002      	beq.n	8004620 <HAL_PCD_EP_DB_Transmit+0x36a>
 800461a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800461c:	3301      	adds	r3, #1
 800461e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004622:	881b      	ldrh	r3, [r3, #0]
 8004624:	b29a      	uxth	r2, r3
 8004626:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004628:	b29b      	uxth	r3, r3
 800462a:	029b      	lsls	r3, r3, #10
 800462c:	b29b      	uxth	r3, r3
 800462e:	4313      	orrs	r3, r2
 8004630:	b29a      	uxth	r2, r3
 8004632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004634:	801a      	strh	r2, [r3, #0]
 8004636:	e01c      	b.n	8004672 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	785b      	ldrb	r3, [r3, #1]
 800463c:	2b01      	cmp	r3, #1
 800463e:	d118      	bne.n	8004672 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	647b      	str	r3, [r7, #68]	@ 0x44
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800464e:	b29b      	uxth	r3, r3
 8004650:	461a      	mov	r2, r3
 8004652:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004654:	4413      	add	r3, r2
 8004656:	647b      	str	r3, [r7, #68]	@ 0x44
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	011a      	lsls	r2, r3, #4
 800465e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004660:	4413      	add	r3, r2
 8004662:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004666:	643b      	str	r3, [r7, #64]	@ 0x40
 8004668:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800466c:	b29a      	uxth	r2, r3
 800466e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004670:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6818      	ldr	r0, [r3, #0]
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	6959      	ldr	r1, [r3, #20]
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	891a      	ldrh	r2, [r3, #8]
 800467e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004682:	b29b      	uxth	r3, r3
 8004684:	f004 fab5 	bl	8008bf2 <USB_WritePMA>
 8004688:	e1e2      	b.n	8004a50 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004692:	b29b      	uxth	r3, r3
 8004694:	461a      	mov	r2, r3
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	00db      	lsls	r3, r3, #3
 800469c:	4413      	add	r3, r2
 800469e:	3306      	adds	r3, #6
 80046a0:	005b      	lsls	r3, r3, #1
 80046a2:	68fa      	ldr	r2, [r7, #12]
 80046a4:	6812      	ldr	r2, [r2, #0]
 80046a6:	4413      	add	r3, r2
 80046a8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80046ac:	881b      	ldrh	r3, [r3, #0]
 80046ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046b2:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	699a      	ldr	r2, [r3, #24]
 80046ba:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80046be:	429a      	cmp	r2, r3
 80046c0:	d307      	bcc.n	80046d2 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	699a      	ldr	r2, [r3, #24]
 80046c6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80046ca:	1ad2      	subs	r2, r2, r3
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	619a      	str	r2, [r3, #24]
 80046d0:	e002      	b.n	80046d8 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	2200      	movs	r2, #0
 80046d6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	f040 80c0 	bne.w	8004862 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	785b      	ldrb	r3, [r3, #1]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d126      	bne.n	8004738 <HAL_PCD_EP_DB_Transmit+0x482>
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	461a      	mov	r2, r3
 80046fc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80046fe:	4413      	add	r3, r2
 8004700:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	011a      	lsls	r2, r3, #4
 8004708:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800470a:	4413      	add	r3, r2
 800470c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004710:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004712:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004714:	881b      	ldrh	r3, [r3, #0]
 8004716:	b29b      	uxth	r3, r3
 8004718:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800471c:	b29a      	uxth	r2, r3
 800471e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004720:	801a      	strh	r2, [r3, #0]
 8004722:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004724:	881b      	ldrh	r3, [r3, #0]
 8004726:	b29b      	uxth	r3, r3
 8004728:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800472c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004730:	b29a      	uxth	r2, r3
 8004732:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004734:	801a      	strh	r2, [r3, #0]
 8004736:	e01a      	b.n	800476e <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	785b      	ldrb	r3, [r3, #1]
 800473c:	2b01      	cmp	r3, #1
 800473e:	d116      	bne.n	800476e <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	667b      	str	r3, [r7, #100]	@ 0x64
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800474e:	b29b      	uxth	r3, r3
 8004750:	461a      	mov	r2, r3
 8004752:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004754:	4413      	add	r3, r2
 8004756:	667b      	str	r3, [r7, #100]	@ 0x64
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	011a      	lsls	r2, r3, #4
 800475e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004760:	4413      	add	r3, r2
 8004762:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004766:	663b      	str	r3, [r7, #96]	@ 0x60
 8004768:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800476a:	2200      	movs	r2, #0
 800476c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	677b      	str	r3, [r7, #116]	@ 0x74
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	785b      	ldrb	r3, [r3, #1]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d12b      	bne.n	80047d4 <HAL_PCD_EP_DB_Transmit+0x51e>
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800478a:	b29b      	uxth	r3, r3
 800478c:	461a      	mov	r2, r3
 800478e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004790:	4413      	add	r3, r2
 8004792:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	011a      	lsls	r2, r3, #4
 800479a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800479c:	4413      	add	r3, r2
 800479e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80047a2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80047a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80047aa:	881b      	ldrh	r3, [r3, #0]
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047b2:	b29a      	uxth	r2, r3
 80047b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80047b8:	801a      	strh	r2, [r3, #0]
 80047ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80047be:	881b      	ldrh	r3, [r3, #0]
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80047d0:	801a      	strh	r2, [r3, #0]
 80047d2:	e017      	b.n	8004804 <HAL_PCD_EP_DB_Transmit+0x54e>
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	785b      	ldrb	r3, [r3, #1]
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d113      	bne.n	8004804 <HAL_PCD_EP_DB_Transmit+0x54e>
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	461a      	mov	r2, r3
 80047e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80047ea:	4413      	add	r3, r2
 80047ec:	677b      	str	r3, [r7, #116]	@ 0x74
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	781b      	ldrb	r3, [r3, #0]
 80047f2:	011a      	lsls	r2, r3, #4
 80047f4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80047f6:	4413      	add	r3, r2
 80047f8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80047fc:	673b      	str	r3, [r7, #112]	@ 0x70
 80047fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004800:	2200      	movs	r2, #0
 8004802:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	4619      	mov	r1, r3
 800480a:	68f8      	ldr	r0, [r7, #12]
 800480c:	f005 fe3f 	bl	800a48e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004810:	88fb      	ldrh	r3, [r7, #6]
 8004812:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004816:	2b00      	cmp	r3, #0
 8004818:	f040 811a 	bne.w	8004a50 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	461a      	mov	r2, r3
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	4413      	add	r3, r2
 800482a:	881b      	ldrh	r3, [r3, #0]
 800482c:	b29b      	uxth	r3, r3
 800482e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004832:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004836:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	461a      	mov	r2, r3
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	441a      	add	r2, r3
 8004848:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800484c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004850:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004854:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004858:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800485c:	b29b      	uxth	r3, r3
 800485e:	8013      	strh	r3, [r2, #0]
 8004860:	e0f6      	b.n	8004a50 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004862:	88fb      	ldrh	r3, [r7, #6]
 8004864:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d121      	bne.n	80048b0 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	461a      	mov	r2, r3
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	4413      	add	r3, r2
 800487a:	881b      	ldrh	r3, [r3, #0]
 800487c:	b29b      	uxth	r3, r3
 800487e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004882:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004886:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	461a      	mov	r2, r3
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	441a      	add	r2, r3
 8004898:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800489c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80048a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	f040 80ca 	bne.w	8004a50 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	695a      	ldr	r2, [r3, #20]
 80048c0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80048c4:	441a      	add	r2, r3
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	69da      	ldr	r2, [r3, #28]
 80048ce:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80048d2:	441a      	add	r2, r3
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	6a1a      	ldr	r2, [r3, #32]
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d30b      	bcc.n	80048fc <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	691b      	ldr	r3, [r3, #16]
 80048e8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	6a1a      	ldr	r2, [r3, #32]
 80048f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80048f4:	1ad2      	subs	r2, r2, r3
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	621a      	str	r2, [r3, #32]
 80048fa:	e017      	b.n	800492c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	6a1b      	ldr	r3, [r3, #32]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d108      	bne.n	8004916 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8004904:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004908:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004914:	e00a      	b.n	800492c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	6a1b      	ldr	r3, [r3, #32]
 800491a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	2200      	movs	r2, #0
 8004922:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	2200      	movs	r2, #0
 8004928:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	657b      	str	r3, [r7, #84]	@ 0x54
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	785b      	ldrb	r3, [r3, #1]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d165      	bne.n	8004a06 <HAL_PCD_EP_DB_Transmit+0x750>
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004948:	b29b      	uxth	r3, r3
 800494a:	461a      	mov	r2, r3
 800494c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800494e:	4413      	add	r3, r2
 8004950:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	011a      	lsls	r2, r3, #4
 8004958:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800495a:	4413      	add	r3, r2
 800495c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004960:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004962:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004964:	881b      	ldrh	r3, [r3, #0]
 8004966:	b29b      	uxth	r3, r3
 8004968:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800496c:	b29a      	uxth	r2, r3
 800496e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004970:	801a      	strh	r2, [r3, #0]
 8004972:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004976:	2b3e      	cmp	r3, #62	@ 0x3e
 8004978:	d91d      	bls.n	80049b6 <HAL_PCD_EP_DB_Transmit+0x700>
 800497a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800497e:	095b      	lsrs	r3, r3, #5
 8004980:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004982:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004986:	f003 031f 	and.w	r3, r3, #31
 800498a:	2b00      	cmp	r3, #0
 800498c:	d102      	bne.n	8004994 <HAL_PCD_EP_DB_Transmit+0x6de>
 800498e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004990:	3b01      	subs	r3, #1
 8004992:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004994:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004996:	881b      	ldrh	r3, [r3, #0]
 8004998:	b29a      	uxth	r2, r3
 800499a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800499c:	b29b      	uxth	r3, r3
 800499e:	029b      	lsls	r3, r3, #10
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	4313      	orrs	r3, r2
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049ae:	b29a      	uxth	r2, r3
 80049b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80049b2:	801a      	strh	r2, [r3, #0]
 80049b4:	e041      	b.n	8004a3a <HAL_PCD_EP_DB_Transmit+0x784>
 80049b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d10a      	bne.n	80049d4 <HAL_PCD_EP_DB_Transmit+0x71e>
 80049be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80049c0:	881b      	ldrh	r3, [r3, #0]
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049cc:	b29a      	uxth	r2, r3
 80049ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80049d0:	801a      	strh	r2, [r3, #0]
 80049d2:	e032      	b.n	8004a3a <HAL_PCD_EP_DB_Transmit+0x784>
 80049d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80049d8:	085b      	lsrs	r3, r3, #1
 80049da:	66bb      	str	r3, [r7, #104]	@ 0x68
 80049dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80049e0:	f003 0301 	and.w	r3, r3, #1
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d002      	beq.n	80049ee <HAL_PCD_EP_DB_Transmit+0x738>
 80049e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80049ea:	3301      	adds	r3, #1
 80049ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80049ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80049f0:	881b      	ldrh	r3, [r3, #0]
 80049f2:	b29a      	uxth	r2, r3
 80049f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	029b      	lsls	r3, r3, #10
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	4313      	orrs	r3, r2
 80049fe:	b29a      	uxth	r2, r3
 8004a00:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a02:	801a      	strh	r2, [r3, #0]
 8004a04:	e019      	b.n	8004a3a <HAL_PCD_EP_DB_Transmit+0x784>
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	785b      	ldrb	r3, [r3, #1]
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d115      	bne.n	8004a3a <HAL_PCD_EP_DB_Transmit+0x784>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	461a      	mov	r2, r3
 8004a1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a1c:	4413      	add	r3, r2
 8004a1e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	011a      	lsls	r2, r3, #4
 8004a26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a28:	4413      	add	r3, r2
 8004a2a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004a2e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a34:	b29a      	uxth	r2, r3
 8004a36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a38:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6818      	ldr	r0, [r3, #0]
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	6959      	ldr	r1, [r3, #20]
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	895a      	ldrh	r2, [r3, #10]
 8004a46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	f004 f8d1 	bl	8008bf2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	461a      	mov	r2, r3
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	4413      	add	r3, r2
 8004a5e:	881b      	ldrh	r3, [r3, #0]
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a6a:	82bb      	strh	r3, [r7, #20]
 8004a6c:	8abb      	ldrh	r3, [r7, #20]
 8004a6e:	f083 0310 	eor.w	r3, r3, #16
 8004a72:	82bb      	strh	r3, [r7, #20]
 8004a74:	8abb      	ldrh	r3, [r7, #20]
 8004a76:	f083 0320 	eor.w	r3, r3, #32
 8004a7a:	82bb      	strh	r3, [r7, #20]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	461a      	mov	r2, r3
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	441a      	add	r2, r3
 8004a8a:	8abb      	ldrh	r3, [r7, #20]
 8004a8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3790      	adds	r7, #144	@ 0x90
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}

08004aaa <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004aaa:	b480      	push	{r7}
 8004aac:	b087      	sub	sp, #28
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	60f8      	str	r0, [r7, #12]
 8004ab2:	607b      	str	r3, [r7, #4]
 8004ab4:	460b      	mov	r3, r1
 8004ab6:	817b      	strh	r3, [r7, #10]
 8004ab8:	4613      	mov	r3, r2
 8004aba:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004abc:	897b      	ldrh	r3, [r7, #10]
 8004abe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d00b      	beq.n	8004ae0 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ac8:	897b      	ldrh	r3, [r7, #10]
 8004aca:	f003 0207 	and.w	r2, r3, #7
 8004ace:	4613      	mov	r3, r2
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	4413      	add	r3, r2
 8004ad4:	00db      	lsls	r3, r3, #3
 8004ad6:	3310      	adds	r3, #16
 8004ad8:	68fa      	ldr	r2, [r7, #12]
 8004ada:	4413      	add	r3, r2
 8004adc:	617b      	str	r3, [r7, #20]
 8004ade:	e009      	b.n	8004af4 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004ae0:	897a      	ldrh	r2, [r7, #10]
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	4413      	add	r3, r2
 8004ae8:	00db      	lsls	r3, r3, #3
 8004aea:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	4413      	add	r3, r2
 8004af2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004af4:	893b      	ldrh	r3, [r7, #8]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d107      	bne.n	8004b0a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	2200      	movs	r2, #0
 8004afe:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	b29a      	uxth	r2, r3
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	80da      	strh	r2, [r3, #6]
 8004b08:	e00b      	b.n	8004b22 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	b29a      	uxth	r2, r3
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	0c1b      	lsrs	r3, r3, #16
 8004b1c:	b29a      	uxth	r2, r3
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004b22:	2300      	movs	r3, #0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	371c      	adds	r7, #28
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bc80      	pop	{r7}
 8004b2c:	4770      	bx	lr
	...

08004b30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b086      	sub	sp, #24
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d101      	bne.n	8004b42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e272      	b.n	8005028 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0301 	and.w	r3, r3, #1
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	f000 8087 	beq.w	8004c5e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b50:	4b92      	ldr	r3, [pc, #584]	@ (8004d9c <HAL_RCC_OscConfig+0x26c>)
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	f003 030c 	and.w	r3, r3, #12
 8004b58:	2b04      	cmp	r3, #4
 8004b5a:	d00c      	beq.n	8004b76 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004b5c:	4b8f      	ldr	r3, [pc, #572]	@ (8004d9c <HAL_RCC_OscConfig+0x26c>)
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	f003 030c 	and.w	r3, r3, #12
 8004b64:	2b08      	cmp	r3, #8
 8004b66:	d112      	bne.n	8004b8e <HAL_RCC_OscConfig+0x5e>
 8004b68:	4b8c      	ldr	r3, [pc, #560]	@ (8004d9c <HAL_RCC_OscConfig+0x26c>)
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b74:	d10b      	bne.n	8004b8e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b76:	4b89      	ldr	r3, [pc, #548]	@ (8004d9c <HAL_RCC_OscConfig+0x26c>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d06c      	beq.n	8004c5c <HAL_RCC_OscConfig+0x12c>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d168      	bne.n	8004c5c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e24c      	b.n	8005028 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b96:	d106      	bne.n	8004ba6 <HAL_RCC_OscConfig+0x76>
 8004b98:	4b80      	ldr	r3, [pc, #512]	@ (8004d9c <HAL_RCC_OscConfig+0x26c>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a7f      	ldr	r2, [pc, #508]	@ (8004d9c <HAL_RCC_OscConfig+0x26c>)
 8004b9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ba2:	6013      	str	r3, [r2, #0]
 8004ba4:	e02e      	b.n	8004c04 <HAL_RCC_OscConfig+0xd4>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d10c      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x98>
 8004bae:	4b7b      	ldr	r3, [pc, #492]	@ (8004d9c <HAL_RCC_OscConfig+0x26c>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a7a      	ldr	r2, [pc, #488]	@ (8004d9c <HAL_RCC_OscConfig+0x26c>)
 8004bb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004bb8:	6013      	str	r3, [r2, #0]
 8004bba:	4b78      	ldr	r3, [pc, #480]	@ (8004d9c <HAL_RCC_OscConfig+0x26c>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a77      	ldr	r2, [pc, #476]	@ (8004d9c <HAL_RCC_OscConfig+0x26c>)
 8004bc0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004bc4:	6013      	str	r3, [r2, #0]
 8004bc6:	e01d      	b.n	8004c04 <HAL_RCC_OscConfig+0xd4>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004bd0:	d10c      	bne.n	8004bec <HAL_RCC_OscConfig+0xbc>
 8004bd2:	4b72      	ldr	r3, [pc, #456]	@ (8004d9c <HAL_RCC_OscConfig+0x26c>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a71      	ldr	r2, [pc, #452]	@ (8004d9c <HAL_RCC_OscConfig+0x26c>)
 8004bd8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004bdc:	6013      	str	r3, [r2, #0]
 8004bde:	4b6f      	ldr	r3, [pc, #444]	@ (8004d9c <HAL_RCC_OscConfig+0x26c>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a6e      	ldr	r2, [pc, #440]	@ (8004d9c <HAL_RCC_OscConfig+0x26c>)
 8004be4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004be8:	6013      	str	r3, [r2, #0]
 8004bea:	e00b      	b.n	8004c04 <HAL_RCC_OscConfig+0xd4>
 8004bec:	4b6b      	ldr	r3, [pc, #428]	@ (8004d9c <HAL_RCC_OscConfig+0x26c>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a6a      	ldr	r2, [pc, #424]	@ (8004d9c <HAL_RCC_OscConfig+0x26c>)
 8004bf2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004bf6:	6013      	str	r3, [r2, #0]
 8004bf8:	4b68      	ldr	r3, [pc, #416]	@ (8004d9c <HAL_RCC_OscConfig+0x26c>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a67      	ldr	r2, [pc, #412]	@ (8004d9c <HAL_RCC_OscConfig+0x26c>)
 8004bfe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c02:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d013      	beq.n	8004c34 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c0c:	f7fd fce4 	bl	80025d8 <HAL_GetTick>
 8004c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c12:	e008      	b.n	8004c26 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c14:	f7fd fce0 	bl	80025d8 <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	2b64      	cmp	r3, #100	@ 0x64
 8004c20:	d901      	bls.n	8004c26 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e200      	b.n	8005028 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c26:	4b5d      	ldr	r3, [pc, #372]	@ (8004d9c <HAL_RCC_OscConfig+0x26c>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d0f0      	beq.n	8004c14 <HAL_RCC_OscConfig+0xe4>
 8004c32:	e014      	b.n	8004c5e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c34:	f7fd fcd0 	bl	80025d8 <HAL_GetTick>
 8004c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c3a:	e008      	b.n	8004c4e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c3c:	f7fd fccc 	bl	80025d8 <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	2b64      	cmp	r3, #100	@ 0x64
 8004c48:	d901      	bls.n	8004c4e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e1ec      	b.n	8005028 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c4e:	4b53      	ldr	r3, [pc, #332]	@ (8004d9c <HAL_RCC_OscConfig+0x26c>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d1f0      	bne.n	8004c3c <HAL_RCC_OscConfig+0x10c>
 8004c5a:	e000      	b.n	8004c5e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0302 	and.w	r3, r3, #2
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d063      	beq.n	8004d32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c6a:	4b4c      	ldr	r3, [pc, #304]	@ (8004d9c <HAL_RCC_OscConfig+0x26c>)
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	f003 030c 	and.w	r3, r3, #12
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d00b      	beq.n	8004c8e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004c76:	4b49      	ldr	r3, [pc, #292]	@ (8004d9c <HAL_RCC_OscConfig+0x26c>)
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	f003 030c 	and.w	r3, r3, #12
 8004c7e:	2b08      	cmp	r3, #8
 8004c80:	d11c      	bne.n	8004cbc <HAL_RCC_OscConfig+0x18c>
 8004c82:	4b46      	ldr	r3, [pc, #280]	@ (8004d9c <HAL_RCC_OscConfig+0x26c>)
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d116      	bne.n	8004cbc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c8e:	4b43      	ldr	r3, [pc, #268]	@ (8004d9c <HAL_RCC_OscConfig+0x26c>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 0302 	and.w	r3, r3, #2
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d005      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x176>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d001      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e1c0      	b.n	8005028 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ca6:	4b3d      	ldr	r3, [pc, #244]	@ (8004d9c <HAL_RCC_OscConfig+0x26c>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	695b      	ldr	r3, [r3, #20]
 8004cb2:	00db      	lsls	r3, r3, #3
 8004cb4:	4939      	ldr	r1, [pc, #228]	@ (8004d9c <HAL_RCC_OscConfig+0x26c>)
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cba:	e03a      	b.n	8004d32 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d020      	beq.n	8004d06 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cc4:	4b36      	ldr	r3, [pc, #216]	@ (8004da0 <HAL_RCC_OscConfig+0x270>)
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cca:	f7fd fc85 	bl	80025d8 <HAL_GetTick>
 8004cce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cd0:	e008      	b.n	8004ce4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cd2:	f7fd fc81 	bl	80025d8 <HAL_GetTick>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d901      	bls.n	8004ce4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	e1a1      	b.n	8005028 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ce4:	4b2d      	ldr	r3, [pc, #180]	@ (8004d9c <HAL_RCC_OscConfig+0x26c>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0302 	and.w	r3, r3, #2
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d0f0      	beq.n	8004cd2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cf0:	4b2a      	ldr	r3, [pc, #168]	@ (8004d9c <HAL_RCC_OscConfig+0x26c>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	695b      	ldr	r3, [r3, #20]
 8004cfc:	00db      	lsls	r3, r3, #3
 8004cfe:	4927      	ldr	r1, [pc, #156]	@ (8004d9c <HAL_RCC_OscConfig+0x26c>)
 8004d00:	4313      	orrs	r3, r2
 8004d02:	600b      	str	r3, [r1, #0]
 8004d04:	e015      	b.n	8004d32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d06:	4b26      	ldr	r3, [pc, #152]	@ (8004da0 <HAL_RCC_OscConfig+0x270>)
 8004d08:	2200      	movs	r2, #0
 8004d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d0c:	f7fd fc64 	bl	80025d8 <HAL_GetTick>
 8004d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d12:	e008      	b.n	8004d26 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d14:	f7fd fc60 	bl	80025d8 <HAL_GetTick>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	d901      	bls.n	8004d26 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e180      	b.n	8005028 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d26:	4b1d      	ldr	r3, [pc, #116]	@ (8004d9c <HAL_RCC_OscConfig+0x26c>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 0302 	and.w	r3, r3, #2
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d1f0      	bne.n	8004d14 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 0308 	and.w	r3, r3, #8
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d03a      	beq.n	8004db4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	699b      	ldr	r3, [r3, #24]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d019      	beq.n	8004d7a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d46:	4b17      	ldr	r3, [pc, #92]	@ (8004da4 <HAL_RCC_OscConfig+0x274>)
 8004d48:	2201      	movs	r2, #1
 8004d4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d4c:	f7fd fc44 	bl	80025d8 <HAL_GetTick>
 8004d50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d52:	e008      	b.n	8004d66 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d54:	f7fd fc40 	bl	80025d8 <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	d901      	bls.n	8004d66 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e160      	b.n	8005028 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d66:	4b0d      	ldr	r3, [pc, #52]	@ (8004d9c <HAL_RCC_OscConfig+0x26c>)
 8004d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d6a:	f003 0302 	and.w	r3, r3, #2
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d0f0      	beq.n	8004d54 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004d72:	2001      	movs	r0, #1
 8004d74:	f000 face 	bl	8005314 <RCC_Delay>
 8004d78:	e01c      	b.n	8004db4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d7a:	4b0a      	ldr	r3, [pc, #40]	@ (8004da4 <HAL_RCC_OscConfig+0x274>)
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d80:	f7fd fc2a 	bl	80025d8 <HAL_GetTick>
 8004d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d86:	e00f      	b.n	8004da8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d88:	f7fd fc26 	bl	80025d8 <HAL_GetTick>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	2b02      	cmp	r3, #2
 8004d94:	d908      	bls.n	8004da8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	e146      	b.n	8005028 <HAL_RCC_OscConfig+0x4f8>
 8004d9a:	bf00      	nop
 8004d9c:	40021000 	.word	0x40021000
 8004da0:	42420000 	.word	0x42420000
 8004da4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004da8:	4b92      	ldr	r3, [pc, #584]	@ (8004ff4 <HAL_RCC_OscConfig+0x4c4>)
 8004daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dac:	f003 0302 	and.w	r3, r3, #2
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d1e9      	bne.n	8004d88 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0304 	and.w	r3, r3, #4
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	f000 80a6 	beq.w	8004f0e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dc6:	4b8b      	ldr	r3, [pc, #556]	@ (8004ff4 <HAL_RCC_OscConfig+0x4c4>)
 8004dc8:	69db      	ldr	r3, [r3, #28]
 8004dca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d10d      	bne.n	8004dee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dd2:	4b88      	ldr	r3, [pc, #544]	@ (8004ff4 <HAL_RCC_OscConfig+0x4c4>)
 8004dd4:	69db      	ldr	r3, [r3, #28]
 8004dd6:	4a87      	ldr	r2, [pc, #540]	@ (8004ff4 <HAL_RCC_OscConfig+0x4c4>)
 8004dd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ddc:	61d3      	str	r3, [r2, #28]
 8004dde:	4b85      	ldr	r3, [pc, #532]	@ (8004ff4 <HAL_RCC_OscConfig+0x4c4>)
 8004de0:	69db      	ldr	r3, [r3, #28]
 8004de2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004de6:	60bb      	str	r3, [r7, #8]
 8004de8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dea:	2301      	movs	r3, #1
 8004dec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dee:	4b82      	ldr	r3, [pc, #520]	@ (8004ff8 <HAL_RCC_OscConfig+0x4c8>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d118      	bne.n	8004e2c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004dfa:	4b7f      	ldr	r3, [pc, #508]	@ (8004ff8 <HAL_RCC_OscConfig+0x4c8>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a7e      	ldr	r2, [pc, #504]	@ (8004ff8 <HAL_RCC_OscConfig+0x4c8>)
 8004e00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e06:	f7fd fbe7 	bl	80025d8 <HAL_GetTick>
 8004e0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e0c:	e008      	b.n	8004e20 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e0e:	f7fd fbe3 	bl	80025d8 <HAL_GetTick>
 8004e12:	4602      	mov	r2, r0
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	2b64      	cmp	r3, #100	@ 0x64
 8004e1a:	d901      	bls.n	8004e20 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004e1c:	2303      	movs	r3, #3
 8004e1e:	e103      	b.n	8005028 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e20:	4b75      	ldr	r3, [pc, #468]	@ (8004ff8 <HAL_RCC_OscConfig+0x4c8>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d0f0      	beq.n	8004e0e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d106      	bne.n	8004e42 <HAL_RCC_OscConfig+0x312>
 8004e34:	4b6f      	ldr	r3, [pc, #444]	@ (8004ff4 <HAL_RCC_OscConfig+0x4c4>)
 8004e36:	6a1b      	ldr	r3, [r3, #32]
 8004e38:	4a6e      	ldr	r2, [pc, #440]	@ (8004ff4 <HAL_RCC_OscConfig+0x4c4>)
 8004e3a:	f043 0301 	orr.w	r3, r3, #1
 8004e3e:	6213      	str	r3, [r2, #32]
 8004e40:	e02d      	b.n	8004e9e <HAL_RCC_OscConfig+0x36e>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d10c      	bne.n	8004e64 <HAL_RCC_OscConfig+0x334>
 8004e4a:	4b6a      	ldr	r3, [pc, #424]	@ (8004ff4 <HAL_RCC_OscConfig+0x4c4>)
 8004e4c:	6a1b      	ldr	r3, [r3, #32]
 8004e4e:	4a69      	ldr	r2, [pc, #420]	@ (8004ff4 <HAL_RCC_OscConfig+0x4c4>)
 8004e50:	f023 0301 	bic.w	r3, r3, #1
 8004e54:	6213      	str	r3, [r2, #32]
 8004e56:	4b67      	ldr	r3, [pc, #412]	@ (8004ff4 <HAL_RCC_OscConfig+0x4c4>)
 8004e58:	6a1b      	ldr	r3, [r3, #32]
 8004e5a:	4a66      	ldr	r2, [pc, #408]	@ (8004ff4 <HAL_RCC_OscConfig+0x4c4>)
 8004e5c:	f023 0304 	bic.w	r3, r3, #4
 8004e60:	6213      	str	r3, [r2, #32]
 8004e62:	e01c      	b.n	8004e9e <HAL_RCC_OscConfig+0x36e>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	2b05      	cmp	r3, #5
 8004e6a:	d10c      	bne.n	8004e86 <HAL_RCC_OscConfig+0x356>
 8004e6c:	4b61      	ldr	r3, [pc, #388]	@ (8004ff4 <HAL_RCC_OscConfig+0x4c4>)
 8004e6e:	6a1b      	ldr	r3, [r3, #32]
 8004e70:	4a60      	ldr	r2, [pc, #384]	@ (8004ff4 <HAL_RCC_OscConfig+0x4c4>)
 8004e72:	f043 0304 	orr.w	r3, r3, #4
 8004e76:	6213      	str	r3, [r2, #32]
 8004e78:	4b5e      	ldr	r3, [pc, #376]	@ (8004ff4 <HAL_RCC_OscConfig+0x4c4>)
 8004e7a:	6a1b      	ldr	r3, [r3, #32]
 8004e7c:	4a5d      	ldr	r2, [pc, #372]	@ (8004ff4 <HAL_RCC_OscConfig+0x4c4>)
 8004e7e:	f043 0301 	orr.w	r3, r3, #1
 8004e82:	6213      	str	r3, [r2, #32]
 8004e84:	e00b      	b.n	8004e9e <HAL_RCC_OscConfig+0x36e>
 8004e86:	4b5b      	ldr	r3, [pc, #364]	@ (8004ff4 <HAL_RCC_OscConfig+0x4c4>)
 8004e88:	6a1b      	ldr	r3, [r3, #32]
 8004e8a:	4a5a      	ldr	r2, [pc, #360]	@ (8004ff4 <HAL_RCC_OscConfig+0x4c4>)
 8004e8c:	f023 0301 	bic.w	r3, r3, #1
 8004e90:	6213      	str	r3, [r2, #32]
 8004e92:	4b58      	ldr	r3, [pc, #352]	@ (8004ff4 <HAL_RCC_OscConfig+0x4c4>)
 8004e94:	6a1b      	ldr	r3, [r3, #32]
 8004e96:	4a57      	ldr	r2, [pc, #348]	@ (8004ff4 <HAL_RCC_OscConfig+0x4c4>)
 8004e98:	f023 0304 	bic.w	r3, r3, #4
 8004e9c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d015      	beq.n	8004ed2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ea6:	f7fd fb97 	bl	80025d8 <HAL_GetTick>
 8004eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eac:	e00a      	b.n	8004ec4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eae:	f7fd fb93 	bl	80025d8 <HAL_GetTick>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d901      	bls.n	8004ec4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	e0b1      	b.n	8005028 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ec4:	4b4b      	ldr	r3, [pc, #300]	@ (8004ff4 <HAL_RCC_OscConfig+0x4c4>)
 8004ec6:	6a1b      	ldr	r3, [r3, #32]
 8004ec8:	f003 0302 	and.w	r3, r3, #2
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d0ee      	beq.n	8004eae <HAL_RCC_OscConfig+0x37e>
 8004ed0:	e014      	b.n	8004efc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ed2:	f7fd fb81 	bl	80025d8 <HAL_GetTick>
 8004ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ed8:	e00a      	b.n	8004ef0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eda:	f7fd fb7d 	bl	80025d8 <HAL_GetTick>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d901      	bls.n	8004ef0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004eec:	2303      	movs	r3, #3
 8004eee:	e09b      	b.n	8005028 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ef0:	4b40      	ldr	r3, [pc, #256]	@ (8004ff4 <HAL_RCC_OscConfig+0x4c4>)
 8004ef2:	6a1b      	ldr	r3, [r3, #32]
 8004ef4:	f003 0302 	and.w	r3, r3, #2
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d1ee      	bne.n	8004eda <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004efc:	7dfb      	ldrb	r3, [r7, #23]
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d105      	bne.n	8004f0e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f02:	4b3c      	ldr	r3, [pc, #240]	@ (8004ff4 <HAL_RCC_OscConfig+0x4c4>)
 8004f04:	69db      	ldr	r3, [r3, #28]
 8004f06:	4a3b      	ldr	r2, [pc, #236]	@ (8004ff4 <HAL_RCC_OscConfig+0x4c4>)
 8004f08:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f0c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	69db      	ldr	r3, [r3, #28]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	f000 8087 	beq.w	8005026 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f18:	4b36      	ldr	r3, [pc, #216]	@ (8004ff4 <HAL_RCC_OscConfig+0x4c4>)
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	f003 030c 	and.w	r3, r3, #12
 8004f20:	2b08      	cmp	r3, #8
 8004f22:	d061      	beq.n	8004fe8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	69db      	ldr	r3, [r3, #28]
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	d146      	bne.n	8004fba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f2c:	4b33      	ldr	r3, [pc, #204]	@ (8004ffc <HAL_RCC_OscConfig+0x4cc>)
 8004f2e:	2200      	movs	r2, #0
 8004f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f32:	f7fd fb51 	bl	80025d8 <HAL_GetTick>
 8004f36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f38:	e008      	b.n	8004f4c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f3a:	f7fd fb4d 	bl	80025d8 <HAL_GetTick>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	d901      	bls.n	8004f4c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004f48:	2303      	movs	r3, #3
 8004f4a:	e06d      	b.n	8005028 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f4c:	4b29      	ldr	r3, [pc, #164]	@ (8004ff4 <HAL_RCC_OscConfig+0x4c4>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d1f0      	bne.n	8004f3a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a1b      	ldr	r3, [r3, #32]
 8004f5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f60:	d108      	bne.n	8004f74 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004f62:	4b24      	ldr	r3, [pc, #144]	@ (8004ff4 <HAL_RCC_OscConfig+0x4c4>)
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	4921      	ldr	r1, [pc, #132]	@ (8004ff4 <HAL_RCC_OscConfig+0x4c4>)
 8004f70:	4313      	orrs	r3, r2
 8004f72:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f74:	4b1f      	ldr	r3, [pc, #124]	@ (8004ff4 <HAL_RCC_OscConfig+0x4c4>)
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a19      	ldr	r1, [r3, #32]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f84:	430b      	orrs	r3, r1
 8004f86:	491b      	ldr	r1, [pc, #108]	@ (8004ff4 <HAL_RCC_OscConfig+0x4c4>)
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f8c:	4b1b      	ldr	r3, [pc, #108]	@ (8004ffc <HAL_RCC_OscConfig+0x4cc>)
 8004f8e:	2201      	movs	r2, #1
 8004f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f92:	f7fd fb21 	bl	80025d8 <HAL_GetTick>
 8004f96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f98:	e008      	b.n	8004fac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f9a:	f7fd fb1d 	bl	80025d8 <HAL_GetTick>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	1ad3      	subs	r3, r2, r3
 8004fa4:	2b02      	cmp	r3, #2
 8004fa6:	d901      	bls.n	8004fac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	e03d      	b.n	8005028 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004fac:	4b11      	ldr	r3, [pc, #68]	@ (8004ff4 <HAL_RCC_OscConfig+0x4c4>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d0f0      	beq.n	8004f9a <HAL_RCC_OscConfig+0x46a>
 8004fb8:	e035      	b.n	8005026 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fba:	4b10      	ldr	r3, [pc, #64]	@ (8004ffc <HAL_RCC_OscConfig+0x4cc>)
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fc0:	f7fd fb0a 	bl	80025d8 <HAL_GetTick>
 8004fc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fc6:	e008      	b.n	8004fda <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fc8:	f7fd fb06 	bl	80025d8 <HAL_GetTick>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d901      	bls.n	8004fda <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e026      	b.n	8005028 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fda:	4b06      	ldr	r3, [pc, #24]	@ (8004ff4 <HAL_RCC_OscConfig+0x4c4>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d1f0      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x498>
 8004fe6:	e01e      	b.n	8005026 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	69db      	ldr	r3, [r3, #28]
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d107      	bne.n	8005000 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e019      	b.n	8005028 <HAL_RCC_OscConfig+0x4f8>
 8004ff4:	40021000 	.word	0x40021000
 8004ff8:	40007000 	.word	0x40007000
 8004ffc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005000:	4b0b      	ldr	r3, [pc, #44]	@ (8005030 <HAL_RCC_OscConfig+0x500>)
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a1b      	ldr	r3, [r3, #32]
 8005010:	429a      	cmp	r2, r3
 8005012:	d106      	bne.n	8005022 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800501e:	429a      	cmp	r2, r3
 8005020:	d001      	beq.n	8005026 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e000      	b.n	8005028 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005026:	2300      	movs	r3, #0
}
 8005028:	4618      	mov	r0, r3
 800502a:	3718      	adds	r7, #24
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}
 8005030:	40021000 	.word	0x40021000

08005034 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d101      	bne.n	8005048 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e0d0      	b.n	80051ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005048:	4b6a      	ldr	r3, [pc, #424]	@ (80051f4 <HAL_RCC_ClockConfig+0x1c0>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0307 	and.w	r3, r3, #7
 8005050:	683a      	ldr	r2, [r7, #0]
 8005052:	429a      	cmp	r2, r3
 8005054:	d910      	bls.n	8005078 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005056:	4b67      	ldr	r3, [pc, #412]	@ (80051f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f023 0207 	bic.w	r2, r3, #7
 800505e:	4965      	ldr	r1, [pc, #404]	@ (80051f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	4313      	orrs	r3, r2
 8005064:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005066:	4b63      	ldr	r3, [pc, #396]	@ (80051f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0307 	and.w	r3, r3, #7
 800506e:	683a      	ldr	r2, [r7, #0]
 8005070:	429a      	cmp	r2, r3
 8005072:	d001      	beq.n	8005078 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e0b8      	b.n	80051ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 0302 	and.w	r3, r3, #2
 8005080:	2b00      	cmp	r3, #0
 8005082:	d020      	beq.n	80050c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0304 	and.w	r3, r3, #4
 800508c:	2b00      	cmp	r3, #0
 800508e:	d005      	beq.n	800509c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005090:	4b59      	ldr	r3, [pc, #356]	@ (80051f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	4a58      	ldr	r2, [pc, #352]	@ (80051f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005096:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800509a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0308 	and.w	r3, r3, #8
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d005      	beq.n	80050b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050a8:	4b53      	ldr	r3, [pc, #332]	@ (80051f8 <HAL_RCC_ClockConfig+0x1c4>)
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	4a52      	ldr	r2, [pc, #328]	@ (80051f8 <HAL_RCC_ClockConfig+0x1c4>)
 80050ae:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80050b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050b4:	4b50      	ldr	r3, [pc, #320]	@ (80051f8 <HAL_RCC_ClockConfig+0x1c4>)
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	494d      	ldr	r1, [pc, #308]	@ (80051f8 <HAL_RCC_ClockConfig+0x1c4>)
 80050c2:	4313      	orrs	r3, r2
 80050c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 0301 	and.w	r3, r3, #1
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d040      	beq.n	8005154 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d107      	bne.n	80050ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050da:	4b47      	ldr	r3, [pc, #284]	@ (80051f8 <HAL_RCC_ClockConfig+0x1c4>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d115      	bne.n	8005112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e07f      	b.n	80051ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	2b02      	cmp	r3, #2
 80050f0:	d107      	bne.n	8005102 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050f2:	4b41      	ldr	r3, [pc, #260]	@ (80051f8 <HAL_RCC_ClockConfig+0x1c4>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d109      	bne.n	8005112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e073      	b.n	80051ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005102:	4b3d      	ldr	r3, [pc, #244]	@ (80051f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 0302 	and.w	r3, r3, #2
 800510a:	2b00      	cmp	r3, #0
 800510c:	d101      	bne.n	8005112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e06b      	b.n	80051ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005112:	4b39      	ldr	r3, [pc, #228]	@ (80051f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	f023 0203 	bic.w	r2, r3, #3
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	4936      	ldr	r1, [pc, #216]	@ (80051f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005120:	4313      	orrs	r3, r2
 8005122:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005124:	f7fd fa58 	bl	80025d8 <HAL_GetTick>
 8005128:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800512a:	e00a      	b.n	8005142 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800512c:	f7fd fa54 	bl	80025d8 <HAL_GetTick>
 8005130:	4602      	mov	r2, r0
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	f241 3288 	movw	r2, #5000	@ 0x1388
 800513a:	4293      	cmp	r3, r2
 800513c:	d901      	bls.n	8005142 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	e053      	b.n	80051ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005142:	4b2d      	ldr	r3, [pc, #180]	@ (80051f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	f003 020c 	and.w	r2, r3, #12
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	429a      	cmp	r2, r3
 8005152:	d1eb      	bne.n	800512c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005154:	4b27      	ldr	r3, [pc, #156]	@ (80051f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0307 	and.w	r3, r3, #7
 800515c:	683a      	ldr	r2, [r7, #0]
 800515e:	429a      	cmp	r2, r3
 8005160:	d210      	bcs.n	8005184 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005162:	4b24      	ldr	r3, [pc, #144]	@ (80051f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f023 0207 	bic.w	r2, r3, #7
 800516a:	4922      	ldr	r1, [pc, #136]	@ (80051f4 <HAL_RCC_ClockConfig+0x1c0>)
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	4313      	orrs	r3, r2
 8005170:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005172:	4b20      	ldr	r3, [pc, #128]	@ (80051f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 0307 	and.w	r3, r3, #7
 800517a:	683a      	ldr	r2, [r7, #0]
 800517c:	429a      	cmp	r2, r3
 800517e:	d001      	beq.n	8005184 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e032      	b.n	80051ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 0304 	and.w	r3, r3, #4
 800518c:	2b00      	cmp	r3, #0
 800518e:	d008      	beq.n	80051a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005190:	4b19      	ldr	r3, [pc, #100]	@ (80051f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	4916      	ldr	r1, [pc, #88]	@ (80051f8 <HAL_RCC_ClockConfig+0x1c4>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0308 	and.w	r3, r3, #8
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d009      	beq.n	80051c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80051ae:	4b12      	ldr	r3, [pc, #72]	@ (80051f8 <HAL_RCC_ClockConfig+0x1c4>)
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	00db      	lsls	r3, r3, #3
 80051bc:	490e      	ldr	r1, [pc, #56]	@ (80051f8 <HAL_RCC_ClockConfig+0x1c4>)
 80051be:	4313      	orrs	r3, r2
 80051c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80051c2:	f000 f821 	bl	8005208 <HAL_RCC_GetSysClockFreq>
 80051c6:	4602      	mov	r2, r0
 80051c8:	4b0b      	ldr	r3, [pc, #44]	@ (80051f8 <HAL_RCC_ClockConfig+0x1c4>)
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	091b      	lsrs	r3, r3, #4
 80051ce:	f003 030f 	and.w	r3, r3, #15
 80051d2:	490a      	ldr	r1, [pc, #40]	@ (80051fc <HAL_RCC_ClockConfig+0x1c8>)
 80051d4:	5ccb      	ldrb	r3, [r1, r3]
 80051d6:	fa22 f303 	lsr.w	r3, r2, r3
 80051da:	4a09      	ldr	r2, [pc, #36]	@ (8005200 <HAL_RCC_ClockConfig+0x1cc>)
 80051dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80051de:	4b09      	ldr	r3, [pc, #36]	@ (8005204 <HAL_RCC_ClockConfig+0x1d0>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4618      	mov	r0, r3
 80051e4:	f7fd f9b6 	bl	8002554 <HAL_InitTick>

  return HAL_OK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3710      	adds	r7, #16
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	bf00      	nop
 80051f4:	40022000 	.word	0x40022000
 80051f8:	40021000 	.word	0x40021000
 80051fc:	0800dc7c 	.word	0x0800dc7c
 8005200:	20000004 	.word	0x20000004
 8005204:	20000008 	.word	0x20000008

08005208 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005208:	b480      	push	{r7}
 800520a:	b087      	sub	sp, #28
 800520c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800520e:	2300      	movs	r3, #0
 8005210:	60fb      	str	r3, [r7, #12]
 8005212:	2300      	movs	r3, #0
 8005214:	60bb      	str	r3, [r7, #8]
 8005216:	2300      	movs	r3, #0
 8005218:	617b      	str	r3, [r7, #20]
 800521a:	2300      	movs	r3, #0
 800521c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800521e:	2300      	movs	r3, #0
 8005220:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005222:	4b1e      	ldr	r3, [pc, #120]	@ (800529c <HAL_RCC_GetSysClockFreq+0x94>)
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f003 030c 	and.w	r3, r3, #12
 800522e:	2b04      	cmp	r3, #4
 8005230:	d002      	beq.n	8005238 <HAL_RCC_GetSysClockFreq+0x30>
 8005232:	2b08      	cmp	r3, #8
 8005234:	d003      	beq.n	800523e <HAL_RCC_GetSysClockFreq+0x36>
 8005236:	e027      	b.n	8005288 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005238:	4b19      	ldr	r3, [pc, #100]	@ (80052a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800523a:	613b      	str	r3, [r7, #16]
      break;
 800523c:	e027      	b.n	800528e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	0c9b      	lsrs	r3, r3, #18
 8005242:	f003 030f 	and.w	r3, r3, #15
 8005246:	4a17      	ldr	r2, [pc, #92]	@ (80052a4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005248:	5cd3      	ldrb	r3, [r2, r3]
 800524a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005252:	2b00      	cmp	r3, #0
 8005254:	d010      	beq.n	8005278 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005256:	4b11      	ldr	r3, [pc, #68]	@ (800529c <HAL_RCC_GetSysClockFreq+0x94>)
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	0c5b      	lsrs	r3, r3, #17
 800525c:	f003 0301 	and.w	r3, r3, #1
 8005260:	4a11      	ldr	r2, [pc, #68]	@ (80052a8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005262:	5cd3      	ldrb	r3, [r2, r3]
 8005264:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a0d      	ldr	r2, [pc, #52]	@ (80052a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800526a:	fb03 f202 	mul.w	r2, r3, r2
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	fbb2 f3f3 	udiv	r3, r2, r3
 8005274:	617b      	str	r3, [r7, #20]
 8005276:	e004      	b.n	8005282 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4a0c      	ldr	r2, [pc, #48]	@ (80052ac <HAL_RCC_GetSysClockFreq+0xa4>)
 800527c:	fb02 f303 	mul.w	r3, r2, r3
 8005280:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	613b      	str	r3, [r7, #16]
      break;
 8005286:	e002      	b.n	800528e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005288:	4b05      	ldr	r3, [pc, #20]	@ (80052a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800528a:	613b      	str	r3, [r7, #16]
      break;
 800528c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800528e:	693b      	ldr	r3, [r7, #16]
}
 8005290:	4618      	mov	r0, r3
 8005292:	371c      	adds	r7, #28
 8005294:	46bd      	mov	sp, r7
 8005296:	bc80      	pop	{r7}
 8005298:	4770      	bx	lr
 800529a:	bf00      	nop
 800529c:	40021000 	.word	0x40021000
 80052a0:	007a1200 	.word	0x007a1200
 80052a4:	0800dc94 	.word	0x0800dc94
 80052a8:	0800dca4 	.word	0x0800dca4
 80052ac:	003d0900 	.word	0x003d0900

080052b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052b0:	b480      	push	{r7}
 80052b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052b4:	4b02      	ldr	r3, [pc, #8]	@ (80052c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80052b6:	681b      	ldr	r3, [r3, #0]
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bc80      	pop	{r7}
 80052be:	4770      	bx	lr
 80052c0:	20000004 	.word	0x20000004

080052c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80052c8:	f7ff fff2 	bl	80052b0 <HAL_RCC_GetHCLKFreq>
 80052cc:	4602      	mov	r2, r0
 80052ce:	4b05      	ldr	r3, [pc, #20]	@ (80052e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	0a1b      	lsrs	r3, r3, #8
 80052d4:	f003 0307 	and.w	r3, r3, #7
 80052d8:	4903      	ldr	r1, [pc, #12]	@ (80052e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052da:	5ccb      	ldrb	r3, [r1, r3]
 80052dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	40021000 	.word	0x40021000
 80052e8:	0800dc8c 	.word	0x0800dc8c

080052ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80052f0:	f7ff ffde 	bl	80052b0 <HAL_RCC_GetHCLKFreq>
 80052f4:	4602      	mov	r2, r0
 80052f6:	4b05      	ldr	r3, [pc, #20]	@ (800530c <HAL_RCC_GetPCLK2Freq+0x20>)
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	0adb      	lsrs	r3, r3, #11
 80052fc:	f003 0307 	and.w	r3, r3, #7
 8005300:	4903      	ldr	r1, [pc, #12]	@ (8005310 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005302:	5ccb      	ldrb	r3, [r1, r3]
 8005304:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005308:	4618      	mov	r0, r3
 800530a:	bd80      	pop	{r7, pc}
 800530c:	40021000 	.word	0x40021000
 8005310:	0800dc8c 	.word	0x0800dc8c

08005314 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005314:	b480      	push	{r7}
 8005316:	b085      	sub	sp, #20
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800531c:	4b0a      	ldr	r3, [pc, #40]	@ (8005348 <RCC_Delay+0x34>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a0a      	ldr	r2, [pc, #40]	@ (800534c <RCC_Delay+0x38>)
 8005322:	fba2 2303 	umull	r2, r3, r2, r3
 8005326:	0a5b      	lsrs	r3, r3, #9
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	fb02 f303 	mul.w	r3, r2, r3
 800532e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005330:	bf00      	nop
  }
  while (Delay --);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	1e5a      	subs	r2, r3, #1
 8005336:	60fa      	str	r2, [r7, #12]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d1f9      	bne.n	8005330 <RCC_Delay+0x1c>
}
 800533c:	bf00      	nop
 800533e:	bf00      	nop
 8005340:	3714      	adds	r7, #20
 8005342:	46bd      	mov	sp, r7
 8005344:	bc80      	pop	{r7}
 8005346:	4770      	bx	lr
 8005348:	20000004 	.word	0x20000004
 800534c:	10624dd3 	.word	0x10624dd3

08005350 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b086      	sub	sp, #24
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005358:	2300      	movs	r3, #0
 800535a:	613b      	str	r3, [r7, #16]
 800535c:	2300      	movs	r3, #0
 800535e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 0301 	and.w	r3, r3, #1
 8005368:	2b00      	cmp	r3, #0
 800536a:	d07d      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800536c:	2300      	movs	r3, #0
 800536e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005370:	4b4f      	ldr	r3, [pc, #316]	@ (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005372:	69db      	ldr	r3, [r3, #28]
 8005374:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005378:	2b00      	cmp	r3, #0
 800537a:	d10d      	bne.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800537c:	4b4c      	ldr	r3, [pc, #304]	@ (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800537e:	69db      	ldr	r3, [r3, #28]
 8005380:	4a4b      	ldr	r2, [pc, #300]	@ (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005382:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005386:	61d3      	str	r3, [r2, #28]
 8005388:	4b49      	ldr	r3, [pc, #292]	@ (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800538a:	69db      	ldr	r3, [r3, #28]
 800538c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005390:	60bb      	str	r3, [r7, #8]
 8005392:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005394:	2301      	movs	r3, #1
 8005396:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005398:	4b46      	ldr	r3, [pc, #280]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d118      	bne.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80053a4:	4b43      	ldr	r3, [pc, #268]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a42      	ldr	r2, [pc, #264]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80053aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053b0:	f7fd f912 	bl	80025d8 <HAL_GetTick>
 80053b4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053b6:	e008      	b.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053b8:	f7fd f90e 	bl	80025d8 <HAL_GetTick>
 80053bc:	4602      	mov	r2, r0
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	2b64      	cmp	r3, #100	@ 0x64
 80053c4:	d901      	bls.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80053c6:	2303      	movs	r3, #3
 80053c8:	e06d      	b.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053ca:	4b3a      	ldr	r3, [pc, #232]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d0f0      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80053d6:	4b36      	ldr	r3, [pc, #216]	@ (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053d8:	6a1b      	ldr	r3, [r3, #32]
 80053da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053de:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d02e      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053ee:	68fa      	ldr	r2, [r7, #12]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d027      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80053f4:	4b2e      	ldr	r3, [pc, #184]	@ (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053f6:	6a1b      	ldr	r3, [r3, #32]
 80053f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053fc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80053fe:	4b2e      	ldr	r3, [pc, #184]	@ (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005400:	2201      	movs	r2, #1
 8005402:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005404:	4b2c      	ldr	r3, [pc, #176]	@ (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005406:	2200      	movs	r2, #0
 8005408:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800540a:	4a29      	ldr	r2, [pc, #164]	@ (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f003 0301 	and.w	r3, r3, #1
 8005416:	2b00      	cmp	r3, #0
 8005418:	d014      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800541a:	f7fd f8dd 	bl	80025d8 <HAL_GetTick>
 800541e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005420:	e00a      	b.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005422:	f7fd f8d9 	bl	80025d8 <HAL_GetTick>
 8005426:	4602      	mov	r2, r0
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	1ad3      	subs	r3, r2, r3
 800542c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005430:	4293      	cmp	r3, r2
 8005432:	d901      	bls.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005434:	2303      	movs	r3, #3
 8005436:	e036      	b.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005438:	4b1d      	ldr	r3, [pc, #116]	@ (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800543a:	6a1b      	ldr	r3, [r3, #32]
 800543c:	f003 0302 	and.w	r3, r3, #2
 8005440:	2b00      	cmp	r3, #0
 8005442:	d0ee      	beq.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005444:	4b1a      	ldr	r3, [pc, #104]	@ (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005446:	6a1b      	ldr	r3, [r3, #32]
 8005448:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	4917      	ldr	r1, [pc, #92]	@ (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005452:	4313      	orrs	r3, r2
 8005454:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005456:	7dfb      	ldrb	r3, [r7, #23]
 8005458:	2b01      	cmp	r3, #1
 800545a:	d105      	bne.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800545c:	4b14      	ldr	r3, [pc, #80]	@ (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800545e:	69db      	ldr	r3, [r3, #28]
 8005460:	4a13      	ldr	r2, [pc, #76]	@ (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005462:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005466:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0302 	and.w	r3, r3, #2
 8005470:	2b00      	cmp	r3, #0
 8005472:	d008      	beq.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005474:	4b0e      	ldr	r3, [pc, #56]	@ (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	490b      	ldr	r1, [pc, #44]	@ (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005482:	4313      	orrs	r3, r2
 8005484:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 0310 	and.w	r3, r3, #16
 800548e:	2b00      	cmp	r3, #0
 8005490:	d008      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005492:	4b07      	ldr	r3, [pc, #28]	@ (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	4904      	ldr	r1, [pc, #16]	@ (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054a0:	4313      	orrs	r3, r2
 80054a2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3718      	adds	r7, #24
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	40021000 	.word	0x40021000
 80054b4:	40007000 	.word	0x40007000
 80054b8:	42420440 	.word	0x42420440

080054bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b082      	sub	sp, #8
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d101      	bne.n	80054ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	e042      	b.n	8005554 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d106      	bne.n	80054e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f7fc ff12 	bl	800230c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2224      	movs	r2, #36	@ 0x24
 80054ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	68da      	ldr	r2, [r3, #12]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80054fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f000 ffe7 	bl	80064d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	691a      	ldr	r2, [r3, #16]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005514:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	695a      	ldr	r2, [r3, #20]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005524:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	68da      	ldr	r2, [r3, #12]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005534:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2220      	movs	r2, #32
 8005540:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2220      	movs	r2, #32
 8005548:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005552:	2300      	movs	r3, #0
}
 8005554:	4618      	mov	r0, r3
 8005556:	3708      	adds	r7, #8
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}

0800555c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b08a      	sub	sp, #40	@ 0x28
 8005560:	af02      	add	r7, sp, #8
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	60b9      	str	r1, [r7, #8]
 8005566:	603b      	str	r3, [r7, #0]
 8005568:	4613      	mov	r3, r2
 800556a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800556c:	2300      	movs	r3, #0
 800556e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005576:	b2db      	uxtb	r3, r3
 8005578:	2b20      	cmp	r3, #32
 800557a:	d175      	bne.n	8005668 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d002      	beq.n	8005588 <HAL_UART_Transmit+0x2c>
 8005582:	88fb      	ldrh	r3, [r7, #6]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d101      	bne.n	800558c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e06e      	b.n	800566a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2200      	movs	r2, #0
 8005590:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2221      	movs	r2, #33	@ 0x21
 8005596:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800559a:	f7fd f81d 	bl	80025d8 <HAL_GetTick>
 800559e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	88fa      	ldrh	r2, [r7, #6]
 80055a4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	88fa      	ldrh	r2, [r7, #6]
 80055aa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055b4:	d108      	bne.n	80055c8 <HAL_UART_Transmit+0x6c>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d104      	bne.n	80055c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80055be:	2300      	movs	r3, #0
 80055c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	61bb      	str	r3, [r7, #24]
 80055c6:	e003      	b.n	80055d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80055cc:	2300      	movs	r3, #0
 80055ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80055d0:	e02e      	b.n	8005630 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	9300      	str	r3, [sp, #0]
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	2200      	movs	r2, #0
 80055da:	2180      	movs	r1, #128	@ 0x80
 80055dc:	68f8      	ldr	r0, [r7, #12]
 80055de:	f000 fcc4 	bl	8005f6a <UART_WaitOnFlagUntilTimeout>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d005      	beq.n	80055f4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2220      	movs	r2, #32
 80055ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80055f0:	2303      	movs	r3, #3
 80055f2:	e03a      	b.n	800566a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d10b      	bne.n	8005612 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	881b      	ldrh	r3, [r3, #0]
 80055fe:	461a      	mov	r2, r3
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005608:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800560a:	69bb      	ldr	r3, [r7, #24]
 800560c:	3302      	adds	r3, #2
 800560e:	61bb      	str	r3, [r7, #24]
 8005610:	e007      	b.n	8005622 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	781a      	ldrb	r2, [r3, #0]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	3301      	adds	r3, #1
 8005620:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005626:	b29b      	uxth	r3, r3
 8005628:	3b01      	subs	r3, #1
 800562a:	b29a      	uxth	r2, r3
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005634:	b29b      	uxth	r3, r3
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1cb      	bne.n	80055d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	9300      	str	r3, [sp, #0]
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	2200      	movs	r2, #0
 8005642:	2140      	movs	r1, #64	@ 0x40
 8005644:	68f8      	ldr	r0, [r7, #12]
 8005646:	f000 fc90 	bl	8005f6a <UART_WaitOnFlagUntilTimeout>
 800564a:	4603      	mov	r3, r0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d005      	beq.n	800565c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2220      	movs	r2, #32
 8005654:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005658:	2303      	movs	r3, #3
 800565a:	e006      	b.n	800566a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2220      	movs	r2, #32
 8005660:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005664:	2300      	movs	r3, #0
 8005666:	e000      	b.n	800566a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005668:	2302      	movs	r3, #2
  }
}
 800566a:	4618      	mov	r0, r3
 800566c:	3720      	adds	r7, #32
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}

08005672 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005672:	b580      	push	{r7, lr}
 8005674:	b08a      	sub	sp, #40	@ 0x28
 8005676:	af02      	add	r7, sp, #8
 8005678:	60f8      	str	r0, [r7, #12]
 800567a:	60b9      	str	r1, [r7, #8]
 800567c:	603b      	str	r3, [r7, #0]
 800567e:	4613      	mov	r3, r2
 8005680:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005682:	2300      	movs	r3, #0
 8005684:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800568c:	b2db      	uxtb	r3, r3
 800568e:	2b20      	cmp	r3, #32
 8005690:	f040 8081 	bne.w	8005796 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d002      	beq.n	80056a0 <HAL_UART_Receive+0x2e>
 800569a:	88fb      	ldrh	r3, [r7, #6]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d101      	bne.n	80056a4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	e079      	b.n	8005798 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2200      	movs	r2, #0
 80056a8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2222      	movs	r2, #34	@ 0x22
 80056ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2200      	movs	r2, #0
 80056b6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056b8:	f7fc ff8e 	bl	80025d8 <HAL_GetTick>
 80056bc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	88fa      	ldrh	r2, [r7, #6]
 80056c2:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	88fa      	ldrh	r2, [r7, #6]
 80056c8:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056d2:	d108      	bne.n	80056e6 <HAL_UART_Receive+0x74>
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d104      	bne.n	80056e6 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80056dc:	2300      	movs	r3, #0
 80056de:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	61bb      	str	r3, [r7, #24]
 80056e4:	e003      	b.n	80056ee <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056ea:	2300      	movs	r3, #0
 80056ec:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80056ee:	e047      	b.n	8005780 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	9300      	str	r3, [sp, #0]
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	2200      	movs	r2, #0
 80056f8:	2120      	movs	r1, #32
 80056fa:	68f8      	ldr	r0, [r7, #12]
 80056fc:	f000 fc35 	bl	8005f6a <UART_WaitOnFlagUntilTimeout>
 8005700:	4603      	mov	r3, r0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d005      	beq.n	8005712 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2220      	movs	r2, #32
 800570a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e042      	b.n	8005798 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d10c      	bne.n	8005732 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	b29b      	uxth	r3, r3
 8005720:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005724:	b29a      	uxth	r2, r3
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	3302      	adds	r3, #2
 800572e:	61bb      	str	r3, [r7, #24]
 8005730:	e01f      	b.n	8005772 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800573a:	d007      	beq.n	800574c <HAL_UART_Receive+0xda>
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d10a      	bne.n	800575a <HAL_UART_Receive+0xe8>
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	691b      	ldr	r3, [r3, #16]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d106      	bne.n	800575a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	b2da      	uxtb	r2, r3
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	701a      	strb	r2, [r3, #0]
 8005758:	e008      	b.n	800576c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	b2db      	uxtb	r3, r3
 8005762:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005766:	b2da      	uxtb	r2, r3
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	3301      	adds	r3, #1
 8005770:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005776:	b29b      	uxth	r3, r3
 8005778:	3b01      	subs	r3, #1
 800577a:	b29a      	uxth	r2, r3
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005784:	b29b      	uxth	r3, r3
 8005786:	2b00      	cmp	r3, #0
 8005788:	d1b2      	bne.n	80056f0 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2220      	movs	r2, #32
 800578e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8005792:	2300      	movs	r3, #0
 8005794:	e000      	b.n	8005798 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005796:	2302      	movs	r3, #2
  }
}
 8005798:	4618      	mov	r0, r3
 800579a:	3720      	adds	r7, #32
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}

080057a0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b084      	sub	sp, #16
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	60b9      	str	r1, [r7, #8]
 80057aa:	4613      	mov	r3, r2
 80057ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	2b20      	cmp	r3, #32
 80057b8:	d112      	bne.n	80057e0 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d002      	beq.n	80057c6 <HAL_UART_Receive_DMA+0x26>
 80057c0:	88fb      	ldrh	r3, [r7, #6]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d101      	bne.n	80057ca <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e00b      	b.n	80057e2 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2200      	movs	r2, #0
 80057ce:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80057d0:	88fb      	ldrh	r3, [r7, #6]
 80057d2:	461a      	mov	r2, r3
 80057d4:	68b9      	ldr	r1, [r7, #8]
 80057d6:	68f8      	ldr	r0, [r7, #12]
 80057d8:	f000 fc20 	bl	800601c <UART_Start_Receive_DMA>
 80057dc:	4603      	mov	r3, r0
 80057de:	e000      	b.n	80057e2 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80057e0:	2302      	movs	r3, #2
  }
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3710      	adds	r7, #16
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}
	...

080057ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b0ba      	sub	sp, #232	@ 0xe8
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	695b      	ldr	r3, [r3, #20]
 800580e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005812:	2300      	movs	r3, #0
 8005814:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005818:	2300      	movs	r3, #0
 800581a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800581e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005822:	f003 030f 	and.w	r3, r3, #15
 8005826:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800582a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800582e:	2b00      	cmp	r3, #0
 8005830:	d10f      	bne.n	8005852 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005836:	f003 0320 	and.w	r3, r3, #32
 800583a:	2b00      	cmp	r3, #0
 800583c:	d009      	beq.n	8005852 <HAL_UART_IRQHandler+0x66>
 800583e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005842:	f003 0320 	and.w	r3, r3, #32
 8005846:	2b00      	cmp	r3, #0
 8005848:	d003      	beq.n	8005852 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 fd84 	bl	8006358 <UART_Receive_IT>
      return;
 8005850:	e25b      	b.n	8005d0a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005852:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005856:	2b00      	cmp	r3, #0
 8005858:	f000 80de 	beq.w	8005a18 <HAL_UART_IRQHandler+0x22c>
 800585c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005860:	f003 0301 	and.w	r3, r3, #1
 8005864:	2b00      	cmp	r3, #0
 8005866:	d106      	bne.n	8005876 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800586c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005870:	2b00      	cmp	r3, #0
 8005872:	f000 80d1 	beq.w	8005a18 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800587a:	f003 0301 	and.w	r3, r3, #1
 800587e:	2b00      	cmp	r3, #0
 8005880:	d00b      	beq.n	800589a <HAL_UART_IRQHandler+0xae>
 8005882:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005886:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800588a:	2b00      	cmp	r3, #0
 800588c:	d005      	beq.n	800589a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005892:	f043 0201 	orr.w	r2, r3, #1
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800589a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800589e:	f003 0304 	and.w	r3, r3, #4
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d00b      	beq.n	80058be <HAL_UART_IRQHandler+0xd2>
 80058a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058aa:	f003 0301 	and.w	r3, r3, #1
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d005      	beq.n	80058be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058b6:	f043 0202 	orr.w	r2, r3, #2
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80058be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058c2:	f003 0302 	and.w	r3, r3, #2
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d00b      	beq.n	80058e2 <HAL_UART_IRQHandler+0xf6>
 80058ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058ce:	f003 0301 	and.w	r3, r3, #1
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d005      	beq.n	80058e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058da:	f043 0204 	orr.w	r2, r3, #4
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80058e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058e6:	f003 0308 	and.w	r3, r3, #8
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d011      	beq.n	8005912 <HAL_UART_IRQHandler+0x126>
 80058ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058f2:	f003 0320 	and.w	r3, r3, #32
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d105      	bne.n	8005906 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80058fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058fe:	f003 0301 	and.w	r3, r3, #1
 8005902:	2b00      	cmp	r3, #0
 8005904:	d005      	beq.n	8005912 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800590a:	f043 0208 	orr.w	r2, r3, #8
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005916:	2b00      	cmp	r3, #0
 8005918:	f000 81f2 	beq.w	8005d00 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800591c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005920:	f003 0320 	and.w	r3, r3, #32
 8005924:	2b00      	cmp	r3, #0
 8005926:	d008      	beq.n	800593a <HAL_UART_IRQHandler+0x14e>
 8005928:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800592c:	f003 0320 	and.w	r3, r3, #32
 8005930:	2b00      	cmp	r3, #0
 8005932:	d002      	beq.n	800593a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f000 fd0f 	bl	8006358 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	695b      	ldr	r3, [r3, #20]
 8005940:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005944:	2b00      	cmp	r3, #0
 8005946:	bf14      	ite	ne
 8005948:	2301      	movne	r3, #1
 800594a:	2300      	moveq	r3, #0
 800594c:	b2db      	uxtb	r3, r3
 800594e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005956:	f003 0308 	and.w	r3, r3, #8
 800595a:	2b00      	cmp	r3, #0
 800595c:	d103      	bne.n	8005966 <HAL_UART_IRQHandler+0x17a>
 800595e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005962:	2b00      	cmp	r3, #0
 8005964:	d04f      	beq.n	8005a06 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 fc19 	bl	800619e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	695b      	ldr	r3, [r3, #20]
 8005972:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005976:	2b00      	cmp	r3, #0
 8005978:	d041      	beq.n	80059fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	3314      	adds	r3, #20
 8005980:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005984:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005988:	e853 3f00 	ldrex	r3, [r3]
 800598c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005990:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005994:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005998:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	3314      	adds	r3, #20
 80059a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80059a6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80059aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80059b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80059b6:	e841 2300 	strex	r3, r2, [r1]
 80059ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80059be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d1d9      	bne.n	800597a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d013      	beq.n	80059f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059d2:	4a7e      	ldr	r2, [pc, #504]	@ (8005bcc <HAL_UART_IRQHandler+0x3e0>)
 80059d4:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059da:	4618      	mov	r0, r3
 80059dc:	f7fd f82e 	bl	8002a3c <HAL_DMA_Abort_IT>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d016      	beq.n	8005a14 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80059f0:	4610      	mov	r0, r2
 80059f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059f4:	e00e      	b.n	8005a14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 f9a5 	bl	8005d46 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059fc:	e00a      	b.n	8005a14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 f9a1 	bl	8005d46 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a04:	e006      	b.n	8005a14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 f99d 	bl	8005d46 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005a12:	e175      	b.n	8005d00 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a14:	bf00      	nop
    return;
 8005a16:	e173      	b.n	8005d00 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	f040 814f 	bne.w	8005cc0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005a22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a26:	f003 0310 	and.w	r3, r3, #16
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	f000 8148 	beq.w	8005cc0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005a30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a34:	f003 0310 	and.w	r3, r3, #16
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	f000 8141 	beq.w	8005cc0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a3e:	2300      	movs	r3, #0
 8005a40:	60bb      	str	r3, [r7, #8]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	60bb      	str	r3, [r7, #8]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	60bb      	str	r3, [r7, #8]
 8005a52:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	695b      	ldr	r3, [r3, #20]
 8005a5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	f000 80b6 	beq.w	8005bd0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005a70:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	f000 8145 	beq.w	8005d04 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005a7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005a82:	429a      	cmp	r2, r3
 8005a84:	f080 813e 	bcs.w	8005d04 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005a8e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a94:	699b      	ldr	r3, [r3, #24]
 8005a96:	2b20      	cmp	r3, #32
 8005a98:	f000 8088 	beq.w	8005bac <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	330c      	adds	r3, #12
 8005aa2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005aaa:	e853 3f00 	ldrex	r3, [r3]
 8005aae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005ab2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005ab6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005aba:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	330c      	adds	r3, #12
 8005ac4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005ac8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005acc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005ad4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005ad8:	e841 2300 	strex	r3, r2, [r1]
 8005adc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005ae0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d1d9      	bne.n	8005a9c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	3314      	adds	r3, #20
 8005aee:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005af2:	e853 3f00 	ldrex	r3, [r3]
 8005af6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005af8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005afa:	f023 0301 	bic.w	r3, r3, #1
 8005afe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	3314      	adds	r3, #20
 8005b08:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005b0c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005b10:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b12:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005b14:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005b18:	e841 2300 	strex	r3, r2, [r1]
 8005b1c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005b1e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d1e1      	bne.n	8005ae8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	3314      	adds	r3, #20
 8005b2a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b2c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005b2e:	e853 3f00 	ldrex	r3, [r3]
 8005b32:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005b34:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b3a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	3314      	adds	r3, #20
 8005b44:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005b48:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005b4a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b4c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005b4e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005b50:	e841 2300 	strex	r3, r2, [r1]
 8005b54:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005b56:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d1e3      	bne.n	8005b24 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2220      	movs	r2, #32
 8005b60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	330c      	adds	r3, #12
 8005b70:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b74:	e853 3f00 	ldrex	r3, [r3]
 8005b78:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005b7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b7c:	f023 0310 	bic.w	r3, r3, #16
 8005b80:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	330c      	adds	r3, #12
 8005b8a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005b8e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005b90:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b92:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005b94:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005b96:	e841 2300 	strex	r3, r2, [r1]
 8005b9a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005b9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d1e3      	bne.n	8005b6a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f7fc ff0c 	bl	80029c4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2202      	movs	r2, #2
 8005bb0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	4619      	mov	r1, r3
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 f8c8 	bl	8005d58 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005bc8:	e09c      	b.n	8005d04 <HAL_UART_IRQHandler+0x518>
 8005bca:	bf00      	nop
 8005bcc:	08006263 	.word	0x08006263
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	1ad3      	subs	r3, r2, r3
 8005bdc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	f000 808e 	beq.w	8005d08 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005bec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	f000 8089 	beq.w	8005d08 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	330c      	adds	r3, #12
 8005bfc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c00:	e853 3f00 	ldrex	r3, [r3]
 8005c04:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005c06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c0c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	330c      	adds	r3, #12
 8005c16:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005c1a:	647a      	str	r2, [r7, #68]	@ 0x44
 8005c1c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c1e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005c20:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c22:	e841 2300 	strex	r3, r2, [r1]
 8005c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005c28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d1e3      	bne.n	8005bf6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	3314      	adds	r3, #20
 8005c34:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c38:	e853 3f00 	ldrex	r3, [r3]
 8005c3c:	623b      	str	r3, [r7, #32]
   return(result);
 8005c3e:	6a3b      	ldr	r3, [r7, #32]
 8005c40:	f023 0301 	bic.w	r3, r3, #1
 8005c44:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	3314      	adds	r3, #20
 8005c4e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005c52:	633a      	str	r2, [r7, #48]	@ 0x30
 8005c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c5a:	e841 2300 	strex	r3, r2, [r1]
 8005c5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d1e3      	bne.n	8005c2e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2220      	movs	r2, #32
 8005c6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	330c      	adds	r3, #12
 8005c7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	e853 3f00 	ldrex	r3, [r3]
 8005c82:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f023 0310 	bic.w	r3, r3, #16
 8005c8a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	330c      	adds	r3, #12
 8005c94:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005c98:	61fa      	str	r2, [r7, #28]
 8005c9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c9c:	69b9      	ldr	r1, [r7, #24]
 8005c9e:	69fa      	ldr	r2, [r7, #28]
 8005ca0:	e841 2300 	strex	r3, r2, [r1]
 8005ca4:	617b      	str	r3, [r7, #20]
   return(result);
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d1e3      	bne.n	8005c74 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2202      	movs	r2, #2
 8005cb0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005cb2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005cb6:	4619      	mov	r1, r3
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f000 f84d 	bl	8005d58 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005cbe:	e023      	b.n	8005d08 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005cc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d009      	beq.n	8005ce0 <HAL_UART_IRQHandler+0x4f4>
 8005ccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d003      	beq.n	8005ce0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f000 fad6 	bl	800628a <UART_Transmit_IT>
    return;
 8005cde:	e014      	b.n	8005d0a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005ce0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ce4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d00e      	beq.n	8005d0a <HAL_UART_IRQHandler+0x51e>
 8005cec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d008      	beq.n	8005d0a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f000 fb15 	bl	8006328 <UART_EndTransmit_IT>
    return;
 8005cfe:	e004      	b.n	8005d0a <HAL_UART_IRQHandler+0x51e>
    return;
 8005d00:	bf00      	nop
 8005d02:	e002      	b.n	8005d0a <HAL_UART_IRQHandler+0x51e>
      return;
 8005d04:	bf00      	nop
 8005d06:	e000      	b.n	8005d0a <HAL_UART_IRQHandler+0x51e>
      return;
 8005d08:	bf00      	nop
  }
}
 8005d0a:	37e8      	adds	r7, #232	@ 0xe8
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005d18:	bf00      	nop
 8005d1a:	370c      	adds	r7, #12
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bc80      	pop	{r7}
 8005d20:	4770      	bx	lr

08005d22 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d22:	b480      	push	{r7}
 8005d24:	b083      	sub	sp, #12
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005d2a:	bf00      	nop
 8005d2c:	370c      	adds	r7, #12
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bc80      	pop	{r7}
 8005d32:	4770      	bx	lr

08005d34 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005d3c:	bf00      	nop
 8005d3e:	370c      	adds	r7, #12
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bc80      	pop	{r7}
 8005d44:	4770      	bx	lr

08005d46 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d46:	b480      	push	{r7}
 8005d48:	b083      	sub	sp, #12
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005d4e:	bf00      	nop
 8005d50:	370c      	adds	r7, #12
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bc80      	pop	{r7}
 8005d56:	4770      	bx	lr

08005d58 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b083      	sub	sp, #12
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	460b      	mov	r3, r1
 8005d62:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005d64:	bf00      	nop
 8005d66:	370c      	adds	r7, #12
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bc80      	pop	{r7}
 8005d6c:	4770      	bx	lr

08005d6e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005d6e:	b580      	push	{r7, lr}
 8005d70:	b09c      	sub	sp, #112	@ 0x70
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d7a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 0320 	and.w	r3, r3, #32
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d172      	bne.n	8005e70 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005d8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	330c      	adds	r3, #12
 8005d96:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d9a:	e853 3f00 	ldrex	r3, [r3]
 8005d9e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005da0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005da2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005da6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005da8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	330c      	adds	r3, #12
 8005dae:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005db0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005db2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005db6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005db8:	e841 2300 	strex	r3, r2, [r1]
 8005dbc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005dbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d1e5      	bne.n	8005d90 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dc4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	3314      	adds	r3, #20
 8005dca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dce:	e853 3f00 	ldrex	r3, [r3]
 8005dd2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005dd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dd6:	f023 0301 	bic.w	r3, r3, #1
 8005dda:	667b      	str	r3, [r7, #100]	@ 0x64
 8005ddc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	3314      	adds	r3, #20
 8005de2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005de4:	647a      	str	r2, [r7, #68]	@ 0x44
 8005de6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005dea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005dec:	e841 2300 	strex	r3, r2, [r1]
 8005df0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005df2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d1e5      	bne.n	8005dc4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005df8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	3314      	adds	r3, #20
 8005dfe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e02:	e853 3f00 	ldrex	r3, [r3]
 8005e06:	623b      	str	r3, [r7, #32]
   return(result);
 8005e08:	6a3b      	ldr	r3, [r7, #32]
 8005e0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e0e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005e10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	3314      	adds	r3, #20
 8005e16:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005e18:	633a      	str	r2, [r7, #48]	@ 0x30
 8005e1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e1c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e20:	e841 2300 	strex	r3, r2, [r1]
 8005e24:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d1e5      	bne.n	8005df8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005e2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e2e:	2220      	movs	r2, #32
 8005e30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d119      	bne.n	8005e70 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	330c      	adds	r3, #12
 8005e42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	e853 3f00 	ldrex	r3, [r3]
 8005e4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f023 0310 	bic.w	r3, r3, #16
 8005e52:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005e54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	330c      	adds	r3, #12
 8005e5a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005e5c:	61fa      	str	r2, [r7, #28]
 8005e5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e60:	69b9      	ldr	r1, [r7, #24]
 8005e62:	69fa      	ldr	r2, [r7, #28]
 8005e64:	e841 2300 	strex	r3, r2, [r1]
 8005e68:	617b      	str	r3, [r7, #20]
   return(result);
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d1e5      	bne.n	8005e3c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e72:	2200      	movs	r2, #0
 8005e74:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d106      	bne.n	8005e8c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e80:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005e82:	4619      	mov	r1, r3
 8005e84:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005e86:	f7ff ff67 	bl	8005d58 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005e8a:	e002      	b.n	8005e92 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005e8c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005e8e:	f7ff ff48 	bl	8005d22 <HAL_UART_RxCpltCallback>
}
 8005e92:	bf00      	nop
 8005e94:	3770      	adds	r7, #112	@ 0x70
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}

08005e9a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005e9a:	b580      	push	{r7, lr}
 8005e9c:	b084      	sub	sp, #16
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ea6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d108      	bne.n	8005ec8 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005eba:	085b      	lsrs	r3, r3, #1
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	4619      	mov	r1, r3
 8005ec0:	68f8      	ldr	r0, [r7, #12]
 8005ec2:	f7ff ff49 	bl	8005d58 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005ec6:	e002      	b.n	8005ece <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005ec8:	68f8      	ldr	r0, [r7, #12]
 8005eca:	f7ff ff33 	bl	8005d34 <HAL_UART_RxHalfCpltCallback>
}
 8005ece:	bf00      	nop
 8005ed0:	3710      	adds	r7, #16
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}

08005ed6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005ed6:	b580      	push	{r7, lr}
 8005ed8:	b084      	sub	sp, #16
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ee6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	695b      	ldr	r3, [r3, #20]
 8005eee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	bf14      	ite	ne
 8005ef6:	2301      	movne	r3, #1
 8005ef8:	2300      	moveq	r3, #0
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	2b21      	cmp	r3, #33	@ 0x21
 8005f08:	d108      	bne.n	8005f1c <UART_DMAError+0x46>
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d005      	beq.n	8005f1c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	2200      	movs	r2, #0
 8005f14:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005f16:	68b8      	ldr	r0, [r7, #8]
 8005f18:	f000 f91a 	bl	8006150 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	695b      	ldr	r3, [r3, #20]
 8005f22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	bf14      	ite	ne
 8005f2a:	2301      	movne	r3, #1
 8005f2c:	2300      	moveq	r3, #0
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	2b22      	cmp	r3, #34	@ 0x22
 8005f3c:	d108      	bne.n	8005f50 <UART_DMAError+0x7a>
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d005      	beq.n	8005f50 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	2200      	movs	r2, #0
 8005f48:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8005f4a:	68b8      	ldr	r0, [r7, #8]
 8005f4c:	f000 f927 	bl	800619e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f54:	f043 0210 	orr.w	r2, r3, #16
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f5c:	68b8      	ldr	r0, [r7, #8]
 8005f5e:	f7ff fef2 	bl	8005d46 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f62:	bf00      	nop
 8005f64:	3710      	adds	r7, #16
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}

08005f6a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005f6a:	b580      	push	{r7, lr}
 8005f6c:	b086      	sub	sp, #24
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	60f8      	str	r0, [r7, #12]
 8005f72:	60b9      	str	r1, [r7, #8]
 8005f74:	603b      	str	r3, [r7, #0]
 8005f76:	4613      	mov	r3, r2
 8005f78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f7a:	e03b      	b.n	8005ff4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f7c:	6a3b      	ldr	r3, [r7, #32]
 8005f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f82:	d037      	beq.n	8005ff4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f84:	f7fc fb28 	bl	80025d8 <HAL_GetTick>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	1ad3      	subs	r3, r2, r3
 8005f8e:	6a3a      	ldr	r2, [r7, #32]
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d302      	bcc.n	8005f9a <UART_WaitOnFlagUntilTimeout+0x30>
 8005f94:	6a3b      	ldr	r3, [r7, #32]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d101      	bne.n	8005f9e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	e03a      	b.n	8006014 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	f003 0304 	and.w	r3, r3, #4
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d023      	beq.n	8005ff4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	2b80      	cmp	r3, #128	@ 0x80
 8005fb0:	d020      	beq.n	8005ff4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	2b40      	cmp	r3, #64	@ 0x40
 8005fb6:	d01d      	beq.n	8005ff4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 0308 	and.w	r3, r3, #8
 8005fc2:	2b08      	cmp	r3, #8
 8005fc4:	d116      	bne.n	8005ff4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	617b      	str	r3, [r7, #20]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	617b      	str	r3, [r7, #20]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	617b      	str	r3, [r7, #20]
 8005fda:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005fdc:	68f8      	ldr	r0, [r7, #12]
 8005fde:	f000 f8de 	bl	800619e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2208      	movs	r2, #8
 8005fe6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2200      	movs	r2, #0
 8005fec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	e00f      	b.n	8006014 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	68ba      	ldr	r2, [r7, #8]
 8006000:	429a      	cmp	r2, r3
 8006002:	bf0c      	ite	eq
 8006004:	2301      	moveq	r3, #1
 8006006:	2300      	movne	r3, #0
 8006008:	b2db      	uxtb	r3, r3
 800600a:	461a      	mov	r2, r3
 800600c:	79fb      	ldrb	r3, [r7, #7]
 800600e:	429a      	cmp	r2, r3
 8006010:	d0b4      	beq.n	8005f7c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006012:	2300      	movs	r3, #0
}
 8006014:	4618      	mov	r0, r3
 8006016:	3718      	adds	r7, #24
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b098      	sub	sp, #96	@ 0x60
 8006020:	af00      	add	r7, sp, #0
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	60b9      	str	r1, [r7, #8]
 8006026:	4613      	mov	r3, r2
 8006028:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800602a:	68ba      	ldr	r2, [r7, #8]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	88fa      	ldrh	r2, [r7, #6]
 8006034:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2200      	movs	r2, #0
 800603a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2222      	movs	r2, #34	@ 0x22
 8006040:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006048:	4a3e      	ldr	r2, [pc, #248]	@ (8006144 <UART_Start_Receive_DMA+0x128>)
 800604a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006050:	4a3d      	ldr	r2, [pc, #244]	@ (8006148 <UART_Start_Receive_DMA+0x12c>)
 8006052:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006058:	4a3c      	ldr	r2, [pc, #240]	@ (800614c <UART_Start_Receive_DMA+0x130>)
 800605a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006060:	2200      	movs	r2, #0
 8006062:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006064:	f107 0308 	add.w	r3, r7, #8
 8006068:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	3304      	adds	r3, #4
 8006074:	4619      	mov	r1, r3
 8006076:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	88fb      	ldrh	r3, [r7, #6]
 800607c:	f7fc fc42 	bl	8002904 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006080:	2300      	movs	r3, #0
 8006082:	613b      	str	r3, [r7, #16]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	613b      	str	r3, [r7, #16]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	613b      	str	r3, [r7, #16]
 8006094:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	691b      	ldr	r3, [r3, #16]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d019      	beq.n	80060d2 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	330c      	adds	r3, #12
 80060a4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80060a8:	e853 3f00 	ldrex	r3, [r3]
 80060ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80060ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060b4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	330c      	adds	r3, #12
 80060bc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80060be:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80060c0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80060c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80060c6:	e841 2300 	strex	r3, r2, [r1]
 80060ca:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80060cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d1e5      	bne.n	800609e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	3314      	adds	r3, #20
 80060d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060dc:	e853 3f00 	ldrex	r3, [r3]
 80060e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80060e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060e4:	f043 0301 	orr.w	r3, r3, #1
 80060e8:	657b      	str	r3, [r7, #84]	@ 0x54
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	3314      	adds	r3, #20
 80060f0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80060f2:	63ba      	str	r2, [r7, #56]	@ 0x38
 80060f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80060f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80060fa:	e841 2300 	strex	r3, r2, [r1]
 80060fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006102:	2b00      	cmp	r3, #0
 8006104:	d1e5      	bne.n	80060d2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	3314      	adds	r3, #20
 800610c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	e853 3f00 	ldrex	r3, [r3]
 8006114:	617b      	str	r3, [r7, #20]
   return(result);
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800611c:	653b      	str	r3, [r7, #80]	@ 0x50
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	3314      	adds	r3, #20
 8006124:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006126:	627a      	str	r2, [r7, #36]	@ 0x24
 8006128:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800612a:	6a39      	ldr	r1, [r7, #32]
 800612c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800612e:	e841 2300 	strex	r3, r2, [r1]
 8006132:	61fb      	str	r3, [r7, #28]
   return(result);
 8006134:	69fb      	ldr	r3, [r7, #28]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d1e5      	bne.n	8006106 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800613a:	2300      	movs	r3, #0
}
 800613c:	4618      	mov	r0, r3
 800613e:	3760      	adds	r7, #96	@ 0x60
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}
 8006144:	08005d6f 	.word	0x08005d6f
 8006148:	08005e9b 	.word	0x08005e9b
 800614c:	08005ed7 	.word	0x08005ed7

08006150 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006150:	b480      	push	{r7}
 8006152:	b089      	sub	sp, #36	@ 0x24
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	330c      	adds	r3, #12
 800615e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	e853 3f00 	ldrex	r3, [r3]
 8006166:	60bb      	str	r3, [r7, #8]
   return(result);
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800616e:	61fb      	str	r3, [r7, #28]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	330c      	adds	r3, #12
 8006176:	69fa      	ldr	r2, [r7, #28]
 8006178:	61ba      	str	r2, [r7, #24]
 800617a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800617c:	6979      	ldr	r1, [r7, #20]
 800617e:	69ba      	ldr	r2, [r7, #24]
 8006180:	e841 2300 	strex	r3, r2, [r1]
 8006184:	613b      	str	r3, [r7, #16]
   return(result);
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d1e5      	bne.n	8006158 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2220      	movs	r2, #32
 8006190:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006194:	bf00      	nop
 8006196:	3724      	adds	r7, #36	@ 0x24
 8006198:	46bd      	mov	sp, r7
 800619a:	bc80      	pop	{r7}
 800619c:	4770      	bx	lr

0800619e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800619e:	b480      	push	{r7}
 80061a0:	b095      	sub	sp, #84	@ 0x54
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	330c      	adds	r3, #12
 80061ac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061b0:	e853 3f00 	ldrex	r3, [r3]
 80061b4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80061b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80061bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	330c      	adds	r3, #12
 80061c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80061c6:	643a      	str	r2, [r7, #64]	@ 0x40
 80061c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80061cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80061ce:	e841 2300 	strex	r3, r2, [r1]
 80061d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80061d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d1e5      	bne.n	80061a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	3314      	adds	r3, #20
 80061e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e2:	6a3b      	ldr	r3, [r7, #32]
 80061e4:	e853 3f00 	ldrex	r3, [r3]
 80061e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80061ea:	69fb      	ldr	r3, [r7, #28]
 80061ec:	f023 0301 	bic.w	r3, r3, #1
 80061f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	3314      	adds	r3, #20
 80061f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80061fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80061fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006200:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006202:	e841 2300 	strex	r3, r2, [r1]
 8006206:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800620a:	2b00      	cmp	r3, #0
 800620c:	d1e5      	bne.n	80061da <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006212:	2b01      	cmp	r3, #1
 8006214:	d119      	bne.n	800624a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	330c      	adds	r3, #12
 800621c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	e853 3f00 	ldrex	r3, [r3]
 8006224:	60bb      	str	r3, [r7, #8]
   return(result);
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	f023 0310 	bic.w	r3, r3, #16
 800622c:	647b      	str	r3, [r7, #68]	@ 0x44
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	330c      	adds	r3, #12
 8006234:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006236:	61ba      	str	r2, [r7, #24]
 8006238:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800623a:	6979      	ldr	r1, [r7, #20]
 800623c:	69ba      	ldr	r2, [r7, #24]
 800623e:	e841 2300 	strex	r3, r2, [r1]
 8006242:	613b      	str	r3, [r7, #16]
   return(result);
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d1e5      	bne.n	8006216 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2220      	movs	r2, #32
 800624e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006258:	bf00      	nop
 800625a:	3754      	adds	r7, #84	@ 0x54
 800625c:	46bd      	mov	sp, r7
 800625e:	bc80      	pop	{r7}
 8006260:	4770      	bx	lr

08006262 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006262:	b580      	push	{r7, lr}
 8006264:	b084      	sub	sp, #16
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800626e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2200      	movs	r2, #0
 8006274:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2200      	movs	r2, #0
 800627a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800627c:	68f8      	ldr	r0, [r7, #12]
 800627e:	f7ff fd62 	bl	8005d46 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006282:	bf00      	nop
 8006284:	3710      	adds	r7, #16
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}

0800628a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800628a:	b480      	push	{r7}
 800628c:	b085      	sub	sp, #20
 800628e:	af00      	add	r7, sp, #0
 8006290:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006298:	b2db      	uxtb	r3, r3
 800629a:	2b21      	cmp	r3, #33	@ 0x21
 800629c:	d13e      	bne.n	800631c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062a6:	d114      	bne.n	80062d2 <UART_Transmit_IT+0x48>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	691b      	ldr	r3, [r3, #16]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d110      	bne.n	80062d2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6a1b      	ldr	r3, [r3, #32]
 80062b4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	881b      	ldrh	r3, [r3, #0]
 80062ba:	461a      	mov	r2, r3
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062c4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6a1b      	ldr	r3, [r3, #32]
 80062ca:	1c9a      	adds	r2, r3, #2
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	621a      	str	r2, [r3, #32]
 80062d0:	e008      	b.n	80062e4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6a1b      	ldr	r3, [r3, #32]
 80062d6:	1c59      	adds	r1, r3, #1
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	6211      	str	r1, [r2, #32]
 80062dc:	781a      	ldrb	r2, [r3, #0]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	3b01      	subs	r3, #1
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	4619      	mov	r1, r3
 80062f2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d10f      	bne.n	8006318 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	68da      	ldr	r2, [r3, #12]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006306:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	68da      	ldr	r2, [r3, #12]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006316:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006318:	2300      	movs	r3, #0
 800631a:	e000      	b.n	800631e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800631c:	2302      	movs	r3, #2
  }
}
 800631e:	4618      	mov	r0, r3
 8006320:	3714      	adds	r7, #20
 8006322:	46bd      	mov	sp, r7
 8006324:	bc80      	pop	{r7}
 8006326:	4770      	bx	lr

08006328 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b082      	sub	sp, #8
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	68da      	ldr	r2, [r3, #12]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800633e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2220      	movs	r2, #32
 8006344:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f7ff fce1 	bl	8005d10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800634e:	2300      	movs	r3, #0
}
 8006350:	4618      	mov	r0, r3
 8006352:	3708      	adds	r7, #8
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b08c      	sub	sp, #48	@ 0x30
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006366:	b2db      	uxtb	r3, r3
 8006368:	2b22      	cmp	r3, #34	@ 0x22
 800636a:	f040 80ae 	bne.w	80064ca <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006376:	d117      	bne.n	80063a8 <UART_Receive_IT+0x50>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	691b      	ldr	r3, [r3, #16]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d113      	bne.n	80063a8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006380:	2300      	movs	r3, #0
 8006382:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006388:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	b29b      	uxth	r3, r3
 8006392:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006396:	b29a      	uxth	r2, r3
 8006398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800639a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063a0:	1c9a      	adds	r2, r3, #2
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	629a      	str	r2, [r3, #40]	@ 0x28
 80063a6:	e026      	b.n	80063f6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80063ae:	2300      	movs	r3, #0
 80063b0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063ba:	d007      	beq.n	80063cc <UART_Receive_IT+0x74>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d10a      	bne.n	80063da <UART_Receive_IT+0x82>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	691b      	ldr	r3, [r3, #16]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d106      	bne.n	80063da <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	b2da      	uxtb	r2, r3
 80063d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063d6:	701a      	strb	r2, [r3, #0]
 80063d8:	e008      	b.n	80063ec <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063e6:	b2da      	uxtb	r2, r3
 80063e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063ea:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063f0:	1c5a      	adds	r2, r3, #1
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	3b01      	subs	r3, #1
 80063fe:	b29b      	uxth	r3, r3
 8006400:	687a      	ldr	r2, [r7, #4]
 8006402:	4619      	mov	r1, r3
 8006404:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006406:	2b00      	cmp	r3, #0
 8006408:	d15d      	bne.n	80064c6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	68da      	ldr	r2, [r3, #12]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f022 0220 	bic.w	r2, r2, #32
 8006418:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	68da      	ldr	r2, [r3, #12]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006428:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	695a      	ldr	r2, [r3, #20]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f022 0201 	bic.w	r2, r2, #1
 8006438:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2220      	movs	r2, #32
 800643e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800644c:	2b01      	cmp	r3, #1
 800644e:	d135      	bne.n	80064bc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	330c      	adds	r3, #12
 800645c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	e853 3f00 	ldrex	r3, [r3]
 8006464:	613b      	str	r3, [r7, #16]
   return(result);
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	f023 0310 	bic.w	r3, r3, #16
 800646c:	627b      	str	r3, [r7, #36]	@ 0x24
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	330c      	adds	r3, #12
 8006474:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006476:	623a      	str	r2, [r7, #32]
 8006478:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800647a:	69f9      	ldr	r1, [r7, #28]
 800647c:	6a3a      	ldr	r2, [r7, #32]
 800647e:	e841 2300 	strex	r3, r2, [r1]
 8006482:	61bb      	str	r3, [r7, #24]
   return(result);
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d1e5      	bne.n	8006456 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f003 0310 	and.w	r3, r3, #16
 8006494:	2b10      	cmp	r3, #16
 8006496:	d10a      	bne.n	80064ae <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006498:	2300      	movs	r3, #0
 800649a:	60fb      	str	r3, [r7, #12]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	60fb      	str	r3, [r7, #12]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	60fb      	str	r3, [r7, #12]
 80064ac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80064b2:	4619      	mov	r1, r3
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f7ff fc4f 	bl	8005d58 <HAL_UARTEx_RxEventCallback>
 80064ba:	e002      	b.n	80064c2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f7ff fc30 	bl	8005d22 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80064c2:	2300      	movs	r3, #0
 80064c4:	e002      	b.n	80064cc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80064c6:	2300      	movs	r3, #0
 80064c8:	e000      	b.n	80064cc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80064ca:	2302      	movs	r3, #2
  }
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3730      	adds	r7, #48	@ 0x30
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b084      	sub	sp, #16
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	68da      	ldr	r2, [r3, #12]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	430a      	orrs	r2, r1
 80064f0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	689a      	ldr	r2, [r3, #8]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	691b      	ldr	r3, [r3, #16]
 80064fa:	431a      	orrs	r2, r3
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	695b      	ldr	r3, [r3, #20]
 8006500:	4313      	orrs	r3, r2
 8006502:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800650e:	f023 030c 	bic.w	r3, r3, #12
 8006512:	687a      	ldr	r2, [r7, #4]
 8006514:	6812      	ldr	r2, [r2, #0]
 8006516:	68b9      	ldr	r1, [r7, #8]
 8006518:	430b      	orrs	r3, r1
 800651a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	695b      	ldr	r3, [r3, #20]
 8006522:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	699a      	ldr	r2, [r3, #24]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	430a      	orrs	r2, r1
 8006530:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a2c      	ldr	r2, [pc, #176]	@ (80065e8 <UART_SetConfig+0x114>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d103      	bne.n	8006544 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800653c:	f7fe fed6 	bl	80052ec <HAL_RCC_GetPCLK2Freq>
 8006540:	60f8      	str	r0, [r7, #12]
 8006542:	e002      	b.n	800654a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006544:	f7fe febe 	bl	80052c4 <HAL_RCC_GetPCLK1Freq>
 8006548:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800654a:	68fa      	ldr	r2, [r7, #12]
 800654c:	4613      	mov	r3, r2
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	4413      	add	r3, r2
 8006552:	009a      	lsls	r2, r3, #2
 8006554:	441a      	add	r2, r3
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006560:	4a22      	ldr	r2, [pc, #136]	@ (80065ec <UART_SetConfig+0x118>)
 8006562:	fba2 2303 	umull	r2, r3, r2, r3
 8006566:	095b      	lsrs	r3, r3, #5
 8006568:	0119      	lsls	r1, r3, #4
 800656a:	68fa      	ldr	r2, [r7, #12]
 800656c:	4613      	mov	r3, r2
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	4413      	add	r3, r2
 8006572:	009a      	lsls	r2, r3, #2
 8006574:	441a      	add	r2, r3
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006580:	4b1a      	ldr	r3, [pc, #104]	@ (80065ec <UART_SetConfig+0x118>)
 8006582:	fba3 0302 	umull	r0, r3, r3, r2
 8006586:	095b      	lsrs	r3, r3, #5
 8006588:	2064      	movs	r0, #100	@ 0x64
 800658a:	fb00 f303 	mul.w	r3, r0, r3
 800658e:	1ad3      	subs	r3, r2, r3
 8006590:	011b      	lsls	r3, r3, #4
 8006592:	3332      	adds	r3, #50	@ 0x32
 8006594:	4a15      	ldr	r2, [pc, #84]	@ (80065ec <UART_SetConfig+0x118>)
 8006596:	fba2 2303 	umull	r2, r3, r2, r3
 800659a:	095b      	lsrs	r3, r3, #5
 800659c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80065a0:	4419      	add	r1, r3
 80065a2:	68fa      	ldr	r2, [r7, #12]
 80065a4:	4613      	mov	r3, r2
 80065a6:	009b      	lsls	r3, r3, #2
 80065a8:	4413      	add	r3, r2
 80065aa:	009a      	lsls	r2, r3, #2
 80065ac:	441a      	add	r2, r3
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	009b      	lsls	r3, r3, #2
 80065b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80065b8:	4b0c      	ldr	r3, [pc, #48]	@ (80065ec <UART_SetConfig+0x118>)
 80065ba:	fba3 0302 	umull	r0, r3, r3, r2
 80065be:	095b      	lsrs	r3, r3, #5
 80065c0:	2064      	movs	r0, #100	@ 0x64
 80065c2:	fb00 f303 	mul.w	r3, r0, r3
 80065c6:	1ad3      	subs	r3, r2, r3
 80065c8:	011b      	lsls	r3, r3, #4
 80065ca:	3332      	adds	r3, #50	@ 0x32
 80065cc:	4a07      	ldr	r2, [pc, #28]	@ (80065ec <UART_SetConfig+0x118>)
 80065ce:	fba2 2303 	umull	r2, r3, r2, r3
 80065d2:	095b      	lsrs	r3, r3, #5
 80065d4:	f003 020f 	and.w	r2, r3, #15
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	440a      	add	r2, r1
 80065de:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80065e0:	bf00      	nop
 80065e2:	3710      	adds	r7, #16
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}
 80065e8:	40013800 	.word	0x40013800
 80065ec:	51eb851f 	.word	0x51eb851f

080065f0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b085      	sub	sp, #20
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	60f8      	str	r0, [r7, #12]
 80065f8:	4638      	mov	r0, r7
 80065fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80065fe:	2300      	movs	r3, #0
}
 8006600:	4618      	mov	r0, r3
 8006602:	3714      	adds	r7, #20
 8006604:	46bd      	mov	sp, r7
 8006606:	bc80      	pop	{r7}
 8006608:	4770      	bx	lr

0800660a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800660a:	b480      	push	{r7}
 800660c:	b085      	sub	sp, #20
 800660e:	af00      	add	r7, sp, #0
 8006610:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800661a:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800661e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	b29a      	uxth	r2, r3
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800662a:	2300      	movs	r3, #0
}
 800662c:	4618      	mov	r0, r3
 800662e:	3714      	adds	r7, #20
 8006630:	46bd      	mov	sp, r7
 8006632:	bc80      	pop	{r7}
 8006634:	4770      	bx	lr

08006636 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006636:	b480      	push	{r7}
 8006638:	b085      	sub	sp, #20
 800663a:	af00      	add	r7, sp, #0
 800663c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800663e:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8006642:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800664a:	b29a      	uxth	r2, r3
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	b29b      	uxth	r3, r3
 8006650:	43db      	mvns	r3, r3
 8006652:	b29b      	uxth	r3, r3
 8006654:	4013      	ands	r3, r2
 8006656:	b29a      	uxth	r2, r3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800665e:	2300      	movs	r3, #0
}
 8006660:	4618      	mov	r0, r3
 8006662:	3714      	adds	r7, #20
 8006664:	46bd      	mov	sp, r7
 8006666:	bc80      	pop	{r7}
 8006668:	4770      	bx	lr

0800666a <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800666a:	b480      	push	{r7}
 800666c:	b083      	sub	sp, #12
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
 8006672:	460b      	mov	r3, r1
 8006674:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006676:	2300      	movs	r3, #0
}
 8006678:	4618      	mov	r0, r3
 800667a:	370c      	adds	r7, #12
 800667c:	46bd      	mov	sp, r7
 800667e:	bc80      	pop	{r7}
 8006680:	4770      	bx	lr

08006682 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006682:	b480      	push	{r7}
 8006684:	b085      	sub	sp, #20
 8006686:	af00      	add	r7, sp, #0
 8006688:	60f8      	str	r0, [r7, #12]
 800668a:	4638      	mov	r0, r7
 800668c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2201      	movs	r2, #1
 8006694:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2200      	movs	r2, #0
 800669c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80066b0:	2300      	movs	r3, #0
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3714      	adds	r7, #20
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bc80      	pop	{r7}
 80066ba:	4770      	bx	lr

080066bc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80066bc:	b480      	push	{r7}
 80066be:	b09d      	sub	sp, #116	@ 0x74
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80066c6:	2300      	movs	r3, #0
 80066c8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	4413      	add	r3, r2
 80066d6:	881b      	ldrh	r3, [r3, #0]
 80066d8:	b29b      	uxth	r3, r3
 80066da:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80066de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066e2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	78db      	ldrb	r3, [r3, #3]
 80066ea:	2b03      	cmp	r3, #3
 80066ec:	d81f      	bhi.n	800672e <USB_ActivateEndpoint+0x72>
 80066ee:	a201      	add	r2, pc, #4	@ (adr r2, 80066f4 <USB_ActivateEndpoint+0x38>)
 80066f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f4:	08006705 	.word	0x08006705
 80066f8:	08006721 	.word	0x08006721
 80066fc:	08006737 	.word	0x08006737
 8006700:	08006713 	.word	0x08006713
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006704:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006708:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800670c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006710:	e012      	b.n	8006738 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006712:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006716:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800671a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800671e:	e00b      	b.n	8006738 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006720:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006724:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006728:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800672c:	e004      	b.n	8006738 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8006734:	e000      	b.n	8006738 <USB_ActivateEndpoint+0x7c>
      break;
 8006736:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006738:	687a      	ldr	r2, [r7, #4]
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	441a      	add	r2, r3
 8006742:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006746:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800674a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800674e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006752:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006756:	b29b      	uxth	r3, r3
 8006758:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800675a:	687a      	ldr	r2, [r7, #4]
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	4413      	add	r3, r2
 8006764:	881b      	ldrh	r3, [r3, #0]
 8006766:	b29b      	uxth	r3, r3
 8006768:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800676c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006770:	b29b      	uxth	r3, r3
 8006772:	683a      	ldr	r2, [r7, #0]
 8006774:	7812      	ldrb	r2, [r2, #0]
 8006776:	4313      	orrs	r3, r2
 8006778:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	009b      	lsls	r3, r3, #2
 8006784:	441a      	add	r2, r3
 8006786:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800678a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800678e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006792:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006796:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800679a:	b29b      	uxth	r3, r3
 800679c:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	7b1b      	ldrb	r3, [r3, #12]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	f040 8178 	bne.w	8006a98 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	785b      	ldrb	r3, [r3, #1]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	f000 8084 	beq.w	80068ba <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	61bb      	str	r3, [r7, #24]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80067bc:	b29b      	uxth	r3, r3
 80067be:	461a      	mov	r2, r3
 80067c0:	69bb      	ldr	r3, [r7, #24]
 80067c2:	4413      	add	r3, r2
 80067c4:	61bb      	str	r3, [r7, #24]
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	011a      	lsls	r2, r3, #4
 80067cc:	69bb      	ldr	r3, [r7, #24]
 80067ce:	4413      	add	r3, r2
 80067d0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80067d4:	617b      	str	r3, [r7, #20]
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	88db      	ldrh	r3, [r3, #6]
 80067da:	085b      	lsrs	r3, r3, #1
 80067dc:	b29b      	uxth	r3, r3
 80067de:	005b      	lsls	r3, r3, #1
 80067e0:	b29a      	uxth	r2, r3
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	781b      	ldrb	r3, [r3, #0]
 80067ec:	009b      	lsls	r3, r3, #2
 80067ee:	4413      	add	r3, r2
 80067f0:	881b      	ldrh	r3, [r3, #0]
 80067f2:	827b      	strh	r3, [r7, #18]
 80067f4:	8a7b      	ldrh	r3, [r7, #18]
 80067f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d01b      	beq.n	8006836 <USB_ActivateEndpoint+0x17a>
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	009b      	lsls	r3, r3, #2
 8006806:	4413      	add	r3, r2
 8006808:	881b      	ldrh	r3, [r3, #0]
 800680a:	b29b      	uxth	r3, r3
 800680c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006810:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006814:	823b      	strh	r3, [r7, #16]
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	441a      	add	r2, r3
 8006820:	8a3b      	ldrh	r3, [r7, #16]
 8006822:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006826:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800682a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800682e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006832:	b29b      	uxth	r3, r3
 8006834:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	78db      	ldrb	r3, [r3, #3]
 800683a:	2b01      	cmp	r3, #1
 800683c:	d020      	beq.n	8006880 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	4413      	add	r3, r2
 8006848:	881b      	ldrh	r3, [r3, #0]
 800684a:	b29b      	uxth	r3, r3
 800684c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006850:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006854:	81bb      	strh	r3, [r7, #12]
 8006856:	89bb      	ldrh	r3, [r7, #12]
 8006858:	f083 0320 	eor.w	r3, r3, #32
 800685c:	81bb      	strh	r3, [r7, #12]
 800685e:	687a      	ldr	r2, [r7, #4]
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	441a      	add	r2, r3
 8006868:	89bb      	ldrh	r3, [r7, #12]
 800686a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800686e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006872:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006876:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800687a:	b29b      	uxth	r3, r3
 800687c:	8013      	strh	r3, [r2, #0]
 800687e:	e2d5      	b.n	8006e2c <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	4413      	add	r3, r2
 800688a:	881b      	ldrh	r3, [r3, #0]
 800688c:	b29b      	uxth	r3, r3
 800688e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006892:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006896:	81fb      	strh	r3, [r7, #14]
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	441a      	add	r2, r3
 80068a2:	89fb      	ldrh	r3, [r7, #14]
 80068a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	8013      	strh	r3, [r2, #0]
 80068b8:	e2b8      	b.n	8006e2c <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	461a      	mov	r2, r3
 80068c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ca:	4413      	add	r3, r2
 80068cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	011a      	lsls	r2, r3, #4
 80068d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d6:	4413      	add	r3, r2
 80068d8:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80068dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	88db      	ldrh	r3, [r3, #6]
 80068e2:	085b      	lsrs	r3, r3, #1
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	005b      	lsls	r3, r3, #1
 80068e8:	b29a      	uxth	r2, r3
 80068ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068ec:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	461a      	mov	r2, r3
 80068fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068fe:	4413      	add	r3, r2
 8006900:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	011a      	lsls	r2, r3, #4
 8006908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800690a:	4413      	add	r3, r2
 800690c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006910:	627b      	str	r3, [r7, #36]	@ 0x24
 8006912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006914:	881b      	ldrh	r3, [r3, #0]
 8006916:	b29b      	uxth	r3, r3
 8006918:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800691c:	b29a      	uxth	r2, r3
 800691e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006920:	801a      	strh	r2, [r3, #0]
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	691b      	ldr	r3, [r3, #16]
 8006926:	2b3e      	cmp	r3, #62	@ 0x3e
 8006928:	d91d      	bls.n	8006966 <USB_ActivateEndpoint+0x2aa>
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	095b      	lsrs	r3, r3, #5
 8006930:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	691b      	ldr	r3, [r3, #16]
 8006936:	f003 031f 	and.w	r3, r3, #31
 800693a:	2b00      	cmp	r3, #0
 800693c:	d102      	bne.n	8006944 <USB_ActivateEndpoint+0x288>
 800693e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006940:	3b01      	subs	r3, #1
 8006942:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006946:	881b      	ldrh	r3, [r3, #0]
 8006948:	b29a      	uxth	r2, r3
 800694a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800694c:	b29b      	uxth	r3, r3
 800694e:	029b      	lsls	r3, r3, #10
 8006950:	b29b      	uxth	r3, r3
 8006952:	4313      	orrs	r3, r2
 8006954:	b29b      	uxth	r3, r3
 8006956:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800695a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800695e:	b29a      	uxth	r2, r3
 8006960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006962:	801a      	strh	r2, [r3, #0]
 8006964:	e026      	b.n	80069b4 <USB_ActivateEndpoint+0x2f8>
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d10a      	bne.n	8006984 <USB_ActivateEndpoint+0x2c8>
 800696e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006970:	881b      	ldrh	r3, [r3, #0]
 8006972:	b29b      	uxth	r3, r3
 8006974:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006978:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800697c:	b29a      	uxth	r2, r3
 800697e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006980:	801a      	strh	r2, [r3, #0]
 8006982:	e017      	b.n	80069b4 <USB_ActivateEndpoint+0x2f8>
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	691b      	ldr	r3, [r3, #16]
 8006988:	085b      	lsrs	r3, r3, #1
 800698a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	691b      	ldr	r3, [r3, #16]
 8006990:	f003 0301 	and.w	r3, r3, #1
 8006994:	2b00      	cmp	r3, #0
 8006996:	d002      	beq.n	800699e <USB_ActivateEndpoint+0x2e2>
 8006998:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800699a:	3301      	adds	r3, #1
 800699c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800699e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069a0:	881b      	ldrh	r3, [r3, #0]
 80069a2:	b29a      	uxth	r2, r3
 80069a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	029b      	lsls	r3, r3, #10
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	4313      	orrs	r3, r2
 80069ae:	b29a      	uxth	r2, r3
 80069b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069b2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	009b      	lsls	r3, r3, #2
 80069bc:	4413      	add	r3, r2
 80069be:	881b      	ldrh	r3, [r3, #0]
 80069c0:	847b      	strh	r3, [r7, #34]	@ 0x22
 80069c2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80069c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d01b      	beq.n	8006a04 <USB_ActivateEndpoint+0x348>
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	009b      	lsls	r3, r3, #2
 80069d4:	4413      	add	r3, r2
 80069d6:	881b      	ldrh	r3, [r3, #0]
 80069d8:	b29b      	uxth	r3, r3
 80069da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069e2:	843b      	strh	r3, [r7, #32]
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	441a      	add	r2, r3
 80069ee:	8c3b      	ldrh	r3, [r7, #32]
 80069f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069f8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80069fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d124      	bne.n	8006a56 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	4413      	add	r3, r2
 8006a16:	881b      	ldrh	r3, [r3, #0]
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a22:	83bb      	strh	r3, [r7, #28]
 8006a24:	8bbb      	ldrh	r3, [r7, #28]
 8006a26:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006a2a:	83bb      	strh	r3, [r7, #28]
 8006a2c:	8bbb      	ldrh	r3, [r7, #28]
 8006a2e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006a32:	83bb      	strh	r3, [r7, #28]
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	781b      	ldrb	r3, [r3, #0]
 8006a3a:	009b      	lsls	r3, r3, #2
 8006a3c:	441a      	add	r2, r3
 8006a3e:	8bbb      	ldrh	r3, [r7, #28]
 8006a40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	8013      	strh	r3, [r2, #0]
 8006a54:	e1ea      	b.n	8006e2c <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	4413      	add	r3, r2
 8006a60:	881b      	ldrh	r3, [r3, #0]
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a6c:	83fb      	strh	r3, [r7, #30]
 8006a6e:	8bfb      	ldrh	r3, [r7, #30]
 8006a70:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006a74:	83fb      	strh	r3, [r7, #30]
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	009b      	lsls	r3, r3, #2
 8006a7e:	441a      	add	r2, r3
 8006a80:	8bfb      	ldrh	r3, [r7, #30]
 8006a82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	8013      	strh	r3, [r2, #0]
 8006a96:	e1c9      	b.n	8006e2c <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	78db      	ldrb	r3, [r3, #3]
 8006a9c:	2b02      	cmp	r3, #2
 8006a9e:	d11e      	bne.n	8006ade <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006aa0:	687a      	ldr	r2, [r7, #4]
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	4413      	add	r3, r2
 8006aaa:	881b      	ldrh	r3, [r3, #0]
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ab2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ab6:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	441a      	add	r2, r3
 8006ac4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006ac8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006acc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ad0:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006ad4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	8013      	strh	r3, [r2, #0]
 8006adc:	e01d      	b.n	8006b1a <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006ade:	687a      	ldr	r2, [r7, #4]
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	009b      	lsls	r3, r3, #2
 8006ae6:	4413      	add	r3, r2
 8006ae8:	881b      	ldrh	r3, [r3, #0]
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006af0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006af4:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	441a      	add	r2, r3
 8006b02:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8006b06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	461a      	mov	r2, r3
 8006b28:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006b2a:	4413      	add	r3, r2
 8006b2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	011a      	lsls	r2, r3, #4
 8006b34:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006b36:	4413      	add	r3, r2
 8006b38:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006b3c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	891b      	ldrh	r3, [r3, #8]
 8006b42:	085b      	lsrs	r3, r3, #1
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	005b      	lsls	r3, r3, #1
 8006b48:	b29a      	uxth	r2, r3
 8006b4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006b4c:	801a      	strh	r2, [r3, #0]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b5e:	4413      	add	r3, r2
 8006b60:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	011a      	lsls	r2, r3, #4
 8006b68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b6a:	4413      	add	r3, r2
 8006b6c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8006b70:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	895b      	ldrh	r3, [r3, #10]
 8006b76:	085b      	lsrs	r3, r3, #1
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	005b      	lsls	r3, r3, #1
 8006b7c:	b29a      	uxth	r2, r3
 8006b7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b80:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	785b      	ldrb	r3, [r3, #1]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	f040 8093 	bne.w	8006cb2 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	009b      	lsls	r3, r3, #2
 8006b94:	4413      	add	r3, r2
 8006b96:	881b      	ldrh	r3, [r3, #0]
 8006b98:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8006b9c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006ba0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d01b      	beq.n	8006be0 <USB_ActivateEndpoint+0x524>
 8006ba8:	687a      	ldr	r2, [r7, #4]
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	781b      	ldrb	r3, [r3, #0]
 8006bae:	009b      	lsls	r3, r3, #2
 8006bb0:	4413      	add	r3, r2
 8006bb2:	881b      	ldrh	r3, [r3, #0]
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bbe:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	009b      	lsls	r3, r3, #2
 8006bc8:	441a      	add	r2, r3
 8006bca:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006bcc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bd0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bd4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006bd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006be0:	687a      	ldr	r2, [r7, #4]
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	4413      	add	r3, r2
 8006bea:	881b      	ldrh	r3, [r3, #0]
 8006bec:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8006bee:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006bf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d01b      	beq.n	8006c30 <USB_ActivateEndpoint+0x574>
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	781b      	ldrb	r3, [r3, #0]
 8006bfe:	009b      	lsls	r3, r3, #2
 8006c00:	4413      	add	r3, r2
 8006c02:	881b      	ldrh	r3, [r3, #0]
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c0e:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	781b      	ldrb	r3, [r3, #0]
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	441a      	add	r2, r3
 8006c1a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006c1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c28:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006c30:	687a      	ldr	r2, [r7, #4]
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	781b      	ldrb	r3, [r3, #0]
 8006c36:	009b      	lsls	r3, r3, #2
 8006c38:	4413      	add	r3, r2
 8006c3a:	881b      	ldrh	r3, [r3, #0]
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006c42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c46:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006c48:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006c4a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006c4e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006c50:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006c52:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006c56:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	781b      	ldrb	r3, [r3, #0]
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	441a      	add	r2, r3
 8006c62:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006c64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c78:	687a      	ldr	r2, [r7, #4]
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	781b      	ldrb	r3, [r3, #0]
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	4413      	add	r3, r2
 8006c82:	881b      	ldrh	r3, [r3, #0]
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c8e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	781b      	ldrb	r3, [r3, #0]
 8006c96:	009b      	lsls	r3, r3, #2
 8006c98:	441a      	add	r2, r3
 8006c9a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006c9c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ca0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ca4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ca8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	8013      	strh	r3, [r2, #0]
 8006cb0:	e0bc      	b.n	8006e2c <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	4413      	add	r3, r2
 8006cbc:	881b      	ldrh	r3, [r3, #0]
 8006cbe:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8006cc2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006cc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d01d      	beq.n	8006d0a <USB_ActivateEndpoint+0x64e>
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	4413      	add	r3, r2
 8006cd8:	881b      	ldrh	r3, [r3, #0]
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ce0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ce4:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	009b      	lsls	r3, r3, #2
 8006cf0:	441a      	add	r2, r3
 8006cf2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8006cf6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006cfa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006cfe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006d02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d0a:	687a      	ldr	r2, [r7, #4]
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	4413      	add	r3, r2
 8006d14:	881b      	ldrh	r3, [r3, #0]
 8006d16:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8006d1a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006d1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d01d      	beq.n	8006d62 <USB_ActivateEndpoint+0x6a6>
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	4413      	add	r3, r2
 8006d30:	881b      	ldrh	r3, [r3, #0]
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d3c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8006d40:	687a      	ldr	r2, [r7, #4]
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	781b      	ldrb	r3, [r3, #0]
 8006d46:	009b      	lsls	r3, r3, #2
 8006d48:	441a      	add	r2, r3
 8006d4a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006d4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d5a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	78db      	ldrb	r3, [r3, #3]
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d024      	beq.n	8006db4 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006d6a:	687a      	ldr	r2, [r7, #4]
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	4413      	add	r3, r2
 8006d74:	881b      	ldrh	r3, [r3, #0]
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d80:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006d84:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006d88:	f083 0320 	eor.w	r3, r3, #32
 8006d8c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	441a      	add	r2, r3
 8006d9a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006d9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006da2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006da6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006daa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	8013      	strh	r3, [r2, #0]
 8006db2:	e01d      	b.n	8006df0 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	781b      	ldrb	r3, [r3, #0]
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	4413      	add	r3, r2
 8006dbe:	881b      	ldrh	r3, [r3, #0]
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006dc6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006dca:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	441a      	add	r2, r3
 8006dd8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006ddc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006de0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006de4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006de8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	4413      	add	r3, r2
 8006dfa:	881b      	ldrh	r3, [r3, #0]
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006e02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e06:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8006e0a:	687a      	ldr	r2, [r7, #4]
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	781b      	ldrb	r3, [r3, #0]
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	441a      	add	r2, r3
 8006e14:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8006e18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006e2c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3774      	adds	r7, #116	@ 0x74
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bc80      	pop	{r7}
 8006e38:	4770      	bx	lr
 8006e3a:	bf00      	nop

08006e3c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b08d      	sub	sp, #52	@ 0x34
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	7b1b      	ldrb	r3, [r3, #12]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	f040 808e 	bne.w	8006f6c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	785b      	ldrb	r3, [r3, #1]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d044      	beq.n	8006ee2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	009b      	lsls	r3, r3, #2
 8006e60:	4413      	add	r3, r2
 8006e62:	881b      	ldrh	r3, [r3, #0]
 8006e64:	81bb      	strh	r3, [r7, #12]
 8006e66:	89bb      	ldrh	r3, [r7, #12]
 8006e68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d01b      	beq.n	8006ea8 <USB_DeactivateEndpoint+0x6c>
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	4413      	add	r3, r2
 8006e7a:	881b      	ldrh	r3, [r3, #0]
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e86:	817b      	strh	r3, [r7, #10]
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	781b      	ldrb	r3, [r3, #0]
 8006e8e:	009b      	lsls	r3, r3, #2
 8006e90:	441a      	add	r2, r3
 8006e92:	897b      	ldrh	r3, [r7, #10]
 8006e94:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ea0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	009b      	lsls	r3, r3, #2
 8006eb0:	4413      	add	r3, r2
 8006eb2:	881b      	ldrh	r3, [r3, #0]
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006eba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ebe:	813b      	strh	r3, [r7, #8]
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	781b      	ldrb	r3, [r3, #0]
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	441a      	add	r2, r3
 8006eca:	893b      	ldrh	r3, [r7, #8]
 8006ecc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ed0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ed4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ed8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	8013      	strh	r3, [r2, #0]
 8006ee0:	e192      	b.n	8007208 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	781b      	ldrb	r3, [r3, #0]
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	4413      	add	r3, r2
 8006eec:	881b      	ldrh	r3, [r3, #0]
 8006eee:	827b      	strh	r3, [r7, #18]
 8006ef0:	8a7b      	ldrh	r3, [r7, #18]
 8006ef2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d01b      	beq.n	8006f32 <USB_DeactivateEndpoint+0xf6>
 8006efa:	687a      	ldr	r2, [r7, #4]
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	009b      	lsls	r3, r3, #2
 8006f02:	4413      	add	r3, r2
 8006f04:	881b      	ldrh	r3, [r3, #0]
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f10:	823b      	strh	r3, [r7, #16]
 8006f12:	687a      	ldr	r2, [r7, #4]
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	009b      	lsls	r3, r3, #2
 8006f1a:	441a      	add	r2, r3
 8006f1c:	8a3b      	ldrh	r3, [r7, #16]
 8006f1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f26:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006f2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	781b      	ldrb	r3, [r3, #0]
 8006f38:	009b      	lsls	r3, r3, #2
 8006f3a:	4413      	add	r3, r2
 8006f3c:	881b      	ldrh	r3, [r3, #0]
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006f44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f48:	81fb      	strh	r3, [r7, #14]
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	441a      	add	r2, r3
 8006f54:	89fb      	ldrh	r3, [r7, #14]
 8006f56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	8013      	strh	r3, [r2, #0]
 8006f6a:	e14d      	b.n	8007208 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	785b      	ldrb	r3, [r3, #1]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	f040 80a5 	bne.w	80070c0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f76:	687a      	ldr	r2, [r7, #4]
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	781b      	ldrb	r3, [r3, #0]
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	4413      	add	r3, r2
 8006f80:	881b      	ldrh	r3, [r3, #0]
 8006f82:	843b      	strh	r3, [r7, #32]
 8006f84:	8c3b      	ldrh	r3, [r7, #32]
 8006f86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d01b      	beq.n	8006fc6 <USB_DeactivateEndpoint+0x18a>
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	4413      	add	r3, r2
 8006f98:	881b      	ldrh	r3, [r3, #0]
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006fa0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fa4:	83fb      	strh	r3, [r7, #30]
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	441a      	add	r2, r3
 8006fb0:	8bfb      	ldrh	r3, [r7, #30]
 8006fb2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fb6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006fbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	009b      	lsls	r3, r3, #2
 8006fce:	4413      	add	r3, r2
 8006fd0:	881b      	ldrh	r3, [r3, #0]
 8006fd2:	83bb      	strh	r3, [r7, #28]
 8006fd4:	8bbb      	ldrh	r3, [r7, #28]
 8006fd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d01b      	beq.n	8007016 <USB_DeactivateEndpoint+0x1da>
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	009b      	lsls	r3, r3, #2
 8006fe6:	4413      	add	r3, r2
 8006fe8:	881b      	ldrh	r3, [r3, #0]
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ff0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ff4:	837b      	strh	r3, [r7, #26]
 8006ff6:	687a      	ldr	r2, [r7, #4]
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	009b      	lsls	r3, r3, #2
 8006ffe:	441a      	add	r2, r3
 8007000:	8b7b      	ldrh	r3, [r7, #26]
 8007002:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007006:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800700a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800700e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007012:	b29b      	uxth	r3, r3
 8007014:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007016:	687a      	ldr	r2, [r7, #4]
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	009b      	lsls	r3, r3, #2
 800701e:	4413      	add	r3, r2
 8007020:	881b      	ldrh	r3, [r3, #0]
 8007022:	b29b      	uxth	r3, r3
 8007024:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007028:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800702c:	833b      	strh	r3, [r7, #24]
 800702e:	687a      	ldr	r2, [r7, #4]
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	441a      	add	r2, r3
 8007038:	8b3b      	ldrh	r3, [r7, #24]
 800703a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800703e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007042:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007046:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800704a:	b29b      	uxth	r3, r3
 800704c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	009b      	lsls	r3, r3, #2
 8007056:	4413      	add	r3, r2
 8007058:	881b      	ldrh	r3, [r3, #0]
 800705a:	b29b      	uxth	r3, r3
 800705c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007060:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007064:	82fb      	strh	r3, [r7, #22]
 8007066:	687a      	ldr	r2, [r7, #4]
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	441a      	add	r2, r3
 8007070:	8afb      	ldrh	r3, [r7, #22]
 8007072:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007076:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800707a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800707e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007082:	b29b      	uxth	r3, r3
 8007084:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007086:	687a      	ldr	r2, [r7, #4]
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	781b      	ldrb	r3, [r3, #0]
 800708c:	009b      	lsls	r3, r3, #2
 800708e:	4413      	add	r3, r2
 8007090:	881b      	ldrh	r3, [r3, #0]
 8007092:	b29b      	uxth	r3, r3
 8007094:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007098:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800709c:	82bb      	strh	r3, [r7, #20]
 800709e:	687a      	ldr	r2, [r7, #4]
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	781b      	ldrb	r3, [r3, #0]
 80070a4:	009b      	lsls	r3, r3, #2
 80070a6:	441a      	add	r2, r3
 80070a8:	8abb      	ldrh	r3, [r7, #20]
 80070aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	8013      	strh	r3, [r2, #0]
 80070be:	e0a3      	b.n	8007208 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	781b      	ldrb	r3, [r3, #0]
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	4413      	add	r3, r2
 80070ca:	881b      	ldrh	r3, [r3, #0]
 80070cc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80070ce:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80070d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d01b      	beq.n	8007110 <USB_DeactivateEndpoint+0x2d4>
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	4413      	add	r3, r2
 80070e2:	881b      	ldrh	r3, [r3, #0]
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80070ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070ee:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80070f0:	687a      	ldr	r2, [r7, #4]
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	781b      	ldrb	r3, [r3, #0]
 80070f6:	009b      	lsls	r3, r3, #2
 80070f8:	441a      	add	r2, r3
 80070fa:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80070fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007100:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007104:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007108:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800710c:	b29b      	uxth	r3, r3
 800710e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	781b      	ldrb	r3, [r3, #0]
 8007116:	009b      	lsls	r3, r3, #2
 8007118:	4413      	add	r3, r2
 800711a:	881b      	ldrh	r3, [r3, #0]
 800711c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800711e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007120:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007124:	2b00      	cmp	r3, #0
 8007126:	d01b      	beq.n	8007160 <USB_DeactivateEndpoint+0x324>
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	781b      	ldrb	r3, [r3, #0]
 800712e:	009b      	lsls	r3, r3, #2
 8007130:	4413      	add	r3, r2
 8007132:	881b      	ldrh	r3, [r3, #0]
 8007134:	b29b      	uxth	r3, r3
 8007136:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800713a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800713e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	441a      	add	r2, r3
 800714a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800714c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007150:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007154:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007158:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800715c:	b29b      	uxth	r3, r3
 800715e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007160:	687a      	ldr	r2, [r7, #4]
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	781b      	ldrb	r3, [r3, #0]
 8007166:	009b      	lsls	r3, r3, #2
 8007168:	4413      	add	r3, r2
 800716a:	881b      	ldrh	r3, [r3, #0]
 800716c:	b29b      	uxth	r3, r3
 800716e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007172:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007176:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	009b      	lsls	r3, r3, #2
 8007180:	441a      	add	r2, r3
 8007182:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007184:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007188:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800718c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007190:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007194:	b29b      	uxth	r3, r3
 8007196:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	009b      	lsls	r3, r3, #2
 80071a0:	4413      	add	r3, r2
 80071a2:	881b      	ldrh	r3, [r3, #0]
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80071ae:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	781b      	ldrb	r3, [r3, #0]
 80071b6:	009b      	lsls	r3, r3, #2
 80071b8:	441a      	add	r2, r3
 80071ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80071bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80071c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80071d0:	687a      	ldr	r2, [r7, #4]
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	781b      	ldrb	r3, [r3, #0]
 80071d6:	009b      	lsls	r3, r3, #2
 80071d8:	4413      	add	r3, r2
 80071da:	881b      	ldrh	r3, [r3, #0]
 80071dc:	b29b      	uxth	r3, r3
 80071de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80071e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071e6:	847b      	strh	r3, [r7, #34]	@ 0x22
 80071e8:	687a      	ldr	r2, [r7, #4]
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	009b      	lsls	r3, r3, #2
 80071f0:	441a      	add	r2, r3
 80071f2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80071f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007200:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007204:	b29b      	uxth	r3, r3
 8007206:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007208:	2300      	movs	r3, #0
}
 800720a:	4618      	mov	r0, r3
 800720c:	3734      	adds	r7, #52	@ 0x34
 800720e:	46bd      	mov	sp, r7
 8007210:	bc80      	pop	{r7}
 8007212:	4770      	bx	lr

08007214 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b0c2      	sub	sp, #264	@ 0x108
 8007218:	af00      	add	r7, sp, #0
 800721a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800721e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007222:	6018      	str	r0, [r3, #0]
 8007224:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007228:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800722c:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800722e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007232:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	785b      	ldrb	r3, [r3, #1]
 800723a:	2b01      	cmp	r3, #1
 800723c:	f040 86b7 	bne.w	8007fae <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007240:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007244:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	699a      	ldr	r2, [r3, #24]
 800724c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007250:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	691b      	ldr	r3, [r3, #16]
 8007258:	429a      	cmp	r2, r3
 800725a:	d908      	bls.n	800726e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800725c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007260:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	691b      	ldr	r3, [r3, #16]
 8007268:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800726c:	e007      	b.n	800727e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800726e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007272:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	699b      	ldr	r3, [r3, #24]
 800727a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800727e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007282:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	7b1b      	ldrb	r3, [r3, #12]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d13a      	bne.n	8007304 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800728e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007292:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	6959      	ldr	r1, [r3, #20]
 800729a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800729e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	88da      	ldrh	r2, [r3, #6]
 80072a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80072b0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80072b4:	6800      	ldr	r0, [r0, #0]
 80072b6:	f001 fc9c 	bl	8008bf2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80072ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	613b      	str	r3, [r7, #16]
 80072c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	461a      	mov	r2, r3
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	4413      	add	r3, r2
 80072dc:	613b      	str	r3, [r7, #16]
 80072de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	781b      	ldrb	r3, [r3, #0]
 80072ea:	011a      	lsls	r2, r3, #4
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	4413      	add	r3, r2
 80072f0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80072f4:	60fb      	str	r3, [r7, #12]
 80072f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072fa:	b29a      	uxth	r2, r3
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	801a      	strh	r2, [r3, #0]
 8007300:	f000 be1f 	b.w	8007f42 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007304:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007308:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	78db      	ldrb	r3, [r3, #3]
 8007310:	2b02      	cmp	r3, #2
 8007312:	f040 8462 	bne.w	8007bda <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007316:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800731a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	6a1a      	ldr	r2, [r3, #32]
 8007322:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007326:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	691b      	ldr	r3, [r3, #16]
 800732e:	429a      	cmp	r2, r3
 8007330:	f240 83df 	bls.w	8007af2 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007334:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007338:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800733c:	681a      	ldr	r2, [r3, #0]
 800733e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007342:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	4413      	add	r3, r2
 800734e:	881b      	ldrh	r3, [r3, #0]
 8007350:	b29b      	uxth	r3, r3
 8007352:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007356:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800735a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800735e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007362:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800736c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	781b      	ldrb	r3, [r3, #0]
 8007374:	009b      	lsls	r3, r3, #2
 8007376:	441a      	add	r2, r3
 8007378:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800737c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007380:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007384:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007388:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800738c:	b29b      	uxth	r3, r3
 800738e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007390:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007394:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	6a1a      	ldr	r2, [r3, #32]
 800739c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073a0:	1ad2      	subs	r2, r2, r3
 80073a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80073ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	781b      	ldrb	r3, [r3, #0]
 80073c4:	009b      	lsls	r3, r3, #2
 80073c6:	4413      	add	r3, r2
 80073c8:	881b      	ldrh	r3, [r3, #0]
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	f000 81c7 	beq.w	8007764 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80073d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80073e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	785b      	ldrb	r3, [r3, #1]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d177      	bne.n	80074e2 <USB_EPStartXfer+0x2ce>
 80073f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80073fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007402:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800740c:	b29b      	uxth	r3, r3
 800740e:	461a      	mov	r2, r3
 8007410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007412:	4413      	add	r3, r2
 8007414:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007416:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800741a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	011a      	lsls	r2, r3, #4
 8007424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007426:	4413      	add	r3, r2
 8007428:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800742c:	627b      	str	r3, [r7, #36]	@ 0x24
 800742e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007430:	881b      	ldrh	r3, [r3, #0]
 8007432:	b29b      	uxth	r3, r3
 8007434:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007438:	b29a      	uxth	r2, r3
 800743a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800743c:	801a      	strh	r2, [r3, #0]
 800743e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007442:	2b3e      	cmp	r3, #62	@ 0x3e
 8007444:	d921      	bls.n	800748a <USB_EPStartXfer+0x276>
 8007446:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800744a:	095b      	lsrs	r3, r3, #5
 800744c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007450:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007454:	f003 031f 	and.w	r3, r3, #31
 8007458:	2b00      	cmp	r3, #0
 800745a:	d104      	bne.n	8007466 <USB_EPStartXfer+0x252>
 800745c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007460:	3b01      	subs	r3, #1
 8007462:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007468:	881b      	ldrh	r3, [r3, #0]
 800746a:	b29a      	uxth	r2, r3
 800746c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007470:	b29b      	uxth	r3, r3
 8007472:	029b      	lsls	r3, r3, #10
 8007474:	b29b      	uxth	r3, r3
 8007476:	4313      	orrs	r3, r2
 8007478:	b29b      	uxth	r3, r3
 800747a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800747e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007482:	b29a      	uxth	r2, r3
 8007484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007486:	801a      	strh	r2, [r3, #0]
 8007488:	e050      	b.n	800752c <USB_EPStartXfer+0x318>
 800748a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800748e:	2b00      	cmp	r3, #0
 8007490:	d10a      	bne.n	80074a8 <USB_EPStartXfer+0x294>
 8007492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007494:	881b      	ldrh	r3, [r3, #0]
 8007496:	b29b      	uxth	r3, r3
 8007498:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800749c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074a0:	b29a      	uxth	r2, r3
 80074a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074a4:	801a      	strh	r2, [r3, #0]
 80074a6:	e041      	b.n	800752c <USB_EPStartXfer+0x318>
 80074a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074ac:	085b      	lsrs	r3, r3, #1
 80074ae:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80074b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074b6:	f003 0301 	and.w	r3, r3, #1
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d004      	beq.n	80074c8 <USB_EPStartXfer+0x2b4>
 80074be:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80074c2:	3301      	adds	r3, #1
 80074c4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80074c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ca:	881b      	ldrh	r3, [r3, #0]
 80074cc:	b29a      	uxth	r2, r3
 80074ce:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	029b      	lsls	r3, r3, #10
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	4313      	orrs	r3, r2
 80074da:	b29a      	uxth	r2, r3
 80074dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074de:	801a      	strh	r2, [r3, #0]
 80074e0:	e024      	b.n	800752c <USB_EPStartXfer+0x318>
 80074e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	785b      	ldrb	r3, [r3, #1]
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d11c      	bne.n	800752c <USB_EPStartXfer+0x318>
 80074f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007500:	b29b      	uxth	r3, r3
 8007502:	461a      	mov	r2, r3
 8007504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007506:	4413      	add	r3, r2
 8007508:	633b      	str	r3, [r7, #48]	@ 0x30
 800750a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800750e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	011a      	lsls	r2, r3, #4
 8007518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800751a:	4413      	add	r3, r2
 800751c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007520:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007522:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007526:	b29a      	uxth	r2, r3
 8007528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800752a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800752c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007530:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	895b      	ldrh	r3, [r3, #10]
 8007538:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800753c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007540:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	6959      	ldr	r1, [r3, #20]
 8007548:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800754c:	b29b      	uxth	r3, r3
 800754e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007552:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007556:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800755a:	6800      	ldr	r0, [r0, #0]
 800755c:	f001 fb49 	bl	8008bf2 <USB_WritePMA>
            ep->xfer_buff += len;
 8007560:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007564:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	695a      	ldr	r2, [r3, #20]
 800756c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007570:	441a      	add	r2, r3
 8007572:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007576:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800757e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007582:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	6a1a      	ldr	r2, [r3, #32]
 800758a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800758e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	691b      	ldr	r3, [r3, #16]
 8007596:	429a      	cmp	r2, r3
 8007598:	d90f      	bls.n	80075ba <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800759a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800759e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	6a1a      	ldr	r2, [r3, #32]
 80075a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075aa:	1ad2      	subs	r2, r2, r3
 80075ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	621a      	str	r2, [r3, #32]
 80075b8:	e00e      	b.n	80075d8 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80075ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	6a1b      	ldr	r3, [r3, #32]
 80075c6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80075ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	2200      	movs	r2, #0
 80075d6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80075d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	785b      	ldrb	r3, [r3, #1]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d177      	bne.n	80076d8 <USB_EPStartXfer+0x4c4>
 80075e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	61bb      	str	r3, [r7, #24]
 80075f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007602:	b29b      	uxth	r3, r3
 8007604:	461a      	mov	r2, r3
 8007606:	69bb      	ldr	r3, [r7, #24]
 8007608:	4413      	add	r3, r2
 800760a:	61bb      	str	r3, [r7, #24]
 800760c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007610:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	781b      	ldrb	r3, [r3, #0]
 8007618:	011a      	lsls	r2, r3, #4
 800761a:	69bb      	ldr	r3, [r7, #24]
 800761c:	4413      	add	r3, r2
 800761e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007622:	617b      	str	r3, [r7, #20]
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	881b      	ldrh	r3, [r3, #0]
 8007628:	b29b      	uxth	r3, r3
 800762a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800762e:	b29a      	uxth	r2, r3
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	801a      	strh	r2, [r3, #0]
 8007634:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007638:	2b3e      	cmp	r3, #62	@ 0x3e
 800763a:	d921      	bls.n	8007680 <USB_EPStartXfer+0x46c>
 800763c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007640:	095b      	lsrs	r3, r3, #5
 8007642:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007646:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800764a:	f003 031f 	and.w	r3, r3, #31
 800764e:	2b00      	cmp	r3, #0
 8007650:	d104      	bne.n	800765c <USB_EPStartXfer+0x448>
 8007652:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007656:	3b01      	subs	r3, #1
 8007658:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	881b      	ldrh	r3, [r3, #0]
 8007660:	b29a      	uxth	r2, r3
 8007662:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007666:	b29b      	uxth	r3, r3
 8007668:	029b      	lsls	r3, r3, #10
 800766a:	b29b      	uxth	r3, r3
 800766c:	4313      	orrs	r3, r2
 800766e:	b29b      	uxth	r3, r3
 8007670:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007674:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007678:	b29a      	uxth	r2, r3
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	801a      	strh	r2, [r3, #0]
 800767e:	e056      	b.n	800772e <USB_EPStartXfer+0x51a>
 8007680:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007684:	2b00      	cmp	r3, #0
 8007686:	d10a      	bne.n	800769e <USB_EPStartXfer+0x48a>
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	881b      	ldrh	r3, [r3, #0]
 800768c:	b29b      	uxth	r3, r3
 800768e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007692:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007696:	b29a      	uxth	r2, r3
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	801a      	strh	r2, [r3, #0]
 800769c:	e047      	b.n	800772e <USB_EPStartXfer+0x51a>
 800769e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076a2:	085b      	lsrs	r3, r3, #1
 80076a4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80076a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076ac:	f003 0301 	and.w	r3, r3, #1
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d004      	beq.n	80076be <USB_EPStartXfer+0x4aa>
 80076b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80076b8:	3301      	adds	r3, #1
 80076ba:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	881b      	ldrh	r3, [r3, #0]
 80076c2:	b29a      	uxth	r2, r3
 80076c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	029b      	lsls	r3, r3, #10
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	4313      	orrs	r3, r2
 80076d0:	b29a      	uxth	r2, r3
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	801a      	strh	r2, [r3, #0]
 80076d6:	e02a      	b.n	800772e <USB_EPStartXfer+0x51a>
 80076d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	785b      	ldrb	r3, [r3, #1]
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d122      	bne.n	800772e <USB_EPStartXfer+0x51a>
 80076e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	623b      	str	r3, [r7, #32]
 80076f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007702:	b29b      	uxth	r3, r3
 8007704:	461a      	mov	r2, r3
 8007706:	6a3b      	ldr	r3, [r7, #32]
 8007708:	4413      	add	r3, r2
 800770a:	623b      	str	r3, [r7, #32]
 800770c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007710:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	011a      	lsls	r2, r3, #4
 800771a:	6a3b      	ldr	r3, [r7, #32]
 800771c:	4413      	add	r3, r2
 800771e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007722:	61fb      	str	r3, [r7, #28]
 8007724:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007728:	b29a      	uxth	r2, r3
 800772a:	69fb      	ldr	r3, [r7, #28]
 800772c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800772e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007732:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	891b      	ldrh	r3, [r3, #8]
 800773a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800773e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007742:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	6959      	ldr	r1, [r3, #20]
 800774a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800774e:	b29b      	uxth	r3, r3
 8007750:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007754:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007758:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800775c:	6800      	ldr	r0, [r0, #0]
 800775e:	f001 fa48 	bl	8008bf2 <USB_WritePMA>
 8007762:	e3ee      	b.n	8007f42 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007764:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007768:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	785b      	ldrb	r3, [r3, #1]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d177      	bne.n	8007864 <USB_EPStartXfer+0x650>
 8007774:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007778:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007780:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007784:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800778e:	b29b      	uxth	r3, r3
 8007790:	461a      	mov	r2, r3
 8007792:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007794:	4413      	add	r3, r2
 8007796:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007798:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800779c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	781b      	ldrb	r3, [r3, #0]
 80077a4:	011a      	lsls	r2, r3, #4
 80077a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80077a8:	4413      	add	r3, r2
 80077aa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80077ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80077b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077b2:	881b      	ldrh	r3, [r3, #0]
 80077b4:	b29b      	uxth	r3, r3
 80077b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80077ba:	b29a      	uxth	r2, r3
 80077bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077be:	801a      	strh	r2, [r3, #0]
 80077c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077c4:	2b3e      	cmp	r3, #62	@ 0x3e
 80077c6:	d921      	bls.n	800780c <USB_EPStartXfer+0x5f8>
 80077c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077cc:	095b      	lsrs	r3, r3, #5
 80077ce:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80077d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077d6:	f003 031f 	and.w	r3, r3, #31
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d104      	bne.n	80077e8 <USB_EPStartXfer+0x5d4>
 80077de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80077e2:	3b01      	subs	r3, #1
 80077e4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80077e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077ea:	881b      	ldrh	r3, [r3, #0]
 80077ec:	b29a      	uxth	r2, r3
 80077ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	029b      	lsls	r3, r3, #10
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	4313      	orrs	r3, r2
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007800:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007804:	b29a      	uxth	r2, r3
 8007806:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007808:	801a      	strh	r2, [r3, #0]
 800780a:	e056      	b.n	80078ba <USB_EPStartXfer+0x6a6>
 800780c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007810:	2b00      	cmp	r3, #0
 8007812:	d10a      	bne.n	800782a <USB_EPStartXfer+0x616>
 8007814:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007816:	881b      	ldrh	r3, [r3, #0]
 8007818:	b29b      	uxth	r3, r3
 800781a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800781e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007822:	b29a      	uxth	r2, r3
 8007824:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007826:	801a      	strh	r2, [r3, #0]
 8007828:	e047      	b.n	80078ba <USB_EPStartXfer+0x6a6>
 800782a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800782e:	085b      	lsrs	r3, r3, #1
 8007830:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007834:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007838:	f003 0301 	and.w	r3, r3, #1
 800783c:	2b00      	cmp	r3, #0
 800783e:	d004      	beq.n	800784a <USB_EPStartXfer+0x636>
 8007840:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007844:	3301      	adds	r3, #1
 8007846:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800784a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800784c:	881b      	ldrh	r3, [r3, #0]
 800784e:	b29a      	uxth	r2, r3
 8007850:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007854:	b29b      	uxth	r3, r3
 8007856:	029b      	lsls	r3, r3, #10
 8007858:	b29b      	uxth	r3, r3
 800785a:	4313      	orrs	r3, r2
 800785c:	b29a      	uxth	r2, r3
 800785e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007860:	801a      	strh	r2, [r3, #0]
 8007862:	e02a      	b.n	80078ba <USB_EPStartXfer+0x6a6>
 8007864:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007868:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	785b      	ldrb	r3, [r3, #1]
 8007870:	2b01      	cmp	r3, #1
 8007872:	d122      	bne.n	80078ba <USB_EPStartXfer+0x6a6>
 8007874:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007878:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007880:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007884:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800788e:	b29b      	uxth	r3, r3
 8007890:	461a      	mov	r2, r3
 8007892:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007894:	4413      	add	r3, r2
 8007896:	653b      	str	r3, [r7, #80]	@ 0x50
 8007898:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800789c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	781b      	ldrb	r3, [r3, #0]
 80078a4:	011a      	lsls	r2, r3, #4
 80078a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80078a8:	4413      	add	r3, r2
 80078aa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80078ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80078b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078b4:	b29a      	uxth	r2, r3
 80078b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80078b8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80078ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	891b      	ldrh	r3, [r3, #8]
 80078c6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80078ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	6959      	ldr	r1, [r3, #20]
 80078d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078da:	b29b      	uxth	r3, r3
 80078dc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80078e0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80078e4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80078e8:	6800      	ldr	r0, [r0, #0]
 80078ea:	f001 f982 	bl	8008bf2 <USB_WritePMA>
            ep->xfer_buff += len;
 80078ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	695a      	ldr	r2, [r3, #20]
 80078fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078fe:	441a      	add	r2, r3
 8007900:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007904:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800790c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007910:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	6a1a      	ldr	r2, [r3, #32]
 8007918:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800791c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	691b      	ldr	r3, [r3, #16]
 8007924:	429a      	cmp	r2, r3
 8007926:	d90f      	bls.n	8007948 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8007928:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800792c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	6a1a      	ldr	r2, [r3, #32]
 8007934:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007938:	1ad2      	subs	r2, r2, r3
 800793a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800793e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	621a      	str	r2, [r3, #32]
 8007946:	e00e      	b.n	8007966 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8007948:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800794c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	6a1b      	ldr	r3, [r3, #32]
 8007954:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007958:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800795c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	2200      	movs	r2, #0
 8007964:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007966:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800796a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	643b      	str	r3, [r7, #64]	@ 0x40
 8007972:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007976:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	785b      	ldrb	r3, [r3, #1]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d177      	bne.n	8007a72 <USB_EPStartXfer+0x85e>
 8007982:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007986:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800798e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007992:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800799c:	b29b      	uxth	r3, r3
 800799e:	461a      	mov	r2, r3
 80079a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079a2:	4413      	add	r3, r2
 80079a4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80079a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	781b      	ldrb	r3, [r3, #0]
 80079b2:	011a      	lsls	r2, r3, #4
 80079b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079b6:	4413      	add	r3, r2
 80079b8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80079bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80079be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079c0:	881b      	ldrh	r3, [r3, #0]
 80079c2:	b29b      	uxth	r3, r3
 80079c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80079c8:	b29a      	uxth	r2, r3
 80079ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079cc:	801a      	strh	r2, [r3, #0]
 80079ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079d2:	2b3e      	cmp	r3, #62	@ 0x3e
 80079d4:	d921      	bls.n	8007a1a <USB_EPStartXfer+0x806>
 80079d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079da:	095b      	lsrs	r3, r3, #5
 80079dc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80079e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079e4:	f003 031f 	and.w	r3, r3, #31
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d104      	bne.n	80079f6 <USB_EPStartXfer+0x7e2>
 80079ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079f0:	3b01      	subs	r3, #1
 80079f2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80079f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079f8:	881b      	ldrh	r3, [r3, #0]
 80079fa:	b29a      	uxth	r2, r3
 80079fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	029b      	lsls	r3, r3, #10
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	4313      	orrs	r3, r2
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a12:	b29a      	uxth	r2, r3
 8007a14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a16:	801a      	strh	r2, [r3, #0]
 8007a18:	e050      	b.n	8007abc <USB_EPStartXfer+0x8a8>
 8007a1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d10a      	bne.n	8007a38 <USB_EPStartXfer+0x824>
 8007a22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a24:	881b      	ldrh	r3, [r3, #0]
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a30:	b29a      	uxth	r2, r3
 8007a32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a34:	801a      	strh	r2, [r3, #0]
 8007a36:	e041      	b.n	8007abc <USB_EPStartXfer+0x8a8>
 8007a38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a3c:	085b      	lsrs	r3, r3, #1
 8007a3e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007a42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a46:	f003 0301 	and.w	r3, r3, #1
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d004      	beq.n	8007a58 <USB_EPStartXfer+0x844>
 8007a4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a52:	3301      	adds	r3, #1
 8007a54:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007a58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a5a:	881b      	ldrh	r3, [r3, #0]
 8007a5c:	b29a      	uxth	r2, r3
 8007a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a62:	b29b      	uxth	r3, r3
 8007a64:	029b      	lsls	r3, r3, #10
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	b29a      	uxth	r2, r3
 8007a6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a6e:	801a      	strh	r2, [r3, #0]
 8007a70:	e024      	b.n	8007abc <USB_EPStartXfer+0x8a8>
 8007a72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	785b      	ldrb	r3, [r3, #1]
 8007a7e:	2b01      	cmp	r3, #1
 8007a80:	d11c      	bne.n	8007abc <USB_EPStartXfer+0x8a8>
 8007a82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	461a      	mov	r2, r3
 8007a94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a96:	4413      	add	r3, r2
 8007a98:	643b      	str	r3, [r7, #64]	@ 0x40
 8007a9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	011a      	lsls	r2, r3, #4
 8007aa8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007aaa:	4413      	add	r3, r2
 8007aac:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007ab0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ab2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ab6:	b29a      	uxth	r2, r3
 8007ab8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007aba:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007abc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ac0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	895b      	ldrh	r3, [r3, #10]
 8007ac8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007acc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ad0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	6959      	ldr	r1, [r3, #20]
 8007ad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007ae2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007ae6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007aea:	6800      	ldr	r0, [r0, #0]
 8007aec:	f001 f881 	bl	8008bf2 <USB_WritePMA>
 8007af0:	e227      	b.n	8007f42 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007af2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007af6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	6a1b      	ldr	r3, [r3, #32]
 8007afe:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007b02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	781b      	ldrb	r3, [r3, #0]
 8007b18:	009b      	lsls	r3, r3, #2
 8007b1a:	4413      	add	r3, r2
 8007b1c:	881b      	ldrh	r3, [r3, #0]
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007b24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b28:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007b2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b30:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b34:	681a      	ldr	r2, [r3, #0]
 8007b36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	441a      	add	r2, r3
 8007b46:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007b4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b5a:	b29b      	uxth	r3, r3
 8007b5c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007b5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007b6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b6e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b78:	b29b      	uxth	r3, r3
 8007b7a:	461a      	mov	r2, r3
 8007b7c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007b7e:	4413      	add	r3, r2
 8007b80:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007b82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	781b      	ldrb	r3, [r3, #0]
 8007b8e:	011a      	lsls	r2, r3, #4
 8007b90:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007b92:	4413      	add	r3, r2
 8007b94:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007b98:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007b9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b9e:	b29a      	uxth	r2, r3
 8007ba0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007ba2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007ba4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ba8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	891b      	ldrh	r3, [r3, #8]
 8007bb0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007bb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	6959      	ldr	r1, [r3, #20]
 8007bc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007bca:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007bce:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007bd2:	6800      	ldr	r0, [r0, #0]
 8007bd4:	f001 f80d 	bl	8008bf2 <USB_WritePMA>
 8007bd8:	e1b3      	b.n	8007f42 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007bda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	6a1a      	ldr	r2, [r3, #32]
 8007be6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bea:	1ad2      	subs	r2, r2, r3
 8007bec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bf0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007bf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bfc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c00:	681a      	ldr	r2, [r3, #0]
 8007c02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	781b      	ldrb	r3, [r3, #0]
 8007c0e:	009b      	lsls	r3, r3, #2
 8007c10:	4413      	add	r3, r2
 8007c12:	881b      	ldrh	r3, [r3, #0]
 8007c14:	b29b      	uxth	r3, r3
 8007c16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	f000 80c6 	beq.w	8007dac <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007c20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c24:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	673b      	str	r3, [r7, #112]	@ 0x70
 8007c2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	785b      	ldrb	r3, [r3, #1]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d177      	bne.n	8007d2c <USB_EPStartXfer+0xb18>
 8007c3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c40:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007c48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	461a      	mov	r2, r3
 8007c5a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007c5c:	4413      	add	r3, r2
 8007c5e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007c60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	011a      	lsls	r2, r3, #4
 8007c6e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007c70:	4413      	add	r3, r2
 8007c72:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007c76:	667b      	str	r3, [r7, #100]	@ 0x64
 8007c78:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c7a:	881b      	ldrh	r3, [r3, #0]
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c82:	b29a      	uxth	r2, r3
 8007c84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c86:	801a      	strh	r2, [r3, #0]
 8007c88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c8c:	2b3e      	cmp	r3, #62	@ 0x3e
 8007c8e:	d921      	bls.n	8007cd4 <USB_EPStartXfer+0xac0>
 8007c90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c94:	095b      	lsrs	r3, r3, #5
 8007c96:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007c9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c9e:	f003 031f 	and.w	r3, r3, #31
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d104      	bne.n	8007cb0 <USB_EPStartXfer+0xa9c>
 8007ca6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007caa:	3b01      	subs	r3, #1
 8007cac:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007cb0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007cb2:	881b      	ldrh	r3, [r3, #0]
 8007cb4:	b29a      	uxth	r2, r3
 8007cb6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007cba:	b29b      	uxth	r3, r3
 8007cbc:	029b      	lsls	r3, r3, #10
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	b29b      	uxth	r3, r3
 8007cc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ccc:	b29a      	uxth	r2, r3
 8007cce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007cd0:	801a      	strh	r2, [r3, #0]
 8007cd2:	e050      	b.n	8007d76 <USB_EPStartXfer+0xb62>
 8007cd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d10a      	bne.n	8007cf2 <USB_EPStartXfer+0xade>
 8007cdc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007cde:	881b      	ldrh	r3, [r3, #0]
 8007ce0:	b29b      	uxth	r3, r3
 8007ce2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ce6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cea:	b29a      	uxth	r2, r3
 8007cec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007cee:	801a      	strh	r2, [r3, #0]
 8007cf0:	e041      	b.n	8007d76 <USB_EPStartXfer+0xb62>
 8007cf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cf6:	085b      	lsrs	r3, r3, #1
 8007cf8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007cfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d00:	f003 0301 	and.w	r3, r3, #1
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d004      	beq.n	8007d12 <USB_EPStartXfer+0xafe>
 8007d08:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007d12:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d14:	881b      	ldrh	r3, [r3, #0]
 8007d16:	b29a      	uxth	r2, r3
 8007d18:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	029b      	lsls	r3, r3, #10
 8007d20:	b29b      	uxth	r3, r3
 8007d22:	4313      	orrs	r3, r2
 8007d24:	b29a      	uxth	r2, r3
 8007d26:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d28:	801a      	strh	r2, [r3, #0]
 8007d2a:	e024      	b.n	8007d76 <USB_EPStartXfer+0xb62>
 8007d2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	785b      	ldrb	r3, [r3, #1]
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d11c      	bne.n	8007d76 <USB_EPStartXfer+0xb62>
 8007d3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d40:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d4a:	b29b      	uxth	r3, r3
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007d50:	4413      	add	r3, r2
 8007d52:	673b      	str	r3, [r7, #112]	@ 0x70
 8007d54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	011a      	lsls	r2, r3, #4
 8007d62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007d64:	4413      	add	r3, r2
 8007d66:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007d6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007d6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d70:	b29a      	uxth	r2, r3
 8007d72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d74:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007d76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	895b      	ldrh	r3, [r3, #10]
 8007d82:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007d86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	6959      	ldr	r1, [r3, #20]
 8007d92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007d9c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007da0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007da4:	6800      	ldr	r0, [r0, #0]
 8007da6:	f000 ff24 	bl	8008bf2 <USB_WritePMA>
 8007daa:	e0ca      	b.n	8007f42 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007dac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007db0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	785b      	ldrb	r3, [r3, #1]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d177      	bne.n	8007eac <USB_EPStartXfer+0xc98>
 8007dbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dc0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007dc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dcc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	461a      	mov	r2, r3
 8007dda:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007ddc:	4413      	add	r3, r2
 8007dde:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007de0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007de4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	781b      	ldrb	r3, [r3, #0]
 8007dec:	011a      	lsls	r2, r3, #4
 8007dee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007df0:	4413      	add	r3, r2
 8007df2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007df6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007df8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007dfa:	881b      	ldrh	r3, [r3, #0]
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e02:	b29a      	uxth	r2, r3
 8007e04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007e06:	801a      	strh	r2, [r3, #0]
 8007e08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e0c:	2b3e      	cmp	r3, #62	@ 0x3e
 8007e0e:	d921      	bls.n	8007e54 <USB_EPStartXfer+0xc40>
 8007e10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e14:	095b      	lsrs	r3, r3, #5
 8007e16:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007e1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e1e:	f003 031f 	and.w	r3, r3, #31
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d104      	bne.n	8007e30 <USB_EPStartXfer+0xc1c>
 8007e26:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007e2a:	3b01      	subs	r3, #1
 8007e2c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007e30:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007e32:	881b      	ldrh	r3, [r3, #0]
 8007e34:	b29a      	uxth	r2, r3
 8007e36:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	029b      	lsls	r3, r3, #10
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	4313      	orrs	r3, r2
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e4c:	b29a      	uxth	r2, r3
 8007e4e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007e50:	801a      	strh	r2, [r3, #0]
 8007e52:	e05c      	b.n	8007f0e <USB_EPStartXfer+0xcfa>
 8007e54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d10a      	bne.n	8007e72 <USB_EPStartXfer+0xc5e>
 8007e5c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007e5e:	881b      	ldrh	r3, [r3, #0]
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e6a:	b29a      	uxth	r2, r3
 8007e6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007e6e:	801a      	strh	r2, [r3, #0]
 8007e70:	e04d      	b.n	8007f0e <USB_EPStartXfer+0xcfa>
 8007e72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e76:	085b      	lsrs	r3, r3, #1
 8007e78:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007e7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e80:	f003 0301 	and.w	r3, r3, #1
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d004      	beq.n	8007e92 <USB_EPStartXfer+0xc7e>
 8007e88:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007e8c:	3301      	adds	r3, #1
 8007e8e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007e92:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007e94:	881b      	ldrh	r3, [r3, #0]
 8007e96:	b29a      	uxth	r2, r3
 8007e98:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	029b      	lsls	r3, r3, #10
 8007ea0:	b29b      	uxth	r3, r3
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	b29a      	uxth	r2, r3
 8007ea6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007ea8:	801a      	strh	r2, [r3, #0]
 8007eaa:	e030      	b.n	8007f0e <USB_EPStartXfer+0xcfa>
 8007eac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	785b      	ldrb	r3, [r3, #1]
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d128      	bne.n	8007f0e <USB_EPStartXfer+0xcfa>
 8007ebc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ec0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007eca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ece:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	461a      	mov	r2, r3
 8007edc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007ee0:	4413      	add	r3, r2
 8007ee2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007ee6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	011a      	lsls	r2, r3, #4
 8007ef4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007ef8:	4413      	add	r3, r2
 8007efa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007efe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007f02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f06:	b29a      	uxth	r2, r3
 8007f08:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007f0c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007f0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	891b      	ldrh	r3, [r3, #8]
 8007f1a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007f1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	6959      	ldr	r1, [r3, #20]
 8007f2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007f34:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007f38:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007f3c:	6800      	ldr	r0, [r0, #0]
 8007f3e:	f000 fe58 	bl	8008bf2 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007f42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f4a:	681a      	ldr	r2, [r3, #0]
 8007f4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	009b      	lsls	r3, r3, #2
 8007f5a:	4413      	add	r3, r2
 8007f5c:	881b      	ldrh	r3, [r3, #0]
 8007f5e:	b29b      	uxth	r3, r3
 8007f60:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f68:	817b      	strh	r3, [r7, #10]
 8007f6a:	897b      	ldrh	r3, [r7, #10]
 8007f6c:	f083 0310 	eor.w	r3, r3, #16
 8007f70:	817b      	strh	r3, [r7, #10]
 8007f72:	897b      	ldrh	r3, [r7, #10]
 8007f74:	f083 0320 	eor.w	r3, r3, #32
 8007f78:	817b      	strh	r3, [r7, #10]
 8007f7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f82:	681a      	ldr	r2, [r3, #0]
 8007f84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	009b      	lsls	r3, r3, #2
 8007f92:	441a      	add	r2, r3
 8007f94:	897b      	ldrh	r3, [r7, #10]
 8007f96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007fa2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	8013      	strh	r3, [r2, #0]
 8007faa:	f000 bcde 	b.w	800896a <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007fae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	7b1b      	ldrb	r3, [r3, #12]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	f040 80bb 	bne.w	8008136 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007fc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	699a      	ldr	r2, [r3, #24]
 8007fcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	691b      	ldr	r3, [r3, #16]
 8007fd8:	429a      	cmp	r2, r3
 8007fda:	d917      	bls.n	800800c <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8007fdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fe0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	691b      	ldr	r3, [r3, #16]
 8007fe8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8007fec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ff0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	699a      	ldr	r2, [r3, #24]
 8007ff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ffc:	1ad2      	subs	r2, r2, r3
 8007ffe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008002:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	619a      	str	r2, [r3, #24]
 800800a:	e00e      	b.n	800802a <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800800c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008010:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	699b      	ldr	r3, [r3, #24]
 8008018:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800801c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008020:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	2200      	movs	r2, #0
 8008028:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800802a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800802e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008038:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800803c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008046:	b29b      	uxth	r3, r3
 8008048:	461a      	mov	r2, r3
 800804a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800804e:	4413      	add	r3, r2
 8008050:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008054:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008058:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	011a      	lsls	r2, r3, #4
 8008062:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008066:	4413      	add	r3, r2
 8008068:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800806c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008070:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008074:	881b      	ldrh	r3, [r3, #0]
 8008076:	b29b      	uxth	r3, r3
 8008078:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800807c:	b29a      	uxth	r2, r3
 800807e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008082:	801a      	strh	r2, [r3, #0]
 8008084:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008088:	2b3e      	cmp	r3, #62	@ 0x3e
 800808a:	d924      	bls.n	80080d6 <USB_EPStartXfer+0xec2>
 800808c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008090:	095b      	lsrs	r3, r3, #5
 8008092:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008096:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800809a:	f003 031f 	and.w	r3, r3, #31
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d104      	bne.n	80080ac <USB_EPStartXfer+0xe98>
 80080a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80080a6:	3b01      	subs	r3, #1
 80080a8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80080ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80080b0:	881b      	ldrh	r3, [r3, #0]
 80080b2:	b29a      	uxth	r2, r3
 80080b4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80080b8:	b29b      	uxth	r3, r3
 80080ba:	029b      	lsls	r3, r3, #10
 80080bc:	b29b      	uxth	r3, r3
 80080be:	4313      	orrs	r3, r2
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080ca:	b29a      	uxth	r2, r3
 80080cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80080d0:	801a      	strh	r2, [r3, #0]
 80080d2:	f000 bc10 	b.w	80088f6 <USB_EPStartXfer+0x16e2>
 80080d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d10c      	bne.n	80080f8 <USB_EPStartXfer+0xee4>
 80080de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80080e2:	881b      	ldrh	r3, [r3, #0]
 80080e4:	b29b      	uxth	r3, r3
 80080e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080ee:	b29a      	uxth	r2, r3
 80080f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80080f4:	801a      	strh	r2, [r3, #0]
 80080f6:	e3fe      	b.n	80088f6 <USB_EPStartXfer+0x16e2>
 80080f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080fc:	085b      	lsrs	r3, r3, #1
 80080fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008102:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008106:	f003 0301 	and.w	r3, r3, #1
 800810a:	2b00      	cmp	r3, #0
 800810c:	d004      	beq.n	8008118 <USB_EPStartXfer+0xf04>
 800810e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008112:	3301      	adds	r3, #1
 8008114:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008118:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800811c:	881b      	ldrh	r3, [r3, #0]
 800811e:	b29a      	uxth	r2, r3
 8008120:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008124:	b29b      	uxth	r3, r3
 8008126:	029b      	lsls	r3, r3, #10
 8008128:	b29b      	uxth	r3, r3
 800812a:	4313      	orrs	r3, r2
 800812c:	b29a      	uxth	r2, r3
 800812e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008132:	801a      	strh	r2, [r3, #0]
 8008134:	e3df      	b.n	80088f6 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008136:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800813a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	78db      	ldrb	r3, [r3, #3]
 8008142:	2b02      	cmp	r3, #2
 8008144:	f040 8218 	bne.w	8008578 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008148:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800814c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	785b      	ldrb	r3, [r3, #1]
 8008154:	2b00      	cmp	r3, #0
 8008156:	f040 809d 	bne.w	8008294 <USB_EPStartXfer+0x1080>
 800815a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800815e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008168:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800816c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008176:	b29b      	uxth	r3, r3
 8008178:	461a      	mov	r2, r3
 800817a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800817e:	4413      	add	r3, r2
 8008180:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008184:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008188:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	781b      	ldrb	r3, [r3, #0]
 8008190:	011a      	lsls	r2, r3, #4
 8008192:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008196:	4413      	add	r3, r2
 8008198:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800819c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80081a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80081a4:	881b      	ldrh	r3, [r3, #0]
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80081ac:	b29a      	uxth	r2, r3
 80081ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80081b2:	801a      	strh	r2, [r3, #0]
 80081b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	691b      	ldr	r3, [r3, #16]
 80081c0:	2b3e      	cmp	r3, #62	@ 0x3e
 80081c2:	d92b      	bls.n	800821c <USB_EPStartXfer+0x1008>
 80081c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	691b      	ldr	r3, [r3, #16]
 80081d0:	095b      	lsrs	r3, r3, #5
 80081d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80081d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	691b      	ldr	r3, [r3, #16]
 80081e2:	f003 031f 	and.w	r3, r3, #31
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d104      	bne.n	80081f4 <USB_EPStartXfer+0xfe0>
 80081ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081ee:	3b01      	subs	r3, #1
 80081f0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80081f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80081f8:	881b      	ldrh	r3, [r3, #0]
 80081fa:	b29a      	uxth	r2, r3
 80081fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008200:	b29b      	uxth	r3, r3
 8008202:	029b      	lsls	r3, r3, #10
 8008204:	b29b      	uxth	r3, r3
 8008206:	4313      	orrs	r3, r2
 8008208:	b29b      	uxth	r3, r3
 800820a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800820e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008212:	b29a      	uxth	r2, r3
 8008214:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008218:	801a      	strh	r2, [r3, #0]
 800821a:	e070      	b.n	80082fe <USB_EPStartXfer+0x10ea>
 800821c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008220:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	691b      	ldr	r3, [r3, #16]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d10c      	bne.n	8008246 <USB_EPStartXfer+0x1032>
 800822c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008230:	881b      	ldrh	r3, [r3, #0]
 8008232:	b29b      	uxth	r3, r3
 8008234:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008238:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800823c:	b29a      	uxth	r2, r3
 800823e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008242:	801a      	strh	r2, [r3, #0]
 8008244:	e05b      	b.n	80082fe <USB_EPStartXfer+0x10ea>
 8008246:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800824a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	691b      	ldr	r3, [r3, #16]
 8008252:	085b      	lsrs	r3, r3, #1
 8008254:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008258:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800825c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	691b      	ldr	r3, [r3, #16]
 8008264:	f003 0301 	and.w	r3, r3, #1
 8008268:	2b00      	cmp	r3, #0
 800826a:	d004      	beq.n	8008276 <USB_EPStartXfer+0x1062>
 800826c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008270:	3301      	adds	r3, #1
 8008272:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008276:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800827a:	881b      	ldrh	r3, [r3, #0]
 800827c:	b29a      	uxth	r2, r3
 800827e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008282:	b29b      	uxth	r3, r3
 8008284:	029b      	lsls	r3, r3, #10
 8008286:	b29b      	uxth	r3, r3
 8008288:	4313      	orrs	r3, r2
 800828a:	b29a      	uxth	r2, r3
 800828c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008290:	801a      	strh	r2, [r3, #0]
 8008292:	e034      	b.n	80082fe <USB_EPStartXfer+0x10ea>
 8008294:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008298:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	785b      	ldrb	r3, [r3, #1]
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	d12c      	bne.n	80082fe <USB_EPStartXfer+0x10ea>
 80082a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80082b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80082c0:	b29b      	uxth	r3, r3
 80082c2:	461a      	mov	r2, r3
 80082c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80082c8:	4413      	add	r3, r2
 80082ca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80082ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	781b      	ldrb	r3, [r3, #0]
 80082da:	011a      	lsls	r2, r3, #4
 80082dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80082e0:	4413      	add	r3, r2
 80082e2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80082e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80082ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	691b      	ldr	r3, [r3, #16]
 80082f6:	b29a      	uxth	r2, r3
 80082f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80082fc:	801a      	strh	r2, [r3, #0]
 80082fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008302:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800830c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008310:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	785b      	ldrb	r3, [r3, #1]
 8008318:	2b00      	cmp	r3, #0
 800831a:	f040 809d 	bne.w	8008458 <USB_EPStartXfer+0x1244>
 800831e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008322:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800832c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008330:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800833a:	b29b      	uxth	r3, r3
 800833c:	461a      	mov	r2, r3
 800833e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008342:	4413      	add	r3, r2
 8008344:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008348:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800834c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	781b      	ldrb	r3, [r3, #0]
 8008354:	011a      	lsls	r2, r3, #4
 8008356:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800835a:	4413      	add	r3, r2
 800835c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008360:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008364:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008368:	881b      	ldrh	r3, [r3, #0]
 800836a:	b29b      	uxth	r3, r3
 800836c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008370:	b29a      	uxth	r2, r3
 8008372:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008376:	801a      	strh	r2, [r3, #0]
 8008378:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800837c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	691b      	ldr	r3, [r3, #16]
 8008384:	2b3e      	cmp	r3, #62	@ 0x3e
 8008386:	d92b      	bls.n	80083e0 <USB_EPStartXfer+0x11cc>
 8008388:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800838c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	691b      	ldr	r3, [r3, #16]
 8008394:	095b      	lsrs	r3, r3, #5
 8008396:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800839a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800839e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	691b      	ldr	r3, [r3, #16]
 80083a6:	f003 031f 	and.w	r3, r3, #31
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d104      	bne.n	80083b8 <USB_EPStartXfer+0x11a4>
 80083ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083b2:	3b01      	subs	r3, #1
 80083b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80083b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80083bc:	881b      	ldrh	r3, [r3, #0]
 80083be:	b29a      	uxth	r2, r3
 80083c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083c4:	b29b      	uxth	r3, r3
 80083c6:	029b      	lsls	r3, r3, #10
 80083c8:	b29b      	uxth	r3, r3
 80083ca:	4313      	orrs	r3, r2
 80083cc:	b29b      	uxth	r3, r3
 80083ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083d6:	b29a      	uxth	r2, r3
 80083d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80083dc:	801a      	strh	r2, [r3, #0]
 80083de:	e069      	b.n	80084b4 <USB_EPStartXfer+0x12a0>
 80083e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	691b      	ldr	r3, [r3, #16]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d10c      	bne.n	800840a <USB_EPStartXfer+0x11f6>
 80083f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80083f4:	881b      	ldrh	r3, [r3, #0]
 80083f6:	b29b      	uxth	r3, r3
 80083f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008400:	b29a      	uxth	r2, r3
 8008402:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008406:	801a      	strh	r2, [r3, #0]
 8008408:	e054      	b.n	80084b4 <USB_EPStartXfer+0x12a0>
 800840a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800840e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	691b      	ldr	r3, [r3, #16]
 8008416:	085b      	lsrs	r3, r3, #1
 8008418:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800841c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008420:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	691b      	ldr	r3, [r3, #16]
 8008428:	f003 0301 	and.w	r3, r3, #1
 800842c:	2b00      	cmp	r3, #0
 800842e:	d004      	beq.n	800843a <USB_EPStartXfer+0x1226>
 8008430:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008434:	3301      	adds	r3, #1
 8008436:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800843a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800843e:	881b      	ldrh	r3, [r3, #0]
 8008440:	b29a      	uxth	r2, r3
 8008442:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008446:	b29b      	uxth	r3, r3
 8008448:	029b      	lsls	r3, r3, #10
 800844a:	b29b      	uxth	r3, r3
 800844c:	4313      	orrs	r3, r2
 800844e:	b29a      	uxth	r2, r3
 8008450:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008454:	801a      	strh	r2, [r3, #0]
 8008456:	e02d      	b.n	80084b4 <USB_EPStartXfer+0x12a0>
 8008458:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800845c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	785b      	ldrb	r3, [r3, #1]
 8008464:	2b01      	cmp	r3, #1
 8008466:	d125      	bne.n	80084b4 <USB_EPStartXfer+0x12a0>
 8008468:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800846c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008476:	b29b      	uxth	r3, r3
 8008478:	461a      	mov	r2, r3
 800847a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800847e:	4413      	add	r3, r2
 8008480:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008484:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008488:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	781b      	ldrb	r3, [r3, #0]
 8008490:	011a      	lsls	r2, r3, #4
 8008492:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008496:	4413      	add	r3, r2
 8008498:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800849c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80084a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	691b      	ldr	r3, [r3, #16]
 80084ac:	b29a      	uxth	r2, r3
 80084ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80084b2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80084b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	69db      	ldr	r3, [r3, #28]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	f000 8218 	beq.w	80088f6 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80084c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80084ce:	681a      	ldr	r2, [r3, #0]
 80084d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	009b      	lsls	r3, r3, #2
 80084de:	4413      	add	r3, r2
 80084e0:	881b      	ldrh	r3, [r3, #0]
 80084e2:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80084e6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80084ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d005      	beq.n	80084fe <USB_EPStartXfer+0x12ea>
 80084f2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80084f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d10d      	bne.n	800851a <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80084fe:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008502:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008506:	2b00      	cmp	r3, #0
 8008508:	f040 81f5 	bne.w	80088f6 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800850c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008510:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008514:	2b00      	cmp	r3, #0
 8008516:	f040 81ee 	bne.w	80088f6 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800851a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800851e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008522:	681a      	ldr	r2, [r3, #0]
 8008524:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008528:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	781b      	ldrb	r3, [r3, #0]
 8008530:	009b      	lsls	r3, r3, #2
 8008532:	4413      	add	r3, r2
 8008534:	881b      	ldrh	r3, [r3, #0]
 8008536:	b29b      	uxth	r3, r3
 8008538:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800853c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008540:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8008544:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008548:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800854c:	681a      	ldr	r2, [r3, #0]
 800854e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008552:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	781b      	ldrb	r3, [r3, #0]
 800855a:	009b      	lsls	r3, r3, #2
 800855c:	441a      	add	r2, r3
 800855e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8008562:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008566:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800856a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800856e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008572:	b29b      	uxth	r3, r3
 8008574:	8013      	strh	r3, [r2, #0]
 8008576:	e1be      	b.n	80088f6 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008578:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800857c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	78db      	ldrb	r3, [r3, #3]
 8008584:	2b01      	cmp	r3, #1
 8008586:	f040 81b4 	bne.w	80088f2 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800858a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800858e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	699a      	ldr	r2, [r3, #24]
 8008596:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800859a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	691b      	ldr	r3, [r3, #16]
 80085a2:	429a      	cmp	r2, r3
 80085a4:	d917      	bls.n	80085d6 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80085a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	691b      	ldr	r3, [r3, #16]
 80085b2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 80085b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	699a      	ldr	r2, [r3, #24]
 80085c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085c6:	1ad2      	subs	r2, r2, r3
 80085c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	619a      	str	r2, [r3, #24]
 80085d4:	e00e      	b.n	80085f4 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80085d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	699b      	ldr	r3, [r3, #24]
 80085e2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 80085e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	2200      	movs	r2, #0
 80085f2:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80085f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	785b      	ldrb	r3, [r3, #1]
 8008600:	2b00      	cmp	r3, #0
 8008602:	f040 8085 	bne.w	8008710 <USB_EPStartXfer+0x14fc>
 8008606:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800860a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008614:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008618:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008622:	b29b      	uxth	r3, r3
 8008624:	461a      	mov	r2, r3
 8008626:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800862a:	4413      	add	r3, r2
 800862c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008630:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008634:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	781b      	ldrb	r3, [r3, #0]
 800863c:	011a      	lsls	r2, r3, #4
 800863e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008642:	4413      	add	r3, r2
 8008644:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008648:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800864c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008650:	881b      	ldrh	r3, [r3, #0]
 8008652:	b29b      	uxth	r3, r3
 8008654:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008658:	b29a      	uxth	r2, r3
 800865a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800865e:	801a      	strh	r2, [r3, #0]
 8008660:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008664:	2b3e      	cmp	r3, #62	@ 0x3e
 8008666:	d923      	bls.n	80086b0 <USB_EPStartXfer+0x149c>
 8008668:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800866c:	095b      	lsrs	r3, r3, #5
 800866e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008672:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008676:	f003 031f 	and.w	r3, r3, #31
 800867a:	2b00      	cmp	r3, #0
 800867c:	d104      	bne.n	8008688 <USB_EPStartXfer+0x1474>
 800867e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008682:	3b01      	subs	r3, #1
 8008684:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008688:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800868c:	881b      	ldrh	r3, [r3, #0]
 800868e:	b29a      	uxth	r2, r3
 8008690:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008694:	b29b      	uxth	r3, r3
 8008696:	029b      	lsls	r3, r3, #10
 8008698:	b29b      	uxth	r3, r3
 800869a:	4313      	orrs	r3, r2
 800869c:	b29b      	uxth	r3, r3
 800869e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086a6:	b29a      	uxth	r2, r3
 80086a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80086ac:	801a      	strh	r2, [r3, #0]
 80086ae:	e060      	b.n	8008772 <USB_EPStartXfer+0x155e>
 80086b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d10c      	bne.n	80086d2 <USB_EPStartXfer+0x14be>
 80086b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80086bc:	881b      	ldrh	r3, [r3, #0]
 80086be:	b29b      	uxth	r3, r3
 80086c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086c8:	b29a      	uxth	r2, r3
 80086ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80086ce:	801a      	strh	r2, [r3, #0]
 80086d0:	e04f      	b.n	8008772 <USB_EPStartXfer+0x155e>
 80086d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086d6:	085b      	lsrs	r3, r3, #1
 80086d8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80086dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086e0:	f003 0301 	and.w	r3, r3, #1
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d004      	beq.n	80086f2 <USB_EPStartXfer+0x14de>
 80086e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80086ec:	3301      	adds	r3, #1
 80086ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80086f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80086f6:	881b      	ldrh	r3, [r3, #0]
 80086f8:	b29a      	uxth	r2, r3
 80086fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80086fe:	b29b      	uxth	r3, r3
 8008700:	029b      	lsls	r3, r3, #10
 8008702:	b29b      	uxth	r3, r3
 8008704:	4313      	orrs	r3, r2
 8008706:	b29a      	uxth	r2, r3
 8008708:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800870c:	801a      	strh	r2, [r3, #0]
 800870e:	e030      	b.n	8008772 <USB_EPStartXfer+0x155e>
 8008710:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008714:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	785b      	ldrb	r3, [r3, #1]
 800871c:	2b01      	cmp	r3, #1
 800871e:	d128      	bne.n	8008772 <USB_EPStartXfer+0x155e>
 8008720:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008724:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800872e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008732:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800873c:	b29b      	uxth	r3, r3
 800873e:	461a      	mov	r2, r3
 8008740:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008744:	4413      	add	r3, r2
 8008746:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800874a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800874e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	781b      	ldrb	r3, [r3, #0]
 8008756:	011a      	lsls	r2, r3, #4
 8008758:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800875c:	4413      	add	r3, r2
 800875e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008762:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008766:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800876a:	b29a      	uxth	r2, r3
 800876c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8008770:	801a      	strh	r2, [r3, #0]
 8008772:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008776:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008780:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008784:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	785b      	ldrb	r3, [r3, #1]
 800878c:	2b00      	cmp	r3, #0
 800878e:	f040 8085 	bne.w	800889c <USB_EPStartXfer+0x1688>
 8008792:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008796:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80087a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80087ae:	b29b      	uxth	r3, r3
 80087b0:	461a      	mov	r2, r3
 80087b2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80087b6:	4413      	add	r3, r2
 80087b8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80087bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	781b      	ldrb	r3, [r3, #0]
 80087c8:	011a      	lsls	r2, r3, #4
 80087ca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80087ce:	4413      	add	r3, r2
 80087d0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80087d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80087d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80087dc:	881b      	ldrh	r3, [r3, #0]
 80087de:	b29b      	uxth	r3, r3
 80087e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80087e4:	b29a      	uxth	r2, r3
 80087e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80087ea:	801a      	strh	r2, [r3, #0]
 80087ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087f0:	2b3e      	cmp	r3, #62	@ 0x3e
 80087f2:	d923      	bls.n	800883c <USB_EPStartXfer+0x1628>
 80087f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087f8:	095b      	lsrs	r3, r3, #5
 80087fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80087fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008802:	f003 031f 	and.w	r3, r3, #31
 8008806:	2b00      	cmp	r3, #0
 8008808:	d104      	bne.n	8008814 <USB_EPStartXfer+0x1600>
 800880a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800880e:	3b01      	subs	r3, #1
 8008810:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008814:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008818:	881b      	ldrh	r3, [r3, #0]
 800881a:	b29a      	uxth	r2, r3
 800881c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008820:	b29b      	uxth	r3, r3
 8008822:	029b      	lsls	r3, r3, #10
 8008824:	b29b      	uxth	r3, r3
 8008826:	4313      	orrs	r3, r2
 8008828:	b29b      	uxth	r3, r3
 800882a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800882e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008832:	b29a      	uxth	r2, r3
 8008834:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008838:	801a      	strh	r2, [r3, #0]
 800883a:	e05c      	b.n	80088f6 <USB_EPStartXfer+0x16e2>
 800883c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008840:	2b00      	cmp	r3, #0
 8008842:	d10c      	bne.n	800885e <USB_EPStartXfer+0x164a>
 8008844:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008848:	881b      	ldrh	r3, [r3, #0]
 800884a:	b29b      	uxth	r3, r3
 800884c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008850:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008854:	b29a      	uxth	r2, r3
 8008856:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800885a:	801a      	strh	r2, [r3, #0]
 800885c:	e04b      	b.n	80088f6 <USB_EPStartXfer+0x16e2>
 800885e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008862:	085b      	lsrs	r3, r3, #1
 8008864:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008868:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800886c:	f003 0301 	and.w	r3, r3, #1
 8008870:	2b00      	cmp	r3, #0
 8008872:	d004      	beq.n	800887e <USB_EPStartXfer+0x166a>
 8008874:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008878:	3301      	adds	r3, #1
 800887a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800887e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008882:	881b      	ldrh	r3, [r3, #0]
 8008884:	b29a      	uxth	r2, r3
 8008886:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800888a:	b29b      	uxth	r3, r3
 800888c:	029b      	lsls	r3, r3, #10
 800888e:	b29b      	uxth	r3, r3
 8008890:	4313      	orrs	r3, r2
 8008892:	b29a      	uxth	r2, r3
 8008894:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008898:	801a      	strh	r2, [r3, #0]
 800889a:	e02c      	b.n	80088f6 <USB_EPStartXfer+0x16e2>
 800889c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	785b      	ldrb	r3, [r3, #1]
 80088a8:	2b01      	cmp	r3, #1
 80088aa:	d124      	bne.n	80088f6 <USB_EPStartXfer+0x16e2>
 80088ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80088ba:	b29b      	uxth	r3, r3
 80088bc:	461a      	mov	r2, r3
 80088be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80088c2:	4413      	add	r3, r2
 80088c4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80088c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	781b      	ldrb	r3, [r3, #0]
 80088d4:	011a      	lsls	r2, r3, #4
 80088d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80088da:	4413      	add	r3, r2
 80088dc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80088e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80088e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088e8:	b29a      	uxth	r2, r3
 80088ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80088ee:	801a      	strh	r2, [r3, #0]
 80088f0:	e001      	b.n	80088f6 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80088f2:	2301      	movs	r3, #1
 80088f4:	e03a      	b.n	800896c <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80088f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80088fe:	681a      	ldr	r2, [r3, #0]
 8008900:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008904:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	781b      	ldrb	r3, [r3, #0]
 800890c:	009b      	lsls	r3, r3, #2
 800890e:	4413      	add	r3, r2
 8008910:	881b      	ldrh	r3, [r3, #0]
 8008912:	b29b      	uxth	r3, r3
 8008914:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008918:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800891c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008920:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008924:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008928:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800892c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008930:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008934:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008938:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800893c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008940:	681a      	ldr	r2, [r3, #0]
 8008942:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008946:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	781b      	ldrb	r3, [r3, #0]
 800894e:	009b      	lsls	r3, r3, #2
 8008950:	441a      	add	r2, r3
 8008952:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008956:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800895a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800895e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008962:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008966:	b29b      	uxth	r3, r3
 8008968:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800896a:	2300      	movs	r3, #0
}
 800896c:	4618      	mov	r0, r3
 800896e:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}

08008976 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008976:	b480      	push	{r7}
 8008978:	b085      	sub	sp, #20
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]
 800897e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	785b      	ldrb	r3, [r3, #1]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d020      	beq.n	80089ca <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008988:	687a      	ldr	r2, [r7, #4]
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	781b      	ldrb	r3, [r3, #0]
 800898e:	009b      	lsls	r3, r3, #2
 8008990:	4413      	add	r3, r2
 8008992:	881b      	ldrh	r3, [r3, #0]
 8008994:	b29b      	uxth	r3, r3
 8008996:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800899a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800899e:	81bb      	strh	r3, [r7, #12]
 80089a0:	89bb      	ldrh	r3, [r7, #12]
 80089a2:	f083 0310 	eor.w	r3, r3, #16
 80089a6:	81bb      	strh	r3, [r7, #12]
 80089a8:	687a      	ldr	r2, [r7, #4]
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	781b      	ldrb	r3, [r3, #0]
 80089ae:	009b      	lsls	r3, r3, #2
 80089b0:	441a      	add	r2, r3
 80089b2:	89bb      	ldrh	r3, [r7, #12]
 80089b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80089b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80089bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80089c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089c4:	b29b      	uxth	r3, r3
 80089c6:	8013      	strh	r3, [r2, #0]
 80089c8:	e01f      	b.n	8008a0a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80089ca:	687a      	ldr	r2, [r7, #4]
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	781b      	ldrb	r3, [r3, #0]
 80089d0:	009b      	lsls	r3, r3, #2
 80089d2:	4413      	add	r3, r2
 80089d4:	881b      	ldrh	r3, [r3, #0]
 80089d6:	b29b      	uxth	r3, r3
 80089d8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80089dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089e0:	81fb      	strh	r3, [r7, #14]
 80089e2:	89fb      	ldrh	r3, [r7, #14]
 80089e4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80089e8:	81fb      	strh	r3, [r7, #14]
 80089ea:	687a      	ldr	r2, [r7, #4]
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	781b      	ldrb	r3, [r3, #0]
 80089f0:	009b      	lsls	r3, r3, #2
 80089f2:	441a      	add	r2, r3
 80089f4:	89fb      	ldrh	r3, [r7, #14]
 80089f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80089fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80089fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a06:	b29b      	uxth	r3, r3
 8008a08:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008a0a:	2300      	movs	r3, #0
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3714      	adds	r7, #20
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bc80      	pop	{r7}
 8008a14:	4770      	bx	lr

08008a16 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008a16:	b480      	push	{r7}
 8008a18:	b087      	sub	sp, #28
 8008a1a:	af00      	add	r7, sp, #0
 8008a1c:	6078      	str	r0, [r7, #4]
 8008a1e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	7b1b      	ldrb	r3, [r3, #12]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	f040 809d 	bne.w	8008b64 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	785b      	ldrb	r3, [r3, #1]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d04c      	beq.n	8008acc <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008a32:	687a      	ldr	r2, [r7, #4]
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	781b      	ldrb	r3, [r3, #0]
 8008a38:	009b      	lsls	r3, r3, #2
 8008a3a:	4413      	add	r3, r2
 8008a3c:	881b      	ldrh	r3, [r3, #0]
 8008a3e:	823b      	strh	r3, [r7, #16]
 8008a40:	8a3b      	ldrh	r3, [r7, #16]
 8008a42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d01b      	beq.n	8008a82 <USB_EPClearStall+0x6c>
 8008a4a:	687a      	ldr	r2, [r7, #4]
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	781b      	ldrb	r3, [r3, #0]
 8008a50:	009b      	lsls	r3, r3, #2
 8008a52:	4413      	add	r3, r2
 8008a54:	881b      	ldrh	r3, [r3, #0]
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a60:	81fb      	strh	r3, [r7, #14]
 8008a62:	687a      	ldr	r2, [r7, #4]
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	781b      	ldrb	r3, [r3, #0]
 8008a68:	009b      	lsls	r3, r3, #2
 8008a6a:	441a      	add	r2, r3
 8008a6c:	89fb      	ldrh	r3, [r7, #14]
 8008a6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a7a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008a7e:	b29b      	uxth	r3, r3
 8008a80:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	78db      	ldrb	r3, [r3, #3]
 8008a86:	2b01      	cmp	r3, #1
 8008a88:	d06c      	beq.n	8008b64 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008a8a:	687a      	ldr	r2, [r7, #4]
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	781b      	ldrb	r3, [r3, #0]
 8008a90:	009b      	lsls	r3, r3, #2
 8008a92:	4413      	add	r3, r2
 8008a94:	881b      	ldrh	r3, [r3, #0]
 8008a96:	b29b      	uxth	r3, r3
 8008a98:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008aa0:	81bb      	strh	r3, [r7, #12]
 8008aa2:	89bb      	ldrh	r3, [r7, #12]
 8008aa4:	f083 0320 	eor.w	r3, r3, #32
 8008aa8:	81bb      	strh	r3, [r7, #12]
 8008aaa:	687a      	ldr	r2, [r7, #4]
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	781b      	ldrb	r3, [r3, #0]
 8008ab0:	009b      	lsls	r3, r3, #2
 8008ab2:	441a      	add	r2, r3
 8008ab4:	89bb      	ldrh	r3, [r7, #12]
 8008ab6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008aba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008abe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ac2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ac6:	b29b      	uxth	r3, r3
 8008ac8:	8013      	strh	r3, [r2, #0]
 8008aca:	e04b      	b.n	8008b64 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008acc:	687a      	ldr	r2, [r7, #4]
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	781b      	ldrb	r3, [r3, #0]
 8008ad2:	009b      	lsls	r3, r3, #2
 8008ad4:	4413      	add	r3, r2
 8008ad6:	881b      	ldrh	r3, [r3, #0]
 8008ad8:	82fb      	strh	r3, [r7, #22]
 8008ada:	8afb      	ldrh	r3, [r7, #22]
 8008adc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d01b      	beq.n	8008b1c <USB_EPClearStall+0x106>
 8008ae4:	687a      	ldr	r2, [r7, #4]
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	781b      	ldrb	r3, [r3, #0]
 8008aea:	009b      	lsls	r3, r3, #2
 8008aec:	4413      	add	r3, r2
 8008aee:	881b      	ldrh	r3, [r3, #0]
 8008af0:	b29b      	uxth	r3, r3
 8008af2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008af6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008afa:	82bb      	strh	r3, [r7, #20]
 8008afc:	687a      	ldr	r2, [r7, #4]
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	781b      	ldrb	r3, [r3, #0]
 8008b02:	009b      	lsls	r3, r3, #2
 8008b04:	441a      	add	r2, r3
 8008b06:	8abb      	ldrh	r3, [r7, #20]
 8008b08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b10:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008b14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b18:	b29b      	uxth	r3, r3
 8008b1a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008b1c:	687a      	ldr	r2, [r7, #4]
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	781b      	ldrb	r3, [r3, #0]
 8008b22:	009b      	lsls	r3, r3, #2
 8008b24:	4413      	add	r3, r2
 8008b26:	881b      	ldrh	r3, [r3, #0]
 8008b28:	b29b      	uxth	r3, r3
 8008b2a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008b2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b32:	827b      	strh	r3, [r7, #18]
 8008b34:	8a7b      	ldrh	r3, [r7, #18]
 8008b36:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008b3a:	827b      	strh	r3, [r7, #18]
 8008b3c:	8a7b      	ldrh	r3, [r7, #18]
 8008b3e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008b42:	827b      	strh	r3, [r7, #18]
 8008b44:	687a      	ldr	r2, [r7, #4]
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	781b      	ldrb	r3, [r3, #0]
 8008b4a:	009b      	lsls	r3, r3, #2
 8008b4c:	441a      	add	r2, r3
 8008b4e:	8a7b      	ldrh	r3, [r7, #18]
 8008b50:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b54:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b60:	b29b      	uxth	r3, r3
 8008b62:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008b64:	2300      	movs	r3, #0
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	371c      	adds	r7, #28
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bc80      	pop	{r7}
 8008b6e:	4770      	bx	lr

08008b70 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b083      	sub	sp, #12
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	460b      	mov	r3, r1
 8008b7a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008b7c:	78fb      	ldrb	r3, [r7, #3]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d103      	bne.n	8008b8a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2280      	movs	r2, #128	@ 0x80
 8008b86:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8008b8a:	2300      	movs	r3, #0
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	370c      	adds	r7, #12
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bc80      	pop	{r7}
 8008b94:	4770      	bx	lr

08008b96 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008b96:	b480      	push	{r7}
 8008b98:	b083      	sub	sp, #12
 8008b9a:	af00      	add	r7, sp, #0
 8008b9c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008b9e:	2300      	movs	r3, #0
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	370c      	adds	r7, #12
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bc80      	pop	{r7}
 8008ba8:	4770      	bx	lr

08008baa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008baa:	b480      	push	{r7}
 8008bac:	b083      	sub	sp, #12
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008bb2:	2300      	movs	r3, #0
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	370c      	adds	r7, #12
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bc80      	pop	{r7}
 8008bbc:	4770      	bx	lr

08008bbe <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8008bbe:	b480      	push	{r7}
 8008bc0:	b085      	sub	sp, #20
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008bcc:	b29b      	uxth	r3, r3
 8008bce:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3714      	adds	r7, #20
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bc80      	pop	{r7}
 8008bda:	4770      	bx	lr

08008bdc <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b083      	sub	sp, #12
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
 8008be4:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008be6:	2300      	movs	r3, #0
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	370c      	adds	r7, #12
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bc80      	pop	{r7}
 8008bf0:	4770      	bx	lr

08008bf2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008bf2:	b480      	push	{r7}
 8008bf4:	b08b      	sub	sp, #44	@ 0x2c
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	60f8      	str	r0, [r7, #12]
 8008bfa:	60b9      	str	r1, [r7, #8]
 8008bfc:	4611      	mov	r1, r2
 8008bfe:	461a      	mov	r2, r3
 8008c00:	460b      	mov	r3, r1
 8008c02:	80fb      	strh	r3, [r7, #6]
 8008c04:	4613      	mov	r3, r2
 8008c06:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008c08:	88bb      	ldrh	r3, [r7, #4]
 8008c0a:	3301      	adds	r3, #1
 8008c0c:	085b      	lsrs	r3, r3, #1
 8008c0e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008c18:	88fb      	ldrh	r3, [r7, #6]
 8008c1a:	005a      	lsls	r2, r3, #1
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	4413      	add	r3, r2
 8008c20:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008c24:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008c26:	69bb      	ldr	r3, [r7, #24]
 8008c28:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c2a:	e01e      	b.n	8008c6a <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8008c2c:	69fb      	ldr	r3, [r7, #28]
 8008c2e:	781b      	ldrb	r3, [r3, #0]
 8008c30:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008c32:	69fb      	ldr	r3, [r7, #28]
 8008c34:	3301      	adds	r3, #1
 8008c36:	781b      	ldrb	r3, [r3, #0]
 8008c38:	021b      	lsls	r3, r3, #8
 8008c3a:	b21a      	sxth	r2, r3
 8008c3c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008c40:	4313      	orrs	r3, r2
 8008c42:	b21b      	sxth	r3, r3
 8008c44:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8008c46:	6a3b      	ldr	r3, [r7, #32]
 8008c48:	8a7a      	ldrh	r2, [r7, #18]
 8008c4a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008c4c:	6a3b      	ldr	r3, [r7, #32]
 8008c4e:	3302      	adds	r3, #2
 8008c50:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008c52:	6a3b      	ldr	r3, [r7, #32]
 8008c54:	3302      	adds	r3, #2
 8008c56:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8008c58:	69fb      	ldr	r3, [r7, #28]
 8008c5a:	3301      	adds	r3, #1
 8008c5c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008c5e:	69fb      	ldr	r3, [r7, #28]
 8008c60:	3301      	adds	r3, #1
 8008c62:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c66:	3b01      	subs	r3, #1
 8008c68:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d1dd      	bne.n	8008c2c <USB_WritePMA+0x3a>
  }
}
 8008c70:	bf00      	nop
 8008c72:	bf00      	nop
 8008c74:	372c      	adds	r7, #44	@ 0x2c
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bc80      	pop	{r7}
 8008c7a:	4770      	bx	lr

08008c7c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b08b      	sub	sp, #44	@ 0x2c
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	60f8      	str	r0, [r7, #12]
 8008c84:	60b9      	str	r1, [r7, #8]
 8008c86:	4611      	mov	r1, r2
 8008c88:	461a      	mov	r2, r3
 8008c8a:	460b      	mov	r3, r1
 8008c8c:	80fb      	strh	r3, [r7, #6]
 8008c8e:	4613      	mov	r3, r2
 8008c90:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008c92:	88bb      	ldrh	r3, [r7, #4]
 8008c94:	085b      	lsrs	r3, r3, #1
 8008c96:	b29b      	uxth	r3, r3
 8008c98:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008ca2:	88fb      	ldrh	r3, [r7, #6]
 8008ca4:	005a      	lsls	r2, r3, #1
 8008ca6:	697b      	ldr	r3, [r7, #20]
 8008ca8:	4413      	add	r3, r2
 8008caa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008cae:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008cb0:	69bb      	ldr	r3, [r7, #24]
 8008cb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8008cb4:	e01b      	b.n	8008cee <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008cb6:	6a3b      	ldr	r3, [r7, #32]
 8008cb8:	881b      	ldrh	r3, [r3, #0]
 8008cba:	b29b      	uxth	r3, r3
 8008cbc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008cbe:	6a3b      	ldr	r3, [r7, #32]
 8008cc0:	3302      	adds	r3, #2
 8008cc2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	b2da      	uxtb	r2, r3
 8008cc8:	69fb      	ldr	r3, [r7, #28]
 8008cca:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008ccc:	69fb      	ldr	r3, [r7, #28]
 8008cce:	3301      	adds	r3, #1
 8008cd0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	0a1b      	lsrs	r3, r3, #8
 8008cd6:	b2da      	uxtb	r2, r3
 8008cd8:	69fb      	ldr	r3, [r7, #28]
 8008cda:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008cdc:	69fb      	ldr	r3, [r7, #28]
 8008cde:	3301      	adds	r3, #1
 8008ce0:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008ce2:	6a3b      	ldr	r3, [r7, #32]
 8008ce4:	3302      	adds	r3, #2
 8008ce6:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8008ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cea:	3b01      	subs	r3, #1
 8008cec:	627b      	str	r3, [r7, #36]	@ 0x24
 8008cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d1e0      	bne.n	8008cb6 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008cf4:	88bb      	ldrh	r3, [r7, #4]
 8008cf6:	f003 0301 	and.w	r3, r3, #1
 8008cfa:	b29b      	uxth	r3, r3
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d007      	beq.n	8008d10 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8008d00:	6a3b      	ldr	r3, [r7, #32]
 8008d02:	881b      	ldrh	r3, [r3, #0]
 8008d04:	b29b      	uxth	r3, r3
 8008d06:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008d08:	693b      	ldr	r3, [r7, #16]
 8008d0a:	b2da      	uxtb	r2, r3
 8008d0c:	69fb      	ldr	r3, [r7, #28]
 8008d0e:	701a      	strb	r2, [r3, #0]
  }
}
 8008d10:	bf00      	nop
 8008d12:	372c      	adds	r7, #44	@ 0x2c
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bc80      	pop	{r7}
 8008d18:	4770      	bx	lr

08008d1a <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d1a:	b580      	push	{r7, lr}
 8008d1c:	b082      	sub	sp, #8
 8008d1e:	af00      	add	r7, sp, #0
 8008d20:	6078      	str	r0, [r7, #4]
 8008d22:	460b      	mov	r3, r1
 8008d24:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8008d26:	2304      	movs	r3, #4
 8008d28:	2203      	movs	r2, #3
 8008d2a:	2181      	movs	r1, #129	@ 0x81
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f001 fc80 	bl	800a632 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2201      	movs	r2, #1
 8008d36:	62da      	str	r2, [r3, #44]	@ 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8008d38:	2010      	movs	r0, #16
 8008d3a:	f001 fd8d 	bl	800a858 <USBD_static_malloc>
 8008d3e:	4602      	mov	r2, r0
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d101      	bne.n	8008d54 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 8008d50:	2302      	movs	r3, #2
 8008d52:	e005      	b.n	8008d60 <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 8008d5e:	2300      	movs	r3, #0
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3708      	adds	r7, #8
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}

08008d68 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b082      	sub	sp, #8
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
 8008d70:	460b      	mov	r3, r1
 8008d72:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8008d74:	2181      	movs	r1, #129	@ 0x81
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f001 fc81 	bl	800a67e <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d009      	beq.n	8008da0 <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d92:	4618      	mov	r0, r3
 8008d94:	f001 fd6c 	bl	800a870 <USBD_static_free>
    pdev->pClassData = NULL;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return USBD_OK;
 8008da0:	2300      	movs	r3, #0
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3708      	adds	r7, #8
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}
	...

08008dac <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b088      	sub	sp, #32
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
 8008db4:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008dbc:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	781b      	ldrb	r3, [r3, #0]
 8008dd2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d045      	beq.n	8008e66 <USBD_HID_Setup+0xba>
 8008dda:	2b20      	cmp	r3, #32
 8008ddc:	f040 80d3 	bne.w	8008f86 <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	785b      	ldrb	r3, [r3, #1]
 8008de4:	3b02      	subs	r3, #2
 8008de6:	2b09      	cmp	r3, #9
 8008de8:	d835      	bhi.n	8008e56 <USBD_HID_Setup+0xaa>
 8008dea:	a201      	add	r2, pc, #4	@ (adr r2, 8008df0 <USBD_HID_Setup+0x44>)
 8008dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008df0:	08008e47 	.word	0x08008e47
 8008df4:	08008e27 	.word	0x08008e27
 8008df8:	08008e57 	.word	0x08008e57
 8008dfc:	08008e57 	.word	0x08008e57
 8008e00:	08008e57 	.word	0x08008e57
 8008e04:	08008e57 	.word	0x08008e57
 8008e08:	08008e57 	.word	0x08008e57
 8008e0c:	08008e57 	.word	0x08008e57
 8008e10:	08008e35 	.word	0x08008e35
 8008e14:	08008e19 	.word	0x08008e19
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	885b      	ldrh	r3, [r3, #2]
 8008e1c:	b2db      	uxtb	r3, r3
 8008e1e:	461a      	mov	r2, r3
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	601a      	str	r2, [r3, #0]
          break;
 8008e24:	e01e      	b.n	8008e64 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8008e26:	693b      	ldr	r3, [r7, #16]
 8008e28:	2201      	movs	r2, #1
 8008e2a:	4619      	mov	r1, r3
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f001 f941 	bl	800a0b4 <USBD_CtlSendData>
          break;
 8008e32:	e017      	b.n	8008e64 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	885b      	ldrh	r3, [r3, #2]
 8008e38:	0a1b      	lsrs	r3, r3, #8
 8008e3a:	b29b      	uxth	r3, r3
 8008e3c:	b2db      	uxtb	r3, r3
 8008e3e:	461a      	mov	r2, r3
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	605a      	str	r2, [r3, #4]
          break;
 8008e44:	e00e      	b.n	8008e64 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	3304      	adds	r3, #4
 8008e4a:	2201      	movs	r2, #1
 8008e4c:	4619      	mov	r1, r3
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f001 f930 	bl	800a0b4 <USBD_CtlSendData>
          break;
 8008e54:	e006      	b.n	8008e64 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 8008e56:	6839      	ldr	r1, [r7, #0]
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f001 f8c1 	bl	8009fe0 <USBD_CtlError>
          ret = USBD_FAIL;
 8008e5e:	2302      	movs	r3, #2
 8008e60:	75fb      	strb	r3, [r7, #23]
          break;
 8008e62:	bf00      	nop
      }
      break;
 8008e64:	e096      	b.n	8008f94 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	785b      	ldrb	r3, [r3, #1]
 8008e6a:	2b0b      	cmp	r3, #11
 8008e6c:	f200 8083 	bhi.w	8008f76 <USBD_HID_Setup+0x1ca>
 8008e70:	a201      	add	r2, pc, #4	@ (adr r2, 8008e78 <USBD_HID_Setup+0xcc>)
 8008e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e76:	bf00      	nop
 8008e78:	08008ea9 	.word	0x08008ea9
 8008e7c:	08008f77 	.word	0x08008f77
 8008e80:	08008f77 	.word	0x08008f77
 8008e84:	08008f77 	.word	0x08008f77
 8008e88:	08008f77 	.word	0x08008f77
 8008e8c:	08008f77 	.word	0x08008f77
 8008e90:	08008ed1 	.word	0x08008ed1
 8008e94:	08008f77 	.word	0x08008f77
 8008e98:	08008f77 	.word	0x08008f77
 8008e9c:	08008f77 	.word	0x08008f77
 8008ea0:	08008f29 	.word	0x08008f29
 8008ea4:	08008f51 	.word	0x08008f51
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008eae:	2b03      	cmp	r3, #3
 8008eb0:	d107      	bne.n	8008ec2 <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008eb2:	f107 030e 	add.w	r3, r7, #14
 8008eb6:	2202      	movs	r2, #2
 8008eb8:	4619      	mov	r1, r3
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f001 f8fa 	bl	800a0b4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008ec0:	e060      	b.n	8008f84 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8008ec2:	6839      	ldr	r1, [r7, #0]
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f001 f88b 	bl	8009fe0 <USBD_CtlError>
            ret = USBD_FAIL;
 8008eca:	2302      	movs	r3, #2
 8008ecc:	75fb      	strb	r3, [r7, #23]
          break;
 8008ece:	e059      	b.n	8008f84 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	885b      	ldrh	r3, [r3, #2]
 8008ed4:	0a1b      	lsrs	r3, r3, #8
 8008ed6:	b29b      	uxth	r3, r3
 8008ed8:	2b22      	cmp	r3, #34	@ 0x22
 8008eda:	d108      	bne.n	8008eee <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	88db      	ldrh	r3, [r3, #6]
 8008ee0:	2b4a      	cmp	r3, #74	@ 0x4a
 8008ee2:	bf28      	it	cs
 8008ee4:	234a      	movcs	r3, #74	@ 0x4a
 8008ee6:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 8008ee8:	4b2d      	ldr	r3, [pc, #180]	@ (8008fa0 <USBD_HID_Setup+0x1f4>)
 8008eea:	61bb      	str	r3, [r7, #24]
 8008eec:	e015      	b.n	8008f1a <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	885b      	ldrh	r3, [r3, #2]
 8008ef2:	0a1b      	lsrs	r3, r3, #8
 8008ef4:	b29b      	uxth	r3, r3
 8008ef6:	2b21      	cmp	r3, #33	@ 0x21
 8008ef8:	d108      	bne.n	8008f0c <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8008efa:	4b2a      	ldr	r3, [pc, #168]	@ (8008fa4 <USBD_HID_Setup+0x1f8>)
 8008efc:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	88db      	ldrh	r3, [r3, #6]
 8008f02:	2b09      	cmp	r3, #9
 8008f04:	bf28      	it	cs
 8008f06:	2309      	movcs	r3, #9
 8008f08:	83fb      	strh	r3, [r7, #30]
 8008f0a:	e006      	b.n	8008f1a <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8008f0c:	6839      	ldr	r1, [r7, #0]
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f001 f866 	bl	8009fe0 <USBD_CtlError>
            ret = USBD_FAIL;
 8008f14:	2302      	movs	r3, #2
 8008f16:	75fb      	strb	r3, [r7, #23]
            break;
 8008f18:	e034      	b.n	8008f84 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8008f1a:	8bfb      	ldrh	r3, [r7, #30]
 8008f1c:	461a      	mov	r2, r3
 8008f1e:	69b9      	ldr	r1, [r7, #24]
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f001 f8c7 	bl	800a0b4 <USBD_CtlSendData>
          break;
 8008f26:	e02d      	b.n	8008f84 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f2e:	2b03      	cmp	r3, #3
 8008f30:	d107      	bne.n	8008f42 <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	3308      	adds	r3, #8
 8008f36:	2201      	movs	r2, #1
 8008f38:	4619      	mov	r1, r3
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f001 f8ba 	bl	800a0b4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008f40:	e020      	b.n	8008f84 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8008f42:	6839      	ldr	r1, [r7, #0]
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f001 f84b 	bl	8009fe0 <USBD_CtlError>
            ret = USBD_FAIL;
 8008f4a:	2302      	movs	r3, #2
 8008f4c:	75fb      	strb	r3, [r7, #23]
          break;
 8008f4e:	e019      	b.n	8008f84 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f56:	2b03      	cmp	r3, #3
 8008f58:	d106      	bne.n	8008f68 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	885b      	ldrh	r3, [r3, #2]
 8008f5e:	b2db      	uxtb	r3, r3
 8008f60:	461a      	mov	r2, r3
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008f66:	e00d      	b.n	8008f84 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8008f68:	6839      	ldr	r1, [r7, #0]
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f001 f838 	bl	8009fe0 <USBD_CtlError>
            ret = USBD_FAIL;
 8008f70:	2302      	movs	r3, #2
 8008f72:	75fb      	strb	r3, [r7, #23]
          break;
 8008f74:	e006      	b.n	8008f84 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 8008f76:	6839      	ldr	r1, [r7, #0]
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f001 f831 	bl	8009fe0 <USBD_CtlError>
          ret = USBD_FAIL;
 8008f7e:	2302      	movs	r3, #2
 8008f80:	75fb      	strb	r3, [r7, #23]
          break;
 8008f82:	bf00      	nop
      }
      break;
 8008f84:	e006      	b.n	8008f94 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 8008f86:	6839      	ldr	r1, [r7, #0]
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f001 f829 	bl	8009fe0 <USBD_CtlError>
      ret = USBD_FAIL;
 8008f8e:	2302      	movs	r3, #2
 8008f90:	75fb      	strb	r3, [r7, #23]
      break;
 8008f92:	bf00      	nop
  }

  return ret;
 8008f94:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3720      	adds	r7, #32
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}
 8008f9e:	bf00      	nop
 8008fa0:	200000cc 	.word	0x200000cc
 8008fa4:	200000b4 	.word	0x200000b4

08008fa8 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b086      	sub	sp, #24
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	60f8      	str	r0, [r7, #12]
 8008fb0:	60b9      	str	r1, [r7, #8]
 8008fb2:	4613      	mov	r3, r2
 8008fb4:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008fbc:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fc4:	2b03      	cmp	r3, #3
 8008fc6:	d10c      	bne.n	8008fe2 <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 8008fc8:	697b      	ldr	r3, [r7, #20]
 8008fca:	7b1b      	ldrb	r3, [r3, #12]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d108      	bne.n	8008fe2 <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	2201      	movs	r2, #1
 8008fd4:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 8008fd6:	88fb      	ldrh	r3, [r7, #6]
 8008fd8:	68ba      	ldr	r2, [r7, #8]
 8008fda:	2181      	movs	r1, #129	@ 0x81
 8008fdc:	68f8      	ldr	r0, [r7, #12]
 8008fde:	f001 fbf5 	bl	800a7cc <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 8008fe2:	2300      	movs	r3, #0
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	3718      	adds	r7, #24
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}

08008fec <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8008fec:	b480      	push	{r7}
 8008fee:	b083      	sub	sp, #12
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2222      	movs	r2, #34	@ 0x22
 8008ff8:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8008ffa:	4b03      	ldr	r3, [pc, #12]	@ (8009008 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	370c      	adds	r7, #12
 8009000:	46bd      	mov	sp, r7
 8009002:	bc80      	pop	{r7}
 8009004:	4770      	bx	lr
 8009006:	bf00      	nop
 8009008:	20000048 	.word	0x20000048

0800900c <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 800900c:	b480      	push	{r7}
 800900e:	b083      	sub	sp, #12
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2222      	movs	r2, #34	@ 0x22
 8009018:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 800901a:	4b03      	ldr	r3, [pc, #12]	@ (8009028 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 800901c:	4618      	mov	r0, r3
 800901e:	370c      	adds	r7, #12
 8009020:	46bd      	mov	sp, r7
 8009022:	bc80      	pop	{r7}
 8009024:	4770      	bx	lr
 8009026:	bf00      	nop
 8009028:	2000006c 	.word	0x2000006c

0800902c <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800902c:	b480      	push	{r7}
 800902e:	b083      	sub	sp, #12
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2222      	movs	r2, #34	@ 0x22
 8009038:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 800903a:	4b03      	ldr	r3, [pc, #12]	@ (8009048 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800903c:	4618      	mov	r0, r3
 800903e:	370c      	adds	r7, #12
 8009040:	46bd      	mov	sp, r7
 8009042:	bc80      	pop	{r7}
 8009044:	4770      	bx	lr
 8009046:	bf00      	nop
 8009048:	20000090 	.word	0x20000090

0800904c <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 800904c:	b480      	push	{r7}
 800904e:	b083      	sub	sp, #12
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	460b      	mov	r3, r1
 8009056:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800905e:	2200      	movs	r2, #0
 8009060:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8009062:	2300      	movs	r3, #0
}
 8009064:	4618      	mov	r0, r3
 8009066:	370c      	adds	r7, #12
 8009068:	46bd      	mov	sp, r7
 800906a:	bc80      	pop	{r7}
 800906c:	4770      	bx	lr
	...

08009070 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8009070:	b480      	push	{r7}
 8009072:	b083      	sub	sp, #12
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	220a      	movs	r2, #10
 800907c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 800907e:	4b03      	ldr	r3, [pc, #12]	@ (800908c <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8009080:	4618      	mov	r0, r3
 8009082:	370c      	adds	r7, #12
 8009084:	46bd      	mov	sp, r7
 8009086:	bc80      	pop	{r7}
 8009088:	4770      	bx	lr
 800908a:	bf00      	nop
 800908c:	200000c0 	.word	0x200000c0

08009090 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b084      	sub	sp, #16
 8009094:	af00      	add	r7, sp, #0
 8009096:	60f8      	str	r0, [r7, #12]
 8009098:	60b9      	str	r1, [r7, #8]
 800909a:	4613      	mov	r3, r2
 800909c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d101      	bne.n	80090a8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80090a4:	2302      	movs	r3, #2
 80090a6:	e01a      	b.n	80090de <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d003      	beq.n	80090ba <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	2200      	movs	r2, #0
 80090b6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d003      	beq.n	80090c8 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	68ba      	ldr	r2, [r7, #8]
 80090c4:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	2201      	movs	r2, #1
 80090cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	79fa      	ldrb	r2, [r7, #7]
 80090d4:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80090d6:	68f8      	ldr	r0, [r7, #12]
 80090d8:	f001 fa48 	bl	800a56c <USBD_LL_Init>

  return USBD_OK;
 80090dc:	2300      	movs	r3, #0
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3710      	adds	r7, #16
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}

080090e6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80090e6:	b480      	push	{r7}
 80090e8:	b085      	sub	sp, #20
 80090ea:	af00      	add	r7, sp, #0
 80090ec:	6078      	str	r0, [r7, #4]
 80090ee:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80090f0:	2300      	movs	r3, #0
 80090f2:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d006      	beq.n	8009108 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	683a      	ldr	r2, [r7, #0]
 80090fe:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8009102:	2300      	movs	r3, #0
 8009104:	73fb      	strb	r3, [r7, #15]
 8009106:	e001      	b.n	800910c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009108:	2302      	movs	r3, #2
 800910a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800910c:	7bfb      	ldrb	r3, [r7, #15]
}
 800910e:	4618      	mov	r0, r3
 8009110:	3714      	adds	r7, #20
 8009112:	46bd      	mov	sp, r7
 8009114:	bc80      	pop	{r7}
 8009116:	4770      	bx	lr

08009118 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b082      	sub	sp, #8
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f001 fa6b 	bl	800a5fc <USBD_LL_Start>

  return USBD_OK;
 8009126:	2300      	movs	r3, #0
}
 8009128:	4618      	mov	r0, r3
 800912a:	3708      	adds	r7, #8
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}

08009130 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009130:	b480      	push	{r7}
 8009132:	b083      	sub	sp, #12
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009138:	2300      	movs	r3, #0
}
 800913a:	4618      	mov	r0, r3
 800913c:	370c      	adds	r7, #12
 800913e:	46bd      	mov	sp, r7
 8009140:	bc80      	pop	{r7}
 8009142:	4770      	bx	lr

08009144 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b084      	sub	sp, #16
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
 800914c:	460b      	mov	r3, r1
 800914e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009150:	2302      	movs	r3, #2
 8009152:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800915a:	2b00      	cmp	r3, #0
 800915c:	d00c      	beq.n	8009178 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	78fa      	ldrb	r2, [r7, #3]
 8009168:	4611      	mov	r1, r2
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	4798      	blx	r3
 800916e:	4603      	mov	r3, r0
 8009170:	2b00      	cmp	r3, #0
 8009172:	d101      	bne.n	8009178 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009174:	2300      	movs	r3, #0
 8009176:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009178:	7bfb      	ldrb	r3, [r7, #15]
}
 800917a:	4618      	mov	r0, r3
 800917c:	3710      	adds	r7, #16
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}

08009182 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009182:	b580      	push	{r7, lr}
 8009184:	b082      	sub	sp, #8
 8009186:	af00      	add	r7, sp, #0
 8009188:	6078      	str	r0, [r7, #4]
 800918a:	460b      	mov	r3, r1
 800918c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009194:	685b      	ldr	r3, [r3, #4]
 8009196:	78fa      	ldrb	r2, [r7, #3]
 8009198:	4611      	mov	r1, r2
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	4798      	blx	r3

  return USBD_OK;
 800919e:	2300      	movs	r3, #0
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	3708      	adds	r7, #8
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}

080091a8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b082      	sub	sp, #8
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80091b8:	6839      	ldr	r1, [r7, #0]
 80091ba:	4618      	mov	r0, r3
 80091bc:	f000 fed7 	bl	8009f6e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2201      	movs	r2, #1
 80091c4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80091ce:	461a      	mov	r2, r3
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80091dc:	f003 031f 	and.w	r3, r3, #31
 80091e0:	2b02      	cmp	r3, #2
 80091e2:	d016      	beq.n	8009212 <USBD_LL_SetupStage+0x6a>
 80091e4:	2b02      	cmp	r3, #2
 80091e6:	d81c      	bhi.n	8009222 <USBD_LL_SetupStage+0x7a>
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d002      	beq.n	80091f2 <USBD_LL_SetupStage+0x4a>
 80091ec:	2b01      	cmp	r3, #1
 80091ee:	d008      	beq.n	8009202 <USBD_LL_SetupStage+0x5a>
 80091f0:	e017      	b.n	8009222 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80091f8:	4619      	mov	r1, r3
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f000 f9ca 	bl	8009594 <USBD_StdDevReq>
      break;
 8009200:	e01a      	b.n	8009238 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009208:	4619      	mov	r1, r3
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 fa2c 	bl	8009668 <USBD_StdItfReq>
      break;
 8009210:	e012      	b.n	8009238 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009218:	4619      	mov	r1, r3
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f000 fa6c 	bl	80096f8 <USBD_StdEPReq>
      break;
 8009220:	e00a      	b.n	8009238 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8009228:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800922c:	b2db      	uxtb	r3, r3
 800922e:	4619      	mov	r1, r3
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	f001 fa43 	bl	800a6bc <USBD_LL_StallEP>
      break;
 8009236:	bf00      	nop
  }

  return USBD_OK;
 8009238:	2300      	movs	r3, #0
}
 800923a:	4618      	mov	r0, r3
 800923c:	3708      	adds	r7, #8
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}

08009242 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009242:	b580      	push	{r7, lr}
 8009244:	b086      	sub	sp, #24
 8009246:	af00      	add	r7, sp, #0
 8009248:	60f8      	str	r0, [r7, #12]
 800924a:	460b      	mov	r3, r1
 800924c:	607a      	str	r2, [r7, #4]
 800924e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009250:	7afb      	ldrb	r3, [r7, #11]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d14b      	bne.n	80092ee <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800925c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009264:	2b03      	cmp	r3, #3
 8009266:	d134      	bne.n	80092d2 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	68da      	ldr	r2, [r3, #12]
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	691b      	ldr	r3, [r3, #16]
 8009270:	429a      	cmp	r2, r3
 8009272:	d919      	bls.n	80092a8 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009274:	697b      	ldr	r3, [r7, #20]
 8009276:	68da      	ldr	r2, [r3, #12]
 8009278:	697b      	ldr	r3, [r7, #20]
 800927a:	691b      	ldr	r3, [r3, #16]
 800927c:	1ad2      	subs	r2, r2, r3
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009282:	697b      	ldr	r3, [r7, #20]
 8009284:	68da      	ldr	r2, [r3, #12]
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800928a:	429a      	cmp	r2, r3
 800928c:	d203      	bcs.n	8009296 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009292:	b29b      	uxth	r3, r3
 8009294:	e002      	b.n	800929c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009296:	697b      	ldr	r3, [r7, #20]
 8009298:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800929a:	b29b      	uxth	r3, r3
 800929c:	461a      	mov	r2, r3
 800929e:	6879      	ldr	r1, [r7, #4]
 80092a0:	68f8      	ldr	r0, [r7, #12]
 80092a2:	f000 ff35 	bl	800a110 <USBD_CtlContinueRx>
 80092a6:	e038      	b.n	800931a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092ae:	691b      	ldr	r3, [r3, #16]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d00a      	beq.n	80092ca <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80092ba:	2b03      	cmp	r3, #3
 80092bc:	d105      	bne.n	80092ca <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092c4:	691b      	ldr	r3, [r3, #16]
 80092c6:	68f8      	ldr	r0, [r7, #12]
 80092c8:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80092ca:	68f8      	ldr	r0, [r7, #12]
 80092cc:	f000 ff32 	bl	800a134 <USBD_CtlSendStatus>
 80092d0:	e023      	b.n	800931a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80092d8:	2b05      	cmp	r3, #5
 80092da:	d11e      	bne.n	800931a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2200      	movs	r2, #0
 80092e0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 80092e4:	2100      	movs	r1, #0
 80092e6:	68f8      	ldr	r0, [r7, #12]
 80092e8:	f001 f9e8 	bl	800a6bc <USBD_LL_StallEP>
 80092ec:	e015      	b.n	800931a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092f4:	699b      	ldr	r3, [r3, #24]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d00d      	beq.n	8009316 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009300:	2b03      	cmp	r3, #3
 8009302:	d108      	bne.n	8009316 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800930a:	699b      	ldr	r3, [r3, #24]
 800930c:	7afa      	ldrb	r2, [r7, #11]
 800930e:	4611      	mov	r1, r2
 8009310:	68f8      	ldr	r0, [r7, #12]
 8009312:	4798      	blx	r3
 8009314:	e001      	b.n	800931a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009316:	2302      	movs	r3, #2
 8009318:	e000      	b.n	800931c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800931a:	2300      	movs	r3, #0
}
 800931c:	4618      	mov	r0, r3
 800931e:	3718      	adds	r7, #24
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}

08009324 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b086      	sub	sp, #24
 8009328:	af00      	add	r7, sp, #0
 800932a:	60f8      	str	r0, [r7, #12]
 800932c:	460b      	mov	r3, r1
 800932e:	607a      	str	r2, [r7, #4]
 8009330:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009332:	7afb      	ldrb	r3, [r7, #11]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d17f      	bne.n	8009438 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	3314      	adds	r3, #20
 800933c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009344:	2b02      	cmp	r3, #2
 8009346:	d15c      	bne.n	8009402 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009348:	697b      	ldr	r3, [r7, #20]
 800934a:	68da      	ldr	r2, [r3, #12]
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	691b      	ldr	r3, [r3, #16]
 8009350:	429a      	cmp	r2, r3
 8009352:	d915      	bls.n	8009380 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009354:	697b      	ldr	r3, [r7, #20]
 8009356:	68da      	ldr	r2, [r3, #12]
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	691b      	ldr	r3, [r3, #16]
 800935c:	1ad2      	subs	r2, r2, r3
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	68db      	ldr	r3, [r3, #12]
 8009366:	b29b      	uxth	r3, r3
 8009368:	461a      	mov	r2, r3
 800936a:	6879      	ldr	r1, [r7, #4]
 800936c:	68f8      	ldr	r0, [r7, #12]
 800936e:	f000 febd 	bl	800a0ec <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009372:	2300      	movs	r3, #0
 8009374:	2200      	movs	r2, #0
 8009376:	2100      	movs	r1, #0
 8009378:	68f8      	ldr	r0, [r7, #12]
 800937a:	f001 fa4a 	bl	800a812 <USBD_LL_PrepareReceive>
 800937e:	e04e      	b.n	800941e <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009380:	697b      	ldr	r3, [r7, #20]
 8009382:	689b      	ldr	r3, [r3, #8]
 8009384:	697a      	ldr	r2, [r7, #20]
 8009386:	6912      	ldr	r2, [r2, #16]
 8009388:	fbb3 f1f2 	udiv	r1, r3, r2
 800938c:	fb01 f202 	mul.w	r2, r1, r2
 8009390:	1a9b      	subs	r3, r3, r2
 8009392:	2b00      	cmp	r3, #0
 8009394:	d11c      	bne.n	80093d0 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	689a      	ldr	r2, [r3, #8]
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800939e:	429a      	cmp	r2, r3
 80093a0:	d316      	bcc.n	80093d0 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	689a      	ldr	r2, [r3, #8]
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80093ac:	429a      	cmp	r2, r3
 80093ae:	d20f      	bcs.n	80093d0 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80093b0:	2200      	movs	r2, #0
 80093b2:	2100      	movs	r1, #0
 80093b4:	68f8      	ldr	r0, [r7, #12]
 80093b6:	f000 fe99 	bl	800a0ec <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	2200      	movs	r2, #0
 80093be:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80093c2:	2300      	movs	r3, #0
 80093c4:	2200      	movs	r2, #0
 80093c6:	2100      	movs	r1, #0
 80093c8:	68f8      	ldr	r0, [r7, #12]
 80093ca:	f001 fa22 	bl	800a812 <USBD_LL_PrepareReceive>
 80093ce:	e026      	b.n	800941e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093d6:	68db      	ldr	r3, [r3, #12]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d00a      	beq.n	80093f2 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80093e2:	2b03      	cmp	r3, #3
 80093e4:	d105      	bne.n	80093f2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093ec:	68db      	ldr	r3, [r3, #12]
 80093ee:	68f8      	ldr	r0, [r7, #12]
 80093f0:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80093f2:	2180      	movs	r1, #128	@ 0x80
 80093f4:	68f8      	ldr	r0, [r7, #12]
 80093f6:	f001 f961 	bl	800a6bc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80093fa:	68f8      	ldr	r0, [r7, #12]
 80093fc:	f000 fead 	bl	800a15a <USBD_CtlReceiveStatus>
 8009400:	e00d      	b.n	800941e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009408:	2b04      	cmp	r3, #4
 800940a:	d004      	beq.n	8009416 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009412:	2b00      	cmp	r3, #0
 8009414:	d103      	bne.n	800941e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009416:	2180      	movs	r1, #128	@ 0x80
 8009418:	68f8      	ldr	r0, [r7, #12]
 800941a:	f001 f94f 	bl	800a6bc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009424:	2b01      	cmp	r3, #1
 8009426:	d11d      	bne.n	8009464 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009428:	68f8      	ldr	r0, [r7, #12]
 800942a:	f7ff fe81 	bl	8009130 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	2200      	movs	r2, #0
 8009432:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009436:	e015      	b.n	8009464 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800943e:	695b      	ldr	r3, [r3, #20]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d00d      	beq.n	8009460 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800944a:	2b03      	cmp	r3, #3
 800944c:	d108      	bne.n	8009460 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009454:	695b      	ldr	r3, [r3, #20]
 8009456:	7afa      	ldrb	r2, [r7, #11]
 8009458:	4611      	mov	r1, r2
 800945a:	68f8      	ldr	r0, [r7, #12]
 800945c:	4798      	blx	r3
 800945e:	e001      	b.n	8009464 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009460:	2302      	movs	r3, #2
 8009462:	e000      	b.n	8009466 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009464:	2300      	movs	r3, #0
}
 8009466:	4618      	mov	r0, r3
 8009468:	3718      	adds	r7, #24
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}

0800946e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800946e:	b580      	push	{r7, lr}
 8009470:	b082      	sub	sp, #8
 8009472:	af00      	add	r7, sp, #0
 8009474:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009476:	2340      	movs	r3, #64	@ 0x40
 8009478:	2200      	movs	r2, #0
 800947a:	2100      	movs	r1, #0
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f001 f8d8 	bl	800a632 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2201      	movs	r2, #1
 8009486:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2240      	movs	r2, #64	@ 0x40
 800948e:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009492:	2340      	movs	r3, #64	@ 0x40
 8009494:	2200      	movs	r2, #0
 8009496:	2180      	movs	r1, #128	@ 0x80
 8009498:	6878      	ldr	r0, [r7, #4]
 800949a:	f001 f8ca 	bl	800a632 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2201      	movs	r2, #1
 80094a2:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2240      	movs	r2, #64	@ 0x40
 80094a8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2201      	movs	r2, #1
 80094ae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2200      	movs	r2, #0
 80094b6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2200      	movs	r2, #0
 80094be:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2200      	movs	r2, #0
 80094c4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d009      	beq.n	80094e6 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80094d8:	685b      	ldr	r3, [r3, #4]
 80094da:	687a      	ldr	r2, [r7, #4]
 80094dc:	6852      	ldr	r2, [r2, #4]
 80094de:	b2d2      	uxtb	r2, r2
 80094e0:	4611      	mov	r1, r2
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	4798      	blx	r3
  }

  return USBD_OK;
 80094e6:	2300      	movs	r3, #0
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	3708      	adds	r7, #8
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}

080094f0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80094f0:	b480      	push	{r7}
 80094f2:	b083      	sub	sp, #12
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
 80094f8:	460b      	mov	r3, r1
 80094fa:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	78fa      	ldrb	r2, [r7, #3]
 8009500:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009502:	2300      	movs	r3, #0
}
 8009504:	4618      	mov	r0, r3
 8009506:	370c      	adds	r7, #12
 8009508:	46bd      	mov	sp, r7
 800950a:	bc80      	pop	{r7}
 800950c:	4770      	bx	lr

0800950e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800950e:	b480      	push	{r7}
 8009510:	b083      	sub	sp, #12
 8009512:	af00      	add	r7, sp, #0
 8009514:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2204      	movs	r2, #4
 8009526:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800952a:	2300      	movs	r3, #0
}
 800952c:	4618      	mov	r0, r3
 800952e:	370c      	adds	r7, #12
 8009530:	46bd      	mov	sp, r7
 8009532:	bc80      	pop	{r7}
 8009534:	4770      	bx	lr

08009536 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009536:	b480      	push	{r7}
 8009538:	b083      	sub	sp, #12
 800953a:	af00      	add	r7, sp, #0
 800953c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009544:	2b04      	cmp	r3, #4
 8009546:	d105      	bne.n	8009554 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009554:	2300      	movs	r3, #0
}
 8009556:	4618      	mov	r0, r3
 8009558:	370c      	adds	r7, #12
 800955a:	46bd      	mov	sp, r7
 800955c:	bc80      	pop	{r7}
 800955e:	4770      	bx	lr

08009560 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b082      	sub	sp, #8
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800956e:	2b03      	cmp	r3, #3
 8009570:	d10b      	bne.n	800958a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009578:	69db      	ldr	r3, [r3, #28]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d005      	beq.n	800958a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009584:	69db      	ldr	r3, [r3, #28]
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800958a:	2300      	movs	r3, #0
}
 800958c:	4618      	mov	r0, r3
 800958e:	3708      	adds	r7, #8
 8009590:	46bd      	mov	sp, r7
 8009592:	bd80      	pop	{r7, pc}

08009594 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b084      	sub	sp, #16
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
 800959c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800959e:	2300      	movs	r3, #0
 80095a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	781b      	ldrb	r3, [r3, #0]
 80095a6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80095aa:	2b40      	cmp	r3, #64	@ 0x40
 80095ac:	d005      	beq.n	80095ba <USBD_StdDevReq+0x26>
 80095ae:	2b40      	cmp	r3, #64	@ 0x40
 80095b0:	d84f      	bhi.n	8009652 <USBD_StdDevReq+0xbe>
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d009      	beq.n	80095ca <USBD_StdDevReq+0x36>
 80095b6:	2b20      	cmp	r3, #32
 80095b8:	d14b      	bne.n	8009652 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80095c0:	689b      	ldr	r3, [r3, #8]
 80095c2:	6839      	ldr	r1, [r7, #0]
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	4798      	blx	r3
      break;
 80095c8:	e048      	b.n	800965c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	785b      	ldrb	r3, [r3, #1]
 80095ce:	2b09      	cmp	r3, #9
 80095d0:	d839      	bhi.n	8009646 <USBD_StdDevReq+0xb2>
 80095d2:	a201      	add	r2, pc, #4	@ (adr r2, 80095d8 <USBD_StdDevReq+0x44>)
 80095d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095d8:	08009629 	.word	0x08009629
 80095dc:	0800963d 	.word	0x0800963d
 80095e0:	08009647 	.word	0x08009647
 80095e4:	08009633 	.word	0x08009633
 80095e8:	08009647 	.word	0x08009647
 80095ec:	0800960b 	.word	0x0800960b
 80095f0:	08009601 	.word	0x08009601
 80095f4:	08009647 	.word	0x08009647
 80095f8:	0800961f 	.word	0x0800961f
 80095fc:	08009615 	.word	0x08009615
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009600:	6839      	ldr	r1, [r7, #0]
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f000 f9dc 	bl	80099c0 <USBD_GetDescriptor>
          break;
 8009608:	e022      	b.n	8009650 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800960a:	6839      	ldr	r1, [r7, #0]
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f000 fb3f 	bl	8009c90 <USBD_SetAddress>
          break;
 8009612:	e01d      	b.n	8009650 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009614:	6839      	ldr	r1, [r7, #0]
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f000 fb7e 	bl	8009d18 <USBD_SetConfig>
          break;
 800961c:	e018      	b.n	8009650 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800961e:	6839      	ldr	r1, [r7, #0]
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f000 fc07 	bl	8009e34 <USBD_GetConfig>
          break;
 8009626:	e013      	b.n	8009650 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009628:	6839      	ldr	r1, [r7, #0]
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f000 fc37 	bl	8009e9e <USBD_GetStatus>
          break;
 8009630:	e00e      	b.n	8009650 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009632:	6839      	ldr	r1, [r7, #0]
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f000 fc65 	bl	8009f04 <USBD_SetFeature>
          break;
 800963a:	e009      	b.n	8009650 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800963c:	6839      	ldr	r1, [r7, #0]
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f000 fc74 	bl	8009f2c <USBD_ClrFeature>
          break;
 8009644:	e004      	b.n	8009650 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009646:	6839      	ldr	r1, [r7, #0]
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f000 fcc9 	bl	8009fe0 <USBD_CtlError>
          break;
 800964e:	bf00      	nop
      }
      break;
 8009650:	e004      	b.n	800965c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009652:	6839      	ldr	r1, [r7, #0]
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	f000 fcc3 	bl	8009fe0 <USBD_CtlError>
      break;
 800965a:	bf00      	nop
  }

  return ret;
 800965c:	7bfb      	ldrb	r3, [r7, #15]
}
 800965e:	4618      	mov	r0, r3
 8009660:	3710      	adds	r7, #16
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}
 8009666:	bf00      	nop

08009668 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b084      	sub	sp, #16
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
 8009670:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009672:	2300      	movs	r3, #0
 8009674:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	781b      	ldrb	r3, [r3, #0]
 800967a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800967e:	2b40      	cmp	r3, #64	@ 0x40
 8009680:	d005      	beq.n	800968e <USBD_StdItfReq+0x26>
 8009682:	2b40      	cmp	r3, #64	@ 0x40
 8009684:	d82e      	bhi.n	80096e4 <USBD_StdItfReq+0x7c>
 8009686:	2b00      	cmp	r3, #0
 8009688:	d001      	beq.n	800968e <USBD_StdItfReq+0x26>
 800968a:	2b20      	cmp	r3, #32
 800968c:	d12a      	bne.n	80096e4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009694:	3b01      	subs	r3, #1
 8009696:	2b02      	cmp	r3, #2
 8009698:	d81d      	bhi.n	80096d6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	889b      	ldrh	r3, [r3, #4]
 800969e:	b2db      	uxtb	r3, r3
 80096a0:	2b01      	cmp	r3, #1
 80096a2:	d813      	bhi.n	80096cc <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096aa:	689b      	ldr	r3, [r3, #8]
 80096ac:	6839      	ldr	r1, [r7, #0]
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	4798      	blx	r3
 80096b2:	4603      	mov	r3, r0
 80096b4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	88db      	ldrh	r3, [r3, #6]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d110      	bne.n	80096e0 <USBD_StdItfReq+0x78>
 80096be:	7bfb      	ldrb	r3, [r7, #15]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d10d      	bne.n	80096e0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f000 fd35 	bl	800a134 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80096ca:	e009      	b.n	80096e0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80096cc:	6839      	ldr	r1, [r7, #0]
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f000 fc86 	bl	8009fe0 <USBD_CtlError>
          break;
 80096d4:	e004      	b.n	80096e0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80096d6:	6839      	ldr	r1, [r7, #0]
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	f000 fc81 	bl	8009fe0 <USBD_CtlError>
          break;
 80096de:	e000      	b.n	80096e2 <USBD_StdItfReq+0x7a>
          break;
 80096e0:	bf00      	nop
      }
      break;
 80096e2:	e004      	b.n	80096ee <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80096e4:	6839      	ldr	r1, [r7, #0]
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f000 fc7a 	bl	8009fe0 <USBD_CtlError>
      break;
 80096ec:	bf00      	nop
  }

  return USBD_OK;
 80096ee:	2300      	movs	r3, #0
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3710      	adds	r7, #16
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}

080096f8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b084      	sub	sp, #16
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
 8009700:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009702:	2300      	movs	r3, #0
 8009704:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	889b      	ldrh	r3, [r3, #4]
 800970a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	781b      	ldrb	r3, [r3, #0]
 8009710:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009714:	2b40      	cmp	r3, #64	@ 0x40
 8009716:	d007      	beq.n	8009728 <USBD_StdEPReq+0x30>
 8009718:	2b40      	cmp	r3, #64	@ 0x40
 800971a:	f200 8146 	bhi.w	80099aa <USBD_StdEPReq+0x2b2>
 800971e:	2b00      	cmp	r3, #0
 8009720:	d00a      	beq.n	8009738 <USBD_StdEPReq+0x40>
 8009722:	2b20      	cmp	r3, #32
 8009724:	f040 8141 	bne.w	80099aa <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800972e:	689b      	ldr	r3, [r3, #8]
 8009730:	6839      	ldr	r1, [r7, #0]
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	4798      	blx	r3
      break;
 8009736:	e13d      	b.n	80099b4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	781b      	ldrb	r3, [r3, #0]
 800973c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009740:	2b20      	cmp	r3, #32
 8009742:	d10a      	bne.n	800975a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800974a:	689b      	ldr	r3, [r3, #8]
 800974c:	6839      	ldr	r1, [r7, #0]
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	4798      	blx	r3
 8009752:	4603      	mov	r3, r0
 8009754:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009756:	7bfb      	ldrb	r3, [r7, #15]
 8009758:	e12d      	b.n	80099b6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	785b      	ldrb	r3, [r3, #1]
 800975e:	2b03      	cmp	r3, #3
 8009760:	d007      	beq.n	8009772 <USBD_StdEPReq+0x7a>
 8009762:	2b03      	cmp	r3, #3
 8009764:	f300 811b 	bgt.w	800999e <USBD_StdEPReq+0x2a6>
 8009768:	2b00      	cmp	r3, #0
 800976a:	d072      	beq.n	8009852 <USBD_StdEPReq+0x15a>
 800976c:	2b01      	cmp	r3, #1
 800976e:	d03a      	beq.n	80097e6 <USBD_StdEPReq+0xee>
 8009770:	e115      	b.n	800999e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009778:	2b02      	cmp	r3, #2
 800977a:	d002      	beq.n	8009782 <USBD_StdEPReq+0x8a>
 800977c:	2b03      	cmp	r3, #3
 800977e:	d015      	beq.n	80097ac <USBD_StdEPReq+0xb4>
 8009780:	e02b      	b.n	80097da <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009782:	7bbb      	ldrb	r3, [r7, #14]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d00c      	beq.n	80097a2 <USBD_StdEPReq+0xaa>
 8009788:	7bbb      	ldrb	r3, [r7, #14]
 800978a:	2b80      	cmp	r3, #128	@ 0x80
 800978c:	d009      	beq.n	80097a2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800978e:	7bbb      	ldrb	r3, [r7, #14]
 8009790:	4619      	mov	r1, r3
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f000 ff92 	bl	800a6bc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009798:	2180      	movs	r1, #128	@ 0x80
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	f000 ff8e 	bl	800a6bc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80097a0:	e020      	b.n	80097e4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80097a2:	6839      	ldr	r1, [r7, #0]
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f000 fc1b 	bl	8009fe0 <USBD_CtlError>
              break;
 80097aa:	e01b      	b.n	80097e4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	885b      	ldrh	r3, [r3, #2]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d10e      	bne.n	80097d2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80097b4:	7bbb      	ldrb	r3, [r7, #14]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d00b      	beq.n	80097d2 <USBD_StdEPReq+0xda>
 80097ba:	7bbb      	ldrb	r3, [r7, #14]
 80097bc:	2b80      	cmp	r3, #128	@ 0x80
 80097be:	d008      	beq.n	80097d2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	88db      	ldrh	r3, [r3, #6]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d104      	bne.n	80097d2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80097c8:	7bbb      	ldrb	r3, [r7, #14]
 80097ca:	4619      	mov	r1, r3
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f000 ff75 	bl	800a6bc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f000 fcae 	bl	800a134 <USBD_CtlSendStatus>

              break;
 80097d8:	e004      	b.n	80097e4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80097da:	6839      	ldr	r1, [r7, #0]
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f000 fbff 	bl	8009fe0 <USBD_CtlError>
              break;
 80097e2:	bf00      	nop
          }
          break;
 80097e4:	e0e0      	b.n	80099a8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80097ec:	2b02      	cmp	r3, #2
 80097ee:	d002      	beq.n	80097f6 <USBD_StdEPReq+0xfe>
 80097f0:	2b03      	cmp	r3, #3
 80097f2:	d015      	beq.n	8009820 <USBD_StdEPReq+0x128>
 80097f4:	e026      	b.n	8009844 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80097f6:	7bbb      	ldrb	r3, [r7, #14]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d00c      	beq.n	8009816 <USBD_StdEPReq+0x11e>
 80097fc:	7bbb      	ldrb	r3, [r7, #14]
 80097fe:	2b80      	cmp	r3, #128	@ 0x80
 8009800:	d009      	beq.n	8009816 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009802:	7bbb      	ldrb	r3, [r7, #14]
 8009804:	4619      	mov	r1, r3
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	f000 ff58 	bl	800a6bc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800980c:	2180      	movs	r1, #128	@ 0x80
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f000 ff54 	bl	800a6bc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009814:	e01c      	b.n	8009850 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009816:	6839      	ldr	r1, [r7, #0]
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f000 fbe1 	bl	8009fe0 <USBD_CtlError>
              break;
 800981e:	e017      	b.n	8009850 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	885b      	ldrh	r3, [r3, #2]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d112      	bne.n	800984e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009828:	7bbb      	ldrb	r3, [r7, #14]
 800982a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800982e:	2b00      	cmp	r3, #0
 8009830:	d004      	beq.n	800983c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009832:	7bbb      	ldrb	r3, [r7, #14]
 8009834:	4619      	mov	r1, r3
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f000 ff5f 	bl	800a6fa <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f000 fc79 	bl	800a134 <USBD_CtlSendStatus>
              }
              break;
 8009842:	e004      	b.n	800984e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009844:	6839      	ldr	r1, [r7, #0]
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f000 fbca 	bl	8009fe0 <USBD_CtlError>
              break;
 800984c:	e000      	b.n	8009850 <USBD_StdEPReq+0x158>
              break;
 800984e:	bf00      	nop
          }
          break;
 8009850:	e0aa      	b.n	80099a8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009858:	2b02      	cmp	r3, #2
 800985a:	d002      	beq.n	8009862 <USBD_StdEPReq+0x16a>
 800985c:	2b03      	cmp	r3, #3
 800985e:	d032      	beq.n	80098c6 <USBD_StdEPReq+0x1ce>
 8009860:	e097      	b.n	8009992 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009862:	7bbb      	ldrb	r3, [r7, #14]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d007      	beq.n	8009878 <USBD_StdEPReq+0x180>
 8009868:	7bbb      	ldrb	r3, [r7, #14]
 800986a:	2b80      	cmp	r3, #128	@ 0x80
 800986c:	d004      	beq.n	8009878 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800986e:	6839      	ldr	r1, [r7, #0]
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f000 fbb5 	bl	8009fe0 <USBD_CtlError>
                break;
 8009876:	e091      	b.n	800999c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009878:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800987c:	2b00      	cmp	r3, #0
 800987e:	da0b      	bge.n	8009898 <USBD_StdEPReq+0x1a0>
 8009880:	7bbb      	ldrb	r3, [r7, #14]
 8009882:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009886:	4613      	mov	r3, r2
 8009888:	009b      	lsls	r3, r3, #2
 800988a:	4413      	add	r3, r2
 800988c:	009b      	lsls	r3, r3, #2
 800988e:	3310      	adds	r3, #16
 8009890:	687a      	ldr	r2, [r7, #4]
 8009892:	4413      	add	r3, r2
 8009894:	3304      	adds	r3, #4
 8009896:	e00b      	b.n	80098b0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009898:	7bbb      	ldrb	r3, [r7, #14]
 800989a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800989e:	4613      	mov	r3, r2
 80098a0:	009b      	lsls	r3, r3, #2
 80098a2:	4413      	add	r3, r2
 80098a4:	009b      	lsls	r3, r3, #2
 80098a6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80098aa:	687a      	ldr	r2, [r7, #4]
 80098ac:	4413      	add	r3, r2
 80098ae:	3304      	adds	r3, #4
 80098b0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80098b2:	68bb      	ldr	r3, [r7, #8]
 80098b4:	2200      	movs	r2, #0
 80098b6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	2202      	movs	r2, #2
 80098bc:	4619      	mov	r1, r3
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f000 fbf8 	bl	800a0b4 <USBD_CtlSendData>
              break;
 80098c4:	e06a      	b.n	800999c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80098c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	da11      	bge.n	80098f2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80098ce:	7bbb      	ldrb	r3, [r7, #14]
 80098d0:	f003 020f 	and.w	r2, r3, #15
 80098d4:	6879      	ldr	r1, [r7, #4]
 80098d6:	4613      	mov	r3, r2
 80098d8:	009b      	lsls	r3, r3, #2
 80098da:	4413      	add	r3, r2
 80098dc:	009b      	lsls	r3, r3, #2
 80098de:	440b      	add	r3, r1
 80098e0:	3318      	adds	r3, #24
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d117      	bne.n	8009918 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80098e8:	6839      	ldr	r1, [r7, #0]
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f000 fb78 	bl	8009fe0 <USBD_CtlError>
                  break;
 80098f0:	e054      	b.n	800999c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80098f2:	7bbb      	ldrb	r3, [r7, #14]
 80098f4:	f003 020f 	and.w	r2, r3, #15
 80098f8:	6879      	ldr	r1, [r7, #4]
 80098fa:	4613      	mov	r3, r2
 80098fc:	009b      	lsls	r3, r3, #2
 80098fe:	4413      	add	r3, r2
 8009900:	009b      	lsls	r3, r3, #2
 8009902:	440b      	add	r3, r1
 8009904:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d104      	bne.n	8009918 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800990e:	6839      	ldr	r1, [r7, #0]
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	f000 fb65 	bl	8009fe0 <USBD_CtlError>
                  break;
 8009916:	e041      	b.n	800999c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009918:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800991c:	2b00      	cmp	r3, #0
 800991e:	da0b      	bge.n	8009938 <USBD_StdEPReq+0x240>
 8009920:	7bbb      	ldrb	r3, [r7, #14]
 8009922:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009926:	4613      	mov	r3, r2
 8009928:	009b      	lsls	r3, r3, #2
 800992a:	4413      	add	r3, r2
 800992c:	009b      	lsls	r3, r3, #2
 800992e:	3310      	adds	r3, #16
 8009930:	687a      	ldr	r2, [r7, #4]
 8009932:	4413      	add	r3, r2
 8009934:	3304      	adds	r3, #4
 8009936:	e00b      	b.n	8009950 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009938:	7bbb      	ldrb	r3, [r7, #14]
 800993a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800993e:	4613      	mov	r3, r2
 8009940:	009b      	lsls	r3, r3, #2
 8009942:	4413      	add	r3, r2
 8009944:	009b      	lsls	r3, r3, #2
 8009946:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800994a:	687a      	ldr	r2, [r7, #4]
 800994c:	4413      	add	r3, r2
 800994e:	3304      	adds	r3, #4
 8009950:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009952:	7bbb      	ldrb	r3, [r7, #14]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d002      	beq.n	800995e <USBD_StdEPReq+0x266>
 8009958:	7bbb      	ldrb	r3, [r7, #14]
 800995a:	2b80      	cmp	r3, #128	@ 0x80
 800995c:	d103      	bne.n	8009966 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	2200      	movs	r2, #0
 8009962:	601a      	str	r2, [r3, #0]
 8009964:	e00e      	b.n	8009984 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009966:	7bbb      	ldrb	r3, [r7, #14]
 8009968:	4619      	mov	r1, r3
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f000 fee4 	bl	800a738 <USBD_LL_IsStallEP>
 8009970:	4603      	mov	r3, r0
 8009972:	2b00      	cmp	r3, #0
 8009974:	d003      	beq.n	800997e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	2201      	movs	r2, #1
 800997a:	601a      	str	r2, [r3, #0]
 800997c:	e002      	b.n	8009984 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	2200      	movs	r2, #0
 8009982:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	2202      	movs	r2, #2
 8009988:	4619      	mov	r1, r3
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f000 fb92 	bl	800a0b4 <USBD_CtlSendData>
              break;
 8009990:	e004      	b.n	800999c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009992:	6839      	ldr	r1, [r7, #0]
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	f000 fb23 	bl	8009fe0 <USBD_CtlError>
              break;
 800999a:	bf00      	nop
          }
          break;
 800999c:	e004      	b.n	80099a8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800999e:	6839      	ldr	r1, [r7, #0]
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f000 fb1d 	bl	8009fe0 <USBD_CtlError>
          break;
 80099a6:	bf00      	nop
      }
      break;
 80099a8:	e004      	b.n	80099b4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80099aa:	6839      	ldr	r1, [r7, #0]
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f000 fb17 	bl	8009fe0 <USBD_CtlError>
      break;
 80099b2:	bf00      	nop
  }

  return ret;
 80099b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3710      	adds	r7, #16
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}
	...

080099c0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b084      	sub	sp, #16
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
 80099c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80099ca:	2300      	movs	r3, #0
 80099cc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80099ce:	2300      	movs	r3, #0
 80099d0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80099d2:	2300      	movs	r3, #0
 80099d4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	885b      	ldrh	r3, [r3, #2]
 80099da:	0a1b      	lsrs	r3, r3, #8
 80099dc:	b29b      	uxth	r3, r3
 80099de:	3b01      	subs	r3, #1
 80099e0:	2b06      	cmp	r3, #6
 80099e2:	f200 8128 	bhi.w	8009c36 <USBD_GetDescriptor+0x276>
 80099e6:	a201      	add	r2, pc, #4	@ (adr r2, 80099ec <USBD_GetDescriptor+0x2c>)
 80099e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ec:	08009a09 	.word	0x08009a09
 80099f0:	08009a21 	.word	0x08009a21
 80099f4:	08009a61 	.word	0x08009a61
 80099f8:	08009c37 	.word	0x08009c37
 80099fc:	08009c37 	.word	0x08009c37
 8009a00:	08009bd7 	.word	0x08009bd7
 8009a04:	08009c03 	.word	0x08009c03
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	687a      	ldr	r2, [r7, #4]
 8009a12:	7c12      	ldrb	r2, [r2, #16]
 8009a14:	f107 0108 	add.w	r1, r7, #8
 8009a18:	4610      	mov	r0, r2
 8009a1a:	4798      	blx	r3
 8009a1c:	60f8      	str	r0, [r7, #12]
      break;
 8009a1e:	e112      	b.n	8009c46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	7c1b      	ldrb	r3, [r3, #16]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d10d      	bne.n	8009a44 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a30:	f107 0208 	add.w	r2, r7, #8
 8009a34:	4610      	mov	r0, r2
 8009a36:	4798      	blx	r3
 8009a38:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	3301      	adds	r3, #1
 8009a3e:	2202      	movs	r2, #2
 8009a40:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009a42:	e100      	b.n	8009c46 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a4c:	f107 0208 	add.w	r2, r7, #8
 8009a50:	4610      	mov	r0, r2
 8009a52:	4798      	blx	r3
 8009a54:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	3301      	adds	r3, #1
 8009a5a:	2202      	movs	r2, #2
 8009a5c:	701a      	strb	r2, [r3, #0]
      break;
 8009a5e:	e0f2      	b.n	8009c46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	885b      	ldrh	r3, [r3, #2]
 8009a64:	b2db      	uxtb	r3, r3
 8009a66:	2b05      	cmp	r3, #5
 8009a68:	f200 80ac 	bhi.w	8009bc4 <USBD_GetDescriptor+0x204>
 8009a6c:	a201      	add	r2, pc, #4	@ (adr r2, 8009a74 <USBD_GetDescriptor+0xb4>)
 8009a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a72:	bf00      	nop
 8009a74:	08009a8d 	.word	0x08009a8d
 8009a78:	08009ac1 	.word	0x08009ac1
 8009a7c:	08009af5 	.word	0x08009af5
 8009a80:	08009b29 	.word	0x08009b29
 8009a84:	08009b5d 	.word	0x08009b5d
 8009a88:	08009b91 	.word	0x08009b91
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009a92:	685b      	ldr	r3, [r3, #4]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d00b      	beq.n	8009ab0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009a9e:	685b      	ldr	r3, [r3, #4]
 8009aa0:	687a      	ldr	r2, [r7, #4]
 8009aa2:	7c12      	ldrb	r2, [r2, #16]
 8009aa4:	f107 0108 	add.w	r1, r7, #8
 8009aa8:	4610      	mov	r0, r2
 8009aaa:	4798      	blx	r3
 8009aac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009aae:	e091      	b.n	8009bd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ab0:	6839      	ldr	r1, [r7, #0]
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f000 fa94 	bl	8009fe0 <USBD_CtlError>
            err++;
 8009ab8:	7afb      	ldrb	r3, [r7, #11]
 8009aba:	3301      	adds	r3, #1
 8009abc:	72fb      	strb	r3, [r7, #11]
          break;
 8009abe:	e089      	b.n	8009bd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009ac6:	689b      	ldr	r3, [r3, #8]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d00b      	beq.n	8009ae4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009ad2:	689b      	ldr	r3, [r3, #8]
 8009ad4:	687a      	ldr	r2, [r7, #4]
 8009ad6:	7c12      	ldrb	r2, [r2, #16]
 8009ad8:	f107 0108 	add.w	r1, r7, #8
 8009adc:	4610      	mov	r0, r2
 8009ade:	4798      	blx	r3
 8009ae0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ae2:	e077      	b.n	8009bd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ae4:	6839      	ldr	r1, [r7, #0]
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f000 fa7a 	bl	8009fe0 <USBD_CtlError>
            err++;
 8009aec:	7afb      	ldrb	r3, [r7, #11]
 8009aee:	3301      	adds	r3, #1
 8009af0:	72fb      	strb	r3, [r7, #11]
          break;
 8009af2:	e06f      	b.n	8009bd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009afa:	68db      	ldr	r3, [r3, #12]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d00b      	beq.n	8009b18 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009b06:	68db      	ldr	r3, [r3, #12]
 8009b08:	687a      	ldr	r2, [r7, #4]
 8009b0a:	7c12      	ldrb	r2, [r2, #16]
 8009b0c:	f107 0108 	add.w	r1, r7, #8
 8009b10:	4610      	mov	r0, r2
 8009b12:	4798      	blx	r3
 8009b14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b16:	e05d      	b.n	8009bd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b18:	6839      	ldr	r1, [r7, #0]
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f000 fa60 	bl	8009fe0 <USBD_CtlError>
            err++;
 8009b20:	7afb      	ldrb	r3, [r7, #11]
 8009b22:	3301      	adds	r3, #1
 8009b24:	72fb      	strb	r3, [r7, #11]
          break;
 8009b26:	e055      	b.n	8009bd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009b2e:	691b      	ldr	r3, [r3, #16]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d00b      	beq.n	8009b4c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009b3a:	691b      	ldr	r3, [r3, #16]
 8009b3c:	687a      	ldr	r2, [r7, #4]
 8009b3e:	7c12      	ldrb	r2, [r2, #16]
 8009b40:	f107 0108 	add.w	r1, r7, #8
 8009b44:	4610      	mov	r0, r2
 8009b46:	4798      	blx	r3
 8009b48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b4a:	e043      	b.n	8009bd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b4c:	6839      	ldr	r1, [r7, #0]
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f000 fa46 	bl	8009fe0 <USBD_CtlError>
            err++;
 8009b54:	7afb      	ldrb	r3, [r7, #11]
 8009b56:	3301      	adds	r3, #1
 8009b58:	72fb      	strb	r3, [r7, #11]
          break;
 8009b5a:	e03b      	b.n	8009bd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009b62:	695b      	ldr	r3, [r3, #20]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d00b      	beq.n	8009b80 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009b6e:	695b      	ldr	r3, [r3, #20]
 8009b70:	687a      	ldr	r2, [r7, #4]
 8009b72:	7c12      	ldrb	r2, [r2, #16]
 8009b74:	f107 0108 	add.w	r1, r7, #8
 8009b78:	4610      	mov	r0, r2
 8009b7a:	4798      	blx	r3
 8009b7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b7e:	e029      	b.n	8009bd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b80:	6839      	ldr	r1, [r7, #0]
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f000 fa2c 	bl	8009fe0 <USBD_CtlError>
            err++;
 8009b88:	7afb      	ldrb	r3, [r7, #11]
 8009b8a:	3301      	adds	r3, #1
 8009b8c:	72fb      	strb	r3, [r7, #11]
          break;
 8009b8e:	e021      	b.n	8009bd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009b96:	699b      	ldr	r3, [r3, #24]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d00b      	beq.n	8009bb4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009ba2:	699b      	ldr	r3, [r3, #24]
 8009ba4:	687a      	ldr	r2, [r7, #4]
 8009ba6:	7c12      	ldrb	r2, [r2, #16]
 8009ba8:	f107 0108 	add.w	r1, r7, #8
 8009bac:	4610      	mov	r0, r2
 8009bae:	4798      	blx	r3
 8009bb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009bb2:	e00f      	b.n	8009bd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009bb4:	6839      	ldr	r1, [r7, #0]
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f000 fa12 	bl	8009fe0 <USBD_CtlError>
            err++;
 8009bbc:	7afb      	ldrb	r3, [r7, #11]
 8009bbe:	3301      	adds	r3, #1
 8009bc0:	72fb      	strb	r3, [r7, #11]
          break;
 8009bc2:	e007      	b.n	8009bd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009bc4:	6839      	ldr	r1, [r7, #0]
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f000 fa0a 	bl	8009fe0 <USBD_CtlError>
          err++;
 8009bcc:	7afb      	ldrb	r3, [r7, #11]
 8009bce:	3301      	adds	r3, #1
 8009bd0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009bd2:	e038      	b.n	8009c46 <USBD_GetDescriptor+0x286>
 8009bd4:	e037      	b.n	8009c46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	7c1b      	ldrb	r3, [r3, #16]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d109      	bne.n	8009bf2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009be4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009be6:	f107 0208 	add.w	r2, r7, #8
 8009bea:	4610      	mov	r0, r2
 8009bec:	4798      	blx	r3
 8009bee:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009bf0:	e029      	b.n	8009c46 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009bf2:	6839      	ldr	r1, [r7, #0]
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f000 f9f3 	bl	8009fe0 <USBD_CtlError>
        err++;
 8009bfa:	7afb      	ldrb	r3, [r7, #11]
 8009bfc:	3301      	adds	r3, #1
 8009bfe:	72fb      	strb	r3, [r7, #11]
      break;
 8009c00:	e021      	b.n	8009c46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	7c1b      	ldrb	r3, [r3, #16]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d10d      	bne.n	8009c26 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c12:	f107 0208 	add.w	r2, r7, #8
 8009c16:	4610      	mov	r0, r2
 8009c18:	4798      	blx	r3
 8009c1a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	3301      	adds	r3, #1
 8009c20:	2207      	movs	r2, #7
 8009c22:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009c24:	e00f      	b.n	8009c46 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009c26:	6839      	ldr	r1, [r7, #0]
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f000 f9d9 	bl	8009fe0 <USBD_CtlError>
        err++;
 8009c2e:	7afb      	ldrb	r3, [r7, #11]
 8009c30:	3301      	adds	r3, #1
 8009c32:	72fb      	strb	r3, [r7, #11]
      break;
 8009c34:	e007      	b.n	8009c46 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009c36:	6839      	ldr	r1, [r7, #0]
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f000 f9d1 	bl	8009fe0 <USBD_CtlError>
      err++;
 8009c3e:	7afb      	ldrb	r3, [r7, #11]
 8009c40:	3301      	adds	r3, #1
 8009c42:	72fb      	strb	r3, [r7, #11]
      break;
 8009c44:	bf00      	nop
  }

  if (err != 0U)
 8009c46:	7afb      	ldrb	r3, [r7, #11]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d11c      	bne.n	8009c86 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009c4c:	893b      	ldrh	r3, [r7, #8]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d011      	beq.n	8009c76 <USBD_GetDescriptor+0x2b6>
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	88db      	ldrh	r3, [r3, #6]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d00d      	beq.n	8009c76 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	88da      	ldrh	r2, [r3, #6]
 8009c5e:	893b      	ldrh	r3, [r7, #8]
 8009c60:	4293      	cmp	r3, r2
 8009c62:	bf28      	it	cs
 8009c64:	4613      	movcs	r3, r2
 8009c66:	b29b      	uxth	r3, r3
 8009c68:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009c6a:	893b      	ldrh	r3, [r7, #8]
 8009c6c:	461a      	mov	r2, r3
 8009c6e:	68f9      	ldr	r1, [r7, #12]
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f000 fa1f 	bl	800a0b4 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	88db      	ldrh	r3, [r3, #6]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d104      	bne.n	8009c88 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f000 fa58 	bl	800a134 <USBD_CtlSendStatus>
 8009c84:	e000      	b.n	8009c88 <USBD_GetDescriptor+0x2c8>
    return;
 8009c86:	bf00      	nop
    }
  }
}
 8009c88:	3710      	adds	r7, #16
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}
 8009c8e:	bf00      	nop

08009c90 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b084      	sub	sp, #16
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
 8009c98:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	889b      	ldrh	r3, [r3, #4]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d130      	bne.n	8009d04 <USBD_SetAddress+0x74>
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	88db      	ldrh	r3, [r3, #6]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d12c      	bne.n	8009d04 <USBD_SetAddress+0x74>
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	885b      	ldrh	r3, [r3, #2]
 8009cae:	2b7f      	cmp	r3, #127	@ 0x7f
 8009cb0:	d828      	bhi.n	8009d04 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	885b      	ldrh	r3, [r3, #2]
 8009cb6:	b2db      	uxtb	r3, r3
 8009cb8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009cbc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009cc4:	2b03      	cmp	r3, #3
 8009cc6:	d104      	bne.n	8009cd2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009cc8:	6839      	ldr	r1, [r7, #0]
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f000 f988 	bl	8009fe0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cd0:	e01d      	b.n	8009d0e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	7bfa      	ldrb	r2, [r7, #15]
 8009cd6:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009cda:	7bfb      	ldrb	r3, [r7, #15]
 8009cdc:	4619      	mov	r1, r3
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f000 fd55 	bl	800a78e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f000 fa25 	bl	800a134 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009cea:	7bfb      	ldrb	r3, [r7, #15]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d004      	beq.n	8009cfa <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2202      	movs	r2, #2
 8009cf4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cf8:	e009      	b.n	8009d0e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2201      	movs	r2, #1
 8009cfe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d02:	e004      	b.n	8009d0e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009d04:	6839      	ldr	r1, [r7, #0]
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f000 f96a 	bl	8009fe0 <USBD_CtlError>
  }
}
 8009d0c:	bf00      	nop
 8009d0e:	bf00      	nop
 8009d10:	3710      	adds	r7, #16
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}
	...

08009d18 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b082      	sub	sp, #8
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
 8009d20:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	885b      	ldrh	r3, [r3, #2]
 8009d26:	b2da      	uxtb	r2, r3
 8009d28:	4b41      	ldr	r3, [pc, #260]	@ (8009e30 <USBD_SetConfig+0x118>)
 8009d2a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009d2c:	4b40      	ldr	r3, [pc, #256]	@ (8009e30 <USBD_SetConfig+0x118>)
 8009d2e:	781b      	ldrb	r3, [r3, #0]
 8009d30:	2b01      	cmp	r3, #1
 8009d32:	d904      	bls.n	8009d3e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009d34:	6839      	ldr	r1, [r7, #0]
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f000 f952 	bl	8009fe0 <USBD_CtlError>
 8009d3c:	e075      	b.n	8009e2a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d44:	2b02      	cmp	r3, #2
 8009d46:	d002      	beq.n	8009d4e <USBD_SetConfig+0x36>
 8009d48:	2b03      	cmp	r3, #3
 8009d4a:	d023      	beq.n	8009d94 <USBD_SetConfig+0x7c>
 8009d4c:	e062      	b.n	8009e14 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009d4e:	4b38      	ldr	r3, [pc, #224]	@ (8009e30 <USBD_SetConfig+0x118>)
 8009d50:	781b      	ldrb	r3, [r3, #0]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d01a      	beq.n	8009d8c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009d56:	4b36      	ldr	r3, [pc, #216]	@ (8009e30 <USBD_SetConfig+0x118>)
 8009d58:	781b      	ldrb	r3, [r3, #0]
 8009d5a:	461a      	mov	r2, r3
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2203      	movs	r2, #3
 8009d64:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009d68:	4b31      	ldr	r3, [pc, #196]	@ (8009e30 <USBD_SetConfig+0x118>)
 8009d6a:	781b      	ldrb	r3, [r3, #0]
 8009d6c:	4619      	mov	r1, r3
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f7ff f9e8 	bl	8009144 <USBD_SetClassConfig>
 8009d74:	4603      	mov	r3, r0
 8009d76:	2b02      	cmp	r3, #2
 8009d78:	d104      	bne.n	8009d84 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009d7a:	6839      	ldr	r1, [r7, #0]
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f000 f92f 	bl	8009fe0 <USBD_CtlError>
            return;
 8009d82:	e052      	b.n	8009e2a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f000 f9d5 	bl	800a134 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009d8a:	e04e      	b.n	8009e2a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f000 f9d1 	bl	800a134 <USBD_CtlSendStatus>
        break;
 8009d92:	e04a      	b.n	8009e2a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009d94:	4b26      	ldr	r3, [pc, #152]	@ (8009e30 <USBD_SetConfig+0x118>)
 8009d96:	781b      	ldrb	r3, [r3, #0]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d112      	bne.n	8009dc2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2202      	movs	r2, #2
 8009da0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8009da4:	4b22      	ldr	r3, [pc, #136]	@ (8009e30 <USBD_SetConfig+0x118>)
 8009da6:	781b      	ldrb	r3, [r3, #0]
 8009da8:	461a      	mov	r2, r3
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009dae:	4b20      	ldr	r3, [pc, #128]	@ (8009e30 <USBD_SetConfig+0x118>)
 8009db0:	781b      	ldrb	r3, [r3, #0]
 8009db2:	4619      	mov	r1, r3
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	f7ff f9e4 	bl	8009182 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f000 f9ba 	bl	800a134 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009dc0:	e033      	b.n	8009e2a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009dc2:	4b1b      	ldr	r3, [pc, #108]	@ (8009e30 <USBD_SetConfig+0x118>)
 8009dc4:	781b      	ldrb	r3, [r3, #0]
 8009dc6:	461a      	mov	r2, r3
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	685b      	ldr	r3, [r3, #4]
 8009dcc:	429a      	cmp	r2, r3
 8009dce:	d01d      	beq.n	8009e0c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	685b      	ldr	r3, [r3, #4]
 8009dd4:	b2db      	uxtb	r3, r3
 8009dd6:	4619      	mov	r1, r3
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f7ff f9d2 	bl	8009182 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009dde:	4b14      	ldr	r3, [pc, #80]	@ (8009e30 <USBD_SetConfig+0x118>)
 8009de0:	781b      	ldrb	r3, [r3, #0]
 8009de2:	461a      	mov	r2, r3
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009de8:	4b11      	ldr	r3, [pc, #68]	@ (8009e30 <USBD_SetConfig+0x118>)
 8009dea:	781b      	ldrb	r3, [r3, #0]
 8009dec:	4619      	mov	r1, r3
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f7ff f9a8 	bl	8009144 <USBD_SetClassConfig>
 8009df4:	4603      	mov	r3, r0
 8009df6:	2b02      	cmp	r3, #2
 8009df8:	d104      	bne.n	8009e04 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009dfa:	6839      	ldr	r1, [r7, #0]
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f000 f8ef 	bl	8009fe0 <USBD_CtlError>
            return;
 8009e02:	e012      	b.n	8009e2a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f000 f995 	bl	800a134 <USBD_CtlSendStatus>
        break;
 8009e0a:	e00e      	b.n	8009e2a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f000 f991 	bl	800a134 <USBD_CtlSendStatus>
        break;
 8009e12:	e00a      	b.n	8009e2a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009e14:	6839      	ldr	r1, [r7, #0]
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f000 f8e2 	bl	8009fe0 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009e1c:	4b04      	ldr	r3, [pc, #16]	@ (8009e30 <USBD_SetConfig+0x118>)
 8009e1e:	781b      	ldrb	r3, [r3, #0]
 8009e20:	4619      	mov	r1, r3
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f7ff f9ad 	bl	8009182 <USBD_ClrClassConfig>
        break;
 8009e28:	bf00      	nop
    }
  }
}
 8009e2a:	3708      	adds	r7, #8
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd80      	pop	{r7, pc}
 8009e30:	20000c88 	.word	0x20000c88

08009e34 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b082      	sub	sp, #8
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
 8009e3c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	88db      	ldrh	r3, [r3, #6]
 8009e42:	2b01      	cmp	r3, #1
 8009e44:	d004      	beq.n	8009e50 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009e46:	6839      	ldr	r1, [r7, #0]
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f000 f8c9 	bl	8009fe0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009e4e:	e022      	b.n	8009e96 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e56:	2b02      	cmp	r3, #2
 8009e58:	dc02      	bgt.n	8009e60 <USBD_GetConfig+0x2c>
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	dc03      	bgt.n	8009e66 <USBD_GetConfig+0x32>
 8009e5e:	e015      	b.n	8009e8c <USBD_GetConfig+0x58>
 8009e60:	2b03      	cmp	r3, #3
 8009e62:	d00b      	beq.n	8009e7c <USBD_GetConfig+0x48>
 8009e64:	e012      	b.n	8009e8c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	3308      	adds	r3, #8
 8009e70:	2201      	movs	r2, #1
 8009e72:	4619      	mov	r1, r3
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	f000 f91d 	bl	800a0b4 <USBD_CtlSendData>
        break;
 8009e7a:	e00c      	b.n	8009e96 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	3304      	adds	r3, #4
 8009e80:	2201      	movs	r2, #1
 8009e82:	4619      	mov	r1, r3
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	f000 f915 	bl	800a0b4 <USBD_CtlSendData>
        break;
 8009e8a:	e004      	b.n	8009e96 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009e8c:	6839      	ldr	r1, [r7, #0]
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f000 f8a6 	bl	8009fe0 <USBD_CtlError>
        break;
 8009e94:	bf00      	nop
}
 8009e96:	bf00      	nop
 8009e98:	3708      	adds	r7, #8
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}

08009e9e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e9e:	b580      	push	{r7, lr}
 8009ea0:	b082      	sub	sp, #8
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	6078      	str	r0, [r7, #4]
 8009ea6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009eae:	3b01      	subs	r3, #1
 8009eb0:	2b02      	cmp	r3, #2
 8009eb2:	d81e      	bhi.n	8009ef2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	88db      	ldrh	r3, [r3, #6]
 8009eb8:	2b02      	cmp	r3, #2
 8009eba:	d004      	beq.n	8009ec6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009ebc:	6839      	ldr	r1, [r7, #0]
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f000 f88e 	bl	8009fe0 <USBD_CtlError>
        break;
 8009ec4:	e01a      	b.n	8009efc <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2201      	movs	r2, #1
 8009eca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d005      	beq.n	8009ee2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	68db      	ldr	r3, [r3, #12]
 8009eda:	f043 0202 	orr.w	r2, r3, #2
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	330c      	adds	r3, #12
 8009ee6:	2202      	movs	r2, #2
 8009ee8:	4619      	mov	r1, r3
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f000 f8e2 	bl	800a0b4 <USBD_CtlSendData>
      break;
 8009ef0:	e004      	b.n	8009efc <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009ef2:	6839      	ldr	r1, [r7, #0]
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f000 f873 	bl	8009fe0 <USBD_CtlError>
      break;
 8009efa:	bf00      	nop
  }
}
 8009efc:	bf00      	nop
 8009efe:	3708      	adds	r7, #8
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bd80      	pop	{r7, pc}

08009f04 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b082      	sub	sp, #8
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
 8009f0c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	885b      	ldrh	r3, [r3, #2]
 8009f12:	2b01      	cmp	r3, #1
 8009f14:	d106      	bne.n	8009f24 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2201      	movs	r2, #1
 8009f1a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f000 f908 	bl	800a134 <USBD_CtlSendStatus>
  }
}
 8009f24:	bf00      	nop
 8009f26:	3708      	adds	r7, #8
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	bd80      	pop	{r7, pc}

08009f2c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b082      	sub	sp, #8
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
 8009f34:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f3c:	3b01      	subs	r3, #1
 8009f3e:	2b02      	cmp	r3, #2
 8009f40:	d80b      	bhi.n	8009f5a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	885b      	ldrh	r3, [r3, #2]
 8009f46:	2b01      	cmp	r3, #1
 8009f48:	d10c      	bne.n	8009f64 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8009f52:	6878      	ldr	r0, [r7, #4]
 8009f54:	f000 f8ee 	bl	800a134 <USBD_CtlSendStatus>
      }
      break;
 8009f58:	e004      	b.n	8009f64 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009f5a:	6839      	ldr	r1, [r7, #0]
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f000 f83f 	bl	8009fe0 <USBD_CtlError>
      break;
 8009f62:	e000      	b.n	8009f66 <USBD_ClrFeature+0x3a>
      break;
 8009f64:	bf00      	nop
  }
}
 8009f66:	bf00      	nop
 8009f68:	3708      	adds	r7, #8
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}

08009f6e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009f6e:	b480      	push	{r7}
 8009f70:	b083      	sub	sp, #12
 8009f72:	af00      	add	r7, sp, #0
 8009f74:	6078      	str	r0, [r7, #4]
 8009f76:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	781a      	ldrb	r2, [r3, #0]
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	785a      	ldrb	r2, [r3, #1]
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	3302      	adds	r3, #2
 8009f8c:	781b      	ldrb	r3, [r3, #0]
 8009f8e:	461a      	mov	r2, r3
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	3303      	adds	r3, #3
 8009f94:	781b      	ldrb	r3, [r3, #0]
 8009f96:	021b      	lsls	r3, r3, #8
 8009f98:	b29b      	uxth	r3, r3
 8009f9a:	4413      	add	r3, r2
 8009f9c:	b29a      	uxth	r2, r3
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	3304      	adds	r3, #4
 8009fa6:	781b      	ldrb	r3, [r3, #0]
 8009fa8:	461a      	mov	r2, r3
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	3305      	adds	r3, #5
 8009fae:	781b      	ldrb	r3, [r3, #0]
 8009fb0:	021b      	lsls	r3, r3, #8
 8009fb2:	b29b      	uxth	r3, r3
 8009fb4:	4413      	add	r3, r2
 8009fb6:	b29a      	uxth	r2, r3
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	3306      	adds	r3, #6
 8009fc0:	781b      	ldrb	r3, [r3, #0]
 8009fc2:	461a      	mov	r2, r3
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	3307      	adds	r3, #7
 8009fc8:	781b      	ldrb	r3, [r3, #0]
 8009fca:	021b      	lsls	r3, r3, #8
 8009fcc:	b29b      	uxth	r3, r3
 8009fce:	4413      	add	r3, r2
 8009fd0:	b29a      	uxth	r2, r3
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	80da      	strh	r2, [r3, #6]

}
 8009fd6:	bf00      	nop
 8009fd8:	370c      	adds	r7, #12
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bc80      	pop	{r7}
 8009fde:	4770      	bx	lr

08009fe0 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b082      	sub	sp, #8
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
 8009fe8:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009fea:	2180      	movs	r1, #128	@ 0x80
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f000 fb65 	bl	800a6bc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009ff2:	2100      	movs	r1, #0
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f000 fb61 	bl	800a6bc <USBD_LL_StallEP>
}
 8009ffa:	bf00      	nop
 8009ffc:	3708      	adds	r7, #8
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}

0800a002 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a002:	b580      	push	{r7, lr}
 800a004:	b086      	sub	sp, #24
 800a006:	af00      	add	r7, sp, #0
 800a008:	60f8      	str	r0, [r7, #12]
 800a00a:	60b9      	str	r1, [r7, #8]
 800a00c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a00e:	2300      	movs	r3, #0
 800a010:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d032      	beq.n	800a07e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a018:	68f8      	ldr	r0, [r7, #12]
 800a01a:	f000 f834 	bl	800a086 <USBD_GetLen>
 800a01e:	4603      	mov	r3, r0
 800a020:	3301      	adds	r3, #1
 800a022:	b29b      	uxth	r3, r3
 800a024:	005b      	lsls	r3, r3, #1
 800a026:	b29a      	uxth	r2, r3
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a02c:	7dfb      	ldrb	r3, [r7, #23]
 800a02e:	1c5a      	adds	r2, r3, #1
 800a030:	75fa      	strb	r2, [r7, #23]
 800a032:	461a      	mov	r2, r3
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	4413      	add	r3, r2
 800a038:	687a      	ldr	r2, [r7, #4]
 800a03a:	7812      	ldrb	r2, [r2, #0]
 800a03c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a03e:	7dfb      	ldrb	r3, [r7, #23]
 800a040:	1c5a      	adds	r2, r3, #1
 800a042:	75fa      	strb	r2, [r7, #23]
 800a044:	461a      	mov	r2, r3
 800a046:	68bb      	ldr	r3, [r7, #8]
 800a048:	4413      	add	r3, r2
 800a04a:	2203      	movs	r2, #3
 800a04c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a04e:	e012      	b.n	800a076 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	1c5a      	adds	r2, r3, #1
 800a054:	60fa      	str	r2, [r7, #12]
 800a056:	7dfa      	ldrb	r2, [r7, #23]
 800a058:	1c51      	adds	r1, r2, #1
 800a05a:	75f9      	strb	r1, [r7, #23]
 800a05c:	4611      	mov	r1, r2
 800a05e:	68ba      	ldr	r2, [r7, #8]
 800a060:	440a      	add	r2, r1
 800a062:	781b      	ldrb	r3, [r3, #0]
 800a064:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a066:	7dfb      	ldrb	r3, [r7, #23]
 800a068:	1c5a      	adds	r2, r3, #1
 800a06a:	75fa      	strb	r2, [r7, #23]
 800a06c:	461a      	mov	r2, r3
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	4413      	add	r3, r2
 800a072:	2200      	movs	r2, #0
 800a074:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	781b      	ldrb	r3, [r3, #0]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d1e8      	bne.n	800a050 <USBD_GetString+0x4e>
    }
  }
}
 800a07e:	bf00      	nop
 800a080:	3718      	adds	r7, #24
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}

0800a086 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a086:	b480      	push	{r7}
 800a088:	b085      	sub	sp, #20
 800a08a:	af00      	add	r7, sp, #0
 800a08c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a08e:	2300      	movs	r3, #0
 800a090:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a092:	e005      	b.n	800a0a0 <USBD_GetLen+0x1a>
  {
    len++;
 800a094:	7bfb      	ldrb	r3, [r7, #15]
 800a096:	3301      	adds	r3, #1
 800a098:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	3301      	adds	r3, #1
 800a09e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	781b      	ldrb	r3, [r3, #0]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d1f5      	bne.n	800a094 <USBD_GetLen+0xe>
  }

  return len;
 800a0a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3714      	adds	r7, #20
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bc80      	pop	{r7}
 800a0b2:	4770      	bx	lr

0800a0b4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b084      	sub	sp, #16
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	60f8      	str	r0, [r7, #12]
 800a0bc:	60b9      	str	r1, [r7, #8]
 800a0be:	4613      	mov	r3, r2
 800a0c0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	2202      	movs	r2, #2
 800a0c6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a0ca:	88fa      	ldrh	r2, [r7, #6]
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a0d0:	88fa      	ldrh	r2, [r7, #6]
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a0d6:	88fb      	ldrh	r3, [r7, #6]
 800a0d8:	68ba      	ldr	r2, [r7, #8]
 800a0da:	2100      	movs	r1, #0
 800a0dc:	68f8      	ldr	r0, [r7, #12]
 800a0de:	f000 fb75 	bl	800a7cc <USBD_LL_Transmit>

  return USBD_OK;
 800a0e2:	2300      	movs	r3, #0
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	3710      	adds	r7, #16
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}

0800a0ec <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b084      	sub	sp, #16
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	60f8      	str	r0, [r7, #12]
 800a0f4:	60b9      	str	r1, [r7, #8]
 800a0f6:	4613      	mov	r3, r2
 800a0f8:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a0fa:	88fb      	ldrh	r3, [r7, #6]
 800a0fc:	68ba      	ldr	r2, [r7, #8]
 800a0fe:	2100      	movs	r1, #0
 800a100:	68f8      	ldr	r0, [r7, #12]
 800a102:	f000 fb63 	bl	800a7cc <USBD_LL_Transmit>

  return USBD_OK;
 800a106:	2300      	movs	r3, #0
}
 800a108:	4618      	mov	r0, r3
 800a10a:	3710      	adds	r7, #16
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bd80      	pop	{r7, pc}

0800a110 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b084      	sub	sp, #16
 800a114:	af00      	add	r7, sp, #0
 800a116:	60f8      	str	r0, [r7, #12]
 800a118:	60b9      	str	r1, [r7, #8]
 800a11a:	4613      	mov	r3, r2
 800a11c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a11e:	88fb      	ldrh	r3, [r7, #6]
 800a120:	68ba      	ldr	r2, [r7, #8]
 800a122:	2100      	movs	r1, #0
 800a124:	68f8      	ldr	r0, [r7, #12]
 800a126:	f000 fb74 	bl	800a812 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a12a:	2300      	movs	r3, #0
}
 800a12c:	4618      	mov	r0, r3
 800a12e:	3710      	adds	r7, #16
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}

0800a134 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b082      	sub	sp, #8
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2204      	movs	r2, #4
 800a140:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a144:	2300      	movs	r3, #0
 800a146:	2200      	movs	r2, #0
 800a148:	2100      	movs	r1, #0
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	f000 fb3e 	bl	800a7cc <USBD_LL_Transmit>

  return USBD_OK;
 800a150:	2300      	movs	r3, #0
}
 800a152:	4618      	mov	r0, r3
 800a154:	3708      	adds	r7, #8
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}

0800a15a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a15a:	b580      	push	{r7, lr}
 800a15c:	b082      	sub	sp, #8
 800a15e:	af00      	add	r7, sp, #0
 800a160:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2205      	movs	r2, #5
 800a166:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a16a:	2300      	movs	r3, #0
 800a16c:	2200      	movs	r2, #0
 800a16e:	2100      	movs	r1, #0
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	f000 fb4e 	bl	800a812 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a176:	2300      	movs	r3, #0
}
 800a178:	4618      	mov	r0, r3
 800a17a:	3708      	adds	r7, #8
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bd80      	pop	{r7, pc}

0800a180 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a184:	2200      	movs	r2, #0
 800a186:	490e      	ldr	r1, [pc, #56]	@ (800a1c0 <MX_USB_DEVICE_Init+0x40>)
 800a188:	480e      	ldr	r0, [pc, #56]	@ (800a1c4 <MX_USB_DEVICE_Init+0x44>)
 800a18a:	f7fe ff81 	bl	8009090 <USBD_Init>
 800a18e:	4603      	mov	r3, r0
 800a190:	2b00      	cmp	r3, #0
 800a192:	d001      	beq.n	800a198 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a194:	f7f7 ff07 	bl	8001fa6 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800a198:	490b      	ldr	r1, [pc, #44]	@ (800a1c8 <MX_USB_DEVICE_Init+0x48>)
 800a19a:	480a      	ldr	r0, [pc, #40]	@ (800a1c4 <MX_USB_DEVICE_Init+0x44>)
 800a19c:	f7fe ffa3 	bl	80090e6 <USBD_RegisterClass>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d001      	beq.n	800a1aa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a1a6:	f7f7 fefe 	bl	8001fa6 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a1aa:	4806      	ldr	r0, [pc, #24]	@ (800a1c4 <MX_USB_DEVICE_Init+0x44>)
 800a1ac:	f7fe ffb4 	bl	8009118 <USBD_Start>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d001      	beq.n	800a1ba <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800a1b6:	f7f7 fef6 	bl	8001fa6 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a1ba:	bf00      	nop
 800a1bc:	bd80      	pop	{r7, pc}
 800a1be:	bf00      	nop
 800a1c0:	20000118 	.word	0x20000118
 800a1c4:	200008a0 	.word	0x200008a0
 800a1c8:	20000010 	.word	0x20000010

0800a1cc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b083      	sub	sp, #12
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	6039      	str	r1, [r7, #0]
 800a1d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	2212      	movs	r2, #18
 800a1dc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a1de:	4b03      	ldr	r3, [pc, #12]	@ (800a1ec <USBD_FS_DeviceDescriptor+0x20>)
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	370c      	adds	r7, #12
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bc80      	pop	{r7}
 800a1e8:	4770      	bx	lr
 800a1ea:	bf00      	nop
 800a1ec:	20000134 	.word	0x20000134

0800a1f0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1f0:	b480      	push	{r7}
 800a1f2:	b083      	sub	sp, #12
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	6039      	str	r1, [r7, #0]
 800a1fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	2204      	movs	r2, #4
 800a200:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a202:	4b03      	ldr	r3, [pc, #12]	@ (800a210 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a204:	4618      	mov	r0, r3
 800a206:	370c      	adds	r7, #12
 800a208:	46bd      	mov	sp, r7
 800a20a:	bc80      	pop	{r7}
 800a20c:	4770      	bx	lr
 800a20e:	bf00      	nop
 800a210:	20000148 	.word	0x20000148

0800a214 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b082      	sub	sp, #8
 800a218:	af00      	add	r7, sp, #0
 800a21a:	4603      	mov	r3, r0
 800a21c:	6039      	str	r1, [r7, #0]
 800a21e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a220:	79fb      	ldrb	r3, [r7, #7]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d105      	bne.n	800a232 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a226:	683a      	ldr	r2, [r7, #0]
 800a228:	4907      	ldr	r1, [pc, #28]	@ (800a248 <USBD_FS_ProductStrDescriptor+0x34>)
 800a22a:	4808      	ldr	r0, [pc, #32]	@ (800a24c <USBD_FS_ProductStrDescriptor+0x38>)
 800a22c:	f7ff fee9 	bl	800a002 <USBD_GetString>
 800a230:	e004      	b.n	800a23c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a232:	683a      	ldr	r2, [r7, #0]
 800a234:	4904      	ldr	r1, [pc, #16]	@ (800a248 <USBD_FS_ProductStrDescriptor+0x34>)
 800a236:	4805      	ldr	r0, [pc, #20]	@ (800a24c <USBD_FS_ProductStrDescriptor+0x38>)
 800a238:	f7ff fee3 	bl	800a002 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a23c:	4b02      	ldr	r3, [pc, #8]	@ (800a248 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a23e:	4618      	mov	r0, r3
 800a240:	3708      	adds	r7, #8
 800a242:	46bd      	mov	sp, r7
 800a244:	bd80      	pop	{r7, pc}
 800a246:	bf00      	nop
 800a248:	20000c8c 	.word	0x20000c8c
 800a24c:	0800dc34 	.word	0x0800dc34

0800a250 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b082      	sub	sp, #8
 800a254:	af00      	add	r7, sp, #0
 800a256:	4603      	mov	r3, r0
 800a258:	6039      	str	r1, [r7, #0]
 800a25a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a25c:	683a      	ldr	r2, [r7, #0]
 800a25e:	4904      	ldr	r1, [pc, #16]	@ (800a270 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a260:	4804      	ldr	r0, [pc, #16]	@ (800a274 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a262:	f7ff fece 	bl	800a002 <USBD_GetString>
  return USBD_StrDesc;
 800a266:	4b02      	ldr	r3, [pc, #8]	@ (800a270 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a268:	4618      	mov	r0, r3
 800a26a:	3708      	adds	r7, #8
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}
 800a270:	20000c8c 	.word	0x20000c8c
 800a274:	0800dc4c 	.word	0x0800dc4c

0800a278 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b082      	sub	sp, #8
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	4603      	mov	r3, r0
 800a280:	6039      	str	r1, [r7, #0]
 800a282:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	221a      	movs	r2, #26
 800a288:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a28a:	f000 f843 	bl	800a314 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a28e:	4b02      	ldr	r3, [pc, #8]	@ (800a298 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a290:	4618      	mov	r0, r3
 800a292:	3708      	adds	r7, #8
 800a294:	46bd      	mov	sp, r7
 800a296:	bd80      	pop	{r7, pc}
 800a298:	2000014c 	.word	0x2000014c

0800a29c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b082      	sub	sp, #8
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	6039      	str	r1, [r7, #0]
 800a2a6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a2a8:	79fb      	ldrb	r3, [r7, #7]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d105      	bne.n	800a2ba <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a2ae:	683a      	ldr	r2, [r7, #0]
 800a2b0:	4907      	ldr	r1, [pc, #28]	@ (800a2d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a2b2:	4808      	ldr	r0, [pc, #32]	@ (800a2d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a2b4:	f7ff fea5 	bl	800a002 <USBD_GetString>
 800a2b8:	e004      	b.n	800a2c4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a2ba:	683a      	ldr	r2, [r7, #0]
 800a2bc:	4904      	ldr	r1, [pc, #16]	@ (800a2d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a2be:	4805      	ldr	r0, [pc, #20]	@ (800a2d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a2c0:	f7ff fe9f 	bl	800a002 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a2c4:	4b02      	ldr	r3, [pc, #8]	@ (800a2d0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	3708      	adds	r7, #8
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}
 800a2ce:	bf00      	nop
 800a2d0:	20000c8c 	.word	0x20000c8c
 800a2d4:	0800dc60 	.word	0x0800dc60

0800a2d8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b082      	sub	sp, #8
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	4603      	mov	r3, r0
 800a2e0:	6039      	str	r1, [r7, #0]
 800a2e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a2e4:	79fb      	ldrb	r3, [r7, #7]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d105      	bne.n	800a2f6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a2ea:	683a      	ldr	r2, [r7, #0]
 800a2ec:	4907      	ldr	r1, [pc, #28]	@ (800a30c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a2ee:	4808      	ldr	r0, [pc, #32]	@ (800a310 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a2f0:	f7ff fe87 	bl	800a002 <USBD_GetString>
 800a2f4:	e004      	b.n	800a300 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a2f6:	683a      	ldr	r2, [r7, #0]
 800a2f8:	4904      	ldr	r1, [pc, #16]	@ (800a30c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a2fa:	4805      	ldr	r0, [pc, #20]	@ (800a310 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a2fc:	f7ff fe81 	bl	800a002 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a300:	4b02      	ldr	r3, [pc, #8]	@ (800a30c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a302:	4618      	mov	r0, r3
 800a304:	3708      	adds	r7, #8
 800a306:	46bd      	mov	sp, r7
 800a308:	bd80      	pop	{r7, pc}
 800a30a:	bf00      	nop
 800a30c:	20000c8c 	.word	0x20000c8c
 800a310:	0800dc6c 	.word	0x0800dc6c

0800a314 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b084      	sub	sp, #16
 800a318:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a31a:	4b0f      	ldr	r3, [pc, #60]	@ (800a358 <Get_SerialNum+0x44>)
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a320:	4b0e      	ldr	r3, [pc, #56]	@ (800a35c <Get_SerialNum+0x48>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a326:	4b0e      	ldr	r3, [pc, #56]	@ (800a360 <Get_SerialNum+0x4c>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a32c:	68fa      	ldr	r2, [r7, #12]
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	4413      	add	r3, r2
 800a332:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d009      	beq.n	800a34e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a33a:	2208      	movs	r2, #8
 800a33c:	4909      	ldr	r1, [pc, #36]	@ (800a364 <Get_SerialNum+0x50>)
 800a33e:	68f8      	ldr	r0, [r7, #12]
 800a340:	f000 f814 	bl	800a36c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a344:	2204      	movs	r2, #4
 800a346:	4908      	ldr	r1, [pc, #32]	@ (800a368 <Get_SerialNum+0x54>)
 800a348:	68b8      	ldr	r0, [r7, #8]
 800a34a:	f000 f80f 	bl	800a36c <IntToUnicode>
  }
}
 800a34e:	bf00      	nop
 800a350:	3710      	adds	r7, #16
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}
 800a356:	bf00      	nop
 800a358:	1ffff7e8 	.word	0x1ffff7e8
 800a35c:	1ffff7ec 	.word	0x1ffff7ec
 800a360:	1ffff7f0 	.word	0x1ffff7f0
 800a364:	2000014e 	.word	0x2000014e
 800a368:	2000015e 	.word	0x2000015e

0800a36c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a36c:	b480      	push	{r7}
 800a36e:	b087      	sub	sp, #28
 800a370:	af00      	add	r7, sp, #0
 800a372:	60f8      	str	r0, [r7, #12]
 800a374:	60b9      	str	r1, [r7, #8]
 800a376:	4613      	mov	r3, r2
 800a378:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a37a:	2300      	movs	r3, #0
 800a37c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a37e:	2300      	movs	r3, #0
 800a380:	75fb      	strb	r3, [r7, #23]
 800a382:	e027      	b.n	800a3d4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	0f1b      	lsrs	r3, r3, #28
 800a388:	2b09      	cmp	r3, #9
 800a38a:	d80b      	bhi.n	800a3a4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	0f1b      	lsrs	r3, r3, #28
 800a390:	b2da      	uxtb	r2, r3
 800a392:	7dfb      	ldrb	r3, [r7, #23]
 800a394:	005b      	lsls	r3, r3, #1
 800a396:	4619      	mov	r1, r3
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	440b      	add	r3, r1
 800a39c:	3230      	adds	r2, #48	@ 0x30
 800a39e:	b2d2      	uxtb	r2, r2
 800a3a0:	701a      	strb	r2, [r3, #0]
 800a3a2:	e00a      	b.n	800a3ba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	0f1b      	lsrs	r3, r3, #28
 800a3a8:	b2da      	uxtb	r2, r3
 800a3aa:	7dfb      	ldrb	r3, [r7, #23]
 800a3ac:	005b      	lsls	r3, r3, #1
 800a3ae:	4619      	mov	r1, r3
 800a3b0:	68bb      	ldr	r3, [r7, #8]
 800a3b2:	440b      	add	r3, r1
 800a3b4:	3237      	adds	r2, #55	@ 0x37
 800a3b6:	b2d2      	uxtb	r2, r2
 800a3b8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	011b      	lsls	r3, r3, #4
 800a3be:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a3c0:	7dfb      	ldrb	r3, [r7, #23]
 800a3c2:	005b      	lsls	r3, r3, #1
 800a3c4:	3301      	adds	r3, #1
 800a3c6:	68ba      	ldr	r2, [r7, #8]
 800a3c8:	4413      	add	r3, r2
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a3ce:	7dfb      	ldrb	r3, [r7, #23]
 800a3d0:	3301      	adds	r3, #1
 800a3d2:	75fb      	strb	r3, [r7, #23]
 800a3d4:	7dfa      	ldrb	r2, [r7, #23]
 800a3d6:	79fb      	ldrb	r3, [r7, #7]
 800a3d8:	429a      	cmp	r2, r3
 800a3da:	d3d3      	bcc.n	800a384 <IntToUnicode+0x18>
  }
}
 800a3dc:	bf00      	nop
 800a3de:	bf00      	nop
 800a3e0:	371c      	adds	r7, #28
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bc80      	pop	{r7}
 800a3e6:	4770      	bx	lr

0800a3e8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b084      	sub	sp, #16
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	4a0d      	ldr	r2, [pc, #52]	@ (800a42c <HAL_PCD_MspInit+0x44>)
 800a3f6:	4293      	cmp	r3, r2
 800a3f8:	d113      	bne.n	800a422 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a3fa:	4b0d      	ldr	r3, [pc, #52]	@ (800a430 <HAL_PCD_MspInit+0x48>)
 800a3fc:	69db      	ldr	r3, [r3, #28]
 800a3fe:	4a0c      	ldr	r2, [pc, #48]	@ (800a430 <HAL_PCD_MspInit+0x48>)
 800a400:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a404:	61d3      	str	r3, [r2, #28]
 800a406:	4b0a      	ldr	r3, [pc, #40]	@ (800a430 <HAL_PCD_MspInit+0x48>)
 800a408:	69db      	ldr	r3, [r3, #28]
 800a40a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a40e:	60fb      	str	r3, [r7, #12]
 800a410:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a412:	2200      	movs	r2, #0
 800a414:	2100      	movs	r1, #0
 800a416:	2014      	movs	r0, #20
 800a418:	f7f8 f9e3 	bl	80027e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a41c:	2014      	movs	r0, #20
 800a41e:	f7f8 f9fc 	bl	800281a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a422:	bf00      	nop
 800a424:	3710      	adds	r7, #16
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}
 800a42a:	bf00      	nop
 800a42c:	40005c00 	.word	0x40005c00
 800a430:	40021000 	.word	0x40021000

0800a434 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b082      	sub	sp, #8
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800a448:	4619      	mov	r1, r3
 800a44a:	4610      	mov	r0, r2
 800a44c:	f7fe feac 	bl	80091a8 <USBD_LL_SetupStage>
}
 800a450:	bf00      	nop
 800a452:	3708      	adds	r7, #8
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}

0800a458 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b082      	sub	sp, #8
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
 800a460:	460b      	mov	r3, r1
 800a462:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800a46a:	78fa      	ldrb	r2, [r7, #3]
 800a46c:	6879      	ldr	r1, [r7, #4]
 800a46e:	4613      	mov	r3, r2
 800a470:	009b      	lsls	r3, r3, #2
 800a472:	4413      	add	r3, r2
 800a474:	00db      	lsls	r3, r3, #3
 800a476:	440b      	add	r3, r1
 800a478:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a47c:	681a      	ldr	r2, [r3, #0]
 800a47e:	78fb      	ldrb	r3, [r7, #3]
 800a480:	4619      	mov	r1, r3
 800a482:	f7fe fede 	bl	8009242 <USBD_LL_DataOutStage>
}
 800a486:	bf00      	nop
 800a488:	3708      	adds	r7, #8
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}

0800a48e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a48e:	b580      	push	{r7, lr}
 800a490:	b082      	sub	sp, #8
 800a492:	af00      	add	r7, sp, #0
 800a494:	6078      	str	r0, [r7, #4]
 800a496:	460b      	mov	r3, r1
 800a498:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800a4a0:	78fa      	ldrb	r2, [r7, #3]
 800a4a2:	6879      	ldr	r1, [r7, #4]
 800a4a4:	4613      	mov	r3, r2
 800a4a6:	009b      	lsls	r3, r3, #2
 800a4a8:	4413      	add	r3, r2
 800a4aa:	00db      	lsls	r3, r3, #3
 800a4ac:	440b      	add	r3, r1
 800a4ae:	3324      	adds	r3, #36	@ 0x24
 800a4b0:	681a      	ldr	r2, [r3, #0]
 800a4b2:	78fb      	ldrb	r3, [r7, #3]
 800a4b4:	4619      	mov	r1, r3
 800a4b6:	f7fe ff35 	bl	8009324 <USBD_LL_DataInStage>
}
 800a4ba:	bf00      	nop
 800a4bc:	3708      	adds	r7, #8
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}

0800a4c2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4c2:	b580      	push	{r7, lr}
 800a4c4:	b082      	sub	sp, #8
 800a4c6:	af00      	add	r7, sp, #0
 800a4c8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	f7ff f845 	bl	8009560 <USBD_LL_SOF>
}
 800a4d6:	bf00      	nop
 800a4d8:	3708      	adds	r7, #8
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}

0800a4de <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4de:	b580      	push	{r7, lr}
 800a4e0:	b084      	sub	sp, #16
 800a4e2:	af00      	add	r7, sp, #0
 800a4e4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	799b      	ldrb	r3, [r3, #6]
 800a4ee:	2b02      	cmp	r3, #2
 800a4f0:	d001      	beq.n	800a4f6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a4f2:	f7f7 fd58 	bl	8001fa6 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a4fc:	7bfa      	ldrb	r2, [r7, #15]
 800a4fe:	4611      	mov	r1, r2
 800a500:	4618      	mov	r0, r3
 800a502:	f7fe fff5 	bl	80094f0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a50c:	4618      	mov	r0, r3
 800a50e:	f7fe ffae 	bl	800946e <USBD_LL_Reset>
}
 800a512:	bf00      	nop
 800a514:	3710      	adds	r7, #16
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}
	...

0800a51c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b082      	sub	sp, #8
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a52a:	4618      	mov	r0, r3
 800a52c:	f7fe ffef 	bl	800950e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	7a9b      	ldrb	r3, [r3, #10]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d005      	beq.n	800a544 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a538:	4b04      	ldr	r3, [pc, #16]	@ (800a54c <HAL_PCD_SuspendCallback+0x30>)
 800a53a:	691b      	ldr	r3, [r3, #16]
 800a53c:	4a03      	ldr	r2, [pc, #12]	@ (800a54c <HAL_PCD_SuspendCallback+0x30>)
 800a53e:	f043 0306 	orr.w	r3, r3, #6
 800a542:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a544:	bf00      	nop
 800a546:	3708      	adds	r7, #8
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}
 800a54c:	e000ed00 	.word	0xe000ed00

0800a550 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b082      	sub	sp, #8
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a55e:	4618      	mov	r0, r3
 800a560:	f7fe ffe9 	bl	8009536 <USBD_LL_Resume>
}
 800a564:	bf00      	nop
 800a566:	3708      	adds	r7, #8
 800a568:	46bd      	mov	sp, r7
 800a56a:	bd80      	pop	{r7, pc}

0800a56c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b082      	sub	sp, #8
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a574:	4a1f      	ldr	r2, [pc, #124]	@ (800a5f4 <USBD_LL_Init+0x88>)
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	4a1d      	ldr	r2, [pc, #116]	@ (800a5f4 <USBD_LL_Init+0x88>)
 800a580:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a584:	4b1b      	ldr	r3, [pc, #108]	@ (800a5f4 <USBD_LL_Init+0x88>)
 800a586:	4a1c      	ldr	r2, [pc, #112]	@ (800a5f8 <USBD_LL_Init+0x8c>)
 800a588:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a58a:	4b1a      	ldr	r3, [pc, #104]	@ (800a5f4 <USBD_LL_Init+0x88>)
 800a58c:	2208      	movs	r2, #8
 800a58e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a590:	4b18      	ldr	r3, [pc, #96]	@ (800a5f4 <USBD_LL_Init+0x88>)
 800a592:	2202      	movs	r2, #2
 800a594:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a596:	4b17      	ldr	r3, [pc, #92]	@ (800a5f4 <USBD_LL_Init+0x88>)
 800a598:	2200      	movs	r2, #0
 800a59a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a59c:	4b15      	ldr	r3, [pc, #84]	@ (800a5f4 <USBD_LL_Init+0x88>)
 800a59e:	2200      	movs	r2, #0
 800a5a0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a5a2:	4b14      	ldr	r3, [pc, #80]	@ (800a5f4 <USBD_LL_Init+0x88>)
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a5a8:	4812      	ldr	r0, [pc, #72]	@ (800a5f4 <USBD_LL_Init+0x88>)
 800a5aa:	f7f8 fd77 	bl	800309c <HAL_PCD_Init>
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d001      	beq.n	800a5b8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a5b4:	f7f7 fcf7 	bl	8001fa6 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a5be:	2318      	movs	r3, #24
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	2100      	movs	r1, #0
 800a5c4:	f7fa fa71 	bl	8004aaa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a5ce:	2358      	movs	r3, #88	@ 0x58
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	2180      	movs	r1, #128	@ 0x80
 800a5d4:	f7fa fa69 	bl	8004aaa <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a5de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	2181      	movs	r1, #129	@ 0x81
 800a5e6:	f7fa fa60 	bl	8004aaa <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 800a5ea:	2300      	movs	r3, #0
}
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	3708      	adds	r7, #8
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bd80      	pop	{r7, pc}
 800a5f4:	20000e8c 	.word	0x20000e8c
 800a5f8:	40005c00 	.word	0x40005c00

0800a5fc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b084      	sub	sp, #16
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a604:	2300      	movs	r3, #0
 800a606:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a608:	2300      	movs	r3, #0
 800a60a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a612:	4618      	mov	r0, r3
 800a614:	f7f8 fe38 	bl	8003288 <HAL_PCD_Start>
 800a618:	4603      	mov	r3, r0
 800a61a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a61c:	7bfb      	ldrb	r3, [r7, #15]
 800a61e:	4618      	mov	r0, r3
 800a620:	f000 f93a 	bl	800a898 <USBD_Get_USB_Status>
 800a624:	4603      	mov	r3, r0
 800a626:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a628:	7bbb      	ldrb	r3, [r7, #14]
}
 800a62a:	4618      	mov	r0, r3
 800a62c:	3710      	adds	r7, #16
 800a62e:	46bd      	mov	sp, r7
 800a630:	bd80      	pop	{r7, pc}

0800a632 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a632:	b580      	push	{r7, lr}
 800a634:	b084      	sub	sp, #16
 800a636:	af00      	add	r7, sp, #0
 800a638:	6078      	str	r0, [r7, #4]
 800a63a:	4608      	mov	r0, r1
 800a63c:	4611      	mov	r1, r2
 800a63e:	461a      	mov	r2, r3
 800a640:	4603      	mov	r3, r0
 800a642:	70fb      	strb	r3, [r7, #3]
 800a644:	460b      	mov	r3, r1
 800a646:	70bb      	strb	r3, [r7, #2]
 800a648:	4613      	mov	r3, r2
 800a64a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a64c:	2300      	movs	r3, #0
 800a64e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a650:	2300      	movs	r3, #0
 800a652:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a65a:	78bb      	ldrb	r3, [r7, #2]
 800a65c:	883a      	ldrh	r2, [r7, #0]
 800a65e:	78f9      	ldrb	r1, [r7, #3]
 800a660:	f7f8 ff8c 	bl	800357c <HAL_PCD_EP_Open>
 800a664:	4603      	mov	r3, r0
 800a666:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a668:	7bfb      	ldrb	r3, [r7, #15]
 800a66a:	4618      	mov	r0, r3
 800a66c:	f000 f914 	bl	800a898 <USBD_Get_USB_Status>
 800a670:	4603      	mov	r3, r0
 800a672:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a674:	7bbb      	ldrb	r3, [r7, #14]
}
 800a676:	4618      	mov	r0, r3
 800a678:	3710      	adds	r7, #16
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bd80      	pop	{r7, pc}

0800a67e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a67e:	b580      	push	{r7, lr}
 800a680:	b084      	sub	sp, #16
 800a682:	af00      	add	r7, sp, #0
 800a684:	6078      	str	r0, [r7, #4]
 800a686:	460b      	mov	r3, r1
 800a688:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a68a:	2300      	movs	r3, #0
 800a68c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a68e:	2300      	movs	r3, #0
 800a690:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a698:	78fa      	ldrb	r2, [r7, #3]
 800a69a:	4611      	mov	r1, r2
 800a69c:	4618      	mov	r0, r3
 800a69e:	f7f8 ffca 	bl	8003636 <HAL_PCD_EP_Close>
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6a6:	7bfb      	ldrb	r3, [r7, #15]
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	f000 f8f5 	bl	800a898 <USBD_Get_USB_Status>
 800a6ae:	4603      	mov	r3, r0
 800a6b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6b2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	3710      	adds	r7, #16
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bd80      	pop	{r7, pc}

0800a6bc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b084      	sub	sp, #16
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
 800a6c4:	460b      	mov	r3, r1
 800a6c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a6d6:	78fa      	ldrb	r2, [r7, #3]
 800a6d8:	4611      	mov	r1, r2
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f7f9 f85b 	bl	8003796 <HAL_PCD_EP_SetStall>
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6e4:	7bfb      	ldrb	r3, [r7, #15]
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f000 f8d6 	bl	800a898 <USBD_Get_USB_Status>
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6f0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	3710      	adds	r7, #16
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}

0800a6fa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a6fa:	b580      	push	{r7, lr}
 800a6fc:	b084      	sub	sp, #16
 800a6fe:	af00      	add	r7, sp, #0
 800a700:	6078      	str	r0, [r7, #4]
 800a702:	460b      	mov	r3, r1
 800a704:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a706:	2300      	movs	r3, #0
 800a708:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a70a:	2300      	movs	r3, #0
 800a70c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a714:	78fa      	ldrb	r2, [r7, #3]
 800a716:	4611      	mov	r1, r2
 800a718:	4618      	mov	r0, r3
 800a71a:	f7f9 f89c 	bl	8003856 <HAL_PCD_EP_ClrStall>
 800a71e:	4603      	mov	r3, r0
 800a720:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a722:	7bfb      	ldrb	r3, [r7, #15]
 800a724:	4618      	mov	r0, r3
 800a726:	f000 f8b7 	bl	800a898 <USBD_Get_USB_Status>
 800a72a:	4603      	mov	r3, r0
 800a72c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a72e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a730:	4618      	mov	r0, r3
 800a732:	3710      	adds	r7, #16
 800a734:	46bd      	mov	sp, r7
 800a736:	bd80      	pop	{r7, pc}

0800a738 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a738:	b480      	push	{r7}
 800a73a:	b085      	sub	sp, #20
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
 800a740:	460b      	mov	r3, r1
 800a742:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a74a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a74c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a750:	2b00      	cmp	r3, #0
 800a752:	da0b      	bge.n	800a76c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a754:	78fb      	ldrb	r3, [r7, #3]
 800a756:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a75a:	68f9      	ldr	r1, [r7, #12]
 800a75c:	4613      	mov	r3, r2
 800a75e:	009b      	lsls	r3, r3, #2
 800a760:	4413      	add	r3, r2
 800a762:	00db      	lsls	r3, r3, #3
 800a764:	440b      	add	r3, r1
 800a766:	3312      	adds	r3, #18
 800a768:	781b      	ldrb	r3, [r3, #0]
 800a76a:	e00b      	b.n	800a784 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a76c:	78fb      	ldrb	r3, [r7, #3]
 800a76e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a772:	68f9      	ldr	r1, [r7, #12]
 800a774:	4613      	mov	r3, r2
 800a776:	009b      	lsls	r3, r3, #2
 800a778:	4413      	add	r3, r2
 800a77a:	00db      	lsls	r3, r3, #3
 800a77c:	440b      	add	r3, r1
 800a77e:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800a782:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a784:	4618      	mov	r0, r3
 800a786:	3714      	adds	r7, #20
 800a788:	46bd      	mov	sp, r7
 800a78a:	bc80      	pop	{r7}
 800a78c:	4770      	bx	lr

0800a78e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a78e:	b580      	push	{r7, lr}
 800a790:	b084      	sub	sp, #16
 800a792:	af00      	add	r7, sp, #0
 800a794:	6078      	str	r0, [r7, #4]
 800a796:	460b      	mov	r3, r1
 800a798:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a79a:	2300      	movs	r3, #0
 800a79c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a79e:	2300      	movs	r3, #0
 800a7a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a7a8:	78fa      	ldrb	r2, [r7, #3]
 800a7aa:	4611      	mov	r1, r2
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	f7f8 fec1 	bl	8003534 <HAL_PCD_SetAddress>
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7b6:	7bfb      	ldrb	r3, [r7, #15]
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	f000 f86d 	bl	800a898 <USBD_Get_USB_Status>
 800a7be:	4603      	mov	r3, r0
 800a7c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7c2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	3710      	adds	r7, #16
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd80      	pop	{r7, pc}

0800a7cc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b086      	sub	sp, #24
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	60f8      	str	r0, [r7, #12]
 800a7d4:	607a      	str	r2, [r7, #4]
 800a7d6:	461a      	mov	r2, r3
 800a7d8:	460b      	mov	r3, r1
 800a7da:	72fb      	strb	r3, [r7, #11]
 800a7dc:	4613      	mov	r3, r2
 800a7de:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a7ee:	893b      	ldrh	r3, [r7, #8]
 800a7f0:	7af9      	ldrb	r1, [r7, #11]
 800a7f2:	687a      	ldr	r2, [r7, #4]
 800a7f4:	f7f8 ff98 	bl	8003728 <HAL_PCD_EP_Transmit>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7fc:	7dfb      	ldrb	r3, [r7, #23]
 800a7fe:	4618      	mov	r0, r3
 800a800:	f000 f84a 	bl	800a898 <USBD_Get_USB_Status>
 800a804:	4603      	mov	r3, r0
 800a806:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a808:	7dbb      	ldrb	r3, [r7, #22]
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	3718      	adds	r7, #24
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}

0800a812 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a812:	b580      	push	{r7, lr}
 800a814:	b086      	sub	sp, #24
 800a816:	af00      	add	r7, sp, #0
 800a818:	60f8      	str	r0, [r7, #12]
 800a81a:	607a      	str	r2, [r7, #4]
 800a81c:	461a      	mov	r2, r3
 800a81e:	460b      	mov	r3, r1
 800a820:	72fb      	strb	r3, [r7, #11]
 800a822:	4613      	mov	r3, r2
 800a824:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a826:	2300      	movs	r3, #0
 800a828:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a82a:	2300      	movs	r3, #0
 800a82c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a834:	893b      	ldrh	r3, [r7, #8]
 800a836:	7af9      	ldrb	r1, [r7, #11]
 800a838:	687a      	ldr	r2, [r7, #4]
 800a83a:	f7f8 ff44 	bl	80036c6 <HAL_PCD_EP_Receive>
 800a83e:	4603      	mov	r3, r0
 800a840:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a842:	7dfb      	ldrb	r3, [r7, #23]
 800a844:	4618      	mov	r0, r3
 800a846:	f000 f827 	bl	800a898 <USBD_Get_USB_Status>
 800a84a:	4603      	mov	r3, r0
 800a84c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a84e:	7dbb      	ldrb	r3, [r7, #22]
}
 800a850:	4618      	mov	r0, r3
 800a852:	3718      	adds	r7, #24
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}

0800a858 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a858:	b480      	push	{r7}
 800a85a:	b083      	sub	sp, #12
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a860:	4b02      	ldr	r3, [pc, #8]	@ (800a86c <USBD_static_malloc+0x14>)
}
 800a862:	4618      	mov	r0, r3
 800a864:	370c      	adds	r7, #12
 800a866:	46bd      	mov	sp, r7
 800a868:	bc80      	pop	{r7}
 800a86a:	4770      	bx	lr
 800a86c:	20001164 	.word	0x20001164

0800a870 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a870:	b480      	push	{r7}
 800a872:	b083      	sub	sp, #12
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]

}
 800a878:	bf00      	nop
 800a87a:	370c      	adds	r7, #12
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bc80      	pop	{r7}
 800a880:	4770      	bx	lr

0800a882 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a882:	b480      	push	{r7}
 800a884:	b083      	sub	sp, #12
 800a886:	af00      	add	r7, sp, #0
 800a888:	6078      	str	r0, [r7, #4]
 800a88a:	460b      	mov	r3, r1
 800a88c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a88e:	bf00      	nop
 800a890:	370c      	adds	r7, #12
 800a892:	46bd      	mov	sp, r7
 800a894:	bc80      	pop	{r7}
 800a896:	4770      	bx	lr

0800a898 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a898:	b480      	push	{r7}
 800a89a:	b085      	sub	sp, #20
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	4603      	mov	r3, r0
 800a8a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a8a6:	79fb      	ldrb	r3, [r7, #7]
 800a8a8:	2b03      	cmp	r3, #3
 800a8aa:	d817      	bhi.n	800a8dc <USBD_Get_USB_Status+0x44>
 800a8ac:	a201      	add	r2, pc, #4	@ (adr r2, 800a8b4 <USBD_Get_USB_Status+0x1c>)
 800a8ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8b2:	bf00      	nop
 800a8b4:	0800a8c5 	.word	0x0800a8c5
 800a8b8:	0800a8cb 	.word	0x0800a8cb
 800a8bc:	0800a8d1 	.word	0x0800a8d1
 800a8c0:	0800a8d7 	.word	0x0800a8d7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	73fb      	strb	r3, [r7, #15]
    break;
 800a8c8:	e00b      	b.n	800a8e2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a8ca:	2302      	movs	r3, #2
 800a8cc:	73fb      	strb	r3, [r7, #15]
    break;
 800a8ce:	e008      	b.n	800a8e2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a8d0:	2301      	movs	r3, #1
 800a8d2:	73fb      	strb	r3, [r7, #15]
    break;
 800a8d4:	e005      	b.n	800a8e2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a8d6:	2302      	movs	r3, #2
 800a8d8:	73fb      	strb	r3, [r7, #15]
    break;
 800a8da:	e002      	b.n	800a8e2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a8dc:	2302      	movs	r3, #2
 800a8de:	73fb      	strb	r3, [r7, #15]
    break;
 800a8e0:	bf00      	nop
  }
  return usb_status;
 800a8e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	3714      	adds	r7, #20
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	bc80      	pop	{r7}
 800a8ec:	4770      	bx	lr
 800a8ee:	bf00      	nop

0800a8f0 <sulp>:
 800a8f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8f4:	460f      	mov	r7, r1
 800a8f6:	4690      	mov	r8, r2
 800a8f8:	f002 f892 	bl	800ca20 <__ulp>
 800a8fc:	4604      	mov	r4, r0
 800a8fe:	460d      	mov	r5, r1
 800a900:	f1b8 0f00 	cmp.w	r8, #0
 800a904:	d011      	beq.n	800a92a <sulp+0x3a>
 800a906:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800a90a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a90e:	2b00      	cmp	r3, #0
 800a910:	dd0b      	ble.n	800a92a <sulp+0x3a>
 800a912:	2400      	movs	r4, #0
 800a914:	051b      	lsls	r3, r3, #20
 800a916:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a91a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a91e:	4622      	mov	r2, r4
 800a920:	462b      	mov	r3, r5
 800a922:	f7f5 fde3 	bl	80004ec <__aeabi_dmul>
 800a926:	4604      	mov	r4, r0
 800a928:	460d      	mov	r5, r1
 800a92a:	4620      	mov	r0, r4
 800a92c:	4629      	mov	r1, r5
 800a92e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a932:	0000      	movs	r0, r0
 800a934:	0000      	movs	r0, r0
	...

0800a938 <_strtod_l>:
 800a938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a93c:	b09f      	sub	sp, #124	@ 0x7c
 800a93e:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a940:	2200      	movs	r2, #0
 800a942:	460c      	mov	r4, r1
 800a944:	921a      	str	r2, [sp, #104]	@ 0x68
 800a946:	f04f 0a00 	mov.w	sl, #0
 800a94a:	f04f 0b00 	mov.w	fp, #0
 800a94e:	460a      	mov	r2, r1
 800a950:	9005      	str	r0, [sp, #20]
 800a952:	9219      	str	r2, [sp, #100]	@ 0x64
 800a954:	7811      	ldrb	r1, [r2, #0]
 800a956:	292b      	cmp	r1, #43	@ 0x2b
 800a958:	d048      	beq.n	800a9ec <_strtod_l+0xb4>
 800a95a:	d836      	bhi.n	800a9ca <_strtod_l+0x92>
 800a95c:	290d      	cmp	r1, #13
 800a95e:	d830      	bhi.n	800a9c2 <_strtod_l+0x8a>
 800a960:	2908      	cmp	r1, #8
 800a962:	d830      	bhi.n	800a9c6 <_strtod_l+0x8e>
 800a964:	2900      	cmp	r1, #0
 800a966:	d039      	beq.n	800a9dc <_strtod_l+0xa4>
 800a968:	2200      	movs	r2, #0
 800a96a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a96c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a96e:	782a      	ldrb	r2, [r5, #0]
 800a970:	2a30      	cmp	r2, #48	@ 0x30
 800a972:	f040 80b1 	bne.w	800aad8 <_strtod_l+0x1a0>
 800a976:	786a      	ldrb	r2, [r5, #1]
 800a978:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a97c:	2a58      	cmp	r2, #88	@ 0x58
 800a97e:	d16c      	bne.n	800aa5a <_strtod_l+0x122>
 800a980:	9302      	str	r3, [sp, #8]
 800a982:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a984:	4a8e      	ldr	r2, [pc, #568]	@ (800abc0 <_strtod_l+0x288>)
 800a986:	9301      	str	r3, [sp, #4]
 800a988:	ab1a      	add	r3, sp, #104	@ 0x68
 800a98a:	9300      	str	r3, [sp, #0]
 800a98c:	9805      	ldr	r0, [sp, #20]
 800a98e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a990:	a919      	add	r1, sp, #100	@ 0x64
 800a992:	f001 f941 	bl	800bc18 <__gethex>
 800a996:	f010 060f 	ands.w	r6, r0, #15
 800a99a:	4604      	mov	r4, r0
 800a99c:	d005      	beq.n	800a9aa <_strtod_l+0x72>
 800a99e:	2e06      	cmp	r6, #6
 800a9a0:	d126      	bne.n	800a9f0 <_strtod_l+0xb8>
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	3501      	adds	r5, #1
 800a9a6:	9519      	str	r5, [sp, #100]	@ 0x64
 800a9a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a9aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	f040 8584 	bne.w	800b4ba <_strtod_l+0xb82>
 800a9b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a9b4:	b1bb      	cbz	r3, 800a9e6 <_strtod_l+0xae>
 800a9b6:	4650      	mov	r0, sl
 800a9b8:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800a9bc:	b01f      	add	sp, #124	@ 0x7c
 800a9be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9c2:	2920      	cmp	r1, #32
 800a9c4:	d1d0      	bne.n	800a968 <_strtod_l+0x30>
 800a9c6:	3201      	adds	r2, #1
 800a9c8:	e7c3      	b.n	800a952 <_strtod_l+0x1a>
 800a9ca:	292d      	cmp	r1, #45	@ 0x2d
 800a9cc:	d1cc      	bne.n	800a968 <_strtod_l+0x30>
 800a9ce:	2101      	movs	r1, #1
 800a9d0:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a9d2:	1c51      	adds	r1, r2, #1
 800a9d4:	9119      	str	r1, [sp, #100]	@ 0x64
 800a9d6:	7852      	ldrb	r2, [r2, #1]
 800a9d8:	2a00      	cmp	r2, #0
 800a9da:	d1c7      	bne.n	800a96c <_strtod_l+0x34>
 800a9dc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a9de:	9419      	str	r4, [sp, #100]	@ 0x64
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	f040 8568 	bne.w	800b4b6 <_strtod_l+0xb7e>
 800a9e6:	4650      	mov	r0, sl
 800a9e8:	4659      	mov	r1, fp
 800a9ea:	e7e7      	b.n	800a9bc <_strtod_l+0x84>
 800a9ec:	2100      	movs	r1, #0
 800a9ee:	e7ef      	b.n	800a9d0 <_strtod_l+0x98>
 800a9f0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a9f2:	b13a      	cbz	r2, 800aa04 <_strtod_l+0xcc>
 800a9f4:	2135      	movs	r1, #53	@ 0x35
 800a9f6:	a81c      	add	r0, sp, #112	@ 0x70
 800a9f8:	f002 f902 	bl	800cc00 <__copybits>
 800a9fc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a9fe:	9805      	ldr	r0, [sp, #20]
 800aa00:	f001 fcdc 	bl	800c3bc <_Bfree>
 800aa04:	3e01      	subs	r6, #1
 800aa06:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800aa08:	2e04      	cmp	r6, #4
 800aa0a:	d806      	bhi.n	800aa1a <_strtod_l+0xe2>
 800aa0c:	e8df f006 	tbb	[pc, r6]
 800aa10:	201d0314 	.word	0x201d0314
 800aa14:	14          	.byte	0x14
 800aa15:	00          	.byte	0x00
 800aa16:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800aa1a:	05e1      	lsls	r1, r4, #23
 800aa1c:	bf48      	it	mi
 800aa1e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800aa22:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800aa26:	0d1b      	lsrs	r3, r3, #20
 800aa28:	051b      	lsls	r3, r3, #20
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d1bd      	bne.n	800a9aa <_strtod_l+0x72>
 800aa2e:	f000 fff5 	bl	800ba1c <__errno>
 800aa32:	2322      	movs	r3, #34	@ 0x22
 800aa34:	6003      	str	r3, [r0, #0]
 800aa36:	e7b8      	b.n	800a9aa <_strtod_l+0x72>
 800aa38:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800aa3c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800aa40:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800aa44:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800aa48:	e7e7      	b.n	800aa1a <_strtod_l+0xe2>
 800aa4a:	f8df b178 	ldr.w	fp, [pc, #376]	@ 800abc4 <_strtod_l+0x28c>
 800aa4e:	e7e4      	b.n	800aa1a <_strtod_l+0xe2>
 800aa50:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800aa54:	f04f 3aff 	mov.w	sl, #4294967295
 800aa58:	e7df      	b.n	800aa1a <_strtod_l+0xe2>
 800aa5a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aa5c:	1c5a      	adds	r2, r3, #1
 800aa5e:	9219      	str	r2, [sp, #100]	@ 0x64
 800aa60:	785b      	ldrb	r3, [r3, #1]
 800aa62:	2b30      	cmp	r3, #48	@ 0x30
 800aa64:	d0f9      	beq.n	800aa5a <_strtod_l+0x122>
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d09f      	beq.n	800a9aa <_strtod_l+0x72>
 800aa6a:	2301      	movs	r3, #1
 800aa6c:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa6e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aa70:	220a      	movs	r2, #10
 800aa72:	930c      	str	r3, [sp, #48]	@ 0x30
 800aa74:	2300      	movs	r3, #0
 800aa76:	461f      	mov	r7, r3
 800aa78:	9308      	str	r3, [sp, #32]
 800aa7a:	930a      	str	r3, [sp, #40]	@ 0x28
 800aa7c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800aa7e:	7805      	ldrb	r5, [r0, #0]
 800aa80:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800aa84:	b2d9      	uxtb	r1, r3
 800aa86:	2909      	cmp	r1, #9
 800aa88:	d928      	bls.n	800aadc <_strtod_l+0x1a4>
 800aa8a:	2201      	movs	r2, #1
 800aa8c:	494e      	ldr	r1, [pc, #312]	@ (800abc8 <_strtod_l+0x290>)
 800aa8e:	f000 ff41 	bl	800b914 <strncmp>
 800aa92:	2800      	cmp	r0, #0
 800aa94:	d032      	beq.n	800aafc <_strtod_l+0x1c4>
 800aa96:	2000      	movs	r0, #0
 800aa98:	462a      	mov	r2, r5
 800aa9a:	4681      	mov	r9, r0
 800aa9c:	463d      	mov	r5, r7
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	2a65      	cmp	r2, #101	@ 0x65
 800aaa2:	d001      	beq.n	800aaa8 <_strtod_l+0x170>
 800aaa4:	2a45      	cmp	r2, #69	@ 0x45
 800aaa6:	d114      	bne.n	800aad2 <_strtod_l+0x19a>
 800aaa8:	b91d      	cbnz	r5, 800aab2 <_strtod_l+0x17a>
 800aaaa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aaac:	4302      	orrs	r2, r0
 800aaae:	d095      	beq.n	800a9dc <_strtod_l+0xa4>
 800aab0:	2500      	movs	r5, #0
 800aab2:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800aab4:	1c62      	adds	r2, r4, #1
 800aab6:	9219      	str	r2, [sp, #100]	@ 0x64
 800aab8:	7862      	ldrb	r2, [r4, #1]
 800aaba:	2a2b      	cmp	r2, #43	@ 0x2b
 800aabc:	d077      	beq.n	800abae <_strtod_l+0x276>
 800aabe:	2a2d      	cmp	r2, #45	@ 0x2d
 800aac0:	d07b      	beq.n	800abba <_strtod_l+0x282>
 800aac2:	f04f 0c00 	mov.w	ip, #0
 800aac6:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800aaca:	2909      	cmp	r1, #9
 800aacc:	f240 8082 	bls.w	800abd4 <_strtod_l+0x29c>
 800aad0:	9419      	str	r4, [sp, #100]	@ 0x64
 800aad2:	f04f 0800 	mov.w	r8, #0
 800aad6:	e0a2      	b.n	800ac1e <_strtod_l+0x2e6>
 800aad8:	2300      	movs	r3, #0
 800aada:	e7c7      	b.n	800aa6c <_strtod_l+0x134>
 800aadc:	2f08      	cmp	r7, #8
 800aade:	bfd5      	itete	le
 800aae0:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800aae2:	9908      	ldrgt	r1, [sp, #32]
 800aae4:	fb02 3301 	mlale	r3, r2, r1, r3
 800aae8:	fb02 3301 	mlagt	r3, r2, r1, r3
 800aaec:	f100 0001 	add.w	r0, r0, #1
 800aaf0:	bfd4      	ite	le
 800aaf2:	930a      	strle	r3, [sp, #40]	@ 0x28
 800aaf4:	9308      	strgt	r3, [sp, #32]
 800aaf6:	3701      	adds	r7, #1
 800aaf8:	9019      	str	r0, [sp, #100]	@ 0x64
 800aafa:	e7bf      	b.n	800aa7c <_strtod_l+0x144>
 800aafc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aafe:	1c5a      	adds	r2, r3, #1
 800ab00:	9219      	str	r2, [sp, #100]	@ 0x64
 800ab02:	785a      	ldrb	r2, [r3, #1]
 800ab04:	b37f      	cbz	r7, 800ab66 <_strtod_l+0x22e>
 800ab06:	4681      	mov	r9, r0
 800ab08:	463d      	mov	r5, r7
 800ab0a:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ab0e:	2b09      	cmp	r3, #9
 800ab10:	d912      	bls.n	800ab38 <_strtod_l+0x200>
 800ab12:	2301      	movs	r3, #1
 800ab14:	e7c4      	b.n	800aaa0 <_strtod_l+0x168>
 800ab16:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ab18:	3001      	adds	r0, #1
 800ab1a:	1c5a      	adds	r2, r3, #1
 800ab1c:	9219      	str	r2, [sp, #100]	@ 0x64
 800ab1e:	785a      	ldrb	r2, [r3, #1]
 800ab20:	2a30      	cmp	r2, #48	@ 0x30
 800ab22:	d0f8      	beq.n	800ab16 <_strtod_l+0x1de>
 800ab24:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ab28:	2b08      	cmp	r3, #8
 800ab2a:	f200 84cb 	bhi.w	800b4c4 <_strtod_l+0xb8c>
 800ab2e:	4681      	mov	r9, r0
 800ab30:	2000      	movs	r0, #0
 800ab32:	4605      	mov	r5, r0
 800ab34:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ab36:	930c      	str	r3, [sp, #48]	@ 0x30
 800ab38:	3a30      	subs	r2, #48	@ 0x30
 800ab3a:	f100 0301 	add.w	r3, r0, #1
 800ab3e:	d02a      	beq.n	800ab96 <_strtod_l+0x25e>
 800ab40:	4499      	add	r9, r3
 800ab42:	210a      	movs	r1, #10
 800ab44:	462b      	mov	r3, r5
 800ab46:	eb00 0c05 	add.w	ip, r0, r5
 800ab4a:	4563      	cmp	r3, ip
 800ab4c:	d10d      	bne.n	800ab6a <_strtod_l+0x232>
 800ab4e:	1c69      	adds	r1, r5, #1
 800ab50:	4401      	add	r1, r0
 800ab52:	4428      	add	r0, r5
 800ab54:	2808      	cmp	r0, #8
 800ab56:	dc16      	bgt.n	800ab86 <_strtod_l+0x24e>
 800ab58:	230a      	movs	r3, #10
 800ab5a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ab5c:	fb03 2300 	mla	r3, r3, r0, r2
 800ab60:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab62:	2300      	movs	r3, #0
 800ab64:	e018      	b.n	800ab98 <_strtod_l+0x260>
 800ab66:	4638      	mov	r0, r7
 800ab68:	e7da      	b.n	800ab20 <_strtod_l+0x1e8>
 800ab6a:	2b08      	cmp	r3, #8
 800ab6c:	f103 0301 	add.w	r3, r3, #1
 800ab70:	dc03      	bgt.n	800ab7a <_strtod_l+0x242>
 800ab72:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800ab74:	434e      	muls	r6, r1
 800ab76:	960a      	str	r6, [sp, #40]	@ 0x28
 800ab78:	e7e7      	b.n	800ab4a <_strtod_l+0x212>
 800ab7a:	2b10      	cmp	r3, #16
 800ab7c:	bfde      	ittt	le
 800ab7e:	9e08      	ldrle	r6, [sp, #32]
 800ab80:	434e      	mulle	r6, r1
 800ab82:	9608      	strle	r6, [sp, #32]
 800ab84:	e7e1      	b.n	800ab4a <_strtod_l+0x212>
 800ab86:	280f      	cmp	r0, #15
 800ab88:	dceb      	bgt.n	800ab62 <_strtod_l+0x22a>
 800ab8a:	230a      	movs	r3, #10
 800ab8c:	9808      	ldr	r0, [sp, #32]
 800ab8e:	fb03 2300 	mla	r3, r3, r0, r2
 800ab92:	9308      	str	r3, [sp, #32]
 800ab94:	e7e5      	b.n	800ab62 <_strtod_l+0x22a>
 800ab96:	4629      	mov	r1, r5
 800ab98:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ab9a:	460d      	mov	r5, r1
 800ab9c:	1c50      	adds	r0, r2, #1
 800ab9e:	9019      	str	r0, [sp, #100]	@ 0x64
 800aba0:	7852      	ldrb	r2, [r2, #1]
 800aba2:	4618      	mov	r0, r3
 800aba4:	e7b1      	b.n	800ab0a <_strtod_l+0x1d2>
 800aba6:	f04f 0900 	mov.w	r9, #0
 800abaa:	2301      	movs	r3, #1
 800abac:	e77d      	b.n	800aaaa <_strtod_l+0x172>
 800abae:	f04f 0c00 	mov.w	ip, #0
 800abb2:	1ca2      	adds	r2, r4, #2
 800abb4:	9219      	str	r2, [sp, #100]	@ 0x64
 800abb6:	78a2      	ldrb	r2, [r4, #2]
 800abb8:	e785      	b.n	800aac6 <_strtod_l+0x18e>
 800abba:	f04f 0c01 	mov.w	ip, #1
 800abbe:	e7f8      	b.n	800abb2 <_strtod_l+0x27a>
 800abc0:	0800dcc8 	.word	0x0800dcc8
 800abc4:	7ff00000 	.word	0x7ff00000
 800abc8:	0800dca6 	.word	0x0800dca6
 800abcc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800abce:	1c51      	adds	r1, r2, #1
 800abd0:	9119      	str	r1, [sp, #100]	@ 0x64
 800abd2:	7852      	ldrb	r2, [r2, #1]
 800abd4:	2a30      	cmp	r2, #48	@ 0x30
 800abd6:	d0f9      	beq.n	800abcc <_strtod_l+0x294>
 800abd8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800abdc:	2908      	cmp	r1, #8
 800abde:	f63f af78 	bhi.w	800aad2 <_strtod_l+0x19a>
 800abe2:	f04f 080a 	mov.w	r8, #10
 800abe6:	3a30      	subs	r2, #48	@ 0x30
 800abe8:	920e      	str	r2, [sp, #56]	@ 0x38
 800abea:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800abec:	920f      	str	r2, [sp, #60]	@ 0x3c
 800abee:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800abf0:	1c56      	adds	r6, r2, #1
 800abf2:	9619      	str	r6, [sp, #100]	@ 0x64
 800abf4:	7852      	ldrb	r2, [r2, #1]
 800abf6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800abfa:	f1be 0f09 	cmp.w	lr, #9
 800abfe:	d939      	bls.n	800ac74 <_strtod_l+0x33c>
 800ac00:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ac02:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ac06:	1a76      	subs	r6, r6, r1
 800ac08:	2e08      	cmp	r6, #8
 800ac0a:	dc03      	bgt.n	800ac14 <_strtod_l+0x2dc>
 800ac0c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ac0e:	4588      	cmp	r8, r1
 800ac10:	bfa8      	it	ge
 800ac12:	4688      	movge	r8, r1
 800ac14:	f1bc 0f00 	cmp.w	ip, #0
 800ac18:	d001      	beq.n	800ac1e <_strtod_l+0x2e6>
 800ac1a:	f1c8 0800 	rsb	r8, r8, #0
 800ac1e:	2d00      	cmp	r5, #0
 800ac20:	d14e      	bne.n	800acc0 <_strtod_l+0x388>
 800ac22:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ac24:	4308      	orrs	r0, r1
 800ac26:	f47f aec0 	bne.w	800a9aa <_strtod_l+0x72>
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	f47f aed6 	bne.w	800a9dc <_strtod_l+0xa4>
 800ac30:	2a69      	cmp	r2, #105	@ 0x69
 800ac32:	d028      	beq.n	800ac86 <_strtod_l+0x34e>
 800ac34:	dc25      	bgt.n	800ac82 <_strtod_l+0x34a>
 800ac36:	2a49      	cmp	r2, #73	@ 0x49
 800ac38:	d025      	beq.n	800ac86 <_strtod_l+0x34e>
 800ac3a:	2a4e      	cmp	r2, #78	@ 0x4e
 800ac3c:	f47f aece 	bne.w	800a9dc <_strtod_l+0xa4>
 800ac40:	499a      	ldr	r1, [pc, #616]	@ (800aeac <_strtod_l+0x574>)
 800ac42:	a819      	add	r0, sp, #100	@ 0x64
 800ac44:	f001 fa0a 	bl	800c05c <__match>
 800ac48:	2800      	cmp	r0, #0
 800ac4a:	f43f aec7 	beq.w	800a9dc <_strtod_l+0xa4>
 800ac4e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ac50:	781b      	ldrb	r3, [r3, #0]
 800ac52:	2b28      	cmp	r3, #40	@ 0x28
 800ac54:	d12e      	bne.n	800acb4 <_strtod_l+0x37c>
 800ac56:	4996      	ldr	r1, [pc, #600]	@ (800aeb0 <_strtod_l+0x578>)
 800ac58:	aa1c      	add	r2, sp, #112	@ 0x70
 800ac5a:	a819      	add	r0, sp, #100	@ 0x64
 800ac5c:	f001 fa12 	bl	800c084 <__hexnan>
 800ac60:	2805      	cmp	r0, #5
 800ac62:	d127      	bne.n	800acb4 <_strtod_l+0x37c>
 800ac64:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ac66:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ac6a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ac6e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ac72:	e69a      	b.n	800a9aa <_strtod_l+0x72>
 800ac74:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ac76:	fb08 2101 	mla	r1, r8, r1, r2
 800ac7a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800ac7e:	920e      	str	r2, [sp, #56]	@ 0x38
 800ac80:	e7b5      	b.n	800abee <_strtod_l+0x2b6>
 800ac82:	2a6e      	cmp	r2, #110	@ 0x6e
 800ac84:	e7da      	b.n	800ac3c <_strtod_l+0x304>
 800ac86:	498b      	ldr	r1, [pc, #556]	@ (800aeb4 <_strtod_l+0x57c>)
 800ac88:	a819      	add	r0, sp, #100	@ 0x64
 800ac8a:	f001 f9e7 	bl	800c05c <__match>
 800ac8e:	2800      	cmp	r0, #0
 800ac90:	f43f aea4 	beq.w	800a9dc <_strtod_l+0xa4>
 800ac94:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ac96:	4988      	ldr	r1, [pc, #544]	@ (800aeb8 <_strtod_l+0x580>)
 800ac98:	3b01      	subs	r3, #1
 800ac9a:	a819      	add	r0, sp, #100	@ 0x64
 800ac9c:	9319      	str	r3, [sp, #100]	@ 0x64
 800ac9e:	f001 f9dd 	bl	800c05c <__match>
 800aca2:	b910      	cbnz	r0, 800acaa <_strtod_l+0x372>
 800aca4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aca6:	3301      	adds	r3, #1
 800aca8:	9319      	str	r3, [sp, #100]	@ 0x64
 800acaa:	f04f 0a00 	mov.w	sl, #0
 800acae:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 800aebc <_strtod_l+0x584>
 800acb2:	e67a      	b.n	800a9aa <_strtod_l+0x72>
 800acb4:	4882      	ldr	r0, [pc, #520]	@ (800aec0 <_strtod_l+0x588>)
 800acb6:	f000 fef5 	bl	800baa4 <nan>
 800acba:	4682      	mov	sl, r0
 800acbc:	468b      	mov	fp, r1
 800acbe:	e674      	b.n	800a9aa <_strtod_l+0x72>
 800acc0:	eba8 0309 	sub.w	r3, r8, r9
 800acc4:	2f00      	cmp	r7, #0
 800acc6:	bf08      	it	eq
 800acc8:	462f      	moveq	r7, r5
 800acca:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800accc:	2d10      	cmp	r5, #16
 800acce:	462c      	mov	r4, r5
 800acd0:	9309      	str	r3, [sp, #36]	@ 0x24
 800acd2:	bfa8      	it	ge
 800acd4:	2410      	movge	r4, #16
 800acd6:	f7f5 fb8f 	bl	80003f8 <__aeabi_ui2d>
 800acda:	2d09      	cmp	r5, #9
 800acdc:	4682      	mov	sl, r0
 800acde:	468b      	mov	fp, r1
 800ace0:	dc11      	bgt.n	800ad06 <_strtod_l+0x3ce>
 800ace2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	f43f ae60 	beq.w	800a9aa <_strtod_l+0x72>
 800acea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acec:	dd76      	ble.n	800addc <_strtod_l+0x4a4>
 800acee:	2b16      	cmp	r3, #22
 800acf0:	dc5d      	bgt.n	800adae <_strtod_l+0x476>
 800acf2:	4974      	ldr	r1, [pc, #464]	@ (800aec4 <_strtod_l+0x58c>)
 800acf4:	4652      	mov	r2, sl
 800acf6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800acfa:	465b      	mov	r3, fp
 800acfc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad00:	f7f5 fbf4 	bl	80004ec <__aeabi_dmul>
 800ad04:	e7d9      	b.n	800acba <_strtod_l+0x382>
 800ad06:	4b6f      	ldr	r3, [pc, #444]	@ (800aec4 <_strtod_l+0x58c>)
 800ad08:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ad0c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800ad10:	f7f5 fbec 	bl	80004ec <__aeabi_dmul>
 800ad14:	4682      	mov	sl, r0
 800ad16:	9808      	ldr	r0, [sp, #32]
 800ad18:	468b      	mov	fp, r1
 800ad1a:	f7f5 fb6d 	bl	80003f8 <__aeabi_ui2d>
 800ad1e:	4602      	mov	r2, r0
 800ad20:	460b      	mov	r3, r1
 800ad22:	4650      	mov	r0, sl
 800ad24:	4659      	mov	r1, fp
 800ad26:	f7f5 fa2b 	bl	8000180 <__adddf3>
 800ad2a:	2d0f      	cmp	r5, #15
 800ad2c:	4682      	mov	sl, r0
 800ad2e:	468b      	mov	fp, r1
 800ad30:	ddd7      	ble.n	800ace2 <_strtod_l+0x3aa>
 800ad32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad34:	1b2c      	subs	r4, r5, r4
 800ad36:	441c      	add	r4, r3
 800ad38:	2c00      	cmp	r4, #0
 800ad3a:	f340 8096 	ble.w	800ae6a <_strtod_l+0x532>
 800ad3e:	f014 030f 	ands.w	r3, r4, #15
 800ad42:	d00a      	beq.n	800ad5a <_strtod_l+0x422>
 800ad44:	495f      	ldr	r1, [pc, #380]	@ (800aec4 <_strtod_l+0x58c>)
 800ad46:	4652      	mov	r2, sl
 800ad48:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ad4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad50:	465b      	mov	r3, fp
 800ad52:	f7f5 fbcb 	bl	80004ec <__aeabi_dmul>
 800ad56:	4682      	mov	sl, r0
 800ad58:	468b      	mov	fp, r1
 800ad5a:	f034 040f 	bics.w	r4, r4, #15
 800ad5e:	d073      	beq.n	800ae48 <_strtod_l+0x510>
 800ad60:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800ad64:	dd48      	ble.n	800adf8 <_strtod_l+0x4c0>
 800ad66:	2400      	movs	r4, #0
 800ad68:	46a0      	mov	r8, r4
 800ad6a:	46a1      	mov	r9, r4
 800ad6c:	940a      	str	r4, [sp, #40]	@ 0x28
 800ad6e:	2322      	movs	r3, #34	@ 0x22
 800ad70:	f04f 0a00 	mov.w	sl, #0
 800ad74:	9a05      	ldr	r2, [sp, #20]
 800ad76:	f8df b144 	ldr.w	fp, [pc, #324]	@ 800aebc <_strtod_l+0x584>
 800ad7a:	6013      	str	r3, [r2, #0]
 800ad7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	f43f ae13 	beq.w	800a9aa <_strtod_l+0x72>
 800ad84:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ad86:	9805      	ldr	r0, [sp, #20]
 800ad88:	f001 fb18 	bl	800c3bc <_Bfree>
 800ad8c:	4649      	mov	r1, r9
 800ad8e:	9805      	ldr	r0, [sp, #20]
 800ad90:	f001 fb14 	bl	800c3bc <_Bfree>
 800ad94:	4641      	mov	r1, r8
 800ad96:	9805      	ldr	r0, [sp, #20]
 800ad98:	f001 fb10 	bl	800c3bc <_Bfree>
 800ad9c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ad9e:	9805      	ldr	r0, [sp, #20]
 800ada0:	f001 fb0c 	bl	800c3bc <_Bfree>
 800ada4:	4621      	mov	r1, r4
 800ada6:	9805      	ldr	r0, [sp, #20]
 800ada8:	f001 fb08 	bl	800c3bc <_Bfree>
 800adac:	e5fd      	b.n	800a9aa <_strtod_l+0x72>
 800adae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800adb0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800adb4:	4293      	cmp	r3, r2
 800adb6:	dbbc      	blt.n	800ad32 <_strtod_l+0x3fa>
 800adb8:	4c42      	ldr	r4, [pc, #264]	@ (800aec4 <_strtod_l+0x58c>)
 800adba:	f1c5 050f 	rsb	r5, r5, #15
 800adbe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800adc2:	4652      	mov	r2, sl
 800adc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800adc8:	465b      	mov	r3, fp
 800adca:	f7f5 fb8f 	bl	80004ec <__aeabi_dmul>
 800adce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800add0:	1b5d      	subs	r5, r3, r5
 800add2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800add6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800adda:	e791      	b.n	800ad00 <_strtod_l+0x3c8>
 800addc:	3316      	adds	r3, #22
 800adde:	dba8      	blt.n	800ad32 <_strtod_l+0x3fa>
 800ade0:	4b38      	ldr	r3, [pc, #224]	@ (800aec4 <_strtod_l+0x58c>)
 800ade2:	eba9 0808 	sub.w	r8, r9, r8
 800ade6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800adea:	4650      	mov	r0, sl
 800adec:	e9d8 2300 	ldrd	r2, r3, [r8]
 800adf0:	4659      	mov	r1, fp
 800adf2:	f7f5 fca5 	bl	8000740 <__aeabi_ddiv>
 800adf6:	e760      	b.n	800acba <_strtod_l+0x382>
 800adf8:	4b33      	ldr	r3, [pc, #204]	@ (800aec8 <_strtod_l+0x590>)
 800adfa:	4650      	mov	r0, sl
 800adfc:	9308      	str	r3, [sp, #32]
 800adfe:	2300      	movs	r3, #0
 800ae00:	4659      	mov	r1, fp
 800ae02:	461e      	mov	r6, r3
 800ae04:	1124      	asrs	r4, r4, #4
 800ae06:	2c01      	cmp	r4, #1
 800ae08:	dc21      	bgt.n	800ae4e <_strtod_l+0x516>
 800ae0a:	b10b      	cbz	r3, 800ae10 <_strtod_l+0x4d8>
 800ae0c:	4682      	mov	sl, r0
 800ae0e:	468b      	mov	fp, r1
 800ae10:	492d      	ldr	r1, [pc, #180]	@ (800aec8 <_strtod_l+0x590>)
 800ae12:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800ae16:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800ae1a:	4652      	mov	r2, sl
 800ae1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae20:	465b      	mov	r3, fp
 800ae22:	f7f5 fb63 	bl	80004ec <__aeabi_dmul>
 800ae26:	4b25      	ldr	r3, [pc, #148]	@ (800aebc <_strtod_l+0x584>)
 800ae28:	460a      	mov	r2, r1
 800ae2a:	400b      	ands	r3, r1
 800ae2c:	4927      	ldr	r1, [pc, #156]	@ (800aecc <_strtod_l+0x594>)
 800ae2e:	4682      	mov	sl, r0
 800ae30:	428b      	cmp	r3, r1
 800ae32:	d898      	bhi.n	800ad66 <_strtod_l+0x42e>
 800ae34:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800ae38:	428b      	cmp	r3, r1
 800ae3a:	bf86      	itte	hi
 800ae3c:	f04f 3aff 	movhi.w	sl, #4294967295
 800ae40:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800aed0 <_strtod_l+0x598>
 800ae44:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800ae48:	2300      	movs	r3, #0
 800ae4a:	9308      	str	r3, [sp, #32]
 800ae4c:	e07a      	b.n	800af44 <_strtod_l+0x60c>
 800ae4e:	07e2      	lsls	r2, r4, #31
 800ae50:	d505      	bpl.n	800ae5e <_strtod_l+0x526>
 800ae52:	9b08      	ldr	r3, [sp, #32]
 800ae54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae58:	f7f5 fb48 	bl	80004ec <__aeabi_dmul>
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	9a08      	ldr	r2, [sp, #32]
 800ae60:	3601      	adds	r6, #1
 800ae62:	3208      	adds	r2, #8
 800ae64:	1064      	asrs	r4, r4, #1
 800ae66:	9208      	str	r2, [sp, #32]
 800ae68:	e7cd      	b.n	800ae06 <_strtod_l+0x4ce>
 800ae6a:	d0ed      	beq.n	800ae48 <_strtod_l+0x510>
 800ae6c:	4264      	negs	r4, r4
 800ae6e:	f014 020f 	ands.w	r2, r4, #15
 800ae72:	d00a      	beq.n	800ae8a <_strtod_l+0x552>
 800ae74:	4b13      	ldr	r3, [pc, #76]	@ (800aec4 <_strtod_l+0x58c>)
 800ae76:	4650      	mov	r0, sl
 800ae78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ae7c:	4659      	mov	r1, fp
 800ae7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae82:	f7f5 fc5d 	bl	8000740 <__aeabi_ddiv>
 800ae86:	4682      	mov	sl, r0
 800ae88:	468b      	mov	fp, r1
 800ae8a:	1124      	asrs	r4, r4, #4
 800ae8c:	d0dc      	beq.n	800ae48 <_strtod_l+0x510>
 800ae8e:	2c1f      	cmp	r4, #31
 800ae90:	dd20      	ble.n	800aed4 <_strtod_l+0x59c>
 800ae92:	2400      	movs	r4, #0
 800ae94:	46a0      	mov	r8, r4
 800ae96:	46a1      	mov	r9, r4
 800ae98:	940a      	str	r4, [sp, #40]	@ 0x28
 800ae9a:	2322      	movs	r3, #34	@ 0x22
 800ae9c:	9a05      	ldr	r2, [sp, #20]
 800ae9e:	f04f 0a00 	mov.w	sl, #0
 800aea2:	f04f 0b00 	mov.w	fp, #0
 800aea6:	6013      	str	r3, [r2, #0]
 800aea8:	e768      	b.n	800ad7c <_strtod_l+0x444>
 800aeaa:	bf00      	nop
 800aeac:	0800dcb1 	.word	0x0800dcb1
 800aeb0:	0800dcb4 	.word	0x0800dcb4
 800aeb4:	0800dca8 	.word	0x0800dca8
 800aeb8:	0800dcab 	.word	0x0800dcab
 800aebc:	7ff00000 	.word	0x7ff00000
 800aec0:	0800e05e 	.word	0x0800e05e
 800aec4:	0800df28 	.word	0x0800df28
 800aec8:	0800df00 	.word	0x0800df00
 800aecc:	7ca00000 	.word	0x7ca00000
 800aed0:	7fefffff 	.word	0x7fefffff
 800aed4:	f014 0310 	ands.w	r3, r4, #16
 800aed8:	bf18      	it	ne
 800aeda:	236a      	movne	r3, #106	@ 0x6a
 800aedc:	4650      	mov	r0, sl
 800aede:	9308      	str	r3, [sp, #32]
 800aee0:	4659      	mov	r1, fp
 800aee2:	2300      	movs	r3, #0
 800aee4:	4ea9      	ldr	r6, [pc, #676]	@ (800b18c <_strtod_l+0x854>)
 800aee6:	07e2      	lsls	r2, r4, #31
 800aee8:	d504      	bpl.n	800aef4 <_strtod_l+0x5bc>
 800aeea:	e9d6 2300 	ldrd	r2, r3, [r6]
 800aeee:	f7f5 fafd 	bl	80004ec <__aeabi_dmul>
 800aef2:	2301      	movs	r3, #1
 800aef4:	1064      	asrs	r4, r4, #1
 800aef6:	f106 0608 	add.w	r6, r6, #8
 800aefa:	d1f4      	bne.n	800aee6 <_strtod_l+0x5ae>
 800aefc:	b10b      	cbz	r3, 800af02 <_strtod_l+0x5ca>
 800aefe:	4682      	mov	sl, r0
 800af00:	468b      	mov	fp, r1
 800af02:	9b08      	ldr	r3, [sp, #32]
 800af04:	b1b3      	cbz	r3, 800af34 <_strtod_l+0x5fc>
 800af06:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800af0a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800af0e:	2b00      	cmp	r3, #0
 800af10:	4659      	mov	r1, fp
 800af12:	dd0f      	ble.n	800af34 <_strtod_l+0x5fc>
 800af14:	2b1f      	cmp	r3, #31
 800af16:	dd57      	ble.n	800afc8 <_strtod_l+0x690>
 800af18:	2b34      	cmp	r3, #52	@ 0x34
 800af1a:	bfd8      	it	le
 800af1c:	f04f 33ff 	movle.w	r3, #4294967295
 800af20:	f04f 0a00 	mov.w	sl, #0
 800af24:	bfcf      	iteee	gt
 800af26:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800af2a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800af2e:	4093      	lslle	r3, r2
 800af30:	ea03 0b01 	andle.w	fp, r3, r1
 800af34:	2200      	movs	r2, #0
 800af36:	2300      	movs	r3, #0
 800af38:	4650      	mov	r0, sl
 800af3a:	4659      	mov	r1, fp
 800af3c:	f7f5 fd3e 	bl	80009bc <__aeabi_dcmpeq>
 800af40:	2800      	cmp	r0, #0
 800af42:	d1a6      	bne.n	800ae92 <_strtod_l+0x55a>
 800af44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af46:	463a      	mov	r2, r7
 800af48:	9300      	str	r3, [sp, #0]
 800af4a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800af4c:	462b      	mov	r3, r5
 800af4e:	9805      	ldr	r0, [sp, #20]
 800af50:	f001 fa9c 	bl	800c48c <__s2b>
 800af54:	900a      	str	r0, [sp, #40]	@ 0x28
 800af56:	2800      	cmp	r0, #0
 800af58:	f43f af05 	beq.w	800ad66 <_strtod_l+0x42e>
 800af5c:	2400      	movs	r4, #0
 800af5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af60:	eba9 0308 	sub.w	r3, r9, r8
 800af64:	2a00      	cmp	r2, #0
 800af66:	bfa8      	it	ge
 800af68:	2300      	movge	r3, #0
 800af6a:	46a0      	mov	r8, r4
 800af6c:	9312      	str	r3, [sp, #72]	@ 0x48
 800af6e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800af72:	9316      	str	r3, [sp, #88]	@ 0x58
 800af74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af76:	9805      	ldr	r0, [sp, #20]
 800af78:	6859      	ldr	r1, [r3, #4]
 800af7a:	f001 f9df 	bl	800c33c <_Balloc>
 800af7e:	4681      	mov	r9, r0
 800af80:	2800      	cmp	r0, #0
 800af82:	f43f aef4 	beq.w	800ad6e <_strtod_l+0x436>
 800af86:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af88:	300c      	adds	r0, #12
 800af8a:	691a      	ldr	r2, [r3, #16]
 800af8c:	f103 010c 	add.w	r1, r3, #12
 800af90:	3202      	adds	r2, #2
 800af92:	0092      	lsls	r2, r2, #2
 800af94:	f000 fd77 	bl	800ba86 <memcpy>
 800af98:	ab1c      	add	r3, sp, #112	@ 0x70
 800af9a:	9301      	str	r3, [sp, #4]
 800af9c:	ab1b      	add	r3, sp, #108	@ 0x6c
 800af9e:	9300      	str	r3, [sp, #0]
 800afa0:	4652      	mov	r2, sl
 800afa2:	465b      	mov	r3, fp
 800afa4:	9805      	ldr	r0, [sp, #20]
 800afa6:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800afaa:	f001 fda1 	bl	800caf0 <__d2b>
 800afae:	901a      	str	r0, [sp, #104]	@ 0x68
 800afb0:	2800      	cmp	r0, #0
 800afb2:	f43f aedc 	beq.w	800ad6e <_strtod_l+0x436>
 800afb6:	2101      	movs	r1, #1
 800afb8:	9805      	ldr	r0, [sp, #20]
 800afba:	f001 fafd 	bl	800c5b8 <__i2b>
 800afbe:	4680      	mov	r8, r0
 800afc0:	b948      	cbnz	r0, 800afd6 <_strtod_l+0x69e>
 800afc2:	f04f 0800 	mov.w	r8, #0
 800afc6:	e6d2      	b.n	800ad6e <_strtod_l+0x436>
 800afc8:	f04f 32ff 	mov.w	r2, #4294967295
 800afcc:	fa02 f303 	lsl.w	r3, r2, r3
 800afd0:	ea03 0a0a 	and.w	sl, r3, sl
 800afd4:	e7ae      	b.n	800af34 <_strtod_l+0x5fc>
 800afd6:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800afd8:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800afda:	2d00      	cmp	r5, #0
 800afdc:	bfab      	itete	ge
 800afde:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800afe0:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800afe2:	18ef      	addge	r7, r5, r3
 800afe4:	1b5e      	sublt	r6, r3, r5
 800afe6:	9b08      	ldr	r3, [sp, #32]
 800afe8:	bfa8      	it	ge
 800afea:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800afec:	eba5 0503 	sub.w	r5, r5, r3
 800aff0:	4415      	add	r5, r2
 800aff2:	4b67      	ldr	r3, [pc, #412]	@ (800b190 <_strtod_l+0x858>)
 800aff4:	f105 35ff 	add.w	r5, r5, #4294967295
 800aff8:	bfb8      	it	lt
 800affa:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800affc:	429d      	cmp	r5, r3
 800affe:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b002:	da50      	bge.n	800b0a6 <_strtod_l+0x76e>
 800b004:	1b5b      	subs	r3, r3, r5
 800b006:	2b1f      	cmp	r3, #31
 800b008:	f04f 0101 	mov.w	r1, #1
 800b00c:	eba2 0203 	sub.w	r2, r2, r3
 800b010:	dc3d      	bgt.n	800b08e <_strtod_l+0x756>
 800b012:	fa01 f303 	lsl.w	r3, r1, r3
 800b016:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b018:	2300      	movs	r3, #0
 800b01a:	9310      	str	r3, [sp, #64]	@ 0x40
 800b01c:	18bd      	adds	r5, r7, r2
 800b01e:	9b08      	ldr	r3, [sp, #32]
 800b020:	42af      	cmp	r7, r5
 800b022:	4416      	add	r6, r2
 800b024:	441e      	add	r6, r3
 800b026:	463b      	mov	r3, r7
 800b028:	bfa8      	it	ge
 800b02a:	462b      	movge	r3, r5
 800b02c:	42b3      	cmp	r3, r6
 800b02e:	bfa8      	it	ge
 800b030:	4633      	movge	r3, r6
 800b032:	2b00      	cmp	r3, #0
 800b034:	bfc2      	ittt	gt
 800b036:	1aed      	subgt	r5, r5, r3
 800b038:	1af6      	subgt	r6, r6, r3
 800b03a:	1aff      	subgt	r7, r7, r3
 800b03c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b03e:	2b00      	cmp	r3, #0
 800b040:	dd16      	ble.n	800b070 <_strtod_l+0x738>
 800b042:	4641      	mov	r1, r8
 800b044:	461a      	mov	r2, r3
 800b046:	9805      	ldr	r0, [sp, #20]
 800b048:	f001 fb74 	bl	800c734 <__pow5mult>
 800b04c:	4680      	mov	r8, r0
 800b04e:	2800      	cmp	r0, #0
 800b050:	d0b7      	beq.n	800afc2 <_strtod_l+0x68a>
 800b052:	4601      	mov	r1, r0
 800b054:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b056:	9805      	ldr	r0, [sp, #20]
 800b058:	f001 fac4 	bl	800c5e4 <__multiply>
 800b05c:	900e      	str	r0, [sp, #56]	@ 0x38
 800b05e:	2800      	cmp	r0, #0
 800b060:	f43f ae85 	beq.w	800ad6e <_strtod_l+0x436>
 800b064:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b066:	9805      	ldr	r0, [sp, #20]
 800b068:	f001 f9a8 	bl	800c3bc <_Bfree>
 800b06c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b06e:	931a      	str	r3, [sp, #104]	@ 0x68
 800b070:	2d00      	cmp	r5, #0
 800b072:	dc1d      	bgt.n	800b0b0 <_strtod_l+0x778>
 800b074:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b076:	2b00      	cmp	r3, #0
 800b078:	dd23      	ble.n	800b0c2 <_strtod_l+0x78a>
 800b07a:	4649      	mov	r1, r9
 800b07c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b07e:	9805      	ldr	r0, [sp, #20]
 800b080:	f001 fb58 	bl	800c734 <__pow5mult>
 800b084:	4681      	mov	r9, r0
 800b086:	b9e0      	cbnz	r0, 800b0c2 <_strtod_l+0x78a>
 800b088:	f04f 0900 	mov.w	r9, #0
 800b08c:	e66f      	b.n	800ad6e <_strtod_l+0x436>
 800b08e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b092:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b096:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b09a:	35e2      	adds	r5, #226	@ 0xe2
 800b09c:	fa01 f305 	lsl.w	r3, r1, r5
 800b0a0:	9310      	str	r3, [sp, #64]	@ 0x40
 800b0a2:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b0a4:	e7ba      	b.n	800b01c <_strtod_l+0x6e4>
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	9310      	str	r3, [sp, #64]	@ 0x40
 800b0aa:	2301      	movs	r3, #1
 800b0ac:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b0ae:	e7b5      	b.n	800b01c <_strtod_l+0x6e4>
 800b0b0:	462a      	mov	r2, r5
 800b0b2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b0b4:	9805      	ldr	r0, [sp, #20]
 800b0b6:	f001 fb97 	bl	800c7e8 <__lshift>
 800b0ba:	901a      	str	r0, [sp, #104]	@ 0x68
 800b0bc:	2800      	cmp	r0, #0
 800b0be:	d1d9      	bne.n	800b074 <_strtod_l+0x73c>
 800b0c0:	e655      	b.n	800ad6e <_strtod_l+0x436>
 800b0c2:	2e00      	cmp	r6, #0
 800b0c4:	dd07      	ble.n	800b0d6 <_strtod_l+0x79e>
 800b0c6:	4649      	mov	r1, r9
 800b0c8:	4632      	mov	r2, r6
 800b0ca:	9805      	ldr	r0, [sp, #20]
 800b0cc:	f001 fb8c 	bl	800c7e8 <__lshift>
 800b0d0:	4681      	mov	r9, r0
 800b0d2:	2800      	cmp	r0, #0
 800b0d4:	d0d8      	beq.n	800b088 <_strtod_l+0x750>
 800b0d6:	2f00      	cmp	r7, #0
 800b0d8:	dd08      	ble.n	800b0ec <_strtod_l+0x7b4>
 800b0da:	4641      	mov	r1, r8
 800b0dc:	463a      	mov	r2, r7
 800b0de:	9805      	ldr	r0, [sp, #20]
 800b0e0:	f001 fb82 	bl	800c7e8 <__lshift>
 800b0e4:	4680      	mov	r8, r0
 800b0e6:	2800      	cmp	r0, #0
 800b0e8:	f43f ae41 	beq.w	800ad6e <_strtod_l+0x436>
 800b0ec:	464a      	mov	r2, r9
 800b0ee:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b0f0:	9805      	ldr	r0, [sp, #20]
 800b0f2:	f001 fc01 	bl	800c8f8 <__mdiff>
 800b0f6:	4604      	mov	r4, r0
 800b0f8:	2800      	cmp	r0, #0
 800b0fa:	f43f ae38 	beq.w	800ad6e <_strtod_l+0x436>
 800b0fe:	68c3      	ldr	r3, [r0, #12]
 800b100:	4641      	mov	r1, r8
 800b102:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b104:	2300      	movs	r3, #0
 800b106:	60c3      	str	r3, [r0, #12]
 800b108:	f001 fbda 	bl	800c8c0 <__mcmp>
 800b10c:	2800      	cmp	r0, #0
 800b10e:	da45      	bge.n	800b19c <_strtod_l+0x864>
 800b110:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b112:	ea53 030a 	orrs.w	r3, r3, sl
 800b116:	d16b      	bne.n	800b1f0 <_strtod_l+0x8b8>
 800b118:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d167      	bne.n	800b1f0 <_strtod_l+0x8b8>
 800b120:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b124:	0d1b      	lsrs	r3, r3, #20
 800b126:	051b      	lsls	r3, r3, #20
 800b128:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b12c:	d960      	bls.n	800b1f0 <_strtod_l+0x8b8>
 800b12e:	6963      	ldr	r3, [r4, #20]
 800b130:	b913      	cbnz	r3, 800b138 <_strtod_l+0x800>
 800b132:	6923      	ldr	r3, [r4, #16]
 800b134:	2b01      	cmp	r3, #1
 800b136:	dd5b      	ble.n	800b1f0 <_strtod_l+0x8b8>
 800b138:	4621      	mov	r1, r4
 800b13a:	2201      	movs	r2, #1
 800b13c:	9805      	ldr	r0, [sp, #20]
 800b13e:	f001 fb53 	bl	800c7e8 <__lshift>
 800b142:	4641      	mov	r1, r8
 800b144:	4604      	mov	r4, r0
 800b146:	f001 fbbb 	bl	800c8c0 <__mcmp>
 800b14a:	2800      	cmp	r0, #0
 800b14c:	dd50      	ble.n	800b1f0 <_strtod_l+0x8b8>
 800b14e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b152:	9a08      	ldr	r2, [sp, #32]
 800b154:	0d1b      	lsrs	r3, r3, #20
 800b156:	051b      	lsls	r3, r3, #20
 800b158:	2a00      	cmp	r2, #0
 800b15a:	d06a      	beq.n	800b232 <_strtod_l+0x8fa>
 800b15c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b160:	d867      	bhi.n	800b232 <_strtod_l+0x8fa>
 800b162:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b166:	f67f ae98 	bls.w	800ae9a <_strtod_l+0x562>
 800b16a:	4650      	mov	r0, sl
 800b16c:	4659      	mov	r1, fp
 800b16e:	4b09      	ldr	r3, [pc, #36]	@ (800b194 <_strtod_l+0x85c>)
 800b170:	2200      	movs	r2, #0
 800b172:	f7f5 f9bb 	bl	80004ec <__aeabi_dmul>
 800b176:	4b08      	ldr	r3, [pc, #32]	@ (800b198 <_strtod_l+0x860>)
 800b178:	4682      	mov	sl, r0
 800b17a:	400b      	ands	r3, r1
 800b17c:	468b      	mov	fp, r1
 800b17e:	2b00      	cmp	r3, #0
 800b180:	f47f ae00 	bne.w	800ad84 <_strtod_l+0x44c>
 800b184:	2322      	movs	r3, #34	@ 0x22
 800b186:	9a05      	ldr	r2, [sp, #20]
 800b188:	6013      	str	r3, [r2, #0]
 800b18a:	e5fb      	b.n	800ad84 <_strtod_l+0x44c>
 800b18c:	0800dce0 	.word	0x0800dce0
 800b190:	fffffc02 	.word	0xfffffc02
 800b194:	39500000 	.word	0x39500000
 800b198:	7ff00000 	.word	0x7ff00000
 800b19c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b1a0:	d165      	bne.n	800b26e <_strtod_l+0x936>
 800b1a2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b1a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b1a8:	b35a      	cbz	r2, 800b202 <_strtod_l+0x8ca>
 800b1aa:	4a99      	ldr	r2, [pc, #612]	@ (800b410 <_strtod_l+0xad8>)
 800b1ac:	4293      	cmp	r3, r2
 800b1ae:	d12b      	bne.n	800b208 <_strtod_l+0x8d0>
 800b1b0:	9b08      	ldr	r3, [sp, #32]
 800b1b2:	4651      	mov	r1, sl
 800b1b4:	b303      	cbz	r3, 800b1f8 <_strtod_l+0x8c0>
 800b1b6:	465a      	mov	r2, fp
 800b1b8:	4b96      	ldr	r3, [pc, #600]	@ (800b414 <_strtod_l+0xadc>)
 800b1ba:	4013      	ands	r3, r2
 800b1bc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b1c0:	f04f 32ff 	mov.w	r2, #4294967295
 800b1c4:	d81b      	bhi.n	800b1fe <_strtod_l+0x8c6>
 800b1c6:	0d1b      	lsrs	r3, r3, #20
 800b1c8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b1cc:	fa02 f303 	lsl.w	r3, r2, r3
 800b1d0:	4299      	cmp	r1, r3
 800b1d2:	d119      	bne.n	800b208 <_strtod_l+0x8d0>
 800b1d4:	4b90      	ldr	r3, [pc, #576]	@ (800b418 <_strtod_l+0xae0>)
 800b1d6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b1d8:	429a      	cmp	r2, r3
 800b1da:	d102      	bne.n	800b1e2 <_strtod_l+0x8aa>
 800b1dc:	3101      	adds	r1, #1
 800b1de:	f43f adc6 	beq.w	800ad6e <_strtod_l+0x436>
 800b1e2:	f04f 0a00 	mov.w	sl, #0
 800b1e6:	4b8b      	ldr	r3, [pc, #556]	@ (800b414 <_strtod_l+0xadc>)
 800b1e8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b1ea:	401a      	ands	r2, r3
 800b1ec:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b1f0:	9b08      	ldr	r3, [sp, #32]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d1b9      	bne.n	800b16a <_strtod_l+0x832>
 800b1f6:	e5c5      	b.n	800ad84 <_strtod_l+0x44c>
 800b1f8:	f04f 33ff 	mov.w	r3, #4294967295
 800b1fc:	e7e8      	b.n	800b1d0 <_strtod_l+0x898>
 800b1fe:	4613      	mov	r3, r2
 800b200:	e7e6      	b.n	800b1d0 <_strtod_l+0x898>
 800b202:	ea53 030a 	orrs.w	r3, r3, sl
 800b206:	d0a2      	beq.n	800b14e <_strtod_l+0x816>
 800b208:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b20a:	b1db      	cbz	r3, 800b244 <_strtod_l+0x90c>
 800b20c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b20e:	4213      	tst	r3, r2
 800b210:	d0ee      	beq.n	800b1f0 <_strtod_l+0x8b8>
 800b212:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b214:	4650      	mov	r0, sl
 800b216:	4659      	mov	r1, fp
 800b218:	9a08      	ldr	r2, [sp, #32]
 800b21a:	b1bb      	cbz	r3, 800b24c <_strtod_l+0x914>
 800b21c:	f7ff fb68 	bl	800a8f0 <sulp>
 800b220:	4602      	mov	r2, r0
 800b222:	460b      	mov	r3, r1
 800b224:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b228:	f7f4 ffaa 	bl	8000180 <__adddf3>
 800b22c:	4682      	mov	sl, r0
 800b22e:	468b      	mov	fp, r1
 800b230:	e7de      	b.n	800b1f0 <_strtod_l+0x8b8>
 800b232:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b236:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b23a:	f04f 3aff 	mov.w	sl, #4294967295
 800b23e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b242:	e7d5      	b.n	800b1f0 <_strtod_l+0x8b8>
 800b244:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b246:	ea13 0f0a 	tst.w	r3, sl
 800b24a:	e7e1      	b.n	800b210 <_strtod_l+0x8d8>
 800b24c:	f7ff fb50 	bl	800a8f0 <sulp>
 800b250:	4602      	mov	r2, r0
 800b252:	460b      	mov	r3, r1
 800b254:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b258:	f7f4 ff90 	bl	800017c <__aeabi_dsub>
 800b25c:	2200      	movs	r2, #0
 800b25e:	2300      	movs	r3, #0
 800b260:	4682      	mov	sl, r0
 800b262:	468b      	mov	fp, r1
 800b264:	f7f5 fbaa 	bl	80009bc <__aeabi_dcmpeq>
 800b268:	2800      	cmp	r0, #0
 800b26a:	d0c1      	beq.n	800b1f0 <_strtod_l+0x8b8>
 800b26c:	e615      	b.n	800ae9a <_strtod_l+0x562>
 800b26e:	4641      	mov	r1, r8
 800b270:	4620      	mov	r0, r4
 800b272:	f001 fc95 	bl	800cba0 <__ratio>
 800b276:	2200      	movs	r2, #0
 800b278:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b27c:	4606      	mov	r6, r0
 800b27e:	460f      	mov	r7, r1
 800b280:	f7f5 fbb0 	bl	80009e4 <__aeabi_dcmple>
 800b284:	2800      	cmp	r0, #0
 800b286:	d06d      	beq.n	800b364 <_strtod_l+0xa2c>
 800b288:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d178      	bne.n	800b380 <_strtod_l+0xa48>
 800b28e:	f1ba 0f00 	cmp.w	sl, #0
 800b292:	d156      	bne.n	800b342 <_strtod_l+0xa0a>
 800b294:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b296:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d158      	bne.n	800b350 <_strtod_l+0xa18>
 800b29e:	2200      	movs	r2, #0
 800b2a0:	4630      	mov	r0, r6
 800b2a2:	4639      	mov	r1, r7
 800b2a4:	4b5d      	ldr	r3, [pc, #372]	@ (800b41c <_strtod_l+0xae4>)
 800b2a6:	f7f5 fb93 	bl	80009d0 <__aeabi_dcmplt>
 800b2aa:	2800      	cmp	r0, #0
 800b2ac:	d157      	bne.n	800b35e <_strtod_l+0xa26>
 800b2ae:	4630      	mov	r0, r6
 800b2b0:	4639      	mov	r1, r7
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	4b5a      	ldr	r3, [pc, #360]	@ (800b420 <_strtod_l+0xae8>)
 800b2b6:	f7f5 f919 	bl	80004ec <__aeabi_dmul>
 800b2ba:	4606      	mov	r6, r0
 800b2bc:	460f      	mov	r7, r1
 800b2be:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b2c2:	9606      	str	r6, [sp, #24]
 800b2c4:	9307      	str	r3, [sp, #28]
 800b2c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b2ca:	4d52      	ldr	r5, [pc, #328]	@ (800b414 <_strtod_l+0xadc>)
 800b2cc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b2d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b2d2:	401d      	ands	r5, r3
 800b2d4:	4b53      	ldr	r3, [pc, #332]	@ (800b424 <_strtod_l+0xaec>)
 800b2d6:	429d      	cmp	r5, r3
 800b2d8:	f040 80aa 	bne.w	800b430 <_strtod_l+0xaf8>
 800b2dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b2de:	4650      	mov	r0, sl
 800b2e0:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b2e4:	4659      	mov	r1, fp
 800b2e6:	f001 fb9b 	bl	800ca20 <__ulp>
 800b2ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b2ee:	f7f5 f8fd 	bl	80004ec <__aeabi_dmul>
 800b2f2:	4652      	mov	r2, sl
 800b2f4:	465b      	mov	r3, fp
 800b2f6:	f7f4 ff43 	bl	8000180 <__adddf3>
 800b2fa:	460b      	mov	r3, r1
 800b2fc:	4945      	ldr	r1, [pc, #276]	@ (800b414 <_strtod_l+0xadc>)
 800b2fe:	4a4a      	ldr	r2, [pc, #296]	@ (800b428 <_strtod_l+0xaf0>)
 800b300:	4019      	ands	r1, r3
 800b302:	4291      	cmp	r1, r2
 800b304:	4682      	mov	sl, r0
 800b306:	d942      	bls.n	800b38e <_strtod_l+0xa56>
 800b308:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b30a:	4b43      	ldr	r3, [pc, #268]	@ (800b418 <_strtod_l+0xae0>)
 800b30c:	429a      	cmp	r2, r3
 800b30e:	d103      	bne.n	800b318 <_strtod_l+0x9e0>
 800b310:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b312:	3301      	adds	r3, #1
 800b314:	f43f ad2b 	beq.w	800ad6e <_strtod_l+0x436>
 800b318:	f04f 3aff 	mov.w	sl, #4294967295
 800b31c:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 800b418 <_strtod_l+0xae0>
 800b320:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b322:	9805      	ldr	r0, [sp, #20]
 800b324:	f001 f84a 	bl	800c3bc <_Bfree>
 800b328:	4649      	mov	r1, r9
 800b32a:	9805      	ldr	r0, [sp, #20]
 800b32c:	f001 f846 	bl	800c3bc <_Bfree>
 800b330:	4641      	mov	r1, r8
 800b332:	9805      	ldr	r0, [sp, #20]
 800b334:	f001 f842 	bl	800c3bc <_Bfree>
 800b338:	4621      	mov	r1, r4
 800b33a:	9805      	ldr	r0, [sp, #20]
 800b33c:	f001 f83e 	bl	800c3bc <_Bfree>
 800b340:	e618      	b.n	800af74 <_strtod_l+0x63c>
 800b342:	f1ba 0f01 	cmp.w	sl, #1
 800b346:	d103      	bne.n	800b350 <_strtod_l+0xa18>
 800b348:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	f43f ada5 	beq.w	800ae9a <_strtod_l+0x562>
 800b350:	2200      	movs	r2, #0
 800b352:	4b36      	ldr	r3, [pc, #216]	@ (800b42c <_strtod_l+0xaf4>)
 800b354:	2600      	movs	r6, #0
 800b356:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b35a:	4f30      	ldr	r7, [pc, #192]	@ (800b41c <_strtod_l+0xae4>)
 800b35c:	e7b3      	b.n	800b2c6 <_strtod_l+0x98e>
 800b35e:	2600      	movs	r6, #0
 800b360:	4f2f      	ldr	r7, [pc, #188]	@ (800b420 <_strtod_l+0xae8>)
 800b362:	e7ac      	b.n	800b2be <_strtod_l+0x986>
 800b364:	4630      	mov	r0, r6
 800b366:	4639      	mov	r1, r7
 800b368:	4b2d      	ldr	r3, [pc, #180]	@ (800b420 <_strtod_l+0xae8>)
 800b36a:	2200      	movs	r2, #0
 800b36c:	f7f5 f8be 	bl	80004ec <__aeabi_dmul>
 800b370:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b372:	4606      	mov	r6, r0
 800b374:	460f      	mov	r7, r1
 800b376:	2b00      	cmp	r3, #0
 800b378:	d0a1      	beq.n	800b2be <_strtod_l+0x986>
 800b37a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b37e:	e7a2      	b.n	800b2c6 <_strtod_l+0x98e>
 800b380:	2200      	movs	r2, #0
 800b382:	4b26      	ldr	r3, [pc, #152]	@ (800b41c <_strtod_l+0xae4>)
 800b384:	4616      	mov	r6, r2
 800b386:	461f      	mov	r7, r3
 800b388:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b38c:	e79b      	b.n	800b2c6 <_strtod_l+0x98e>
 800b38e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b392:	9b08      	ldr	r3, [sp, #32]
 800b394:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d1c1      	bne.n	800b320 <_strtod_l+0x9e8>
 800b39c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b3a0:	0d1b      	lsrs	r3, r3, #20
 800b3a2:	051b      	lsls	r3, r3, #20
 800b3a4:	429d      	cmp	r5, r3
 800b3a6:	d1bb      	bne.n	800b320 <_strtod_l+0x9e8>
 800b3a8:	4630      	mov	r0, r6
 800b3aa:	4639      	mov	r1, r7
 800b3ac:	f7f5 fc4a 	bl	8000c44 <__aeabi_d2lz>
 800b3b0:	f7f5 f86e 	bl	8000490 <__aeabi_l2d>
 800b3b4:	4602      	mov	r2, r0
 800b3b6:	460b      	mov	r3, r1
 800b3b8:	4630      	mov	r0, r6
 800b3ba:	4639      	mov	r1, r7
 800b3bc:	f7f4 fede 	bl	800017c <__aeabi_dsub>
 800b3c0:	460b      	mov	r3, r1
 800b3c2:	4602      	mov	r2, r0
 800b3c4:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b3c8:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b3cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b3ce:	ea46 060a 	orr.w	r6, r6, sl
 800b3d2:	431e      	orrs	r6, r3
 800b3d4:	d069      	beq.n	800b4aa <_strtod_l+0xb72>
 800b3d6:	a30a      	add	r3, pc, #40	@ (adr r3, 800b400 <_strtod_l+0xac8>)
 800b3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3dc:	f7f5 faf8 	bl	80009d0 <__aeabi_dcmplt>
 800b3e0:	2800      	cmp	r0, #0
 800b3e2:	f47f accf 	bne.w	800ad84 <_strtod_l+0x44c>
 800b3e6:	a308      	add	r3, pc, #32	@ (adr r3, 800b408 <_strtod_l+0xad0>)
 800b3e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b3f0:	f7f5 fb0c 	bl	8000a0c <__aeabi_dcmpgt>
 800b3f4:	2800      	cmp	r0, #0
 800b3f6:	d093      	beq.n	800b320 <_strtod_l+0x9e8>
 800b3f8:	e4c4      	b.n	800ad84 <_strtod_l+0x44c>
 800b3fa:	bf00      	nop
 800b3fc:	f3af 8000 	nop.w
 800b400:	94a03595 	.word	0x94a03595
 800b404:	3fdfffff 	.word	0x3fdfffff
 800b408:	35afe535 	.word	0x35afe535
 800b40c:	3fe00000 	.word	0x3fe00000
 800b410:	000fffff 	.word	0x000fffff
 800b414:	7ff00000 	.word	0x7ff00000
 800b418:	7fefffff 	.word	0x7fefffff
 800b41c:	3ff00000 	.word	0x3ff00000
 800b420:	3fe00000 	.word	0x3fe00000
 800b424:	7fe00000 	.word	0x7fe00000
 800b428:	7c9fffff 	.word	0x7c9fffff
 800b42c:	bff00000 	.word	0xbff00000
 800b430:	9b08      	ldr	r3, [sp, #32]
 800b432:	b323      	cbz	r3, 800b47e <_strtod_l+0xb46>
 800b434:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b438:	d821      	bhi.n	800b47e <_strtod_l+0xb46>
 800b43a:	a327      	add	r3, pc, #156	@ (adr r3, 800b4d8 <_strtod_l+0xba0>)
 800b43c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b440:	4630      	mov	r0, r6
 800b442:	4639      	mov	r1, r7
 800b444:	f7f5 face 	bl	80009e4 <__aeabi_dcmple>
 800b448:	b1a0      	cbz	r0, 800b474 <_strtod_l+0xb3c>
 800b44a:	4639      	mov	r1, r7
 800b44c:	4630      	mov	r0, r6
 800b44e:	f7f5 fafd 	bl	8000a4c <__aeabi_d2uiz>
 800b452:	2801      	cmp	r0, #1
 800b454:	bf38      	it	cc
 800b456:	2001      	movcc	r0, #1
 800b458:	f7f4 ffce 	bl	80003f8 <__aeabi_ui2d>
 800b45c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b45e:	4606      	mov	r6, r0
 800b460:	460f      	mov	r7, r1
 800b462:	b9fb      	cbnz	r3, 800b4a4 <_strtod_l+0xb6c>
 800b464:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b468:	9014      	str	r0, [sp, #80]	@ 0x50
 800b46a:	9315      	str	r3, [sp, #84]	@ 0x54
 800b46c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b470:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b474:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b476:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b47a:	1b5b      	subs	r3, r3, r5
 800b47c:	9311      	str	r3, [sp, #68]	@ 0x44
 800b47e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b482:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b486:	f001 facb 	bl	800ca20 <__ulp>
 800b48a:	4602      	mov	r2, r0
 800b48c:	460b      	mov	r3, r1
 800b48e:	4650      	mov	r0, sl
 800b490:	4659      	mov	r1, fp
 800b492:	f7f5 f82b 	bl	80004ec <__aeabi_dmul>
 800b496:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b49a:	f7f4 fe71 	bl	8000180 <__adddf3>
 800b49e:	4682      	mov	sl, r0
 800b4a0:	468b      	mov	fp, r1
 800b4a2:	e776      	b.n	800b392 <_strtod_l+0xa5a>
 800b4a4:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b4a8:	e7e0      	b.n	800b46c <_strtod_l+0xb34>
 800b4aa:	a30d      	add	r3, pc, #52	@ (adr r3, 800b4e0 <_strtod_l+0xba8>)
 800b4ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b0:	f7f5 fa8e 	bl	80009d0 <__aeabi_dcmplt>
 800b4b4:	e79e      	b.n	800b3f4 <_strtod_l+0xabc>
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b4ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b4bc:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b4be:	6013      	str	r3, [r2, #0]
 800b4c0:	f7ff ba77 	b.w	800a9b2 <_strtod_l+0x7a>
 800b4c4:	2a65      	cmp	r2, #101	@ 0x65
 800b4c6:	f43f ab6e 	beq.w	800aba6 <_strtod_l+0x26e>
 800b4ca:	2a45      	cmp	r2, #69	@ 0x45
 800b4cc:	f43f ab6b 	beq.w	800aba6 <_strtod_l+0x26e>
 800b4d0:	2301      	movs	r3, #1
 800b4d2:	f7ff bba6 	b.w	800ac22 <_strtod_l+0x2ea>
 800b4d6:	bf00      	nop
 800b4d8:	ffc00000 	.word	0xffc00000
 800b4dc:	41dfffff 	.word	0x41dfffff
 800b4e0:	94a03595 	.word	0x94a03595
 800b4e4:	3fcfffff 	.word	0x3fcfffff

0800b4e8 <strtof>:
 800b4e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4ec:	4d24      	ldr	r5, [pc, #144]	@ (800b580 <strtof+0x98>)
 800b4ee:	460a      	mov	r2, r1
 800b4f0:	4b24      	ldr	r3, [pc, #144]	@ (800b584 <strtof+0x9c>)
 800b4f2:	4601      	mov	r1, r0
 800b4f4:	6828      	ldr	r0, [r5, #0]
 800b4f6:	f7ff fa1f 	bl	800a938 <_strtod_l>
 800b4fa:	4602      	mov	r2, r0
 800b4fc:	460b      	mov	r3, r1
 800b4fe:	4606      	mov	r6, r0
 800b500:	460f      	mov	r7, r1
 800b502:	f7f5 fa8d 	bl	8000a20 <__aeabi_dcmpun>
 800b506:	b168      	cbz	r0, 800b524 <strtof+0x3c>
 800b508:	2f00      	cmp	r7, #0
 800b50a:	481f      	ldr	r0, [pc, #124]	@ (800b588 <strtof+0xa0>)
 800b50c:	da06      	bge.n	800b51c <strtof+0x34>
 800b50e:	f000 facf 	bl	800bab0 <nanf>
 800b512:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 800b516:	4620      	mov	r0, r4
 800b518:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b51c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b520:	f000 bac6 	b.w	800bab0 <nanf>
 800b524:	4639      	mov	r1, r7
 800b526:	4630      	mov	r0, r6
 800b528:	f7f5 fab0 	bl	8000a8c <__aeabi_d2f>
 800b52c:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 800b530:	4604      	mov	r4, r0
 800b532:	4916      	ldr	r1, [pc, #88]	@ (800b58c <strtof+0xa4>)
 800b534:	4640      	mov	r0, r8
 800b536:	f7f5 fb6f 	bl	8000c18 <__aeabi_fcmpun>
 800b53a:	b9b0      	cbnz	r0, 800b56a <strtof+0x82>
 800b53c:	4640      	mov	r0, r8
 800b53e:	4913      	ldr	r1, [pc, #76]	@ (800b58c <strtof+0xa4>)
 800b540:	f7f5 fb4c 	bl	8000bdc <__aeabi_fcmple>
 800b544:	b988      	cbnz	r0, 800b56a <strtof+0x82>
 800b546:	f027 4900 	bic.w	r9, r7, #2147483648	@ 0x80000000
 800b54a:	f04f 32ff 	mov.w	r2, #4294967295
 800b54e:	4630      	mov	r0, r6
 800b550:	4649      	mov	r1, r9
 800b552:	4b0f      	ldr	r3, [pc, #60]	@ (800b590 <strtof+0xa8>)
 800b554:	f7f5 fa64 	bl	8000a20 <__aeabi_dcmpun>
 800b558:	b970      	cbnz	r0, 800b578 <strtof+0x90>
 800b55a:	f04f 32ff 	mov.w	r2, #4294967295
 800b55e:	4630      	mov	r0, r6
 800b560:	4649      	mov	r1, r9
 800b562:	4b0b      	ldr	r3, [pc, #44]	@ (800b590 <strtof+0xa8>)
 800b564:	f7f5 fa3e 	bl	80009e4 <__aeabi_dcmple>
 800b568:	b930      	cbnz	r0, 800b578 <strtof+0x90>
 800b56a:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 800b56e:	d1d2      	bne.n	800b516 <strtof+0x2e>
 800b570:	4b08      	ldr	r3, [pc, #32]	@ (800b594 <strtof+0xac>)
 800b572:	403b      	ands	r3, r7
 800b574:	2b00      	cmp	r3, #0
 800b576:	d0ce      	beq.n	800b516 <strtof+0x2e>
 800b578:	2222      	movs	r2, #34	@ 0x22
 800b57a:	682b      	ldr	r3, [r5, #0]
 800b57c:	601a      	str	r2, [r3, #0]
 800b57e:	e7ca      	b.n	800b516 <strtof+0x2e>
 800b580:	200002e0 	.word	0x200002e0
 800b584:	20000174 	.word	0x20000174
 800b588:	0800e05e 	.word	0x0800e05e
 800b58c:	7f7fffff 	.word	0x7f7fffff
 800b590:	7fefffff 	.word	0x7fefffff
 800b594:	7ff00000 	.word	0x7ff00000

0800b598 <_strtoul_l.constprop.0>:
 800b598:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b59c:	4686      	mov	lr, r0
 800b59e:	460d      	mov	r5, r1
 800b5a0:	4e33      	ldr	r6, [pc, #204]	@ (800b670 <_strtoul_l.constprop.0+0xd8>)
 800b5a2:	4628      	mov	r0, r5
 800b5a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b5a8:	5d37      	ldrb	r7, [r6, r4]
 800b5aa:	f017 0708 	ands.w	r7, r7, #8
 800b5ae:	d1f8      	bne.n	800b5a2 <_strtoul_l.constprop.0+0xa>
 800b5b0:	2c2d      	cmp	r4, #45	@ 0x2d
 800b5b2:	d12f      	bne.n	800b614 <_strtoul_l.constprop.0+0x7c>
 800b5b4:	2701      	movs	r7, #1
 800b5b6:	782c      	ldrb	r4, [r5, #0]
 800b5b8:	1c85      	adds	r5, r0, #2
 800b5ba:	f033 0010 	bics.w	r0, r3, #16
 800b5be:	d109      	bne.n	800b5d4 <_strtoul_l.constprop.0+0x3c>
 800b5c0:	2c30      	cmp	r4, #48	@ 0x30
 800b5c2:	d12c      	bne.n	800b61e <_strtoul_l.constprop.0+0x86>
 800b5c4:	7828      	ldrb	r0, [r5, #0]
 800b5c6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800b5ca:	2858      	cmp	r0, #88	@ 0x58
 800b5cc:	d127      	bne.n	800b61e <_strtoul_l.constprop.0+0x86>
 800b5ce:	2310      	movs	r3, #16
 800b5d0:	786c      	ldrb	r4, [r5, #1]
 800b5d2:	3502      	adds	r5, #2
 800b5d4:	f04f 38ff 	mov.w	r8, #4294967295
 800b5d8:	fbb8 f8f3 	udiv	r8, r8, r3
 800b5dc:	2600      	movs	r6, #0
 800b5de:	fb03 f908 	mul.w	r9, r3, r8
 800b5e2:	4630      	mov	r0, r6
 800b5e4:	ea6f 0909 	mvn.w	r9, r9
 800b5e8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800b5ec:	f1bc 0f09 	cmp.w	ip, #9
 800b5f0:	d81c      	bhi.n	800b62c <_strtoul_l.constprop.0+0x94>
 800b5f2:	4664      	mov	r4, ip
 800b5f4:	42a3      	cmp	r3, r4
 800b5f6:	dd2a      	ble.n	800b64e <_strtoul_l.constprop.0+0xb6>
 800b5f8:	f1b6 3fff 	cmp.w	r6, #4294967295
 800b5fc:	d007      	beq.n	800b60e <_strtoul_l.constprop.0+0x76>
 800b5fe:	4580      	cmp	r8, r0
 800b600:	d322      	bcc.n	800b648 <_strtoul_l.constprop.0+0xb0>
 800b602:	d101      	bne.n	800b608 <_strtoul_l.constprop.0+0x70>
 800b604:	45a1      	cmp	r9, r4
 800b606:	db1f      	blt.n	800b648 <_strtoul_l.constprop.0+0xb0>
 800b608:	2601      	movs	r6, #1
 800b60a:	fb00 4003 	mla	r0, r0, r3, r4
 800b60e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b612:	e7e9      	b.n	800b5e8 <_strtoul_l.constprop.0+0x50>
 800b614:	2c2b      	cmp	r4, #43	@ 0x2b
 800b616:	bf04      	itt	eq
 800b618:	782c      	ldrbeq	r4, [r5, #0]
 800b61a:	1c85      	addeq	r5, r0, #2
 800b61c:	e7cd      	b.n	800b5ba <_strtoul_l.constprop.0+0x22>
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d1d8      	bne.n	800b5d4 <_strtoul_l.constprop.0+0x3c>
 800b622:	2c30      	cmp	r4, #48	@ 0x30
 800b624:	bf0c      	ite	eq
 800b626:	2308      	moveq	r3, #8
 800b628:	230a      	movne	r3, #10
 800b62a:	e7d3      	b.n	800b5d4 <_strtoul_l.constprop.0+0x3c>
 800b62c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800b630:	f1bc 0f19 	cmp.w	ip, #25
 800b634:	d801      	bhi.n	800b63a <_strtoul_l.constprop.0+0xa2>
 800b636:	3c37      	subs	r4, #55	@ 0x37
 800b638:	e7dc      	b.n	800b5f4 <_strtoul_l.constprop.0+0x5c>
 800b63a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800b63e:	f1bc 0f19 	cmp.w	ip, #25
 800b642:	d804      	bhi.n	800b64e <_strtoul_l.constprop.0+0xb6>
 800b644:	3c57      	subs	r4, #87	@ 0x57
 800b646:	e7d5      	b.n	800b5f4 <_strtoul_l.constprop.0+0x5c>
 800b648:	f04f 36ff 	mov.w	r6, #4294967295
 800b64c:	e7df      	b.n	800b60e <_strtoul_l.constprop.0+0x76>
 800b64e:	1c73      	adds	r3, r6, #1
 800b650:	d106      	bne.n	800b660 <_strtoul_l.constprop.0+0xc8>
 800b652:	2322      	movs	r3, #34	@ 0x22
 800b654:	4630      	mov	r0, r6
 800b656:	f8ce 3000 	str.w	r3, [lr]
 800b65a:	b932      	cbnz	r2, 800b66a <_strtoul_l.constprop.0+0xd2>
 800b65c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b660:	b107      	cbz	r7, 800b664 <_strtoul_l.constprop.0+0xcc>
 800b662:	4240      	negs	r0, r0
 800b664:	2a00      	cmp	r2, #0
 800b666:	d0f9      	beq.n	800b65c <_strtoul_l.constprop.0+0xc4>
 800b668:	b106      	cbz	r6, 800b66c <_strtoul_l.constprop.0+0xd4>
 800b66a:	1e69      	subs	r1, r5, #1
 800b66c:	6011      	str	r1, [r2, #0]
 800b66e:	e7f5      	b.n	800b65c <_strtoul_l.constprop.0+0xc4>
 800b670:	0800dd09 	.word	0x0800dd09

0800b674 <strtoul>:
 800b674:	4613      	mov	r3, r2
 800b676:	460a      	mov	r2, r1
 800b678:	4601      	mov	r1, r0
 800b67a:	4802      	ldr	r0, [pc, #8]	@ (800b684 <strtoul+0x10>)
 800b67c:	6800      	ldr	r0, [r0, #0]
 800b67e:	f7ff bf8b 	b.w	800b598 <_strtoul_l.constprop.0>
 800b682:	bf00      	nop
 800b684:	200002e0 	.word	0x200002e0

0800b688 <std>:
 800b688:	2300      	movs	r3, #0
 800b68a:	b510      	push	{r4, lr}
 800b68c:	4604      	mov	r4, r0
 800b68e:	e9c0 3300 	strd	r3, r3, [r0]
 800b692:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b696:	6083      	str	r3, [r0, #8]
 800b698:	8181      	strh	r1, [r0, #12]
 800b69a:	6643      	str	r3, [r0, #100]	@ 0x64
 800b69c:	81c2      	strh	r2, [r0, #14]
 800b69e:	6183      	str	r3, [r0, #24]
 800b6a0:	4619      	mov	r1, r3
 800b6a2:	2208      	movs	r2, #8
 800b6a4:	305c      	adds	r0, #92	@ 0x5c
 800b6a6:	f000 f92d 	bl	800b904 <memset>
 800b6aa:	4b0d      	ldr	r3, [pc, #52]	@ (800b6e0 <std+0x58>)
 800b6ac:	6224      	str	r4, [r4, #32]
 800b6ae:	6263      	str	r3, [r4, #36]	@ 0x24
 800b6b0:	4b0c      	ldr	r3, [pc, #48]	@ (800b6e4 <std+0x5c>)
 800b6b2:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b6b4:	4b0c      	ldr	r3, [pc, #48]	@ (800b6e8 <std+0x60>)
 800b6b6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b6b8:	4b0c      	ldr	r3, [pc, #48]	@ (800b6ec <std+0x64>)
 800b6ba:	6323      	str	r3, [r4, #48]	@ 0x30
 800b6bc:	4b0c      	ldr	r3, [pc, #48]	@ (800b6f0 <std+0x68>)
 800b6be:	429c      	cmp	r4, r3
 800b6c0:	d006      	beq.n	800b6d0 <std+0x48>
 800b6c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b6c6:	4294      	cmp	r4, r2
 800b6c8:	d002      	beq.n	800b6d0 <std+0x48>
 800b6ca:	33d0      	adds	r3, #208	@ 0xd0
 800b6cc:	429c      	cmp	r4, r3
 800b6ce:	d105      	bne.n	800b6dc <std+0x54>
 800b6d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b6d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6d8:	f000 b9ca 	b.w	800ba70 <__retarget_lock_init_recursive>
 800b6dc:	bd10      	pop	{r4, pc}
 800b6de:	bf00      	nop
 800b6e0:	0800b80d 	.word	0x0800b80d
 800b6e4:	0800b82f 	.word	0x0800b82f
 800b6e8:	0800b867 	.word	0x0800b867
 800b6ec:	0800b88b 	.word	0x0800b88b
 800b6f0:	20001178 	.word	0x20001178

0800b6f4 <stdio_exit_handler>:
 800b6f4:	4a02      	ldr	r2, [pc, #8]	@ (800b700 <stdio_exit_handler+0xc>)
 800b6f6:	4903      	ldr	r1, [pc, #12]	@ (800b704 <stdio_exit_handler+0x10>)
 800b6f8:	4803      	ldr	r0, [pc, #12]	@ (800b708 <stdio_exit_handler+0x14>)
 800b6fa:	f000 b869 	b.w	800b7d0 <_fwalk_sglue>
 800b6fe:	bf00      	nop
 800b700:	20000168 	.word	0x20000168
 800b704:	0800d375 	.word	0x0800d375
 800b708:	200002e4 	.word	0x200002e4

0800b70c <cleanup_stdio>:
 800b70c:	6841      	ldr	r1, [r0, #4]
 800b70e:	4b0c      	ldr	r3, [pc, #48]	@ (800b740 <cleanup_stdio+0x34>)
 800b710:	b510      	push	{r4, lr}
 800b712:	4299      	cmp	r1, r3
 800b714:	4604      	mov	r4, r0
 800b716:	d001      	beq.n	800b71c <cleanup_stdio+0x10>
 800b718:	f001 fe2c 	bl	800d374 <_fflush_r>
 800b71c:	68a1      	ldr	r1, [r4, #8]
 800b71e:	4b09      	ldr	r3, [pc, #36]	@ (800b744 <cleanup_stdio+0x38>)
 800b720:	4299      	cmp	r1, r3
 800b722:	d002      	beq.n	800b72a <cleanup_stdio+0x1e>
 800b724:	4620      	mov	r0, r4
 800b726:	f001 fe25 	bl	800d374 <_fflush_r>
 800b72a:	68e1      	ldr	r1, [r4, #12]
 800b72c:	4b06      	ldr	r3, [pc, #24]	@ (800b748 <cleanup_stdio+0x3c>)
 800b72e:	4299      	cmp	r1, r3
 800b730:	d004      	beq.n	800b73c <cleanup_stdio+0x30>
 800b732:	4620      	mov	r0, r4
 800b734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b738:	f001 be1c 	b.w	800d374 <_fflush_r>
 800b73c:	bd10      	pop	{r4, pc}
 800b73e:	bf00      	nop
 800b740:	20001178 	.word	0x20001178
 800b744:	200011e0 	.word	0x200011e0
 800b748:	20001248 	.word	0x20001248

0800b74c <global_stdio_init.part.0>:
 800b74c:	b510      	push	{r4, lr}
 800b74e:	4b0b      	ldr	r3, [pc, #44]	@ (800b77c <global_stdio_init.part.0+0x30>)
 800b750:	4c0b      	ldr	r4, [pc, #44]	@ (800b780 <global_stdio_init.part.0+0x34>)
 800b752:	4a0c      	ldr	r2, [pc, #48]	@ (800b784 <global_stdio_init.part.0+0x38>)
 800b754:	4620      	mov	r0, r4
 800b756:	601a      	str	r2, [r3, #0]
 800b758:	2104      	movs	r1, #4
 800b75a:	2200      	movs	r2, #0
 800b75c:	f7ff ff94 	bl	800b688 <std>
 800b760:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b764:	2201      	movs	r2, #1
 800b766:	2109      	movs	r1, #9
 800b768:	f7ff ff8e 	bl	800b688 <std>
 800b76c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b770:	2202      	movs	r2, #2
 800b772:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b776:	2112      	movs	r1, #18
 800b778:	f7ff bf86 	b.w	800b688 <std>
 800b77c:	200012b0 	.word	0x200012b0
 800b780:	20001178 	.word	0x20001178
 800b784:	0800b6f5 	.word	0x0800b6f5

0800b788 <__sfp_lock_acquire>:
 800b788:	4801      	ldr	r0, [pc, #4]	@ (800b790 <__sfp_lock_acquire+0x8>)
 800b78a:	f000 b972 	b.w	800ba72 <__retarget_lock_acquire_recursive>
 800b78e:	bf00      	nop
 800b790:	200012b9 	.word	0x200012b9

0800b794 <__sfp_lock_release>:
 800b794:	4801      	ldr	r0, [pc, #4]	@ (800b79c <__sfp_lock_release+0x8>)
 800b796:	f000 b96d 	b.w	800ba74 <__retarget_lock_release_recursive>
 800b79a:	bf00      	nop
 800b79c:	200012b9 	.word	0x200012b9

0800b7a0 <__sinit>:
 800b7a0:	b510      	push	{r4, lr}
 800b7a2:	4604      	mov	r4, r0
 800b7a4:	f7ff fff0 	bl	800b788 <__sfp_lock_acquire>
 800b7a8:	6a23      	ldr	r3, [r4, #32]
 800b7aa:	b11b      	cbz	r3, 800b7b4 <__sinit+0x14>
 800b7ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b7b0:	f7ff bff0 	b.w	800b794 <__sfp_lock_release>
 800b7b4:	4b04      	ldr	r3, [pc, #16]	@ (800b7c8 <__sinit+0x28>)
 800b7b6:	6223      	str	r3, [r4, #32]
 800b7b8:	4b04      	ldr	r3, [pc, #16]	@ (800b7cc <__sinit+0x2c>)
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d1f5      	bne.n	800b7ac <__sinit+0xc>
 800b7c0:	f7ff ffc4 	bl	800b74c <global_stdio_init.part.0>
 800b7c4:	e7f2      	b.n	800b7ac <__sinit+0xc>
 800b7c6:	bf00      	nop
 800b7c8:	0800b70d 	.word	0x0800b70d
 800b7cc:	200012b0 	.word	0x200012b0

0800b7d0 <_fwalk_sglue>:
 800b7d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7d4:	4607      	mov	r7, r0
 800b7d6:	4688      	mov	r8, r1
 800b7d8:	4614      	mov	r4, r2
 800b7da:	2600      	movs	r6, #0
 800b7dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b7e0:	f1b9 0901 	subs.w	r9, r9, #1
 800b7e4:	d505      	bpl.n	800b7f2 <_fwalk_sglue+0x22>
 800b7e6:	6824      	ldr	r4, [r4, #0]
 800b7e8:	2c00      	cmp	r4, #0
 800b7ea:	d1f7      	bne.n	800b7dc <_fwalk_sglue+0xc>
 800b7ec:	4630      	mov	r0, r6
 800b7ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7f2:	89ab      	ldrh	r3, [r5, #12]
 800b7f4:	2b01      	cmp	r3, #1
 800b7f6:	d907      	bls.n	800b808 <_fwalk_sglue+0x38>
 800b7f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b7fc:	3301      	adds	r3, #1
 800b7fe:	d003      	beq.n	800b808 <_fwalk_sglue+0x38>
 800b800:	4629      	mov	r1, r5
 800b802:	4638      	mov	r0, r7
 800b804:	47c0      	blx	r8
 800b806:	4306      	orrs	r6, r0
 800b808:	3568      	adds	r5, #104	@ 0x68
 800b80a:	e7e9      	b.n	800b7e0 <_fwalk_sglue+0x10>

0800b80c <__sread>:
 800b80c:	b510      	push	{r4, lr}
 800b80e:	460c      	mov	r4, r1
 800b810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b814:	f000 f8de 	bl	800b9d4 <_read_r>
 800b818:	2800      	cmp	r0, #0
 800b81a:	bfab      	itete	ge
 800b81c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b81e:	89a3      	ldrhlt	r3, [r4, #12]
 800b820:	181b      	addge	r3, r3, r0
 800b822:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b826:	bfac      	ite	ge
 800b828:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b82a:	81a3      	strhlt	r3, [r4, #12]
 800b82c:	bd10      	pop	{r4, pc}

0800b82e <__swrite>:
 800b82e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b832:	461f      	mov	r7, r3
 800b834:	898b      	ldrh	r3, [r1, #12]
 800b836:	4605      	mov	r5, r0
 800b838:	05db      	lsls	r3, r3, #23
 800b83a:	460c      	mov	r4, r1
 800b83c:	4616      	mov	r6, r2
 800b83e:	d505      	bpl.n	800b84c <__swrite+0x1e>
 800b840:	2302      	movs	r3, #2
 800b842:	2200      	movs	r2, #0
 800b844:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b848:	f000 f8b2 	bl	800b9b0 <_lseek_r>
 800b84c:	89a3      	ldrh	r3, [r4, #12]
 800b84e:	4632      	mov	r2, r6
 800b850:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b854:	81a3      	strh	r3, [r4, #12]
 800b856:	4628      	mov	r0, r5
 800b858:	463b      	mov	r3, r7
 800b85a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b85e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b862:	f000 b8c9 	b.w	800b9f8 <_write_r>

0800b866 <__sseek>:
 800b866:	b510      	push	{r4, lr}
 800b868:	460c      	mov	r4, r1
 800b86a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b86e:	f000 f89f 	bl	800b9b0 <_lseek_r>
 800b872:	1c43      	adds	r3, r0, #1
 800b874:	89a3      	ldrh	r3, [r4, #12]
 800b876:	bf15      	itete	ne
 800b878:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b87a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b87e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b882:	81a3      	strheq	r3, [r4, #12]
 800b884:	bf18      	it	ne
 800b886:	81a3      	strhne	r3, [r4, #12]
 800b888:	bd10      	pop	{r4, pc}

0800b88a <__sclose>:
 800b88a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b88e:	f000 b87f 	b.w	800b990 <_close_r>

0800b892 <_vsniprintf_r>:
 800b892:	b530      	push	{r4, r5, lr}
 800b894:	4614      	mov	r4, r2
 800b896:	2c00      	cmp	r4, #0
 800b898:	4605      	mov	r5, r0
 800b89a:	461a      	mov	r2, r3
 800b89c:	b09b      	sub	sp, #108	@ 0x6c
 800b89e:	da05      	bge.n	800b8ac <_vsniprintf_r+0x1a>
 800b8a0:	238b      	movs	r3, #139	@ 0x8b
 800b8a2:	6003      	str	r3, [r0, #0]
 800b8a4:	f04f 30ff 	mov.w	r0, #4294967295
 800b8a8:	b01b      	add	sp, #108	@ 0x6c
 800b8aa:	bd30      	pop	{r4, r5, pc}
 800b8ac:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b8b0:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b8b4:	bf0c      	ite	eq
 800b8b6:	4623      	moveq	r3, r4
 800b8b8:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b8bc:	9302      	str	r3, [sp, #8]
 800b8be:	9305      	str	r3, [sp, #20]
 800b8c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b8c4:	9100      	str	r1, [sp, #0]
 800b8c6:	9104      	str	r1, [sp, #16]
 800b8c8:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b8cc:	4669      	mov	r1, sp
 800b8ce:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800b8d0:	f001 fa42 	bl	800cd58 <_svfiprintf_r>
 800b8d4:	1c43      	adds	r3, r0, #1
 800b8d6:	bfbc      	itt	lt
 800b8d8:	238b      	movlt	r3, #139	@ 0x8b
 800b8da:	602b      	strlt	r3, [r5, #0]
 800b8dc:	2c00      	cmp	r4, #0
 800b8de:	d0e3      	beq.n	800b8a8 <_vsniprintf_r+0x16>
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	9b00      	ldr	r3, [sp, #0]
 800b8e4:	701a      	strb	r2, [r3, #0]
 800b8e6:	e7df      	b.n	800b8a8 <_vsniprintf_r+0x16>

0800b8e8 <vsniprintf>:
 800b8e8:	b507      	push	{r0, r1, r2, lr}
 800b8ea:	9300      	str	r3, [sp, #0]
 800b8ec:	4613      	mov	r3, r2
 800b8ee:	460a      	mov	r2, r1
 800b8f0:	4601      	mov	r1, r0
 800b8f2:	4803      	ldr	r0, [pc, #12]	@ (800b900 <vsniprintf+0x18>)
 800b8f4:	6800      	ldr	r0, [r0, #0]
 800b8f6:	f7ff ffcc 	bl	800b892 <_vsniprintf_r>
 800b8fa:	b003      	add	sp, #12
 800b8fc:	f85d fb04 	ldr.w	pc, [sp], #4
 800b900:	200002e0 	.word	0x200002e0

0800b904 <memset>:
 800b904:	4603      	mov	r3, r0
 800b906:	4402      	add	r2, r0
 800b908:	4293      	cmp	r3, r2
 800b90a:	d100      	bne.n	800b90e <memset+0xa>
 800b90c:	4770      	bx	lr
 800b90e:	f803 1b01 	strb.w	r1, [r3], #1
 800b912:	e7f9      	b.n	800b908 <memset+0x4>

0800b914 <strncmp>:
 800b914:	b510      	push	{r4, lr}
 800b916:	b16a      	cbz	r2, 800b934 <strncmp+0x20>
 800b918:	3901      	subs	r1, #1
 800b91a:	1884      	adds	r4, r0, r2
 800b91c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b920:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b924:	429a      	cmp	r2, r3
 800b926:	d103      	bne.n	800b930 <strncmp+0x1c>
 800b928:	42a0      	cmp	r0, r4
 800b92a:	d001      	beq.n	800b930 <strncmp+0x1c>
 800b92c:	2a00      	cmp	r2, #0
 800b92e:	d1f5      	bne.n	800b91c <strncmp+0x8>
 800b930:	1ad0      	subs	r0, r2, r3
 800b932:	bd10      	pop	{r4, pc}
 800b934:	4610      	mov	r0, r2
 800b936:	e7fc      	b.n	800b932 <strncmp+0x1e>

0800b938 <__strtok_r>:
 800b938:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b93a:	4604      	mov	r4, r0
 800b93c:	b908      	cbnz	r0, 800b942 <__strtok_r+0xa>
 800b93e:	6814      	ldr	r4, [r2, #0]
 800b940:	b144      	cbz	r4, 800b954 <__strtok_r+0x1c>
 800b942:	460f      	mov	r7, r1
 800b944:	4620      	mov	r0, r4
 800b946:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b94a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b94e:	b91e      	cbnz	r6, 800b958 <__strtok_r+0x20>
 800b950:	b965      	cbnz	r5, 800b96c <__strtok_r+0x34>
 800b952:	6015      	str	r5, [r2, #0]
 800b954:	2000      	movs	r0, #0
 800b956:	e005      	b.n	800b964 <__strtok_r+0x2c>
 800b958:	42b5      	cmp	r5, r6
 800b95a:	d1f6      	bne.n	800b94a <__strtok_r+0x12>
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d1f0      	bne.n	800b942 <__strtok_r+0xa>
 800b960:	6014      	str	r4, [r2, #0]
 800b962:	7003      	strb	r3, [r0, #0]
 800b964:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b966:	461c      	mov	r4, r3
 800b968:	e00c      	b.n	800b984 <__strtok_r+0x4c>
 800b96a:	b915      	cbnz	r5, 800b972 <__strtok_r+0x3a>
 800b96c:	460e      	mov	r6, r1
 800b96e:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b972:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b976:	42ab      	cmp	r3, r5
 800b978:	d1f7      	bne.n	800b96a <__strtok_r+0x32>
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d0f3      	beq.n	800b966 <__strtok_r+0x2e>
 800b97e:	2300      	movs	r3, #0
 800b980:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b984:	6014      	str	r4, [r2, #0]
 800b986:	e7ed      	b.n	800b964 <__strtok_r+0x2c>

0800b988 <strtok_r>:
 800b988:	2301      	movs	r3, #1
 800b98a:	f7ff bfd5 	b.w	800b938 <__strtok_r>
	...

0800b990 <_close_r>:
 800b990:	b538      	push	{r3, r4, r5, lr}
 800b992:	2300      	movs	r3, #0
 800b994:	4d05      	ldr	r5, [pc, #20]	@ (800b9ac <_close_r+0x1c>)
 800b996:	4604      	mov	r4, r0
 800b998:	4608      	mov	r0, r1
 800b99a:	602b      	str	r3, [r5, #0]
 800b99c:	f7f6 fbf5 	bl	800218a <_close>
 800b9a0:	1c43      	adds	r3, r0, #1
 800b9a2:	d102      	bne.n	800b9aa <_close_r+0x1a>
 800b9a4:	682b      	ldr	r3, [r5, #0]
 800b9a6:	b103      	cbz	r3, 800b9aa <_close_r+0x1a>
 800b9a8:	6023      	str	r3, [r4, #0]
 800b9aa:	bd38      	pop	{r3, r4, r5, pc}
 800b9ac:	200012b4 	.word	0x200012b4

0800b9b0 <_lseek_r>:
 800b9b0:	b538      	push	{r3, r4, r5, lr}
 800b9b2:	4604      	mov	r4, r0
 800b9b4:	4608      	mov	r0, r1
 800b9b6:	4611      	mov	r1, r2
 800b9b8:	2200      	movs	r2, #0
 800b9ba:	4d05      	ldr	r5, [pc, #20]	@ (800b9d0 <_lseek_r+0x20>)
 800b9bc:	602a      	str	r2, [r5, #0]
 800b9be:	461a      	mov	r2, r3
 800b9c0:	f7f6 fc07 	bl	80021d2 <_lseek>
 800b9c4:	1c43      	adds	r3, r0, #1
 800b9c6:	d102      	bne.n	800b9ce <_lseek_r+0x1e>
 800b9c8:	682b      	ldr	r3, [r5, #0]
 800b9ca:	b103      	cbz	r3, 800b9ce <_lseek_r+0x1e>
 800b9cc:	6023      	str	r3, [r4, #0]
 800b9ce:	bd38      	pop	{r3, r4, r5, pc}
 800b9d0:	200012b4 	.word	0x200012b4

0800b9d4 <_read_r>:
 800b9d4:	b538      	push	{r3, r4, r5, lr}
 800b9d6:	4604      	mov	r4, r0
 800b9d8:	4608      	mov	r0, r1
 800b9da:	4611      	mov	r1, r2
 800b9dc:	2200      	movs	r2, #0
 800b9de:	4d05      	ldr	r5, [pc, #20]	@ (800b9f4 <_read_r+0x20>)
 800b9e0:	602a      	str	r2, [r5, #0]
 800b9e2:	461a      	mov	r2, r3
 800b9e4:	f7f6 fb98 	bl	8002118 <_read>
 800b9e8:	1c43      	adds	r3, r0, #1
 800b9ea:	d102      	bne.n	800b9f2 <_read_r+0x1e>
 800b9ec:	682b      	ldr	r3, [r5, #0]
 800b9ee:	b103      	cbz	r3, 800b9f2 <_read_r+0x1e>
 800b9f0:	6023      	str	r3, [r4, #0]
 800b9f2:	bd38      	pop	{r3, r4, r5, pc}
 800b9f4:	200012b4 	.word	0x200012b4

0800b9f8 <_write_r>:
 800b9f8:	b538      	push	{r3, r4, r5, lr}
 800b9fa:	4604      	mov	r4, r0
 800b9fc:	4608      	mov	r0, r1
 800b9fe:	4611      	mov	r1, r2
 800ba00:	2200      	movs	r2, #0
 800ba02:	4d05      	ldr	r5, [pc, #20]	@ (800ba18 <_write_r+0x20>)
 800ba04:	602a      	str	r2, [r5, #0]
 800ba06:	461a      	mov	r2, r3
 800ba08:	f7f6 fba3 	bl	8002152 <_write>
 800ba0c:	1c43      	adds	r3, r0, #1
 800ba0e:	d102      	bne.n	800ba16 <_write_r+0x1e>
 800ba10:	682b      	ldr	r3, [r5, #0]
 800ba12:	b103      	cbz	r3, 800ba16 <_write_r+0x1e>
 800ba14:	6023      	str	r3, [r4, #0]
 800ba16:	bd38      	pop	{r3, r4, r5, pc}
 800ba18:	200012b4 	.word	0x200012b4

0800ba1c <__errno>:
 800ba1c:	4b01      	ldr	r3, [pc, #4]	@ (800ba24 <__errno+0x8>)
 800ba1e:	6818      	ldr	r0, [r3, #0]
 800ba20:	4770      	bx	lr
 800ba22:	bf00      	nop
 800ba24:	200002e0 	.word	0x200002e0

0800ba28 <__libc_init_array>:
 800ba28:	b570      	push	{r4, r5, r6, lr}
 800ba2a:	2600      	movs	r6, #0
 800ba2c:	4d0c      	ldr	r5, [pc, #48]	@ (800ba60 <__libc_init_array+0x38>)
 800ba2e:	4c0d      	ldr	r4, [pc, #52]	@ (800ba64 <__libc_init_array+0x3c>)
 800ba30:	1b64      	subs	r4, r4, r5
 800ba32:	10a4      	asrs	r4, r4, #2
 800ba34:	42a6      	cmp	r6, r4
 800ba36:	d109      	bne.n	800ba4c <__libc_init_array+0x24>
 800ba38:	f002 f820 	bl	800da7c <_init>
 800ba3c:	2600      	movs	r6, #0
 800ba3e:	4d0a      	ldr	r5, [pc, #40]	@ (800ba68 <__libc_init_array+0x40>)
 800ba40:	4c0a      	ldr	r4, [pc, #40]	@ (800ba6c <__libc_init_array+0x44>)
 800ba42:	1b64      	subs	r4, r4, r5
 800ba44:	10a4      	asrs	r4, r4, #2
 800ba46:	42a6      	cmp	r6, r4
 800ba48:	d105      	bne.n	800ba56 <__libc_init_array+0x2e>
 800ba4a:	bd70      	pop	{r4, r5, r6, pc}
 800ba4c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba50:	4798      	blx	r3
 800ba52:	3601      	adds	r6, #1
 800ba54:	e7ee      	b.n	800ba34 <__libc_init_array+0xc>
 800ba56:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba5a:	4798      	blx	r3
 800ba5c:	3601      	adds	r6, #1
 800ba5e:	e7f2      	b.n	800ba46 <__libc_init_array+0x1e>
 800ba60:	0800e068 	.word	0x0800e068
 800ba64:	0800e068 	.word	0x0800e068
 800ba68:	0800e068 	.word	0x0800e068
 800ba6c:	0800e06c 	.word	0x0800e06c

0800ba70 <__retarget_lock_init_recursive>:
 800ba70:	4770      	bx	lr

0800ba72 <__retarget_lock_acquire_recursive>:
 800ba72:	4770      	bx	lr

0800ba74 <__retarget_lock_release_recursive>:
 800ba74:	4770      	bx	lr

0800ba76 <strcpy>:
 800ba76:	4603      	mov	r3, r0
 800ba78:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ba7c:	f803 2b01 	strb.w	r2, [r3], #1
 800ba80:	2a00      	cmp	r2, #0
 800ba82:	d1f9      	bne.n	800ba78 <strcpy+0x2>
 800ba84:	4770      	bx	lr

0800ba86 <memcpy>:
 800ba86:	440a      	add	r2, r1
 800ba88:	4291      	cmp	r1, r2
 800ba8a:	f100 33ff 	add.w	r3, r0, #4294967295
 800ba8e:	d100      	bne.n	800ba92 <memcpy+0xc>
 800ba90:	4770      	bx	lr
 800ba92:	b510      	push	{r4, lr}
 800ba94:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba98:	4291      	cmp	r1, r2
 800ba9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba9e:	d1f9      	bne.n	800ba94 <memcpy+0xe>
 800baa0:	bd10      	pop	{r4, pc}
	...

0800baa4 <nan>:
 800baa4:	2000      	movs	r0, #0
 800baa6:	4901      	ldr	r1, [pc, #4]	@ (800baac <nan+0x8>)
 800baa8:	4770      	bx	lr
 800baaa:	bf00      	nop
 800baac:	7ff80000 	.word	0x7ff80000

0800bab0 <nanf>:
 800bab0:	4800      	ldr	r0, [pc, #0]	@ (800bab4 <nanf+0x4>)
 800bab2:	4770      	bx	lr
 800bab4:	7fc00000 	.word	0x7fc00000

0800bab8 <_free_r>:
 800bab8:	b538      	push	{r3, r4, r5, lr}
 800baba:	4605      	mov	r5, r0
 800babc:	2900      	cmp	r1, #0
 800babe:	d040      	beq.n	800bb42 <_free_r+0x8a>
 800bac0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bac4:	1f0c      	subs	r4, r1, #4
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	bfb8      	it	lt
 800baca:	18e4      	addlt	r4, r4, r3
 800bacc:	f000 fc2a 	bl	800c324 <__malloc_lock>
 800bad0:	4a1c      	ldr	r2, [pc, #112]	@ (800bb44 <_free_r+0x8c>)
 800bad2:	6813      	ldr	r3, [r2, #0]
 800bad4:	b933      	cbnz	r3, 800bae4 <_free_r+0x2c>
 800bad6:	6063      	str	r3, [r4, #4]
 800bad8:	6014      	str	r4, [r2, #0]
 800bada:	4628      	mov	r0, r5
 800badc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bae0:	f000 bc26 	b.w	800c330 <__malloc_unlock>
 800bae4:	42a3      	cmp	r3, r4
 800bae6:	d908      	bls.n	800bafa <_free_r+0x42>
 800bae8:	6820      	ldr	r0, [r4, #0]
 800baea:	1821      	adds	r1, r4, r0
 800baec:	428b      	cmp	r3, r1
 800baee:	bf01      	itttt	eq
 800baf0:	6819      	ldreq	r1, [r3, #0]
 800baf2:	685b      	ldreq	r3, [r3, #4]
 800baf4:	1809      	addeq	r1, r1, r0
 800baf6:	6021      	streq	r1, [r4, #0]
 800baf8:	e7ed      	b.n	800bad6 <_free_r+0x1e>
 800bafa:	461a      	mov	r2, r3
 800bafc:	685b      	ldr	r3, [r3, #4]
 800bafe:	b10b      	cbz	r3, 800bb04 <_free_r+0x4c>
 800bb00:	42a3      	cmp	r3, r4
 800bb02:	d9fa      	bls.n	800bafa <_free_r+0x42>
 800bb04:	6811      	ldr	r1, [r2, #0]
 800bb06:	1850      	adds	r0, r2, r1
 800bb08:	42a0      	cmp	r0, r4
 800bb0a:	d10b      	bne.n	800bb24 <_free_r+0x6c>
 800bb0c:	6820      	ldr	r0, [r4, #0]
 800bb0e:	4401      	add	r1, r0
 800bb10:	1850      	adds	r0, r2, r1
 800bb12:	4283      	cmp	r3, r0
 800bb14:	6011      	str	r1, [r2, #0]
 800bb16:	d1e0      	bne.n	800bada <_free_r+0x22>
 800bb18:	6818      	ldr	r0, [r3, #0]
 800bb1a:	685b      	ldr	r3, [r3, #4]
 800bb1c:	4408      	add	r0, r1
 800bb1e:	6010      	str	r0, [r2, #0]
 800bb20:	6053      	str	r3, [r2, #4]
 800bb22:	e7da      	b.n	800bada <_free_r+0x22>
 800bb24:	d902      	bls.n	800bb2c <_free_r+0x74>
 800bb26:	230c      	movs	r3, #12
 800bb28:	602b      	str	r3, [r5, #0]
 800bb2a:	e7d6      	b.n	800bada <_free_r+0x22>
 800bb2c:	6820      	ldr	r0, [r4, #0]
 800bb2e:	1821      	adds	r1, r4, r0
 800bb30:	428b      	cmp	r3, r1
 800bb32:	bf01      	itttt	eq
 800bb34:	6819      	ldreq	r1, [r3, #0]
 800bb36:	685b      	ldreq	r3, [r3, #4]
 800bb38:	1809      	addeq	r1, r1, r0
 800bb3a:	6021      	streq	r1, [r4, #0]
 800bb3c:	6063      	str	r3, [r4, #4]
 800bb3e:	6054      	str	r4, [r2, #4]
 800bb40:	e7cb      	b.n	800bada <_free_r+0x22>
 800bb42:	bd38      	pop	{r3, r4, r5, pc}
 800bb44:	200012c0 	.word	0x200012c0

0800bb48 <rshift>:
 800bb48:	6903      	ldr	r3, [r0, #16]
 800bb4a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bb4e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bb52:	f100 0414 	add.w	r4, r0, #20
 800bb56:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bb5a:	dd46      	ble.n	800bbea <rshift+0xa2>
 800bb5c:	f011 011f 	ands.w	r1, r1, #31
 800bb60:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bb64:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bb68:	d10c      	bne.n	800bb84 <rshift+0x3c>
 800bb6a:	4629      	mov	r1, r5
 800bb6c:	f100 0710 	add.w	r7, r0, #16
 800bb70:	42b1      	cmp	r1, r6
 800bb72:	d335      	bcc.n	800bbe0 <rshift+0x98>
 800bb74:	1a9b      	subs	r3, r3, r2
 800bb76:	009b      	lsls	r3, r3, #2
 800bb78:	1eea      	subs	r2, r5, #3
 800bb7a:	4296      	cmp	r6, r2
 800bb7c:	bf38      	it	cc
 800bb7e:	2300      	movcc	r3, #0
 800bb80:	4423      	add	r3, r4
 800bb82:	e015      	b.n	800bbb0 <rshift+0x68>
 800bb84:	46a1      	mov	r9, r4
 800bb86:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bb8a:	f1c1 0820 	rsb	r8, r1, #32
 800bb8e:	40cf      	lsrs	r7, r1
 800bb90:	f105 0e04 	add.w	lr, r5, #4
 800bb94:	4576      	cmp	r6, lr
 800bb96:	46f4      	mov	ip, lr
 800bb98:	d816      	bhi.n	800bbc8 <rshift+0x80>
 800bb9a:	1a9a      	subs	r2, r3, r2
 800bb9c:	0092      	lsls	r2, r2, #2
 800bb9e:	3a04      	subs	r2, #4
 800bba0:	3501      	adds	r5, #1
 800bba2:	42ae      	cmp	r6, r5
 800bba4:	bf38      	it	cc
 800bba6:	2200      	movcc	r2, #0
 800bba8:	18a3      	adds	r3, r4, r2
 800bbaa:	50a7      	str	r7, [r4, r2]
 800bbac:	b107      	cbz	r7, 800bbb0 <rshift+0x68>
 800bbae:	3304      	adds	r3, #4
 800bbb0:	42a3      	cmp	r3, r4
 800bbb2:	eba3 0204 	sub.w	r2, r3, r4
 800bbb6:	bf08      	it	eq
 800bbb8:	2300      	moveq	r3, #0
 800bbba:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bbbe:	6102      	str	r2, [r0, #16]
 800bbc0:	bf08      	it	eq
 800bbc2:	6143      	streq	r3, [r0, #20]
 800bbc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bbc8:	f8dc c000 	ldr.w	ip, [ip]
 800bbcc:	fa0c fc08 	lsl.w	ip, ip, r8
 800bbd0:	ea4c 0707 	orr.w	r7, ip, r7
 800bbd4:	f849 7b04 	str.w	r7, [r9], #4
 800bbd8:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bbdc:	40cf      	lsrs	r7, r1
 800bbde:	e7d9      	b.n	800bb94 <rshift+0x4c>
 800bbe0:	f851 cb04 	ldr.w	ip, [r1], #4
 800bbe4:	f847 cf04 	str.w	ip, [r7, #4]!
 800bbe8:	e7c2      	b.n	800bb70 <rshift+0x28>
 800bbea:	4623      	mov	r3, r4
 800bbec:	e7e0      	b.n	800bbb0 <rshift+0x68>

0800bbee <__hexdig_fun>:
 800bbee:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800bbf2:	2b09      	cmp	r3, #9
 800bbf4:	d802      	bhi.n	800bbfc <__hexdig_fun+0xe>
 800bbf6:	3820      	subs	r0, #32
 800bbf8:	b2c0      	uxtb	r0, r0
 800bbfa:	4770      	bx	lr
 800bbfc:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800bc00:	2b05      	cmp	r3, #5
 800bc02:	d801      	bhi.n	800bc08 <__hexdig_fun+0x1a>
 800bc04:	3847      	subs	r0, #71	@ 0x47
 800bc06:	e7f7      	b.n	800bbf8 <__hexdig_fun+0xa>
 800bc08:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800bc0c:	2b05      	cmp	r3, #5
 800bc0e:	d801      	bhi.n	800bc14 <__hexdig_fun+0x26>
 800bc10:	3827      	subs	r0, #39	@ 0x27
 800bc12:	e7f1      	b.n	800bbf8 <__hexdig_fun+0xa>
 800bc14:	2000      	movs	r0, #0
 800bc16:	4770      	bx	lr

0800bc18 <__gethex>:
 800bc18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc1c:	468a      	mov	sl, r1
 800bc1e:	4690      	mov	r8, r2
 800bc20:	b085      	sub	sp, #20
 800bc22:	9302      	str	r3, [sp, #8]
 800bc24:	680b      	ldr	r3, [r1, #0]
 800bc26:	9001      	str	r0, [sp, #4]
 800bc28:	1c9c      	adds	r4, r3, #2
 800bc2a:	46a1      	mov	r9, r4
 800bc2c:	f814 0b01 	ldrb.w	r0, [r4], #1
 800bc30:	2830      	cmp	r0, #48	@ 0x30
 800bc32:	d0fa      	beq.n	800bc2a <__gethex+0x12>
 800bc34:	eba9 0303 	sub.w	r3, r9, r3
 800bc38:	f1a3 0b02 	sub.w	fp, r3, #2
 800bc3c:	f7ff ffd7 	bl	800bbee <__hexdig_fun>
 800bc40:	4605      	mov	r5, r0
 800bc42:	2800      	cmp	r0, #0
 800bc44:	d168      	bne.n	800bd18 <__gethex+0x100>
 800bc46:	2201      	movs	r2, #1
 800bc48:	4648      	mov	r0, r9
 800bc4a:	499f      	ldr	r1, [pc, #636]	@ (800bec8 <__gethex+0x2b0>)
 800bc4c:	f7ff fe62 	bl	800b914 <strncmp>
 800bc50:	4607      	mov	r7, r0
 800bc52:	2800      	cmp	r0, #0
 800bc54:	d167      	bne.n	800bd26 <__gethex+0x10e>
 800bc56:	f899 0001 	ldrb.w	r0, [r9, #1]
 800bc5a:	4626      	mov	r6, r4
 800bc5c:	f7ff ffc7 	bl	800bbee <__hexdig_fun>
 800bc60:	2800      	cmp	r0, #0
 800bc62:	d062      	beq.n	800bd2a <__gethex+0x112>
 800bc64:	4623      	mov	r3, r4
 800bc66:	7818      	ldrb	r0, [r3, #0]
 800bc68:	4699      	mov	r9, r3
 800bc6a:	2830      	cmp	r0, #48	@ 0x30
 800bc6c:	f103 0301 	add.w	r3, r3, #1
 800bc70:	d0f9      	beq.n	800bc66 <__gethex+0x4e>
 800bc72:	f7ff ffbc 	bl	800bbee <__hexdig_fun>
 800bc76:	fab0 f580 	clz	r5, r0
 800bc7a:	f04f 0b01 	mov.w	fp, #1
 800bc7e:	096d      	lsrs	r5, r5, #5
 800bc80:	464a      	mov	r2, r9
 800bc82:	4616      	mov	r6, r2
 800bc84:	7830      	ldrb	r0, [r6, #0]
 800bc86:	3201      	adds	r2, #1
 800bc88:	f7ff ffb1 	bl	800bbee <__hexdig_fun>
 800bc8c:	2800      	cmp	r0, #0
 800bc8e:	d1f8      	bne.n	800bc82 <__gethex+0x6a>
 800bc90:	2201      	movs	r2, #1
 800bc92:	4630      	mov	r0, r6
 800bc94:	498c      	ldr	r1, [pc, #560]	@ (800bec8 <__gethex+0x2b0>)
 800bc96:	f7ff fe3d 	bl	800b914 <strncmp>
 800bc9a:	2800      	cmp	r0, #0
 800bc9c:	d13f      	bne.n	800bd1e <__gethex+0x106>
 800bc9e:	b944      	cbnz	r4, 800bcb2 <__gethex+0x9a>
 800bca0:	1c74      	adds	r4, r6, #1
 800bca2:	4622      	mov	r2, r4
 800bca4:	4616      	mov	r6, r2
 800bca6:	7830      	ldrb	r0, [r6, #0]
 800bca8:	3201      	adds	r2, #1
 800bcaa:	f7ff ffa0 	bl	800bbee <__hexdig_fun>
 800bcae:	2800      	cmp	r0, #0
 800bcb0:	d1f8      	bne.n	800bca4 <__gethex+0x8c>
 800bcb2:	1ba4      	subs	r4, r4, r6
 800bcb4:	00a7      	lsls	r7, r4, #2
 800bcb6:	7833      	ldrb	r3, [r6, #0]
 800bcb8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800bcbc:	2b50      	cmp	r3, #80	@ 0x50
 800bcbe:	d13e      	bne.n	800bd3e <__gethex+0x126>
 800bcc0:	7873      	ldrb	r3, [r6, #1]
 800bcc2:	2b2b      	cmp	r3, #43	@ 0x2b
 800bcc4:	d033      	beq.n	800bd2e <__gethex+0x116>
 800bcc6:	2b2d      	cmp	r3, #45	@ 0x2d
 800bcc8:	d034      	beq.n	800bd34 <__gethex+0x11c>
 800bcca:	2400      	movs	r4, #0
 800bccc:	1c71      	adds	r1, r6, #1
 800bcce:	7808      	ldrb	r0, [r1, #0]
 800bcd0:	f7ff ff8d 	bl	800bbee <__hexdig_fun>
 800bcd4:	1e43      	subs	r3, r0, #1
 800bcd6:	b2db      	uxtb	r3, r3
 800bcd8:	2b18      	cmp	r3, #24
 800bcda:	d830      	bhi.n	800bd3e <__gethex+0x126>
 800bcdc:	f1a0 0210 	sub.w	r2, r0, #16
 800bce0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bce4:	f7ff ff83 	bl	800bbee <__hexdig_fun>
 800bce8:	f100 3cff 	add.w	ip, r0, #4294967295
 800bcec:	fa5f fc8c 	uxtb.w	ip, ip
 800bcf0:	f1bc 0f18 	cmp.w	ip, #24
 800bcf4:	f04f 030a 	mov.w	r3, #10
 800bcf8:	d91e      	bls.n	800bd38 <__gethex+0x120>
 800bcfa:	b104      	cbz	r4, 800bcfe <__gethex+0xe6>
 800bcfc:	4252      	negs	r2, r2
 800bcfe:	4417      	add	r7, r2
 800bd00:	f8ca 1000 	str.w	r1, [sl]
 800bd04:	b1ed      	cbz	r5, 800bd42 <__gethex+0x12a>
 800bd06:	f1bb 0f00 	cmp.w	fp, #0
 800bd0a:	bf0c      	ite	eq
 800bd0c:	2506      	moveq	r5, #6
 800bd0e:	2500      	movne	r5, #0
 800bd10:	4628      	mov	r0, r5
 800bd12:	b005      	add	sp, #20
 800bd14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd18:	2500      	movs	r5, #0
 800bd1a:	462c      	mov	r4, r5
 800bd1c:	e7b0      	b.n	800bc80 <__gethex+0x68>
 800bd1e:	2c00      	cmp	r4, #0
 800bd20:	d1c7      	bne.n	800bcb2 <__gethex+0x9a>
 800bd22:	4627      	mov	r7, r4
 800bd24:	e7c7      	b.n	800bcb6 <__gethex+0x9e>
 800bd26:	464e      	mov	r6, r9
 800bd28:	462f      	mov	r7, r5
 800bd2a:	2501      	movs	r5, #1
 800bd2c:	e7c3      	b.n	800bcb6 <__gethex+0x9e>
 800bd2e:	2400      	movs	r4, #0
 800bd30:	1cb1      	adds	r1, r6, #2
 800bd32:	e7cc      	b.n	800bcce <__gethex+0xb6>
 800bd34:	2401      	movs	r4, #1
 800bd36:	e7fb      	b.n	800bd30 <__gethex+0x118>
 800bd38:	fb03 0002 	mla	r0, r3, r2, r0
 800bd3c:	e7ce      	b.n	800bcdc <__gethex+0xc4>
 800bd3e:	4631      	mov	r1, r6
 800bd40:	e7de      	b.n	800bd00 <__gethex+0xe8>
 800bd42:	4629      	mov	r1, r5
 800bd44:	eba6 0309 	sub.w	r3, r6, r9
 800bd48:	3b01      	subs	r3, #1
 800bd4a:	2b07      	cmp	r3, #7
 800bd4c:	dc0a      	bgt.n	800bd64 <__gethex+0x14c>
 800bd4e:	9801      	ldr	r0, [sp, #4]
 800bd50:	f000 faf4 	bl	800c33c <_Balloc>
 800bd54:	4604      	mov	r4, r0
 800bd56:	b940      	cbnz	r0, 800bd6a <__gethex+0x152>
 800bd58:	4602      	mov	r2, r0
 800bd5a:	21e4      	movs	r1, #228	@ 0xe4
 800bd5c:	4b5b      	ldr	r3, [pc, #364]	@ (800becc <__gethex+0x2b4>)
 800bd5e:	485c      	ldr	r0, [pc, #368]	@ (800bed0 <__gethex+0x2b8>)
 800bd60:	f001 fb68 	bl	800d434 <__assert_func>
 800bd64:	3101      	adds	r1, #1
 800bd66:	105b      	asrs	r3, r3, #1
 800bd68:	e7ef      	b.n	800bd4a <__gethex+0x132>
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	f100 0a14 	add.w	sl, r0, #20
 800bd70:	4655      	mov	r5, sl
 800bd72:	469b      	mov	fp, r3
 800bd74:	45b1      	cmp	r9, r6
 800bd76:	d337      	bcc.n	800bde8 <__gethex+0x1d0>
 800bd78:	f845 bb04 	str.w	fp, [r5], #4
 800bd7c:	eba5 050a 	sub.w	r5, r5, sl
 800bd80:	10ad      	asrs	r5, r5, #2
 800bd82:	6125      	str	r5, [r4, #16]
 800bd84:	4658      	mov	r0, fp
 800bd86:	f000 fbcb 	bl	800c520 <__hi0bits>
 800bd8a:	016d      	lsls	r5, r5, #5
 800bd8c:	f8d8 6000 	ldr.w	r6, [r8]
 800bd90:	1a2d      	subs	r5, r5, r0
 800bd92:	42b5      	cmp	r5, r6
 800bd94:	dd54      	ble.n	800be40 <__gethex+0x228>
 800bd96:	1bad      	subs	r5, r5, r6
 800bd98:	4629      	mov	r1, r5
 800bd9a:	4620      	mov	r0, r4
 800bd9c:	f000 ff53 	bl	800cc46 <__any_on>
 800bda0:	4681      	mov	r9, r0
 800bda2:	b178      	cbz	r0, 800bdc4 <__gethex+0x1ac>
 800bda4:	f04f 0901 	mov.w	r9, #1
 800bda8:	1e6b      	subs	r3, r5, #1
 800bdaa:	1159      	asrs	r1, r3, #5
 800bdac:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800bdb0:	f003 021f 	and.w	r2, r3, #31
 800bdb4:	fa09 f202 	lsl.w	r2, r9, r2
 800bdb8:	420a      	tst	r2, r1
 800bdba:	d003      	beq.n	800bdc4 <__gethex+0x1ac>
 800bdbc:	454b      	cmp	r3, r9
 800bdbe:	dc36      	bgt.n	800be2e <__gethex+0x216>
 800bdc0:	f04f 0902 	mov.w	r9, #2
 800bdc4:	4629      	mov	r1, r5
 800bdc6:	4620      	mov	r0, r4
 800bdc8:	f7ff febe 	bl	800bb48 <rshift>
 800bdcc:	442f      	add	r7, r5
 800bdce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bdd2:	42bb      	cmp	r3, r7
 800bdd4:	da42      	bge.n	800be5c <__gethex+0x244>
 800bdd6:	4621      	mov	r1, r4
 800bdd8:	9801      	ldr	r0, [sp, #4]
 800bdda:	f000 faef 	bl	800c3bc <_Bfree>
 800bdde:	2300      	movs	r3, #0
 800bde0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bde2:	25a3      	movs	r5, #163	@ 0xa3
 800bde4:	6013      	str	r3, [r2, #0]
 800bde6:	e793      	b.n	800bd10 <__gethex+0xf8>
 800bde8:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800bdec:	2a2e      	cmp	r2, #46	@ 0x2e
 800bdee:	d012      	beq.n	800be16 <__gethex+0x1fe>
 800bdf0:	2b20      	cmp	r3, #32
 800bdf2:	d104      	bne.n	800bdfe <__gethex+0x1e6>
 800bdf4:	f845 bb04 	str.w	fp, [r5], #4
 800bdf8:	f04f 0b00 	mov.w	fp, #0
 800bdfc:	465b      	mov	r3, fp
 800bdfe:	7830      	ldrb	r0, [r6, #0]
 800be00:	9303      	str	r3, [sp, #12]
 800be02:	f7ff fef4 	bl	800bbee <__hexdig_fun>
 800be06:	9b03      	ldr	r3, [sp, #12]
 800be08:	f000 000f 	and.w	r0, r0, #15
 800be0c:	4098      	lsls	r0, r3
 800be0e:	ea4b 0b00 	orr.w	fp, fp, r0
 800be12:	3304      	adds	r3, #4
 800be14:	e7ae      	b.n	800bd74 <__gethex+0x15c>
 800be16:	45b1      	cmp	r9, r6
 800be18:	d8ea      	bhi.n	800bdf0 <__gethex+0x1d8>
 800be1a:	2201      	movs	r2, #1
 800be1c:	4630      	mov	r0, r6
 800be1e:	492a      	ldr	r1, [pc, #168]	@ (800bec8 <__gethex+0x2b0>)
 800be20:	9303      	str	r3, [sp, #12]
 800be22:	f7ff fd77 	bl	800b914 <strncmp>
 800be26:	9b03      	ldr	r3, [sp, #12]
 800be28:	2800      	cmp	r0, #0
 800be2a:	d1e1      	bne.n	800bdf0 <__gethex+0x1d8>
 800be2c:	e7a2      	b.n	800bd74 <__gethex+0x15c>
 800be2e:	4620      	mov	r0, r4
 800be30:	1ea9      	subs	r1, r5, #2
 800be32:	f000 ff08 	bl	800cc46 <__any_on>
 800be36:	2800      	cmp	r0, #0
 800be38:	d0c2      	beq.n	800bdc0 <__gethex+0x1a8>
 800be3a:	f04f 0903 	mov.w	r9, #3
 800be3e:	e7c1      	b.n	800bdc4 <__gethex+0x1ac>
 800be40:	da09      	bge.n	800be56 <__gethex+0x23e>
 800be42:	1b75      	subs	r5, r6, r5
 800be44:	4621      	mov	r1, r4
 800be46:	462a      	mov	r2, r5
 800be48:	9801      	ldr	r0, [sp, #4]
 800be4a:	f000 fccd 	bl	800c7e8 <__lshift>
 800be4e:	4604      	mov	r4, r0
 800be50:	1b7f      	subs	r7, r7, r5
 800be52:	f100 0a14 	add.w	sl, r0, #20
 800be56:	f04f 0900 	mov.w	r9, #0
 800be5a:	e7b8      	b.n	800bdce <__gethex+0x1b6>
 800be5c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800be60:	42bd      	cmp	r5, r7
 800be62:	dd6f      	ble.n	800bf44 <__gethex+0x32c>
 800be64:	1bed      	subs	r5, r5, r7
 800be66:	42ae      	cmp	r6, r5
 800be68:	dc34      	bgt.n	800bed4 <__gethex+0x2bc>
 800be6a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800be6e:	2b02      	cmp	r3, #2
 800be70:	d022      	beq.n	800beb8 <__gethex+0x2a0>
 800be72:	2b03      	cmp	r3, #3
 800be74:	d024      	beq.n	800bec0 <__gethex+0x2a8>
 800be76:	2b01      	cmp	r3, #1
 800be78:	d115      	bne.n	800bea6 <__gethex+0x28e>
 800be7a:	42ae      	cmp	r6, r5
 800be7c:	d113      	bne.n	800bea6 <__gethex+0x28e>
 800be7e:	2e01      	cmp	r6, #1
 800be80:	d10b      	bne.n	800be9a <__gethex+0x282>
 800be82:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800be86:	9a02      	ldr	r2, [sp, #8]
 800be88:	2562      	movs	r5, #98	@ 0x62
 800be8a:	6013      	str	r3, [r2, #0]
 800be8c:	2301      	movs	r3, #1
 800be8e:	6123      	str	r3, [r4, #16]
 800be90:	f8ca 3000 	str.w	r3, [sl]
 800be94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800be96:	601c      	str	r4, [r3, #0]
 800be98:	e73a      	b.n	800bd10 <__gethex+0xf8>
 800be9a:	4620      	mov	r0, r4
 800be9c:	1e71      	subs	r1, r6, #1
 800be9e:	f000 fed2 	bl	800cc46 <__any_on>
 800bea2:	2800      	cmp	r0, #0
 800bea4:	d1ed      	bne.n	800be82 <__gethex+0x26a>
 800bea6:	4621      	mov	r1, r4
 800bea8:	9801      	ldr	r0, [sp, #4]
 800beaa:	f000 fa87 	bl	800c3bc <_Bfree>
 800beae:	2300      	movs	r3, #0
 800beb0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800beb2:	2550      	movs	r5, #80	@ 0x50
 800beb4:	6013      	str	r3, [r2, #0]
 800beb6:	e72b      	b.n	800bd10 <__gethex+0xf8>
 800beb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d1f3      	bne.n	800bea6 <__gethex+0x28e>
 800bebe:	e7e0      	b.n	800be82 <__gethex+0x26a>
 800bec0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d1dd      	bne.n	800be82 <__gethex+0x26a>
 800bec6:	e7ee      	b.n	800bea6 <__gethex+0x28e>
 800bec8:	0800dca6 	.word	0x0800dca6
 800becc:	0800de11 	.word	0x0800de11
 800bed0:	0800de22 	.word	0x0800de22
 800bed4:	1e6f      	subs	r7, r5, #1
 800bed6:	f1b9 0f00 	cmp.w	r9, #0
 800beda:	d130      	bne.n	800bf3e <__gethex+0x326>
 800bedc:	b127      	cbz	r7, 800bee8 <__gethex+0x2d0>
 800bede:	4639      	mov	r1, r7
 800bee0:	4620      	mov	r0, r4
 800bee2:	f000 feb0 	bl	800cc46 <__any_on>
 800bee6:	4681      	mov	r9, r0
 800bee8:	2301      	movs	r3, #1
 800beea:	4629      	mov	r1, r5
 800beec:	1b76      	subs	r6, r6, r5
 800beee:	2502      	movs	r5, #2
 800bef0:	117a      	asrs	r2, r7, #5
 800bef2:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800bef6:	f007 071f 	and.w	r7, r7, #31
 800befa:	40bb      	lsls	r3, r7
 800befc:	4213      	tst	r3, r2
 800befe:	4620      	mov	r0, r4
 800bf00:	bf18      	it	ne
 800bf02:	f049 0902 	orrne.w	r9, r9, #2
 800bf06:	f7ff fe1f 	bl	800bb48 <rshift>
 800bf0a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800bf0e:	f1b9 0f00 	cmp.w	r9, #0
 800bf12:	d047      	beq.n	800bfa4 <__gethex+0x38c>
 800bf14:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bf18:	2b02      	cmp	r3, #2
 800bf1a:	d015      	beq.n	800bf48 <__gethex+0x330>
 800bf1c:	2b03      	cmp	r3, #3
 800bf1e:	d017      	beq.n	800bf50 <__gethex+0x338>
 800bf20:	2b01      	cmp	r3, #1
 800bf22:	d109      	bne.n	800bf38 <__gethex+0x320>
 800bf24:	f019 0f02 	tst.w	r9, #2
 800bf28:	d006      	beq.n	800bf38 <__gethex+0x320>
 800bf2a:	f8da 3000 	ldr.w	r3, [sl]
 800bf2e:	ea49 0903 	orr.w	r9, r9, r3
 800bf32:	f019 0f01 	tst.w	r9, #1
 800bf36:	d10e      	bne.n	800bf56 <__gethex+0x33e>
 800bf38:	f045 0510 	orr.w	r5, r5, #16
 800bf3c:	e032      	b.n	800bfa4 <__gethex+0x38c>
 800bf3e:	f04f 0901 	mov.w	r9, #1
 800bf42:	e7d1      	b.n	800bee8 <__gethex+0x2d0>
 800bf44:	2501      	movs	r5, #1
 800bf46:	e7e2      	b.n	800bf0e <__gethex+0x2f6>
 800bf48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf4a:	f1c3 0301 	rsb	r3, r3, #1
 800bf4e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bf50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d0f0      	beq.n	800bf38 <__gethex+0x320>
 800bf56:	f04f 0c00 	mov.w	ip, #0
 800bf5a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bf5e:	f104 0314 	add.w	r3, r4, #20
 800bf62:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800bf66:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf70:	f1b2 3fff 	cmp.w	r2, #4294967295
 800bf74:	d01b      	beq.n	800bfae <__gethex+0x396>
 800bf76:	3201      	adds	r2, #1
 800bf78:	6002      	str	r2, [r0, #0]
 800bf7a:	2d02      	cmp	r5, #2
 800bf7c:	f104 0314 	add.w	r3, r4, #20
 800bf80:	d13c      	bne.n	800bffc <__gethex+0x3e4>
 800bf82:	f8d8 2000 	ldr.w	r2, [r8]
 800bf86:	3a01      	subs	r2, #1
 800bf88:	42b2      	cmp	r2, r6
 800bf8a:	d109      	bne.n	800bfa0 <__gethex+0x388>
 800bf8c:	2201      	movs	r2, #1
 800bf8e:	1171      	asrs	r1, r6, #5
 800bf90:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bf94:	f006 061f 	and.w	r6, r6, #31
 800bf98:	fa02 f606 	lsl.w	r6, r2, r6
 800bf9c:	421e      	tst	r6, r3
 800bf9e:	d13a      	bne.n	800c016 <__gethex+0x3fe>
 800bfa0:	f045 0520 	orr.w	r5, r5, #32
 800bfa4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bfa6:	601c      	str	r4, [r3, #0]
 800bfa8:	9b02      	ldr	r3, [sp, #8]
 800bfaa:	601f      	str	r7, [r3, #0]
 800bfac:	e6b0      	b.n	800bd10 <__gethex+0xf8>
 800bfae:	4299      	cmp	r1, r3
 800bfb0:	f843 cc04 	str.w	ip, [r3, #-4]
 800bfb4:	d8d9      	bhi.n	800bf6a <__gethex+0x352>
 800bfb6:	68a3      	ldr	r3, [r4, #8]
 800bfb8:	459b      	cmp	fp, r3
 800bfba:	db17      	blt.n	800bfec <__gethex+0x3d4>
 800bfbc:	6861      	ldr	r1, [r4, #4]
 800bfbe:	9801      	ldr	r0, [sp, #4]
 800bfc0:	3101      	adds	r1, #1
 800bfc2:	f000 f9bb 	bl	800c33c <_Balloc>
 800bfc6:	4681      	mov	r9, r0
 800bfc8:	b918      	cbnz	r0, 800bfd2 <__gethex+0x3ba>
 800bfca:	4602      	mov	r2, r0
 800bfcc:	2184      	movs	r1, #132	@ 0x84
 800bfce:	4b19      	ldr	r3, [pc, #100]	@ (800c034 <__gethex+0x41c>)
 800bfd0:	e6c5      	b.n	800bd5e <__gethex+0x146>
 800bfd2:	6922      	ldr	r2, [r4, #16]
 800bfd4:	f104 010c 	add.w	r1, r4, #12
 800bfd8:	3202      	adds	r2, #2
 800bfda:	0092      	lsls	r2, r2, #2
 800bfdc:	300c      	adds	r0, #12
 800bfde:	f7ff fd52 	bl	800ba86 <memcpy>
 800bfe2:	4621      	mov	r1, r4
 800bfe4:	9801      	ldr	r0, [sp, #4]
 800bfe6:	f000 f9e9 	bl	800c3bc <_Bfree>
 800bfea:	464c      	mov	r4, r9
 800bfec:	6923      	ldr	r3, [r4, #16]
 800bfee:	1c5a      	adds	r2, r3, #1
 800bff0:	6122      	str	r2, [r4, #16]
 800bff2:	2201      	movs	r2, #1
 800bff4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bff8:	615a      	str	r2, [r3, #20]
 800bffa:	e7be      	b.n	800bf7a <__gethex+0x362>
 800bffc:	6922      	ldr	r2, [r4, #16]
 800bffe:	455a      	cmp	r2, fp
 800c000:	dd0b      	ble.n	800c01a <__gethex+0x402>
 800c002:	2101      	movs	r1, #1
 800c004:	4620      	mov	r0, r4
 800c006:	f7ff fd9f 	bl	800bb48 <rshift>
 800c00a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c00e:	3701      	adds	r7, #1
 800c010:	42bb      	cmp	r3, r7
 800c012:	f6ff aee0 	blt.w	800bdd6 <__gethex+0x1be>
 800c016:	2501      	movs	r5, #1
 800c018:	e7c2      	b.n	800bfa0 <__gethex+0x388>
 800c01a:	f016 061f 	ands.w	r6, r6, #31
 800c01e:	d0fa      	beq.n	800c016 <__gethex+0x3fe>
 800c020:	4453      	add	r3, sl
 800c022:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c026:	f000 fa7b 	bl	800c520 <__hi0bits>
 800c02a:	f1c6 0620 	rsb	r6, r6, #32
 800c02e:	42b0      	cmp	r0, r6
 800c030:	dbe7      	blt.n	800c002 <__gethex+0x3ea>
 800c032:	e7f0      	b.n	800c016 <__gethex+0x3fe>
 800c034:	0800de11 	.word	0x0800de11

0800c038 <L_shift>:
 800c038:	f1c2 0208 	rsb	r2, r2, #8
 800c03c:	0092      	lsls	r2, r2, #2
 800c03e:	b570      	push	{r4, r5, r6, lr}
 800c040:	f1c2 0620 	rsb	r6, r2, #32
 800c044:	6843      	ldr	r3, [r0, #4]
 800c046:	6804      	ldr	r4, [r0, #0]
 800c048:	fa03 f506 	lsl.w	r5, r3, r6
 800c04c:	432c      	orrs	r4, r5
 800c04e:	40d3      	lsrs	r3, r2
 800c050:	6004      	str	r4, [r0, #0]
 800c052:	f840 3f04 	str.w	r3, [r0, #4]!
 800c056:	4288      	cmp	r0, r1
 800c058:	d3f4      	bcc.n	800c044 <L_shift+0xc>
 800c05a:	bd70      	pop	{r4, r5, r6, pc}

0800c05c <__match>:
 800c05c:	b530      	push	{r4, r5, lr}
 800c05e:	6803      	ldr	r3, [r0, #0]
 800c060:	3301      	adds	r3, #1
 800c062:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c066:	b914      	cbnz	r4, 800c06e <__match+0x12>
 800c068:	6003      	str	r3, [r0, #0]
 800c06a:	2001      	movs	r0, #1
 800c06c:	bd30      	pop	{r4, r5, pc}
 800c06e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c072:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c076:	2d19      	cmp	r5, #25
 800c078:	bf98      	it	ls
 800c07a:	3220      	addls	r2, #32
 800c07c:	42a2      	cmp	r2, r4
 800c07e:	d0f0      	beq.n	800c062 <__match+0x6>
 800c080:	2000      	movs	r0, #0
 800c082:	e7f3      	b.n	800c06c <__match+0x10>

0800c084 <__hexnan>:
 800c084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c088:	2500      	movs	r5, #0
 800c08a:	680b      	ldr	r3, [r1, #0]
 800c08c:	4682      	mov	sl, r0
 800c08e:	115e      	asrs	r6, r3, #5
 800c090:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c094:	f013 031f 	ands.w	r3, r3, #31
 800c098:	bf18      	it	ne
 800c09a:	3604      	addne	r6, #4
 800c09c:	1f37      	subs	r7, r6, #4
 800c09e:	4690      	mov	r8, r2
 800c0a0:	46b9      	mov	r9, r7
 800c0a2:	463c      	mov	r4, r7
 800c0a4:	46ab      	mov	fp, r5
 800c0a6:	b087      	sub	sp, #28
 800c0a8:	6801      	ldr	r1, [r0, #0]
 800c0aa:	9301      	str	r3, [sp, #4]
 800c0ac:	f846 5c04 	str.w	r5, [r6, #-4]
 800c0b0:	9502      	str	r5, [sp, #8]
 800c0b2:	784a      	ldrb	r2, [r1, #1]
 800c0b4:	1c4b      	adds	r3, r1, #1
 800c0b6:	9303      	str	r3, [sp, #12]
 800c0b8:	b342      	cbz	r2, 800c10c <__hexnan+0x88>
 800c0ba:	4610      	mov	r0, r2
 800c0bc:	9105      	str	r1, [sp, #20]
 800c0be:	9204      	str	r2, [sp, #16]
 800c0c0:	f7ff fd95 	bl	800bbee <__hexdig_fun>
 800c0c4:	2800      	cmp	r0, #0
 800c0c6:	d151      	bne.n	800c16c <__hexnan+0xe8>
 800c0c8:	9a04      	ldr	r2, [sp, #16]
 800c0ca:	9905      	ldr	r1, [sp, #20]
 800c0cc:	2a20      	cmp	r2, #32
 800c0ce:	d818      	bhi.n	800c102 <__hexnan+0x7e>
 800c0d0:	9b02      	ldr	r3, [sp, #8]
 800c0d2:	459b      	cmp	fp, r3
 800c0d4:	dd13      	ble.n	800c0fe <__hexnan+0x7a>
 800c0d6:	454c      	cmp	r4, r9
 800c0d8:	d206      	bcs.n	800c0e8 <__hexnan+0x64>
 800c0da:	2d07      	cmp	r5, #7
 800c0dc:	dc04      	bgt.n	800c0e8 <__hexnan+0x64>
 800c0de:	462a      	mov	r2, r5
 800c0e0:	4649      	mov	r1, r9
 800c0e2:	4620      	mov	r0, r4
 800c0e4:	f7ff ffa8 	bl	800c038 <L_shift>
 800c0e8:	4544      	cmp	r4, r8
 800c0ea:	d952      	bls.n	800c192 <__hexnan+0x10e>
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	f1a4 0904 	sub.w	r9, r4, #4
 800c0f2:	f844 3c04 	str.w	r3, [r4, #-4]
 800c0f6:	461d      	mov	r5, r3
 800c0f8:	464c      	mov	r4, r9
 800c0fa:	f8cd b008 	str.w	fp, [sp, #8]
 800c0fe:	9903      	ldr	r1, [sp, #12]
 800c100:	e7d7      	b.n	800c0b2 <__hexnan+0x2e>
 800c102:	2a29      	cmp	r2, #41	@ 0x29
 800c104:	d157      	bne.n	800c1b6 <__hexnan+0x132>
 800c106:	3102      	adds	r1, #2
 800c108:	f8ca 1000 	str.w	r1, [sl]
 800c10c:	f1bb 0f00 	cmp.w	fp, #0
 800c110:	d051      	beq.n	800c1b6 <__hexnan+0x132>
 800c112:	454c      	cmp	r4, r9
 800c114:	d206      	bcs.n	800c124 <__hexnan+0xa0>
 800c116:	2d07      	cmp	r5, #7
 800c118:	dc04      	bgt.n	800c124 <__hexnan+0xa0>
 800c11a:	462a      	mov	r2, r5
 800c11c:	4649      	mov	r1, r9
 800c11e:	4620      	mov	r0, r4
 800c120:	f7ff ff8a 	bl	800c038 <L_shift>
 800c124:	4544      	cmp	r4, r8
 800c126:	d936      	bls.n	800c196 <__hexnan+0x112>
 800c128:	4623      	mov	r3, r4
 800c12a:	f1a8 0204 	sub.w	r2, r8, #4
 800c12e:	f853 1b04 	ldr.w	r1, [r3], #4
 800c132:	429f      	cmp	r7, r3
 800c134:	f842 1f04 	str.w	r1, [r2, #4]!
 800c138:	d2f9      	bcs.n	800c12e <__hexnan+0xaa>
 800c13a:	1b3b      	subs	r3, r7, r4
 800c13c:	f023 0303 	bic.w	r3, r3, #3
 800c140:	3304      	adds	r3, #4
 800c142:	3401      	adds	r4, #1
 800c144:	3e03      	subs	r6, #3
 800c146:	42b4      	cmp	r4, r6
 800c148:	bf88      	it	hi
 800c14a:	2304      	movhi	r3, #4
 800c14c:	2200      	movs	r2, #0
 800c14e:	4443      	add	r3, r8
 800c150:	f843 2b04 	str.w	r2, [r3], #4
 800c154:	429f      	cmp	r7, r3
 800c156:	d2fb      	bcs.n	800c150 <__hexnan+0xcc>
 800c158:	683b      	ldr	r3, [r7, #0]
 800c15a:	b91b      	cbnz	r3, 800c164 <__hexnan+0xe0>
 800c15c:	4547      	cmp	r7, r8
 800c15e:	d128      	bne.n	800c1b2 <__hexnan+0x12e>
 800c160:	2301      	movs	r3, #1
 800c162:	603b      	str	r3, [r7, #0]
 800c164:	2005      	movs	r0, #5
 800c166:	b007      	add	sp, #28
 800c168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c16c:	3501      	adds	r5, #1
 800c16e:	2d08      	cmp	r5, #8
 800c170:	f10b 0b01 	add.w	fp, fp, #1
 800c174:	dd06      	ble.n	800c184 <__hexnan+0x100>
 800c176:	4544      	cmp	r4, r8
 800c178:	d9c1      	bls.n	800c0fe <__hexnan+0x7a>
 800c17a:	2300      	movs	r3, #0
 800c17c:	2501      	movs	r5, #1
 800c17e:	f844 3c04 	str.w	r3, [r4, #-4]
 800c182:	3c04      	subs	r4, #4
 800c184:	6822      	ldr	r2, [r4, #0]
 800c186:	f000 000f 	and.w	r0, r0, #15
 800c18a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c18e:	6020      	str	r0, [r4, #0]
 800c190:	e7b5      	b.n	800c0fe <__hexnan+0x7a>
 800c192:	2508      	movs	r5, #8
 800c194:	e7b3      	b.n	800c0fe <__hexnan+0x7a>
 800c196:	9b01      	ldr	r3, [sp, #4]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d0dd      	beq.n	800c158 <__hexnan+0xd4>
 800c19c:	f04f 32ff 	mov.w	r2, #4294967295
 800c1a0:	f1c3 0320 	rsb	r3, r3, #32
 800c1a4:	40da      	lsrs	r2, r3
 800c1a6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c1aa:	4013      	ands	r3, r2
 800c1ac:	f846 3c04 	str.w	r3, [r6, #-4]
 800c1b0:	e7d2      	b.n	800c158 <__hexnan+0xd4>
 800c1b2:	3f04      	subs	r7, #4
 800c1b4:	e7d0      	b.n	800c158 <__hexnan+0xd4>
 800c1b6:	2004      	movs	r0, #4
 800c1b8:	e7d5      	b.n	800c166 <__hexnan+0xe2>
	...

0800c1bc <sbrk_aligned>:
 800c1bc:	b570      	push	{r4, r5, r6, lr}
 800c1be:	4e0f      	ldr	r6, [pc, #60]	@ (800c1fc <sbrk_aligned+0x40>)
 800c1c0:	460c      	mov	r4, r1
 800c1c2:	6831      	ldr	r1, [r6, #0]
 800c1c4:	4605      	mov	r5, r0
 800c1c6:	b911      	cbnz	r1, 800c1ce <sbrk_aligned+0x12>
 800c1c8:	f001 f916 	bl	800d3f8 <_sbrk_r>
 800c1cc:	6030      	str	r0, [r6, #0]
 800c1ce:	4621      	mov	r1, r4
 800c1d0:	4628      	mov	r0, r5
 800c1d2:	f001 f911 	bl	800d3f8 <_sbrk_r>
 800c1d6:	1c43      	adds	r3, r0, #1
 800c1d8:	d103      	bne.n	800c1e2 <sbrk_aligned+0x26>
 800c1da:	f04f 34ff 	mov.w	r4, #4294967295
 800c1de:	4620      	mov	r0, r4
 800c1e0:	bd70      	pop	{r4, r5, r6, pc}
 800c1e2:	1cc4      	adds	r4, r0, #3
 800c1e4:	f024 0403 	bic.w	r4, r4, #3
 800c1e8:	42a0      	cmp	r0, r4
 800c1ea:	d0f8      	beq.n	800c1de <sbrk_aligned+0x22>
 800c1ec:	1a21      	subs	r1, r4, r0
 800c1ee:	4628      	mov	r0, r5
 800c1f0:	f001 f902 	bl	800d3f8 <_sbrk_r>
 800c1f4:	3001      	adds	r0, #1
 800c1f6:	d1f2      	bne.n	800c1de <sbrk_aligned+0x22>
 800c1f8:	e7ef      	b.n	800c1da <sbrk_aligned+0x1e>
 800c1fa:	bf00      	nop
 800c1fc:	200012bc 	.word	0x200012bc

0800c200 <_malloc_r>:
 800c200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c204:	1ccd      	adds	r5, r1, #3
 800c206:	f025 0503 	bic.w	r5, r5, #3
 800c20a:	3508      	adds	r5, #8
 800c20c:	2d0c      	cmp	r5, #12
 800c20e:	bf38      	it	cc
 800c210:	250c      	movcc	r5, #12
 800c212:	2d00      	cmp	r5, #0
 800c214:	4606      	mov	r6, r0
 800c216:	db01      	blt.n	800c21c <_malloc_r+0x1c>
 800c218:	42a9      	cmp	r1, r5
 800c21a:	d904      	bls.n	800c226 <_malloc_r+0x26>
 800c21c:	230c      	movs	r3, #12
 800c21e:	6033      	str	r3, [r6, #0]
 800c220:	2000      	movs	r0, #0
 800c222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c226:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c2fc <_malloc_r+0xfc>
 800c22a:	f000 f87b 	bl	800c324 <__malloc_lock>
 800c22e:	f8d8 3000 	ldr.w	r3, [r8]
 800c232:	461c      	mov	r4, r3
 800c234:	bb44      	cbnz	r4, 800c288 <_malloc_r+0x88>
 800c236:	4629      	mov	r1, r5
 800c238:	4630      	mov	r0, r6
 800c23a:	f7ff ffbf 	bl	800c1bc <sbrk_aligned>
 800c23e:	1c43      	adds	r3, r0, #1
 800c240:	4604      	mov	r4, r0
 800c242:	d158      	bne.n	800c2f6 <_malloc_r+0xf6>
 800c244:	f8d8 4000 	ldr.w	r4, [r8]
 800c248:	4627      	mov	r7, r4
 800c24a:	2f00      	cmp	r7, #0
 800c24c:	d143      	bne.n	800c2d6 <_malloc_r+0xd6>
 800c24e:	2c00      	cmp	r4, #0
 800c250:	d04b      	beq.n	800c2ea <_malloc_r+0xea>
 800c252:	6823      	ldr	r3, [r4, #0]
 800c254:	4639      	mov	r1, r7
 800c256:	4630      	mov	r0, r6
 800c258:	eb04 0903 	add.w	r9, r4, r3
 800c25c:	f001 f8cc 	bl	800d3f8 <_sbrk_r>
 800c260:	4581      	cmp	r9, r0
 800c262:	d142      	bne.n	800c2ea <_malloc_r+0xea>
 800c264:	6821      	ldr	r1, [r4, #0]
 800c266:	4630      	mov	r0, r6
 800c268:	1a6d      	subs	r5, r5, r1
 800c26a:	4629      	mov	r1, r5
 800c26c:	f7ff ffa6 	bl	800c1bc <sbrk_aligned>
 800c270:	3001      	adds	r0, #1
 800c272:	d03a      	beq.n	800c2ea <_malloc_r+0xea>
 800c274:	6823      	ldr	r3, [r4, #0]
 800c276:	442b      	add	r3, r5
 800c278:	6023      	str	r3, [r4, #0]
 800c27a:	f8d8 3000 	ldr.w	r3, [r8]
 800c27e:	685a      	ldr	r2, [r3, #4]
 800c280:	bb62      	cbnz	r2, 800c2dc <_malloc_r+0xdc>
 800c282:	f8c8 7000 	str.w	r7, [r8]
 800c286:	e00f      	b.n	800c2a8 <_malloc_r+0xa8>
 800c288:	6822      	ldr	r2, [r4, #0]
 800c28a:	1b52      	subs	r2, r2, r5
 800c28c:	d420      	bmi.n	800c2d0 <_malloc_r+0xd0>
 800c28e:	2a0b      	cmp	r2, #11
 800c290:	d917      	bls.n	800c2c2 <_malloc_r+0xc2>
 800c292:	1961      	adds	r1, r4, r5
 800c294:	42a3      	cmp	r3, r4
 800c296:	6025      	str	r5, [r4, #0]
 800c298:	bf18      	it	ne
 800c29a:	6059      	strne	r1, [r3, #4]
 800c29c:	6863      	ldr	r3, [r4, #4]
 800c29e:	bf08      	it	eq
 800c2a0:	f8c8 1000 	streq.w	r1, [r8]
 800c2a4:	5162      	str	r2, [r4, r5]
 800c2a6:	604b      	str	r3, [r1, #4]
 800c2a8:	4630      	mov	r0, r6
 800c2aa:	f000 f841 	bl	800c330 <__malloc_unlock>
 800c2ae:	f104 000b 	add.w	r0, r4, #11
 800c2b2:	1d23      	adds	r3, r4, #4
 800c2b4:	f020 0007 	bic.w	r0, r0, #7
 800c2b8:	1ac2      	subs	r2, r0, r3
 800c2ba:	bf1c      	itt	ne
 800c2bc:	1a1b      	subne	r3, r3, r0
 800c2be:	50a3      	strne	r3, [r4, r2]
 800c2c0:	e7af      	b.n	800c222 <_malloc_r+0x22>
 800c2c2:	6862      	ldr	r2, [r4, #4]
 800c2c4:	42a3      	cmp	r3, r4
 800c2c6:	bf0c      	ite	eq
 800c2c8:	f8c8 2000 	streq.w	r2, [r8]
 800c2cc:	605a      	strne	r2, [r3, #4]
 800c2ce:	e7eb      	b.n	800c2a8 <_malloc_r+0xa8>
 800c2d0:	4623      	mov	r3, r4
 800c2d2:	6864      	ldr	r4, [r4, #4]
 800c2d4:	e7ae      	b.n	800c234 <_malloc_r+0x34>
 800c2d6:	463c      	mov	r4, r7
 800c2d8:	687f      	ldr	r7, [r7, #4]
 800c2da:	e7b6      	b.n	800c24a <_malloc_r+0x4a>
 800c2dc:	461a      	mov	r2, r3
 800c2de:	685b      	ldr	r3, [r3, #4]
 800c2e0:	42a3      	cmp	r3, r4
 800c2e2:	d1fb      	bne.n	800c2dc <_malloc_r+0xdc>
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	6053      	str	r3, [r2, #4]
 800c2e8:	e7de      	b.n	800c2a8 <_malloc_r+0xa8>
 800c2ea:	230c      	movs	r3, #12
 800c2ec:	4630      	mov	r0, r6
 800c2ee:	6033      	str	r3, [r6, #0]
 800c2f0:	f000 f81e 	bl	800c330 <__malloc_unlock>
 800c2f4:	e794      	b.n	800c220 <_malloc_r+0x20>
 800c2f6:	6005      	str	r5, [r0, #0]
 800c2f8:	e7d6      	b.n	800c2a8 <_malloc_r+0xa8>
 800c2fa:	bf00      	nop
 800c2fc:	200012c0 	.word	0x200012c0

0800c300 <__ascii_mbtowc>:
 800c300:	b082      	sub	sp, #8
 800c302:	b901      	cbnz	r1, 800c306 <__ascii_mbtowc+0x6>
 800c304:	a901      	add	r1, sp, #4
 800c306:	b142      	cbz	r2, 800c31a <__ascii_mbtowc+0x1a>
 800c308:	b14b      	cbz	r3, 800c31e <__ascii_mbtowc+0x1e>
 800c30a:	7813      	ldrb	r3, [r2, #0]
 800c30c:	600b      	str	r3, [r1, #0]
 800c30e:	7812      	ldrb	r2, [r2, #0]
 800c310:	1e10      	subs	r0, r2, #0
 800c312:	bf18      	it	ne
 800c314:	2001      	movne	r0, #1
 800c316:	b002      	add	sp, #8
 800c318:	4770      	bx	lr
 800c31a:	4610      	mov	r0, r2
 800c31c:	e7fb      	b.n	800c316 <__ascii_mbtowc+0x16>
 800c31e:	f06f 0001 	mvn.w	r0, #1
 800c322:	e7f8      	b.n	800c316 <__ascii_mbtowc+0x16>

0800c324 <__malloc_lock>:
 800c324:	4801      	ldr	r0, [pc, #4]	@ (800c32c <__malloc_lock+0x8>)
 800c326:	f7ff bba4 	b.w	800ba72 <__retarget_lock_acquire_recursive>
 800c32a:	bf00      	nop
 800c32c:	200012b8 	.word	0x200012b8

0800c330 <__malloc_unlock>:
 800c330:	4801      	ldr	r0, [pc, #4]	@ (800c338 <__malloc_unlock+0x8>)
 800c332:	f7ff bb9f 	b.w	800ba74 <__retarget_lock_release_recursive>
 800c336:	bf00      	nop
 800c338:	200012b8 	.word	0x200012b8

0800c33c <_Balloc>:
 800c33c:	b570      	push	{r4, r5, r6, lr}
 800c33e:	69c6      	ldr	r6, [r0, #28]
 800c340:	4604      	mov	r4, r0
 800c342:	460d      	mov	r5, r1
 800c344:	b976      	cbnz	r6, 800c364 <_Balloc+0x28>
 800c346:	2010      	movs	r0, #16
 800c348:	f001 f8a6 	bl	800d498 <malloc>
 800c34c:	4602      	mov	r2, r0
 800c34e:	61e0      	str	r0, [r4, #28]
 800c350:	b920      	cbnz	r0, 800c35c <_Balloc+0x20>
 800c352:	216b      	movs	r1, #107	@ 0x6b
 800c354:	4b17      	ldr	r3, [pc, #92]	@ (800c3b4 <_Balloc+0x78>)
 800c356:	4818      	ldr	r0, [pc, #96]	@ (800c3b8 <_Balloc+0x7c>)
 800c358:	f001 f86c 	bl	800d434 <__assert_func>
 800c35c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c360:	6006      	str	r6, [r0, #0]
 800c362:	60c6      	str	r6, [r0, #12]
 800c364:	69e6      	ldr	r6, [r4, #28]
 800c366:	68f3      	ldr	r3, [r6, #12]
 800c368:	b183      	cbz	r3, 800c38c <_Balloc+0x50>
 800c36a:	69e3      	ldr	r3, [r4, #28]
 800c36c:	68db      	ldr	r3, [r3, #12]
 800c36e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c372:	b9b8      	cbnz	r0, 800c3a4 <_Balloc+0x68>
 800c374:	2101      	movs	r1, #1
 800c376:	fa01 f605 	lsl.w	r6, r1, r5
 800c37a:	1d72      	adds	r2, r6, #5
 800c37c:	4620      	mov	r0, r4
 800c37e:	0092      	lsls	r2, r2, #2
 800c380:	f001 f876 	bl	800d470 <_calloc_r>
 800c384:	b160      	cbz	r0, 800c3a0 <_Balloc+0x64>
 800c386:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c38a:	e00e      	b.n	800c3aa <_Balloc+0x6e>
 800c38c:	2221      	movs	r2, #33	@ 0x21
 800c38e:	2104      	movs	r1, #4
 800c390:	4620      	mov	r0, r4
 800c392:	f001 f86d 	bl	800d470 <_calloc_r>
 800c396:	69e3      	ldr	r3, [r4, #28]
 800c398:	60f0      	str	r0, [r6, #12]
 800c39a:	68db      	ldr	r3, [r3, #12]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d1e4      	bne.n	800c36a <_Balloc+0x2e>
 800c3a0:	2000      	movs	r0, #0
 800c3a2:	bd70      	pop	{r4, r5, r6, pc}
 800c3a4:	6802      	ldr	r2, [r0, #0]
 800c3a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c3b0:	e7f7      	b.n	800c3a2 <_Balloc+0x66>
 800c3b2:	bf00      	nop
 800c3b4:	0800de82 	.word	0x0800de82
 800c3b8:	0800de99 	.word	0x0800de99

0800c3bc <_Bfree>:
 800c3bc:	b570      	push	{r4, r5, r6, lr}
 800c3be:	69c6      	ldr	r6, [r0, #28]
 800c3c0:	4605      	mov	r5, r0
 800c3c2:	460c      	mov	r4, r1
 800c3c4:	b976      	cbnz	r6, 800c3e4 <_Bfree+0x28>
 800c3c6:	2010      	movs	r0, #16
 800c3c8:	f001 f866 	bl	800d498 <malloc>
 800c3cc:	4602      	mov	r2, r0
 800c3ce:	61e8      	str	r0, [r5, #28]
 800c3d0:	b920      	cbnz	r0, 800c3dc <_Bfree+0x20>
 800c3d2:	218f      	movs	r1, #143	@ 0x8f
 800c3d4:	4b08      	ldr	r3, [pc, #32]	@ (800c3f8 <_Bfree+0x3c>)
 800c3d6:	4809      	ldr	r0, [pc, #36]	@ (800c3fc <_Bfree+0x40>)
 800c3d8:	f001 f82c 	bl	800d434 <__assert_func>
 800c3dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c3e0:	6006      	str	r6, [r0, #0]
 800c3e2:	60c6      	str	r6, [r0, #12]
 800c3e4:	b13c      	cbz	r4, 800c3f6 <_Bfree+0x3a>
 800c3e6:	69eb      	ldr	r3, [r5, #28]
 800c3e8:	6862      	ldr	r2, [r4, #4]
 800c3ea:	68db      	ldr	r3, [r3, #12]
 800c3ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c3f0:	6021      	str	r1, [r4, #0]
 800c3f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c3f6:	bd70      	pop	{r4, r5, r6, pc}
 800c3f8:	0800de82 	.word	0x0800de82
 800c3fc:	0800de99 	.word	0x0800de99

0800c400 <__multadd>:
 800c400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c404:	4607      	mov	r7, r0
 800c406:	460c      	mov	r4, r1
 800c408:	461e      	mov	r6, r3
 800c40a:	2000      	movs	r0, #0
 800c40c:	690d      	ldr	r5, [r1, #16]
 800c40e:	f101 0c14 	add.w	ip, r1, #20
 800c412:	f8dc 3000 	ldr.w	r3, [ip]
 800c416:	3001      	adds	r0, #1
 800c418:	b299      	uxth	r1, r3
 800c41a:	fb02 6101 	mla	r1, r2, r1, r6
 800c41e:	0c1e      	lsrs	r6, r3, #16
 800c420:	0c0b      	lsrs	r3, r1, #16
 800c422:	fb02 3306 	mla	r3, r2, r6, r3
 800c426:	b289      	uxth	r1, r1
 800c428:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c42c:	4285      	cmp	r5, r0
 800c42e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c432:	f84c 1b04 	str.w	r1, [ip], #4
 800c436:	dcec      	bgt.n	800c412 <__multadd+0x12>
 800c438:	b30e      	cbz	r6, 800c47e <__multadd+0x7e>
 800c43a:	68a3      	ldr	r3, [r4, #8]
 800c43c:	42ab      	cmp	r3, r5
 800c43e:	dc19      	bgt.n	800c474 <__multadd+0x74>
 800c440:	6861      	ldr	r1, [r4, #4]
 800c442:	4638      	mov	r0, r7
 800c444:	3101      	adds	r1, #1
 800c446:	f7ff ff79 	bl	800c33c <_Balloc>
 800c44a:	4680      	mov	r8, r0
 800c44c:	b928      	cbnz	r0, 800c45a <__multadd+0x5a>
 800c44e:	4602      	mov	r2, r0
 800c450:	21ba      	movs	r1, #186	@ 0xba
 800c452:	4b0c      	ldr	r3, [pc, #48]	@ (800c484 <__multadd+0x84>)
 800c454:	480c      	ldr	r0, [pc, #48]	@ (800c488 <__multadd+0x88>)
 800c456:	f000 ffed 	bl	800d434 <__assert_func>
 800c45a:	6922      	ldr	r2, [r4, #16]
 800c45c:	f104 010c 	add.w	r1, r4, #12
 800c460:	3202      	adds	r2, #2
 800c462:	0092      	lsls	r2, r2, #2
 800c464:	300c      	adds	r0, #12
 800c466:	f7ff fb0e 	bl	800ba86 <memcpy>
 800c46a:	4621      	mov	r1, r4
 800c46c:	4638      	mov	r0, r7
 800c46e:	f7ff ffa5 	bl	800c3bc <_Bfree>
 800c472:	4644      	mov	r4, r8
 800c474:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c478:	3501      	adds	r5, #1
 800c47a:	615e      	str	r6, [r3, #20]
 800c47c:	6125      	str	r5, [r4, #16]
 800c47e:	4620      	mov	r0, r4
 800c480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c484:	0800de11 	.word	0x0800de11
 800c488:	0800de99 	.word	0x0800de99

0800c48c <__s2b>:
 800c48c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c490:	4615      	mov	r5, r2
 800c492:	2209      	movs	r2, #9
 800c494:	461f      	mov	r7, r3
 800c496:	3308      	adds	r3, #8
 800c498:	460c      	mov	r4, r1
 800c49a:	fb93 f3f2 	sdiv	r3, r3, r2
 800c49e:	4606      	mov	r6, r0
 800c4a0:	2201      	movs	r2, #1
 800c4a2:	2100      	movs	r1, #0
 800c4a4:	429a      	cmp	r2, r3
 800c4a6:	db09      	blt.n	800c4bc <__s2b+0x30>
 800c4a8:	4630      	mov	r0, r6
 800c4aa:	f7ff ff47 	bl	800c33c <_Balloc>
 800c4ae:	b940      	cbnz	r0, 800c4c2 <__s2b+0x36>
 800c4b0:	4602      	mov	r2, r0
 800c4b2:	21d3      	movs	r1, #211	@ 0xd3
 800c4b4:	4b18      	ldr	r3, [pc, #96]	@ (800c518 <__s2b+0x8c>)
 800c4b6:	4819      	ldr	r0, [pc, #100]	@ (800c51c <__s2b+0x90>)
 800c4b8:	f000 ffbc 	bl	800d434 <__assert_func>
 800c4bc:	0052      	lsls	r2, r2, #1
 800c4be:	3101      	adds	r1, #1
 800c4c0:	e7f0      	b.n	800c4a4 <__s2b+0x18>
 800c4c2:	9b08      	ldr	r3, [sp, #32]
 800c4c4:	2d09      	cmp	r5, #9
 800c4c6:	6143      	str	r3, [r0, #20]
 800c4c8:	f04f 0301 	mov.w	r3, #1
 800c4cc:	6103      	str	r3, [r0, #16]
 800c4ce:	dd16      	ble.n	800c4fe <__s2b+0x72>
 800c4d0:	f104 0909 	add.w	r9, r4, #9
 800c4d4:	46c8      	mov	r8, r9
 800c4d6:	442c      	add	r4, r5
 800c4d8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c4dc:	4601      	mov	r1, r0
 800c4de:	220a      	movs	r2, #10
 800c4e0:	4630      	mov	r0, r6
 800c4e2:	3b30      	subs	r3, #48	@ 0x30
 800c4e4:	f7ff ff8c 	bl	800c400 <__multadd>
 800c4e8:	45a0      	cmp	r8, r4
 800c4ea:	d1f5      	bne.n	800c4d8 <__s2b+0x4c>
 800c4ec:	f1a5 0408 	sub.w	r4, r5, #8
 800c4f0:	444c      	add	r4, r9
 800c4f2:	1b2d      	subs	r5, r5, r4
 800c4f4:	1963      	adds	r3, r4, r5
 800c4f6:	42bb      	cmp	r3, r7
 800c4f8:	db04      	blt.n	800c504 <__s2b+0x78>
 800c4fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4fe:	2509      	movs	r5, #9
 800c500:	340a      	adds	r4, #10
 800c502:	e7f6      	b.n	800c4f2 <__s2b+0x66>
 800c504:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c508:	4601      	mov	r1, r0
 800c50a:	220a      	movs	r2, #10
 800c50c:	4630      	mov	r0, r6
 800c50e:	3b30      	subs	r3, #48	@ 0x30
 800c510:	f7ff ff76 	bl	800c400 <__multadd>
 800c514:	e7ee      	b.n	800c4f4 <__s2b+0x68>
 800c516:	bf00      	nop
 800c518:	0800de11 	.word	0x0800de11
 800c51c:	0800de99 	.word	0x0800de99

0800c520 <__hi0bits>:
 800c520:	4603      	mov	r3, r0
 800c522:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c526:	bf3a      	itte	cc
 800c528:	0403      	lslcc	r3, r0, #16
 800c52a:	2010      	movcc	r0, #16
 800c52c:	2000      	movcs	r0, #0
 800c52e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c532:	bf3c      	itt	cc
 800c534:	021b      	lslcc	r3, r3, #8
 800c536:	3008      	addcc	r0, #8
 800c538:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c53c:	bf3c      	itt	cc
 800c53e:	011b      	lslcc	r3, r3, #4
 800c540:	3004      	addcc	r0, #4
 800c542:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c546:	bf3c      	itt	cc
 800c548:	009b      	lslcc	r3, r3, #2
 800c54a:	3002      	addcc	r0, #2
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	db05      	blt.n	800c55c <__hi0bits+0x3c>
 800c550:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c554:	f100 0001 	add.w	r0, r0, #1
 800c558:	bf08      	it	eq
 800c55a:	2020      	moveq	r0, #32
 800c55c:	4770      	bx	lr

0800c55e <__lo0bits>:
 800c55e:	6803      	ldr	r3, [r0, #0]
 800c560:	4602      	mov	r2, r0
 800c562:	f013 0007 	ands.w	r0, r3, #7
 800c566:	d00b      	beq.n	800c580 <__lo0bits+0x22>
 800c568:	07d9      	lsls	r1, r3, #31
 800c56a:	d421      	bmi.n	800c5b0 <__lo0bits+0x52>
 800c56c:	0798      	lsls	r0, r3, #30
 800c56e:	bf49      	itett	mi
 800c570:	085b      	lsrmi	r3, r3, #1
 800c572:	089b      	lsrpl	r3, r3, #2
 800c574:	2001      	movmi	r0, #1
 800c576:	6013      	strmi	r3, [r2, #0]
 800c578:	bf5c      	itt	pl
 800c57a:	2002      	movpl	r0, #2
 800c57c:	6013      	strpl	r3, [r2, #0]
 800c57e:	4770      	bx	lr
 800c580:	b299      	uxth	r1, r3
 800c582:	b909      	cbnz	r1, 800c588 <__lo0bits+0x2a>
 800c584:	2010      	movs	r0, #16
 800c586:	0c1b      	lsrs	r3, r3, #16
 800c588:	b2d9      	uxtb	r1, r3
 800c58a:	b909      	cbnz	r1, 800c590 <__lo0bits+0x32>
 800c58c:	3008      	adds	r0, #8
 800c58e:	0a1b      	lsrs	r3, r3, #8
 800c590:	0719      	lsls	r1, r3, #28
 800c592:	bf04      	itt	eq
 800c594:	091b      	lsreq	r3, r3, #4
 800c596:	3004      	addeq	r0, #4
 800c598:	0799      	lsls	r1, r3, #30
 800c59a:	bf04      	itt	eq
 800c59c:	089b      	lsreq	r3, r3, #2
 800c59e:	3002      	addeq	r0, #2
 800c5a0:	07d9      	lsls	r1, r3, #31
 800c5a2:	d403      	bmi.n	800c5ac <__lo0bits+0x4e>
 800c5a4:	085b      	lsrs	r3, r3, #1
 800c5a6:	f100 0001 	add.w	r0, r0, #1
 800c5aa:	d003      	beq.n	800c5b4 <__lo0bits+0x56>
 800c5ac:	6013      	str	r3, [r2, #0]
 800c5ae:	4770      	bx	lr
 800c5b0:	2000      	movs	r0, #0
 800c5b2:	4770      	bx	lr
 800c5b4:	2020      	movs	r0, #32
 800c5b6:	4770      	bx	lr

0800c5b8 <__i2b>:
 800c5b8:	b510      	push	{r4, lr}
 800c5ba:	460c      	mov	r4, r1
 800c5bc:	2101      	movs	r1, #1
 800c5be:	f7ff febd 	bl	800c33c <_Balloc>
 800c5c2:	4602      	mov	r2, r0
 800c5c4:	b928      	cbnz	r0, 800c5d2 <__i2b+0x1a>
 800c5c6:	f240 1145 	movw	r1, #325	@ 0x145
 800c5ca:	4b04      	ldr	r3, [pc, #16]	@ (800c5dc <__i2b+0x24>)
 800c5cc:	4804      	ldr	r0, [pc, #16]	@ (800c5e0 <__i2b+0x28>)
 800c5ce:	f000 ff31 	bl	800d434 <__assert_func>
 800c5d2:	2301      	movs	r3, #1
 800c5d4:	6144      	str	r4, [r0, #20]
 800c5d6:	6103      	str	r3, [r0, #16]
 800c5d8:	bd10      	pop	{r4, pc}
 800c5da:	bf00      	nop
 800c5dc:	0800de11 	.word	0x0800de11
 800c5e0:	0800de99 	.word	0x0800de99

0800c5e4 <__multiply>:
 800c5e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5e8:	4614      	mov	r4, r2
 800c5ea:	690a      	ldr	r2, [r1, #16]
 800c5ec:	6923      	ldr	r3, [r4, #16]
 800c5ee:	460f      	mov	r7, r1
 800c5f0:	429a      	cmp	r2, r3
 800c5f2:	bfa2      	ittt	ge
 800c5f4:	4623      	movge	r3, r4
 800c5f6:	460c      	movge	r4, r1
 800c5f8:	461f      	movge	r7, r3
 800c5fa:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c5fe:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c602:	68a3      	ldr	r3, [r4, #8]
 800c604:	6861      	ldr	r1, [r4, #4]
 800c606:	eb0a 0609 	add.w	r6, sl, r9
 800c60a:	42b3      	cmp	r3, r6
 800c60c:	b085      	sub	sp, #20
 800c60e:	bfb8      	it	lt
 800c610:	3101      	addlt	r1, #1
 800c612:	f7ff fe93 	bl	800c33c <_Balloc>
 800c616:	b930      	cbnz	r0, 800c626 <__multiply+0x42>
 800c618:	4602      	mov	r2, r0
 800c61a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c61e:	4b43      	ldr	r3, [pc, #268]	@ (800c72c <__multiply+0x148>)
 800c620:	4843      	ldr	r0, [pc, #268]	@ (800c730 <__multiply+0x14c>)
 800c622:	f000 ff07 	bl	800d434 <__assert_func>
 800c626:	f100 0514 	add.w	r5, r0, #20
 800c62a:	462b      	mov	r3, r5
 800c62c:	2200      	movs	r2, #0
 800c62e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c632:	4543      	cmp	r3, r8
 800c634:	d321      	bcc.n	800c67a <__multiply+0x96>
 800c636:	f107 0114 	add.w	r1, r7, #20
 800c63a:	f104 0214 	add.w	r2, r4, #20
 800c63e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c642:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c646:	9302      	str	r3, [sp, #8]
 800c648:	1b13      	subs	r3, r2, r4
 800c64a:	3b15      	subs	r3, #21
 800c64c:	f023 0303 	bic.w	r3, r3, #3
 800c650:	3304      	adds	r3, #4
 800c652:	f104 0715 	add.w	r7, r4, #21
 800c656:	42ba      	cmp	r2, r7
 800c658:	bf38      	it	cc
 800c65a:	2304      	movcc	r3, #4
 800c65c:	9301      	str	r3, [sp, #4]
 800c65e:	9b02      	ldr	r3, [sp, #8]
 800c660:	9103      	str	r1, [sp, #12]
 800c662:	428b      	cmp	r3, r1
 800c664:	d80c      	bhi.n	800c680 <__multiply+0x9c>
 800c666:	2e00      	cmp	r6, #0
 800c668:	dd03      	ble.n	800c672 <__multiply+0x8e>
 800c66a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d05a      	beq.n	800c728 <__multiply+0x144>
 800c672:	6106      	str	r6, [r0, #16]
 800c674:	b005      	add	sp, #20
 800c676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c67a:	f843 2b04 	str.w	r2, [r3], #4
 800c67e:	e7d8      	b.n	800c632 <__multiply+0x4e>
 800c680:	f8b1 a000 	ldrh.w	sl, [r1]
 800c684:	f1ba 0f00 	cmp.w	sl, #0
 800c688:	d023      	beq.n	800c6d2 <__multiply+0xee>
 800c68a:	46a9      	mov	r9, r5
 800c68c:	f04f 0c00 	mov.w	ip, #0
 800c690:	f104 0e14 	add.w	lr, r4, #20
 800c694:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c698:	f8d9 3000 	ldr.w	r3, [r9]
 800c69c:	fa1f fb87 	uxth.w	fp, r7
 800c6a0:	b29b      	uxth	r3, r3
 800c6a2:	fb0a 330b 	mla	r3, sl, fp, r3
 800c6a6:	4463      	add	r3, ip
 800c6a8:	f8d9 c000 	ldr.w	ip, [r9]
 800c6ac:	0c3f      	lsrs	r7, r7, #16
 800c6ae:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800c6b2:	fb0a c707 	mla	r7, sl, r7, ip
 800c6b6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c6ba:	b29b      	uxth	r3, r3
 800c6bc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c6c0:	4572      	cmp	r2, lr
 800c6c2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c6c6:	f849 3b04 	str.w	r3, [r9], #4
 800c6ca:	d8e3      	bhi.n	800c694 <__multiply+0xb0>
 800c6cc:	9b01      	ldr	r3, [sp, #4]
 800c6ce:	f845 c003 	str.w	ip, [r5, r3]
 800c6d2:	9b03      	ldr	r3, [sp, #12]
 800c6d4:	3104      	adds	r1, #4
 800c6d6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c6da:	f1b9 0f00 	cmp.w	r9, #0
 800c6de:	d021      	beq.n	800c724 <__multiply+0x140>
 800c6e0:	46ae      	mov	lr, r5
 800c6e2:	f04f 0a00 	mov.w	sl, #0
 800c6e6:	682b      	ldr	r3, [r5, #0]
 800c6e8:	f104 0c14 	add.w	ip, r4, #20
 800c6ec:	f8bc b000 	ldrh.w	fp, [ip]
 800c6f0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c6f4:	b29b      	uxth	r3, r3
 800c6f6:	fb09 770b 	mla	r7, r9, fp, r7
 800c6fa:	4457      	add	r7, sl
 800c6fc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c700:	f84e 3b04 	str.w	r3, [lr], #4
 800c704:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c708:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c70c:	f8be 3000 	ldrh.w	r3, [lr]
 800c710:	4562      	cmp	r2, ip
 800c712:	fb09 330a 	mla	r3, r9, sl, r3
 800c716:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c71a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c71e:	d8e5      	bhi.n	800c6ec <__multiply+0x108>
 800c720:	9f01      	ldr	r7, [sp, #4]
 800c722:	51eb      	str	r3, [r5, r7]
 800c724:	3504      	adds	r5, #4
 800c726:	e79a      	b.n	800c65e <__multiply+0x7a>
 800c728:	3e01      	subs	r6, #1
 800c72a:	e79c      	b.n	800c666 <__multiply+0x82>
 800c72c:	0800de11 	.word	0x0800de11
 800c730:	0800de99 	.word	0x0800de99

0800c734 <__pow5mult>:
 800c734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c738:	4615      	mov	r5, r2
 800c73a:	f012 0203 	ands.w	r2, r2, #3
 800c73e:	4607      	mov	r7, r0
 800c740:	460e      	mov	r6, r1
 800c742:	d007      	beq.n	800c754 <__pow5mult+0x20>
 800c744:	4c25      	ldr	r4, [pc, #148]	@ (800c7dc <__pow5mult+0xa8>)
 800c746:	3a01      	subs	r2, #1
 800c748:	2300      	movs	r3, #0
 800c74a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c74e:	f7ff fe57 	bl	800c400 <__multadd>
 800c752:	4606      	mov	r6, r0
 800c754:	10ad      	asrs	r5, r5, #2
 800c756:	d03d      	beq.n	800c7d4 <__pow5mult+0xa0>
 800c758:	69fc      	ldr	r4, [r7, #28]
 800c75a:	b97c      	cbnz	r4, 800c77c <__pow5mult+0x48>
 800c75c:	2010      	movs	r0, #16
 800c75e:	f000 fe9b 	bl	800d498 <malloc>
 800c762:	4602      	mov	r2, r0
 800c764:	61f8      	str	r0, [r7, #28]
 800c766:	b928      	cbnz	r0, 800c774 <__pow5mult+0x40>
 800c768:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c76c:	4b1c      	ldr	r3, [pc, #112]	@ (800c7e0 <__pow5mult+0xac>)
 800c76e:	481d      	ldr	r0, [pc, #116]	@ (800c7e4 <__pow5mult+0xb0>)
 800c770:	f000 fe60 	bl	800d434 <__assert_func>
 800c774:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c778:	6004      	str	r4, [r0, #0]
 800c77a:	60c4      	str	r4, [r0, #12]
 800c77c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c780:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c784:	b94c      	cbnz	r4, 800c79a <__pow5mult+0x66>
 800c786:	f240 2171 	movw	r1, #625	@ 0x271
 800c78a:	4638      	mov	r0, r7
 800c78c:	f7ff ff14 	bl	800c5b8 <__i2b>
 800c790:	2300      	movs	r3, #0
 800c792:	4604      	mov	r4, r0
 800c794:	f8c8 0008 	str.w	r0, [r8, #8]
 800c798:	6003      	str	r3, [r0, #0]
 800c79a:	f04f 0900 	mov.w	r9, #0
 800c79e:	07eb      	lsls	r3, r5, #31
 800c7a0:	d50a      	bpl.n	800c7b8 <__pow5mult+0x84>
 800c7a2:	4631      	mov	r1, r6
 800c7a4:	4622      	mov	r2, r4
 800c7a6:	4638      	mov	r0, r7
 800c7a8:	f7ff ff1c 	bl	800c5e4 <__multiply>
 800c7ac:	4680      	mov	r8, r0
 800c7ae:	4631      	mov	r1, r6
 800c7b0:	4638      	mov	r0, r7
 800c7b2:	f7ff fe03 	bl	800c3bc <_Bfree>
 800c7b6:	4646      	mov	r6, r8
 800c7b8:	106d      	asrs	r5, r5, #1
 800c7ba:	d00b      	beq.n	800c7d4 <__pow5mult+0xa0>
 800c7bc:	6820      	ldr	r0, [r4, #0]
 800c7be:	b938      	cbnz	r0, 800c7d0 <__pow5mult+0x9c>
 800c7c0:	4622      	mov	r2, r4
 800c7c2:	4621      	mov	r1, r4
 800c7c4:	4638      	mov	r0, r7
 800c7c6:	f7ff ff0d 	bl	800c5e4 <__multiply>
 800c7ca:	6020      	str	r0, [r4, #0]
 800c7cc:	f8c0 9000 	str.w	r9, [r0]
 800c7d0:	4604      	mov	r4, r0
 800c7d2:	e7e4      	b.n	800c79e <__pow5mult+0x6a>
 800c7d4:	4630      	mov	r0, r6
 800c7d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7da:	bf00      	nop
 800c7dc:	0800def4 	.word	0x0800def4
 800c7e0:	0800de82 	.word	0x0800de82
 800c7e4:	0800de99 	.word	0x0800de99

0800c7e8 <__lshift>:
 800c7e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7ec:	460c      	mov	r4, r1
 800c7ee:	4607      	mov	r7, r0
 800c7f0:	4691      	mov	r9, r2
 800c7f2:	6923      	ldr	r3, [r4, #16]
 800c7f4:	6849      	ldr	r1, [r1, #4]
 800c7f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c7fa:	68a3      	ldr	r3, [r4, #8]
 800c7fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c800:	f108 0601 	add.w	r6, r8, #1
 800c804:	42b3      	cmp	r3, r6
 800c806:	db0b      	blt.n	800c820 <__lshift+0x38>
 800c808:	4638      	mov	r0, r7
 800c80a:	f7ff fd97 	bl	800c33c <_Balloc>
 800c80e:	4605      	mov	r5, r0
 800c810:	b948      	cbnz	r0, 800c826 <__lshift+0x3e>
 800c812:	4602      	mov	r2, r0
 800c814:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c818:	4b27      	ldr	r3, [pc, #156]	@ (800c8b8 <__lshift+0xd0>)
 800c81a:	4828      	ldr	r0, [pc, #160]	@ (800c8bc <__lshift+0xd4>)
 800c81c:	f000 fe0a 	bl	800d434 <__assert_func>
 800c820:	3101      	adds	r1, #1
 800c822:	005b      	lsls	r3, r3, #1
 800c824:	e7ee      	b.n	800c804 <__lshift+0x1c>
 800c826:	2300      	movs	r3, #0
 800c828:	f100 0114 	add.w	r1, r0, #20
 800c82c:	f100 0210 	add.w	r2, r0, #16
 800c830:	4618      	mov	r0, r3
 800c832:	4553      	cmp	r3, sl
 800c834:	db33      	blt.n	800c89e <__lshift+0xb6>
 800c836:	6920      	ldr	r0, [r4, #16]
 800c838:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c83c:	f104 0314 	add.w	r3, r4, #20
 800c840:	f019 091f 	ands.w	r9, r9, #31
 800c844:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c848:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c84c:	d02b      	beq.n	800c8a6 <__lshift+0xbe>
 800c84e:	468a      	mov	sl, r1
 800c850:	2200      	movs	r2, #0
 800c852:	f1c9 0e20 	rsb	lr, r9, #32
 800c856:	6818      	ldr	r0, [r3, #0]
 800c858:	fa00 f009 	lsl.w	r0, r0, r9
 800c85c:	4310      	orrs	r0, r2
 800c85e:	f84a 0b04 	str.w	r0, [sl], #4
 800c862:	f853 2b04 	ldr.w	r2, [r3], #4
 800c866:	459c      	cmp	ip, r3
 800c868:	fa22 f20e 	lsr.w	r2, r2, lr
 800c86c:	d8f3      	bhi.n	800c856 <__lshift+0x6e>
 800c86e:	ebac 0304 	sub.w	r3, ip, r4
 800c872:	3b15      	subs	r3, #21
 800c874:	f023 0303 	bic.w	r3, r3, #3
 800c878:	3304      	adds	r3, #4
 800c87a:	f104 0015 	add.w	r0, r4, #21
 800c87e:	4584      	cmp	ip, r0
 800c880:	bf38      	it	cc
 800c882:	2304      	movcc	r3, #4
 800c884:	50ca      	str	r2, [r1, r3]
 800c886:	b10a      	cbz	r2, 800c88c <__lshift+0xa4>
 800c888:	f108 0602 	add.w	r6, r8, #2
 800c88c:	3e01      	subs	r6, #1
 800c88e:	4638      	mov	r0, r7
 800c890:	4621      	mov	r1, r4
 800c892:	612e      	str	r6, [r5, #16]
 800c894:	f7ff fd92 	bl	800c3bc <_Bfree>
 800c898:	4628      	mov	r0, r5
 800c89a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c89e:	f842 0f04 	str.w	r0, [r2, #4]!
 800c8a2:	3301      	adds	r3, #1
 800c8a4:	e7c5      	b.n	800c832 <__lshift+0x4a>
 800c8a6:	3904      	subs	r1, #4
 800c8a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8ac:	459c      	cmp	ip, r3
 800c8ae:	f841 2f04 	str.w	r2, [r1, #4]!
 800c8b2:	d8f9      	bhi.n	800c8a8 <__lshift+0xc0>
 800c8b4:	e7ea      	b.n	800c88c <__lshift+0xa4>
 800c8b6:	bf00      	nop
 800c8b8:	0800de11 	.word	0x0800de11
 800c8bc:	0800de99 	.word	0x0800de99

0800c8c0 <__mcmp>:
 800c8c0:	4603      	mov	r3, r0
 800c8c2:	690a      	ldr	r2, [r1, #16]
 800c8c4:	6900      	ldr	r0, [r0, #16]
 800c8c6:	b530      	push	{r4, r5, lr}
 800c8c8:	1a80      	subs	r0, r0, r2
 800c8ca:	d10e      	bne.n	800c8ea <__mcmp+0x2a>
 800c8cc:	3314      	adds	r3, #20
 800c8ce:	3114      	adds	r1, #20
 800c8d0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c8d4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c8d8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c8dc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c8e0:	4295      	cmp	r5, r2
 800c8e2:	d003      	beq.n	800c8ec <__mcmp+0x2c>
 800c8e4:	d205      	bcs.n	800c8f2 <__mcmp+0x32>
 800c8e6:	f04f 30ff 	mov.w	r0, #4294967295
 800c8ea:	bd30      	pop	{r4, r5, pc}
 800c8ec:	42a3      	cmp	r3, r4
 800c8ee:	d3f3      	bcc.n	800c8d8 <__mcmp+0x18>
 800c8f0:	e7fb      	b.n	800c8ea <__mcmp+0x2a>
 800c8f2:	2001      	movs	r0, #1
 800c8f4:	e7f9      	b.n	800c8ea <__mcmp+0x2a>
	...

0800c8f8 <__mdiff>:
 800c8f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8fc:	4689      	mov	r9, r1
 800c8fe:	4606      	mov	r6, r0
 800c900:	4611      	mov	r1, r2
 800c902:	4648      	mov	r0, r9
 800c904:	4614      	mov	r4, r2
 800c906:	f7ff ffdb 	bl	800c8c0 <__mcmp>
 800c90a:	1e05      	subs	r5, r0, #0
 800c90c:	d112      	bne.n	800c934 <__mdiff+0x3c>
 800c90e:	4629      	mov	r1, r5
 800c910:	4630      	mov	r0, r6
 800c912:	f7ff fd13 	bl	800c33c <_Balloc>
 800c916:	4602      	mov	r2, r0
 800c918:	b928      	cbnz	r0, 800c926 <__mdiff+0x2e>
 800c91a:	f240 2137 	movw	r1, #567	@ 0x237
 800c91e:	4b3e      	ldr	r3, [pc, #248]	@ (800ca18 <__mdiff+0x120>)
 800c920:	483e      	ldr	r0, [pc, #248]	@ (800ca1c <__mdiff+0x124>)
 800c922:	f000 fd87 	bl	800d434 <__assert_func>
 800c926:	2301      	movs	r3, #1
 800c928:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c92c:	4610      	mov	r0, r2
 800c92e:	b003      	add	sp, #12
 800c930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c934:	bfbc      	itt	lt
 800c936:	464b      	movlt	r3, r9
 800c938:	46a1      	movlt	r9, r4
 800c93a:	4630      	mov	r0, r6
 800c93c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c940:	bfba      	itte	lt
 800c942:	461c      	movlt	r4, r3
 800c944:	2501      	movlt	r5, #1
 800c946:	2500      	movge	r5, #0
 800c948:	f7ff fcf8 	bl	800c33c <_Balloc>
 800c94c:	4602      	mov	r2, r0
 800c94e:	b918      	cbnz	r0, 800c958 <__mdiff+0x60>
 800c950:	f240 2145 	movw	r1, #581	@ 0x245
 800c954:	4b30      	ldr	r3, [pc, #192]	@ (800ca18 <__mdiff+0x120>)
 800c956:	e7e3      	b.n	800c920 <__mdiff+0x28>
 800c958:	f100 0b14 	add.w	fp, r0, #20
 800c95c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c960:	f109 0310 	add.w	r3, r9, #16
 800c964:	60c5      	str	r5, [r0, #12]
 800c966:	f04f 0c00 	mov.w	ip, #0
 800c96a:	f109 0514 	add.w	r5, r9, #20
 800c96e:	46d9      	mov	r9, fp
 800c970:	6926      	ldr	r6, [r4, #16]
 800c972:	f104 0e14 	add.w	lr, r4, #20
 800c976:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c97a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c97e:	9301      	str	r3, [sp, #4]
 800c980:	9b01      	ldr	r3, [sp, #4]
 800c982:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c986:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c98a:	b281      	uxth	r1, r0
 800c98c:	9301      	str	r3, [sp, #4]
 800c98e:	fa1f f38a 	uxth.w	r3, sl
 800c992:	1a5b      	subs	r3, r3, r1
 800c994:	0c00      	lsrs	r0, r0, #16
 800c996:	4463      	add	r3, ip
 800c998:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c99c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c9a0:	b29b      	uxth	r3, r3
 800c9a2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c9a6:	4576      	cmp	r6, lr
 800c9a8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c9ac:	f849 3b04 	str.w	r3, [r9], #4
 800c9b0:	d8e6      	bhi.n	800c980 <__mdiff+0x88>
 800c9b2:	1b33      	subs	r3, r6, r4
 800c9b4:	3b15      	subs	r3, #21
 800c9b6:	f023 0303 	bic.w	r3, r3, #3
 800c9ba:	3415      	adds	r4, #21
 800c9bc:	3304      	adds	r3, #4
 800c9be:	42a6      	cmp	r6, r4
 800c9c0:	bf38      	it	cc
 800c9c2:	2304      	movcc	r3, #4
 800c9c4:	441d      	add	r5, r3
 800c9c6:	445b      	add	r3, fp
 800c9c8:	461e      	mov	r6, r3
 800c9ca:	462c      	mov	r4, r5
 800c9cc:	4544      	cmp	r4, r8
 800c9ce:	d30e      	bcc.n	800c9ee <__mdiff+0xf6>
 800c9d0:	f108 0103 	add.w	r1, r8, #3
 800c9d4:	1b49      	subs	r1, r1, r5
 800c9d6:	f021 0103 	bic.w	r1, r1, #3
 800c9da:	3d03      	subs	r5, #3
 800c9dc:	45a8      	cmp	r8, r5
 800c9de:	bf38      	it	cc
 800c9e0:	2100      	movcc	r1, #0
 800c9e2:	440b      	add	r3, r1
 800c9e4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c9e8:	b199      	cbz	r1, 800ca12 <__mdiff+0x11a>
 800c9ea:	6117      	str	r7, [r2, #16]
 800c9ec:	e79e      	b.n	800c92c <__mdiff+0x34>
 800c9ee:	46e6      	mov	lr, ip
 800c9f0:	f854 1b04 	ldr.w	r1, [r4], #4
 800c9f4:	fa1f fc81 	uxth.w	ip, r1
 800c9f8:	44f4      	add	ip, lr
 800c9fa:	0c08      	lsrs	r0, r1, #16
 800c9fc:	4471      	add	r1, lr
 800c9fe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ca02:	b289      	uxth	r1, r1
 800ca04:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ca08:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ca0c:	f846 1b04 	str.w	r1, [r6], #4
 800ca10:	e7dc      	b.n	800c9cc <__mdiff+0xd4>
 800ca12:	3f01      	subs	r7, #1
 800ca14:	e7e6      	b.n	800c9e4 <__mdiff+0xec>
 800ca16:	bf00      	nop
 800ca18:	0800de11 	.word	0x0800de11
 800ca1c:	0800de99 	.word	0x0800de99

0800ca20 <__ulp>:
 800ca20:	4b0e      	ldr	r3, [pc, #56]	@ (800ca5c <__ulp+0x3c>)
 800ca22:	400b      	ands	r3, r1
 800ca24:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	dc08      	bgt.n	800ca3e <__ulp+0x1e>
 800ca2c:	425b      	negs	r3, r3
 800ca2e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800ca32:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ca36:	da04      	bge.n	800ca42 <__ulp+0x22>
 800ca38:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ca3c:	4113      	asrs	r3, r2
 800ca3e:	2200      	movs	r2, #0
 800ca40:	e008      	b.n	800ca54 <__ulp+0x34>
 800ca42:	f1a2 0314 	sub.w	r3, r2, #20
 800ca46:	2b1e      	cmp	r3, #30
 800ca48:	bfd6      	itet	le
 800ca4a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800ca4e:	2201      	movgt	r2, #1
 800ca50:	40da      	lsrle	r2, r3
 800ca52:	2300      	movs	r3, #0
 800ca54:	4619      	mov	r1, r3
 800ca56:	4610      	mov	r0, r2
 800ca58:	4770      	bx	lr
 800ca5a:	bf00      	nop
 800ca5c:	7ff00000 	.word	0x7ff00000

0800ca60 <__b2d>:
 800ca60:	6902      	ldr	r2, [r0, #16]
 800ca62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca64:	f100 0614 	add.w	r6, r0, #20
 800ca68:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800ca6c:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800ca70:	4f1e      	ldr	r7, [pc, #120]	@ (800caec <__b2d+0x8c>)
 800ca72:	4620      	mov	r0, r4
 800ca74:	f7ff fd54 	bl	800c520 <__hi0bits>
 800ca78:	4603      	mov	r3, r0
 800ca7a:	f1c0 0020 	rsb	r0, r0, #32
 800ca7e:	2b0a      	cmp	r3, #10
 800ca80:	f1a2 0504 	sub.w	r5, r2, #4
 800ca84:	6008      	str	r0, [r1, #0]
 800ca86:	dc12      	bgt.n	800caae <__b2d+0x4e>
 800ca88:	42ae      	cmp	r6, r5
 800ca8a:	bf2c      	ite	cs
 800ca8c:	2200      	movcs	r2, #0
 800ca8e:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800ca92:	f1c3 0c0b 	rsb	ip, r3, #11
 800ca96:	3315      	adds	r3, #21
 800ca98:	fa24 fe0c 	lsr.w	lr, r4, ip
 800ca9c:	fa04 f303 	lsl.w	r3, r4, r3
 800caa0:	fa22 f20c 	lsr.w	r2, r2, ip
 800caa4:	ea4e 0107 	orr.w	r1, lr, r7
 800caa8:	431a      	orrs	r2, r3
 800caaa:	4610      	mov	r0, r2
 800caac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800caae:	42ae      	cmp	r6, r5
 800cab0:	bf36      	itet	cc
 800cab2:	f1a2 0508 	subcc.w	r5, r2, #8
 800cab6:	2200      	movcs	r2, #0
 800cab8:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800cabc:	3b0b      	subs	r3, #11
 800cabe:	d012      	beq.n	800cae6 <__b2d+0x86>
 800cac0:	f1c3 0720 	rsb	r7, r3, #32
 800cac4:	fa22 f107 	lsr.w	r1, r2, r7
 800cac8:	409c      	lsls	r4, r3
 800caca:	430c      	orrs	r4, r1
 800cacc:	42b5      	cmp	r5, r6
 800cace:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800cad2:	bf94      	ite	ls
 800cad4:	2400      	movls	r4, #0
 800cad6:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800cada:	409a      	lsls	r2, r3
 800cadc:	40fc      	lsrs	r4, r7
 800cade:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800cae2:	4322      	orrs	r2, r4
 800cae4:	e7e1      	b.n	800caaa <__b2d+0x4a>
 800cae6:	ea44 0107 	orr.w	r1, r4, r7
 800caea:	e7de      	b.n	800caaa <__b2d+0x4a>
 800caec:	3ff00000 	.word	0x3ff00000

0800caf0 <__d2b>:
 800caf0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800caf4:	2101      	movs	r1, #1
 800caf6:	4690      	mov	r8, r2
 800caf8:	4699      	mov	r9, r3
 800cafa:	9e08      	ldr	r6, [sp, #32]
 800cafc:	f7ff fc1e 	bl	800c33c <_Balloc>
 800cb00:	4604      	mov	r4, r0
 800cb02:	b930      	cbnz	r0, 800cb12 <__d2b+0x22>
 800cb04:	4602      	mov	r2, r0
 800cb06:	f240 310f 	movw	r1, #783	@ 0x30f
 800cb0a:	4b23      	ldr	r3, [pc, #140]	@ (800cb98 <__d2b+0xa8>)
 800cb0c:	4823      	ldr	r0, [pc, #140]	@ (800cb9c <__d2b+0xac>)
 800cb0e:	f000 fc91 	bl	800d434 <__assert_func>
 800cb12:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cb16:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cb1a:	b10d      	cbz	r5, 800cb20 <__d2b+0x30>
 800cb1c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cb20:	9301      	str	r3, [sp, #4]
 800cb22:	f1b8 0300 	subs.w	r3, r8, #0
 800cb26:	d024      	beq.n	800cb72 <__d2b+0x82>
 800cb28:	4668      	mov	r0, sp
 800cb2a:	9300      	str	r3, [sp, #0]
 800cb2c:	f7ff fd17 	bl	800c55e <__lo0bits>
 800cb30:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cb34:	b1d8      	cbz	r0, 800cb6e <__d2b+0x7e>
 800cb36:	f1c0 0320 	rsb	r3, r0, #32
 800cb3a:	fa02 f303 	lsl.w	r3, r2, r3
 800cb3e:	430b      	orrs	r3, r1
 800cb40:	40c2      	lsrs	r2, r0
 800cb42:	6163      	str	r3, [r4, #20]
 800cb44:	9201      	str	r2, [sp, #4]
 800cb46:	9b01      	ldr	r3, [sp, #4]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	bf0c      	ite	eq
 800cb4c:	2201      	moveq	r2, #1
 800cb4e:	2202      	movne	r2, #2
 800cb50:	61a3      	str	r3, [r4, #24]
 800cb52:	6122      	str	r2, [r4, #16]
 800cb54:	b1ad      	cbz	r5, 800cb82 <__d2b+0x92>
 800cb56:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800cb5a:	4405      	add	r5, r0
 800cb5c:	6035      	str	r5, [r6, #0]
 800cb5e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800cb62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb64:	6018      	str	r0, [r3, #0]
 800cb66:	4620      	mov	r0, r4
 800cb68:	b002      	add	sp, #8
 800cb6a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800cb6e:	6161      	str	r1, [r4, #20]
 800cb70:	e7e9      	b.n	800cb46 <__d2b+0x56>
 800cb72:	a801      	add	r0, sp, #4
 800cb74:	f7ff fcf3 	bl	800c55e <__lo0bits>
 800cb78:	9b01      	ldr	r3, [sp, #4]
 800cb7a:	2201      	movs	r2, #1
 800cb7c:	6163      	str	r3, [r4, #20]
 800cb7e:	3020      	adds	r0, #32
 800cb80:	e7e7      	b.n	800cb52 <__d2b+0x62>
 800cb82:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800cb86:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cb8a:	6030      	str	r0, [r6, #0]
 800cb8c:	6918      	ldr	r0, [r3, #16]
 800cb8e:	f7ff fcc7 	bl	800c520 <__hi0bits>
 800cb92:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cb96:	e7e4      	b.n	800cb62 <__d2b+0x72>
 800cb98:	0800de11 	.word	0x0800de11
 800cb9c:	0800de99 	.word	0x0800de99

0800cba0 <__ratio>:
 800cba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cba4:	b085      	sub	sp, #20
 800cba6:	e9cd 1000 	strd	r1, r0, [sp]
 800cbaa:	a902      	add	r1, sp, #8
 800cbac:	f7ff ff58 	bl	800ca60 <__b2d>
 800cbb0:	468b      	mov	fp, r1
 800cbb2:	4606      	mov	r6, r0
 800cbb4:	460f      	mov	r7, r1
 800cbb6:	9800      	ldr	r0, [sp, #0]
 800cbb8:	a903      	add	r1, sp, #12
 800cbba:	f7ff ff51 	bl	800ca60 <__b2d>
 800cbbe:	460d      	mov	r5, r1
 800cbc0:	9b01      	ldr	r3, [sp, #4]
 800cbc2:	4689      	mov	r9, r1
 800cbc4:	6919      	ldr	r1, [r3, #16]
 800cbc6:	9b00      	ldr	r3, [sp, #0]
 800cbc8:	4604      	mov	r4, r0
 800cbca:	691b      	ldr	r3, [r3, #16]
 800cbcc:	4630      	mov	r0, r6
 800cbce:	1ac9      	subs	r1, r1, r3
 800cbd0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800cbd4:	1a9b      	subs	r3, r3, r2
 800cbd6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	bfcd      	iteet	gt
 800cbde:	463a      	movgt	r2, r7
 800cbe0:	462a      	movle	r2, r5
 800cbe2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cbe6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800cbea:	bfd8      	it	le
 800cbec:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800cbf0:	464b      	mov	r3, r9
 800cbf2:	4622      	mov	r2, r4
 800cbf4:	4659      	mov	r1, fp
 800cbf6:	f7f3 fda3 	bl	8000740 <__aeabi_ddiv>
 800cbfa:	b005      	add	sp, #20
 800cbfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cc00 <__copybits>:
 800cc00:	3901      	subs	r1, #1
 800cc02:	b570      	push	{r4, r5, r6, lr}
 800cc04:	1149      	asrs	r1, r1, #5
 800cc06:	6914      	ldr	r4, [r2, #16]
 800cc08:	3101      	adds	r1, #1
 800cc0a:	f102 0314 	add.w	r3, r2, #20
 800cc0e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cc12:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cc16:	1f05      	subs	r5, r0, #4
 800cc18:	42a3      	cmp	r3, r4
 800cc1a:	d30c      	bcc.n	800cc36 <__copybits+0x36>
 800cc1c:	1aa3      	subs	r3, r4, r2
 800cc1e:	3b11      	subs	r3, #17
 800cc20:	f023 0303 	bic.w	r3, r3, #3
 800cc24:	3211      	adds	r2, #17
 800cc26:	42a2      	cmp	r2, r4
 800cc28:	bf88      	it	hi
 800cc2a:	2300      	movhi	r3, #0
 800cc2c:	4418      	add	r0, r3
 800cc2e:	2300      	movs	r3, #0
 800cc30:	4288      	cmp	r0, r1
 800cc32:	d305      	bcc.n	800cc40 <__copybits+0x40>
 800cc34:	bd70      	pop	{r4, r5, r6, pc}
 800cc36:	f853 6b04 	ldr.w	r6, [r3], #4
 800cc3a:	f845 6f04 	str.w	r6, [r5, #4]!
 800cc3e:	e7eb      	b.n	800cc18 <__copybits+0x18>
 800cc40:	f840 3b04 	str.w	r3, [r0], #4
 800cc44:	e7f4      	b.n	800cc30 <__copybits+0x30>

0800cc46 <__any_on>:
 800cc46:	f100 0214 	add.w	r2, r0, #20
 800cc4a:	6900      	ldr	r0, [r0, #16]
 800cc4c:	114b      	asrs	r3, r1, #5
 800cc4e:	4298      	cmp	r0, r3
 800cc50:	b510      	push	{r4, lr}
 800cc52:	db11      	blt.n	800cc78 <__any_on+0x32>
 800cc54:	dd0a      	ble.n	800cc6c <__any_on+0x26>
 800cc56:	f011 011f 	ands.w	r1, r1, #31
 800cc5a:	d007      	beq.n	800cc6c <__any_on+0x26>
 800cc5c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cc60:	fa24 f001 	lsr.w	r0, r4, r1
 800cc64:	fa00 f101 	lsl.w	r1, r0, r1
 800cc68:	428c      	cmp	r4, r1
 800cc6a:	d10b      	bne.n	800cc84 <__any_on+0x3e>
 800cc6c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cc70:	4293      	cmp	r3, r2
 800cc72:	d803      	bhi.n	800cc7c <__any_on+0x36>
 800cc74:	2000      	movs	r0, #0
 800cc76:	bd10      	pop	{r4, pc}
 800cc78:	4603      	mov	r3, r0
 800cc7a:	e7f7      	b.n	800cc6c <__any_on+0x26>
 800cc7c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cc80:	2900      	cmp	r1, #0
 800cc82:	d0f5      	beq.n	800cc70 <__any_on+0x2a>
 800cc84:	2001      	movs	r0, #1
 800cc86:	e7f6      	b.n	800cc76 <__any_on+0x30>

0800cc88 <__ascii_wctomb>:
 800cc88:	4603      	mov	r3, r0
 800cc8a:	4608      	mov	r0, r1
 800cc8c:	b141      	cbz	r1, 800cca0 <__ascii_wctomb+0x18>
 800cc8e:	2aff      	cmp	r2, #255	@ 0xff
 800cc90:	d904      	bls.n	800cc9c <__ascii_wctomb+0x14>
 800cc92:	228a      	movs	r2, #138	@ 0x8a
 800cc94:	f04f 30ff 	mov.w	r0, #4294967295
 800cc98:	601a      	str	r2, [r3, #0]
 800cc9a:	4770      	bx	lr
 800cc9c:	2001      	movs	r0, #1
 800cc9e:	700a      	strb	r2, [r1, #0]
 800cca0:	4770      	bx	lr

0800cca2 <__ssputs_r>:
 800cca2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cca6:	461f      	mov	r7, r3
 800cca8:	688e      	ldr	r6, [r1, #8]
 800ccaa:	4682      	mov	sl, r0
 800ccac:	42be      	cmp	r6, r7
 800ccae:	460c      	mov	r4, r1
 800ccb0:	4690      	mov	r8, r2
 800ccb2:	680b      	ldr	r3, [r1, #0]
 800ccb4:	d82d      	bhi.n	800cd12 <__ssputs_r+0x70>
 800ccb6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ccba:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ccbe:	d026      	beq.n	800cd0e <__ssputs_r+0x6c>
 800ccc0:	6965      	ldr	r5, [r4, #20]
 800ccc2:	6909      	ldr	r1, [r1, #16]
 800ccc4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ccc8:	eba3 0901 	sub.w	r9, r3, r1
 800cccc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ccd0:	1c7b      	adds	r3, r7, #1
 800ccd2:	444b      	add	r3, r9
 800ccd4:	106d      	asrs	r5, r5, #1
 800ccd6:	429d      	cmp	r5, r3
 800ccd8:	bf38      	it	cc
 800ccda:	461d      	movcc	r5, r3
 800ccdc:	0553      	lsls	r3, r2, #21
 800ccde:	d527      	bpl.n	800cd30 <__ssputs_r+0x8e>
 800cce0:	4629      	mov	r1, r5
 800cce2:	f7ff fa8d 	bl	800c200 <_malloc_r>
 800cce6:	4606      	mov	r6, r0
 800cce8:	b360      	cbz	r0, 800cd44 <__ssputs_r+0xa2>
 800ccea:	464a      	mov	r2, r9
 800ccec:	6921      	ldr	r1, [r4, #16]
 800ccee:	f7fe feca 	bl	800ba86 <memcpy>
 800ccf2:	89a3      	ldrh	r3, [r4, #12]
 800ccf4:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ccf8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ccfc:	81a3      	strh	r3, [r4, #12]
 800ccfe:	6126      	str	r6, [r4, #16]
 800cd00:	444e      	add	r6, r9
 800cd02:	6026      	str	r6, [r4, #0]
 800cd04:	463e      	mov	r6, r7
 800cd06:	6165      	str	r5, [r4, #20]
 800cd08:	eba5 0509 	sub.w	r5, r5, r9
 800cd0c:	60a5      	str	r5, [r4, #8]
 800cd0e:	42be      	cmp	r6, r7
 800cd10:	d900      	bls.n	800cd14 <__ssputs_r+0x72>
 800cd12:	463e      	mov	r6, r7
 800cd14:	4632      	mov	r2, r6
 800cd16:	4641      	mov	r1, r8
 800cd18:	6820      	ldr	r0, [r4, #0]
 800cd1a:	f000 fb53 	bl	800d3c4 <memmove>
 800cd1e:	2000      	movs	r0, #0
 800cd20:	68a3      	ldr	r3, [r4, #8]
 800cd22:	1b9b      	subs	r3, r3, r6
 800cd24:	60a3      	str	r3, [r4, #8]
 800cd26:	6823      	ldr	r3, [r4, #0]
 800cd28:	4433      	add	r3, r6
 800cd2a:	6023      	str	r3, [r4, #0]
 800cd2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd30:	462a      	mov	r2, r5
 800cd32:	f000 fbb9 	bl	800d4a8 <_realloc_r>
 800cd36:	4606      	mov	r6, r0
 800cd38:	2800      	cmp	r0, #0
 800cd3a:	d1e0      	bne.n	800ccfe <__ssputs_r+0x5c>
 800cd3c:	4650      	mov	r0, sl
 800cd3e:	6921      	ldr	r1, [r4, #16]
 800cd40:	f7fe feba 	bl	800bab8 <_free_r>
 800cd44:	230c      	movs	r3, #12
 800cd46:	f8ca 3000 	str.w	r3, [sl]
 800cd4a:	89a3      	ldrh	r3, [r4, #12]
 800cd4c:	f04f 30ff 	mov.w	r0, #4294967295
 800cd50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cd54:	81a3      	strh	r3, [r4, #12]
 800cd56:	e7e9      	b.n	800cd2c <__ssputs_r+0x8a>

0800cd58 <_svfiprintf_r>:
 800cd58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd5c:	4698      	mov	r8, r3
 800cd5e:	898b      	ldrh	r3, [r1, #12]
 800cd60:	4607      	mov	r7, r0
 800cd62:	061b      	lsls	r3, r3, #24
 800cd64:	460d      	mov	r5, r1
 800cd66:	4614      	mov	r4, r2
 800cd68:	b09d      	sub	sp, #116	@ 0x74
 800cd6a:	d510      	bpl.n	800cd8e <_svfiprintf_r+0x36>
 800cd6c:	690b      	ldr	r3, [r1, #16]
 800cd6e:	b973      	cbnz	r3, 800cd8e <_svfiprintf_r+0x36>
 800cd70:	2140      	movs	r1, #64	@ 0x40
 800cd72:	f7ff fa45 	bl	800c200 <_malloc_r>
 800cd76:	6028      	str	r0, [r5, #0]
 800cd78:	6128      	str	r0, [r5, #16]
 800cd7a:	b930      	cbnz	r0, 800cd8a <_svfiprintf_r+0x32>
 800cd7c:	230c      	movs	r3, #12
 800cd7e:	603b      	str	r3, [r7, #0]
 800cd80:	f04f 30ff 	mov.w	r0, #4294967295
 800cd84:	b01d      	add	sp, #116	@ 0x74
 800cd86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd8a:	2340      	movs	r3, #64	@ 0x40
 800cd8c:	616b      	str	r3, [r5, #20]
 800cd8e:	2300      	movs	r3, #0
 800cd90:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd92:	2320      	movs	r3, #32
 800cd94:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cd98:	2330      	movs	r3, #48	@ 0x30
 800cd9a:	f04f 0901 	mov.w	r9, #1
 800cd9e:	f8cd 800c 	str.w	r8, [sp, #12]
 800cda2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800cf3c <_svfiprintf_r+0x1e4>
 800cda6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cdaa:	4623      	mov	r3, r4
 800cdac:	469a      	mov	sl, r3
 800cdae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cdb2:	b10a      	cbz	r2, 800cdb8 <_svfiprintf_r+0x60>
 800cdb4:	2a25      	cmp	r2, #37	@ 0x25
 800cdb6:	d1f9      	bne.n	800cdac <_svfiprintf_r+0x54>
 800cdb8:	ebba 0b04 	subs.w	fp, sl, r4
 800cdbc:	d00b      	beq.n	800cdd6 <_svfiprintf_r+0x7e>
 800cdbe:	465b      	mov	r3, fp
 800cdc0:	4622      	mov	r2, r4
 800cdc2:	4629      	mov	r1, r5
 800cdc4:	4638      	mov	r0, r7
 800cdc6:	f7ff ff6c 	bl	800cca2 <__ssputs_r>
 800cdca:	3001      	adds	r0, #1
 800cdcc:	f000 80a7 	beq.w	800cf1e <_svfiprintf_r+0x1c6>
 800cdd0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cdd2:	445a      	add	r2, fp
 800cdd4:	9209      	str	r2, [sp, #36]	@ 0x24
 800cdd6:	f89a 3000 	ldrb.w	r3, [sl]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	f000 809f 	beq.w	800cf1e <_svfiprintf_r+0x1c6>
 800cde0:	2300      	movs	r3, #0
 800cde2:	f04f 32ff 	mov.w	r2, #4294967295
 800cde6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cdea:	f10a 0a01 	add.w	sl, sl, #1
 800cdee:	9304      	str	r3, [sp, #16]
 800cdf0:	9307      	str	r3, [sp, #28]
 800cdf2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cdf6:	931a      	str	r3, [sp, #104]	@ 0x68
 800cdf8:	4654      	mov	r4, sl
 800cdfa:	2205      	movs	r2, #5
 800cdfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce00:	484e      	ldr	r0, [pc, #312]	@ (800cf3c <_svfiprintf_r+0x1e4>)
 800ce02:	f000 fb09 	bl	800d418 <memchr>
 800ce06:	9a04      	ldr	r2, [sp, #16]
 800ce08:	b9d8      	cbnz	r0, 800ce42 <_svfiprintf_r+0xea>
 800ce0a:	06d0      	lsls	r0, r2, #27
 800ce0c:	bf44      	itt	mi
 800ce0e:	2320      	movmi	r3, #32
 800ce10:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ce14:	0711      	lsls	r1, r2, #28
 800ce16:	bf44      	itt	mi
 800ce18:	232b      	movmi	r3, #43	@ 0x2b
 800ce1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ce1e:	f89a 3000 	ldrb.w	r3, [sl]
 800ce22:	2b2a      	cmp	r3, #42	@ 0x2a
 800ce24:	d015      	beq.n	800ce52 <_svfiprintf_r+0xfa>
 800ce26:	4654      	mov	r4, sl
 800ce28:	2000      	movs	r0, #0
 800ce2a:	f04f 0c0a 	mov.w	ip, #10
 800ce2e:	9a07      	ldr	r2, [sp, #28]
 800ce30:	4621      	mov	r1, r4
 800ce32:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ce36:	3b30      	subs	r3, #48	@ 0x30
 800ce38:	2b09      	cmp	r3, #9
 800ce3a:	d94b      	bls.n	800ced4 <_svfiprintf_r+0x17c>
 800ce3c:	b1b0      	cbz	r0, 800ce6c <_svfiprintf_r+0x114>
 800ce3e:	9207      	str	r2, [sp, #28]
 800ce40:	e014      	b.n	800ce6c <_svfiprintf_r+0x114>
 800ce42:	eba0 0308 	sub.w	r3, r0, r8
 800ce46:	fa09 f303 	lsl.w	r3, r9, r3
 800ce4a:	4313      	orrs	r3, r2
 800ce4c:	46a2      	mov	sl, r4
 800ce4e:	9304      	str	r3, [sp, #16]
 800ce50:	e7d2      	b.n	800cdf8 <_svfiprintf_r+0xa0>
 800ce52:	9b03      	ldr	r3, [sp, #12]
 800ce54:	1d19      	adds	r1, r3, #4
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	9103      	str	r1, [sp, #12]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	bfbb      	ittet	lt
 800ce5e:	425b      	neglt	r3, r3
 800ce60:	f042 0202 	orrlt.w	r2, r2, #2
 800ce64:	9307      	strge	r3, [sp, #28]
 800ce66:	9307      	strlt	r3, [sp, #28]
 800ce68:	bfb8      	it	lt
 800ce6a:	9204      	strlt	r2, [sp, #16]
 800ce6c:	7823      	ldrb	r3, [r4, #0]
 800ce6e:	2b2e      	cmp	r3, #46	@ 0x2e
 800ce70:	d10a      	bne.n	800ce88 <_svfiprintf_r+0x130>
 800ce72:	7863      	ldrb	r3, [r4, #1]
 800ce74:	2b2a      	cmp	r3, #42	@ 0x2a
 800ce76:	d132      	bne.n	800cede <_svfiprintf_r+0x186>
 800ce78:	9b03      	ldr	r3, [sp, #12]
 800ce7a:	3402      	adds	r4, #2
 800ce7c:	1d1a      	adds	r2, r3, #4
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	9203      	str	r2, [sp, #12]
 800ce82:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ce86:	9305      	str	r3, [sp, #20]
 800ce88:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800cf40 <_svfiprintf_r+0x1e8>
 800ce8c:	2203      	movs	r2, #3
 800ce8e:	4650      	mov	r0, sl
 800ce90:	7821      	ldrb	r1, [r4, #0]
 800ce92:	f000 fac1 	bl	800d418 <memchr>
 800ce96:	b138      	cbz	r0, 800cea8 <_svfiprintf_r+0x150>
 800ce98:	2240      	movs	r2, #64	@ 0x40
 800ce9a:	9b04      	ldr	r3, [sp, #16]
 800ce9c:	eba0 000a 	sub.w	r0, r0, sl
 800cea0:	4082      	lsls	r2, r0
 800cea2:	4313      	orrs	r3, r2
 800cea4:	3401      	adds	r4, #1
 800cea6:	9304      	str	r3, [sp, #16]
 800cea8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ceac:	2206      	movs	r2, #6
 800ceae:	4825      	ldr	r0, [pc, #148]	@ (800cf44 <_svfiprintf_r+0x1ec>)
 800ceb0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ceb4:	f000 fab0 	bl	800d418 <memchr>
 800ceb8:	2800      	cmp	r0, #0
 800ceba:	d036      	beq.n	800cf2a <_svfiprintf_r+0x1d2>
 800cebc:	4b22      	ldr	r3, [pc, #136]	@ (800cf48 <_svfiprintf_r+0x1f0>)
 800cebe:	bb1b      	cbnz	r3, 800cf08 <_svfiprintf_r+0x1b0>
 800cec0:	9b03      	ldr	r3, [sp, #12]
 800cec2:	3307      	adds	r3, #7
 800cec4:	f023 0307 	bic.w	r3, r3, #7
 800cec8:	3308      	adds	r3, #8
 800ceca:	9303      	str	r3, [sp, #12]
 800cecc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cece:	4433      	add	r3, r6
 800ced0:	9309      	str	r3, [sp, #36]	@ 0x24
 800ced2:	e76a      	b.n	800cdaa <_svfiprintf_r+0x52>
 800ced4:	460c      	mov	r4, r1
 800ced6:	2001      	movs	r0, #1
 800ced8:	fb0c 3202 	mla	r2, ip, r2, r3
 800cedc:	e7a8      	b.n	800ce30 <_svfiprintf_r+0xd8>
 800cede:	2300      	movs	r3, #0
 800cee0:	f04f 0c0a 	mov.w	ip, #10
 800cee4:	4619      	mov	r1, r3
 800cee6:	3401      	adds	r4, #1
 800cee8:	9305      	str	r3, [sp, #20]
 800ceea:	4620      	mov	r0, r4
 800ceec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cef0:	3a30      	subs	r2, #48	@ 0x30
 800cef2:	2a09      	cmp	r2, #9
 800cef4:	d903      	bls.n	800cefe <_svfiprintf_r+0x1a6>
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d0c6      	beq.n	800ce88 <_svfiprintf_r+0x130>
 800cefa:	9105      	str	r1, [sp, #20]
 800cefc:	e7c4      	b.n	800ce88 <_svfiprintf_r+0x130>
 800cefe:	4604      	mov	r4, r0
 800cf00:	2301      	movs	r3, #1
 800cf02:	fb0c 2101 	mla	r1, ip, r1, r2
 800cf06:	e7f0      	b.n	800ceea <_svfiprintf_r+0x192>
 800cf08:	ab03      	add	r3, sp, #12
 800cf0a:	9300      	str	r3, [sp, #0]
 800cf0c:	462a      	mov	r2, r5
 800cf0e:	4638      	mov	r0, r7
 800cf10:	4b0e      	ldr	r3, [pc, #56]	@ (800cf4c <_svfiprintf_r+0x1f4>)
 800cf12:	a904      	add	r1, sp, #16
 800cf14:	f3af 8000 	nop.w
 800cf18:	1c42      	adds	r2, r0, #1
 800cf1a:	4606      	mov	r6, r0
 800cf1c:	d1d6      	bne.n	800cecc <_svfiprintf_r+0x174>
 800cf1e:	89ab      	ldrh	r3, [r5, #12]
 800cf20:	065b      	lsls	r3, r3, #25
 800cf22:	f53f af2d 	bmi.w	800cd80 <_svfiprintf_r+0x28>
 800cf26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cf28:	e72c      	b.n	800cd84 <_svfiprintf_r+0x2c>
 800cf2a:	ab03      	add	r3, sp, #12
 800cf2c:	9300      	str	r3, [sp, #0]
 800cf2e:	462a      	mov	r2, r5
 800cf30:	4638      	mov	r0, r7
 800cf32:	4b06      	ldr	r3, [pc, #24]	@ (800cf4c <_svfiprintf_r+0x1f4>)
 800cf34:	a904      	add	r1, sp, #16
 800cf36:	f000 f87d 	bl	800d034 <_printf_i>
 800cf3a:	e7ed      	b.n	800cf18 <_svfiprintf_r+0x1c0>
 800cf3c:	0800dff0 	.word	0x0800dff0
 800cf40:	0800dff6 	.word	0x0800dff6
 800cf44:	0800dffa 	.word	0x0800dffa
 800cf48:	00000000 	.word	0x00000000
 800cf4c:	0800cca3 	.word	0x0800cca3

0800cf50 <_printf_common>:
 800cf50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf54:	4616      	mov	r6, r2
 800cf56:	4698      	mov	r8, r3
 800cf58:	688a      	ldr	r2, [r1, #8]
 800cf5a:	690b      	ldr	r3, [r1, #16]
 800cf5c:	4607      	mov	r7, r0
 800cf5e:	4293      	cmp	r3, r2
 800cf60:	bfb8      	it	lt
 800cf62:	4613      	movlt	r3, r2
 800cf64:	6033      	str	r3, [r6, #0]
 800cf66:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800cf6a:	460c      	mov	r4, r1
 800cf6c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cf70:	b10a      	cbz	r2, 800cf76 <_printf_common+0x26>
 800cf72:	3301      	adds	r3, #1
 800cf74:	6033      	str	r3, [r6, #0]
 800cf76:	6823      	ldr	r3, [r4, #0]
 800cf78:	0699      	lsls	r1, r3, #26
 800cf7a:	bf42      	ittt	mi
 800cf7c:	6833      	ldrmi	r3, [r6, #0]
 800cf7e:	3302      	addmi	r3, #2
 800cf80:	6033      	strmi	r3, [r6, #0]
 800cf82:	6825      	ldr	r5, [r4, #0]
 800cf84:	f015 0506 	ands.w	r5, r5, #6
 800cf88:	d106      	bne.n	800cf98 <_printf_common+0x48>
 800cf8a:	f104 0a19 	add.w	sl, r4, #25
 800cf8e:	68e3      	ldr	r3, [r4, #12]
 800cf90:	6832      	ldr	r2, [r6, #0]
 800cf92:	1a9b      	subs	r3, r3, r2
 800cf94:	42ab      	cmp	r3, r5
 800cf96:	dc2b      	bgt.n	800cff0 <_printf_common+0xa0>
 800cf98:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800cf9c:	6822      	ldr	r2, [r4, #0]
 800cf9e:	3b00      	subs	r3, #0
 800cfa0:	bf18      	it	ne
 800cfa2:	2301      	movne	r3, #1
 800cfa4:	0692      	lsls	r2, r2, #26
 800cfa6:	d430      	bmi.n	800d00a <_printf_common+0xba>
 800cfa8:	4641      	mov	r1, r8
 800cfaa:	4638      	mov	r0, r7
 800cfac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800cfb0:	47c8      	blx	r9
 800cfb2:	3001      	adds	r0, #1
 800cfb4:	d023      	beq.n	800cffe <_printf_common+0xae>
 800cfb6:	6823      	ldr	r3, [r4, #0]
 800cfb8:	6922      	ldr	r2, [r4, #16]
 800cfba:	f003 0306 	and.w	r3, r3, #6
 800cfbe:	2b04      	cmp	r3, #4
 800cfc0:	bf14      	ite	ne
 800cfc2:	2500      	movne	r5, #0
 800cfc4:	6833      	ldreq	r3, [r6, #0]
 800cfc6:	f04f 0600 	mov.w	r6, #0
 800cfca:	bf08      	it	eq
 800cfcc:	68e5      	ldreq	r5, [r4, #12]
 800cfce:	f104 041a 	add.w	r4, r4, #26
 800cfd2:	bf08      	it	eq
 800cfd4:	1aed      	subeq	r5, r5, r3
 800cfd6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800cfda:	bf08      	it	eq
 800cfdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cfe0:	4293      	cmp	r3, r2
 800cfe2:	bfc4      	itt	gt
 800cfe4:	1a9b      	subgt	r3, r3, r2
 800cfe6:	18ed      	addgt	r5, r5, r3
 800cfe8:	42b5      	cmp	r5, r6
 800cfea:	d11a      	bne.n	800d022 <_printf_common+0xd2>
 800cfec:	2000      	movs	r0, #0
 800cfee:	e008      	b.n	800d002 <_printf_common+0xb2>
 800cff0:	2301      	movs	r3, #1
 800cff2:	4652      	mov	r2, sl
 800cff4:	4641      	mov	r1, r8
 800cff6:	4638      	mov	r0, r7
 800cff8:	47c8      	blx	r9
 800cffa:	3001      	adds	r0, #1
 800cffc:	d103      	bne.n	800d006 <_printf_common+0xb6>
 800cffe:	f04f 30ff 	mov.w	r0, #4294967295
 800d002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d006:	3501      	adds	r5, #1
 800d008:	e7c1      	b.n	800cf8e <_printf_common+0x3e>
 800d00a:	2030      	movs	r0, #48	@ 0x30
 800d00c:	18e1      	adds	r1, r4, r3
 800d00e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d012:	1c5a      	adds	r2, r3, #1
 800d014:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d018:	4422      	add	r2, r4
 800d01a:	3302      	adds	r3, #2
 800d01c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d020:	e7c2      	b.n	800cfa8 <_printf_common+0x58>
 800d022:	2301      	movs	r3, #1
 800d024:	4622      	mov	r2, r4
 800d026:	4641      	mov	r1, r8
 800d028:	4638      	mov	r0, r7
 800d02a:	47c8      	blx	r9
 800d02c:	3001      	adds	r0, #1
 800d02e:	d0e6      	beq.n	800cffe <_printf_common+0xae>
 800d030:	3601      	adds	r6, #1
 800d032:	e7d9      	b.n	800cfe8 <_printf_common+0x98>

0800d034 <_printf_i>:
 800d034:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d038:	7e0f      	ldrb	r7, [r1, #24]
 800d03a:	4691      	mov	r9, r2
 800d03c:	2f78      	cmp	r7, #120	@ 0x78
 800d03e:	4680      	mov	r8, r0
 800d040:	460c      	mov	r4, r1
 800d042:	469a      	mov	sl, r3
 800d044:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d046:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d04a:	d807      	bhi.n	800d05c <_printf_i+0x28>
 800d04c:	2f62      	cmp	r7, #98	@ 0x62
 800d04e:	d80a      	bhi.n	800d066 <_printf_i+0x32>
 800d050:	2f00      	cmp	r7, #0
 800d052:	f000 80d3 	beq.w	800d1fc <_printf_i+0x1c8>
 800d056:	2f58      	cmp	r7, #88	@ 0x58
 800d058:	f000 80ba 	beq.w	800d1d0 <_printf_i+0x19c>
 800d05c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d060:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d064:	e03a      	b.n	800d0dc <_printf_i+0xa8>
 800d066:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d06a:	2b15      	cmp	r3, #21
 800d06c:	d8f6      	bhi.n	800d05c <_printf_i+0x28>
 800d06e:	a101      	add	r1, pc, #4	@ (adr r1, 800d074 <_printf_i+0x40>)
 800d070:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d074:	0800d0cd 	.word	0x0800d0cd
 800d078:	0800d0e1 	.word	0x0800d0e1
 800d07c:	0800d05d 	.word	0x0800d05d
 800d080:	0800d05d 	.word	0x0800d05d
 800d084:	0800d05d 	.word	0x0800d05d
 800d088:	0800d05d 	.word	0x0800d05d
 800d08c:	0800d0e1 	.word	0x0800d0e1
 800d090:	0800d05d 	.word	0x0800d05d
 800d094:	0800d05d 	.word	0x0800d05d
 800d098:	0800d05d 	.word	0x0800d05d
 800d09c:	0800d05d 	.word	0x0800d05d
 800d0a0:	0800d1e3 	.word	0x0800d1e3
 800d0a4:	0800d10b 	.word	0x0800d10b
 800d0a8:	0800d19d 	.word	0x0800d19d
 800d0ac:	0800d05d 	.word	0x0800d05d
 800d0b0:	0800d05d 	.word	0x0800d05d
 800d0b4:	0800d205 	.word	0x0800d205
 800d0b8:	0800d05d 	.word	0x0800d05d
 800d0bc:	0800d10b 	.word	0x0800d10b
 800d0c0:	0800d05d 	.word	0x0800d05d
 800d0c4:	0800d05d 	.word	0x0800d05d
 800d0c8:	0800d1a5 	.word	0x0800d1a5
 800d0cc:	6833      	ldr	r3, [r6, #0]
 800d0ce:	1d1a      	adds	r2, r3, #4
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	6032      	str	r2, [r6, #0]
 800d0d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d0d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d0dc:	2301      	movs	r3, #1
 800d0de:	e09e      	b.n	800d21e <_printf_i+0x1ea>
 800d0e0:	6833      	ldr	r3, [r6, #0]
 800d0e2:	6820      	ldr	r0, [r4, #0]
 800d0e4:	1d19      	adds	r1, r3, #4
 800d0e6:	6031      	str	r1, [r6, #0]
 800d0e8:	0606      	lsls	r6, r0, #24
 800d0ea:	d501      	bpl.n	800d0f0 <_printf_i+0xbc>
 800d0ec:	681d      	ldr	r5, [r3, #0]
 800d0ee:	e003      	b.n	800d0f8 <_printf_i+0xc4>
 800d0f0:	0645      	lsls	r5, r0, #25
 800d0f2:	d5fb      	bpl.n	800d0ec <_printf_i+0xb8>
 800d0f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d0f8:	2d00      	cmp	r5, #0
 800d0fa:	da03      	bge.n	800d104 <_printf_i+0xd0>
 800d0fc:	232d      	movs	r3, #45	@ 0x2d
 800d0fe:	426d      	negs	r5, r5
 800d100:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d104:	230a      	movs	r3, #10
 800d106:	4859      	ldr	r0, [pc, #356]	@ (800d26c <_printf_i+0x238>)
 800d108:	e011      	b.n	800d12e <_printf_i+0xfa>
 800d10a:	6821      	ldr	r1, [r4, #0]
 800d10c:	6833      	ldr	r3, [r6, #0]
 800d10e:	0608      	lsls	r0, r1, #24
 800d110:	f853 5b04 	ldr.w	r5, [r3], #4
 800d114:	d402      	bmi.n	800d11c <_printf_i+0xe8>
 800d116:	0649      	lsls	r1, r1, #25
 800d118:	bf48      	it	mi
 800d11a:	b2ad      	uxthmi	r5, r5
 800d11c:	2f6f      	cmp	r7, #111	@ 0x6f
 800d11e:	6033      	str	r3, [r6, #0]
 800d120:	bf14      	ite	ne
 800d122:	230a      	movne	r3, #10
 800d124:	2308      	moveq	r3, #8
 800d126:	4851      	ldr	r0, [pc, #324]	@ (800d26c <_printf_i+0x238>)
 800d128:	2100      	movs	r1, #0
 800d12a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d12e:	6866      	ldr	r6, [r4, #4]
 800d130:	2e00      	cmp	r6, #0
 800d132:	bfa8      	it	ge
 800d134:	6821      	ldrge	r1, [r4, #0]
 800d136:	60a6      	str	r6, [r4, #8]
 800d138:	bfa4      	itt	ge
 800d13a:	f021 0104 	bicge.w	r1, r1, #4
 800d13e:	6021      	strge	r1, [r4, #0]
 800d140:	b90d      	cbnz	r5, 800d146 <_printf_i+0x112>
 800d142:	2e00      	cmp	r6, #0
 800d144:	d04b      	beq.n	800d1de <_printf_i+0x1aa>
 800d146:	4616      	mov	r6, r2
 800d148:	fbb5 f1f3 	udiv	r1, r5, r3
 800d14c:	fb03 5711 	mls	r7, r3, r1, r5
 800d150:	5dc7      	ldrb	r7, [r0, r7]
 800d152:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d156:	462f      	mov	r7, r5
 800d158:	42bb      	cmp	r3, r7
 800d15a:	460d      	mov	r5, r1
 800d15c:	d9f4      	bls.n	800d148 <_printf_i+0x114>
 800d15e:	2b08      	cmp	r3, #8
 800d160:	d10b      	bne.n	800d17a <_printf_i+0x146>
 800d162:	6823      	ldr	r3, [r4, #0]
 800d164:	07df      	lsls	r7, r3, #31
 800d166:	d508      	bpl.n	800d17a <_printf_i+0x146>
 800d168:	6923      	ldr	r3, [r4, #16]
 800d16a:	6861      	ldr	r1, [r4, #4]
 800d16c:	4299      	cmp	r1, r3
 800d16e:	bfde      	ittt	le
 800d170:	2330      	movle	r3, #48	@ 0x30
 800d172:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d176:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d17a:	1b92      	subs	r2, r2, r6
 800d17c:	6122      	str	r2, [r4, #16]
 800d17e:	464b      	mov	r3, r9
 800d180:	4621      	mov	r1, r4
 800d182:	4640      	mov	r0, r8
 800d184:	f8cd a000 	str.w	sl, [sp]
 800d188:	aa03      	add	r2, sp, #12
 800d18a:	f7ff fee1 	bl	800cf50 <_printf_common>
 800d18e:	3001      	adds	r0, #1
 800d190:	d14a      	bne.n	800d228 <_printf_i+0x1f4>
 800d192:	f04f 30ff 	mov.w	r0, #4294967295
 800d196:	b004      	add	sp, #16
 800d198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d19c:	6823      	ldr	r3, [r4, #0]
 800d19e:	f043 0320 	orr.w	r3, r3, #32
 800d1a2:	6023      	str	r3, [r4, #0]
 800d1a4:	2778      	movs	r7, #120	@ 0x78
 800d1a6:	4832      	ldr	r0, [pc, #200]	@ (800d270 <_printf_i+0x23c>)
 800d1a8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d1ac:	6823      	ldr	r3, [r4, #0]
 800d1ae:	6831      	ldr	r1, [r6, #0]
 800d1b0:	061f      	lsls	r7, r3, #24
 800d1b2:	f851 5b04 	ldr.w	r5, [r1], #4
 800d1b6:	d402      	bmi.n	800d1be <_printf_i+0x18a>
 800d1b8:	065f      	lsls	r7, r3, #25
 800d1ba:	bf48      	it	mi
 800d1bc:	b2ad      	uxthmi	r5, r5
 800d1be:	6031      	str	r1, [r6, #0]
 800d1c0:	07d9      	lsls	r1, r3, #31
 800d1c2:	bf44      	itt	mi
 800d1c4:	f043 0320 	orrmi.w	r3, r3, #32
 800d1c8:	6023      	strmi	r3, [r4, #0]
 800d1ca:	b11d      	cbz	r5, 800d1d4 <_printf_i+0x1a0>
 800d1cc:	2310      	movs	r3, #16
 800d1ce:	e7ab      	b.n	800d128 <_printf_i+0xf4>
 800d1d0:	4826      	ldr	r0, [pc, #152]	@ (800d26c <_printf_i+0x238>)
 800d1d2:	e7e9      	b.n	800d1a8 <_printf_i+0x174>
 800d1d4:	6823      	ldr	r3, [r4, #0]
 800d1d6:	f023 0320 	bic.w	r3, r3, #32
 800d1da:	6023      	str	r3, [r4, #0]
 800d1dc:	e7f6      	b.n	800d1cc <_printf_i+0x198>
 800d1de:	4616      	mov	r6, r2
 800d1e0:	e7bd      	b.n	800d15e <_printf_i+0x12a>
 800d1e2:	6833      	ldr	r3, [r6, #0]
 800d1e4:	6825      	ldr	r5, [r4, #0]
 800d1e6:	1d18      	adds	r0, r3, #4
 800d1e8:	6961      	ldr	r1, [r4, #20]
 800d1ea:	6030      	str	r0, [r6, #0]
 800d1ec:	062e      	lsls	r6, r5, #24
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	d501      	bpl.n	800d1f6 <_printf_i+0x1c2>
 800d1f2:	6019      	str	r1, [r3, #0]
 800d1f4:	e002      	b.n	800d1fc <_printf_i+0x1c8>
 800d1f6:	0668      	lsls	r0, r5, #25
 800d1f8:	d5fb      	bpl.n	800d1f2 <_printf_i+0x1be>
 800d1fa:	8019      	strh	r1, [r3, #0]
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	4616      	mov	r6, r2
 800d200:	6123      	str	r3, [r4, #16]
 800d202:	e7bc      	b.n	800d17e <_printf_i+0x14a>
 800d204:	6833      	ldr	r3, [r6, #0]
 800d206:	2100      	movs	r1, #0
 800d208:	1d1a      	adds	r2, r3, #4
 800d20a:	6032      	str	r2, [r6, #0]
 800d20c:	681e      	ldr	r6, [r3, #0]
 800d20e:	6862      	ldr	r2, [r4, #4]
 800d210:	4630      	mov	r0, r6
 800d212:	f000 f901 	bl	800d418 <memchr>
 800d216:	b108      	cbz	r0, 800d21c <_printf_i+0x1e8>
 800d218:	1b80      	subs	r0, r0, r6
 800d21a:	6060      	str	r0, [r4, #4]
 800d21c:	6863      	ldr	r3, [r4, #4]
 800d21e:	6123      	str	r3, [r4, #16]
 800d220:	2300      	movs	r3, #0
 800d222:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d226:	e7aa      	b.n	800d17e <_printf_i+0x14a>
 800d228:	4632      	mov	r2, r6
 800d22a:	4649      	mov	r1, r9
 800d22c:	4640      	mov	r0, r8
 800d22e:	6923      	ldr	r3, [r4, #16]
 800d230:	47d0      	blx	sl
 800d232:	3001      	adds	r0, #1
 800d234:	d0ad      	beq.n	800d192 <_printf_i+0x15e>
 800d236:	6823      	ldr	r3, [r4, #0]
 800d238:	079b      	lsls	r3, r3, #30
 800d23a:	d413      	bmi.n	800d264 <_printf_i+0x230>
 800d23c:	68e0      	ldr	r0, [r4, #12]
 800d23e:	9b03      	ldr	r3, [sp, #12]
 800d240:	4298      	cmp	r0, r3
 800d242:	bfb8      	it	lt
 800d244:	4618      	movlt	r0, r3
 800d246:	e7a6      	b.n	800d196 <_printf_i+0x162>
 800d248:	2301      	movs	r3, #1
 800d24a:	4632      	mov	r2, r6
 800d24c:	4649      	mov	r1, r9
 800d24e:	4640      	mov	r0, r8
 800d250:	47d0      	blx	sl
 800d252:	3001      	adds	r0, #1
 800d254:	d09d      	beq.n	800d192 <_printf_i+0x15e>
 800d256:	3501      	adds	r5, #1
 800d258:	68e3      	ldr	r3, [r4, #12]
 800d25a:	9903      	ldr	r1, [sp, #12]
 800d25c:	1a5b      	subs	r3, r3, r1
 800d25e:	42ab      	cmp	r3, r5
 800d260:	dcf2      	bgt.n	800d248 <_printf_i+0x214>
 800d262:	e7eb      	b.n	800d23c <_printf_i+0x208>
 800d264:	2500      	movs	r5, #0
 800d266:	f104 0619 	add.w	r6, r4, #25
 800d26a:	e7f5      	b.n	800d258 <_printf_i+0x224>
 800d26c:	0800e001 	.word	0x0800e001
 800d270:	0800e012 	.word	0x0800e012

0800d274 <__sflush_r>:
 800d274:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d27a:	0716      	lsls	r6, r2, #28
 800d27c:	4605      	mov	r5, r0
 800d27e:	460c      	mov	r4, r1
 800d280:	d454      	bmi.n	800d32c <__sflush_r+0xb8>
 800d282:	684b      	ldr	r3, [r1, #4]
 800d284:	2b00      	cmp	r3, #0
 800d286:	dc02      	bgt.n	800d28e <__sflush_r+0x1a>
 800d288:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	dd48      	ble.n	800d320 <__sflush_r+0xac>
 800d28e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d290:	2e00      	cmp	r6, #0
 800d292:	d045      	beq.n	800d320 <__sflush_r+0xac>
 800d294:	2300      	movs	r3, #0
 800d296:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d29a:	682f      	ldr	r7, [r5, #0]
 800d29c:	6a21      	ldr	r1, [r4, #32]
 800d29e:	602b      	str	r3, [r5, #0]
 800d2a0:	d030      	beq.n	800d304 <__sflush_r+0x90>
 800d2a2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d2a4:	89a3      	ldrh	r3, [r4, #12]
 800d2a6:	0759      	lsls	r1, r3, #29
 800d2a8:	d505      	bpl.n	800d2b6 <__sflush_r+0x42>
 800d2aa:	6863      	ldr	r3, [r4, #4]
 800d2ac:	1ad2      	subs	r2, r2, r3
 800d2ae:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d2b0:	b10b      	cbz	r3, 800d2b6 <__sflush_r+0x42>
 800d2b2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d2b4:	1ad2      	subs	r2, r2, r3
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	4628      	mov	r0, r5
 800d2ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d2bc:	6a21      	ldr	r1, [r4, #32]
 800d2be:	47b0      	blx	r6
 800d2c0:	1c43      	adds	r3, r0, #1
 800d2c2:	89a3      	ldrh	r3, [r4, #12]
 800d2c4:	d106      	bne.n	800d2d4 <__sflush_r+0x60>
 800d2c6:	6829      	ldr	r1, [r5, #0]
 800d2c8:	291d      	cmp	r1, #29
 800d2ca:	d82b      	bhi.n	800d324 <__sflush_r+0xb0>
 800d2cc:	4a28      	ldr	r2, [pc, #160]	@ (800d370 <__sflush_r+0xfc>)
 800d2ce:	410a      	asrs	r2, r1
 800d2d0:	07d6      	lsls	r6, r2, #31
 800d2d2:	d427      	bmi.n	800d324 <__sflush_r+0xb0>
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	6062      	str	r2, [r4, #4]
 800d2d8:	6922      	ldr	r2, [r4, #16]
 800d2da:	04d9      	lsls	r1, r3, #19
 800d2dc:	6022      	str	r2, [r4, #0]
 800d2de:	d504      	bpl.n	800d2ea <__sflush_r+0x76>
 800d2e0:	1c42      	adds	r2, r0, #1
 800d2e2:	d101      	bne.n	800d2e8 <__sflush_r+0x74>
 800d2e4:	682b      	ldr	r3, [r5, #0]
 800d2e6:	b903      	cbnz	r3, 800d2ea <__sflush_r+0x76>
 800d2e8:	6560      	str	r0, [r4, #84]	@ 0x54
 800d2ea:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d2ec:	602f      	str	r7, [r5, #0]
 800d2ee:	b1b9      	cbz	r1, 800d320 <__sflush_r+0xac>
 800d2f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d2f4:	4299      	cmp	r1, r3
 800d2f6:	d002      	beq.n	800d2fe <__sflush_r+0x8a>
 800d2f8:	4628      	mov	r0, r5
 800d2fa:	f7fe fbdd 	bl	800bab8 <_free_r>
 800d2fe:	2300      	movs	r3, #0
 800d300:	6363      	str	r3, [r4, #52]	@ 0x34
 800d302:	e00d      	b.n	800d320 <__sflush_r+0xac>
 800d304:	2301      	movs	r3, #1
 800d306:	4628      	mov	r0, r5
 800d308:	47b0      	blx	r6
 800d30a:	4602      	mov	r2, r0
 800d30c:	1c50      	adds	r0, r2, #1
 800d30e:	d1c9      	bne.n	800d2a4 <__sflush_r+0x30>
 800d310:	682b      	ldr	r3, [r5, #0]
 800d312:	2b00      	cmp	r3, #0
 800d314:	d0c6      	beq.n	800d2a4 <__sflush_r+0x30>
 800d316:	2b1d      	cmp	r3, #29
 800d318:	d001      	beq.n	800d31e <__sflush_r+0xaa>
 800d31a:	2b16      	cmp	r3, #22
 800d31c:	d11d      	bne.n	800d35a <__sflush_r+0xe6>
 800d31e:	602f      	str	r7, [r5, #0]
 800d320:	2000      	movs	r0, #0
 800d322:	e021      	b.n	800d368 <__sflush_r+0xf4>
 800d324:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d328:	b21b      	sxth	r3, r3
 800d32a:	e01a      	b.n	800d362 <__sflush_r+0xee>
 800d32c:	690f      	ldr	r7, [r1, #16]
 800d32e:	2f00      	cmp	r7, #0
 800d330:	d0f6      	beq.n	800d320 <__sflush_r+0xac>
 800d332:	0793      	lsls	r3, r2, #30
 800d334:	bf18      	it	ne
 800d336:	2300      	movne	r3, #0
 800d338:	680e      	ldr	r6, [r1, #0]
 800d33a:	bf08      	it	eq
 800d33c:	694b      	ldreq	r3, [r1, #20]
 800d33e:	1bf6      	subs	r6, r6, r7
 800d340:	600f      	str	r7, [r1, #0]
 800d342:	608b      	str	r3, [r1, #8]
 800d344:	2e00      	cmp	r6, #0
 800d346:	ddeb      	ble.n	800d320 <__sflush_r+0xac>
 800d348:	4633      	mov	r3, r6
 800d34a:	463a      	mov	r2, r7
 800d34c:	4628      	mov	r0, r5
 800d34e:	6a21      	ldr	r1, [r4, #32]
 800d350:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800d354:	47e0      	blx	ip
 800d356:	2800      	cmp	r0, #0
 800d358:	dc07      	bgt.n	800d36a <__sflush_r+0xf6>
 800d35a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d35e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d362:	f04f 30ff 	mov.w	r0, #4294967295
 800d366:	81a3      	strh	r3, [r4, #12]
 800d368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d36a:	4407      	add	r7, r0
 800d36c:	1a36      	subs	r6, r6, r0
 800d36e:	e7e9      	b.n	800d344 <__sflush_r+0xd0>
 800d370:	dfbffffe 	.word	0xdfbffffe

0800d374 <_fflush_r>:
 800d374:	b538      	push	{r3, r4, r5, lr}
 800d376:	690b      	ldr	r3, [r1, #16]
 800d378:	4605      	mov	r5, r0
 800d37a:	460c      	mov	r4, r1
 800d37c:	b913      	cbnz	r3, 800d384 <_fflush_r+0x10>
 800d37e:	2500      	movs	r5, #0
 800d380:	4628      	mov	r0, r5
 800d382:	bd38      	pop	{r3, r4, r5, pc}
 800d384:	b118      	cbz	r0, 800d38e <_fflush_r+0x1a>
 800d386:	6a03      	ldr	r3, [r0, #32]
 800d388:	b90b      	cbnz	r3, 800d38e <_fflush_r+0x1a>
 800d38a:	f7fe fa09 	bl	800b7a0 <__sinit>
 800d38e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d0f3      	beq.n	800d37e <_fflush_r+0xa>
 800d396:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d398:	07d0      	lsls	r0, r2, #31
 800d39a:	d404      	bmi.n	800d3a6 <_fflush_r+0x32>
 800d39c:	0599      	lsls	r1, r3, #22
 800d39e:	d402      	bmi.n	800d3a6 <_fflush_r+0x32>
 800d3a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d3a2:	f7fe fb66 	bl	800ba72 <__retarget_lock_acquire_recursive>
 800d3a6:	4628      	mov	r0, r5
 800d3a8:	4621      	mov	r1, r4
 800d3aa:	f7ff ff63 	bl	800d274 <__sflush_r>
 800d3ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d3b0:	4605      	mov	r5, r0
 800d3b2:	07da      	lsls	r2, r3, #31
 800d3b4:	d4e4      	bmi.n	800d380 <_fflush_r+0xc>
 800d3b6:	89a3      	ldrh	r3, [r4, #12]
 800d3b8:	059b      	lsls	r3, r3, #22
 800d3ba:	d4e1      	bmi.n	800d380 <_fflush_r+0xc>
 800d3bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d3be:	f7fe fb59 	bl	800ba74 <__retarget_lock_release_recursive>
 800d3c2:	e7dd      	b.n	800d380 <_fflush_r+0xc>

0800d3c4 <memmove>:
 800d3c4:	4288      	cmp	r0, r1
 800d3c6:	b510      	push	{r4, lr}
 800d3c8:	eb01 0402 	add.w	r4, r1, r2
 800d3cc:	d902      	bls.n	800d3d4 <memmove+0x10>
 800d3ce:	4284      	cmp	r4, r0
 800d3d0:	4623      	mov	r3, r4
 800d3d2:	d807      	bhi.n	800d3e4 <memmove+0x20>
 800d3d4:	1e43      	subs	r3, r0, #1
 800d3d6:	42a1      	cmp	r1, r4
 800d3d8:	d008      	beq.n	800d3ec <memmove+0x28>
 800d3da:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d3de:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d3e2:	e7f8      	b.n	800d3d6 <memmove+0x12>
 800d3e4:	4601      	mov	r1, r0
 800d3e6:	4402      	add	r2, r0
 800d3e8:	428a      	cmp	r2, r1
 800d3ea:	d100      	bne.n	800d3ee <memmove+0x2a>
 800d3ec:	bd10      	pop	{r4, pc}
 800d3ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d3f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d3f6:	e7f7      	b.n	800d3e8 <memmove+0x24>

0800d3f8 <_sbrk_r>:
 800d3f8:	b538      	push	{r3, r4, r5, lr}
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	4d05      	ldr	r5, [pc, #20]	@ (800d414 <_sbrk_r+0x1c>)
 800d3fe:	4604      	mov	r4, r0
 800d400:	4608      	mov	r0, r1
 800d402:	602b      	str	r3, [r5, #0]
 800d404:	f7f4 fef2 	bl	80021ec <_sbrk>
 800d408:	1c43      	adds	r3, r0, #1
 800d40a:	d102      	bne.n	800d412 <_sbrk_r+0x1a>
 800d40c:	682b      	ldr	r3, [r5, #0]
 800d40e:	b103      	cbz	r3, 800d412 <_sbrk_r+0x1a>
 800d410:	6023      	str	r3, [r4, #0]
 800d412:	bd38      	pop	{r3, r4, r5, pc}
 800d414:	200012b4 	.word	0x200012b4

0800d418 <memchr>:
 800d418:	4603      	mov	r3, r0
 800d41a:	b510      	push	{r4, lr}
 800d41c:	b2c9      	uxtb	r1, r1
 800d41e:	4402      	add	r2, r0
 800d420:	4293      	cmp	r3, r2
 800d422:	4618      	mov	r0, r3
 800d424:	d101      	bne.n	800d42a <memchr+0x12>
 800d426:	2000      	movs	r0, #0
 800d428:	e003      	b.n	800d432 <memchr+0x1a>
 800d42a:	7804      	ldrb	r4, [r0, #0]
 800d42c:	3301      	adds	r3, #1
 800d42e:	428c      	cmp	r4, r1
 800d430:	d1f6      	bne.n	800d420 <memchr+0x8>
 800d432:	bd10      	pop	{r4, pc}

0800d434 <__assert_func>:
 800d434:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d436:	4614      	mov	r4, r2
 800d438:	461a      	mov	r2, r3
 800d43a:	4b09      	ldr	r3, [pc, #36]	@ (800d460 <__assert_func+0x2c>)
 800d43c:	4605      	mov	r5, r0
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	68d8      	ldr	r0, [r3, #12]
 800d442:	b954      	cbnz	r4, 800d45a <__assert_func+0x26>
 800d444:	4b07      	ldr	r3, [pc, #28]	@ (800d464 <__assert_func+0x30>)
 800d446:	461c      	mov	r4, r3
 800d448:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d44c:	9100      	str	r1, [sp, #0]
 800d44e:	462b      	mov	r3, r5
 800d450:	4905      	ldr	r1, [pc, #20]	@ (800d468 <__assert_func+0x34>)
 800d452:	f000 f857 	bl	800d504 <fiprintf>
 800d456:	f000 f867 	bl	800d528 <abort>
 800d45a:	4b04      	ldr	r3, [pc, #16]	@ (800d46c <__assert_func+0x38>)
 800d45c:	e7f4      	b.n	800d448 <__assert_func+0x14>
 800d45e:	bf00      	nop
 800d460:	200002e0 	.word	0x200002e0
 800d464:	0800e05e 	.word	0x0800e05e
 800d468:	0800e030 	.word	0x0800e030
 800d46c:	0800e023 	.word	0x0800e023

0800d470 <_calloc_r>:
 800d470:	b570      	push	{r4, r5, r6, lr}
 800d472:	fba1 5402 	umull	r5, r4, r1, r2
 800d476:	b93c      	cbnz	r4, 800d488 <_calloc_r+0x18>
 800d478:	4629      	mov	r1, r5
 800d47a:	f7fe fec1 	bl	800c200 <_malloc_r>
 800d47e:	4606      	mov	r6, r0
 800d480:	b928      	cbnz	r0, 800d48e <_calloc_r+0x1e>
 800d482:	2600      	movs	r6, #0
 800d484:	4630      	mov	r0, r6
 800d486:	bd70      	pop	{r4, r5, r6, pc}
 800d488:	220c      	movs	r2, #12
 800d48a:	6002      	str	r2, [r0, #0]
 800d48c:	e7f9      	b.n	800d482 <_calloc_r+0x12>
 800d48e:	462a      	mov	r2, r5
 800d490:	4621      	mov	r1, r4
 800d492:	f7fe fa37 	bl	800b904 <memset>
 800d496:	e7f5      	b.n	800d484 <_calloc_r+0x14>

0800d498 <malloc>:
 800d498:	4b02      	ldr	r3, [pc, #8]	@ (800d4a4 <malloc+0xc>)
 800d49a:	4601      	mov	r1, r0
 800d49c:	6818      	ldr	r0, [r3, #0]
 800d49e:	f7fe beaf 	b.w	800c200 <_malloc_r>
 800d4a2:	bf00      	nop
 800d4a4:	200002e0 	.word	0x200002e0

0800d4a8 <_realloc_r>:
 800d4a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4ac:	4680      	mov	r8, r0
 800d4ae:	4615      	mov	r5, r2
 800d4b0:	460c      	mov	r4, r1
 800d4b2:	b921      	cbnz	r1, 800d4be <_realloc_r+0x16>
 800d4b4:	4611      	mov	r1, r2
 800d4b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d4ba:	f7fe bea1 	b.w	800c200 <_malloc_r>
 800d4be:	b92a      	cbnz	r2, 800d4cc <_realloc_r+0x24>
 800d4c0:	f7fe fafa 	bl	800bab8 <_free_r>
 800d4c4:	2400      	movs	r4, #0
 800d4c6:	4620      	mov	r0, r4
 800d4c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4cc:	f000 f833 	bl	800d536 <_malloc_usable_size_r>
 800d4d0:	4285      	cmp	r5, r0
 800d4d2:	4606      	mov	r6, r0
 800d4d4:	d802      	bhi.n	800d4dc <_realloc_r+0x34>
 800d4d6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d4da:	d8f4      	bhi.n	800d4c6 <_realloc_r+0x1e>
 800d4dc:	4629      	mov	r1, r5
 800d4de:	4640      	mov	r0, r8
 800d4e0:	f7fe fe8e 	bl	800c200 <_malloc_r>
 800d4e4:	4607      	mov	r7, r0
 800d4e6:	2800      	cmp	r0, #0
 800d4e8:	d0ec      	beq.n	800d4c4 <_realloc_r+0x1c>
 800d4ea:	42b5      	cmp	r5, r6
 800d4ec:	462a      	mov	r2, r5
 800d4ee:	4621      	mov	r1, r4
 800d4f0:	bf28      	it	cs
 800d4f2:	4632      	movcs	r2, r6
 800d4f4:	f7fe fac7 	bl	800ba86 <memcpy>
 800d4f8:	4621      	mov	r1, r4
 800d4fa:	4640      	mov	r0, r8
 800d4fc:	f7fe fadc 	bl	800bab8 <_free_r>
 800d500:	463c      	mov	r4, r7
 800d502:	e7e0      	b.n	800d4c6 <_realloc_r+0x1e>

0800d504 <fiprintf>:
 800d504:	b40e      	push	{r1, r2, r3}
 800d506:	b503      	push	{r0, r1, lr}
 800d508:	4601      	mov	r1, r0
 800d50a:	ab03      	add	r3, sp, #12
 800d50c:	4805      	ldr	r0, [pc, #20]	@ (800d524 <fiprintf+0x20>)
 800d50e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d512:	6800      	ldr	r0, [r0, #0]
 800d514:	9301      	str	r3, [sp, #4]
 800d516:	f000 f83d 	bl	800d594 <_vfiprintf_r>
 800d51a:	b002      	add	sp, #8
 800d51c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d520:	b003      	add	sp, #12
 800d522:	4770      	bx	lr
 800d524:	200002e0 	.word	0x200002e0

0800d528 <abort>:
 800d528:	2006      	movs	r0, #6
 800d52a:	b508      	push	{r3, lr}
 800d52c:	f000 fa06 	bl	800d93c <raise>
 800d530:	2001      	movs	r0, #1
 800d532:	f7f4 fde6 	bl	8002102 <_exit>

0800d536 <_malloc_usable_size_r>:
 800d536:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d53a:	1f18      	subs	r0, r3, #4
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	bfbc      	itt	lt
 800d540:	580b      	ldrlt	r3, [r1, r0]
 800d542:	18c0      	addlt	r0, r0, r3
 800d544:	4770      	bx	lr

0800d546 <__sfputc_r>:
 800d546:	6893      	ldr	r3, [r2, #8]
 800d548:	b410      	push	{r4}
 800d54a:	3b01      	subs	r3, #1
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	6093      	str	r3, [r2, #8]
 800d550:	da07      	bge.n	800d562 <__sfputc_r+0x1c>
 800d552:	6994      	ldr	r4, [r2, #24]
 800d554:	42a3      	cmp	r3, r4
 800d556:	db01      	blt.n	800d55c <__sfputc_r+0x16>
 800d558:	290a      	cmp	r1, #10
 800d55a:	d102      	bne.n	800d562 <__sfputc_r+0x1c>
 800d55c:	bc10      	pop	{r4}
 800d55e:	f000 b931 	b.w	800d7c4 <__swbuf_r>
 800d562:	6813      	ldr	r3, [r2, #0]
 800d564:	1c58      	adds	r0, r3, #1
 800d566:	6010      	str	r0, [r2, #0]
 800d568:	7019      	strb	r1, [r3, #0]
 800d56a:	4608      	mov	r0, r1
 800d56c:	bc10      	pop	{r4}
 800d56e:	4770      	bx	lr

0800d570 <__sfputs_r>:
 800d570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d572:	4606      	mov	r6, r0
 800d574:	460f      	mov	r7, r1
 800d576:	4614      	mov	r4, r2
 800d578:	18d5      	adds	r5, r2, r3
 800d57a:	42ac      	cmp	r4, r5
 800d57c:	d101      	bne.n	800d582 <__sfputs_r+0x12>
 800d57e:	2000      	movs	r0, #0
 800d580:	e007      	b.n	800d592 <__sfputs_r+0x22>
 800d582:	463a      	mov	r2, r7
 800d584:	4630      	mov	r0, r6
 800d586:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d58a:	f7ff ffdc 	bl	800d546 <__sfputc_r>
 800d58e:	1c43      	adds	r3, r0, #1
 800d590:	d1f3      	bne.n	800d57a <__sfputs_r+0xa>
 800d592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d594 <_vfiprintf_r>:
 800d594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d598:	460d      	mov	r5, r1
 800d59a:	4614      	mov	r4, r2
 800d59c:	4698      	mov	r8, r3
 800d59e:	4606      	mov	r6, r0
 800d5a0:	b09d      	sub	sp, #116	@ 0x74
 800d5a2:	b118      	cbz	r0, 800d5ac <_vfiprintf_r+0x18>
 800d5a4:	6a03      	ldr	r3, [r0, #32]
 800d5a6:	b90b      	cbnz	r3, 800d5ac <_vfiprintf_r+0x18>
 800d5a8:	f7fe f8fa 	bl	800b7a0 <__sinit>
 800d5ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d5ae:	07d9      	lsls	r1, r3, #31
 800d5b0:	d405      	bmi.n	800d5be <_vfiprintf_r+0x2a>
 800d5b2:	89ab      	ldrh	r3, [r5, #12]
 800d5b4:	059a      	lsls	r2, r3, #22
 800d5b6:	d402      	bmi.n	800d5be <_vfiprintf_r+0x2a>
 800d5b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d5ba:	f7fe fa5a 	bl	800ba72 <__retarget_lock_acquire_recursive>
 800d5be:	89ab      	ldrh	r3, [r5, #12]
 800d5c0:	071b      	lsls	r3, r3, #28
 800d5c2:	d501      	bpl.n	800d5c8 <_vfiprintf_r+0x34>
 800d5c4:	692b      	ldr	r3, [r5, #16]
 800d5c6:	b99b      	cbnz	r3, 800d5f0 <_vfiprintf_r+0x5c>
 800d5c8:	4629      	mov	r1, r5
 800d5ca:	4630      	mov	r0, r6
 800d5cc:	f000 f938 	bl	800d840 <__swsetup_r>
 800d5d0:	b170      	cbz	r0, 800d5f0 <_vfiprintf_r+0x5c>
 800d5d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d5d4:	07dc      	lsls	r4, r3, #31
 800d5d6:	d504      	bpl.n	800d5e2 <_vfiprintf_r+0x4e>
 800d5d8:	f04f 30ff 	mov.w	r0, #4294967295
 800d5dc:	b01d      	add	sp, #116	@ 0x74
 800d5de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5e2:	89ab      	ldrh	r3, [r5, #12]
 800d5e4:	0598      	lsls	r0, r3, #22
 800d5e6:	d4f7      	bmi.n	800d5d8 <_vfiprintf_r+0x44>
 800d5e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d5ea:	f7fe fa43 	bl	800ba74 <__retarget_lock_release_recursive>
 800d5ee:	e7f3      	b.n	800d5d8 <_vfiprintf_r+0x44>
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800d5f4:	2320      	movs	r3, #32
 800d5f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d5fa:	2330      	movs	r3, #48	@ 0x30
 800d5fc:	f04f 0901 	mov.w	r9, #1
 800d600:	f8cd 800c 	str.w	r8, [sp, #12]
 800d604:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800d7b0 <_vfiprintf_r+0x21c>
 800d608:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d60c:	4623      	mov	r3, r4
 800d60e:	469a      	mov	sl, r3
 800d610:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d614:	b10a      	cbz	r2, 800d61a <_vfiprintf_r+0x86>
 800d616:	2a25      	cmp	r2, #37	@ 0x25
 800d618:	d1f9      	bne.n	800d60e <_vfiprintf_r+0x7a>
 800d61a:	ebba 0b04 	subs.w	fp, sl, r4
 800d61e:	d00b      	beq.n	800d638 <_vfiprintf_r+0xa4>
 800d620:	465b      	mov	r3, fp
 800d622:	4622      	mov	r2, r4
 800d624:	4629      	mov	r1, r5
 800d626:	4630      	mov	r0, r6
 800d628:	f7ff ffa2 	bl	800d570 <__sfputs_r>
 800d62c:	3001      	adds	r0, #1
 800d62e:	f000 80a7 	beq.w	800d780 <_vfiprintf_r+0x1ec>
 800d632:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d634:	445a      	add	r2, fp
 800d636:	9209      	str	r2, [sp, #36]	@ 0x24
 800d638:	f89a 3000 	ldrb.w	r3, [sl]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	f000 809f 	beq.w	800d780 <_vfiprintf_r+0x1ec>
 800d642:	2300      	movs	r3, #0
 800d644:	f04f 32ff 	mov.w	r2, #4294967295
 800d648:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d64c:	f10a 0a01 	add.w	sl, sl, #1
 800d650:	9304      	str	r3, [sp, #16]
 800d652:	9307      	str	r3, [sp, #28]
 800d654:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d658:	931a      	str	r3, [sp, #104]	@ 0x68
 800d65a:	4654      	mov	r4, sl
 800d65c:	2205      	movs	r2, #5
 800d65e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d662:	4853      	ldr	r0, [pc, #332]	@ (800d7b0 <_vfiprintf_r+0x21c>)
 800d664:	f7ff fed8 	bl	800d418 <memchr>
 800d668:	9a04      	ldr	r2, [sp, #16]
 800d66a:	b9d8      	cbnz	r0, 800d6a4 <_vfiprintf_r+0x110>
 800d66c:	06d1      	lsls	r1, r2, #27
 800d66e:	bf44      	itt	mi
 800d670:	2320      	movmi	r3, #32
 800d672:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d676:	0713      	lsls	r3, r2, #28
 800d678:	bf44      	itt	mi
 800d67a:	232b      	movmi	r3, #43	@ 0x2b
 800d67c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d680:	f89a 3000 	ldrb.w	r3, [sl]
 800d684:	2b2a      	cmp	r3, #42	@ 0x2a
 800d686:	d015      	beq.n	800d6b4 <_vfiprintf_r+0x120>
 800d688:	4654      	mov	r4, sl
 800d68a:	2000      	movs	r0, #0
 800d68c:	f04f 0c0a 	mov.w	ip, #10
 800d690:	9a07      	ldr	r2, [sp, #28]
 800d692:	4621      	mov	r1, r4
 800d694:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d698:	3b30      	subs	r3, #48	@ 0x30
 800d69a:	2b09      	cmp	r3, #9
 800d69c:	d94b      	bls.n	800d736 <_vfiprintf_r+0x1a2>
 800d69e:	b1b0      	cbz	r0, 800d6ce <_vfiprintf_r+0x13a>
 800d6a0:	9207      	str	r2, [sp, #28]
 800d6a2:	e014      	b.n	800d6ce <_vfiprintf_r+0x13a>
 800d6a4:	eba0 0308 	sub.w	r3, r0, r8
 800d6a8:	fa09 f303 	lsl.w	r3, r9, r3
 800d6ac:	4313      	orrs	r3, r2
 800d6ae:	46a2      	mov	sl, r4
 800d6b0:	9304      	str	r3, [sp, #16]
 800d6b2:	e7d2      	b.n	800d65a <_vfiprintf_r+0xc6>
 800d6b4:	9b03      	ldr	r3, [sp, #12]
 800d6b6:	1d19      	adds	r1, r3, #4
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	9103      	str	r1, [sp, #12]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	bfbb      	ittet	lt
 800d6c0:	425b      	neglt	r3, r3
 800d6c2:	f042 0202 	orrlt.w	r2, r2, #2
 800d6c6:	9307      	strge	r3, [sp, #28]
 800d6c8:	9307      	strlt	r3, [sp, #28]
 800d6ca:	bfb8      	it	lt
 800d6cc:	9204      	strlt	r2, [sp, #16]
 800d6ce:	7823      	ldrb	r3, [r4, #0]
 800d6d0:	2b2e      	cmp	r3, #46	@ 0x2e
 800d6d2:	d10a      	bne.n	800d6ea <_vfiprintf_r+0x156>
 800d6d4:	7863      	ldrb	r3, [r4, #1]
 800d6d6:	2b2a      	cmp	r3, #42	@ 0x2a
 800d6d8:	d132      	bne.n	800d740 <_vfiprintf_r+0x1ac>
 800d6da:	9b03      	ldr	r3, [sp, #12]
 800d6dc:	3402      	adds	r4, #2
 800d6de:	1d1a      	adds	r2, r3, #4
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	9203      	str	r2, [sp, #12]
 800d6e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d6e8:	9305      	str	r3, [sp, #20]
 800d6ea:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800d7b4 <_vfiprintf_r+0x220>
 800d6ee:	2203      	movs	r2, #3
 800d6f0:	4650      	mov	r0, sl
 800d6f2:	7821      	ldrb	r1, [r4, #0]
 800d6f4:	f7ff fe90 	bl	800d418 <memchr>
 800d6f8:	b138      	cbz	r0, 800d70a <_vfiprintf_r+0x176>
 800d6fa:	2240      	movs	r2, #64	@ 0x40
 800d6fc:	9b04      	ldr	r3, [sp, #16]
 800d6fe:	eba0 000a 	sub.w	r0, r0, sl
 800d702:	4082      	lsls	r2, r0
 800d704:	4313      	orrs	r3, r2
 800d706:	3401      	adds	r4, #1
 800d708:	9304      	str	r3, [sp, #16]
 800d70a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d70e:	2206      	movs	r2, #6
 800d710:	4829      	ldr	r0, [pc, #164]	@ (800d7b8 <_vfiprintf_r+0x224>)
 800d712:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d716:	f7ff fe7f 	bl	800d418 <memchr>
 800d71a:	2800      	cmp	r0, #0
 800d71c:	d03f      	beq.n	800d79e <_vfiprintf_r+0x20a>
 800d71e:	4b27      	ldr	r3, [pc, #156]	@ (800d7bc <_vfiprintf_r+0x228>)
 800d720:	bb1b      	cbnz	r3, 800d76a <_vfiprintf_r+0x1d6>
 800d722:	9b03      	ldr	r3, [sp, #12]
 800d724:	3307      	adds	r3, #7
 800d726:	f023 0307 	bic.w	r3, r3, #7
 800d72a:	3308      	adds	r3, #8
 800d72c:	9303      	str	r3, [sp, #12]
 800d72e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d730:	443b      	add	r3, r7
 800d732:	9309      	str	r3, [sp, #36]	@ 0x24
 800d734:	e76a      	b.n	800d60c <_vfiprintf_r+0x78>
 800d736:	460c      	mov	r4, r1
 800d738:	2001      	movs	r0, #1
 800d73a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d73e:	e7a8      	b.n	800d692 <_vfiprintf_r+0xfe>
 800d740:	2300      	movs	r3, #0
 800d742:	f04f 0c0a 	mov.w	ip, #10
 800d746:	4619      	mov	r1, r3
 800d748:	3401      	adds	r4, #1
 800d74a:	9305      	str	r3, [sp, #20]
 800d74c:	4620      	mov	r0, r4
 800d74e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d752:	3a30      	subs	r2, #48	@ 0x30
 800d754:	2a09      	cmp	r2, #9
 800d756:	d903      	bls.n	800d760 <_vfiprintf_r+0x1cc>
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d0c6      	beq.n	800d6ea <_vfiprintf_r+0x156>
 800d75c:	9105      	str	r1, [sp, #20]
 800d75e:	e7c4      	b.n	800d6ea <_vfiprintf_r+0x156>
 800d760:	4604      	mov	r4, r0
 800d762:	2301      	movs	r3, #1
 800d764:	fb0c 2101 	mla	r1, ip, r1, r2
 800d768:	e7f0      	b.n	800d74c <_vfiprintf_r+0x1b8>
 800d76a:	ab03      	add	r3, sp, #12
 800d76c:	9300      	str	r3, [sp, #0]
 800d76e:	462a      	mov	r2, r5
 800d770:	4630      	mov	r0, r6
 800d772:	4b13      	ldr	r3, [pc, #76]	@ (800d7c0 <_vfiprintf_r+0x22c>)
 800d774:	a904      	add	r1, sp, #16
 800d776:	f3af 8000 	nop.w
 800d77a:	4607      	mov	r7, r0
 800d77c:	1c78      	adds	r0, r7, #1
 800d77e:	d1d6      	bne.n	800d72e <_vfiprintf_r+0x19a>
 800d780:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d782:	07d9      	lsls	r1, r3, #31
 800d784:	d405      	bmi.n	800d792 <_vfiprintf_r+0x1fe>
 800d786:	89ab      	ldrh	r3, [r5, #12]
 800d788:	059a      	lsls	r2, r3, #22
 800d78a:	d402      	bmi.n	800d792 <_vfiprintf_r+0x1fe>
 800d78c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d78e:	f7fe f971 	bl	800ba74 <__retarget_lock_release_recursive>
 800d792:	89ab      	ldrh	r3, [r5, #12]
 800d794:	065b      	lsls	r3, r3, #25
 800d796:	f53f af1f 	bmi.w	800d5d8 <_vfiprintf_r+0x44>
 800d79a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d79c:	e71e      	b.n	800d5dc <_vfiprintf_r+0x48>
 800d79e:	ab03      	add	r3, sp, #12
 800d7a0:	9300      	str	r3, [sp, #0]
 800d7a2:	462a      	mov	r2, r5
 800d7a4:	4630      	mov	r0, r6
 800d7a6:	4b06      	ldr	r3, [pc, #24]	@ (800d7c0 <_vfiprintf_r+0x22c>)
 800d7a8:	a904      	add	r1, sp, #16
 800d7aa:	f7ff fc43 	bl	800d034 <_printf_i>
 800d7ae:	e7e4      	b.n	800d77a <_vfiprintf_r+0x1e6>
 800d7b0:	0800dff0 	.word	0x0800dff0
 800d7b4:	0800dff6 	.word	0x0800dff6
 800d7b8:	0800dffa 	.word	0x0800dffa
 800d7bc:	00000000 	.word	0x00000000
 800d7c0:	0800d571 	.word	0x0800d571

0800d7c4 <__swbuf_r>:
 800d7c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7c6:	460e      	mov	r6, r1
 800d7c8:	4614      	mov	r4, r2
 800d7ca:	4605      	mov	r5, r0
 800d7cc:	b118      	cbz	r0, 800d7d6 <__swbuf_r+0x12>
 800d7ce:	6a03      	ldr	r3, [r0, #32]
 800d7d0:	b90b      	cbnz	r3, 800d7d6 <__swbuf_r+0x12>
 800d7d2:	f7fd ffe5 	bl	800b7a0 <__sinit>
 800d7d6:	69a3      	ldr	r3, [r4, #24]
 800d7d8:	60a3      	str	r3, [r4, #8]
 800d7da:	89a3      	ldrh	r3, [r4, #12]
 800d7dc:	071a      	lsls	r2, r3, #28
 800d7de:	d501      	bpl.n	800d7e4 <__swbuf_r+0x20>
 800d7e0:	6923      	ldr	r3, [r4, #16]
 800d7e2:	b943      	cbnz	r3, 800d7f6 <__swbuf_r+0x32>
 800d7e4:	4621      	mov	r1, r4
 800d7e6:	4628      	mov	r0, r5
 800d7e8:	f000 f82a 	bl	800d840 <__swsetup_r>
 800d7ec:	b118      	cbz	r0, 800d7f6 <__swbuf_r+0x32>
 800d7ee:	f04f 37ff 	mov.w	r7, #4294967295
 800d7f2:	4638      	mov	r0, r7
 800d7f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d7f6:	6823      	ldr	r3, [r4, #0]
 800d7f8:	6922      	ldr	r2, [r4, #16]
 800d7fa:	b2f6      	uxtb	r6, r6
 800d7fc:	1a98      	subs	r0, r3, r2
 800d7fe:	6963      	ldr	r3, [r4, #20]
 800d800:	4637      	mov	r7, r6
 800d802:	4283      	cmp	r3, r0
 800d804:	dc05      	bgt.n	800d812 <__swbuf_r+0x4e>
 800d806:	4621      	mov	r1, r4
 800d808:	4628      	mov	r0, r5
 800d80a:	f7ff fdb3 	bl	800d374 <_fflush_r>
 800d80e:	2800      	cmp	r0, #0
 800d810:	d1ed      	bne.n	800d7ee <__swbuf_r+0x2a>
 800d812:	68a3      	ldr	r3, [r4, #8]
 800d814:	3b01      	subs	r3, #1
 800d816:	60a3      	str	r3, [r4, #8]
 800d818:	6823      	ldr	r3, [r4, #0]
 800d81a:	1c5a      	adds	r2, r3, #1
 800d81c:	6022      	str	r2, [r4, #0]
 800d81e:	701e      	strb	r6, [r3, #0]
 800d820:	6962      	ldr	r2, [r4, #20]
 800d822:	1c43      	adds	r3, r0, #1
 800d824:	429a      	cmp	r2, r3
 800d826:	d004      	beq.n	800d832 <__swbuf_r+0x6e>
 800d828:	89a3      	ldrh	r3, [r4, #12]
 800d82a:	07db      	lsls	r3, r3, #31
 800d82c:	d5e1      	bpl.n	800d7f2 <__swbuf_r+0x2e>
 800d82e:	2e0a      	cmp	r6, #10
 800d830:	d1df      	bne.n	800d7f2 <__swbuf_r+0x2e>
 800d832:	4621      	mov	r1, r4
 800d834:	4628      	mov	r0, r5
 800d836:	f7ff fd9d 	bl	800d374 <_fflush_r>
 800d83a:	2800      	cmp	r0, #0
 800d83c:	d0d9      	beq.n	800d7f2 <__swbuf_r+0x2e>
 800d83e:	e7d6      	b.n	800d7ee <__swbuf_r+0x2a>

0800d840 <__swsetup_r>:
 800d840:	b538      	push	{r3, r4, r5, lr}
 800d842:	4b29      	ldr	r3, [pc, #164]	@ (800d8e8 <__swsetup_r+0xa8>)
 800d844:	4605      	mov	r5, r0
 800d846:	6818      	ldr	r0, [r3, #0]
 800d848:	460c      	mov	r4, r1
 800d84a:	b118      	cbz	r0, 800d854 <__swsetup_r+0x14>
 800d84c:	6a03      	ldr	r3, [r0, #32]
 800d84e:	b90b      	cbnz	r3, 800d854 <__swsetup_r+0x14>
 800d850:	f7fd ffa6 	bl	800b7a0 <__sinit>
 800d854:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d858:	0719      	lsls	r1, r3, #28
 800d85a:	d422      	bmi.n	800d8a2 <__swsetup_r+0x62>
 800d85c:	06da      	lsls	r2, r3, #27
 800d85e:	d407      	bmi.n	800d870 <__swsetup_r+0x30>
 800d860:	2209      	movs	r2, #9
 800d862:	602a      	str	r2, [r5, #0]
 800d864:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d868:	f04f 30ff 	mov.w	r0, #4294967295
 800d86c:	81a3      	strh	r3, [r4, #12]
 800d86e:	e033      	b.n	800d8d8 <__swsetup_r+0x98>
 800d870:	0758      	lsls	r0, r3, #29
 800d872:	d512      	bpl.n	800d89a <__swsetup_r+0x5a>
 800d874:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d876:	b141      	cbz	r1, 800d88a <__swsetup_r+0x4a>
 800d878:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d87c:	4299      	cmp	r1, r3
 800d87e:	d002      	beq.n	800d886 <__swsetup_r+0x46>
 800d880:	4628      	mov	r0, r5
 800d882:	f7fe f919 	bl	800bab8 <_free_r>
 800d886:	2300      	movs	r3, #0
 800d888:	6363      	str	r3, [r4, #52]	@ 0x34
 800d88a:	89a3      	ldrh	r3, [r4, #12]
 800d88c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d890:	81a3      	strh	r3, [r4, #12]
 800d892:	2300      	movs	r3, #0
 800d894:	6063      	str	r3, [r4, #4]
 800d896:	6923      	ldr	r3, [r4, #16]
 800d898:	6023      	str	r3, [r4, #0]
 800d89a:	89a3      	ldrh	r3, [r4, #12]
 800d89c:	f043 0308 	orr.w	r3, r3, #8
 800d8a0:	81a3      	strh	r3, [r4, #12]
 800d8a2:	6923      	ldr	r3, [r4, #16]
 800d8a4:	b94b      	cbnz	r3, 800d8ba <__swsetup_r+0x7a>
 800d8a6:	89a3      	ldrh	r3, [r4, #12]
 800d8a8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d8ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d8b0:	d003      	beq.n	800d8ba <__swsetup_r+0x7a>
 800d8b2:	4621      	mov	r1, r4
 800d8b4:	4628      	mov	r0, r5
 800d8b6:	f000 f882 	bl	800d9be <__smakebuf_r>
 800d8ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8be:	f013 0201 	ands.w	r2, r3, #1
 800d8c2:	d00a      	beq.n	800d8da <__swsetup_r+0x9a>
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	60a2      	str	r2, [r4, #8]
 800d8c8:	6962      	ldr	r2, [r4, #20]
 800d8ca:	4252      	negs	r2, r2
 800d8cc:	61a2      	str	r2, [r4, #24]
 800d8ce:	6922      	ldr	r2, [r4, #16]
 800d8d0:	b942      	cbnz	r2, 800d8e4 <__swsetup_r+0xa4>
 800d8d2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d8d6:	d1c5      	bne.n	800d864 <__swsetup_r+0x24>
 800d8d8:	bd38      	pop	{r3, r4, r5, pc}
 800d8da:	0799      	lsls	r1, r3, #30
 800d8dc:	bf58      	it	pl
 800d8de:	6962      	ldrpl	r2, [r4, #20]
 800d8e0:	60a2      	str	r2, [r4, #8]
 800d8e2:	e7f4      	b.n	800d8ce <__swsetup_r+0x8e>
 800d8e4:	2000      	movs	r0, #0
 800d8e6:	e7f7      	b.n	800d8d8 <__swsetup_r+0x98>
 800d8e8:	200002e0 	.word	0x200002e0

0800d8ec <_raise_r>:
 800d8ec:	291f      	cmp	r1, #31
 800d8ee:	b538      	push	{r3, r4, r5, lr}
 800d8f0:	4605      	mov	r5, r0
 800d8f2:	460c      	mov	r4, r1
 800d8f4:	d904      	bls.n	800d900 <_raise_r+0x14>
 800d8f6:	2316      	movs	r3, #22
 800d8f8:	6003      	str	r3, [r0, #0]
 800d8fa:	f04f 30ff 	mov.w	r0, #4294967295
 800d8fe:	bd38      	pop	{r3, r4, r5, pc}
 800d900:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d902:	b112      	cbz	r2, 800d90a <_raise_r+0x1e>
 800d904:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d908:	b94b      	cbnz	r3, 800d91e <_raise_r+0x32>
 800d90a:	4628      	mov	r0, r5
 800d90c:	f000 f830 	bl	800d970 <_getpid_r>
 800d910:	4622      	mov	r2, r4
 800d912:	4601      	mov	r1, r0
 800d914:	4628      	mov	r0, r5
 800d916:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d91a:	f000 b817 	b.w	800d94c <_kill_r>
 800d91e:	2b01      	cmp	r3, #1
 800d920:	d00a      	beq.n	800d938 <_raise_r+0x4c>
 800d922:	1c59      	adds	r1, r3, #1
 800d924:	d103      	bne.n	800d92e <_raise_r+0x42>
 800d926:	2316      	movs	r3, #22
 800d928:	6003      	str	r3, [r0, #0]
 800d92a:	2001      	movs	r0, #1
 800d92c:	e7e7      	b.n	800d8fe <_raise_r+0x12>
 800d92e:	2100      	movs	r1, #0
 800d930:	4620      	mov	r0, r4
 800d932:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d936:	4798      	blx	r3
 800d938:	2000      	movs	r0, #0
 800d93a:	e7e0      	b.n	800d8fe <_raise_r+0x12>

0800d93c <raise>:
 800d93c:	4b02      	ldr	r3, [pc, #8]	@ (800d948 <raise+0xc>)
 800d93e:	4601      	mov	r1, r0
 800d940:	6818      	ldr	r0, [r3, #0]
 800d942:	f7ff bfd3 	b.w	800d8ec <_raise_r>
 800d946:	bf00      	nop
 800d948:	200002e0 	.word	0x200002e0

0800d94c <_kill_r>:
 800d94c:	b538      	push	{r3, r4, r5, lr}
 800d94e:	2300      	movs	r3, #0
 800d950:	4d06      	ldr	r5, [pc, #24]	@ (800d96c <_kill_r+0x20>)
 800d952:	4604      	mov	r4, r0
 800d954:	4608      	mov	r0, r1
 800d956:	4611      	mov	r1, r2
 800d958:	602b      	str	r3, [r5, #0]
 800d95a:	f7f4 fbc2 	bl	80020e2 <_kill>
 800d95e:	1c43      	adds	r3, r0, #1
 800d960:	d102      	bne.n	800d968 <_kill_r+0x1c>
 800d962:	682b      	ldr	r3, [r5, #0]
 800d964:	b103      	cbz	r3, 800d968 <_kill_r+0x1c>
 800d966:	6023      	str	r3, [r4, #0]
 800d968:	bd38      	pop	{r3, r4, r5, pc}
 800d96a:	bf00      	nop
 800d96c:	200012b4 	.word	0x200012b4

0800d970 <_getpid_r>:
 800d970:	f7f4 bbb0 	b.w	80020d4 <_getpid>

0800d974 <__swhatbuf_r>:
 800d974:	b570      	push	{r4, r5, r6, lr}
 800d976:	460c      	mov	r4, r1
 800d978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d97c:	4615      	mov	r5, r2
 800d97e:	2900      	cmp	r1, #0
 800d980:	461e      	mov	r6, r3
 800d982:	b096      	sub	sp, #88	@ 0x58
 800d984:	da0c      	bge.n	800d9a0 <__swhatbuf_r+0x2c>
 800d986:	89a3      	ldrh	r3, [r4, #12]
 800d988:	2100      	movs	r1, #0
 800d98a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d98e:	bf14      	ite	ne
 800d990:	2340      	movne	r3, #64	@ 0x40
 800d992:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d996:	2000      	movs	r0, #0
 800d998:	6031      	str	r1, [r6, #0]
 800d99a:	602b      	str	r3, [r5, #0]
 800d99c:	b016      	add	sp, #88	@ 0x58
 800d99e:	bd70      	pop	{r4, r5, r6, pc}
 800d9a0:	466a      	mov	r2, sp
 800d9a2:	f000 f849 	bl	800da38 <_fstat_r>
 800d9a6:	2800      	cmp	r0, #0
 800d9a8:	dbed      	blt.n	800d986 <__swhatbuf_r+0x12>
 800d9aa:	9901      	ldr	r1, [sp, #4]
 800d9ac:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d9b0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d9b4:	4259      	negs	r1, r3
 800d9b6:	4159      	adcs	r1, r3
 800d9b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d9bc:	e7eb      	b.n	800d996 <__swhatbuf_r+0x22>

0800d9be <__smakebuf_r>:
 800d9be:	898b      	ldrh	r3, [r1, #12]
 800d9c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d9c2:	079d      	lsls	r5, r3, #30
 800d9c4:	4606      	mov	r6, r0
 800d9c6:	460c      	mov	r4, r1
 800d9c8:	d507      	bpl.n	800d9da <__smakebuf_r+0x1c>
 800d9ca:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d9ce:	6023      	str	r3, [r4, #0]
 800d9d0:	6123      	str	r3, [r4, #16]
 800d9d2:	2301      	movs	r3, #1
 800d9d4:	6163      	str	r3, [r4, #20]
 800d9d6:	b003      	add	sp, #12
 800d9d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d9da:	466a      	mov	r2, sp
 800d9dc:	ab01      	add	r3, sp, #4
 800d9de:	f7ff ffc9 	bl	800d974 <__swhatbuf_r>
 800d9e2:	9f00      	ldr	r7, [sp, #0]
 800d9e4:	4605      	mov	r5, r0
 800d9e6:	4639      	mov	r1, r7
 800d9e8:	4630      	mov	r0, r6
 800d9ea:	f7fe fc09 	bl	800c200 <_malloc_r>
 800d9ee:	b948      	cbnz	r0, 800da04 <__smakebuf_r+0x46>
 800d9f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d9f4:	059a      	lsls	r2, r3, #22
 800d9f6:	d4ee      	bmi.n	800d9d6 <__smakebuf_r+0x18>
 800d9f8:	f023 0303 	bic.w	r3, r3, #3
 800d9fc:	f043 0302 	orr.w	r3, r3, #2
 800da00:	81a3      	strh	r3, [r4, #12]
 800da02:	e7e2      	b.n	800d9ca <__smakebuf_r+0xc>
 800da04:	89a3      	ldrh	r3, [r4, #12]
 800da06:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800da0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da0e:	81a3      	strh	r3, [r4, #12]
 800da10:	9b01      	ldr	r3, [sp, #4]
 800da12:	6020      	str	r0, [r4, #0]
 800da14:	b15b      	cbz	r3, 800da2e <__smakebuf_r+0x70>
 800da16:	4630      	mov	r0, r6
 800da18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da1c:	f000 f81e 	bl	800da5c <_isatty_r>
 800da20:	b128      	cbz	r0, 800da2e <__smakebuf_r+0x70>
 800da22:	89a3      	ldrh	r3, [r4, #12]
 800da24:	f023 0303 	bic.w	r3, r3, #3
 800da28:	f043 0301 	orr.w	r3, r3, #1
 800da2c:	81a3      	strh	r3, [r4, #12]
 800da2e:	89a3      	ldrh	r3, [r4, #12]
 800da30:	431d      	orrs	r5, r3
 800da32:	81a5      	strh	r5, [r4, #12]
 800da34:	e7cf      	b.n	800d9d6 <__smakebuf_r+0x18>
	...

0800da38 <_fstat_r>:
 800da38:	b538      	push	{r3, r4, r5, lr}
 800da3a:	2300      	movs	r3, #0
 800da3c:	4d06      	ldr	r5, [pc, #24]	@ (800da58 <_fstat_r+0x20>)
 800da3e:	4604      	mov	r4, r0
 800da40:	4608      	mov	r0, r1
 800da42:	4611      	mov	r1, r2
 800da44:	602b      	str	r3, [r5, #0]
 800da46:	f7f4 fbab 	bl	80021a0 <_fstat>
 800da4a:	1c43      	adds	r3, r0, #1
 800da4c:	d102      	bne.n	800da54 <_fstat_r+0x1c>
 800da4e:	682b      	ldr	r3, [r5, #0]
 800da50:	b103      	cbz	r3, 800da54 <_fstat_r+0x1c>
 800da52:	6023      	str	r3, [r4, #0]
 800da54:	bd38      	pop	{r3, r4, r5, pc}
 800da56:	bf00      	nop
 800da58:	200012b4 	.word	0x200012b4

0800da5c <_isatty_r>:
 800da5c:	b538      	push	{r3, r4, r5, lr}
 800da5e:	2300      	movs	r3, #0
 800da60:	4d05      	ldr	r5, [pc, #20]	@ (800da78 <_isatty_r+0x1c>)
 800da62:	4604      	mov	r4, r0
 800da64:	4608      	mov	r0, r1
 800da66:	602b      	str	r3, [r5, #0]
 800da68:	f7f4 fba9 	bl	80021be <_isatty>
 800da6c:	1c43      	adds	r3, r0, #1
 800da6e:	d102      	bne.n	800da76 <_isatty_r+0x1a>
 800da70:	682b      	ldr	r3, [r5, #0]
 800da72:	b103      	cbz	r3, 800da76 <_isatty_r+0x1a>
 800da74:	6023      	str	r3, [r4, #0]
 800da76:	bd38      	pop	{r3, r4, r5, pc}
 800da78:	200012b4 	.word	0x200012b4

0800da7c <_init>:
 800da7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da7e:	bf00      	nop
 800da80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da82:	bc08      	pop	{r3}
 800da84:	469e      	mov	lr, r3
 800da86:	4770      	bx	lr

0800da88 <_fini>:
 800da88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da8a:	bf00      	nop
 800da8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da8e:	bc08      	pop	{r3}
 800da90:	469e      	mov	lr, r3
 800da92:	4770      	bx	lr
